uint64_t sub_1001D8E24(uint64_t result, void *a2)
{
  void *v2;
  uint64_t v3;
  double *v4;
  void *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;

  if ((void *)result != a2)
  {
    v2 = (void *)(result + 24);
    if ((void *)(result + 24) != a2)
    {
      v3 = 0;
      v4 = (double *)result;
      do
      {
        v5 = v2;
        v6 = v4[4];
        if (v6 < v4[1])
        {
          v7 = *v2;
          v8 = *((void *)v4 + 5);
          v9 = v3;
          while (1)
          {
            v10 = (double *)(result + v9);
            v10[3] = *(double *)(result + v9);
            v10[4] = *(double *)(result + v9 + 8);
            v10[5] = *(double *)(result + v9 + 16);
            if (!v9) {
              break;
            }
            v9 -= 24;
            if (v6 >= *(v10 - 2))
            {
              v11 = result + v9 + 24;
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *(void *)v11 = v7;
          *(double *)(v11 + 8) = v6;
          *(void *)(v11 + 16) = v8;
        }
        v2 = v5 + 3;
        v3 += 24;
        v4 = (double *)v5;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

void *sub_1001D8EC4(void *result, void *a2)
{
  if (result != a2)
  {
    v2 = result + 3;
    if (result + 3 != a2)
    {
      v3 = (double *)(result + 5);
      do
      {
        v4 = v2;
        double v5 = *((double *)result + 4);
        if (v5 < *((double *)result + 1))
        {
          uint64_t v6 = *v2;
          uint64_t v7 = result[5];
          v8 = v3;
          do
          {
            v9 = v8;
            *(v8 - 2) = *(v8 - 5);
            *(v8 - 1) = *(v8 - 4);
            uint64_t v10 = *((void *)v8 - 3);
            v8 -= 3;
            *(void *)v9 = v10;
          }
          while (v5 < *(v9 - 7));
          *((void *)v8 - 2) = v6;
          *(v8 - 1) = v5;
          *(void *)v8 = v7;
        }
        v2 = v4 + 3;
        v3 += 3;
        result = v4;
      }
      while (v4 + 3 != a2);
    }
  }
  return result;
}

uint64_t sub_1001D8F48(void *a1, uint64_t *a2, uint64_t *a3)
{
  double v3 = *((double *)a2 + 1);
  double v4 = *((double *)a3 + 1);
  if (v3 >= *((double *)a1 + 1))
  {
    if (v4 >= v3) {
      return 0;
    }
    double v10 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v10;
    v8 = a2 + 2;
    uint64_t v11 = a2[2];
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    a2[2] = a3[2];
    a3[2] = v11;
    if (*((double *)a2 + 1) < *((double *)a1 + 1))
    {
      double v13 = *(double *)a1;
      *a1 = *a2;
      *(double *)a2 = v13;
      uint64_t v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      double v5 = a1 + 2;
LABEL_9:
      uint64_t result = 2;
      goto LABEL_10;
    }
  }
  else
  {
    double v5 = a1 + 2;
    double v6 = *(double *)a1;
    if (v4 < v3)
    {
      *a1 = *a3;
      *(double *)a3 = v6;
      uint64_t v7 = a1[1];
      a1[1] = a3[1];
      a3[1] = v7;
      v8 = a3 + 2;
      uint64_t result = 1;
LABEL_10:
      uint64_t v20 = *v5;
      *double v5 = *v8;
      uint64_t *v8 = v20;
      return result;
    }
    *a1 = *a2;
    *(double *)a2 = v6;
    double v15 = *((double *)a1 + 1);
    a1[1] = a2[1];
    double v5 = a2 + 2;
    uint64_t v16 = a2[2];
    *((double *)a2 + 1) = v15;
    uint64_t v17 = a1[2];
    a1[2] = v16;
    a2[2] = v17;
    if (*((double *)a3 + 1) < v15)
    {
      double v18 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v18;
      uint64_t v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      v8 = a3 + 2;
      goto LABEL_9;
    }
  }
  return 1;
}

unint64_t sub_1001D9090(double *a1, double *a2)
{
  double v2 = a1[1];
  if (v2 >= *(a2 - 2))
  {
    unint64_t v6 = (unint64_t)(a1 + 3);
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      double v7 = *(double *)(v6 + 8);
      v6 += 24;
    }
    while (v2 >= v7);
  }
  else
  {
    double v3 = a1;
    do
    {
      unint64_t v4 = (unint64_t)(v3 + 3);
      double v5 = v3[4];
      v3 += 3;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 3;
      double v9 = *(a2 - 2);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  double v10 = *a1;
  uint64_t v11 = *((void *)a1 + 2);
  while (v4 < (unint64_t)v8)
  {
    uint64_t v12 = *(void *)v4;
    *(double *)unint64_t v4 = *v8;
    *(void *)v8 = v12;
    uint64_t v13 = *(void *)(v4 + 8);
    *(double *)(v4 + 8) = v8[1];
    *((void *)v8 + 1) = v13;
    uint64_t v14 = *(void *)(v4 + 16);
    *(double *)(v4 + 16) = v8[2];
    *((void *)v8 + 2) = v14;
    do
    {
      double v15 = *(double *)(v4 + 32);
      v4 += 24;
    }
    while (v2 >= v15);
    do
    {
      double v16 = *(v8 - 2);
      v8 -= 3;
    }
    while (v2 < v16);
  }
  if ((double *)(v4 - 24) != a1)
  {
    *a1 = *(double *)(v4 - 24);
    a1[1] = *(double *)(v4 - 16);
    a1[2] = *(double *)(v4 - 8);
  }
  *(double *)(v4 - 24) = v10;
  *(double *)(v4 - 16) = v2;
  *(void *)(v4 - 8) = v11;
  return v4;
}

unint64_t sub_1001D919C(double *a1, double *a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  uint64_t v5 = *((void *)a1 + 2);
  do
  {
    double v6 = a1[v2 + 4];
    v2 += 3;
  }
  while (v6 < v4);
  unint64_t v7 = (unint64_t)&a1[v2];
  if (v2 == 3)
  {
    while (v7 < (unint64_t)a2)
    {
      v8 = a2 - 3;
      double v10 = *(a2 - 2);
      a2 -= 3;
      if (v10 < v4) {
        goto LABEL_9;
      }
    }
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 3;
      double v9 = *(a2 - 2);
      a2 -= 3;
    }
    while (v9 >= v4);
  }
LABEL_9:
  unint64_t v11 = (unint64_t)&a1[v2];
  if (v7 < (unint64_t)v8)
  {
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *(void *)v11;
      *(double *)unint64_t v11 = *v12;
      *(void *)uint64_t v12 = v13;
      uint64_t v14 = *(void *)(v11 + 8);
      *(double *)(v11 + 8) = v12[1];
      *((void *)v12 + 1) = v14;
      uint64_t v15 = *(void *)(v11 + 16);
      *(double *)(v11 + 16) = v12[2];
      *((void *)v12 + 2) = v15;
      do
      {
        double v16 = *(double *)(v11 + 32);
        v11 += 24;
      }
      while (v16 < v4);
      do
      {
        double v17 = *(v12 - 2);
        v12 -= 3;
      }
      while (v17 >= v4);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((double *)(v11 - 24) != a1)
  {
    *a1 = *(double *)(v11 - 24);
    a1[1] = *(double *)(v11 - 16);
    a1[2] = *(double *)(v11 - 8);
  }
  *(double *)(v11 - 24) = v3;
  *(double *)(v11 - 16) = v4;
  *(void *)(v11 - 8) = v5;
  return v11 - 24;
}

BOOL sub_1001D92AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v6;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v7;
        uint64_t v8 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      sub_1001D8F48((void *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1001D9498(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      sub_1001D9594(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (double *)(a1 + 72), (double *)(a2 - 24));
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      sub_1001D8F48((void *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 72) = *(void *)(a1 + v16 + 48);
        *(void *)(v17 + 80) = *(void *)(a1 + v16 + 56);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

double sub_1001D9498(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  sub_1001D8F48((void *)a1, a2, a3);
  double result = *(double *)(a4 + 8);
  if (result < *((double *)a3 + 1))
  {
    uint64_t v9 = *a3;
    *a3 = *(void *)a4;
    *(void *)a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    uint64_t v11 = a3[2];
    a3[2] = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v11;
    double result = *((double *)a3 + 1);
    if (result < *((double *)a2 + 1))
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      uint64_t v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      double result = *((double *)a2 + 1);
      if (result < *(double *)(a1 + 8))
      {
        uint64_t v15 = *(void *)a1;
        *(void *)a1 = *a2;
        *a2 = v15;
        double result = *(double *)(a1 + 8);
        *(void *)(a1 + 8) = a2[1];
        *((double *)a2 + 1) = result;
        uint64_t v16 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = a2[2];
        a2[2] = v16;
      }
    }
  }
  return result;
}

double sub_1001D9594(uint64_t a1, uint64_t *a2, uint64_t *a3, double *a4, double *a5)
{
  sub_1001D9498(a1, a2, a3, (uint64_t)a4);
  double result = a5[1];
  if (result < a4[1])
  {
    double v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = *((void *)a4 + 1);
    a4[1] = a5[1];
    *((void *)a5 + 1) = v12;
    uint64_t v13 = *((void *)a4 + 2);
    a4[2] = a5[2];
    *((void *)a5 + 2) = v13;
    double result = a4[1];
    if (result < *((double *)a3 + 1))
    {
      uint64_t v14 = *a3;
      *a3 = *(void *)a4;
      *(void *)a4 = v14;
      uint64_t v15 = a3[1];
      a3[1] = *((void *)a4 + 1);
      *((void *)a4 + 1) = v15;
      uint64_t v16 = a3[2];
      a3[2] = *((void *)a4 + 2);
      *((void *)a4 + 2) = v16;
      double result = *((double *)a3 + 1);
      if (result < *((double *)a2 + 1))
      {
        uint64_t v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        uint64_t v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        uint64_t v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        double result = *((double *)a2 + 1);
        if (result < *(double *)(a1 + 8))
        {
          uint64_t v20 = *(void *)a1;
          *(void *)a1 = *a2;
          *a2 = v20;
          double result = *(double *)(a1 + 8);
          *(void *)(a1 + 8) = a2[1];
          *((double *)a2 + 1) = result;
          uint64_t v21 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = a2[2];
          a2[2] = v21;
        }
      }
    }
  }
  return result;
}

double *sub_1001D96DC(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  if ((double *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (double *)(a1 + 24 * v10);
      do
      {
        sub_1001D98A8(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (v14[1] < *(double *)(a1 + 8))
        {
          double v15 = *v14;
          *uint64_t v14 = *(double *)a1;
          *(double *)a1 = v15;
          uint64_t v16 = *((void *)v14 + 1);
          v14[1] = *(double *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          uint64_t v17 = *((void *)v14 + 2);
          v14[2] = *(double *)(a1 + 16);
          *(void *)(a1 + 16) = v17;
          sub_1001D98A8(a1, a4, v9, (double *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      uint64_t v19 = a2 - 3;
      do
      {
        double v20 = *(double *)a1;
        uint64_t v21 = *(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a1 + 16);
        sub_1001D99A0(a1, a4, v18);
        if (v19 == v23)
        {
          double *v23 = v20;
          *((void *)v23 + 1) = v21;
          *((void *)v23 + 2) = v22;
        }
        else
        {
          double *v23 = *v19;
          v23[1] = v19[1];
          v23[2] = v19[2];
          *uint64_t v19 = v20;
          *((void *)v19 + 1) = v21;
          *((void *)v19 + 2) = v22;
          sub_1001D9A1C(a1, (uint64_t)(v23 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - a1 + 24) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1001D98A8(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      uint64_t v6 = (double *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3 && v6[1] < v6[4])
      {
        v6 += 3;
        uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
      }
      double v7 = a4[1];
      if (v6[1] >= v7)
      {
        double v8 = *a4;
        uint64_t v9 = *((void *)a4 + 2);
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          *unint64_t v10 = *v6;
          v10[1] = v6[1];
          v10[2] = v6[2];
          if (v4 < v5) {
            break;
          }
          uint64_t v11 = 2 * v5;
          uint64_t v5 = (2 * v5) | 1;
          uint64_t v6 = (double *)(result + 24 * v5);
          uint64_t v12 = v11 + 2;
          if (v12 < a3 && v6[1] < v6[4])
          {
            v6 += 3;
            uint64_t v5 = v12;
          }
        }
        while (v6[1] >= v7);
        *a4 = v8;
        a4[1] = v7;
        *((void *)a4 + 2) = v9;
      }
    }
  }
  return result;
}

double sub_1001D99A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 24 * v3 + 24;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3 && *(double *)(a1 + 8) < *(double *)(a1 + 32))
    {
      a1 += 24;
      uint64_t v3 = v8;
    }
    *(void *)uint64_t v6 = *(void *)a1;
    double result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
    *(void *)(v6 + 16) = *(void *)(a1 + 16);
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1001D9A1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (double *)(result + 24 * v4);
    double v6 = *(double *)(a2 - 16);
    if (v5[1] < v6)
    {
      uint64_t v9 = *(void *)(a2 - 24);
      uint64_t v7 = (double *)(a2 - 24);
      uint64_t v8 = v9;
      uint64_t v10 = *((void *)v7 + 2);
      do
      {
        uint64_t v11 = v7;
        uint64_t v7 = v5;
        *uint64_t v11 = *v5;
        v11[1] = v5[1];
        v11[2] = v5[2];
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (double *)(result + 24 * v4);
      }
      while (v5[1] < v6);
      *(void *)uint64_t v7 = v8;
      v7[1] = v6;
      *((void *)v7 + 2) = v10;
    }
  }
  return result;
}

void sub_1001D9A98(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1001D9AEC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1001D9AEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  a1[1] = v2;
}

uint64_t sub_1001D9B3C(uint64_t *a1, char **a2, uint64_t a3, void *a4, void *a5, _DWORD *a6)
{
  uint64_t v7 = *a1;
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x492492492492492) {
    sub_1001D7FD4();
  }
  uint64_t v15 = (uint64_t)(a1 + 2);
  unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v7) >> 3);
  if (2 * v16 > v9) {
    unint64_t v9 = 2 * v16;
  }
  if (v16 >= 0x249249249249249) {
    unint64_t v17 = 0x492492492492492;
  }
  else {
    unint64_t v17 = v9;
  }
  v26 = a1 + 2;
  if (v17) {
    int64_t v18 = (char *)sub_10017EA6C(v15, v17);
  }
  else {
    int64_t v18 = 0;
  }
  uint64_t v22 = v18;
  v23 = &v18[56 * v8];
  v24 = v23;
  v25 = &v18[56 * v17];
  uint64_t v19 = sub_100134750(v23, *a2);
  v19[3] = a3;
  v19[4] = *a4;
  v19[5] = *a5;
  *((_DWORD *)v19 + 12) = *a6;
  v24 += 56;
  sub_1001D9C98(a1, &v22);
  uint64_t v20 = a1[1];
  sub_1001D9E4C((uint64_t)&v22);
  return v20;
}

void sub_1001D9C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001D9E4C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D9C98(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001D9D10((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1001D9D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1001D9DCC((uint64_t)v11);
  return v9;
}

uint64_t sub_1001D9DCC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001D9E04(a1);
  }
  return a1;
}

void sub_1001D9E04(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 56;
  }
}

uint64_t sub_1001D9E4C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1001D9E84(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 7;
      *(void *)(a1 + 16) = v2 - 7;
      if (*((char *)v2 - 33) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_1001D9EDC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1001D7FA0();
  }
  return operator new(32 * a2);
}

void sub_1001D9F14(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_1001DA334(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 32);
    if ((void *)(result + 32) != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = (double *)result;
      do
      {
        char v5 = v2;
        double v6 = v4[5];
        if (v6 < v4[1])
        {
          uint64_t v7 = *v2;
          uint64_t v8 = *((void *)v4 + 6);
          uint64_t v9 = v3;
          int v10 = *((_DWORD *)v4 + 14);
          while (1)
          {
            uint64_t v11 = result + v9;
            *(void *)(v11 + 32) = *(void *)(result + v9);
            *(void *)(v11 + 40) = *(void *)(result + v9 + 8);
            *(void *)(v11 + 48) = *(void *)(result + v9 + 16);
            *(_DWORD *)(v11 + 56) = *(_DWORD *)(result + v9 + 24);
            if (!v9) {
              break;
            }
            v9 -= 32;
            if (v6 >= *(double *)(v11 - 24))
            {
              uint64_t v12 = result + v9 + 32;
              goto LABEL_10;
            }
          }
          uint64_t v12 = result;
LABEL_10:
          *(void *)uint64_t v12 = v7;
          *(double *)(v12 + 8) = v6;
          *(void *)(v12 + 16) = v8;
          *(_DWORD *)(v12 + 24) = v10;
        }
        uint64_t v2 = v5 + 4;
        v3 += 32;
        unint64_t v4 = (double *)v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

void *sub_1001DA3E4(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 4;
    if (result + 4 != a2)
    {
      uint64_t v3 = (double *)(result + 7);
      do
      {
        unint64_t v4 = v2;
        double v5 = *((double *)result + 5);
        if (v5 < *((double *)result + 1))
        {
          uint64_t v6 = *v2;
          uint64_t v7 = result[6];
          uint64_t v8 = v3;
          int v9 = *((_DWORD *)result + 14);
          do
          {
            int v10 = v8;
            *(v8 - 3) = *(v8 - 7);
            *(v8 - 2) = *(v8 - 6);
            *(v8 - 1) = *(v8 - 5);
            int v11 = *((_DWORD *)v8 - 8);
            v8 -= 4;
            *(_DWORD *)int v10 = v11;
          }
          while (v5 < *(v10 - 10));
          *((void *)v8 - 3) = v6;
          *(v8 - 2) = v5;
          *((void *)v8 - 1) = v7;
          *(_DWORD *)uint64_t v8 = v9;
        }
        uint64_t v2 = v4 + 4;
        v3 += 4;
        uint64_t result = v4;
      }
      while (v4 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_1001DA478(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  double v3 = *((double *)a2 + 1);
  double v4 = *((double *)a3 + 1);
  if (v3 >= *((double *)a1 + 1))
  {
    if (v4 >= v3) {
      return 0;
    }
    double v11 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v11;
    int v9 = (int *)(a2 + 3);
    LODWORD(v11) = *((_DWORD *)a2 + 6);
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    uint64_t v13 = a2[2];
    a2[2] = a3[2];
    a3[2] = v13;
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = LODWORD(v11);
    if (*((double *)a2 + 1) < *((double *)a1 + 1))
    {
      double v14 = *(double *)a1;
      *a1 = *a2;
      *(double *)a2 = v14;
      uint64_t v15 = a1[1];
      a1[1] = a2[1];
      a2[1] = v15;
      uint64_t v16 = a1[2];
      a1[2] = a2[2];
      a2[2] = v16;
      double v5 = (int *)(a1 + 3);
LABEL_9:
      uint64_t result = 2;
      goto LABEL_10;
    }
  }
  else
  {
    double v5 = (int *)(a1 + 3);
    double v6 = *(double *)a1;
    if (v4 < v3)
    {
      *a1 = *a3;
      *(double *)a3 = v6;
      uint64_t v7 = a1[1];
      a1[1] = a3[1];
      a3[1] = v7;
      uint64_t v8 = a1[2];
      a1[2] = a3[2];
      a3[2] = v8;
      int v9 = (int *)(a3 + 3);
      uint64_t result = 1;
LABEL_10:
      int v23 = *v5;
      *double v5 = *v9;
      int *v9 = v23;
      return result;
    }
    *a1 = *a2;
    *(double *)a2 = v6;
    double v17 = *((double *)a1 + 1);
    a1[1] = a2[1];
    *((double *)a2 + 1) = v17;
    uint64_t v18 = a1[2];
    a1[2] = a2[2];
    double v5 = (int *)(a2 + 3);
    int v19 = *((_DWORD *)a2 + 6);
    a2[2] = v18;
    LODWORD(v18) = *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v19;
    *((_DWORD *)a2 + 6) = v18;
    if (*((double *)a3 + 1) < v17)
    {
      double v20 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v20;
      uint64_t v21 = a2[1];
      a2[1] = a3[1];
      a3[1] = v21;
      uint64_t v22 = a2[2];
      a2[2] = a3[2];
      a3[2] = v22;
      int v9 = (int *)(a3 + 3);
      goto LABEL_9;
    }
  }
  return 1;
}

double *sub_1001DA610(uint64_t *a1, unint64_t a2)
{
  double v2 = *((double *)a1 + 1);
  if (v2 >= *(double *)(a2 - 24))
  {
    double v6 = (double *)(a1 + 4);
    do
    {
      double v4 = v6;
      if ((unint64_t)v6 >= a2) {
        break;
      }
      double v7 = v6[1];
      v6 += 4;
    }
    while (v2 >= v7);
  }
  else
  {
    double v3 = (double *)a1;
    do
    {
      double v4 = v3 + 4;
      double v5 = v3[5];
      v3 += 4;
    }
    while (v2 >= v5);
  }
  if ((unint64_t)v4 >= a2)
  {
    unint64_t v8 = a2;
  }
  else
  {
    do
    {
      unint64_t v8 = a2 - 32;
      double v9 = *(double *)(a2 - 24);
      a2 -= 32;
    }
    while (v2 < v9);
  }
  double v10 = *(double *)a1;
  uint64_t v11 = a1[2];
  int v12 = *((_DWORD *)a1 + 6);
  while ((unint64_t)v4 < v8)
  {
    uint64_t v13 = *(void *)v4;
    double *v4 = *(double *)v8;
    *(void *)unint64_t v8 = v13;
    uint64_t v14 = *((void *)v4 + 1);
    v4[1] = *(double *)(v8 + 8);
    *(void *)(v8 + 8) = v14;
    uint64_t v15 = *((void *)v4 + 2);
    v4[2] = *(double *)(v8 + 16);
    *(void *)(v8 + 16) = v15;
    LODWORD(v15) = *((_DWORD *)v4 + 6);
    *((_DWORD *)v4 + 6) = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v15;
    do
    {
      double v16 = v4[5];
      v4 += 4;
    }
    while (v2 >= v16);
    do
    {
      double v17 = *(double *)(v8 - 24);
      v8 -= 32;
    }
    while (v2 < v17);
  }
  if (v4 - 4 != (double *)a1)
  {
    *a1 = *((void *)v4 - 4);
    a1[1] = *((void *)v4 - 3);
    a1[2] = *((void *)v4 - 2);
    *((_DWORD *)a1 + 6) = *((_DWORD *)v4 - 2);
  }
  *(v4 - 4) = v10;
  *(v4 - 3) = v2;
  *((void *)v4 - 2) = v11;
  *((_DWORD *)v4 - 2) = v12;
  return v4;
}

uint64_t *sub_1001DA73C(double *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  uint64_t v5 = *((void *)a1 + 2);
  int v6 = *((_DWORD *)a1 + 6);
  do
  {
    double v7 = a1[v2 + 5];
    v2 += 4;
  }
  while (v7 < v4);
  unint64_t v8 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    while (v8 < a2)
    {
      unint64_t v9 = a2 - 32;
      double v11 = *(double *)(a2 - 24);
      a2 -= 32;
      if (v11 < v4) {
        goto LABEL_9;
      }
    }
    unint64_t v9 = a2;
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 32;
      double v10 = *(double *)(a2 - 24);
      a2 -= 32;
    }
    while (v10 >= v4);
  }
LABEL_9:
  int v12 = (uint64_t *)&a1[v2];
  if (v8 < v9)
  {
    unint64_t v13 = v9;
    do
    {
      uint64_t v14 = *v12;
      *int v12 = *(void *)v13;
      *(void *)unint64_t v13 = v14;
      uint64_t v15 = v12[1];
      v12[1] = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = v15;
      uint64_t v16 = v12[2];
      v12[2] = *(void *)(v13 + 16);
      *(void *)(v13 + 16) = v16;
      LODWORD(v16) = *((_DWORD *)v12 + 6);
      *((_DWORD *)v12 + 6) = *(_DWORD *)(v13 + 24);
      *(_DWORD *)(v13 + 24) = v16;
      do
      {
        double v17 = *((double *)v12 + 5);
        v12 += 4;
      }
      while (v17 < v4);
      do
      {
        double v18 = *(double *)(v13 - 24);
        v13 -= 32;
      }
      while (v18 >= v4);
    }
    while ((unint64_t)v12 < v13);
  }
  if (v12 - 4 != (uint64_t *)a1)
  {
    *(void *)a1 = *(v12 - 4);
    *((void *)a1 + 1) = *(v12 - 3);
    *((void *)a1 + 2) = *(v12 - 2);
    *((_DWORD *)a1 + 6) = *((_DWORD *)v12 - 2);
  }
  *((double *)v12 - 4) = v3;
  *((double *)v12 - 3) = v4;
  *(v12 - 2) = v5;
  *((_DWORD *)v12 - 2) = v6;
  return v12 - 4;
}

BOOL sub_1001DA86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 24) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 32);
        *(void *)(a2 - 32) = v6;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v7;
        uint64_t v8 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_1001DA478((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a2 - 32));
      return 1;
    case 4:
      sub_1001DAA6C(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      sub_1001DAB98(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v9 = a1 + 64;
      sub_1001DA478((uint64_t *)a1, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 64));
      uint64_t v10 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v16 = v11;
      int v17 = *(_DWORD *)(v10 + 24);
      while (1)
      {
        uint64_t v18 = a1 + v16;
        *(void *)(v18 + 96) = *(void *)(a1 + v16 + 64);
        *(void *)(v18 + 104) = *(void *)(a1 + v16 + 72);
        *(void *)(v18 + 112) = *(void *)(a1 + v16 + 80);
        *(_DWORD *)(v18 + 120) = *(_DWORD *)(a1 + v16 + 88);
        if (v16 == -64) {
          break;
        }
        v16 -= 32;
        if (v13 >= *(double *)(v18 + 40))
        {
          uint64_t v19 = a1 + v16 + 96;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *(void *)uint64_t v19 = v14;
      *(double *)(v19 + 8) = v13;
      *(void *)(v19 + 16) = v15;
      *(_DWORD *)(v19 + 24) = v17;
      if (++v12 == 8) {
        return v10 + 32 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2) {
      return 1;
    }
  }
}

double sub_1001DAA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001DA478((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  double result = *(double *)(a4 + 8);
  if (result < *(double *)(a3 + 8))
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    uint64_t v10 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    uint64_t v11 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v11;
    double result = *(double *)(a3 + 8);
    if (result < *(double *)(a2 + 8))
    {
      uint64_t v12 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v12;
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v13;
      uint64_t v14 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = v14;
      LODWORD(v14) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v14;
      double result = *(double *)(a2 + 8);
      if (result < *(double *)(a1 + 8))
      {
        uint64_t v15 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v15;
        double result = *(double *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(double *)(a2 + 8) = result;
        uint64_t v16 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v16;
        LODWORD(v16) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v16;
      }
    }
  }
  return result;
}

double sub_1001DAB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1001DAA6C(a1, a2, a3, a4);
  double result = *(double *)(a5 + 8);
  if (result < *(double *)(a4 + 8))
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    uint64_t v12 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v12;
    uint64_t v13 = *(void *)(a4 + 16);
    *(void *)(a4 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 16) = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = v13;
    double result = *(double *)(a4 + 8);
    if (result < *(double *)(a3 + 8))
    {
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      uint64_t v15 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v15;
      uint64_t v16 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)(a4 + 16);
      *(void *)(a4 + 16) = v16;
      LODWORD(v16) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 24) = v16;
      double result = *(double *)(a3 + 8);
      if (result < *(double *)(a2 + 8))
      {
        uint64_t v17 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v17;
        uint64_t v18 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v18;
        uint64_t v19 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v19;
        LODWORD(v19) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 24) = v19;
        double result = *(double *)(a2 + 8);
        if (result < *(double *)(a1 + 8))
        {
          uint64_t v20 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v20;
          double result = *(double *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(double *)(a2 + 8) = result;
          uint64_t v21 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v21;
          LODWORD(v21) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 24) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1001DAD20(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (double *)(a1 + 32 * v10);
      do
      {
        sub_1001DAEE8(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (*((double *)v14 + 1) < *(double *)(a1 + 8))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = v14[1];
          v14[1] = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          uint64_t v17 = v14[2];
          v14[2] = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v17;
          LODWORD(v17) = *((_DWORD *)v14 + 6);
          *((_DWORD *)v14 + 6) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v17;
          sub_1001DAEE8(a1, a4, v9, (double *)a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 33)
    {
      uint64_t v18 = (unint64_t)v8 >> 5;
      uint64_t v19 = a2 - 4;
      do
      {
        double v20 = *(double *)a1;
        uint64_t v21 = *(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a1 + 16);
        int v23 = *(_DWORD *)(a1 + 24);
        sub_1001DAFD4(a1, a4, v18);
        if (v19 == (uint64_t *)v24)
        {
          *(double *)uint64_t v24 = v20;
          *(void *)(v24 + 8) = v21;
          *(void *)(v24 + 16) = v22;
          *(_DWORD *)(v24 + 24) = v23;
        }
        else
        {
          *(void *)uint64_t v24 = *v19;
          *(void *)(v24 + 8) = v19[1];
          *(void *)(v24 + 16) = v19[2];
          *(_DWORD *)(v24 + 24) = *((_DWORD *)v19 + 6);
          *(double *)uint64_t v19 = v20;
          v19[1] = v21;
          v19[2] = v22;
          *((_DWORD *)v19 + 6) = v23;
          sub_1001DB054(a1, v24 + 32, a4, (v24 + 32 - a1) >> 5);
        }
        v19 -= 4;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1001DAEE8(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (double *)(result + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && v8[1] < v8[5])
      {
        v8 += 4;
        uint64_t v7 = v9;
      }
      double v10 = a4[1];
      if (v8[1] >= v10)
      {
        double v11 = *a4;
        uint64_t v12 = *((void *)a4 + 2);
        int v13 = *((_DWORD *)a4 + 6);
        do
        {
          uint64_t v14 = a4;
          a4 = v8;
          *uint64_t v14 = *v8;
          v14[1] = v8[1];
          v14[2] = v8[2];
          *((_DWORD *)v14 + 6) = *((_DWORD *)v8 + 6);
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 32 * v7);
          uint64_t v16 = v15 + 2;
          if (v16 < a3 && v8[1] < v8[5])
          {
            v8 += 4;
            uint64_t v7 = v16;
          }
        }
        while (v8[1] >= v10);
        *a4 = v11;
        a4[1] = v10;
        *((void *)a4 + 2) = v12;
        *((_DWORD *)a4 + 6) = v13;
      }
    }
  }
  return result;
}

double sub_1001DAFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 32 * v3 + 32;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3 && *(double *)(a1 + 8) < *(double *)(a1 + 40))
    {
      a1 += 32;
      uint64_t v3 = v8;
    }
    *(void *)uint64_t v6 = *(void *)a1;
    double result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
    *(void *)(v6 + 16) = *(void *)(a1 + 16);
    *(_DWORD *)(v6 + 24) = *(_DWORD *)(a1 + 24);
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1001DB054(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = result + 32 * v4;
    double v6 = *(double *)(a2 - 24);
    if (*(double *)(v5 + 8) < v6)
    {
      uint64_t v9 = *(void *)(a2 - 32);
      uint64_t v7 = a2 - 32;
      uint64_t v8 = v9;
      uint64_t v10 = *(void *)(v7 + 16);
      int v11 = *(_DWORD *)(v7 + 24);
      do
      {
        uint64_t v12 = v7;
        uint64_t v7 = v5;
        *(void *)uint64_t v12 = *(void *)v5;
        *(void *)(v12 + 8) = *(void *)(v5 + 8);
        *(void *)(v12 + 16) = *(void *)(v5 + 16);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v5 + 24);
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = result + 32 * v4;
      }
      while (*(double *)(v5 + 8) < v6);
      *(void *)uint64_t v7 = v8;
      *(double *)(v7 + 8) = v6;
      *(void *)(v7 + 16) = v10;
      *(_DWORD *)(v7 + 24) = v11;
    }
  }
  return result;
}

void sub_1001DB0D8(uint64_t *a1)
{
  if (*a1)
  {
    sub_1001D9AEC(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1001DB114(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10017EA6C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  uint64_t v14 = &v10[56 * v4];
  uint64_t v16 = &v10[56 * v9];
  sub_1001DB234(v14, a2);
  uint64_t v15 = v14 + 56;
  sub_1001D9C98(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1001D9E4C((uint64_t)&v13);
  return v11;
}

void sub_1001DB220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001D9E4C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1001DB234(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(long long *)((char *)a2 + 24);
  *((void *)__dst + 5) = *((void *)a2 + 5);
  *((_DWORD *)__dst + 12) = *((_DWORD *)a2 + 12);
  return __dst;
}

void sub_1001DB2C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x26u);
}

BOOL sub_1001DB31C()
{
  uint64_t v1 = qword_1024193A8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_1001DB33C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x26u);
}

void sub_1001DB35C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x26u);
}

BOOL sub_1001DB37C()
{
  uint64_t v2 = *(NSObject **)(v0 + 936);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_1001DB398()
{
  uint64_t v2 = *(NSObject **)(v0 + 936);
  return os_signpost_enabled(v2);
}

void sub_1001DB3C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1001DB480(_Unwind_Exception *a1)
{
}

void sub_1001DB498()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1001DB540(_Unwind_Exception *a1)
{
}

uint64_t sub_1001DB558(CLMotionActivity *a1)
{
  if (CLMotionActivity::isRunning(a1)) {
    return 0;
  }
  if (CLMotionActivity::isCycling(a1)) {
    return 1;
  }
  if (a1->type == 3) {
    return 2;
  }
  return 3;
}

uint64_t sub_1001DB5AC(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)a1 = 4;
  *(void *)(a1 + 8) = 0;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10229E280);
  }
  long long v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 134349824;
    uint64_t v12 = v5;
    __int16 v13 = 2050;
    uint64_t v14 = v6;
    __int16 v15 = 2050;
    uint64_t v16 = v7;
    __int16 v17 = 2050;
    uint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#indoor-fitness-classifier, debounce params initialized (secs), cyclingToNonFitness, %{public}lld, runningToNonFitness, %{public}lld, nonFitnessToCycling, %{public}lld, notFitnessToRunning, %{public}lld", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10229E280);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLIndoorFitnessModeStateMachine::CLIndoorFitnessModeStateMachine(const CLIndoorFitnessModeStateMachine::DebounceParameters &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return a1;
}

void sub_1001DB7C0(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10229E280);
  }
  long long v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 134349824;
    uint64_t v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = v6;
    __int16 v14 = 2050;
    uint64_t v15 = v7;
    __int16 v16 = 2050;
    uint64_t v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#indoor-fitness-classifier, debounce params updated (secs), cyclingToNonFitness, %{public}lld, runningToNonFitness, %{public}lld, nonFitnessToCycling, %{public}lld, notFitnessToRunning, %{public}lld", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10229E280);
    }
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIndoorFitnessModeStateMachine::updateDebounceParameters(const DebounceParameters &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_1001DB9BC(uint64_t a1, CLMotionActivity *a2, uint64_t a3)
{
  int v5 = sub_1001DB558(a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10229E280);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = CLMotionActivity::activityTypeToString();
    uint64_t v8 = v5 - 1;
    if (v8 > 2) {
      unint64_t v9 = "running";
    }
    else {
      unint64_t v9 = (&off_10229E2A0)[v8];
    }
    *(_DWORD *)buf = 136380931;
    uint64_t v12 = v7;
    __int16 v13 = 2081;
    __int16 v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#indoor-fitness-classifier, motion activity, %{private}s, internal activity, %{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10229E280);
    }
    CLMotionActivity::activityTypeToString();
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIndoorFitnessModeStateMachine::updateWithMotionActivity(const CLMotionActivity &, std::chrono::steady_clock::time_point)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_1001DBC14(a1, v5, a3);
}

void sub_1001DBC14(uint64_t a1, int a2, uint64_t a3)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      BOOL v6 = 1;
      if (a2 == 3) {
        int v7 = 2;
      }
      else {
        int v7 = a2 == 1;
      }
      goto LABEL_48;
    case 1:
      BOOL v6 = 1;
      if (a2 == 3) {
        int v7 = 3;
      }
      else {
        int v7 = a2 != 0;
      }
      goto LABEL_48;
    case 2:
      switch(a2)
      {
        case 0:
        case 2:
          int v7 = 0;
          goto LABEL_47;
        case 1:
          BOOL v6 = 1;
          int v7 = 1;
          break;
        case 3:
          if (1000000000 * *(void *)(a1 + 24) >= a3 - *(void *)(a1 + 8)) {
            int v7 = 2;
          }
          else {
            int v7 = 4;
          }
          goto LABEL_47;
        default:
          int v7 = 2;
          goto LABEL_47;
      }
      goto LABEL_48;
    case 3:
      if (a2 != 3)
      {
        BOOL v6 = 1;
        if (a2) {
          int v7 = 3;
        }
        else {
          int v7 = 0;
        }
        goto LABEL_48;
      }
      if (1000000000 * *(void *)(a1 + 16) >= a3 - *(void *)(a1 + 8)) {
        int v7 = 3;
      }
      else {
        int v7 = 4;
      }
      goto LABEL_47;
    case 4:
      int v8 = 5;
      if (a2) {
        int v9 = 4;
      }
      else {
        int v9 = 6;
      }
      BOOL v10 = a2 == 1;
      goto LABEL_21;
    case 5:
      int v9 = 5;
      if ((a2 - 1) < 2)
      {
        if (1000000000 * *(void *)(a1 + 32) < a3 - *(void *)(a1 + 8)) {
          int v7 = 1;
        }
        else {
          int v7 = 5;
        }
LABEL_47:
        BOOL v6 = 1;
      }
      else if (a2)
      {
        BOOL v10 = a2 == 3;
        int v8 = 4;
LABEL_21:
        BOOL v6 = 1;
        if (v10) {
          int v7 = v8;
        }
        else {
          int v7 = v9;
        }
      }
      else
      {
        BOOL v6 = 1000000000 * *(void *)(a1 + 40) < a3 - *(void *)(a1 + 8);
        if (1000000000 * *(void *)(a1 + 40) >= a3 - *(void *)(a1 + 8)) {
          int v7 = 6;
        }
        else {
          int v7 = 0;
        }
      }
LABEL_48:
      if (v7 != *(_DWORD *)a1)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10229E280);
        }
        uint64_t v11 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          if ((a2 - 1) > 2) {
            uint64_t v12 = "running";
          }
          else {
            uint64_t v12 = (&off_10229E2A0)[a2 - 1];
          }
          unsigned int v13 = *(_DWORD *)a1 - 1;
          if (v13 > 5) {
            __int16 v14 = "running";
          }
          else {
            __int16 v14 = (&off_10229E2B8)[v13];
          }
          if ((v7 - 1) > 5) {
            uint64_t v15 = "running";
          }
          else {
            uint64_t v15 = (&off_10229E2B8)[v7 - 1];
          }
          *(_DWORD *)buf = 136381187;
          uint64_t v18 = v12;
          __int16 v19 = 2081;
          double v20 = v14;
          __int16 v21 = 2081;
          uint64_t v22 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#indoor-fitness-classifier state change, activity, %{private}s, current, %{private}s, updated, %{private}s", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10229E280);
          }
          __int16 v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLIndoorFitnessModeStateMachine::updateWithMotionActivity(CLIndoorFitnessModeStateMachine::Activity, std::chrono::steady_clock::time_point)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        *(_DWORD *)a1 = v7;
        if (v6) {
          *(void *)(a1 + 8) = a3;
        }
      }
      return;
    case 6:
      switch(a2)
      {
        case 0:
        case 2:
          if (1000000000 * *(void *)(a1 + 40) >= a3 - *(void *)(a1 + 8)) {
            int v7 = 6;
          }
          else {
            int v7 = 0;
          }
          goto LABEL_47;
        case 1:
          BOOL v6 = 1000000000 * *(void *)(a1 + 32) < a3 - *(void *)(a1 + 8);
          if (1000000000 * *(void *)(a1 + 32) < a3 - *(void *)(a1 + 8)) {
            int v7 = 1;
          }
          else {
            int v7 = 5;
          }
          break;
        case 3:
          int v7 = 4;
          goto LABEL_47;
        default:
          int v7 = 6;
          goto LABEL_47;
      }
      goto LABEL_48;
    default:
      return;
  }
}

void *sub_1001DC1B4(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

void sub_1001DC1C0(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1001DC2BC()
{
}

uint64_t sub_1001DC3EC(uint64_t result, uint64_t a2)
{
  *(_OWORD *)double result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(result + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(void *)(result + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(result + 32) = 1;
  }
  *(unsigned char *)(result + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    *(void *)(result + 56) = *(void *)(a2 + 56);
    *(unsigned char *)(result + 48) = 1;
  }
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(result + 68) = *(unsigned char *)(a2 + 68);
  return result;
}

uint64_t sub_1001DC448(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    if (*(unsigned char *)(result + 48)) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (*(unsigned char *)(result + 32)) {
      *(unsigned char *)(result + 32) = 0;
    }
    operator delete();
  }
  return result;
}

BOOL sub_1001DC488(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 168) <= a2;
}

uint64_t sub_1001DC498(uint64_t a1)
{
  return (uint64_t)(*(double *)(a1 + 76) * 1000000.0 + 9.783072e14);
}

uint64_t *sub_1001DC4BC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = *a1;
  *a1 = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = a1[1];
  a1[1] = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

unint64_t sub_1001DC55C(void *a1, double ***a2, _DWORD *a3, __n128 **a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = (uint64_t)a2[1];
  if ((double **)v7 == v6) {
    return 0;
  }
  int v9 = v6[1];
  unint64_t v10 = (char *)v9 - (char *)*v6;
  if (v9 != *v6)
  {
    v65 = a3;
    v80 = 0;
    v81 = 0;
    uint64_t v82 = 0;
    if (&v80 != (__n128 **)a2) {
      sub_1001DCB68((uint64_t)&v80, (uint64_t)v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v6) >> 3));
    }
    int v12 = 0;
    BOOL v13 = 0;
    unint64_t v14 = v10 >> 3;
    unint64_t v15 = (v10 >> 3);
    double v16 = (double)(v10 >> 3);
    while (!v13)
    {
      v77 = 0;
      v78 = 0;
      unint64_t v79 = 0;
      uint64_t v17 = ((char *)v81 - (char *)v80) >> 3;
      unsigned int v18 = -1431655765 * v17;
      double v19 = 0.0;
      if (-1431655765 * v17)
      {
        int v68 = v12;
        uint64_t v20 = 0;
        unsigned int v67 = -1431655765 * v17;
        uint64_t v21 = (-1431655765 * v17);
        do
        {
          uint64_t v22 = v80;
          v71 = 0;
          sub_1001DCEDC(&v74, v15, &v71);
          __p = 0;
          sub_1001DCEDC(&v71, v15, &__p);
          int v23 = (char **)v22 + 3 * v20;
          uint64_t v25 = *a2;
          uint64_t v24 = a2[1];
          while (v25 != v24)
          {
            (*(void (**)(void, uint64_t, double **))(*(void *)a1[1] + 16))(a1[1], (uint64_t)v22 + 24 * v20, v25);
            if (v14)
            {
              v27 = *v25;
              v28 = (double *)v74;
              unint64_t v29 = v15;
              v30 = (double *)v71;
              do
              {
                double v31 = *v27++;
                double *v28 = *v28 - v31 * v26;
                ++v28;
                double *v30 = *v30 - v26;
                ++v30;
                --v29;
              }
              while (v29);
            }
            v25 += 3;
          }
          sub_1001DCFA4(&__p, v15);
          if (v14)
          {
            v32 = (double *)v74;
            v33 = (double *)v71;
            v34 = *v23;
            unint64_t v35 = v15;
            v36 = (double *)__p;
            do
            {
              double v37 = *v32++;
              double v38 = v37;
              double v39 = *v33++;
              double v40 = v38 / v39;
              double v41 = *(double *)v34;
              v34 += 8;
              *v36++ = v40 - v41;
              --v35;
            }
            while (v35);
          }
          v42 = v78;
          if ((unint64_t)v78 >= v79)
          {
            uint64_t v43 = sub_1001DD01C((uint64_t *)&v77, (uint64_t)&__p);
          }
          else
          {
            *v78 = 0;
            v42[1] = 0;
            v42[2] = 0;
            sub_1001DD364(v42, __p, (uint64_t)v70, (v70 - (unsigned char *)__p) >> 3);
            uint64_t v43 = (uint64_t)(v42 + 3);
          }
          v78 = (void **)v43;
          if (v14)
          {
            v44 = (double *)__p;
            v45 = (double *)*v23;
            unint64_t v46 = v15;
            do
            {
              double v47 = *v44++;
              double *v45 = v47 + *v45;
              ++v45;
              --v46;
            }
            while (v46);
          }
          if (v80 != v22) {
            sub_1002DD194((char *)v80 + 24 * v20, *v23, v22->n128_i64[3 * v20 + 1], (uint64_t)(v22->n128_u64[3 * v20 + 1] - (void)*v23) >> 3);
          }
          if (__p)
          {
            v70 = __p;
            operator delete(__p);
          }
          if (v71)
          {
            v72 = v71;
            operator delete(v71);
          }
          if (v74)
          {
            v75 = v74;
            operator delete(v74);
          }
          ++v20;
        }
        while (v20 != v21);
        v48 = v77;
        int v12 = v68;
        unsigned int v18 = v67;
        if (v77 != v78)
        {
          double v19 = 0.0;
          do
          {
            for (uint64_t i = (double *)*v48; i != v48[1]; ++i)
            {
              double v50 = *i;
              double v19 = v19 + v50 * v50;
            }
            v48 += 3;
          }
          while (v48 != v78);
        }
      }
      double v51 = sqrt(v19) / v16 / (double)v18;
      BOOL v13 = v51 < 0.00000001;
      uint64_t v52 = (uint64_t)v80;
      if (v80 != v81)
      {
        do
        {
          v74 = 0;
          v75 = 0;
          uint64_t v76 = 0;
          sub_1001DD364(&v74, *(const void **)v52, *(void *)(v52 + 8), (uint64_t)(*(void *)(v52 + 8) - *(void *)v52) >> 3);
          v53 = (__n128 *)(v52 + 24);
          v54 = (__n128 *)(v52 + 24);
          if ((__n128 *)(v52 + 24) != v81)
          {
            while (1)
            {
              v71 = 0;
              v72 = 0;
              uint64_t v73 = 0;
              sub_1001DD364(&v71, (const void *)v54->n128_u64[0], v54->n128_i64[1], (uint64_t)(v54->n128_u64[1] - v54->n128_u64[0]) >> 3);
              double v55 = (*(double (**)(void, void **, void **))(*(void *)*a1 + 16))(*a1, &v74, &v71);
              if (v71)
              {
                v72 = v71;
                operator delete(v71);
              }
              if (v55 < 0.01) {
                break;
              }
              v54 = (__n128 *)((char *)v54 + 24);
              if (v54 == v81) {
                goto LABEL_52;
              }
            }
            sub_1001DD3E0((__n128 *)(v52 + 24), v81, v52);
            v54 = v56;
            v57 = v81;
            if (v81 != v56)
            {
              v58 = v81;
              do
              {
                v60 = (void *)v58[-2].n128_u64[1];
                v58 = (__n128 *)((char *)v58 - 24);
                v59 = v60;
                if (v60)
                {
                  v57[-1].n128_u64[0] = (unint64_t)v59;
                  operator delete(v59);
                }
                v57 = v58;
              }
              while (v58 != v54);
            }
            v81 = v54;
          }
LABEL_52:
          if (v74)
          {
            v75 = v74;
            operator delete(v74);
            v54 = v81;
          }
          v52 += 24;
        }
        while (v53 != v54);
      }
      ++v12;
      v74 = &v77;
      sub_1001DCABC((void ***)&v74);
      if (v12 == 51)
      {
        if (v51 >= 0.00000001)
        {
          unint64_t v10 = 0;
          goto LABEL_62;
        }
        break;
      }
    }
    uint64_t v61 = (uint64_t)v80;
    v62 = v81;
    unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v80) >> 3);
    _DWORD *v65 = v63;
    if (&v80 != a4) {
      sub_1001DCB68((uint64_t)a4, v61, (uint64_t)v62, v63);
    }
    unint64_t v10 = 1;
LABEL_62:
    v77 = (void **)&v80;
    sub_1001DCABC(&v77);
  }
  return v10;
}

void sub_1001DCA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,char a25)
{
  a22 = &a25;
  sub_1001DCABC((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_1001DCABC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1001DCB10((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void sub_1001DCB10(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1001DCB68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1001DCCF4((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000DA584((void *)a1, v11);
    int v12 = sub_1001DCD30(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1001DCE6C((int)&v20, a2, v13, v9);
    int v12 = sub_1001DCD30(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1001DCE6C((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      double v19 = *(void **)(v17 - 24);
      v17 -= 24;
      unsigned int v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1001DCCE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1001DCCEC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1001DCCF4(uint64_t *a1)
{
  if (*a1)
  {
    sub_1001DCB10(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_1001DCD30(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1001DD364(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1001DCDE4((uint64_t)v8);
  return v4;
}

void sub_1001DCDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001DCDE4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DCE1C(a1);
  }
  return a1;
}

void sub_1001DCE1C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t sub_1001DCE6C(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        sub_1002DD194(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_1001DCEDC(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001DCF60(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1001DCF44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1001DCF60(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_1000DA54C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_1001DCFA4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001DCF60(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1001DD000(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001DD01C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_1001DD364(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_1001DD134(a1, v14);
  uint64_t v12 = a1[1];
  sub_1001DD2D0((uint64_t)v14);
  return v12;
}

void sub_1001DD120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001DD2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001DD134(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001DD1AC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1001DD1AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1001DD250((uint64_t)v11);
  return v9;
}

uint64_t sub_1001DD250(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DD288(a1);
  }
  return a1;
}

void sub_1001DD288(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1001DD2D0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1001DD308(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *sub_1001DD364(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_1001DCF60(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001DD3C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 *sub_1001DD3E0(__n128 *a1, __n128 *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1000F4EBC(a3, v4);
      unint64_t v4 = (__n128 *)((char *)v4 + 24);
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

float sub_1001DD440(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  unint64_t v13 = v12 + ((v11 + v11 * v11) >> 1);
  if (*(float *)(v9 + 4 * v13) < result) {
    return *(float *)(v9 + 4 * v13);
  }
  return result;
}

float sub_1001DD480(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float v10 = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  float result = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (v10 >= 3.4028e38)
  {
    if (result >= 3.4028e38) {
      return 3.4028e38;
    }
  }
  else if (result >= 3.4028e38)
  {
    return v10;
  }
  else
  {
    return (float)((float)(result * (float)a5) + (float)((float)a3 * v10)) / (float)(a5 + a3);
  }
  return result;
}

float sub_1001DD510(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 <= a6) {
    unint64_t v6 = a6;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a2 >= a6) {
    unint64_t v7 = a6;
  }
  else {
    unint64_t v7 = a2;
  }
  unint64_t v8 = v7 + ((v6 + v6 * v6) >> 1);
  uint64_t v9 = *(void *)(a1 + 8);
  float result = *(float *)(v9 + 4 * v8);
  if (a4 <= a6) {
    unint64_t v11 = a6;
  }
  else {
    unint64_t v11 = a4;
  }
  if (a4 >= a6) {
    unint64_t v12 = a6;
  }
  else {
    unint64_t v12 = a4;
  }
  float v13 = *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  if (result >= 3.4028e38)
  {
    float result = 3.4028e38;
    if (v13 < 3.4028e38) {
      return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
    }
  }
  else if (v13 < 3.4028e38 && result < v13)
  {
    return *(float *)(v9 + 4 * (v12 + ((v11 + v11 * v11) >> 1)));
  }
  return result;
}

char **sub_1001DD580(char **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1001DDAE4((void **)a1, *a2 - 1);
  v56 = 0;
  unint64_t v57 = 0;
  double v55 = (uint64_t *)&v56;
  if (*a2)
  {
    v54 = v5;
    unint64_t v6 = 0;
    do
    {
      *(void *)buf = v6;
      *(void *)v59 = 1;
      sub_1001DE12C(&v55, &v56, (unint64_t *)buf, buf);
      ++v6;
    }
    while (v6 < *a2);
    if (v57 >= 2)
    {
      uint64_t v53 = a3;
      do
      {
        unint64_t v7 = v55;
        if (v55 == (uint64_t *)&v56)
        {
          uint64_t v9 = 0;
          unint64_t v8 = 0;
          float v11 = INFINITY;
        }
        else
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
          float v11 = INFINITY;
          do
          {
            unint64_t v12 = (uint64_t *)v7[1];
            float v13 = v12;
            long long v14 = v7;
            if (v12)
            {
              do
              {
                uint64_t v15 = v13;
                float v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                uint64_t v15 = (uint64_t *)v14[2];
                BOOL v16 = *v15 == (void)v14;
                long long v14 = v15;
              }
              while (!v16);
            }
            if (v15 != (uint64_t *)&v56)
            {
              unint64_t v17 = v7[4];
              do
              {
                unint64_t v18 = v15[4];
                if (v17 <= v18) {
                  uint64_t v19 = v15[4];
                }
                else {
                  uint64_t v19 = v7[4];
                }
                if (v17 < v18) {
                  unint64_t v18 = v7[4];
                }
                unint64_t v10 = a2[1];
                if (*(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1))) < v11)
                {
                  float v11 = *(float *)(v10 + 4 * (v18 + ((unint64_t)(v19 + v19 * v19) >> 1)));
                  uint64_t v9 = v15;
                  unint64_t v8 = v7;
                }
                char v20 = (uint64_t *)v15[1];
                if (v20)
                {
                  do
                  {
                    char v21 = v20;
                    char v20 = (uint64_t *)*v20;
                  }
                  while (v20);
                }
                else
                {
                  do
                  {
                    char v21 = (uint64_t *)v15[2];
                    BOOL v16 = *v21 == (void)v15;
                    uint64_t v15 = v21;
                  }
                  while (!v16);
                }
                uint64_t v15 = v21;
              }
              while (v21 != (uint64_t *)&v56);
            }
            if (v12)
            {
              do
              {
                uint64_t v22 = v12;
                unint64_t v12 = (uint64_t *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                uint64_t v22 = (uint64_t *)v7[2];
                BOOL v16 = *v22 == (void)v7;
                unint64_t v7 = v22;
              }
              while (!v16);
            }
            unint64_t v7 = v22;
          }
          while (v22 != (uint64_t *)&v56);
        }
        if (fabsf(v11) == INFINITY)
        {
          sub_101A50BA0();
          abort_report_np();
          __break(1u);
        }
        int v23 = (uint64_t *)v9[1];
        uint64_t v24 = v9;
        if (v23)
        {
          do
          {
            uint64_t v25 = v23;
            int v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v25 = (uint64_t *)v24[2];
            BOOL v16 = *v25 == (void)v24;
            uint64_t v24 = v25;
          }
          while (!v16);
        }
        uint64_t v26 = v8[4];
        uint64_t v27 = v8[5];
        uint64_t v29 = v9[4];
        uint64_t v28 = v9[5];
        unint64_t v30 = (unint64_t)v5[1];
        unint64_t v31 = (unint64_t)v5[2];
        if (v30 >= v31)
        {
          v33 = *v5;
          uint64_t v34 = (uint64_t)(v30 - (void)*v5) >> 5;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 59) {
            sub_1001D7FD4();
          }
          uint64_t v36 = v31 - (void)v33;
          if (v36 >> 4 > v35) {
            unint64_t v35 = v36 >> 4;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v37 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          double v38 = (char *)sub_1001D9EDC((uint64_t)(v54 + 2), v37);
          double v40 = &v38[32 * v34];
          *(void *)double v40 = v26;
          *((void *)v40 + 1) = v29;
          *((float *)v40 + 4) = v11;
          *((void *)v40 + 3) = v28 + v27;
          v42 = *v54;
          double v41 = v54[1];
          uint64_t v43 = v40;
          if (v41 != *v54)
          {
            do
            {
              long long v44 = *((_OWORD *)v41 - 1);
              *((_OWORD *)v43 - 2) = *((_OWORD *)v41 - 2);
              *((_OWORD *)v43 - 1) = v44;
              v43 -= 32;
              v41 -= 32;
            }
            while (v41 != v42);
            double v41 = *v54;
          }
          v32 = v40 + 32;
          __n128 *v54 = v43;
          v54[1] = v40 + 32;
          v54[2] = &v38[32 * v39];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(void *)unint64_t v30 = v26;
          *(void *)(v30 + 8) = v29;
          *(float *)(v30 + 16) = v11;
          v32 = (char *)(v30 + 32);
          *(void *)(v30 + 24) = v28 + v27;
        }
        v54[1] = v32;
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E308);
        }
        v45 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68290050;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)v59 = 2082;
          *(void *)&v59[2] = "";
          __int16 v60 = 2050;
          uint64_t v61 = v26;
          __int16 v62 = 2050;
          uint64_t v63 = v29;
          __int16 v64 = 2050;
          double v65 = v11;
          __int16 v66 = 2050;
          uint64_t v67 = v28 + v27;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"dendrogram\", \"left\":%{public}lu, \"right\":%{public}lu, \"dist\":\"%{public}f\", \"size\":%{public}lu}", buf, 0x3Au);
        }
        *(void *)buf = v29;
        *(void *)v59 = v28 + v27;
        sub_1000F0A30(&v55, v8);
        operator delete(v8);
        sub_1000F0A30(&v55, v9);
        operator delete(v9);
        unint64_t v46 = v55;
        if (v55 != (uint64_t *)&v56)
        {
          do
          {
            sub_1001DDB94(v53, (uint64_t)a2, v26, v27, v29, v28, v46[4], v46[5]);
            unint64_t v48 = v46[4];
            if (v48 <= *(void *)buf) {
              uint64_t v49 = *(void *)buf;
            }
            else {
              uint64_t v49 = v46[4];
            }
            if (v48 >= *(void *)buf) {
              unint64_t v48 = *(void *)buf;
            }
            *(_DWORD *)(a2[1] + 4 * (v48 + ((unint64_t)(v49 + v49 * v49) >> 1))) = v47;
            double v50 = (uint64_t *)v46[1];
            if (v50)
            {
              do
              {
                double v51 = v50;
                double v50 = (uint64_t *)*v50;
              }
              while (v50);
            }
            else
            {
              do
              {
                double v51 = (uint64_t *)v46[2];
                BOOL v16 = *v51 == (void)v46;
                unint64_t v46 = v51;
              }
              while (!v16);
            }
            unint64_t v46 = v51;
          }
          while (v51 != (uint64_t *)&v56);
        }
        sub_1001DE12C(&v55, v25, (unint64_t *)buf, buf);
        uint64_t v5 = v54;
      }
      while (v57 > 1);
    }
  }
  sub_1000F5BB0((uint64_t)&v55, v56);
  return v5;
}

void sub_1001DDA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  int v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001DDAE4(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_1001D9EDC(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v9 = &v6[32 * v8];
    float v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1001DDB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  v10[0] = a7;
  v10[1] = a8;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, void *, void *))(*(void *)v8 + 48))(v8, a2, v12, v11, v10);
}

uint64_t sub_1001DDBFC(uint64_t *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, double a6)
{
  if (*a3 == a3[1]) {
    sub_101A50D1C();
  }
  if (*(double *)&a5 == 0.0) {
    sub_101A50EA8();
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E308);
  }
  unint64_t v12 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v46 = 2082;
    int v47 = "";
    __int16 v48 = 2050;
    unint64_t v49 = a4;
    __int16 v50 = 2050;
    double v51 = a6;
    __int16 v52 = 2050;
    double v53 = *(double *)&a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getClusterLabels\", \"smallNodeSize\":%{public}lu, \"distanceThresholdForSmallNode\":\"%{public}f\", \"minNumClusters\":%{public}lu}", buf, 0x30u);
  }
  a2[1] = *a2;
  unint64_t v13 = ((a1[1] - *a1) >> 5) + 1;
  *(void *)buf = 0;
  sub_1001DDFF4((uint64_t)a2, v13, buf);
  uint64_t v14 = a1[1];
  uint64_t v15 = *a1;
  if (v14 == *a1) {
    return 1;
  }
  uint64_t v16 = a3[1];
  double v17 = *(float *)(v14 - 16);
  if (v16 == *a3) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = 0;
  }
  BOOL v19 = a5 > 1;
  if (*(double *)(*a3 + 8 * v18) < v17 || a5 >= 2)
  {
    unint64_t v21 = (v16 - *a3) >> 3;
    unint64_t v40 = 1;
    while (1)
    {
      uint64_t v22 = *a2;
      BOOL v23 = v17 > a6 || *(void *)(v14 - 8) > a4;
      if (v23 || v19)
      {
        *(void *)(v22 + 8 * *(void *)(v14 - 32)) = v40;
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E308);
        }
        ++v40;
        uint64_t v31 = qword_102419458;
        if (!os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_31;
        }
        unint64_t v32 = *(void *)(v14 - 32);
        double v33 = *(double *)(v14 - 24);
        double v34 = *(float *)(v14 - 16);
        uint64_t v35 = *(void *)(v14 - 8);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v46 = 2082;
        int v47 = "";
        __int16 v48 = 2050;
        unint64_t v49 = v32;
        __int16 v50 = 2050;
        double v51 = v33;
        __int16 v52 = 2050;
        double v53 = v34;
        __int16 v54 = 2050;
        uint64_t v55 = v35;
        uint64_t v29 = v31;
        unint64_t v30 = "{\"msg%{public}.0s\":\"getClusterLabels - split\", \"left\":%{public}lu, \"right\":%{public}lu, \"dist\":\""
              "%{public}f\", \"size\":%{public}lu}";
      }
      else
      {
        *(void *)(v22 + 8 * *(void *)(v14 - 32)) = *(void *)(v22 + 8 * *(void *)(v14 - 24));
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E308);
        }
        uint64_t v24 = qword_102419458;
        if (!os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_31;
        }
        unint64_t v25 = *(void *)(v14 - 32);
        double v26 = *(double *)(v14 - 24);
        double v27 = *(float *)(v14 - 16);
        uint64_t v28 = *(void *)(v14 - 8);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v46 = 2082;
        int v47 = "";
        __int16 v48 = 2050;
        unint64_t v49 = v25;
        __int16 v50 = 2050;
        double v51 = v26;
        __int16 v52 = 2050;
        double v53 = v27;
        __int16 v54 = 2050;
        uint64_t v55 = v28;
        uint64_t v29 = v24;
        unint64_t v30 = "{\"msg%{public}.0s\":\"getClusterLabels - don't split\", \"left\":%{public}lu, \"right\":%{public}lu, \"di"
              "st\":\"%{public}f\", \"size\":%{public}lu}";
      }
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, v30, buf, 0x3Au);
LABEL_31:
      uint64_t v36 = v14 - 32;
      uint64_t v15 = *a1;
      if (v14 - 32 == *a1) {
        return v40;
      }
      double v17 = *(float *)(v14 - 48);
      if (v21 >= v40) {
        unint64_t v37 = v40;
      }
      else {
        unint64_t v37 = v21;
      }
      double v38 = *(double *)(*a3 + 8 * v37 - 8);
      BOOL v19 = v40 < a5;
      BOOL v39 = v38 >= v17 && v40 >= a5;
      v14 -= 32;
      if (v39)
      {
        uint64_t v14 = v36;
        goto LABEL_42;
      }
    }
  }
  unint64_t v40 = 1;
LABEL_42:
  if (v14 != v15)
  {
    uint64_t v41 = *a2;
    do
    {
      uint64_t v42 = *(void *)(v14 - 32);
      uint64_t v43 = *(void *)(v14 - 24);
      v14 -= 32;
      *(void *)(v41 + 8 * v42) = *(void *)(v41 + 8 * v43);
    }
    while (v14 != v15);
  }
  return v40;
}

void sub_1001DDFF4(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1001DE398((void **)a1, a2 - v3, a3);
  }
}

uint64_t sub_1001DE024(uint64_t *a1, void *a2, unint64_t a3, double a4, double a5)
{
  double v12 = a4;
  sub_1001DCEDC(__p, 1uLL, &v12);
  uint64_t v9 = sub_1001DDBFC(a1, a2, __p, a3, 1uLL, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_1001DE0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001DE0CC(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_1001DE0FC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t *sub_1001DE12C(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  unint64_t v6 = (void **)sub_1001DE1B4(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000EDF90(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_1001DE1B4(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  int64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          int64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      double v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    char v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          char v20 = (void *)*v21;
          int64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int64_t v5 = v21 + 1;
        char v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1001DE360(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

void sub_1001DE398(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      double v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)sub_1000DA54C(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v18 = &v15[8 * v12];
    BOOL v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    unint64_t v21 = v18;
    do
    {
      *(void *)unint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    unint64_t v22 = &v15[8 * v14];
    BOOL v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

BOOL sub_1001DE4BC()
{
  uint64_t v1 = qword_102419608;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_1001DE4DC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, v5, OS_LOG_TYPE_FAULT, a4, a5, 0x26u);
}

void sub_1001DE4F8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, v5, OS_LOG_TYPE_INFO, a4, a5, 0x26u);
}

BOOL sub_1001DE514()
{
  uint64_t v2 = *(NSObject **)(v0 + 1544);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_1001DE530(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5)
{
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v5 = sub_1001DE598(a1, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1001DE57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1001DE598(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = sub_1001DCEDC(__p, v11, &v15);
  BOOL v13 = sub_1001DE65C((uint64_t)v12, a2, (uint64_t **)a3, __p, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

void sub_1001DE640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1001DE65C(uint64_t a1, uint64_t a2, uint64_t **a3, void *a4, unsigned int a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  if ((void *)v9 == v8) {
    return 0;
  }
  if (v8[1] == *v8) {
    return 0;
  }
  if (a3[1] == *a3) {
    return 0;
  }
  uint64_t v11 = **a3;
  uint64_t v12 = (*a3)[1];
  unint64_t v13 = v12 - v11;
  if (v12 == v11) {
    return 0;
  }
  v77 = 0;
  v78 = 0;
  uint64_t v79 = 0;
  sub_1001DED00(&v77, (uint64_t)v8, v9, 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v8) >> 3));
  __int16 v64 = a3;
  uint64_t v15 = -1431655765 * ((unint64_t)((char *)a3[1] - (char *)*a3) >> 3);
  uint64_t v16 = (void *)(a7 + 16);
  unint64_t v17 = (v13 >> 3);
  uint64_t v18 = v13 & 0x7FFFFFFF8;
  unsigned int v19 = 0;
  unint64_t v65 = v17;
  do
  {
    unsigned int v63 = v19;
    uint64_t v20 = *(_DWORD **)a7;
    *(void *)(a7 + 8) = *(void *)a7;
    unint64_t v22 = *v64;
    unint64_t v21 = v64[1];
    __int16 v66 = v21;
    while (v22 != v21)
    {
      if (a5)
      {
        int v23 = 0;
        uint64_t v24 = 0;
        int v25 = 0;
        double v26 = 1.0e10;
        do
        {
          v74 = (void **)off_10229E378;
          __src = off_10229E3C8;
          double v27 = sqrt(sub_1001DEC98((uint64_t)&__src, v22, &v77[v24]));
          if (v27 < v26)
          {
            int v25 = v23;
            double v26 = v27;
          }
          v24 += 3;
          ++v23;
        }
        while (3 * a5 != v24);
        uint64_t v20 = *(_DWORD **)(a7 + 8);
        unint64_t v17 = v65;
        uint64_t v16 = (void *)(a7 + 16);
      }
      else
      {
        int v25 = 0;
      }
      if ((unint64_t)v20 >= *v16)
      {
        uint64_t v29 = *(_DWORD **)a7;
        uint64_t v30 = ((uint64_t)v20 - *(void *)a7) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v32 = *v16 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          double v34 = (char *)sub_10017EA34((uint64_t)v16, v33);
          uint64_t v29 = *(_DWORD **)a7;
          uint64_t v20 = *(_DWORD **)(a7 + 8);
        }
        else
        {
          double v34 = 0;
        }
        uint64_t v35 = &v34[4 * v30];
        *(_DWORD *)uint64_t v35 = v25;
        uint64_t v28 = v35 + 4;
        while (v20 != v29)
        {
          int v36 = *--v20;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *(void *)a7 = v35;
        *(void *)(a7 + 8) = v28;
        *(void *)(a7 + 16) = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *uint64_t v20 = v25;
        uint64_t v28 = v20 + 1;
      }
      *(void *)(a7 + 8) = v28;
      v22 += 3;
      uint64_t v20 = v28;
      unint64_t v21 = v66;
    }
    v74 = 0;
    v75 = 0;
    uint64_t v76 = 0;
    sub_1001DED00(&v74, (uint64_t)v77, (uint64_t)v78, 0xAAAAAAAAAAAAAAABLL * (v78 - v77));
    if (!a5) {
      goto LABEL_55;
    }
    uint64_t v37 = 0;
    do
    {
      __p = 0;
      sub_1001DCEDC(&__src, v17, &__p);
      if (!v15)
      {
LABEL_45:
        int v47 = (char **)&v77[3 * v37];
        if (&__src != (void **)v47) {
          sub_1002DD194((char *)&__src, *v47, v77[3 * v37 + 1], (uint64_t)(v77[3 * v37 + 1] - (void)*v47) >> 3);
        }
        goto LABEL_50;
      }
      uint64_t v38 = 0;
      double v39 = 0.0;
      do
      {
        if (v37 != *(_DWORD *)(*(void *)a7 + 4 * v38)) {
          goto LABEL_43;
        }
        uint64_t v40 = (uint64_t)&(*v64)[3 * v38];
        v70 = 0;
        uint64_t v71 = 0;
        __p = 0;
        sub_1001DD364(&__p, *(const void **)v40, *(void *)(v40 + 8), (uint64_t)(*(void *)(v40 + 8) - *(void *)v40) >> 3);
        double v41 = *(double *)(*a4 + 8 * v38);
        uint64_t v42 = __p;
        if (v18)
        {
          double v39 = v39 + v41;
          uint64_t v43 = (double *)__src;
          unint64_t v44 = v17;
          v45 = (double *)__p;
          do
          {
            double v46 = *v45++;
            *uint64_t v43 = *v43 + v41 * v46;
            ++v43;
            --v44;
          }
          while (v44);
        }
        else
        {
          double v39 = v39 + v41;
          if (!__p) {
            goto LABEL_43;
          }
        }
        v70 = v42;
        operator delete(v42);
LABEL_43:
        ++v38;
      }
      while (v38 != v15);
      if (v39 == 0.0) {
        goto LABEL_45;
      }
      if (v18)
      {
        __int16 v48 = (double *)__src;
        unint64_t v49 = v17;
        do
        {
          *__int16 v48 = *v48 / v39;
          ++v48;
          --v49;
        }
        while (v49);
      }
LABEL_50:
      __int16 v50 = (char *)&v77[3 * v37];
      double v51 = __src;
      if (v50 != (char *)&__src)
      {
        sub_1002DD194(v50, (char *)__src, (uint64_t)v73, (v73 - (unsigned char *)__src) >> 3);
        double v51 = __src;
      }
      if (v51)
      {
        uint64_t v73 = v51;
        operator delete(v51);
      }
      ++v37;
    }
    while (v37 != a5);
LABEL_55:
    __int16 v52 = v77;
    uint64_t v67 = (uint64_t)v78;
    if (v77 == v78)
    {
      int v53 = 0;
      uint64_t v56 = (uint64_t)v77;
    }
    else
    {
      int v53 = 0;
      do
      {
        uint64_t v55 = (uint64_t *)v74;
        __int16 v54 = (uint64_t *)v75;
        if (v74 != v75)
        {
          do
          {
            __src = off_10229E378;
            __p = off_10229E3C8;
            if (sqrt(sub_1001DEC98((uint64_t)&__p, v55, v52)) < 0.05) {
              ++v53;
            }
            v55 += 3;
          }
          while (v55 != v54);
        }
        v52 += 3;
      }
      while (v52 != (void *)v67);
      __int16 v52 = v77;
      uint64_t v56 = (uint64_t)v78;
      unint64_t v17 = v65;
      uint64_t v16 = (void *)(a7 + 16);
    }
    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v56 - (uint64_t)v52) >> 3);
    __src = &v74;
    sub_1001DCABC((void ***)&__src);
    BOOL v58 = v57 == v53;
    if (v57 == v53) {
      unsigned int v59 = v63;
    }
    else {
      unsigned int v59 = v63 + 1;
    }
    if (v57 == v53) {
      break;
    }
    unsigned int v19 = v59;
  }
  while (v63 <= 0x31);
  if (&v77 != (void **)a6 && v57 == v53) {
    sub_1001DCB68((uint64_t)a6, (uint64_t)v77, (uint64_t)v78, 0xAAAAAAAAAAAAAAABLL * (v78 - v77));
  }
  v74 = (void **)&v77;
  sub_1001DCABC(&v74);
  return v58;
}

void sub_1001DEBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27)
{
  a24 = &a27;
  sub_1001DCABC((void ***)&a24);
  _Unwind_Resume(a1);
}

double sub_1001DEC3C(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v4 = off_10229E3C8;
  return sqrt(sub_1001DEC98((uint64_t)&v4, a2, a3));
}

void sub_1001DEC84()
{
}

double sub_1001DEC98(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 - *a2) >> 3;
  if (v5 != (uint64_t)(a3[1] - *a3) >> 3) {
    sub_101A51034();
  }
  if (v4 == v3) {
    return 0.0;
  }
  uint64_t v6 = 0;
  double result = 0.0;
  do
  {
    double v8 = *(double *)(v3 + 8 * v6) - *(double *)(*a3 + 8 * v6);
    double result = result + v8 * v8;
    ++v6;
  }
  while (v5 > v6);
  return result;
}

void *sub_1001DED00(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000DA584(result, a4);
    double result = sub_1001DCD30((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1001DED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1001DCABC(&a9);
  _Unwind_Resume(a1);
}

void sub_1001DED88(uint64_t a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X5>, uint64_t a4@<X8>)
{
  unint64_t v7 = (__n128 *)a1;
  if (!sub_100278D98(a1)) {
    sub_101A51060();
  }
  if (v7->n128_u32[1] == 2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 32) = 0;
    *(unsigned char *)(a4 + 80) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 48) = 0;
    *(unsigned char *)(a4 + 56) = 0;
    *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 160);
    sub_1001E06C8(a4 + 32, 0, *(char **)(a2 + 168), *(char **)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
    if (v7[12].n128_u8[0] && v7[6].n128_u64[1] != v7[6].n128_u64[0])
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
      uint64_t v9 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        if (v7[9].n128_u8[0])
        {
          signed __int32 v10 = v7[8].n128_i32[1];
          if (v7[8].n128_u8[1]) {
            LODWORD(v11) = v7[8].n128_u32[2];
          }
          else {
            LODWORD(v11) = v7[8].n128_u32[1];
          }
          uint64_t v11 = (int)v11;
          if (!v7[8].n128_u8[1]) {
            signed __int32 v10 = v7[8].n128_i32[2];
          }
        }
        else
        {
          uint64_t v11 = 0;
          signed __int32 v10 = 0;
        }
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)v133 = 2082;
        *(void *)&v133[2] = "";
        __int16 v134 = 2050;
        uint64_t v135 = v11;
        __int16 v136 = 2050;
        *(void *)v137 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, running localization\", \"LSL Length\":%{public}lu, \"LSL Num Clusters\":%{public}lu}", buf, 0x26u);
      }
      if (v7[8].n128_u8[1]) {
        unint64_t v13 = &v7[8].n128_u32[1];
      }
      else {
        unint64_t v13 = &v7[8].n128_u32[2];
      }
      sub_100274B3C((uint64_t)v131, 1, *v13 + 1);
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E448);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v133 = 2082;
      *(void *)&v133[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model with empty LSL, publishing empty results\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E448);
    }
    v91 = &qword_102419000;
    v92 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      a3 = &v121;
      sub_1002E8E04(v7->n128_i32[1], &v121);
      if (v122 >= 0) {
        v93 = &v121;
      }
      else {
        v93 = (__n128 *)v121.n128_u64[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v133 = 2082;
      *(void *)&v133[2] = "";
      __int16 v134 = 2082;
      uint64_t v135 = (uint64_t)v93;
      __int16 v136 = 2082;
      *(void *)v137 = "assert";
      *(_WORD *)&v137[8] = 2081;
      *(void *)&v137[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v122 < 0) {
        operator delete((void *)v121.n128_u64[0]);
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
    }
    v94 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      a3 = &v121;
      sub_1002E8E04(v7->n128_i32[1], &v121);
      if (v122 >= 0) {
        v95 = &v121;
      }
      else {
        v95 = (__n128 *)v121.n128_u64[0];
      }
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v133 = 2082;
      *(void *)&v133[2] = "";
      __int16 v134 = 2082;
      uint64_t v135 = (uint64_t)v95;
      __int16 v136 = 2082;
      *(void *)v137 = "assert";
      *(_WORD *)&v137[8] = 2081;
      *(void *)&v137[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v94, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, model type is not similarity list!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v122 < 0) {
        operator delete((void *)v121.n128_u64[0]);
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
    }
    uint64_t v96 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      int v97 = v7->n128_i32[1];
      unint64_t v7 = &v121;
      sub_1002E8E04(v97, &v121);
      v98 = v122 >= 0 ? &v121 : (__n128 *)v121.n128_u64[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v133 = 2082;
      *(void *)&v133[2] = "";
      __int16 v134 = 2082;
      uint64_t v135 = (uint64_t)v98;
      __int16 v136 = 2082;
      *(void *)v137 = "assert";
      *(_WORD *)&v137[8] = 2081;
      *(void *)&v137[10] = "model.modelType == CLMicroLocationProto::Model::SIMILARITY_LIST";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v96, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, model type is not similarity list!\", \"Model Type\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v122 < 0) {
        operator delete((void *)v121.n128_u64[0]);
      }
    }
    abort_report_np();
    while (1)
    {
      __break(1u);
      dispatch_once(&qword_102419450, &stru_10229E448);
      LOWORD(__p) = 0;
      v99 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLMicroLocationAlgorithms::LocalizerResults CLMicroLocationCosineSimilarityLocalizationAlgorithm::localize(const CLMicroLocationModel &, const CLMicroLocationFingerprint &, const std::optional<CLMicroLocationFingerprintDistanceFunction::Signature> &, const CLMicroLocationLocalizationSettings &, std::optional<boost::uuids::uuid> *) const", "%s\n", v99);
      if (v99 != (char *)buf) {
        free(v99);
      }
      sub_1000C7F88(buf);
      v112 = v91;
      LODWORD(__p) = 0;
      CFStringRef v14 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullClusterThresholdForLowConfidence", 0x8000100u, kCFAllocatorNull);
      sub_1004D123C(*(uint64_t *)buf, (uint64_t)v14, (float *)&__p);
      int v16 = v15;
      CFRelease(v14);
      float v17 = *(float *)&__p;
      if (*(void *)v133) {
        sub_1000DB0A0(*(std::__shared_weak_count **)v133);
      }
      double v18 = v17;
      if (!v16) {
        double v18 = 0.300000012;
      }
      if (v4 > v18)
      {
        unint64_t v19 = *(void *)(v96 + 48);
        *(_DWORD *)(v96 + 24) = 0;
        uint64_t v20 = *(char **)(v96 + 40);
        if ((unint64_t)v20 >= v19)
        {
          unint64_t v22 = (char *)*v111;
          uint64_t v23 = (v20 - (unsigned char *)*v111) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v25 = v19 - (void)v22;
          if (v25 >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            double v27 = (char *)sub_10017EA34(v96 + 48, v26);
            unint64_t v22 = *(char **)(v96 + 32);
            uint64_t v20 = *(char **)(v96 + 40);
          }
          else
          {
            double v27 = 0;
          }
          uint64_t v28 = &v27[4 * v23];
          uint64_t v29 = &v27[4 * v26];
          *(_DWORD *)uint64_t v28 = 7;
          unint64_t v21 = v28 + 4;
          while (v20 != v22)
          {
            int v30 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v28 - 1) = v30;
            v28 -= 4;
          }
          *(void *)(v96 + 32) = v28;
          *(void *)(v96 + 40) = v21;
          *(void *)(v96 + 48) = v29;
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v20 = 7;
          unint64_t v21 = v20 + 4;
        }
        *(void *)(v96 + 40) = v21;
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E448);
        }
        unint64_t v31 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)v133 = 2082;
          *(void *)&v133[2] = "";
          __int16 v134 = 2049;
          uint64_t v135 = *(void *)&v4;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, setting invalid confidence due to high null cluster probability\", \"nullClusterProbability\":\"%{private}.6f\"}", buf, 0x1Cu);
        }
      }
      if (a3)
      {
        unint64_t v32 = v121.n128_u64[0];
        if (v121.n128_u64[0] != v121.n128_u64[1])
        {
          for (unint64_t i = v121.n128_u64[0] + 32; i != v121.n128_u64[1]; i += 32)
          {
            if (*(double *)(v32 + 16) < *(double *)(i + 16) || *(_OWORD *)v32 == 0) {
              unint64_t v32 = i;
            }
          }
        }
        if (*(_OWORD *)v32 != 0)
        {
          int v34 = a3[1].n128_u8[0];
          *a3 = *(__n128 *)v32;
          if (!v34) {
            a3[1].n128_u8[0] = 1;
          }
        }
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
      uint64_t v35 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)v133 = 2082;
        *(void *)&v133[2] = "";
        __int16 v134 = 2050;
        uint64_t v135 = (uint64_t)(v121.n128_u64[1] - v121.n128_u64[0]) >> 5;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, internalLocalizer results\", \"numInternalResults\":%{public}lu}", buf, 0x1Cu);
      }
      a3 = (__n128 *)v121.n128_u64[1];
      uint64_t v36 = v121.n128_u64[0];
      if (v121.n128_u64[1] == v121.n128_u64[0]) {
        goto LABEL_161;
      }
      do
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E448);
        }
        uint64_t v37 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = operator new(0x28uLL);
          __p = v38;
          long long v119 = xmmword_101D048C0;
          *uint64_t v38 = 0u;
          v38[1] = 0u;
          *(void *)((char *)v38 + 29) = 0;
          sub_1001E0650(v36, v38);
          double v39 = v119 >= 0 ? &__p : (void **)__p;
          uint64_t v40 = *(void *)(v36 + 16);
          uint64_t v41 = *(unsigned int *)(v36 + 24);
          *(_DWORD *)buf = 68289795;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)v133 = 2082;
          *(void *)&v133[2] = "";
          __int16 v134 = 2081;
          uint64_t v135 = (uint64_t)v39;
          __int16 v136 = 2049;
          *(void *)v137 = v40;
          *(_WORD *)&v137[8] = 2049;
          *(void *)&v137[10] = v41;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, internalLocalizer result\", \"MicrolocationId\":%{private, location:escape_only}s, \"Probability\":\"%{private}.6f\", \"ConfidenceLevel\":%{private}lu}", buf, 0x30u);
          if (SHIBYTE(v119) < 0) {
            operator delete(__p);
          }
        }
        if (*(_OWORD *)v36 == 0)
        {
          sub_100274A3C((uint64_t)v131, 0, 0, *(double *)(v36 + 16));
        }
        else
        {
          uint64_t v42 = (char *)v7[4].n128_u64[1];
          uint64_t v43 = (char *)v7[5].n128_u64[0];
          unint64_t v44 = v42;
          if (v42 != v43)
          {
            while (*(void *)v44 != *(void *)v36 || *((void *)v44 + 1) != *(void *)(v36 + 8))
            {
              v44 += 16;
              if (v44 == v43)
              {
                unint64_t v44 = (char *)v7[5].n128_u64[0];
                break;
              }
            }
          }
          if (v44 == v43)
          {
            if (qword_102419450 != -1) {
              dispatch_once(&qword_102419450, &stru_10229E448);
            }
            double v46 = qword_102419458;
            if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
            {
              int v47 = operator new(0x28uLL);
              __p = v47;
              long long v119 = xmmword_101D048C0;
              *int v47 = 0u;
              v47[1] = 0u;
              *(void *)((char *)v47 + 29) = 0;
              sub_1001E0650(v36, v47);
              if (v119 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)v133 = 2082;
              *(void *)&v133[2] = "";
              __int16 v134 = 2082;
              uint64_t v135 = (uint64_t)p_p;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, unexpected identifier\", \"cluster ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (SHIBYTE(v119) < 0) {
                operator delete(__p);
              }
              if (qword_102419450 != -1) {
                dispatch_once(&qword_102419450, &stru_10229E448);
              }
            }
            unint64_t v49 = qword_102419458;
            if (os_signpost_enabled((os_log_t)qword_102419458))
            {
              __int16 v50 = operator new(0x28uLL);
              __p = v50;
              long long v119 = xmmword_101D048C0;
              *__int16 v50 = 0u;
              v50[1] = 0u;
              *(void *)((char *)v50 + 29) = 0;
              sub_1001E0650(v36, v50);
              double v51 = v119 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)v133 = 2082;
              *(void *)&v133[2] = "";
              __int16 v134 = 2082;
              uint64_t v135 = (uint64_t)v51;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, unexpected identifier", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, unexpected identifier\", \"cluster ID\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (SHIBYTE(v119) < 0) {
                operator delete(__p);
              }
            }
          }
          else
          {
            sub_100274A3C((uint64_t)v131, 0, ((unint64_t)(v44 - v42) >> 4) + 1, *(double *)(v36 + 16));
          }
        }
        v36 += 32;
      }
      while ((__n128 *)v36 != a3);
      if ((sub_100274F4C((uint64_t)v131) & 1) == 0) {
        break;
      }
      sub_100274DCC((uint64_t)v131, 1u, &__p);
      BYTE1(v119) = 1;
      sub_1002751AC((uint64_t)&v7[7].n128_i64[1], (uint64_t)&__p, &v113);
      if (!v117)
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E448);
        }
        v83 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)v133 = 2082;
          *(void *)&v133[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, multByVec failed!\"}", buf, 0x12u);
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229E448);
          }
        }
        v84 = qword_102419458;
        if (os_signpost_enabled((os_log_t)qword_102419458))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)v133 = 2082;
          *(void *)&v133[2] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v84, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, multByVec failed!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, multByVec failed!\"}", buf, 0x12u);
        }
        goto LABEL_155;
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
      __int16 v52 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        int v53 = v115;
        if (v114) {
          int v54 = v116;
        }
        else {
          int v54 = v115;
        }
        if (!v114) {
          int v53 = v116;
        }
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)v133 = 2082;
        *(void *)&v133[2] = "";
        __int16 v134 = 2050;
        uint64_t v135 = v54;
        __int16 v136 = 2050;
        *(void *)v137 = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"cosine similarity results shape\", \"Rows\":%{public}lu, \"Cols\":%{public}lu}", buf, 0x26u);
      }
      if (v114) {
        uint64_t v55 = &v116;
      }
      else {
        uint64_t v55 = &v115;
      }
      uint64_t v56 = *v55;
      if (v56 == (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2)
      {
        if ((int)v56 >= 1)
        {
          uint64_t v57 = 0;
          do
          {
            if (SLODWORD(v112[20].isa) >= *(_DWORD *)(v7[9].n128_u64[1] + 4 * v57)) {
              int isa = *(_DWORD *)(v7[9].n128_u64[1] + 4 * v57);
            }
            else {
              int isa = (int)v112[20].isa;
            }
            *(void *)buf = 0;
            sub_100274F04((uint64_t)&v113, v57, 0, buf);
            unsigned int v59 = (uint64_t *)(v7[6].n128_u64[0] + 16 * v57);
            uint64_t v61 = *v59;
            uint64_t v60 = v59[1];
            unint64_t v62 = *(void *)(v96 + 8);
            unint64_t v63 = *(void *)(v96 + 16);
            if (v62 >= v63)
            {
              uint64_t v66 = (uint64_t)(v62 - *(void *)v96) >> 5;
              unint64_t v67 = v66 + 1;
              if ((unint64_t)(v66 + 1) >> 59) {
                sub_1001D7FD4();
              }
              uint64_t v68 = v63 - *(void *)v96;
              if (v68 >> 4 > v67) {
                unint64_t v67 = v68 >> 4;
              }
              if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v69 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v69 = v67;
              }
              v70 = (char *)sub_1001D9EDC(v96 + 16, v69);
              v72 = &v70[32 * v66];
              uint64_t v73 = *(void *)buf;
              *(void *)v72 = v61;
              *((void *)v72 + 1) = v60;
              *((void *)v72 + 2) = v73;
              *((_DWORD *)v72 + 6) = isa;
              v75.int isa = *(Class *)v96;
              Class v74 = *(Class *)(v96 + 8);
              uint64_t v76 = v72;
              if (v74 != *(Class *)v96)
              {
                do
                {
                  long long v77 = *((_OWORD *)v74 - 2);
                  *(_OWORD *)(v76 - 20) = *(_OWORD *)((char *)v74 - 20);
                  *((_OWORD *)v76 - 2) = v77;
                  v76 -= 32;
                  Class v74 = (Class)((char *)v74 - 32);
                }
                while (v74 != v75.isa);
                Class v74 = *(Class *)v96;
              }
              unint64_t v65 = v72 + 32;
              *(void *)uint64_t v96 = v76;
              *(void *)(v96 + 8) = v72 + 32;
              *(void *)(v96 + 16) = &v70[32 * v71];
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              uint64_t v64 = *(void *)buf;
              *(void *)unint64_t v62 = v61;
              *(void *)(v62 + 8) = v60;
              *(void *)(v62 + 16) = v64;
              *(_DWORD *)(v62 + 24) = isa;
              unint64_t v65 = (char *)(v62 + 32);
            }
            *(void *)(v96 + 8) = v65;
            ++v57;
            if (v114) {
              v78 = &v116;
            }
            else {
              v78 = &v115;
            }
          }
          while (v57 < *v78);
        }
LABEL_155:
        if (v117)
        {
          uint64_t v85 = v113;
          uint64_t v113 = 0;
          if (v85) {
            operator delete[]();
          }
        }
        if (v120)
        {
          v86 = __p;
          __p = 0;
          if (v86) {
            operator delete[]();
          }
        }
LABEL_161:
        sub_1001E052C(v96 + 56, &v121);
        int v82 = 0;
        int v81 = 1;
        goto LABEL_162;
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
      v100 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
      {
        uint64_t v101 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        v102 = v114 ? &v116 : &v115;
        int v103 = *v102;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)v133 = 2082;
        *(void *)&v133[2] = "";
        __int16 v134 = 2050;
        uint64_t v135 = v101;
        __int16 v136 = 1026;
        *(_DWORD *)v137 = v103;
        *(_WORD *)&v137[4] = 2082;
        *(void *)&v137[6] = "assert";
        *(_WORD *)&v137[14] = 2081;
        *(void *)&v137[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!\", \"confidence vector size\":%{public}lu, \"number of prob matrix rows\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E448);
        }
      }
      v104 = qword_102419458;
      if (os_signpost_enabled((os_log_t)qword_102419458))
      {
        uint64_t v105 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        v106 = v114 ? &v116 : &v115;
        int v107 = *v106;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)v133 = 2082;
        *(void *)&v133[2] = "";
        __int16 v134 = 2050;
        uint64_t v135 = v105;
        __int16 v136 = 1026;
        *(_DWORD *)v137 = v107;
        *(_WORD *)&v137[4] = 2082;
        *(void *)&v137[6] = "assert";
        *(_WORD *)&v137[14] = 2081;
        *(void *)&v137[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v104, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!\", \"confidence vector size\":%{public}lu, \"number of prob matrix rows\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E448);
        }
      }
      v91 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
      {
        uint64_t v108 = (uint64_t)(v7[10].n128_u64[0] - v7[9].n128_u64[1]) >> 2;
        if (v114) {
          v109 = &v116;
        }
        else {
          v109 = &v115;
        }
        int v110 = *v109;
        *(_DWORD *)buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)v133 = 2082;
        *(void *)&v133[2] = "";
        __int16 v134 = 2050;
        uint64_t v135 = v108;
        __int16 v136 = 1026;
        *(_DWORD *)v137 = v110;
        *(_WORD *)&v137[4] = 2082;
        *(void *)&v137[6] = "assert";
        *(_WORD *)&v137[14] = 2081;
        *(void *)&v137[16] = "lslEventConfidences.size() == static_cast<size_t>(cosineSimilarityOpt->getNumRows())";
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, confidence vector size not equal to prob matrix row number!\", \"confidence vector size\":%{public}lu, \"number of prob matrix rows\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }
      abort_report_np();
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E448);
    }
    uint64_t v79 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v133 = 2082;
      *(void *)&v133[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, error normalizing currentLocalizationVec!\"}", buf, 0x12u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E448);
      }
    }
    v80 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)v133 = 2082;
      *(void *)&v133[2] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CosineSimilarityLocalization, error normalizing currentLocalizationVec!", "{\"msg%{public}.0s\":\"CosineSimilarityLocalization, error normalizing currentLocalizationVec!\"}", buf, 0x12u);
    }
    int v81 = 0;
    int v82 = 1;
LABEL_162:
    if (v127 && v125)
    {
      v126 = v125;
      operator delete(v125);
    }
    if (v123)
    {
      v124 = v123;
      operator delete(v123);
    }
    if (v121.n128_u64[0])
    {
      v121.n128_u64[1] = v121.n128_u64[0];
      operator delete((void *)v121.n128_u64[0]);
    }
    sub_10013F374(v130);
    sub_1000F5BB0((uint64_t)v128, v129);
    uint64_t v87 = v131[0];
    v131[0] = 0;
    if (v87) {
      operator delete[]();
    }
    if (((v82 | v81) & 1) == 0)
    {
      if (*(unsigned char *)(v96 + 80))
      {
        v88 = *(void **)(v96 + 56);
        if (v88)
        {
          *(void *)(v96 + 64) = v88;
          operator delete(v88);
        }
      }
      v89 = *v111;
      if (*v111)
      {
        *(void *)(v96 + 40) = v89;
        operator delete(v89);
      }
      Class v90 = *(Class *)v96;
      if (*(void *)v96)
      {
        *(void *)(v96 + 8) = v90;
        operator delete(v90);
      }
    }
  }
}

void sub_1001E0404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  sub_1001E058C((uint64_t)&a30);
  sub_1001E05E8((uint64_t)&a41);
  uint64_t v50 = a48;
  a48 = 0;
  if (v50) {
    operator delete[]();
  }
  sub_1001E058C(v48);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E052C(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1000F4EBC(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_1001E058C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1001E05E8(uint64_t a1)
{
  return a1;
}

void sub_1001E0620(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

unsigned char *sub_1001E0650(uint64_t a1, unsigned char *a2)
{
  for (unint64_t i = 0; i != 16; ++i)
  {
    uint64_t v3 = a2;
    if (*(unsigned __int8 *)(a1 + i) >= 0xA0u) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    *a2 = v4 + (*(unsigned char *)(a1 + i) >> 4);
    a2 += 2;
    unsigned int v5 = *(unsigned char *)(a1 + i) & 0xF;
    if (v5 >= 0xA) {
      char v6 = 87;
    }
    else {
      char v6 = 48;
    }
    v3[1] = v6 + v5;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      a2 = v3 + 3;
      v3[2] = 45;
    }
  }
  return a2;
}

char *sub_1001E06C8(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      double v18 = (char *)sub_10017EA34(v9, v17);
    }
    else {
      double v18 = 0;
    }
    uint64_t v28 = &v18[4 * v15];
    __p = v18;
    int v34 = v28;
    uint64_t v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    int v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)uint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    uint64_t v35 = v30;
    unsigned int v5 = sub_1001E08D8((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[4 * a5];
    uint64_t v25 = &v23[-4 * a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)unint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1001E08A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1001E08D8(void **a1, uint64_t a2, char *__src)
{
  unsigned int v5 = *(char **)(a2 + 8);
  char v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    double v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_1001E09A0(uint64_t a1, unsigned __int8 *a2, unsigned int a3, void *a4)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v8 = a1 + 24;
  sub_1001E181C((void *)(a1 + 24));
  v78[1] = 0;
  int v9 = &xmmword_102489B58;
  long long v77 = v78;
  v78[0] = 0;
  uint64_t v10 = byte_102489B6F;
  if (byte_102489B6F >= 0) {
    uint64_t v11 = byte_102489B6F;
  }
  else {
    uint64_t v11 = *((void *)&xmmword_102489B58 + 1);
  }
  int v12 = (char)a2[23];
  if (v12 >= 0) {
    uint64_t v13 = a2[23];
  }
  else {
    uint64_t v13 = *((void *)a2 + 1);
  }
  if (v11 != v13) {
    goto LABEL_17;
  }
  if (v12 >= 0) {
    unint64_t v14 = a2;
  }
  else {
    unint64_t v14 = *(unsigned __int8 **)a2;
  }
  if (byte_102489B6F < 0)
  {
    if (memcmp((const void *)xmmword_102489B58, v14, *((size_t *)&xmmword_102489B58 + 1))) {
      goto LABEL_17;
    }
LABEL_29:
    if (a3 == 3) {
      goto LABEL_89;
    }
    if (a3 != 4)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E468);
      }
      uint64_t v57 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v83 = 2050;
        uint64_t v84 = a3;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!\", \"Generation Algorithm\":%{public}lu}", buf, 0x1Cu);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229E468);
        }
      }
      BOOL v58 = qword_102419458;
      if (os_signpost_enabled((os_log_t)qword_102419458))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v83 = 2050;
        uint64_t v84 = a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!", "{\"msg%{public}.0s\":\"Unexpected generation algorithm for kMicroLocationSemisupervisedDomain!\", \"Generation Algorithm\":%{public}lu}", buf, 0x1Cu);
      }
      goto LABEL_127;
    }
    *(_DWORD *)(a1 + 40) = 2;
    sub_1000C7F88(buf);
    uint64_t v80 = 0;
    CFStringRef v19 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelRoiReductionPercentile", 0x8000100u, kCFAllocatorNull);
    int v20 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v19, &v80);
    CFRelease(v19);
    uint64_t v21 = v80;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    LODWORD(v80) = 2;
    *(void *)buf = &v80;
    int64_t v22 = sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    double v23 = 0.15;
    if (v20) {
      double v23 = *(double *)&v21;
    }
    *((double *)v22 + 5) = v23;
    sub_1000C7F88(buf);
    uint64_t v80 = 0;
    CFStringRef v24 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelNotRoiReductionPercentile", 0x8000100u, kCFAllocatorNull);
    int v25 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v24, &v80);
    CFRelease(v24);
    uint64_t v26 = v80;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    LODWORD(v80) = 3;
    *(void *)buf = &v80;
    int v27 = sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    double v28 = 0.06;
    if (v25) {
      double v28 = *(double *)&v26;
    }
    *((double *)v27 + 5) = v28;
    sub_1001E1C54(a4, "", buf);
    if (SBYTE3(v84) < 0)
    {
      if (*(void *)&buf[8] != 14)
      {
        operator delete(*(void **)buf);
LABEL_120:
        sub_1001E181C(buf);
        sub_1004CE798(v8, (uint64_t)buf);
        sub_10013F374(buf);
        sub_1000C7F88(buf);
        uint64_t v80 = 0;
        CFStringRef v67 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelDetectionThreshold", 0x8000100u, kCFAllocatorNull);
        int v68 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v67, &v80);
        CFRelease(v67);
        uint64_t v69 = v80;
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        LODWORD(v80) = 4;
        *(void *)buf = &v80;
        v70 = sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        BOOL v71 = v68 == 0;
        double v72 = 0.5;
LABEL_123:
        if (!v71) {
          double v72 = *(double *)&v69;
        }
        *((double *)v70 + 5) = v72;
        int v56 = sub_1001E1BA4();
        goto LABEL_126;
      }
      BOOL v64 = **(void **)buf != 0x6F2D726F6F646E69 || *(void *)(*(void *)buf + 6) != 0x726F6F6474756F2DLL;
      operator delete(*(void **)buf);
      if (v64) {
        goto LABEL_120;
      }
    }
    else
    {
      if (SBYTE3(v84) != 14) {
        goto LABEL_120;
      }
      if (*(void *)buf != 0x6F2D726F6F646E69 || *(void *)&buf[6] != 0x726F6F6474756F2DLL) {
        goto LABEL_120;
      }
    }
    sub_1000C7F88(&v80);
    sub_1000E9354(v79);
    CFStringRef v65 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceKernelFunction_IndoorOutdoor", 0x8000100u, kCFAllocatorNull);
    BOOL v66 = sub_100186344(v80, (uint64_t)v65, v79);
    CFRelease(v65);
    if (v66)
    {
      sub_1004CE794(buf);
      sub_1004CE5C0(v76, (uint64_t)buf);
      v76[0] = &off_1022A5E30;
      sub_10013F3C4(buf);
    }
    else
    {
      sub_100134750(buf, "{\"type\" : 2, \"sigma\" : 0.375, \"power\" : 3.0}");
      sub_100315834(v76, buf);
      if (SBYTE3(v84) < 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_10013F3C4(v79);
    if (v81) {
      sub_1000DB0A0(v81);
    }
    sub_1004CE798(v8, (uint64_t)v76);
    sub_10013F374(v76);
    sub_1000C7F88(buf);
    uint64_t v80 = 0;
    CFStringRef v74 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBinaryModelDetectionThreshold_IndoorOutdoor", 0x8000100u, kCFAllocatorNull);
    int v75 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v74, &v80);
    CFRelease(v74);
    uint64_t v69 = v80;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    LODWORD(v80) = 4;
    *(void *)buf = &v80;
    v70 = sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    BOOL v71 = v75 == 0;
    double v72 = 0.35;
    goto LABEL_123;
  }
  if (!byte_102489B6F) {
    goto LABEL_29;
  }
  while (*(unsigned __int8 *)v9 == *v14)
  {
    int v9 = (long long *)((char *)v9 + 1);
    ++v14;
    if (!--v10) {
      goto LABEL_29;
    }
  }
LABEL_17:
  uint64_t v15 = &xmmword_102489B40;
  uint64_t v16 = byte_102489B57;
  if (byte_102489B57 >= 0) {
    uint64_t v17 = byte_102489B57;
  }
  else {
    uint64_t v17 = *((void *)&xmmword_102489B40 + 1);
  }
  if (v17 != v13) {
    goto LABEL_48;
  }
  if (v12 >= 0) {
    double v18 = a2;
  }
  else {
    double v18 = *(unsigned __int8 **)a2;
  }
  if (byte_102489B57 < 0)
  {
    if (memcmp((const void *)xmmword_102489B40, v18, *((size_t *)&xmmword_102489B40 + 1))) {
      goto LABEL_48;
    }
    goto LABEL_89;
  }
  if (!byte_102489B57)
  {
LABEL_89:
    *(_DWORD *)(a1 + 40) = sub_1001E1980();
    sub_1001E1A2C();
    LODWORD(v80) = 0;
    *(void *)buf = &v80;
    sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v54;
    sub_1001E1AE8();
    LODWORD(v80) = 1;
    *(void *)buf = &v80;
    sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v55;
    sub_1001E181C(buf);
    sub_1004CE798(v8, (uint64_t)buf);
    sub_10013F374(buf);
    int v56 = sub_1001E1BA4();
LABEL_126:
    *(_DWORD *)(a1 + 44) = v56;
    goto LABEL_127;
  }
  while (*(unsigned __int8 *)v15 == *v18)
  {
    uint64_t v15 = (long long *)((char *)v15 + 1);
    ++v18;
    if (!--v16) {
      goto LABEL_89;
    }
  }
LABEL_48:
  int v30 = &qword_102489B70;
  uint64_t v31 = byte_102489B87;
  if (byte_102489B87 >= 0) {
    uint64_t v32 = byte_102489B87;
  }
  else {
    uint64_t v32 = qword_102489B78;
  }
  if (v32 != v13) {
    goto LABEL_62;
  }
  if (v12 >= 0) {
    unint64_t v33 = a2;
  }
  else {
    unint64_t v33 = *(unsigned __int8 **)a2;
  }
  if (byte_102489B87 < 0)
  {
    if (memcmp((const void *)qword_102489B70, v33, qword_102489B78)) {
      goto LABEL_62;
    }
LABEL_74:
    sub_1000C7F88(buf);
    LODWORD(v80) = 0;
    CFStringRef v38 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizerAlgorithm_HomeLOI", 0x8000100u, kCFAllocatorNull);
    int v39 = sub_1004D08E4(*(uint64_t *)buf, (uint64_t)v38, &v80);
    CFRelease(v38);
    int v40 = v80;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v39) {
      int v41 = v40;
    }
    else {
      int v41 = 3;
    }
    *(_DWORD *)(a1 + 40) = v41;
    sub_1000C7F88(buf);
    uint64_t v80 = 0;
    CFStringRef v42 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMinPercentile_HomeLOI", 0x8000100u, kCFAllocatorNull);
    int v43 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v42, &v80);
    CFRelease(v42);
    uint64_t v44 = v80;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    LODWORD(v80) = 0;
    *(void *)buf = &v80;
    v45 = sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    double v46 = 0.1;
    if (v43) {
      double v46 = *(double *)&v44;
    }
    *((double *)v45 + 5) = v46;
    sub_1000C7F88(buf);
    uint64_t v80 = 0;
    CFStringRef v47 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMaxPercentile_HomeLOI", 0x8000100u, kCFAllocatorNull);
    int v48 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v47, &v80);
    CFRelease(v47);
    uint64_t v49 = v80;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    LODWORD(v80) = 1;
    *(void *)buf = &v80;
    uint64_t v50 = sub_1000FEE0C((uint64_t **)a1, (int *)&v80, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    double v51 = 0.2;
    if (v48) {
      double v51 = *(double *)&v49;
    }
    *((double *)v50 + 5) = v51;
    sub_1000C7F88(&v80);
    sub_1000E9354(v79);
    CFStringRef v52 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceKernelFunction_HomeLOI", 0x8000100u, kCFAllocatorNull);
    BOOL v53 = sub_100186344(v80, (uint64_t)v52, v79);
    CFRelease(v52);
    if (v53)
    {
      sub_1004CE794(buf);
      sub_1004CE5C0(v76, (uint64_t)buf);
      v76[0] = &off_1022A5E30;
      sub_10013F3C4(buf);
    }
    else
    {
      sub_100134750(buf, "{\"type\" : 2, \"sigma\" : 0.6, \"power\" : 3.5}");
      sub_100315834(v76, buf);
      if (SBYTE3(v84) < 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_10013F3C4(v79);
    if (v81) {
      sub_1000DB0A0(v81);
    }
    sub_1004CE798(v8, (uint64_t)v76);
    sub_10013F374(v76);
    sub_1000C7F88(buf);
    LODWORD(v80) = 0;
    CFStringRef v59 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsHomeLoiLocalizerFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
    int v60 = sub_1004D08E4(*(uint64_t *)buf, (uint64_t)v59, &v80);
    CFRelease(v59);
    int v61 = v80;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v60) {
      int v62 = v61;
    }
    else {
      int v62 = 5;
    }
    *(_DWORD *)(a1 + 44) = v62;
    goto LABEL_127;
  }
  if (!byte_102489B87) {
    goto LABEL_74;
  }
  while (*(unsigned __int8 *)v30 == *v33)
  {
    int v30 = (uint64_t *)((char *)v30 + 1);
    ++v33;
    if (!--v31) {
      goto LABEL_74;
    }
  }
LABEL_62:
  int v34 = &xmmword_102489B88;
  uint64_t v35 = byte_102489B9F;
  if (byte_102489B9F >= 0) {
    uint64_t v36 = byte_102489B9F;
  }
  else {
    uint64_t v36 = *((void *)&xmmword_102489B88 + 1);
  }
  if (v36 != v13) {
    goto LABEL_127;
  }
  if (v12 >= 0) {
    uint64_t v37 = a2;
  }
  else {
    uint64_t v37 = *(unsigned __int8 **)a2;
  }
  if (byte_102489B9F < 0)
  {
    if (memcmp((const void *)xmmword_102489B88, v37, *((size_t *)&xmmword_102489B88 + 1))) {
      goto LABEL_127;
    }
LABEL_108:
    *(_DWORD *)(a1 + 40) = 4;
    goto LABEL_127;
  }
  if (!byte_102489B9F) {
    goto LABEL_108;
  }
  while (*(unsigned __int8 *)v34 == *v37)
  {
    int v34 = (long long *)((char *)v34 + 1);
    ++v37;
    if (!--v35) {
      goto LABEL_108;
    }
  }
LABEL_127:
  sub_1000F5BB0((uint64_t)&v77, v78[0]);
  return a1;
}

void sub_1001E15D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a15);
  if (a18) {
    sub_1000DB0A0(a18);
  }
  sub_1000F5BB0((uint64_t)&a12, a13);
  sub_10013F374(v25);
  sub_1000F5BB0(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1001E1728(uint64_t a1, unsigned __int8 *a2)
{
  LOBYTE(__p) = 0;
  char v6 = 0;
  sub_1001E09A0(a1, a2, 0, &__p);
  if (v6 && v5 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_1001E1780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E17A4(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  LOBYTE(__p) = 0;
  char v7 = 0;
  sub_1001E09A0(a1, a2, a3, &__p);
  if (v7 && v6 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_1001E17F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E181C(void *a1@<X8>)
{
  sub_1000C7F88(&v8);
  sub_1000E9354(v7);
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceKernelFunction", 0x8000100u, kCFAllocatorNull);
  BOOL v3 = sub_100186344(v8, (uint64_t)v2, v7);
  CFRelease(v2);
  if (v3)
  {
    sub_1004CE794(v6);
    sub_1004CE5C0(a1, (uint64_t)v6);
    *a1 = &off_1022A5E30;
    sub_10013F3C4(v6);
  }
  else
  {
    sub_100134750(__p, "{\"type\" : 2, \"sigma\" : 0.625, \"power\" : 3.0}");
    sub_100315834(a1, __p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10013F3C4(v7);
  if (v9) {
    sub_1000DB0A0(v9);
  }
}

void sub_1001E1928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a18);
  int v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001E1980()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizerAlgorithm", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 1;
  }
}

void sub_1001E1A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E1A2C()
{
  sub_1000C7F88(&v2);
  uint64_t v1 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMinPercentile", 0x8000100u, kCFAllocatorNull);
  sub_1000A6A10(v2, (uint64_t)v0, &v1);
  CFRelease(v0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1001E1ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E1AE8()
{
  sub_1000C7F88(&v2);
  uint64_t v1 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNullSpaceDistanceReductionFunctionMaxPercentile", 0x8000100u, kCFAllocatorNull);
  sub_1000A6A10(v2, (uint64_t)v0, &v1);
  CFRelease(v0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1001E1B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E1BA4()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 4;
  }
}

void sub_1001E1C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001E1C54@<X0>(void *result@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (!*((unsigned char *)result + 24)) {
    return sub_100134750(a3, a2);
  }
  if (*((char *)result + 23) < 0) {
    return sub_1000DC48C(a3, (void *)*result, result[1]);
  }
  *(_OWORD *)a3 = *(_OWORD *)result;
  a3[2] = result[2];
  return result;
}

double sub_1001E1C8C(uint64_t a1)
{
  int v2 = 0;
  return *(double *)sub_1000A43BC(a1, &v2);
}

double sub_1001E1CB8(uint64_t a1)
{
  int v2 = 1;
  return *(double *)sub_1000A43BC(a1, &v2);
}

void *sub_1001E1CE8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = sub_1004CE5C0(a2, a1 + 24);
  *a2 = &off_1022A5E30;
  return result;
}

uint64_t sub_1001E1D30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1001E1D38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = a1 + 8;
  do
  {
    int v3 = *(_DWORD *)(v1 + 32);
    BOOL v4 = v3 < 4;
    if (v3 >= 4) {
      uint64_t v5 = (uint64_t *)v1;
    }
    else {
      uint64_t v5 = (uint64_t *)(v1 + 8);
    }
    if (!v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  if (v2 == a1 + 8 || *(int *)(v2 + 32) > 4) {
    return 0;
  }
  int v7 = 4;
  return *sub_1000A43BC(a1, &v7);
}

void sub_1001E1DB8(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1001E1DE8(uint64_t a1, uint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result = sub_1005F93E4(a1, a4);
  if (result)
  {
    if (a3)
    {
      uint64_t v9 = *a2;
      int v10 = 5;
      __int16 v11 = 0;
      char v12 = 0;
      char v13 = 0;
      sub_1005FEC4C(a1, a4, v9, (uint64_t)&v9);
    }
  }
  return result;
}

void sub_1001E2334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a27);
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  sub_101A129A8((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void *sub_1001E23E0(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000E6574();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    char v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_1001E248C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419790, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419790))
  {
    sub_1001E8060((std::string *)&xmmword_102419778);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102419778, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419790);
  }
  if (byte_10241978F < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102419778, *((unint64_t *)&xmmword_102419778 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102419778;
    *(void *)(a1 + 16) = unk_102419788;
  }
}

void sub_1001E2548(_Unwind_Exception *a1)
{
}

void sub_1001E2560(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024197B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024197B0))
  {
    sub_1001E8568((std::string *)&xmmword_102419798);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102419798, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024197B0);
  }
  if (byte_1024197AF < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102419798, *((unint64_t *)&xmmword_102419798 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102419798;
    *(void *)(a1 + 16) = unk_1024197A8;
  }
}

void sub_1001E261C(_Unwind_Exception *a1)
{
}

void sub_1001E2634(uint64_t *a1)
{
  BOOL v2 = sub_10014C3C0(*a1);
  *((unsigned char *)a1 + 8) = v2;
  if (!v2)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    uint64_t v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Database is not connected so we can't intialize our table", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    char v6 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n");
LABEL_30:
    if (v6 != buf) {
      free(v6);
    }
    return;
  }
  sub_1005F7B0C(*a1, "MicroLocationLabels", (const char **)&off_10229E4C0, 0, 0);
  char v3 = sub_1005F93E4(*a1, "MicroLocationLabels");
  *((unsigned char *)a1 + 8) = v3;
  if (v3)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    BOOL v4 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136380675;
      int v10 = "MicroLocationLabels";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E4A0);
      }
      size_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_1001E2BBC(a1);
    return;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  size_t v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    int v10 = "MicroLocationLabels";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    char v6 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMicroLocationRecordingLabelsTable::initTable()", "%s\n");
    goto LABEL_30;
  }
}

uint64_t sub_1001E2A8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  sub_1001E2634((uint64_t *)a1);
  return a1;
}

uint64_t sub_1001E2ABC(uint64_t result, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  long long v7 = *a4;
  *(void *)(result + 32) = *((void *)a4 + 2);
  *(_OWORD *)(result + 16) = v7;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(void *)(result + 40) = a5;
  *(void *)(result + 48) = a6;
  *(double *)(result + 56) = a7;
  return result;
}

uint64_t sub_1001E2AE4(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, double a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  long long v7 = *a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(double *)(a1 + 56) = a6;
  sub_1002E58D4(a5, (uint64_t)&v11);
  int32x2_t v8 = vdup_n_s32(v12 == 0);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *(int8x16_t *)(a1 + 40) = vandq_s8(v11, (int8x16_t)vcgezq_s64(vshlq_n_s64(v9, 0x3FuLL)));
  return a1;
}

void sub_1001E2B9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E2BBC(uint64_t *a1)
{
  if (sub_1005F93E4(*a1, "MicroLocationRecordingLabels"))
  {
    sub_1000C7F88(v60);
    LODWORD(v58[0]) = 0;
    CFStringRef v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLabelsTableMaxRowsToMigrate", 0x8000100u, kCFAllocatorNull);
    int v3 = sub_1004D08E4(*(uint64_t *)v60, (uint64_t)v2, v58);
    CFRelease(v2);
    unsigned int v4 = v58[0];
    if (*(void *)&v60[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&v60[8]);
    }
    if (v3) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = 250;
    }
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = xmmword_101D04970;
    strcpy(v47.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    char v6 = std::string::append(&v47, "MicroLocationLabels");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int32x2_t v8 = std::string::append(&v48, " (");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_1001E248C((uint64_t)v45);
    if ((v46 & 0x80u) == 0) {
      int v10 = v45;
    }
    else {
      int v10 = (void **)v45[0];
    }
    if ((v46 & 0x80u) == 0) {
      std::string::size_type v11 = v46;
    }
    else {
      std::string::size_type v11 = (std::string::size_type)v45[1];
    }
    char v12 = std::string::append(&v49, (const std::string::value_type *)v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = std::string::append(&v50, ") ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v51, "SELECT ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_1001E248C((uint64_t)__p);
    if ((v44 & 0x80u) == 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      std::string::size_type v19 = v44;
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    int v20 = std::string::append(&v52, (const std::string::value_type *)v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int64_t v22 = std::string::append(&v53, " FROM ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = std::string::append(&v54, "MicroLocationRecordingLabels");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v55, " ORDER BY ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    double v28 = std::string::append(&v56, "ReceivedTimestamp");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    int v30 = std::string::append(&v57, " DESC LIMIT ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    *(void *)&v60[16] = *((void *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)int v60 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v42, v5);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = &v42;
    }
    else {
      uint64_t v32 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    int v34 = std::string::append((std::string *)v60, (const std::string::value_type *)v32, size);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    int64_t v59 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)BOOL v58 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if ((v60[23] & 0x80000000) != 0) {
      operator delete(*(void **)v60);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if ((char)v46 < 0) {
      operator delete(v45[0]);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    uint64_t v36 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = v58;
      if (v59 < 0) {
        uint64_t v37 = (void **)v58[0];
      }
      *(void *)int v60 = 68289282;
      *(_WORD *)&v60[8] = 2082;
      *(void *)&v60[10] = "";
      *(_WORD *)&v60[18] = 2082;
      *(void *)&v60[20] = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Executing migration query\", \"Query: \":%{public, location:escape_only}s}", v60, 0x1Cu);
    }
    if (v59 >= 0) {
      CFStringRef v38 = v58;
    }
    else {
      CFStringRef v38 = (void **)v58[0];
    }
    sub_10014D518(*a1, (uint64_t)v38);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  int v39 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "Previous recording labels table does not exist, no need to migrate", v60, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v60, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    LOWORD(v58[0]) = 0;
    int v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::migratePreviousTableIfNecessary()", "%s\n", v41);
    if (v41 != v60) {
      free(v41);
    }
  }
  return 0;
}

void sub_1001E35E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
  }
  if (a68 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001E37C8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  *((unsigned char *)&v46.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v46, "SELECT * FROM (");
  char v45 = 7;
  strcpy(__s, "SELECT ");
  int v10 = std::string::append(&v46, __s, 7uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_1001E248C((uint64_t)__p);
  if ((v43 & 0x80u) == 0) {
    char v12 = __p;
  }
  else {
    char v12 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v13 = v43;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  unint64_t v14 = std::string::append(&v47, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v48, " FROM ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    std::string::size_type v19 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  long long v21 = std::string::append(&v49, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  long long v23 = std::string::append(&v50, " ORDER BY ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  long long v25 = std::string::append(&v55, "ReceivedTimestamp");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  long long v27 = std::string::append(&v56, " DESC LIMIT ");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v41, a3);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v29 = &v41;
  }
  else {
    long long v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v41.__r_.__value_.__l.__size_;
  }
  long long v31 = std::string::append(&v51, (const std::string::value_type *)v29, size);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  unint64_t v33 = std::string::append(&__dst, ") ORDER BY ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  int v35 = *(char *)(a4 + 23);
  if (v35 >= 0) {
    uint64_t v36 = (const std::string::value_type *)a4;
  }
  else {
    uint64_t v36 = *(const std::string::value_type **)a4;
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v37 = *(void *)(a4 + 8);
  }
  CFStringRef v38 = std::string::append(&v54, v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v45 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if (!a5) {
      goto LABEL_54;
    }
  }
  else if (!a5)
  {
LABEL_54:
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v40 = &v52;
    }
    else {
      int v40 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    sub_10014D518(a1, (uint64_t)v40);
  }
  std::string::append(&v52, " DESC");
  goto LABEL_54;
}

void sub_1001E3D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001E40A4()
{
}

void sub_1001E40B8(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x1001E3EB8);
}

uint64_t sub_1001E40C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v1 = *(void *)a1;
    if (byte_10247A4D7 >= 0) {
      CFStringRef v2 = &xmmword_10247A4C0;
    }
    else {
      CFStringRef v2 = (long long *)xmmword_10247A4C0;
    }
    sub_10014D518(v1, (uint64_t)v2);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  int v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::insertOrReplace(const std::vector<Entry> &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

void sub_1001E476C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E4810(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    *((unsigned char *)&v28.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v28, "SELECT DISTINCT ");
    char v6 = std::string::append(&v28, "ClientID");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int32x2_t v8 = std::string::append(&v29, " FROM ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = std::string::append(&v30, "MicroLocationLabels");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    char v12 = std::string::append(&v31, " WHERE ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = std::string::append(&v32, "ClientID");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v33, " != ''");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = std::string::append(&v39, " LIMIT ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v27, a2);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = &v27;
    }
    else {
      std::string::size_type v20 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
    }
    long long v22 = std::string::append(&v40, (const std::string::value_type *)v20, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    int64_t v35 = v22->__r_.__value_.__r.__words[2];
    long long __p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v35 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    sub_10014D518(*(void *)a1, (uint64_t)p_p);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  long long v25 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v40.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all client IDs", (uint8_t *)&v40, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v40, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    LOWORD(v36) = 0;
    long long v26 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<std::string> CLMicroLocationRecordingLabelsTable::selectAllClientIds(uint32_t)", "%s\n", (const char *)v26);
    if (v26 != &v40) {
      free(v26);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_1001E4D04(_Unwind_Exception *a1)
{
}

void sub_1001E5068(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v26, "(SELECT * FROM ");
    int32x2_t v8 = std::string::append(&v26, "MicroLocationLabels");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = std::string::append(&v27, " WHERE ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    char v12 = std::string::append(&v28, "ClientID");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = std::string::append(&v29, " LIKE '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      long long v17 = (const std::string::value_type *)a2;
    }
    else {
      long long v17 = *(const std::string::value_type **)a2;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(a2 + 8);
    }
    long long v19 = std::string::append(&v30, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    long long v21 = std::string::append(&v31, "')");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    __p[2] = (void *)v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    uint64_t v23 = *(void *)a1;
    sub_100134750(&v31, "ReceivedTimestamp");
    sub_1001E37C8(v23, (uint64_t)__p, a3, (uint64_t)&v31, 0);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  long long v24 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    LOWORD(v31.__r_.__value_.__l.__data_) = 0;
    long long v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationRecordingLabelsTable::selectRecordingLabelsForClient(const std::string &, uint32_t)", "%s\n", v25);
    if (v25 != (char *)__p) {
      free(v25);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_1001E53F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
}

void sub_1001E54BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, void *a6@<X8>, double a7@<D0>)
{
  v88[0] = a3;
  v88[1] = a4;
  if (*(unsigned char *)(a1 + 8))
  {
    std::to_string(&v87, a7);
    *((unsigned char *)&v67.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v67, "(SELECT * FROM ");
    long long v11 = std::string::append(&v67, "MicroLocationLabels");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    long long v13 = std::string::append(&v68, " WHERE ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    long long v15 = std::string::append(&v69, "ClientID");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    long long v17 = std::string::append(&v70, " LIKE '");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = *(char *)(a2 + 23);
    if (v19 >= 0) {
      long long v20 = (const std::string::value_type *)a2;
    }
    else {
      long long v20 = *(const std::string::value_type **)a2;
    }
    if (v19 >= 0) {
      std::string::size_type v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v21 = *(void *)(a2 + 8);
    }
    long long v22 = std::string::append(&v71, v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v72, "' AND ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string v26 = std::string::append(&v73, "TriggerUUID");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    char v66 = 4;
    strcpy(__s, " IN ");
    std::string v28 = std::string::append(&v74, __s, 4uLL);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    char v64 = 9;
    strcpy((char *)v63, "( SELECT ");
    std::string v30 = std::string::append(&v75, (const std::string::value_type *)v63, 9uLL);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::string v32 = std::string::append(&v76, "TriggerUUID");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    long long v34 = std::string::append(&v77, " FROM ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append(&v78, "MicroLocationRecordingEvents");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    uint64_t v38 = std::string::append(&v79, " WHERE ");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    sub_100134750(v59, "RtLoiGroupId");
    sub_10022B538((const void **)v59, v88, (uint64_t)__p);
    if ((v62 & 0x80u) == 0) {
      std::string v40 = __p;
    }
    else {
      std::string v40 = (void **)__p[0];
    }
    if ((v62 & 0x80u) == 0) {
      std::string::size_type v41 = v62;
    }
    else {
      std::string::size_type v41 = (std::string::size_type)__p[1];
    }
    std::string v42 = std::string::append(&v80, (const std::string::value_type *)v40, v41);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    unsigned __int8 v44 = std::string::append(&v81, ") AND ");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::string v46 = std::string::append(&v82, "ReceivedTimestamp");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::string v48 = std::string::append(&v83, " > ");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v50 = &v87;
    }
    else {
      std::string v50 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v87.__r_.__value_.__l.__size_;
    }
    std::string v52 = std::string::append(&v84, (const std::string::value_type *)v50, size);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::string v54 = std::string::append(&v85, ")");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v86[2] = (void *)v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)v86 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if ((char)v62 < 0) {
      operator delete(__p[0]);
    }
    if (v60 < 0) {
      operator delete(v59[0]);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (v64 < 0) {
      operator delete(v63[0]);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (v66 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    uint64_t v56 = *(void *)a1;
    sub_100134750(&v85, "ReceivedTimestamp");
    sub_1001E37C8(v56, (uint64_t)v86, a5, (uint64_t)&v85, 1);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  std::string v57 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v87.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all", (uint8_t *)&v87, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v87, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    LOWORD(v86[0]) = 0;
    BOOL v58 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationRecordingLabelsTable::selectRecordingLabelsForClientAtLoi(const std::string &, boost::uuids::uuid, uint32_t, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", (const char *)v58);
    if (v58 != &v87) {
      free(v58);
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
}

void sub_1001E5C00(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  _Unwind_Resume(a1);
}

void sub_1001E5DF0()
{
}

void sub_1001E5DF8()
{
}

void sub_1001E5E00()
{
}

void sub_1001E5E08()
{
}

void sub_1001E5E10()
{
}

void sub_1001E5E18()
{
}

void sub_1001E5E20()
{
}

void sub_1001E5E28()
{
}

void sub_1001E5E30()
{
}

void sub_1001E5E38()
{
}

void sub_1001E5E40()
{
}

void sub_1001E5E48()
{
}

void sub_1001E5E50()
{
}

void sub_1001E5E58()
{
}

uint64_t sub_1001E5E60(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v37, "DELETE FROM ");
    unsigned int v4 = std::string::append(&v37, "MicroLocationLabels");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    char v6 = std::string::append(&v38, " WHERE ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int32x2_t v8 = std::string::append(&v39, "ReceivedTimestamp");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = std::string::append(&v40, " IN (");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = std::string::append(&v41, "SELECT ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = std::string::append(&v42, "ReceivedTimestamp");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    long long v16 = std::string::append(&v43, " FROM ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v44, "MicroLocationLabels");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    long long v20 = std::string::append(&v45, " ORDER BY ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v46, "ReceivedTimestamp");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v47, " LIMIT ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, a2);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v26 = &v36;
    }
    else {
      std::string v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    std::string v28 = std::string::append(&v48, (const std::string::value_type *)v26, size);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::string v30 = std::string::append(&v51, ")");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t v50 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (v50 >= 0) {
      std::string v32 = __p;
    }
    else {
      std::string v32 = (void **)__p[0];
    }
    sub_10014D518(*(void *)a1, (uint64_t)v32);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  long long v33 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v51, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v51, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    LOWORD(__p[0]) = 0;
    long long v35 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::deleteOldestRows(uint64_t)", "%s\n", (const char *)v35);
    if (v35 != &v51) {
      free(v35);
    }
  }
  return 0;
}

void sub_1001E64F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001E669C(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *a2;
    if (*a2 != a2[1])
    {
      *((unsigned char *)&v58.__r_.__value_.__s + 23) = 1;
      LOWORD(v58.__r_.__value_.__l.__data_) = 34;
      int v5 = *(char *)(v3 + 23);
      if (v5 >= 0) {
        char v6 = (const std::string::value_type *)v3;
      }
      else {
        char v6 = *(const std::string::value_type **)v3;
      }
      if (v5 >= 0) {
        std::string::size_type v7 = *(unsigned __int8 *)(v3 + 23);
      }
      else {
        std::string::size_type v7 = *(void *)(v3 + 8);
      }
      int32x2_t v8 = std::string::append(&v58, v6, v7);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      int v10 = std::string::append(&v59, "\"");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      uint64_t v12 = a2[1];
      for (uint64_t i = *a2 + 24; i != v12; i += 24)
      {
        *((unsigned char *)&v56.__r_.__value_.__s + 23) = 1;
        LOWORD(v56.__r_.__value_.__l.__data_) = 44;
        long long v14 = std::string::append(&v56, "\"");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        int v16 = *(char *)(i + 23);
        if (v16 >= 0) {
          long long v17 = (const std::string::value_type *)i;
        }
        else {
          long long v17 = *(const std::string::value_type **)i;
        }
        if (v16 >= 0) {
          std::string::size_type v18 = *(unsigned __int8 *)(i + 23);
        }
        else {
          std::string::size_type v18 = *(void *)(i + 8);
        }
        long long v19 = std::string::append(&v57, v17, v18);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        long long v21 = std::string::append(&v58, "\"");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v23 = &v59;
        }
        else {
          long long v23 = (std::string *)v59.__r_.__value_.__r.__words[0];
        }
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v59.__r_.__value_.__l.__size_;
        }
        std::string::append(&v55, (const std::string::value_type *)v23, size);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
      }
      *((unsigned char *)&v51.__r_.__value_.__s + 23) = 12;
      strcpy((char *)&v51, "DELETE FROM ");
      long long v25 = std::string::append(&v51, "MicroLocationLabels");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      long long v27 = std::string::append(&v52, " WHERE ");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      long long v29 = std::string::append(&v53, "ClientID");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      char v50 = 4;
      strcpy(__s, " IN ");
      long long v31 = std::string::append(&v54, __s, 4uLL);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      char v48 = 1;
      strcpy(v47, "(");
      long long v33 = std::string::append(&v56, v47, 1uLL);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &v55;
      }
      else {
        long long v35 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v55.__r_.__value_.__l.__size_;
      }
      std::string v37 = std::string::append(&v57, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      char v46 = 1;
      strcpy(v45, ")");
      std::string v39 = std::string::append(&v59, v45, 1uLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (v46 < 0) {
        operator delete(*(void **)v45);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (v48 < 0) {
        operator delete(*(void **)v47);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (v50 < 0) {
        operator delete(*(void **)__s);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v41 = &v58;
      }
      else {
        std::string v41 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      sub_10014D518(*(void *)a1, (uint64_t)v41);
    }
    sub_101A51274();
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E4A0);
  }
  std::string v42 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v59.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't delete recording labels", (uint8_t *)&v59, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v59, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E4A0);
    }
    LOWORD(v58.__r_.__value_.__l.__data_) = 0;
    std::string v44 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationRecordingLabelsTable::deleteRecordingLabelsForClients(const std::vector<std::string> &)", "%s\n", (const char *)v44);
    if (v44 != &v59) {
      free(v44);
    }
  }
  return 0;
}

void sub_1001E6E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void sub_1001E6FC8(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1001E6FF8(sqlite3_stmt *a1, int a2)
{
  sub_1001E7088(a1, a2, __p);
  unint64_t v2 = v8;
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = (unsigned __int8 *)__p;
  }
  else {
    uint64_t v3 = (unsigned __int8 *)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  uint64_t v4 = sub_1001E70CC((uint64_t)&v6, v3, &v3[v2]);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1001E706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001E7088@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = (char *)sqlite3_column_text(a1, a2);
  if (!v4) {
    sub_101A51400();
  }

  return sub_100134750(a3, v4);
}

uint64_t sub_1001E70CC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    goto LABEL_32;
  }
  int v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    int v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }
  else
  {
    signed __int8 v7 = *a2;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  while (1)
  {
    do
    {
      if (v8 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          int v9 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }
        int v9 = 0;
      }
      else
      {
        BOOL v11 = (v8 & 0x7FFFFFFD) == 8 || v8 == 6;
        if (v11 && ((v9 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          goto LABEL_22;
        }
      }
LABEL_24:
      char v13 = sub_1001E72D4(a1, v7);
      *((unsigned char *)&v17 + v8) = v13;
      if (v5 == (signed __int8 *)a3) {
        goto LABEL_32;
      }
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((unsigned char *)&v17 + v8++) = sub_1001E72D4(a1, v14) | (16 * v13);
    }
    while (!v8);
    if (v8 == 16) {
      break;
    }
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_1001E726C();
  }
  return v17;
}

void sub_1001E726C()
{
  std::runtime_error::runtime_error(&v1, "invalid uuid string");
  v0[0] = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/boost/uuid/string_generator.hpp";
  v0[1] = "void boost::uuids::string_generator::throw_invalid() const";
  v0[2] = 192;
  sub_1001E73B0((uint64_t)&v1, (uint64_t)v0);
}

void sub_1001E72C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

uint64_t sub_1001E72D4(uint64_t a1, int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419770, memory_order_acquire) & 1) == 0)
  {
    int v8 = a2;
    int v7 = __cxa_guard_acquire(&qword_102419770);
    a2 = v8;
    if (v7)
    {
      qword_102419768 = (uint64_t)&a0123456789abcd[(void)off_102419760];
      __cxa_guard_release(&qword_102419770);
      a2 = v8;
    }
  }
  uint64_t v2 = qword_102419768;
  uint64_t v3 = memchr("0123456789abcdefABCDEF", a2, qword_102419768 - (void)"0123456789abcdefABCDEF");
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (unsigned char *)v2;
  }
  unint64_t v5 = v4 - "0123456789abcdefABCDEF";
  if (v5 >= (unint64_t)off_102419760) {
    sub_1001E726C();
  }
  return byte_101D049F8[v5];
}

void sub_1001E73B0(uint64_t a1, uint64_t a2)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1001E7418(exception, a1, a2);
}

void sub_1001E7404(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E741C(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_1001E7470(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &off_10229E6D0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &off_10229E658;
  *(void *)(a1 + 8) = off_10229E688;
  *(void *)(a1 + 24) = off_10229E6B0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1001E7528()
{
}

void sub_1001E76D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1001E79C0(&a9);
  sub_1001E79C0(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1001E7750(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1001E7A1C((uint64_t)exception, a1);
}

void sub_1001E7798(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001E77AC(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete();
}

void sub_1001E7820(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_1001E787C(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  operator delete();
}

void sub_1001E78F4(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_1001E794C(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  operator delete();
}

uint64_t *sub_1001E79C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1001E7A1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10229E6D0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_10229E700;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_10229E658;
  *(void *)(a1 + 8) = off_10229E688;
  *(void *)(a1 + 24) = off_10229E6B0;
  return a1;
}

void sub_1001E7B28(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E7B3C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

uint64_t sub_1001E7BD4(uint64_t *a1, long long *a2, long long *a3, long long *a4, double *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58) {
    sub_1001D7FD4();
  }
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  long long v21 = a1 + 2;
  if (v13) {
    int v14 = (char *)sub_10017EAF0((uint64_t)(a1 + 2), v13);
  }
  else {
    int v14 = 0;
  }
  uint64_t v17 = v14;
  std::string::size_type v18 = &v14[64 * v6];
  long long v20 = &v14[64 * v13];
  sub_1001E7CEC((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  long long v19 = v18 + 64;
  sub_1001E7D78(a1, &v17);
  uint64_t v15 = a1[1];
  sub_1001E7F2C((uint64_t)&v17);
  return v15;
}

void sub_1001E7CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001E7F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1001E7CEC(uint64_t a1, uint64_t a2, long long *a3, long long *a4, long long *a5, double *a6)
{
  long long v9 = *a3;
  if (*((char *)a4 + 23) < 0)
  {
    long long v13 = *a3;
    sub_1000DC48C(&__dst, *(void **)a4, *((void *)a4 + 1));
    long long v9 = v13;
  }
  else
  {
    long long __dst = *a4;
    uint64_t v15 = *((void *)a4 + 2);
  }
  double result = *a6;
  long long v11 = *a5;
  long long v12 = __dst;
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v12;
  *(void *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 40) = v11;
  *(double *)(a2 + 56) = result;
  return result;
}

uint64_t sub_1001E7D78(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001E7DF0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1001E7DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      long long v8 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      uint64_t v9 = *(void *)(a3 - 8);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 64;
      *((void *)&v15 + 1) -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1001E7EAC((uint64_t)v12);
  return v10;
}

uint64_t sub_1001E7EAC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001E7EE4(a1);
  }
  return a1;
}

void sub_1001E7EE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    v1 += 64;
  }
}

uint64_t sub_1001E7F2C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1001E7F64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 25) < 0)
      {
        operator delete(*(void **)(v2 - 48));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_1001E7FBC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1001E8010((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1001E8010(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 25) < 0) {
      operator delete(*(void **)(i - 48));
    }
  }
  a1[1] = v2;
}

double sub_1001E8060@<D0>(std::string *a1@<X8>)
{
  memset(&v3, 0, sizeof(v3));
  sub_1001E80C4(&v3);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1001E80A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E80C4(std::string *a1)
{
  sub_1001E8114(a1);
  sub_1001E81E8(a1);
  sub_1001E82C8(a1);
  sub_1001E83A8(a1);

  return sub_1001E8488(a1);
}

uint64_t sub_1001E8114(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v2 = std::string::append(&v7, "TriggerUUID");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1001E81B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E81E8(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "ClientID");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1001E8294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E82C8(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "LabelUUID");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1001E8374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E83A8(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "ReceivedTimestamp");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1001E8454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E8488(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "RowId");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1001E8534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1001E8568@<D0>(std::string *a1@<X8>)
{
  sub_100134750(&v11, "VALUES (");
  uint64_t v2 = 5;
  do
  {
    if (v2 == 5)
    {
      *((unsigned char *)&v8.__r_.__value_.__s + 23) = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      *((unsigned char *)&v8.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v8, ", ");
    }
    long long v3 = std::string::append(&v8, "?");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v10 >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (v10 >= 0) {
      std::string::size_type v6 = HIBYTE(v10);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    --v2;
  }
  while (v2);
  std::string::append(&v11, ")");
  double result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_1001E8674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E86C0(uint64_t a1, std::string *a2)
{
  sub_1001E87B4((uint64_t)v6);
  sub_1001E8A80(v6);
  uint64_t v4 = v3;
  if (v3) {
    sub_1001E9118(a2, v9, v10, v10 - v9);
  }
  std::ostream::~ostream();
  if (v8 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  return v4;
}

void sub_1001E8764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t sub_1001E87B4(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 24;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_10229E720;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)a1);
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  *(void *)(a1 + 272) = a1 + 264;
  *(void *)(a1 + 280) = a1 + 266;
  return a1;
}

void sub_1001E8888(void *a1)
{
}

uint64_t sub_1001E88A4(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }

  return std::streambuf::~streambuf();
}

void sub_1001E8904(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  std::streambuf::~streambuf();

  operator delete();
}

void *sub_1001E8978(void *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

double sub_1001E8988@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x10) != 0)
  {
    uint64_t v7 = -1;
    goto LABEL_19;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4] - v5;
  if (!a3)
  {
    uint64_t v7 = -1;
    if (a2 < 0 || v6 < a2) {
      goto LABEL_19;
    }
    uint64_t v9 = v5 + a2;
LABEL_15:
    uint64_t v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    uint64_t v7 = -1;
    uint64_t v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6) {
      goto LABEL_19;
    }
    uint64_t v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    uint64_t v9 = a1[3];
    goto LABEL_18;
  }
  uint64_t v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    uint64_t v7 = v9 - v5;
  }
LABEL_19:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v7;
  return result;
}

double sub_1001E8A38@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 0x10) == 0)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = -1;
  return result;
}

__n128 sub_1001E8A80(__n128 *a1)
{
  uint64_t v2 = &a1[6].n128_i64[1];
  uint64_t v3 = (std::ios_base *)&a1[6].n128_i8[*(void *)(a1[6].n128_u64[1] - 24) + 8];
  v3->__exceptions_ = 1;
  std::ios_base::clear(v3, v3->__rdstate_);
  sub_1001E8B4C(v2);
  __n128 result = *(__n128 *)(*(uint64_t *)((char *)v2 + *(void *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t *sub_1001E8B4C(uint64_t *a1)
{
  uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v2->__fmtflags_;
  sub_1001E8FB8((uint64_t)v28, v2);
  std::ostream::sentry::sentry();
  if (v27)
  {
    std::ios_base::fmtflags v25 = fmtflags;
    long long v26 = v2;
    uint64_t v4 = *a1;
    uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v6 = *((void *)v5 + 3);
    *((void *)v5 + 3) = 0;
    uint64_t v7 = (char *)a1 + *(void *)(v4 - 24);
    int v8 = *((_DWORD *)v7 + 2);
    int v9 = *((_DWORD *)v7 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(v4 - 24)));
      uint64_t v10 = std::locale::use_facet(&v29, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v29);
      *((_DWORD *)v7 + 36) = v9;
    }
    if ((v8 & 0x90) != 0 && v6 >= 37)
    {
      uint64_t v11 = v6 - 36;
      do
      {
        LOBYTE(v29.__locale_) = v9;
        sub_100132EFC(a1, (uint64_t)&v29, 1);
        --v11;
      }
      while (v11);
    }
    uint64_t v12 = *a1;
    *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)a1 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v12 - 24) + 8) & 0xFFFFFF4F | 0x80;
    char v13 = (const std::ios_base *)((char *)a1 + *(void *)(v12 - 24));
    std::ios_base::getloc(v13);
    char v23 = v8;
    uint64_t v24 = v6;
    long long v14 = std::locale::use_facet(&v29, &std::ctype<char>::id);
    std::ios_base::fmtflags v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 48);
    std::locale::~locale(&v29);
    if (v13[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v13);
      int v16 = std::locale::use_facet(&v29, &std::ctype<char>::id);
      std::ios_base::fmtflags v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
      std::locale::~locale(&v29);
      v13[1].__fmtflags_ = v17;
    }
    unint64_t v18 = 0;
    v13[1].__fmtflags_ = v15;
    do
    {
      *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 2;
      std::ostream::operator<<();
      if (v18 <= 9 && ((1 << v18) & 0x2A8) != 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
        long long v19 = std::locale::use_facet(&v29, &std::ctype<char>::id);
        char v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 45);
        std::locale::~locale(&v29);
        LOBYTE(v29.__locale_) = v20;
        sub_100132EFC(a1, (uint64_t)&v29, 1);
      }
      ++v18;
    }
    while (v18 != 16);
    if ((v23 & 0x20) != 0 && v24 >= 37)
    {
      uint64_t v21 = v24 - 36;
      do
      {
        LOBYTE(v29.__locale_) = v9;
        sub_100132EFC(a1, (uint64_t)&v29, 1);
        --v21;
      }
      while (v21);
    }
    *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
    uint64_t v2 = v26;
    std::ios_base::fmtflags fmtflags = v25;
  }
  std::ostream::sentry::~sentry();
  sub_1001E906C((uint64_t)v28);
  v2->__fmtflags_ = fmtflags;
  return a1;
}

void sub_1001E8F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, std::locale a19)
{
  *(_DWORD *)(a14 + 8) = a13;
  _Unwind_Resume(a1);
}

uint64_t sub_1001E8FB8(uint64_t a1, std::ios_base *this)
{
  *(void *)a1 = this;
  std::ios_base::fmtflags fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    uint64_t v5 = std::locale::use_facet(&v7, &std::ctype<char>::id);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
    this[1].__fmtflags_ = fmtflags;
  }
  *(unsigned char *)(a1 + 8) = fmtflags;
  return a1;
}

void sub_1001E9058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1001E906C(uint64_t a1)
{
  uint64_t v1 = *(const std::ios_base **)a1;
  std::ios_base::fmtflags v2 = *(char *)(a1 + 8);
  if (*(_DWORD *)(*(void *)a1 + 144) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    uint64_t v3 = std::locale::use_facet(&v5, &std::ctype<char>::id);
    std::ios_base::fmtflags v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale(&v5);
    v1[1].__fmtflags_ = v4;
  }
  v1[1].__fmtflags_ = v2;
}

void sub_1001E9104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1001E9118(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  int v8 = this;
  if ((v12 & 0x80) != 0) {
    int v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    int v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void sub_1001E91E8(uint64_t a1)
{
  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_1001E9248(exception, a1);
}

void sub_1001E9230(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1001E9248(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = (unint64_t)&off_10229E6D0;
  a1->n128_u64[1] = (unint64_t)&off_10229E8C8;
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&off_10229E850;
  a1->n128_u64[1] = (unint64_t)off_10229E880;
  a1[2].n128_u64[0] = (unint64_t)off_10229E8A8;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t sub_1001E92F4(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 40));
  std::bad_cast::~bad_cast((std::bad_cast *)(a1 + 8));
  return a1;
}

void sub_1001E9348()
{
}

void sub_1001E9510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1001E79C0(&a9);
  sub_1001E79C0(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1001E9588(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  sub_1001E983C((uint64_t)exception, a1);
}

void sub_1001E95D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001E95E4(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 40));
  std::bad_cast::~bad_cast((std::bad_cast *)(a1 + 8));

  operator delete();
}

void sub_1001E9658(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 32));

  std::bad_cast::~bad_cast((std::bad_cast *)a1);
}

void sub_1001E96B4(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 32));
  std::bad_cast::~bad_cast((std::bad_cast *)a1);

  operator delete();
}

const char *sub_1001E972C()
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void sub_1001E9738(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);

  std::bad_cast::~bad_cast((std::bad_cast *)a1 - 3);
}

void sub_1001E9790(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);
  std::bad_cast::~bad_cast((std::bad_cast *)a1 - 3);

  operator delete();
}

void sub_1001E9804(std::bad_cast *a1)
{
  std::bad_cast::~bad_cast(a1);

  operator delete();
}

uint64_t sub_1001E983C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10229E6D0;
  *(void *)(a1 + 8) = &off_10229E8C8;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &off_10229E700;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &off_10229E850;
  *(void *)(a1 + 8) = off_10229E880;
  *(void *)(a1 + 32) = off_10229E8A8;
  return a1;
}

void sub_1001E9960(_Unwind_Exception *a1)
{
  std::bad_cast::~bad_cast(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E9974(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  int v16 = v11;
  std::ios_base::fmtflags v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(v11, *(void **)a2, *((void *)a2 + 1));
    unint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v11 = v12;
  }
  int v16 = v11 + 24;
  sub_1001D7FEC(a1, v15);
  uint64_t v13 = a1[1];
  sub_1001D8184((uint64_t)v15);
  return v13;
}

void sub_1001E9A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001D8184((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001E9A98(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x26u);
}

BOOL sub_1001E9AC4()
{
  uint64_t v1 = qword_102419458;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_1001E9AE4()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101D04970;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  uint64_t v0 = std::string::append(&v19, "MicroLocationLabels");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  std::ios_base::fmtflags v2 = std::string::append(&v20, " (");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1001E248C((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    unint64_t v4 = v17;
  }
  else {
    unint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  unint64_t v8 = std::string::append(&v22, ") ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1001E2560((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  long long v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_10247A4D0 = *((void *)&v12->__r_.__value_.__l + 2);
  xmmword_10247A4C0 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A4C0, (void *)&_mh_execute_header);
}

void sub_1001E9CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 25) < 0) {
    operator delete(*(void **)(v40 - 48));
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E9D88(uint64_t a1@<X3>, void *a2@<X5>, void *a3@<X6>, unsigned char *a4@<X8>, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v32[4] = a7;
  v32[5] = a8;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E8E0);
  }
  uint64_t v10 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a5 + 23) >= 0) {
      std::string::size_type v11 = a5;
    }
    else {
      std::string::size_type v11 = (uint64_t *)*a5;
    }
    unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 4);
    unint64_t v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a3[1] - *a3) >> 4);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)std::string v23 = 2082;
    *(void *)&v23[2] = "";
    __int16 v24 = 2082;
    std::ios_base::fmtflags v25 = v11;
    __int16 v26 = 2050;
    unint64_t v27 = v12;
    __int16 v28 = 2050;
    unint64_t v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with SelfTraining generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x30u);
  }
  j__CFAbsoluteTimeGetCurrent_5();
  sub_1000C7F88(buf);
  *(_DWORD *)long long v33 = 0;
  CFStringRef v14 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSemiSupervisedMaxNumIterations", 0x8000100u, kCFAllocatorNull);
  std::string v20 = a4;
  sub_10013E418(*(uint64_t *)buf, (uint64_t)v14, v33);
  CFRelease(v14);
  if (*(void *)v23) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v23);
  }
  sub_1000C7F88(buf);
  *(void *)long long v33 = 0;
  CFStringRef v15 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSemiSupervisedStopProbabilityThreshold", 0x8000100u, kCFAllocatorNull);
  sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v15, v33);
  CFRelease(v15);
  if (*(void *)v23) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v23);
  }
  sub_1000C7F88(buf);
  *(_DWORD *)long long v33 = 0;
  CFStringRef v16 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSemiSupervisedNumSelfLearningSamplesPerIteration", 0x8000100u, kCFAllocatorNull);
  sub_10013E418(*(uint64_t *)buf, (uint64_t)v16, v33);
  CFRelease(v16);
  if (*(void *)v23) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v23);
  }
  sub_1001EE1F4(&v21);
  *std::string v20 = 0;
  v20[280] = 0;
  v32[0] = off_10229EA20;
  v32[1] = sub_10031DCB8;
  v32[3] = v32;
  unsigned int v17 = sub_1001EBCB0();
  sub_1001EF9DC((uint64_t)v31, a1);
  sub_1001EFAF8((uint64_t)v30, (uint64_t)v32);
  sub_1002C5CB4(v17);
}

void sub_1001EB978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,unsigned int a59)
{
  sub_10024B47C(&STACK[0x3F0]);
  sub_1000D7D80((uint64_t)&a51);
  sub_1001EC93C((uint64_t)&STACK[0x220]);
  uint64_t v60 = a57;
  a57 = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  sub_1001EF958(&STACK[0x3C0]);
  sub_1001EF39C(a34);
  sub_1001EF3E8(&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EBCB0()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDataSource", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 1;
  }
}

void sub_1001EBD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001EBD5C(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_1001EFED0((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 240;
        sub_1001EF82C(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void *sub_1001EBDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = sub_1001EE064();
  sub_1002A9DA0(v5, v55);
  if (sub_1001EE114())
  {
    sub_1001EF40C((uint64_t)v51, a2 + 16);
    long long v53 = *(_OWORD *)(a2 + 56);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    LOBYTE(v51[0]) = 0;
  }
  char v54 = v6;
  sub_100217F3C(v5, (uint64_t)v55, (uint64_t)v51, (uint64_t)v63);
  if (v54) {
    sub_1000D7D80((uint64_t)v51);
  }
  uint64_t v37 = a3;
  sub_1000C7F88(v51);
  LODWORD(v46[0]) = 0;
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLinkageFunction", 0x8000100u, kCFAllocatorNull);
  int v8 = sub_1004D08E4(*(uint64_t *)&v51[0], (uint64_t)v7, v46);
  CFRelease(v7);
  unsigned int v9 = v46[0];
  if (*((void *)&v51[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v51[0] + 1));
  }
  if (v8) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 1;
  }
  sub_100217FB8(v10, v62);
  sub_1000C7F88(v51);
  v46[0] = 0;
  CFStringRef v11 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPruneDistanceThresholdSemiSupervised", 0x8000100u, kCFAllocatorNull);
  int v12 = sub_1000A6A10(*(uint64_t *)&v51[0], (uint64_t)v11, v46);
  CFRelease(v11);
  double v13 = *(double *)v46;
  if (*((void *)&v51[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v51[0] + 1));
  }
  if (!v12) {
    double v13 = 0.075;
  }
  uint64_t v48 = 0;
  unint64_t v49 = 0;
  unint64_t v50 = 0;
  memset(v51, 0, sizeof(v51));
  int v52 = 1065353216;
  uint64_t v14 = *(void *)(a2 + 232);
  for (uint64_t i = *(void *)(a2 + 240); v14 != i; v14 += 32)
  {
    v46[0] = (_OWORD *)(v14 + 16);
    CFStringRef v16 = sub_1001F3080((uint64_t)v51, (void *)(v14 + 16), (uint64_t)&unk_101D0B290, v46);
    unint64_t v17 = v16[5];
    if (v17 >= v16[6])
    {
      uint64_t v18 = sub_1001F3358(v16 + 4, *(void *)v14);
    }
    else
    {
      sub_1001F3468((uint64_t)(v16 + 6), v17, *(void *)v14);
      uint64_t v18 = v17 + 192;
      v16[5] = v17 + 192;
    }
    v16[5] = v18;
  }
  sub_1002787CC((void *)a2, (uint64_t)v46);
  for (j = v47; j; j = (void *)*j)
  {
    *(void *)buf = j + 2;
    std::string v20 = sub_1001F3080((uint64_t)v51, j + 2, (uint64_t)&unk_101D0B290, (_OWORD **)buf);
    sub_1001F37F0((uint64_t)v61, (uint64_t)v63);
    int v21 = v20 + 4;
    sub_1001F3888((unint64_t *)buf, v21, (uint64_t)v61);
    sub_1001F3C58((uint64_t)v60, (uint64_t)v62);
    sub_1001DDBF8((char **)v45, (unint64_t *)buf, (uint64_t)v60);
    sub_1001F2E3C(v60);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    sub_1001F2DB8(v61);
    std::string v42 = 0;
    std::string v43 = 0;
    uint64_t v44 = 0;
    unint64_t v22 = sub_1001DE024((uint64_t *)v45, &v42, 0, v13, 0.0);
    *(void *)buf = 0;
    sub_1001F3CF0(&v40, v22, buf);
    std::string v23 = v42;
    __int16 v24 = v40;
    if (v43 != v42)
    {
      uint64_t v25 = 0;
      unint64_t v26 = (v43 - (unsigned char *)v42) >> 3;
      if (v26 <= 1) {
        unint64_t v26 = 1;
      }
      do
      {
        v24[v23[v25]] = v25;
        ++v25;
      }
      while (v26 != v25);
    }
    unint64_t v27 = v41;
    if (v24 != v41)
    {
      unint64_t v28 = v49;
      do
      {
        uint64_t v29 = *v21 + 192 * *v24;
        if (v28 >= v50)
        {
          unint64_t v28 = sub_1001F3D74(&v48, v29, (_OWORD *)j + 1);
        }
        else
        {
          sub_1001F3E9C(v28, v29, (_OWORD *)j + 1);
          v28 += 208;
        }
        unint64_t v49 = v28;
        ++v24;
      }
      while (v24 != v27);
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E8E0);
    }
    long long v30 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      long long v31 = operator new(0x28uLL);
      long long v38 = v31;
      long long v39 = xmmword_101D048C0;
      *long long v31 = 0u;
      v31[1] = 0u;
      *(void *)((char *)v31 + 29) = 0;
      sub_1001E0650((uint64_t)(j + 2), v31);
      long long v32 = &v38;
      if (v39 < 0) {
        long long v32 = v38;
      }
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)long long __p = 2082;
      *(void *)&__p[2] = "";
      *(_WORD *)&__p[10] = 2082;
      *(void *)&__p[12] = v32;
      __int16 v58 = 2050;
      unint64_t v59 = v22;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Post-Pruning Model\", \"ClusterId\":%{public, location:escape_only}s, \"numFPs\":%{public}lu}", buf, 0x26u);
      if (SHIBYTE(v39) < 0) {
        operator delete(v38);
      }
    }
    if (v40)
    {
      std::string v41 = v40;
      operator delete(v40);
    }
    if (v42)
    {
      std::string v43 = v42;
      operator delete(v42);
    }
    if (v45[0])
    {
      v45[1] = v45[0];
      operator delete(v45[0]);
    }
  }
  sub_1000D7D80((uint64_t)v46);
  sub_1001EF2CC((uint64_t *)(a2 + 232));
  uint64_t v33 = v48;
  unint64_t v34 = v49;
  if (v48 != v49)
  {
    do
    {
      uint64_t v35 = v33 + 192;
      sub_100277998(a2, v33, (long long *)(v33 + 192), v37);
      uint64_t v33 = v35 + 16;
    }
    while (v35 + 16 != v34);
  }
  sub_1001F2F58((uint64_t)v51);
  *(void *)&v51[0] = &v48;
  sub_1001F2EC0((void ***)v51);
  sub_1001F2E3C(v62);
  sub_1001F2DB8(v63);
  return sub_10013F374(v55);
}

void sub_1001EC370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,int a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
}

void sub_1001EC4DC(uint64_t **a1@<X1>, unsigned int *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100275EA0((uint64_t)a2, a3);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E8E0);
  }
  int v5 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = (void *)*a2;
    int v7 = *((char *)a1 + 23);
    int v8 = (uint64_t **)*a1;
    uint64_t v10 = *((void *)a2 + 29);
    uint64_t v9 = *((void *)a2 + 30);
    uint64_t v11 = sub_1002765A8((uint64_t)a2);
    unsigned int v12 = a2[1];
    double v13 = (uint64_t *)(v7 >= 0 ? a1 : v8);
    *(_DWORD *)buf = 68290307;
    int v34 = 0;
    __int16 v35 = 2082;
    std::string::size_type v36 = "";
    __int16 v37 = 2050;
    long long v38 = v6;
    __int16 v39 = 2081;
    uint64_t v40 = v13;
    __int16 v41 = 2049;
    uint64_t v42 = (v9 - v10) >> 5;
    __int16 v43 = 2049;
    *(void *)uint64_t v44 = v11;
    *(_WORD *)&v44[8] = 1025;
    v45[0] = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Semi-supervised model\", \"GenerationAlgorithm\":%{public}lu, \"Client\":%{private, location:escape_only}s, \"size\":%{private}lu, \"numClusters\":%{private}lu, \"type\":%{private}d}", buf, 0x40u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229E8E0);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v15 = (uint64_t *)*((void *)a2 + 29);
    for (uint64_t i = (uint64_t *)*((void *)a2 + 30); v15 != i; v15 += 4)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229E8E0);
      }
      CFStringRef v16 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *v15;
        uint64_t v18 = operator new(0x28uLL);
        long long v30 = v18;
        long long v31 = xmmword_101D048C0;
        *uint64_t v18 = 0u;
        v18[1] = 0u;
        *(void *)((char *)v18 + 29) = 0;
        sub_1001E0650(v17 + 40, v18);
        if (v31 >= 0) {
          std::string v19 = &v30;
        }
        else {
          std::string v19 = v30;
        }
        std::string v20 = operator new(0x28uLL);
        long long __p = v20;
        long long v29 = xmmword_101D048C0;
        *std::string v20 = 0u;
        v20[1] = 0u;
        *(void *)((char *)v20 + 29) = 0;
        sub_1001E0650((uint64_t)(v15 + 2), v20);
        if (v29 >= 0) {
          p_p = (uint64_t *)&__p;
        }
        else {
          p_p = (uint64_t *)__p;
        }
        uint64_t v22 = *v15;
        uint64_t v23 = *(void *)(*v15 + 24);
        unsigned int v32 = 1;
        __int16 v24 = sub_1001EF6E0((void *)(v22 + 104), &v32);
        if (v24) {
          double v25 = *((double *)v24 + 4) - *((double *)v24 + 3);
        }
        else {
          double v25 = 0.0;
        }
        double v26 = *(double *)(*v15 + 152);
        int v27 = (int)*(double *)(*v15 + 144);
        *(_DWORD *)buf = 68290563;
        int v34 = 0;
        __int16 v35 = 2082;
        std::string::size_type v36 = "";
        __int16 v37 = 2081;
        long long v38 = v19;
        __int16 v39 = 2081;
        uint64_t v40 = p_p;
        __int16 v41 = 2049;
        uint64_t v42 = v23;
        __int16 v43 = 1025;
        *(_DWORD *)uint64_t v44 = (int)v25;
        *(_WORD *)&v44[4] = 1025;
        *(_DWORD *)&v44[6] = v27;
        LOWORD(v45[0]) = 1025;
        *(_DWORD *)((char *)v45 + 2) = (int)v26;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"modelFingerprint\", \"recordingUUID\":%{private, location:escape_only}s, \"clusterUUID\":%{private, location:escape_only}s, \"size\":%{private}lu, \"duration\":%{private}d, \"start\":%{private}d, \"end\":%{private}d}", buf, 0x42u);
        if (SHIBYTE(v29) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(v30);
        }
      }
    }
  }
}

void sub_1001EC864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t sub_1001EC8C4(ssize_t a1)
{
  sub_1001EF0DC(a1, (uint64_t)&v2, 0x10uLL);
  BYTE6(v2) = BYTE6(v2) & 0xF | 0x40;
  return v2;
}

uint64_t sub_1001EC93C(uint64_t a1)
{
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  uint64_t v2 = *(void **)(a1 + 304);
  if (v2)
  {
    *(void *)(a1 + 312) = v2;
    operator delete(v2);
  }
  sub_1001EF1F0(a1 + 256);
  unsigned int v4 = (void **)(a1 + 232);
  sub_1001EF278(&v4);
  sub_1001EF318(a1 + 72);
  sub_1000D7D80(a1 + 16);
  return a1;
}

void sub_1001EC9B0(uint64_t a1@<X3>, void *a2@<X4>, uint64_t *a3@<X5>, long long **a4@<X6>, unsigned char *a5@<X8>, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v47[4] = a8;
  v47[5] = a9;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229E8E0);
  }
  double v13 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a6 + 23) >= 0) {
      uint64_t v14 = a6;
    }
    else {
      uint64_t v14 = (uint64_t *)*a6;
    }
    unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((a3[1] - *a3) >> 4);
    unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * (a4[1] - *a4);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v37 = 2082;
    long long v38 = "";
    __int16 v39 = 2082;
    uint64_t v40 = v14;
    __int16 v41 = 2050;
    unint64_t v42 = v15;
    __int16 v43 = 2050;
    unint64_t v44 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Learning semi-supervised model with BinaryRoi generation algorithm\", \"Client\":%{public, location:escape_only}s, \"Number of labeled recording triggers\":%{public}lu, \"Number of unlabeled recording triggers\":%{public}lu}", buf, 0x30u);
  }
  j__CFAbsoluteTimeGetCurrent_5();
  *a5 = 0;
  a5[280] = 0;
  v47[0] = off_10229EA20;
  v47[1] = sub_10031DCB8;
  v47[3] = v47;
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  memset(v31, 0, sizeof(v31));
  int v32 = 1065353216;
  uint64_t v17 = (void *)a2[1];
  if ((void *)*a2 != v17)
  {
    uint64_t v18 = (void *)(*a2 + 40);
    do
    {
      sub_1001EFB90((uint64_t)v33, v18, v18);
      *(void *)buf = v18 - 5;
      *((_OWORD *)sub_1001F2690((uint64_t)v31, v18 - 5, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 2) = *(_OWORD *)v18;
      std::string v19 = v18 + 3;
      v18 += 8;
    }
    while (v19 != v17);
  }
  memset(v29, 0, sizeof(v29));
  int v30 = 1065353216;
  memset(v27, 0, sizeof(v27));
  int v28 = 1065353216;
  uint64_t v20 = *a3;
  uint64_t v21 = a3[1];
  if (*a3 != v21)
  {
    do
    {
      sub_1001EFB90((uint64_t)v29, (void *)v20, (_OWORD *)v20);
      if (*(unsigned char *)(v20 + 232))
      {
        *(void *)buf = v20;
        *((_OWORD *)sub_1001F2690((uint64_t)v27, (void *)v20, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 2) = *(_OWORD *)(v20 + 216);
      }
      v20 += 240;
    }
    while (v20 != v21);
  }
  memset(v26, 0, sizeof(v26));
  uint64_t v22 = *a4;
  uint64_t v23 = a4[1];
  for (*(void *)__int16 v35 = v26; v22 != v23; v22 += 15)
  {
    if (!sub_1001EFDE4(v29, v22)) {
      sub_1001F28EC((uint64_t **)v35, v22);
    }
  }
  unsigned int v24 = sub_1001EBCB0();
  sub_1001EF9DC((uint64_t)v46, a1);
  sub_1001EFAF8((uint64_t)v45, (uint64_t)v47);
  sub_1002C5CB4(v24);
}

void sub_1001EDD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_1001EF3E8((unsigned int *)&STACK[0x2F0]);
  sub_10024B47C(&a61);
  sub_1001F2DB8(&STACK[0x270]);
  sub_10013F374(&a30);
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 8))(a29);
  }
  sub_1001EC93C((uint64_t)&STACK[0x300]);
  uint64_t v63 = a33;
  a33 = 0;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  STACK[0x300] = (unint64_t)&a34;
  sub_1001EF794((void ***)&STACK[0x300]);
  sub_1000D7D80((uint64_t)&a37);
  sub_1000D7D80((uint64_t)&a43);
  sub_1000D7D80((uint64_t)&a49);
  sub_1000D7D80((uint64_t)&a55);
  sub_1001EF958((void *)(v61 - 168));
  sub_1001EF39C(a12);
  _Unwind_Resume(a1);
}

void sub_1001EE04C()
{
}

void sub_1001EE058()
{
}

uint64_t sub_1001EE064()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 4;
  }
}

void sub_1001EE0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001EE114()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAdaptiveAnchorsEnable", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return 1;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_1001EE1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001EE1C4(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

int *sub_1001EE1F4(int *a1)
{
  *a1 = -1;
  int v2 = open("/dev/urandom", 0x1000000);
  *a1 = v2;
  if (v2 == -1)
  {
    uint64_t v4 = *__error();
    sub_100134750(&v8, "open /dev/urandom");
    uint64_t v5 = std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&off_10229E9F0;
    uint64_t v10 = v4;
    v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/loca"
                         "l/include/boost/uuid/detail/random_provider_posix.ipp";
    v6.i64[1] = (uint64_t)"boost::uuids::detail::random_provider_base::random_provider_base()";
    uint64_t v7 = 60;
    sub_1001EE2E4(v5, &v6);
  }
  return a1;
}

void sub_1001EE2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 40));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1001EE2E4(const std::runtime_error *a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x48uLL);
  sub_1001EE350((uint64_t)exception, a1, a2);
}

void sub_1001EE338(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EE354(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_1001EE3A8(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &off_10229E6D0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  int8x16_t v6 = a2[1].__vftable;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &off_10229E970;
  *(void *)(a1 + 8) = off_10229E9A0;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = off_10229E9D0;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1001EE474()
{
}

void sub_1001EE644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1001E79C0(&a9);
  sub_1001E79C0(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1001EE6BC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  sub_1001EE964((uint64_t)exception, a1);
}

void sub_1001EE704(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001EE718(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete();
}

void sub_1001EE78C(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 32));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_1001EE7E8(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_10229E700;
  sub_1001E79C0((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  operator delete();
}

void sub_1001EE860(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

void sub_1001EE8B8(void *a1)
{
  *a1 = &off_10229E700;
  sub_1001E79C0(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));

  operator delete();
}

void sub_1001EE92C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

uint64_t sub_1001EE964(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10229E6D0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &off_10229E9F0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &off_10229E700;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &off_10229E970;
  *(void *)(a1 + 8) = off_10229E9A0;
  *(void *)(a1 + 32) = off_10229E9D0;
  return a1;
}

void sub_1001EEA94(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1001EEAA8(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  std::string v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      long long v9 = *((_OWORD *)a2 + 2);
      *((_DWORD *)v8 + 12) = *((_DWORD *)a2 + 12);
      *((_OWORD *)v8 + 2) = v9;
      uint64_t v10 = (uint64_t *)*v8;
      sub_1001EEBB0(a1, v8);
      a2 = (uint64_t *)*a2;
      std::string v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v11 = (uint64_t *)*v8;
      operator delete(v8);
      std::string v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_1001EEFF0(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1001EEB7C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1001EEB9C(_Unwind_Exception *a1)
{
}

void *sub_1001EEBB0(void *a1, void *a2)
{
  unint64_t v4 = 0;
  for (uint64_t i = 16; i != 32; ++i)
    v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + i);
  a2[1] = v4;
  uint64_t v6 = sub_1001EEC2C((uint64_t)a1, v4, a2 + 2);
  sub_1000D8A74(a1, a2, v6);
  return a2;
}

void *sub_1001EEC2C(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_1001EED88(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  unint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    __n128 result = v16;
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    if (v19 == a2)
    {
      BOOL v21 = v16[2] == *a3 && v16[3] == a3[1];
      BOOL v22 = v21;
    }
    else
    {
      BOOL v22 = 0;
    }
    int v23 = v17 & !v22;
    v17 |= v22;
  }
  while (v23 != 1);
  return result;
}

void sub_1001EED88(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1001EEE78(a1, prime);
    }
  }
}

void sub_1001EEE78(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1001D7FA0();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
              if (!v13) {
                break;
              }
            }
            while (i[2] == v13[2] && i[3] == v13[3]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_1001EEFF0(void *a1, uint64_t a2)
{
  sub_1001EF048((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_1001EEBB0(a1, v4);
}

void sub_1001EF02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1001EF048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  __n128 result = operator new(0x38uLL);
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)__n128 result = 0;
  long long v9 = *(_OWORD *)(a2 + 16);
  result[1] = *(_OWORD *)a2;
  result[2] = v9;
  *((void *)result + 6) = *(void *)(a2 + 32);
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)result + v7++ + 16);
  while (v7 != 16);
  *((void *)result + 1) = v8;
  return result;
}

ssize_t sub_1001EF0DC(ssize_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (int *)result;
    unint64_t v6 = 0;
    do
    {
      __n128 result = read(*v5, (void *)(a2 + v6), a3 - v6);
      if (result < 0)
      {
        __n128 result = (ssize_t)__error();
        if (*(_DWORD *)result != 4)
        {
          uint64_t v7 = *(int *)result;
          sub_100134750(&v10, "read");
          std::runtime_error::runtime_error(&v11, &v10);
          v11.__vftable = (std::runtime_error_vtbl *)&off_10229E9F0;
          uint64_t v12 = v7;
          v8.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode"
                               ".app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal."
                               "sdk/usr/local/include/boost/uuid/detail/random_provider_posix.ipp";
          v8.i64[1] = (uint64_t)"void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
          uint64_t v9 = 98;
          sub_1001EE2E4(&v11, &v8);
        }
      }
      else
      {
        v6 += result;
      }
    }
    while (v6 < a3);
  }
  return result;
}

void sub_1001EF1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1001EF1F0(uint64_t a1)
{
  sub_1001EF22C(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001EF22C(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      long long v3 = (void *)*v2;
      int8x8_t v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void sub_1001EF278(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_1001EF2CC((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void sub_1001EF2CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    int8x8_t v4 = *(std::__shared_weak_count **)(i - 24);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1001EF318(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(void *)(a1 + 88) = v2;
      operator delete(v2);
    }
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = 0;
      if (v3) {
        operator delete[]();
      }
    }
    int8x8_t v4 = *(void **)(a1 + 24);
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t sub_1001EF39C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 280))
  {
    if (*(unsigned char *)(a1 + 256) && *(char *)(a1 + 255) < 0) {
      operator delete(*(void **)(a1 + 232));
    }
    sub_10024B47C(a1 + 32);
  }
  return a1;
}

uint64_t sub_1001EF3E8(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((result & 0x80000000) == 0) {
    return close(result);
  }
  return result;
}

uint64_t sub_1001EF40C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1001EF484(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1001EF46C(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_1001EF484(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    std::string v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      std::runtime_error v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          std::runtime_error v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  std::runtime_error v11 = operator new(0x38uLL);
  *std::runtime_error v11 = 0;
  v11[1] = v7;
  long long v14 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v11 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v11 + 2) = v14;
  v11[6] = *(void *)(a3 + 32);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *std::runtime_error v11 = *v22;
LABEL_44:
    *BOOL v22 = v11;
    goto LABEL_45;
  }
  *std::runtime_error v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1001EF6CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001EF6E0(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void sub_1001EF794(void ***a1)
{
  uint64_t v1 = *a1;
  int8x8_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 240;
        sub_1001EF82C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1001EF82C(uint64_t a1, uint64_t a2)
{
  sub_10026633C(a2 + 80);
  if (*(char *)(a2 + 47) < 0)
  {
    unint64_t v3 = *(void **)(a2 + 24);
    operator delete(v3);
  }
}

void sub_1001EF87C()
{
}

void *sub_1001EF890(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10229EA20;
  result[1] = v3;
  return result;
}

uint64_t sub_1001EF8D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10229EA20;
  a2[1] = v2;
  return result;
}

uint64_t sub_1001EF904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_1001EF90C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10229EAA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001EF94C()
{
  return &off_10229EAA0;
}

void *sub_1001EF958(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1001EF9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1001EFA74(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1001EFAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1001EFB90(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    std::string v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_44:
    *uint64_t v21 = i;
    goto LABEL_45;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1001EFDD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1001EFDE4(void *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v2++);
  while (v2 != 16);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v6 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v3;
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }
        else
        {
          v9 &= *(void *)&v4 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

long long *sub_1001EFED0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint8x8_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      unint64_t v8 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0) {
        operator delete(*v8);
      }
      long long v9 = *(long long *)((char *)v5 + 24);
      *(void *)(a4 + 40) = *((void *)v5 + 5);
      *(_OWORD *)unint64_t v8 = v9;
      *((unsigned char *)v5 + 47) = 0;
      *((unsigned char *)v5 + 24) = 0;
      long long v10 = v5[3];
      *(_OWORD *)(a4 + 60) = *(long long *)((char *)v5 + 60);
      *(_OWORD *)(a4 + 48) = v10;
      sub_100267D64(a4 + 80, (uint64_t)(v5 + 5));
      long long v11 = *(long long *)((char *)v5 + 216);
      *(unsigned char *)(a4 + 232) = *((unsigned char *)v5 + 232);
      *(_OWORD *)(a4 + 216) = v11;
      a4 += 240;
      v5 += 15;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1001EFF8C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint8x8_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 224;
        sub_1001F0024((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1001F0024(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 168);
  if (v3)
  {
    *(void *)(a2 + 176) = v3;
    operator delete(v3);
  }
  sub_1000D7D80(a2 + 104);
  sub_1000D7D80(a2 + 64);

  return sub_1001F00CC(a2);
}

uint64_t sub_1001F0078(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  sub_1000D7D80(a1 + 104);
  sub_1000D7D80(a1 + 64);

  return sub_1001F00CC(a1);
}

uint64_t sub_1001F00CC(uint64_t a1)
{
  sub_1001F0108(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001F0108(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_1001F014C((uint64_t)(v2 + 4));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001F014C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_10229EAC0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_1001F01B0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t sub_1001F01C4(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x124924924924924) {
    sub_1001D7FD4();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 5);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x92492492492492) {
    unint64_t v11 = 0x124924924924924;
  }
  else {
    unint64_t v11 = v6;
  }
  size_t v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_1001F0E60(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  float v15 = v12;
  BOOL v16 = &v12[224 * v5];
  unint64_t v18 = &v12[224 * v11];
  sub_1001F02EC((uint64_t)v16, a2, a3);
  unint64_t v17 = v16 + 224;
  sub_1001F0DE8(a1, &v15);
  uint64_t v13 = a1[1];
  sub_1001F106C(&v15);
  return v13;
}

void sub_1001F02D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F106C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F02EC(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = sub_1001F03C4(a1, a2);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  sub_1001F08B0(v6 + 64, a2 + 64);
  sub_1001F0B48(a1 + 104, a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 144);
  int v9 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_10010F834((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  long long v10 = a3[1];
  *(_OWORD *)(a1 + 192) = *a3;
  *(_OWORD *)(a1 + 208) = v10;
  return a1;
}

void sub_1001F0390(_Unwind_Exception *a1)
{
  sub_1000D7D80(v3);
  sub_1000D7D80(v2);
  sub_1001F00CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F03C4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_1001F043C(a1, (uint64_t)(i + 2), (_OWORD *)i + 1);
  return a1;
}

void sub_1001F0424(_Unwind_Exception *a1)
{
  sub_1001F00CC(v1);
  _Unwind_Resume(a1);
}

void *sub_1001F043C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10031EBEC(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      float v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (sub_10031EC4C(a1 + 32, (uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          float v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_1001F06C0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  float v14 = (void *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1001F0858((uint64_t)v25, 0);
  return v14;
}

void sub_1001F06A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F0858((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F06C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((_OWORD *)v8 + 1) = *a3;
  uint64_t result = sub_1001F073C((uint64_t)(v8 + 4), (uint64_t)(a3 + 1));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1001F0724(_Unwind_Exception *a1)
{
  sub_1001F0858(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F073C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_1001F0784(a1, a2);
  return a1;
}

void sub_1001F0770(_Unwind_Exception *a1)
{
  sub_1001F014C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F0784(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_10229EAC0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_10229EAD8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void sub_1001F0814(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 sub_1001F0820(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void *sub_1001F082C(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)long long __dst = v3;
  return result;
}

void sub_1001F0858(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1001F014C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1001F08B0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_1001F0928(a1, i + 4, i + 4);
  return a1;
}

void sub_1001F0910(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_1001F0928(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1001F0B34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F0B48(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_1001F0BC0(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1001F0BA8(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_1001F0BC0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x28uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(void *)(a3 + 16);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1001F0DD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F0DE8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001F0EAC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1001F0E60(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    sub_1001D7FA0();
  }
  return operator new(224 * a2);
}

uint64_t sub_1001F0EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 224;
      sub_1001F0F54(v7 - 224, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 224;
      *((void *)&v15 + 1) -= 224;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1001F0FE0((uint64_t)v12);
  return v10;
}

uint64_t sub_1001F0F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E2908(a1, (uint64_t *)a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_1000E2908(v4 + 64, (uint64_t *)(a2 + 64));
  sub_1000E2908(a1 + 104, (uint64_t *)(a2 + 104));
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  long long v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  return a1;
}

uint64_t sub_1001F0FE0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001F1018((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_1001F1018(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_1001F0024(v3, v1);
      v1 += 224;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_1001F106C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_1001F10A0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 224;
      uint64_t result = sub_1001F0024(v4, v1 - 224);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1001F10E8(uint64_t result, char *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (_OWORD *)result;
  while (2)
  {
    uint64_t v10 = (uint64_t)(a2 - 224);
    uint64_t v93 = (uint64_t)(a2 - 672);
    uint64_t v94 = (uint64_t)(a2 - 448);
    unint64_t v11 = (unint64_t)v9;
    v95 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (_OWORD *)v11;
          uint64_t v12 = (uint64_t)&a2[-v11];
          unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a2[-v11] >> 5);
          if (!(!v5 & v4))
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((double *)a2 - 2) > *((double *)v9 + 26))
                {
                  uint64_t result = sub_1001F20E8((uint64_t)v9, v10);
                  long long v49 = v9[13];
                  *(_OWORD *)uint64_t v101 = v9[12];
                  long long v50 = *(_OWORD *)v101;
                  *(_OWORD *)&v101[16] = v49;
                  long long v51 = *(_OWORD *)(a2 - 20);
                  v9[12] = *((_OWORD *)a2 - 2);
                  *(_OWORD *)((char *)v9 + 204) = v51;
                  *(_OWORD *)(a2 - 20) = *(_OWORD *)&v101[12];
                  *((_OWORD *)a2 - 2) = v50;
                }
                break;
              case 3uLL:
                uint64_t result = sub_1001F1BD0((uint64_t)v9, (uint64_t)(v9 + 14), v10);
                break;
              case 4uLL:
                uint64_t result = sub_1001F23B0(v9, v9 + 14, v9 + 28, v10);
                break;
              case 5uLL:
                uint64_t result = sub_1001F23B0(v9, v9 + 14, v9 + 28, (uint64_t)(v9 + 42));
                if (*((double *)a2 - 2) > *((double *)v9 + 110))
                {
                  uint64_t result = sub_1001F20E8((uint64_t)(v9 + 42), v10);
                  long long v52 = v9[55];
                  *(_OWORD *)uint64_t v101 = v9[54];
                  long long v53 = *(_OWORD *)v101;
                  *(_OWORD *)&v101[16] = v52;
                  long long v54 = *(_OWORD *)(a2 - 20);
                  v9[54] = *((_OWORD *)a2 - 2);
                  *(_OWORD *)((char *)v9 + 876) = v54;
                  *(_OWORD *)(a2 - 20) = *(_OWORD *)&v101[12];
                  *((_OWORD *)a2 - 2) = v53;
                  if (*((double *)v9 + 110) > *((double *)v9 + 82))
                  {
                    uint64_t result = sub_1001F20E8((uint64_t)(v9 + 28), (uint64_t)(v9 + 42));
                    long long v55 = v9[41];
                    *(_OWORD *)uint64_t v101 = v9[40];
                    long long v56 = *(_OWORD *)v101;
                    *(_OWORD *)&v101[16] = v55;
                    v9[40] = v9[54];
                    *(_OWORD *)((char *)v9 + 652) = *(_OWORD *)((char *)v9 + 876);
                    v9[54] = v56;
                    *(_OWORD *)((char *)v9 + 876) = *(_OWORD *)&v101[12];
                    if (*((double *)v9 + 82) > *((double *)v9 + 54))
                    {
                      uint64_t result = sub_1001F20E8((uint64_t)(v9 + 14), (uint64_t)(v9 + 28));
                      long long v57 = v9[27];
                      *(_OWORD *)uint64_t v101 = v9[26];
                      long long v58 = *(_OWORD *)v101;
                      *(_OWORD *)&v101[16] = v57;
                      v9[26] = v9[40];
                      *(_OWORD *)((char *)v9 + 428) = *(_OWORD *)((char *)v9 + 652);
                      v9[40] = v58;
                      *(_OWORD *)((char *)v9 + 652) = *(_OWORD *)&v101[12];
                      if (*((double *)v9 + 54) > *((double *)v9 + 26))
                      {
                        uint64_t result = sub_1001F20E8((uint64_t)v9, (uint64_t)(v9 + 14));
                        long long v59 = v9[13];
                        *(_OWORD *)uint64_t v101 = v9[12];
                        long long v60 = *(_OWORD *)v101;
                        *(_OWORD *)&v101[16] = v59;
                        v9[12] = v9[26];
                        *(_OWORD *)((char *)v9 + 204) = *(_OWORD *)((char *)v9 + 428);
                        v9[26] = v60;
                        *(_OWORD *)((char *)v9 + 428) = *(_OWORD *)&v101[12];
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 5375)
          {
            if (a4)
            {
              if (v9 != (_OWORD *)a2)
              {
                uint64_t v61 = (uint64_t)(v9 + 14);
                if (v9 + 14 != (_OWORD *)a2)
                {
                  uint64_t v62 = 0;
                  uint64_t v63 = (double *)v9;
                  do
                  {
                    double v64 = v63[54];
                    double v65 = v63[26];
                    uint64_t v63 = (double *)v61;
                    if (v64 > v65)
                    {
                      sub_1001F0F54((uint64_t)v101, v61);
                      uint64_t v66 = v62;
                      while (1)
                      {
                        sub_1001F24E4((uint64_t)v9 + v66 + 224, (uint64_t)v9 + v66);
                        if (!v66) {
                          break;
                        }
                        double v67 = *(double *)((char *)v9 + v66 - 16);
                        v66 -= 224;
                        if (v106 <= v67)
                        {
                          uint64_t v68 = (uint64_t)v9 + v66 + 224;
                          goto LABEL_80;
                        }
                      }
                      uint64_t v68 = (uint64_t)v9;
LABEL_80:
                      sub_1001F24E4(v68, (uint64_t)v101);
                      if (__p)
                      {
                        uint64_t v105 = __p;
                        operator delete(__p);
                      }
                      sub_1000D7D80((uint64_t)v103);
                      sub_1000D7D80((uint64_t)v102);
                      uint64_t result = sub_1001F00CC((uint64_t)v101);
                    }
                    uint64_t v61 = (uint64_t)(v63 + 28);
                    v62 += 224;
                  }
                  while (v63 + 28 != (double *)a2);
                }
              }
            }
            else if (v9 != (_OWORD *)a2)
            {
              uint64_t v89 = (uint64_t)(v9 + 14);
              if (v9 + 14 != (_OWORD *)a2)
              {
                do
                {
                  uint64_t v90 = v89;
                  if (*((double *)v9 + 54) > *((double *)v9 + 26))
                  {
                    sub_1001F0F54((uint64_t)v101, v89);
                    do
                    {
                      sub_1001F24E4((uint64_t)(v9 + 14), (uint64_t)v9);
                      v91 = v9 - 14;
                      double v92 = *((double *)v9 - 2);
                      v9 -= 14;
                    }
                    while (v106 > v92);
                    sub_1001F24E4((uint64_t)(v91 + 14), (uint64_t)v101);
                    if (__p)
                    {
                      uint64_t v105 = __p;
                      operator delete(__p);
                    }
                    sub_1000D7D80((uint64_t)v103);
                    sub_1000D7D80((uint64_t)v102);
                    uint64_t result = sub_1001F00CC((uint64_t)v101);
                  }
                  uint64_t v89 = v90 + 224;
                  uint64_t v9 = (_OWORD *)v90;
                }
                while ((char *)(v90 + 224) != a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != (_OWORD *)a2)
            {
              int64_t v69 = (v13 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  uint64_t v73 = (uint64_t)&v9[14 * v72];
                  if (2 * v70 + 2 < (uint64_t)v13 && *(double *)&v9[14 * v72 + 13] > *(double *)(v73 + 432))
                  {
                    v73 += 224;
                    uint64_t v72 = 2 * v70 + 2;
                  }
                  if (*(double *)(v73 + 208) <= *(double *)&v9[14 * v70 + 13])
                  {
                    uint64_t v74 = (uint64_t)&v9[14 * v70];
                    sub_1001F0F54((uint64_t)v101, v74);
                    do
                    {
                      uint64_t v75 = v73;
                      sub_1001F24E4(v74, v73);
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v76 = (2 * v72) | 1;
                      uint64_t v73 = (uint64_t)&v9[14 * v76];
                      if (2 * v72 + 2 < (uint64_t)v13 && *(double *)&v9[14 * v76 + 13] > *(double *)(v73 + 432))
                      {
                        v73 += 224;
                        uint64_t v76 = 2 * v72 + 2;
                      }
                      uint64_t v74 = v75;
                      uint64_t v72 = v76;
                    }
                    while (*(double *)(v73 + 208) <= v106);
                    sub_1001F24E4(v75, (uint64_t)v101);
                    if (__p)
                    {
                      uint64_t v105 = __p;
                      operator delete(__p);
                    }
                    sub_1000D7D80((uint64_t)v103);
                    sub_1000D7D80((uint64_t)v102);
                    sub_1001F00CC((uint64_t)v101);
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              uint64_t v77 = (((unint64_t)v12 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
              uint64_t v78 = (uint64_t)v95;
              do
              {
                sub_1001F0F54((uint64_t)v96, (uint64_t)v9);
                uint64_t v79 = 0;
                uint64_t v80 = (uint64_t)v9;
                do
                {
                  uint64_t v81 = v80;
                  uint64_t v82 = v79 + 1;
                  v80 += 224 * (v79 + 1);
                  uint64_t v83 = 2 * v79;
                  uint64_t v79 = (2 * v79) | 1;
                  uint64_t v84 = v83 + 2;
                  if (v84 < v77 && *(double *)(v81 + 224 * v82 + 208) > *(double *)(v80 + 432))
                  {
                    v80 += 224;
                    uint64_t v79 = v84;
                  }
                  sub_1001F24E4(v81, v80);
                }
                while (v79 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
                v78 -= 224;
                if (v80 == v78)
                {
                  sub_1001F24E4(v80, (uint64_t)v96);
                }
                else
                {
                  sub_1001F24E4(v80, v78);
                  sub_1001F24E4(v78, (uint64_t)v96);
                  uint64_t v85 = v80 - (void)v9 + 224;
                  if (v85 >= 225)
                  {
                    unint64_t v86 = (unint64_t)(((((unint64_t)v85 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                           - 2) >> 1;
                    if (*(double *)&v9[14 * v86 + 13] > *(double *)(v80 + 208))
                    {
                      sub_1001F0F54((uint64_t)v101, v80);
                      do
                      {
                        uint64_t v87 = v80;
                        uint64_t v80 = (uint64_t)&v9[14 * v86];
                        sub_1001F24E4(v87, v80);
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                      }
                      while (*(double *)&v9[14 * v86 + 13] > v106);
                      sub_1001F24E4(v80, (uint64_t)v101);
                      if (__p)
                      {
                        uint64_t v105 = __p;
                        operator delete(__p);
                      }
                      sub_1000D7D80((uint64_t)v103);
                      sub_1000D7D80((uint64_t)v102);
                      sub_1001F00CC((uint64_t)v101);
                    }
                  }
                }
                if (v99)
                {
                  v100 = v99;
                  operator delete(v99);
                }
                sub_1000D7D80((uint64_t)&v98);
                sub_1000D7D80((uint64_t)&v97);
                uint64_t result = sub_1001F00CC((uint64_t)v96);
              }
              while (v77-- > 2);
            }
            return result;
          }
          uint64_t v14 = (uint64_t)&v9[14 * (v13 >> 1)];
          if ((unint64_t)v12 > 0x7000)
          {
            sub_1001F1BD0((uint64_t)v9, (uint64_t)&v9[14 * (v13 >> 1)], v10);
            uint64_t v15 = 14 * (v13 >> 1);
            unint64_t v16 = &v9[v15];
            sub_1001F1BD0((uint64_t)(v9 + 14), (uint64_t)&v9[v15 - 14], v94);
            sub_1001F1BD0((uint64_t)(v9 + 28), (uint64_t)&v9[v15 + 14], v93);
            sub_1001F1BD0((uint64_t)&v9[v15 - 14], v14, (uint64_t)&v9[v15 + 14]);
            sub_1001F20E8((uint64_t)v9, v14);
            long long v17 = v9[13];
            *(_OWORD *)uint64_t v101 = v9[12];
            long long v18 = *(_OWORD *)v101;
            *(_OWORD *)&v101[16] = v17;
            long long v19 = v9[v15 + 12];
            *(_OWORD *)((char *)v9 + 204) = *(_OWORD *)((char *)&v9[v15 + 12] + 12);
            v9[12] = v19;
            *(_OWORD *)((char *)v16 + 204) = *(_OWORD *)&v101[12];
            v16[12] = v18;
            a2 = v95;
          }
          else
          {
            sub_1001F1BD0((uint64_t)&v9[14 * (v13 >> 1)], (uint64_t)v9, v10);
          }
          --a3;
          if ((a4 & 1) != 0 || *((double *)v9 - 2) > *((double *)v9 + 26)) {
            break;
          }
          sub_1001F0F54((uint64_t)v101, (uint64_t)v9);
          if (v106 > *((double *)a2 - 2))
          {
            __int16 v37 = (double *)v9;
            do
            {
              unint64_t v11 = (unint64_t)(v37 + 28);
              double v38 = v37[54];
              v37 += 28;
            }
            while (v106 <= v38);
          }
          else
          {
            __int16 v39 = (double *)(v9 + 14);
            do
            {
              unint64_t v11 = (unint64_t)v39;
              if (v39 >= (double *)a2) {
                break;
              }
              double v40 = v39[26];
              v39 += 28;
            }
            while (v106 <= v40);
          }
          unint64_t v41 = (unint64_t)a2;
          if (v11 < (unint64_t)a2)
          {
            unint64_t v42 = a2;
            do
            {
              unint64_t v41 = (unint64_t)(v42 - 224);
              double v43 = *((double *)v42 - 2);
              v42 -= 224;
            }
            while (v106 > v43);
          }
          while (v11 < v41)
          {
            sub_1001F20E8(v11, v41);
            long long v44 = *(_OWORD *)(v11 + 208);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)(v11 + 192);
            long long v45 = *(_OWORD *)v96;
            *(_OWORD *)&v96[16] = v44;
            long long v46 = *(_OWORD *)(v41 + 204);
            *(_OWORD *)(v11 + 192) = *(_OWORD *)(v41 + 192);
            *(_OWORD *)(v11 + 204) = v46;
            *(_OWORD *)(v41 + 192) = v45;
            *(_OWORD *)(v41 + 204) = *(_OWORD *)&v96[12];
            do
            {
              double v47 = *(double *)(v11 + 432);
              v11 += 224;
            }
            while (v106 <= v47);
            do
            {
              double v48 = *(double *)(v41 - 16);
              v41 -= 224;
            }
            while (v106 > v48);
          }
          if ((_OWORD *)(v11 - 224) != v9) {
            sub_1001F24E4((uint64_t)v9, v11 - 224);
          }
          sub_1001F24E4(v11 - 224, (uint64_t)v101);
          if (__p)
          {
            uint64_t v105 = __p;
            operator delete(__p);
          }
          sub_1000D7D80((uint64_t)v103);
          sub_1000D7D80((uint64_t)v102);
          uint64_t result = sub_1001F00CC((uint64_t)v101);
          a4 = 0;
        }
        sub_1001F0F54((uint64_t)v101, (uint64_t)v9);
        uint64_t v20 = 0;
        do
        {
          double v21 = *(double *)&v9[v20 + 27];
          v20 += 14;
        }
        while (v21 > v106);
        unint64_t v22 = (char *)&v9[v20];
        unint64_t v23 = a2;
        if (v20 == 14)
        {
          double v26 = a2;
          while (v22 < v26)
          {
            unint64_t v24 = (unint64_t)(v26 - 224);
            double v27 = *((double *)v26 - 2);
            v26 -= 224;
            if (v27 > v106) {
              goto LABEL_22;
            }
          }
          unint64_t v24 = (unint64_t)v26;
        }
        else
        {
          do
          {
            unint64_t v24 = (unint64_t)(v23 - 224);
            double v25 = *((double *)v23 - 2);
            v23 -= 224;
          }
          while (v25 <= v106);
        }
LABEL_22:
        if ((unint64_t)v22 < v24)
        {
          unint64_t v28 = (unint64_t)v22;
          unint64_t v29 = v24;
          do
          {
            sub_1001F20E8(v28, v29);
            long long v30 = *(_OWORD *)(v28 + 208);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)(v28 + 192);
            long long v31 = *(_OWORD *)v96;
            *(_OWORD *)&v96[16] = v30;
            long long v32 = *(_OWORD *)(v29 + 204);
            *(_OWORD *)(v28 + 192) = *(_OWORD *)(v29 + 192);
            *(_OWORD *)(v28 + 204) = v32;
            *(_OWORD *)(v29 + 192) = v31;
            *(_OWORD *)(v29 + 204) = *(_OWORD *)&v96[12];
            do
            {
              double v33 = *(double *)(v28 + 432);
              v28 += 224;
            }
            while (v33 > v106);
            do
            {
              double v34 = *(double *)(v29 - 16);
              v29 -= 224;
            }
            while (v34 <= v106);
          }
          while (v28 < v29);
          uint64_t v35 = v28 - 224;
        }
        else
        {
          uint64_t v35 = (uint64_t)(v22 - 224);
        }
        if ((_OWORD *)v35 != v9) {
          sub_1001F24E4((uint64_t)v9, v35);
        }
        sub_1001F24E4(v35, (uint64_t)v101);
        if (__p)
        {
          uint64_t v105 = __p;
          operator delete(__p);
        }
        sub_1000D7D80((uint64_t)v103);
        sub_1000D7D80((uint64_t)v102);
        sub_1001F00CC((uint64_t)v101);
        if ((unint64_t)v22 >= v24) {
          break;
        }
LABEL_37:
        uint64_t result = sub_1001F10E8(v9, v35, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v35 + 224;
      }
      BOOL v36 = sub_1001F1D6C(v9, (char *)v35);
      unint64_t v11 = v35 + 224;
      uint64_t result = sub_1001F1D6C((_OWORD *)(v35 + 224), a2);
      if (result) {
        break;
      }
      if (!v36) {
        goto LABEL_37;
      }
    }
    a2 = (char *)v35;
    if (!v36) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1001F1BD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (_OWORD *)result;
  double v6 = *(double *)(a2 + 208);
  double v7 = *(double *)(a3 + 208);
  if (v6 <= *(double *)(result + 208))
  {
    if (v7 > v6)
    {
      uint64_t result = sub_1001F20E8(a2, a3);
      *(_OWORD *)long long v17 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 208);
      long long v11 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v11;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v17;
      *(_OWORD *)(a3 + 204) = *(_OWORD *)&v17[12];
      if (*(double *)(a2 + 208) > *((double *)v5 + 26))
      {
        uint64_t result = sub_1001F20E8((uint64_t)v5, a2);
        *(_OWORD *)long long v18 = v5[12];
        *(_OWORD *)&v18[16] = v5[13];
        long long v12 = *(_OWORD *)(a2 + 204);
        v5[12] = *(_OWORD *)(a2 + 192);
        *(_OWORD *)((char *)v5 + 204) = v12;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v18;
        *(_OWORD *)(a2 + 204) = *(_OWORD *)&v18[12];
      }
    }
  }
  else
  {
    uint64_t v8 = (_OWORD *)(result + 192);
    if (v7 <= v6)
    {
      uint64_t result = sub_1001F20E8(result, a2);
      *(_OWORD *)long long v19 = *v8;
      long long v13 = *v8;
      *(_OWORD *)&v19[16] = v5[13];
      long long v14 = *(_OWORD *)(a2 + 204);
      _OWORD *v8 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)((char *)v5 + 204) = v14;
      *(_OWORD *)(a2 + 192) = v13;
      *(_OWORD *)(a2 + 204) = *(_OWORD *)&v19[12];
      if (*(double *)(a3 + 208) <= *(double *)(a2 + 208)) {
        return result;
      }
      uint64_t result = sub_1001F20E8(a2, a3);
      long long v9 = *(_OWORD *)(a2 + 192);
      *(_DWORD *)&v16[12] = HIDWORD(v9);
      *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 208);
      long long v15 = *(_OWORD *)(a3 + 204);
      *(_OWORD *)(a2 + 192) = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 204) = v15;
    }
    else
    {
      uint64_t result = sub_1001F20E8(result, a3);
      long long v9 = *v8;
      *(_OWORD *)unint64_t v16 = *v8;
      *(_OWORD *)&v16[16] = v5[13];
      long long v10 = *(_OWORD *)(a3 + 204);
      _OWORD *v8 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)((char *)v5 + 204) = v10;
    }
    *(_OWORD *)(a3 + 192) = v9;
    *(_OWORD *)(a3 + 204) = *(_OWORD *)&v16[12];
  }
  return result;
}

BOOL sub_1001F1D6C(_OWORD *a1, char *a2)
{
  uint64_t v4 = (a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*((double *)a2 - 2) > *((double *)a1 + 26))
      {
        sub_1001F20E8((uint64_t)a1, (uint64_t)(a2 - 224));
        long long v6 = a1[13];
        *(_OWORD *)double v25 = a1[12];
        long long v7 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v6;
        long long v8 = *(_OWORD *)(a2 - 20);
        a1[12] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 204) = v8;
        *((_OWORD *)a2 - 2) = v7;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        return 1;
      }
      return result;
    case 3:
      sub_1001F1BD0((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a2 - 224));
      return 1;
    case 4:
      sub_1001F23B0(a1, a1 + 14, a1 + 28, (uint64_t)(a2 - 224));
      return 1;
    case 5:
      sub_1001F23B0(a1, a1 + 14, a1 + 28, (uint64_t)(a1 + 42));
      if (*((double *)a2 - 2) > *((double *)a1 + 110))
      {
        sub_1001F20E8((uint64_t)(a1 + 42), (uint64_t)(a2 - 224));
        long long v16 = a1[55];
        *(_OWORD *)double v25 = a1[54];
        long long v17 = *(_OWORD *)v25;
        *(_OWORD *)&v25[16] = v16;
        long long v18 = *(_OWORD *)(a2 - 20);
        a1[54] = *((_OWORD *)a2 - 2);
        *(_OWORD *)((char *)a1 + 876) = v18;
        *((_OWORD *)a2 - 2) = v17;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v25[12];
        if (*((double *)a1 + 110) > *((double *)a1 + 82))
        {
          sub_1001F20E8((uint64_t)(a1 + 28), (uint64_t)(a1 + 42));
          long long v19 = a1[41];
          *(_OWORD *)double v25 = a1[40];
          long long v20 = *(_OWORD *)v25;
          *(_OWORD *)&v25[16] = v19;
          a1[40] = a1[54];
          *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)((char *)a1 + 876);
          a1[54] = v20;
          *(_OWORD *)((char *)a1 + 876) = *(_OWORD *)&v25[12];
          if (*((double *)a1 + 82) > *((double *)a1 + 54))
          {
            sub_1001F20E8((uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
            long long v21 = a1[27];
            *(_OWORD *)double v25 = a1[26];
            long long v22 = *(_OWORD *)v25;
            *(_OWORD *)&v25[16] = v21;
            a1[26] = a1[40];
            *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)((char *)a1 + 652);
            a1[40] = v22;
            *(_OWORD *)((char *)a1 + 652) = *(_OWORD *)&v25[12];
            if (*((double *)a1 + 54) > *((double *)a1 + 26))
            {
              sub_1001F20E8((uint64_t)a1, (uint64_t)(a1 + 14));
              long long v23 = a1[13];
              *(_OWORD *)double v25 = a1[12];
              long long v24 = *(_OWORD *)v25;
              *(_OWORD *)&v25[16] = v23;
              a1[12] = a1[26];
              *(_OWORD *)((char *)a1 + 204) = *(_OWORD *)((char *)a1 + 428);
              a1[26] = v24;
              *(_OWORD *)((char *)a1 + 428) = *(_OWORD *)&v25[12];
            }
          }
        }
      }
      return 1;
    default:
      long long v9 = (double *)(a1 + 28);
      sub_1001F1BD0((uint64_t)a1, (uint64_t)(a1 + 14), (uint64_t)(a1 + 28));
      uint64_t v10 = (uint64_t)(a1 + 42);
      if (a1 + 42 == (_OWORD *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)(v10 + 208) > v9[26])
    {
      sub_1001F0F54((uint64_t)v25, v10);
      uint64_t v13 = v11;
      while (1)
      {
        sub_1001F24E4((uint64_t)a1 + v13 + 672, (uint64_t)a1 + v13 + 448);
        if (v13 == -448) {
          break;
        }
        double v14 = *(double *)((char *)a1 + v13 + 432);
        v13 -= 224;
        if (v30 <= v14)
        {
          uint64_t v15 = (uint64_t)a1 + v13 + 672;
          goto LABEL_12;
        }
      }
      uint64_t v15 = (uint64_t)a1;
LABEL_12:
      sub_1001F24E4(v15, (uint64_t)v25);
      if (__p)
      {
        unint64_t v29 = __p;
        operator delete(__p);
      }
      ++v12;
      sub_1000D7D80((uint64_t)&v27);
      sub_1000D7D80((uint64_t)&v26);
      sub_1001F00CC((uint64_t)v25);
      if (v12 == 8) {
        return v10 + 224 == (void)a2;
      }
    }
    long long v9 = (double *)v10;
    v11 += 224;
    v10 += 224;
    if ((char *)v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1001F20E8(uint64_t a1, uint64_t a2)
{
  sub_1000E2908((uint64_t)v8, (uint64_t *)a1);
  long long v9 = *(_OWORD *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  sub_1000E2908((uint64_t)v11, (uint64_t *)(a1 + 64));
  sub_1000E2908((uint64_t)v12, (uint64_t *)(a1 + 104));
  long long v13 = *(_OWORD *)(a1 + 144);
  int v14 = *(_DWORD *)(a1 + 160);
  long long v15 = *(_OWORD *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 184);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_1001F22B4(a1, (uint64_t *)a2);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  sub_1000E2E9C(a1 + 64, (uint64_t *)(a2 + 64));
  sub_1000E2E9C(a1 + 104, (uint64_t *)(a2 + 104));
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  sub_1000F4EBC(a1 + 168, (__n128 *)(a2 + 168));
  sub_1001F22B4(a2, v8);
  *(_OWORD *)(a2 + 40) = v9;
  *(void *)(a2 + 56) = v10;
  sub_1000E2E9C(a2 + 64, v11);
  sub_1000E2E9C(a2 + 104, v12);
  *(_OWORD *)(a2 + 144) = v13;
  *(_DWORD *)(a2 + 160) = v14;
  long long v6 = *(void **)(a2 + 168);
  if (v6)
  {
    *(void *)(a2 + 176) = v6;
    operator delete(v6);
  }
  *(_OWORD *)(a2 + 168) = v15;
  *(void *)(a2 + 184) = v16;
  uint64_t v16 = 0;
  long long v15 = 0uLL;
  sub_1000D7D80((uint64_t)v12);
  sub_1000D7D80((uint64_t)v11);
  return sub_1001F00CC((uint64_t)v8);
}

void sub_1001F22B4(uint64_t a1, uint64_t *a2)
{
  sub_1001F2358(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void sub_1001F2358(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1001F0108(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_1001F23B0(_OWORD *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  uint64_t result = sub_1001F1BD0((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  if (*(double *)(a4 + 208) > *((double *)a3 + 26))
  {
    uint64_t result = sub_1001F20E8((uint64_t)a3, a4);
    *(_OWORD *)unint64_t v12 = a3[12];
    *(_OWORD *)&v12[16] = a3[13];
    long long v9 = *(_OWORD *)(a4 + 204);
    a3[12] = *(_OWORD *)(a4 + 192);
    *(_OWORD *)((char *)a3 + 204) = v9;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v12;
    *(_OWORD *)(a4 + 204) = *(_OWORD *)&v12[12];
    if (*((double *)a3 + 26) > *((double *)a2 + 26))
    {
      uint64_t result = sub_1001F20E8((uint64_t)a2, (uint64_t)a3);
      *(_OWORD *)long long v13 = a2[12];
      *(_OWORD *)&v13[16] = a2[13];
      long long v10 = *(_OWORD *)((char *)a3 + 204);
      a2[12] = a3[12];
      *(_OWORD *)((char *)a2 + 204) = v10;
      a3[12] = *(_OWORD *)v13;
      *(_OWORD *)((char *)a3 + 204) = *(_OWORD *)&v13[12];
      if (*((double *)a2 + 26) > *((double *)a1 + 26))
      {
        uint64_t result = sub_1001F20E8((uint64_t)a1, (uint64_t)a2);
        *(_OWORD *)int v14 = a1[12];
        *(_OWORD *)&v14[16] = a1[13];
        long long v11 = *(_OWORD *)((char *)a2 + 204);
        a1[12] = a2[12];
        *(_OWORD *)((char *)a1 + 204) = v11;
        a2[12] = *(_OWORD *)v14;
        *(_OWORD *)((char *)a2 + 204) = *(_OWORD *)&v14[12];
      }
    }
  }
  return result;
}

uint64_t sub_1001F24E4(uint64_t a1, uint64_t a2)
{
  sub_1001F22B4(a1, (uint64_t *)a2);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  sub_1000E2E9C(a1 + 64, (uint64_t *)(a2 + 64));
  sub_1000E2E9C(a1 + 104, (uint64_t *)(a2 + 104));
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v5;
  sub_1000F4EBC(a1 + 168, (__n128 *)(a2 + 168));
  long long v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 204) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 192) = v6;
  return a1;
}

uint64_t sub_1001F2564(uint64_t result)
{
  if (*(unsigned char *)(result + 280))
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 256))
    {
      if (*(char *)(result + 255) < 0) {
        operator delete(*(void **)(result + 232));
      }
    }
    uint64_t result = sub_10024B47C(v1 + 32);
    *(unsigned char *)(v1 + 280) = 0;
  }
  return result;
}

uint64_t sub_1001F25B0(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  double v11 = *a3;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a5;
    uint64_t v14 = *(void *)(a5 + 16);
  }
  char v15 = 1;
  sub_100338C7C(a1, v9, v10, a4, (uint64_t)__p, *a6, a6[1], v11);
  if (v15 && SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1001F266C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001F2690(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    double v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  long long v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_44:
    *long long v22 = i;
    goto LABEL_45;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    long long v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1001F28D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1001F28EC(uint64_t **a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  long long v5 = *a1;
  unint64_t v7 = v5[2];
  uint64_t v6 = (uint64_t)(v5 + 2);
  if (v4 >= v7)
  {
    uint64_t v8 = sub_1001F2960(v3, a2);
  }
  else
  {
    sub_1001F2A70(v6, v4, a2);
    uint64_t v8 = v4 + 240;
    v3[1] = v4 + 240;
  }
  v3[1] = v8;
  return a1;
}

void sub_1001F2958(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1001F2960(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x111111111111111) {
    sub_1001D7FD4();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888) {
    unint64_t v6 = 0x111111111111111;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)sub_1001F2B9C((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  uint8x8_t v10 = v7;
  double v11 = &v7[240 * v3];
  unint64_t v13 = &v7[240 * v6];
  sub_1001F2A70((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 240;
  sub_1001F2B24(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1001F2D3C(&v10);
  return v8;
}

void sub_1001F2A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F2D3C((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1001F2A70(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v5;
  unint64_t v6 = (unsigned char *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000DC48C(v6, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a2 + 40) = *((void *)a3 + 5);
    *(_OWORD *)unint64_t v6 = v7;
  }
  long long v8 = a3[3];
  *(_OWORD *)(a2 + 60) = *(long long *)((char *)a3 + 60);
  *(_OWORD *)(a2 + 48) = v8;
  sub_1002660C8(a2 + 80);
  __n128 result = *(__n128 *)((char *)a3 + 216);
  *(unsigned char *)(a2 + 232) = *((unsigned char *)a3 + 232);
  *(__n128 *)(a2 + 216) = result;
  return result;
}

void sub_1001F2B08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F2B24(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001F2BE4((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1001F2B9C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112) {
    sub_1001D7FA0();
  }
  return operator new(240 * a2);
}

uint64_t sub_1001F2BE4(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 15;
      sub_1001F2A70(a1, v7 - 240, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 240;
      *((void *)&v16 + 1) -= 240;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1001F2CB0((uint64_t)v13);
  return v11;
}

void sub_1001F2C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001F2CB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001F2CE8((uint64_t *)a1);
  }
  return a1;
}

void sub_1001F2CE8(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1001EF82C(v3, v1);
      v1 += 240;
    }
    while (v1 != v2);
  }
}

void **sub_1001F2D3C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1001F2D70(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 240;
    sub_1001EF82C(v4, i - 240);
  }
}

void *sub_1001F2DB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001F2E3C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001F2EC0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 208;
        sub_1001F0024((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1001F2F58(uint64_t a1)
{
  sub_1001F2F94(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1001F2F94(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 32);
      sub_1001F2FE8(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_1001F2FE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        sub_1001F0024((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1001F3080(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  *uint64_t i = *v15;
  *long long v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1001F32F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1001F330C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1001F330C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 4;
    sub_1001F2FE8(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_1001F3358(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555) {
    sub_1001D7FD4();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10017EB28((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint8x8_t v10 = v7;
  uint64_t v11 = &v7[192 * v3];
  unint64_t v13 = &v7[192 * v6];
  sub_1001F3468((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 192;
  sub_1001F3530(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1001F3774(&v10);
  return v8;
}

void sub_1001F3454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F3774((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1001F3468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001F03C4(a2, a3);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  sub_1001F08B0(a2 + 64, a3 + 64);
  sub_1001F0B48(a2 + 104, a3 + 104);
  long long v6 = *(_OWORD *)(a3 + 144);
  int v7 = *(_DWORD *)(a3 + 160);
  *(void *)(a2 + 168) = 0;
  *(_DWORD *)(a2 + 160) = v7;
  *(_OWORD *)(a2 + 144) = v6;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  return sub_10010F834((void *)(a2 + 168), *(const void **)(a3 + 168), *(void *)(a3 + 176), (uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 2);
}

void sub_1001F34FC(_Unwind_Exception *a1)
{
  sub_1000D7D80(v3);
  sub_1000D7D80(v2);
  sub_1001F00CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F3530(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001F35A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1001F35A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 192;
      sub_1001F3660(a1, v7 - 192, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 192;
      *((void *)&v16 + 1) -= 192;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1001F36E8((uint64_t)v13);
  return v11;
}

__n128 sub_1001F3660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000E2908(a2, (uint64_t *)a3);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  sub_1000E2908(a2 + 64, (uint64_t *)(a3 + 64));
  sub_1000E2908(a2 + 104, (uint64_t *)(a3 + 104));
  long long v6 = *(_OWORD *)(a3 + 144);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 144) = v6;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 168) = 0;
  __n128 result = *(__n128 *)(a3 + 168);
  *(__n128 *)(a2 + 168) = result;
  *(void *)(a2 + 184) = *(void *)(a3 + 184);
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  return result;
}

uint64_t sub_1001F36E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001F3720((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_1001F3720(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      __n128 result = (uint64_t *)sub_1001F0024(v3, v1);
      v1 += 192;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_1001F3774(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_1001F37A8(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 192;
      __n128 result = sub_1001F0024(v4, v1 - 192);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1001F37F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

unint64_t *sub_1001F3888(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  long long v6 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  *a1 = v7;
  v22[0] = 0;
  sub_1001F3B04((uint64_t)(a1 + 1), (v7 + v7 * v7) >> 1, v22);
  if (*a1)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *a2;
      sub_1001F03C4((uint64_t)v22, *a2 + 192 * v8);
      uint64_t v10 = v9 + 192 * v8;
      long long v11 = *(_OWORD *)(v10 + 40);
      uint64_t v24 = *(void *)(v10 + 56);
      long long v23 = v11;
      sub_1001F08B0((uint64_t)v25, v10 + 64);
      sub_1001F0B48((uint64_t)v26, v9 + 192 * v8 + 104);
      uint64_t v12 = v9 + 192 * v8;
      long long v13 = *(_OWORD *)(v12 + 144);
      int v27 = *(_DWORD *)(v12 + 160);
      *(_OWORD *)&v26[40] = v13;
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      long long __p = 0;
      sub_10010F834(&__p, *(const void **)(v12 + 168), *(void *)(v12 + 176), (uint64_t)(*(void *)(v12 + 176) - *(void *)(v12 + 168)) >> 2);
      if (v8)
      {
        uint64_t v14 = 0;
        for (unint64_t i = 0; i != v8; ++i)
        {
          uint64_t v16 = *(void *)(a3 + 24);
          if (!v16) {
            sub_10015E48C();
          }
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v16 + 48))(v16, v22, *a2 + v14);
          if (v8 <= i) {
            unint64_t v18 = i;
          }
          else {
            unint64_t v18 = v8;
          }
          if (v8 >= i) {
            unint64_t v19 = i;
          }
          else {
            unint64_t v19 = v8;
          }
          float v20 = v17;
          *(float *)(*v6 + 4 * (v19 + ((v18 + v18 * v18) >> 1))) = v20;
          v14 += 192;
        }
      }
      if (__p)
      {
        unint64_t v29 = __p;
        operator delete(__p);
      }
      sub_1000D7D80((uint64_t)v26);
      sub_1000D7D80((uint64_t)v25);
      sub_1001F00CC((uint64_t)v22);
      ++v8;
    }
    while (v8 < *a1);
  }
  return a1;
}

void sub_1001F3AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *v13;
  if (*v13)
  {
    *(void *)(v14 + 16) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F3B04(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1001F3B34((void **)a1, a2 - v3, a3);
  }
}

void sub_1001F3B34(void **a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      double v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)sub_10017EA34(v6, v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v18 = &v15[4 * v12];
    unint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    size_t v21 = v18;
    do
    {
      *(_DWORD *)size_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    long long v23 = (char *)*a1;
    for (unint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t sub_1001F3C58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1001F3CF0(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001DCF60(a1, a2);
    uint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1001F3D58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F3D74(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL) {
    sub_1001D7FD4();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x9D89D89D89D89DLL) {
    unint64_t v11 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_1001F3FEC(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  long long v15 = v12;
  uint64_t v16 = &v12[208 * v5];
  unint64_t v18 = &v12[208 * v11];
  sub_1001F3E9C((uint64_t)v16, a2, a3);
  double v17 = v16 + 208;
  sub_1001F3F74(a1, &v15);
  uint64_t v13 = a1[1];
  sub_1001F41F8(&v15);
  return v13;
}

void sub_1001F3E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F41F8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F3E9C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = sub_1001F03C4(a1, a2);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(v6 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v7;
  sub_1001F08B0(v6 + 64, a2 + 64);
  sub_1001F0B48(a1 + 104, a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 144);
  int v9 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_10010F834((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  *(_OWORD *)(a1 + 192) = *a3;
  return a1;
}

void sub_1001F3F40(_Unwind_Exception *a1)
{
  sub_1000D7D80(v3);
  sub_1000D7D80(v2);
  sub_1001F00CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F3F74(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001F4038((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1001F3FEC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL) {
    sub_1001D7FA0();
  }
  return operator new(208 * a2);
}

uint64_t sub_1001F4038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 208;
      sub_1001F40E0(v7 - 208, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 208;
      *((void *)&v15 + 1) -= 208;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1001F416C((uint64_t)v12);
  return v10;
}

uint64_t sub_1001F40E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E2908(a1, (uint64_t *)a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_1000E2908(v4 + 64, (uint64_t *)(a2 + 64));
  sub_1000E2908(a1 + 104, (uint64_t *)(a2 + 104));
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  return a1;
}

uint64_t sub_1001F416C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001F41A4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_1001F41A4(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_1001F0024(v3, v1);
      v1 += 208;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_1001F41F8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_1001F422C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 208;
      uint64_t result = sub_1001F0024(v4, v1 - 208);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1001F4280()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizing80211ScanType", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 2;
  }
}

void sub_1001F4314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F4330()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizing80211Modes", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_10013E418(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 14;
  }
}

void sub_1001F43C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1001F43E0@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v6 = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(void *)(a2 + 24) = 0;
  unsigned int v4 = (__n128 *)operator new(0x28uLL);
  v4->n128_u64[0] = (unint64_t)off_10229EB78;
  v4->n128_u64[1] = 0;
  __n128 result = v6;
  v4[1] = v6;
  v4[2].n128_u64[0] = v3;
  *(void *)(a2 + 24) = v4;
  return result;
}

void sub_1001F4454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F4470()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingScanLowPriority", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_1001F4500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F451C()
{
  sub_1000C7F88(&v2);
  int v1 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingWifiDutyCyclePercentage", 0x8000100u, kCFAllocatorNull);
  sub_1004D123C(v2, (uint64_t)v0, (float *)&v1);
  CFRelease(v0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1001F45BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F45D8()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingWifiMaxAgeFirstScan", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  uint64_t v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

void sub_1001F4668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1001F4684()
{
  return 0.0;
}

uint64_t sub_1001F468C()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecording80211ScanType", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 2;
  }
}

void sub_1001F4720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F473C()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecording80211Modes", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_10013E418(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 14;
  }
}

void sub_1001F47D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1001F47EC@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v6 = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  *(void *)(a2 + 24) = 0;
  unsigned int v4 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v4 = off_10229EC08;
  __n128 result = v6;
  *(__n128 *)(v4 + 8) = v6;
  *((void *)v4 + 3) = v3;
  *(void *)(a2 + 24) = v4;
  return result;
}

void sub_1001F4860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F487C()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingScanLowPriority", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_1001F490C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F4928()
{
  sub_1000C7F88(&v2);
  int v1 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingWifiDutyCyclePercentage", 0x8000100u, kCFAllocatorNull);
  sub_1004D123C(v2, (uint64_t)v0, (float *)&v1);
  CFRelease(v0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1001F49C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F49E4()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingWifiMaxAgeFirstScan", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  uint64_t v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

void sub_1001F4A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F4A90()
{
  sub_1000C7F88(&v2);
  int v1 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingInitialDelay", 0x8000100u, kCFAllocatorNull);
  sub_1004D123C(v2, (uint64_t)v0, (float *)&v1);
  CFRelease(v0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1001F4B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1001F4B50(uint64_t a1, double a2, double a3)
{
  double v4 = a2 + a3;
  double v5 = *(double *)(a1 + 168);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EB48);
  }
  double v6 = v4 + v5;
  uint64_t v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 168);
    uint64_t v9 = *(void *)(a1 + 208);
    *(_DWORD *)buf = 134349568;
    uint64_t v13 = v8;
    __int16 v14 = 2050;
    double v15 = v6;
    __int16 v16 = 2050;
    uint64_t v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Next scan expected to take %{public}.3Lfs (ending at %{public}0.3fs). Expected time that the scan timer will end: %{public}.03fs", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EB48);
    }
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "cl::chrono::CFAbsoluteTimeClock::time_point CLMicroLocationWifiScanStrategy::getExpectedNextScanEndTime(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::CFAbsoluteTimeClock::duration) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return v6;
}

double sub_1001F4D4C(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    if (*(_DWORD *)a2 == 5)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
      uint64_t v8 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = a1[19];
        *(_DWORD *)buf = 134349056;
        uint64_t v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Got a scan busy error so returning a scan delay of %{public}0.3Lfs", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229EB48);
        }
        double v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      double v5 = a1 + 19;
    }
    else if (*(_DWORD *)a2 == 4)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
      unint64_t v3 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = a1[20];
        *(_DWORD *)buf = 134349056;
        uint64_t v18 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Got a scan error so returning a scan delay of %{public}0.3Lfs", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229EB48);
        }
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      double v5 = a1 + 20;
    }
    else
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
      uint64_t v10 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = a1[18];
        *(_DWORD *)buf = 134349056;
        uint64_t v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Returning scan delay: %{public}0.3Lfs", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229EB48);
        }
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      double v5 = a1 + 18;
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EB48);
    }
    double v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = a1[22];
      *(_DWORD *)buf = 134349056;
      uint64_t v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "No wifi results so issue a scan with initial delay of %{public}0.3Lfs", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(std::optional<WifiNotificationResults>) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    double v5 = a1 + 22;
  }
  return *(double *)v5;
}

void sub_1001F5324(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = *(void *)(a1 + 272);
  if (!v6) {
    sub_10015E48C();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v6 + 48))(&v41);
  uint64_t v9 = *(void **)(a1 + 16);
  __int16 v39 = 0;
  uint64_t v40 = 0;
  long long __p = 0;
  sub_10010F834(&__p, v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
  sub_100F7E8A8(v9, (uint64_t)&__p);
  if (__p)
  {
    __int16 v39 = __p;
    operator delete(__p);
  }
  sub_1001F59E4(a1);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_1000C7F88(buf);
  LODWORD(v44.__r_.__value_.__l.__data_) = 0;
  CFStringRef v11 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsWifiMaxAgeNextScan", 0x8000100u, kCFAllocatorNull);
  int v12 = sub_1004D08E4((uint64_t)buf[0].__r_.__value_.__l.__data_, (uint64_t)v11, &v44);
  CFRelease(v11);
  uint64_t data_low = LODWORD(v44.__r_.__value_.__l.__data_);
  if (buf[0].__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_);
  }
  if (v12) {
    uint64_t v14 = data_low;
  }
  else {
    uint64_t v14 = 0;
  }
  sub_100F7EA28(v10, v14);
  long long v35 = *a2;
  uint64_t v36 = *((void *)a2 + 2);
  double v37 = sub_1001F4D4C((void *)a1, (uint64_t)&v35);
  double v15 = sub_1001F4B50(a1, a4, v37);
  double v16 = *(double *)(a1 + 208);
  if (v16 < v15)
  {
    uint64_t v17 = sub_1001F5B74(a1);
    double v16 = *(double *)(a1 + 208);
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (v16 < v15)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EB48);
    }
    uint64_t v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Not enough time for another scan", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
      LOWORD(v44.__r_.__value_.__l.__data_) = 0;
      long long v31 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl::chrono::CFAbsoluteTimeClock::time_point, std::optional<WifiNotificationResults>)", "%s\n", (const char *)v31);
      if (v31 != buf) {
        free(v31);
      }
    }
    double v37 = 1.79769313e308;
    if (!v17) {
      (*(void (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8));
    }
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EB48);
  }
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = sub_1002CAC98(*(void *)(a1 + 16));
    uint64_t v20 = (uint64_t *)v19;
    memset(&v34, 0, sizeof(v34));
    if (*(void *)v19 != *(void *)(v19 + 8))
    {
      std::to_string(buf, **(_DWORD **)v19);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      std::string v34 = buf[0];
      long long v23 = (int *)(v22 + 4);
      for (unint64_t i = (int *)(v21 - 4); v23 != i; ++v23)
      {
        std::to_string(&v44, *v23);
        int v25 = std::string::insert(&v44, 0, ",");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        buf[0].__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v27 = buf;
        }
        else {
          int v27 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        }
        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = buf[0].__r_.__value_.__l.__size_;
        }
        std::string::append(&v34, (const std::string::value_type *)v27, size);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
      }
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EB48);
    }
    unint64_t v29 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v30 = &v34;
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v30 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Setting channels to scan: %{private}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EB48);
      }
      long long v32 = &v34;
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v32 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      LODWORD(v44.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      double v33 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl::chrono::CFAbsoluteTimeClock::time_point, std::optional<WifiNotificationResults>)", "%s\n", (const char *)v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  sub_1001F6D10(*(uint64_t **)(a1 + 16), a1 + 24, &v37, a3);
  if (v41)
  {
    unint64_t v42 = v41;
    operator delete(v41);
  }
}

void sub_1001F592C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F59E4(uint64_t a1)
{
  *(double *)(a1 + 144) = sub_100F7EE04(*(void **)(a1 + 16), *(float *)(a1 + 184));
  sub_1000C7F88(&v11);
  unsigned int v10 = 0;
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsWifiBusyRetryDelay", 0x8000100u, kCFAllocatorNull);
  int v3 = sub_1004D08E4(v11, (uint64_t)v2, &v10);
  CFRelease(v2);
  unsigned int v4 = v10;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  double v5 = (double)v4 / 1000.0;
  if (!v3) {
    double v5 = 1.0;
  }
  *(double *)(a1 + 152) = v5;
  sub_1000C7F88(&v11);
  unsigned int v10 = 0;
  CFStringRef v6 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsWifiErrorRetryDelay", 0x8000100u, kCFAllocatorNull);
  int v7 = sub_1004D08E4(v11, (uint64_t)v6, &v10);
  CFRelease(v6);
  unsigned int v8 = v10;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  double v9 = (double)v8 / 1000.0;
  if (!v7) {
    double v9 = 1.0;
  }
  *(double *)(a1 + 160) = v9;
  *(double *)(a1 + 168) = sub_100F7EE80(*(void **)(a1 + 16));
}

void sub_1001F5B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F5B74(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EB48);
  }
  int v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    double v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Scan strategy extends scan\", \"by duration (ms)\":%{public}lld}", (uint8_t *)v7, 0x1Cu);
  }
  double v4 = *(double *)(a1 + 200);
  double v5 = (double)v2 / 1000.0 + *(double *)(a1 + 192);
  *(double *)(a1 + 192) = v5;
  *(double *)(a1 + 208) = v5 + v4;
  return v2;
}

void sub_1001F5CB8(uint64_t a1, double a2)
{
  double v3 = a2 + *(double *)(a1 + 192);
  *(double *)(a1 + 200) = a2;
  *(double *)(a1 + 208) = v3;
  CFStringRef v6 = 0;
  uint64_t v7 = 0;
  long long __p = 0;
  sub_1001DD364(&__p, *(const void **)(a1 + 280), *(void *)(a1 + 288), (uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3);
  uint64_t v4 = *(void *)(a1 + 240);
  if (!v4) {
    sub_10015E48C();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v4 + 48))(v8);
  sub_1001F71A4((void *)(a1 + 248), (uint64_t)v8);
  sub_1001F7120(v8);
  if (__p)
  {
    CFStringRef v6 = __p;
    operator delete(__p);
  }
}

void sub_1001F5D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F5DC8(uint64_t a1)
{
  return sub_1001F5B74(a1);
}

uint64_t sub_1001F5DE0(uint64_t a1)
{
  *(void *)a1 = off_10229EB00;
  uint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }
  sub_1001F7120((void *)(a1 + 248));
  sub_1001F5F68((void *)(a1 + 216));
  if (*(unsigned char *)(a1 + 136) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  double v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    sub_1001F5FEC(a1 + 16, v4);
  }
  return a1;
}

void sub_1001F5E7C(uint64_t a1)
{
  *(void *)a1 = off_10229EB00;
  uint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }
  sub_1001F7120((void *)(a1 + 248));
  sub_1001F5F68((void *)(a1 + 216));
  if (*(unsigned char *)(a1 + 136) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  double v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    sub_1001F5FEC(a1 + 16, v4);
  }

  operator delete();
}

void sub_1001F5F38(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_1001F5F68(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1001F5FEC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 87) < 0) {
      operator delete(*(void **)(a2 + 64));
    }
    double v3 = *(void **)(a2 + 16);
    if (v3)
    {
      *(void *)(a2 + 24) = v3;
      operator delete(v3);
    }
    operator delete();
  }
}

uint64_t sub_1001F6058(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_1001F609C(void *a1)
{
  *a1 = off_10229EB78;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1001F60EC(void *a1)
{
  *a1 = off_10229EB78;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void *sub_1001F615C(void *a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  double v3 = (const void *)a1[2];
  void *v2 = off_10229EB78;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  sub_1001DD364(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (void)v3) >> 3);
  return v2;
}

void sub_1001F61C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1001F61D8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_10229EB78;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return sub_1001DD364(a2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3);
}

void sub_1001F6218(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_1001F6230(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_1001F6274(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000C7F88(&v31);
  CFArrayRef v30 = 0;
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizingTopChannels", 0x8000100u, kCFAllocatorNull);
  BOOL v5 = sub_1004D1D1C(v31, v4, (CFTypeRef *)&v30);
  CFRelease(v4);
  if (v5)
  {
    sub_1001F65E0(v30, (uint64_t)&__p);
  }
  else
  {
    CFStringRef v6 = operator new(0x40uLL);
    unint64_t v29 = v6 + 4;
    *CFStringRef v6 = xmmword_101D08F68;
    v6[1] = unk_101D08F78;
    v6[2] = xmmword_101D08F88;
    v6[3] = unk_101D08F98;
    long long __p = v6;
    unint64_t v28 = (char *)(v6 + 4);
  }
  if (v32) {
    sub_1000DB0A0(v32);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7 + 1;
  unint64_t v8 = v7 % ((v28 - (unsigned char *)__p) >> 6);
  sub_1001F6538((void **)a2, *((void *)__p + 8 * v8));
  double v9 = (char *)__p;
  __int16 v10 = (char *)__p + 64 * v8;
  uint64_t v13 = *v10;
  int v12 = (int *)(v10 + 1);
  uint64_t v11 = v13;
  if (!v13) {
    goto LABEL_26;
  }
  uint64_t v14 = (void *)(a2 + 16);
  double v15 = *(_DWORD **)(a2 + 8);
  double v16 = &v12[v11];
  do
  {
    uint64_t v17 = (_DWORD *)(*(void *)(a1 + 16) + 8 * *v12);
    if ((unint64_t)v15 >= *v14)
    {
      uint64_t v19 = *(_DWORD **)a2;
      uint64_t v20 = ((uint64_t)v15 - *(void *)a2) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        sub_1001D7FD4();
      }
      uint64_t v22 = *v14 - (void)v19;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)sub_10017EA34(a2 + 16, v23);
        uint64_t v19 = *(_DWORD **)a2;
        double v15 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        uint64_t v24 = 0;
      }
      int v25 = &v24[4 * v20];
      *(_DWORD *)int v25 = *v17;
      uint64_t v18 = v25 + 4;
      while (v15 != v19)
      {
        int v26 = *--v15;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      *(void *)a2 = v25;
      *(void *)(a2 + 8) = v18;
      *(void *)(a2 + 16) = &v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *double v15 = *v17;
      uint64_t v18 = v15 + 1;
    }
    *(void *)(a2 + 8) = v18;
    ++v12;
    double v15 = v18;
  }
  while (v12 != v16);
  double v9 = (char *)__p;
  if (__p)
  {
LABEL_26:
    unint64_t v28 = v9;
    operator delete(v9);
  }
}

void sub_1001F649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F64EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1001F652C()
{
}

void sub_1001F6538(void **a1, unint64_t a2)
{
  CFStringRef v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    CFStringRef v6 = (char *)sub_10017EA34(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    double v9 = &v6[4 * v8];
    __int16 v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    int v12 = v7;
    if (v11 != *a1)
    {
      int v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

double sub_1001F65E0@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_1001F6668, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_1001F664C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F6668(const void *a1, void **a2)
{
  sub_1001F6774(a1, &v24);
  unint64_t v3 = (unint64_t)a2[2];
  CFStringRef v4 = a2[1];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v9 = ((char *)v4 - (unsigned char *)*a2) >> 6;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 58) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v3 - (void)*a2;
    if (v11 >> 5 > v10) {
      unint64_t v10 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      int v13 = (char *)sub_10017EAF0((uint64_t)(a2 + 2), v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[64 * v9];
    double v15 = &v13[64 * v12];
    long long v16 = v24;
    long long v17 = v25;
    long long v18 = v27;
    *((_OWORD *)v14 + 2) = v26;
    *((_OWORD *)v14 + 3) = v18;
    *(_OWORD *)uint64_t v14 = v16;
    *((_OWORD *)v14 + 1) = v17;
    uint64_t v8 = v14 + 64;
    uint64_t v20 = (char *)*a2;
    uint64_t v19 = (char *)a2[1];
    if (v19 != *a2)
    {
      do
      {
        long long v21 = *((_OWORD *)v19 - 4);
        long long v22 = *((_OWORD *)v19 - 3);
        long long v23 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v14 - 1) = v23;
        *((_OWORD *)v14 - 4) = v21;
        *((_OWORD *)v14 - 3) = v22;
        v14 -= 64;
        v19 -= 64;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = v15;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v5 = v24;
    long long v6 = v25;
    long long v7 = v27;
    v4[2] = v26;
    v4[3] = v7;
    _OWORD *v4 = v5;
    v4[1] = v6;
    uint64_t v8 = v4 + 4;
  }
  a2[1] = v8;
}

void sub_1001F6774(const void *a1@<X0>, void *a2@<X8>)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFArrayGetTypeID()) {
    sub_101A51788();
  }
  context = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
  v14.length = Count & ~(Count >> 63);
  v14.location = 0;
  CFArrayApplyFunction((CFArrayRef)a1, v14, (CFArrayApplierFunction)sub_1001F6858, &context);
  long long v6 = context;
  long long v7 = v12;
  *a2 = 0;
  if (v6 != v7)
  {
    uint64_t v8 = 2;
    uint64_t v9 = v6;
    do
    {
      if (v8 == 16) {
        break;
      }
      int v10 = *v9++;
      *a2 = v8 - 1;
      *((_DWORD *)a2 + v8++) = v10;
    }
    while (v9 != v7);
  }
  if (v6)
  {
    unint64_t v12 = v6;
    operator delete(v6);
  }
}

void sub_1001F6858(const void *a1, uint64_t a2)
{
  int v3 = sub_1001F693C(a1);
  int v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  long long v6 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_10017EA34(a2 + 16, v12);
      uint64_t v8 = *(_DWORD **)a2;
      long long v6 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    CFRange v14 = &v13[4 * v9];
    double v15 = &v13[4 * v12];
    *(_DWORD *)CFRange v14 = v4;
    long long v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *long long v6 = v3;
    long long v7 = v6 + 1;
  }
  *(void *)(a2 + 8) = v7;
}

uint64_t sub_1001F693C(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID()) {
    sub_101A51A80();
  }
  unsigned int valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr)) {
    sub_101A51908();
  }
  return valuePtr;
}

void *sub_1001F699C(void *a1)
{
  *a1 = off_10229EC08;
  CFTypeID v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1001F69EC(void *a1)
{
  *a1 = off_10229EC08;
  CFTypeID v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

void *sub_1001F6A5C(uint64_t a1)
{
  CFTypeID v2 = operator new(0x20uLL);
  void *v2 = off_10229EC08;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_1001DD364(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  return v2;
}

void sub_1001F6AC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1001F6AD4(uint64_t a1, void *a2)
{
  *a2 = off_10229EC08;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return sub_1001DD364(a2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
}

void sub_1001F6B10(uint64_t a1)
{
  CFTypeID v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void sub_1001F6B28(void *__p)
{
  CFTypeID v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_1001F6B6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1001F6538((void **)a2, (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  int v4 = *(_DWORD **)(a1 + 8);
  unint64_t v5 = *(_DWORD **)(a1 + 16);
  if (v4 != v5)
  {
    long long v6 = (void *)(a2 + 16);
    long long v7 = *(_DWORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = *(_DWORD **)a2;
        uint64_t v10 = ((uint64_t)v7 - *(void *)a2) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v12 = *v6 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          CFRange v14 = (char *)sub_10017EA34(a2 + 16, v13);
          uint64_t v9 = *(_DWORD **)a2;
          long long v7 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          CFRange v14 = 0;
        }
        double v15 = &v14[4 * v10];
        *(_DWORD *)double v15 = *v4;
        uint64_t v8 = v15 + 4;
        while (v7 != v9)
        {
          int v16 = *--v7;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 16) = &v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *long long v7 = *v4;
        uint64_t v8 = v7 + 1;
      }
      *(void *)(a2 + 8) = v8;
      v4 += 2;
      long long v7 = v8;
    }
    while (v4 != v5);
  }
}

void sub_1001F6CA0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F6CC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1001F6D04()
{
}

void *sub_1001F6D10@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, double *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x98uLL);
  double result = sub_1001F6D84(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1001F6D70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1001F6D84(void *a1, uint64_t *a2, uint64_t a3, double *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10229EC88;
  sub_1001F6E9C((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1001F6DE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1001F6DFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10229EC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001F6E1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10229EC88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1001F6E70(uint64_t a1)
{
  sub_1001F70B8((uint64_t)&v1, a1 + 24);
}

void sub_1001F6E9C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double *a5)
{
  sub_1001F6F78((uint64_t)v10, a3);
  __n128 __p = 0uLL;
  uint64_t v9 = 0;
  sub_1001F703C(&__p, *(const void **)a4, *(void *)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
  sub_101090314(a2, v10, &__p, *a5);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_1001F6F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1001F6058((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F6F78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_10010F834((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 2);
  long long v5 = *(_OWORD *)(a2 + 5);
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  *(_OWORD *)(a1 + 40) = v5;
  char v6 = (unsigned char *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_1000DC48C(v6, (void *)a2[8], a2[9]);
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = a2[10];
    *(_OWORD *)char v6 = v7;
  }
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  return a1;
}

void sub_1001F7020(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1001F703C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    double result = sub_1000DA584(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1001F709C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F70B8(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(void *)(a2 + 104) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    *(void *)(a2 + 24) = v4;
    operator delete(v4);
  }
}

void *sub_1001F7120(void *a1)
{
  CFTypeID v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1001F71A4(void *a1, uint64_t a2)
{
  sub_1001F7228(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1001F7228(void *a1)
{
  CFTypeID v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_1001F72B0()
{
  CFTypeID v2 = *(NSObject **)(v0 + 1112);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

uint64_t sub_1001F72CC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, double *a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v73 = 0;
  uint64_t v74 = &v73;
  uint64_t v75 = 0x7812000000;
  uint64_t v76 = sub_100177870;
  uint64_t v77 = sub_1001772A0;
  uint64_t v78 = "";
  sub_10023DB14((uint64_t)v79);
  uint64_t v9 = v74;
  *((_DWORD *)v74 + 29) |= 0x20u;
  uint64_t v10 = v9[13];
  if (!v10) {
    operator new();
  }
  sub_10024D6B4(v10, a3);
  unint64_t v11 = v74;
  unsigned int v12 = [[objc_msgSend(a2, "status") intValue];
  *((_DWORD *)v11 + 29) |= 4u;
  *((_DWORD *)v11 + 17) = v12;
  unint64_t v13 = v74;
  char v14 = (const std::string::value_type *)[a2 track];
  *((_DWORD *)v13 + 29) |= 8u;
  double v15 = (std::string *)v13[9];
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::assign(v15, v14);
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472;
  v72[2] = sub_1001F7B18;
  v72[3] = &unk_10229ED20;
  v72[4] = &v73;
  [objc_msgSend(a2, "outputDeviceIDs") enumerateKeysAndObjectsUsingBlock:v72];
  memset(&v71, 0, sizeof(v71));
  uint64_t v16 = *((int *)v74 + 22);
  if (v16)
  {
    long long v17 = (uint64_t *)v74[10];
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17;
      std::to_string(&v67, *(_DWORD *)(*v17 + 8));
      uint64_t v20 = std::string::append(&v67, ",");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v66, *(_DWORD *)(v19 + 12));
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v22 = &v66;
      }
      else {
        long long v22 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v66.__r_.__value_.__l.__size_;
      }
      long long v24 = std::string::append(&v68, (const std::string::value_type *)v22, size);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      long long v26 = std::string::append(&v69, ",");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      uint64_t v28 = *(void *)(v19 + 16);
      int v29 = *(char *)(v28 + 23);
      if (v29 >= 0) {
        CFArrayRef v30 = *(const std::string::value_type **)(v19 + 16);
      }
      else {
        CFArrayRef v30 = *(const std::string::value_type **)v28;
      }
      if (v29 >= 0) {
        std::string::size_type v31 = *(unsigned __int8 *)(v28 + 23);
      }
      else {
        std::string::size_type v31 = *(void *)(v28 + 8);
      }
      long long v32 = std::string::append(&v70, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::string v34 = std::string::append(&v65, ";");
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (buf[23] >= 0) {
        uint64_t v36 = buf;
      }
      else {
        uint64_t v36 = *(const std::string::value_type **)buf;
      }
      if (buf[23] >= 0) {
        std::string::size_type v37 = buf[23];
      }
      else {
        std::string::size_type v37 = *(void *)&buf[8];
      }
      std::string::append(&v71, v36, v37);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229ED40);
  }
  double v38 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    int v39 = *((_DWORD *)v74 + 17);
    uint64_t v40 = (uint64_t *)v74[9];
    if (*((char *)v40 + 23) < 0) {
      uint64_t v40 = (uint64_t *)*v40;
    }
    unint64_t v41 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v41 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    *(void *)buf = 68289795;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v39;
    __int16 v81 = 2081;
    uint64_t v82 = v40;
    __int16 v83 = 2081;
    uint64_t v84 = v41;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Now Playing\", \"status\":%{public}d, \"track\":%{private, location:escape_only}s, \"outputDeviceIDs\":%{private, location:escape_only}s}", buf, 0x2Cu);
  }
  unint64_t v42 = v74;
  uint64_t v43 = v74[13];
  if (!v43) {
    uint64_t v43 = *(void *)(qword_102489A20 + 56);
  }
  int v44 = *(unsigned __int8 *)(v43 + 8);
  if (*(unsigned char *)(a1 + 72))
  {
    BOOL v45 = *(_DWORD *)(a1 + 20) != 1 && *((_DWORD *)v74 + 17) == 1;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&buf[16] = 0;
    *(void *)buf = &buf[8];
    uint64_t v48 = *(int *)(a1 + 40);
    if (v48)
    {
      uint64_t v49 = *(void *)(a1 + 32);
      uint64_t v50 = 8 * v48;
      do
      {
        sub_10010702C((uint64_t **)buf, *(const void ***)(*(void *)v49 + 16), *(void *)(*(void *)v49 + 16));
        v49 += 8;
        v50 -= 8;
      }
      while (v50);
      unint64_t v42 = v74;
    }
    *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
    uint64_t v51 = *((int *)v42 + 22);
    if (v51)
    {
      uint64_t v52 = v42[10];
      uint64_t v53 = 8 * v51;
      do
      {
        sub_10010702C((uint64_t **)&v65, *(const void ***)(*(void *)v52 + 16), *(void *)(*(void *)v52 + 16));
        v52 += 8;
        v53 -= 8;
      }
      while (v53);
      std::string::size_type v54 = v65.__r_.__value_.__r.__words[2];
    }
    else
    {
      std::string::size_type v54 = 0;
    }
    if (*(void *)&buf[16] == v54)
    {
      long long v55 = *(unsigned __int8 **)buf;
      if (*(unsigned char **)buf == &buf[8])
      {
        LOBYTE(v57) = 1;
      }
      else
      {
        std::string::size_type v56 = v65.__r_.__value_.__r.__words[0];
        do
        {
          int v57 = sub_100103744((uint64_t)&v70, v55 + 32, (unsigned __int8 *)(v56 + 32));
          if (!v57) {
            break;
          }
          long long v58 = (unsigned __int8 *)*((void *)v55 + 1);
          long long v59 = v55;
          if (v58)
          {
            do
            {
              long long v55 = v58;
              long long v58 = *(unsigned __int8 **)v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              long long v55 = (unsigned __int8 *)*((void *)v59 + 2);
              BOOL v46 = *(void *)v55 == (void)v59;
              long long v59 = v55;
            }
            while (!v46);
          }
          long long v60 = *(void **)(v56 + 8);
          if (v60)
          {
            do
            {
              uint64_t v61 = v60;
              long long v60 = (void *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              uint64_t v61 = *(void **)(v56 + 16);
              BOOL v46 = *v61 == v56;
              std::string::size_type v56 = (std::string::size_type)v61;
            }
            while (!v46);
          }
          std::string::size_type v56 = (std::string::size_type)v61;
        }
        while (v55 != &buf[8]);
      }
    }
    else
    {
      LOBYTE(v57) = 0;
    }
    sub_1000DB264((uint64_t)&v65, (char *)v65.__r_.__value_.__l.__size_);
    sub_1000DB264((uint64_t)buf, *(char **)&buf[8]);
    if (v44) {
      BOOL v62 = v45;
    }
    else {
      BOOL v62 = 0;
    }
    char v47 = v62 | v57 ^ 1;
    unint64_t v42 = v74;
  }
  else
  {
    if (*(unsigned char *)(v43 + 8)) {
      BOOL v46 = *((_DWORD *)v74 + 17) == 1;
    }
    else {
      BOOL v46 = 0;
    }
    char v47 = v46;
  }
  sub_1001F7D38(a1, (uint64_t)(v42 + 6));
  sub_1001F7D80((uint64_t)(v74 + 6), 0, 0, 3u, (uint64_t)&v65, *a4);
  buf[0] = v47;
  sub_1002660C8(&buf[8]);
  *a5 = buf[0];
  sub_1002660C8(a5 + 8);
  sub_10026633C(&buf[8]);
  sub_10026633C(&v65);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v73, 8);
  return sub_100255458(v79);
}

void sub_1001F79C0()
{
}

id sub_1001F7B18(uint64_t a1, uint64_t a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001F7B90;
  v5[3] = &unk_10229ECF8;
  uint64_t v3 = *(void *)(a1 + 32);
  v5[4] = a2;
  v5[5] = v3;
  return [a3 enumerateKeysAndObjectsUsingBlock:v5];
}

id sub_1001F7B90(uint64_t a1, uint64_t a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001F7C0C;
  v6[3] = &unk_10229ECD0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[5] = a2;
  v6[6] = v3;
  __n128 v6[4] = v4;
  return [a3 enumerateObjectsUsingBlock:v6];
}

std::string *sub_1001F7C0C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(int **)(*(void *)(a1 + 48) + 8);
  int v5 = v4[23];
  uint64_t v6 = v4[22];
  if ((int)v6 >= v5)
  {
    if (v5 == v4[24])
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v4 + 20), v5 + 1);
      int v5 = v4[23];
    }
    v4[23] = v5 + 1;
    sub_1001F7EA0();
  }
  uint64_t v7 = *((void *)v4 + 10);
  v4[22] = v6 + 1;
  uint64_t v8 = *(void *)(v7 + 8 * v6);
  unsigned int v9 = [*(id *)(a1 + 32) intValue];
  *(_DWORD *)(v8 + 28) |= 1u;
  *(_DWORD *)(v8 + 8) = v9;
  unsigned int v10 = [*(id *)(a1 + 40) intValue];
  *(_DWORD *)(v8 + 28) |= 2u;
  *(_DWORD *)(v8 + 12) = v10;
  unint64_t v11 = (const std::string::value_type *)[a2 UTF8String];
  *(_DWORD *)(v8 + 28) |= 4u;
  unsigned int v12 = *(std::string **)(v8 + 16);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }

  return std::string::assign(v12, v11);
}

uint64_t sub_1001F7D38(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    sub_100255F34(a1, a2);
  }
  else
  {
    sub_1002552F8(a1, a2);
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_1001F7D80(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  sub_10023DFC0(a5);
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  if (!sub_10023E774(v12))
  {
    char v14 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v15 = 19803;
    uint64_t v16 = "set_eventtype";
    goto LABEL_6;
  }
  int v13 = *(_DWORD *)(a5 + 128);
  *(_DWORD *)(a5 + 72) = v12;
  *(double *)(a5 + 8) = a6;
  *(unsigned char *)(a5 + 77) = a2;
  *(_DWORD *)(a5 + 128) = v13 | 0x2803;
  *(unsigned char *)(a5 + 76) = a3;
  if ((sub_10023E744(a4) & 1) == 0)
  {
    char v14 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v15 = 20312;
    uint64_t v16 = "set_confidencelevel";
LABEL_6:
    __assert_rtn(v16, "microlocation.pb.h", v15, v14);
  }
  *(_DWORD *)(a5 + 128) |= 0x4000u;
  *(_DWORD *)(a5 + 120) = a4;
  sub_1002E6914(a5, a1);
}

void sub_1001F7E68(_Unwind_Exception *a1)
{
  sub_10026633C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F7E7C(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    double result = sub_100255458(result);
    *(unsigned char *)(result + 72) = 0;
  }
  return result;
}

void sub_1001F7EA0()
{
}

void sub_1001F7EE0()
{
}

void sub_1001F7F04(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1001F7F34(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_1001F7F94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_1001F8044(a2, 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a2;
  while (v5 != v6)
  {
    uint64_t result = sub_1001F8104(v5);
    if (result) {
      uint64_t result = (uint64_t)sub_1001F8C34(&v7, v5);
    }
    v5 += 88;
  }
  return result;
}

void sub_1001F8028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F8044(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1000DA8B4(result, a2);
    v7[1] = v7[0] + v5;
    _DWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    sub_1001F89D8(a1, v7);
    return sub_1001F8BA4((uint64_t)v7);
  }
  return result;
}

void sub_1001F80F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F8BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1001F8104(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 68);
  if ((v2 & 0x9000) != 0)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229ED60);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      sub_100B39278(&__p);
      uint64_t v4 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      int v5 = *(_DWORD *)(a1 + 32);
      int v6 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)buf = 68290307;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 1026;
      int v16 = (v2 >> 12) & 1;
      __int16 v17 = 1026;
      int v18 = (v2 >> 15) & 1;
      __int16 v19 = 2081;
      uint64_t v20 = v4;
      __int16 v21 = 1026;
      int v22 = v5;
      __int16 v23 = 1026;
      int v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received low confidence rssi AP\", \"is invalid?\":%{public}hhd, \"is off channel?\":%{public}hhd, \"mac address\":%{private, location:escape_only}s, \"RSSI\":%{public}d, \"channel\":%{public}d}", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  BOOL v7 = sub_100D550A4(*(_DWORD *)(a1 + 40));
  BOOL v8 = *(int *)(a1 + 32) < 0 && v7;
  if (*(int *)(a1 + 40) <= 0) {
    BOOL v8 = 0;
  }
  return !*(unsigned char *)(a1 + 64) && v8;
}

uint64_t sub_1001F82A4(double *a1, uint64_t a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v4 = 0;
  switch(*(_DWORD *)(a2 + 64))
  {
    case 1:
      uint64_t v5 = *(void *)(a2 + 16);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_102489958 + 16);
      }
      goto LABEL_8;
    case 3:
      uint64_t v5 = *(void *)(a2 + 32);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_102489958 + 32);
      }
      goto LABEL_8;
    case 4:
      uint64_t v5 = *(void *)(a2 + 40);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_102489958 + 40);
      }
LABEL_8:
      uint64_t v4 = *a3 >= *a1 - *(double *)(v5 + 8) && (int)*(float *)(v5 + 20) < 0;
      break;
    case 5:
      uint64_t v8 = *(void *)(a2 + 48);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_102489958 + 48);
      }
      double v9 = *a1;
      double v10 = *a3;
      float v11 = *(float *)(v8 + 20);
      int v12 = *(long long **)(v8 + 40);
      if (*((char *)v12 + 23) < 0)
      {
        sub_1000DC48C(buf, *(void **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v13 = *v12;
        *(void *)&buf[16] = *((void *)v12 + 2);
        *(_OWORD *)buf = v13;
      }
      BOOL v17 = sub_1001F8820((uint64_t)buf, a4);
      double v18 = *(double *)(v8 + 8);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      BOOL v19 = v11 >= -100.0;
      if (v11 > -10.0) {
        BOOL v19 = 0;
      }
      unsigned int v20 = v17 && v19;
      if (v10 >= v9 - v18) {
        uint64_t v4 = v20;
      }
      else {
        uint64_t v4 = 0;
      }
      break;
    case 6:
      uint64_t v14 = *(void *)(a2 + 56);
      if (!v14) {
        uint64_t v14 = *(void *)(qword_102489958 + 56);
      }
      sub_1002406A8(v23, v14);
      BOOL v15 = v24 > 0.0;
      if (v24 == NINearbyObjectDistanceNotAvailable) {
        BOOL v15 = 0;
      }
      uint64_t v4 = v25 == 2 && v15;
      if ((v4 & 1) == 0)
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229ED60);
        }
        int v16 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          *(double *)&uint8_t buf[4] = v24;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Bad uwb range, range %{public}.2f, type %{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229ED60);
          }
          int v26 = 134349312;
          double v27 = v24;
          __int16 v28 = 1026;
          int v29 = v25;
          int v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::isGoodUwbRange(CLMicroLocationProto::UwbRange)", "%s\n", v22);
          if (v22 != buf) {
            free(v22);
          }
        }
      }
      sub_100240760((wireless_diagnostics::google::protobuf::MessageLite *)v23);
      break;
    default:
      return v4;
  }
  return v4;
}

void sub_1001F863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t sub_1001F8688(double *a1, uint64_t *a2, double *a3, std::locale::__imp **a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    goto LABEL_13;
  }
  uint64_t v10 = a2[1];
  while (sub_1001F82A4(a1, v5, a3, a4))
  {
    v5 += 80;
    if (v5 == v6) {
      goto LABEL_14;
    }
  }
  if (v5 != v6)
  {
    uint64_t v11 = v5 + 80;
    if (v5 + 80 != v6)
    {
      uint64_t v10 = v5;
      do
      {
        if (sub_1001F82A4(a1, v11, a3, a4))
        {
          sub_1002442C8(v10, v11);
          v10 += 80;
        }
        v11 += 80;
      }
      while (v11 != v6);
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v10 = v5;
  }
LABEL_14:
  uint64_t v12 = a2[1];

  return sub_1001F8774((uint64_t)a2, v10, v12);
}

uint64_t sub_1001F8774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_1001F8E80(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    BOOL v7 = *(void (****)(void))(a1 + 8);
    if (v7 != v5)
    {
      uint64_t v8 = v7 - 10;
      double v9 = v7 - 10;
      uint64_t v10 = v7 - 10;
      do
      {
        uint64_t v11 = *v10;
        v10 -= 10;
        (*v11)(v9);
        v8 -= 10;
        BOOL v12 = v9 == v6;
        double v9 = v10;
      }
      while (!v12);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

BOOL sub_1001F8820(uint64_t a1, std::locale::__imp **a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  do
  {
    std::locale::locale(&v9);
    uint64_t v5 = sub_1001F88C0(a1, v2, &v9);
    uint64_t v7 = v6;
    std::locale::~locale(&v9);
    BOOL result = v5 != v7;
    if (v5 != v7) {
      break;
    }
    unsigned int v2 = (std::locale::__imp *)((char *)v2 + 24);
  }
  while (v2 != v3);
  return result;
}

void sub_1001F88AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_1001F88C0(uint64_t a1, std::locale::__imp *a2, std::locale *a3)
{
  std::locale::locale(&v15, a3);
  LODWORD(v5) = *((char *)a2 + 23);
  BOOL v6 = (int)v5 < 0;
  uint64_t v7 = *((void *)a2 + 1);
  if ((int)v5 < 0) {
    a2 = *(std::locale::__imp **)a2;
  }
  uint64_t v5 = v5;
  if (v6) {
    uint64_t v5 = v7;
  }
  uint64_t v8 = (std::locale::__imp *)((char *)a2 + v5);
  std::locale::locale(&v18, &v15);
  v16[0].__locale_ = a2;
  v16[1].__locale_ = v8;
  std::locale::locale(&v17, &v18);
  std::locale::~locale(&v18);
  int v9 = *(char *)(a1 + 23);
  BOOL v10 = v9 < 0;
  if (v9 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  if (v10) {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  uint64_t v13 = sub_1001F8EE0(v16, v11, v11 + v12);
  std::locale::~locale(&v17);
  std::locale::~locale(&v15);
  return v13;
}

void sub_1001F898C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_1001F89A8(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1001F89D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1001F8A50((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1001F8A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  std::locale v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 88) = *(void *)(a3 + v7 - 88);
      long long v10 = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 80) = 0;
      long long v11 = *(_OWORD *)(a3 + v7 - 56);
      long long v12 = *(_OWORD *)(a3 + v7 - 40);
      long long v13 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v13;
      *(_OWORD *)(v8 - 40) = v12;
      *(_OWORD *)(v8 - 56) = v11;
      v7 -= 88;
    }
    while (a3 + v7 != a5);
    *((void *)&v19 + 1) = a7 + v7;
    uint64_t v14 = v19;
  }
  char v17 = 1;
  sub_1001F8B24((uint64_t)v16);
  return v14;
}

uint64_t sub_1001F8B24(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001F8B5C(a1);
  }
  return a1;
}

void sub_1001F8B5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 88;
  }
}

uint64_t sub_1001F8BA4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1001F8BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 88;
      *(void *)(a1 + 16) = v2 - 88;
      if (*(char *)(v2 - 57) < 0)
      {
        operator delete(*(void **)(v2 - 80));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t **sub_1001F8C34(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = sub_1001F8D14(v6, a2);
  }
  else
  {
    sub_1001F8C88((uint64_t)v6, a2);
    uint64_t v7 = v5 + 88;
  }
  v3[1] = v7;
  return a1;
}

__n128 sub_1001F8C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  unint64_t v5 = (unsigned char *)(v4 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)unint64_t v5 = v6;
  }
  __n128 result = *(__n128 *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 64);
  *(void *)(v4 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(v4 + 48) = v8;
  *(_OWORD *)(v4 + 64) = v9;
  *(__n128 *)(v4 + 32) = result;
  *(void *)(a1 + 8) = v4 + 88;
  return result;
}

void sub_1001F8D0C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1001F8D14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v23 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1000DA8B4(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[88 * v4];
  v20[0] = v10;
  v20[1] = v11;
  __int16 v21 = v11;
  int v22 = &v10[88 * v9];
  *(void *)long long v11 = *(void *)a2;
  long long v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C(v12, *(void **)(a2 + 8), *(void *)(a2 + 16));
    long long v11 = v21;
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)long long v12 = v13;
  }
  uint64_t v14 = &v10[88 * v4];
  long long v16 = *(_OWORD *)(a2 + 48);
  long long v15 = *(_OWORD *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 80);
  *((_OWORD *)v14 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v14 + 3) = v16;
  *((void *)v14 + 10) = v17;
  *((_OWORD *)v14 + 4) = v15;
  __int16 v21 = v11 + 88;
  sub_1001F89D8(a1, v20);
  uint64_t v18 = a1[1];
  sub_1001F8BA4((uint64_t)v20);
  return v18;
}

void sub_1001F8E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F8BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001F8E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1002442C8(a3, v4);
      v4 += 80;
      a3 += 80;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1001F8EE0(const std::locale *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    long long v6 = a1 + 2;
    locale = a1[1].__locale_;
    do
    {
      unint64_t v8 = a1->__locale_;
      if (a1->__locale_ == locale) {
        break;
      }
      uint64_t v9 = 0;
      long long v10 = a1->__locale_;
      uint64_t v11 = v3;
      while ((char *)v8 + v9 != (char *)a1[1].__locale_)
      {
        if (!sub_1001F8FC4(v6, (char *)(v3 + v9), (char *)v8 + v9)) {
          goto LABEL_10;
        }
        ++v11;
        long long v10 = (std::locale::__imp *)((char *)v10 + 1);
        ++v9;
        if (v3 + v9 == a3)
        {
          long long v10 = (std::locale::__imp *)((char *)v8 + v9);
          goto LABEL_10;
        }
      }
      long long v10 = (std::locale::__imp *)((char *)v8 + v9);
LABEL_10:
      locale = a1[1].__locale_;
      if (v10 == locale) {
        return v3;
      }
      ++v3;
    }
    while (v3 != a3);
    return a3;
  }
  return v3;
}

BOOL sub_1001F8FC4(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5 = *a2;
  long long v6 = std::locale::use_facet(a1, &std::ctype<char>::id);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[1].~facet)(v6, v5);
  uint64_t v7 = *a3;
  unint64_t v8 = std::locale::use_facet(a1, &std::ctype<char>::id);
  return v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v8->__vftable[1].~facet)(v8, v7);
}

void sub_1001F9070(char **a1@<X8>)
{
  sub_100134750(&v4, "MicroLocationMeasurements");
  sub_100134750(v5, "MicroLocationRecordingEvents");
  sub_100134750(v6, "MicroLocationModels");
  sub_100134750(v7, "MicroLocationConfiguration");
  sub_100134750(v8, "MicroLocationRapport");
  sub_100134750(v9, "MicroLocationLabels");
  sub_100134750(v10, "MicroLocationLoggedEvents");
  sub_100134750(v11, "MiLoServices");
  sub_100134750(v12, "MicroLocationAssociatedState");
  sub_100134750(v13, "MiLoLoiTable");
  sub_100134750(v14, "MicroLocationBluetoothIdentityTable");
  sub_100134750(v15, "MiLoCustomLoiTable");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = (char *)operator new(0x120uLL);
  *a1 = v2;
  a1[1] = v2;
  a1[2] = v2 + 288;
  a1[1] = sub_1000DC3CC((uint64_t)(a1 + 2), &v4, &v16, v2);
  uint64_t v3 = 36;
  do
  {
    if (*((char *)&v5[v3 - 1] - 1) < 0) {
      operator delete((void *)v5[v3 - 4]);
    }
    v3 -= 3;
  }
  while (v3 * 8);
}

void sub_1001F9234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  sub_1000A7B4C(&a10);
  uint64_t v15 = 288;
  while (1)
  {
    if (*(&a12 + v15 - 1) < 0) {
      operator delete(*(void **)(&a12 + v15 - 24));
    }
    v15 -= 24;
    if (!v15) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_1001F92A8(uint64_t a1, long long *a2, int a3)
{
  long long v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 1;
  uint64_t v7 = a1 + 24;
  *(_WORD *)(a1 + 32) = 256;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)a1;
    *(void *)(a1 + 56) = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 64) = 0;
  sub_1005F54CC(a1 + 72, v7);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  if (a3 != 2 && !v8)
  {
    sub_101A51BF8();
    abort_report_np();
    __break(1u);
LABEL_16:
    dispatch_once(&qword_102419450, &stru_10229EDB0);
    goto LABEL_11;
  }
  sub_1001F9708(a1);
  if (sub_10014C3C0(a1 + 72)) {
    return a1;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_102419450 != -1) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v9 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Failed to connect to database", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[138] != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMicroLocationDatabase::CLMicroLocationDatabase(std::string, CLSqliteDatabase::SqlitePropertyProtection)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return a1;
}

void sub_1001F9534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  uint64_t v16 = *(void *)(v12 + 296);
  *(void *)(v12 + 296) = 0;
  if (v16) {
    operator delete();
  }
  uint64_t v17 = *(void *)(v12 + 288);
  *(void *)(v12 + 288) = 0;
  if (v17) {
    operator delete();
  }
  uint64_t v18 = *(void *)(v12 + 280);
  *(void *)(v12 + 280) = 0;
  if (v18) {
    operator delete();
  }
  uint64_t v19 = *(void *)(v12 + 272);
  *(void *)(v12 + 272) = 0;
  if (v19) {
    operator delete();
  }
  uint64_t v20 = *(void *)(v12 + 264);
  *(void *)(v12 + 264) = 0;
  if (v20) {
    operator delete();
  }
  uint64_t v21 = *(void *)(v12 + 256);
  *(void *)(v12 + 256) = 0;
  if (v21) {
    operator delete();
  }
  uint64_t v22 = *(void *)(v12 + 248);
  *(void *)(v12 + 248) = 0;
  if (v22) {
    operator delete();
  }
  uint64_t v23 = *(void *)(v12 + 240);
  *(void *)(v12 + 240) = 0;
  if (v23) {
    operator delete();
  }
  uint64_t v24 = *(void *)(v12 + 232);
  *(void *)(v12 + 232) = 0;
  if (v24) {
    operator delete();
  }
  uint64_t v25 = *(void *)(v12 + 224);
  *(void *)(v12 + 224) = 0;
  if (v25) {
    operator delete();
  }
  uint64_t v26 = *(void *)(v12 + 216);
  *(void *)(v12 + 216) = 0;
  if (v26) {
    operator delete();
  }
  uint64_t v27 = *v15;
  *uint64_t v15 = 0;
  if (v27) {
    operator delete();
  }
  sub_1005F5850(v14);
  if (*(char *)(v12 + 63) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1001F9708(uint64_t a1)
{
  BOOL result = sub_10014C3C0(a1 + 72);
  if (result) {
    operator new();
  }
  return result;
}

void sub_1001F9A8C()
{
}

uint64_t sub_1001F9AE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v6) {
    operator delete();
  }
  uint64_t v7 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v7) {
    operator delete();
  }
  uint64_t v8 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v8) {
    operator delete();
  }
  uint64_t v9 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v9) {
    operator delete();
  }
  uint64_t v10 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v10) {
    operator delete();
  }
  uint64_t v11 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v11) {
    operator delete();
  }
  uint64_t v12 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v12) {
    operator delete();
  }
  uint64_t v13 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v13) {
    operator delete();
  }
  sub_1005F5850(a1 + 72);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1001F9CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 72;
  if (!sub_10014C3C0(a1 + 72))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"openTransaction";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to call %s without a backing database", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v7 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSqliteTransaction CLMicroLocationDatabase::openTransaction()", "%s\n", (const char *)v7);
      if (v7 != buf) {
        free(v7);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100134750(buf, "No valid connection to microlocation database.");
    std::runtime_error::runtime_error(exception, buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10229EDE0;
  }

  return sub_1001B0D0C(v3, a2);
}

void sub_1001F9EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1001F9F3C(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"dropping MiLo database tables\"}", buf, 0x12u);
    }
    sub_100603138(v2, "MicroLocationMeasurements");
    sub_100603138(v2, "MicroLocationRecordingEvents");
    sub_100603138(v2, "MicroLocationModels");
    sub_100603138(v2, "MicroLocationConfiguration");
    sub_100603138(v2, "MicroLocationRapport");
    sub_100603138(v2, "MicroLocationLabels");
    sub_100603138(v2, "MicroLocationLoggedEvents");
    sub_100134750(buf, "milo-internal-legacy-client-name-unsupervised");
    sub_100134750(v14, "focus-mode");
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    v9[0] = 0;
    v9[2] = &v7;
    char v10 = 0;
    uint64_t v7 = (char *)operator new(0x30uLL);
    uint64_t v8 = v7;
    v9[0] = v7 + 48;
    uint64_t v4 = 0;
    uint64_t v8 = sub_1000DC3CC((uint64_t)v9, (long long *)buf, v15, v7);
    do
    {
      if (SHIBYTE(v14[v4 + 2]) < 0) {
        operator delete((void *)v14[v4]);
      }
      v4 -= 3;
    }
    while (v4 != -6);
    sub_100204BB4(a1, (uint64_t (*)(void *, uint64_t))sub_1002E00F0, 0, (uint64_t)&v7);
    sub_100603138(v2, "MicroLocationAssociatedState");
    sub_100603138(v2, "MicroLocationBluetoothIdentityTable");
    sub_1001F9708(a1);
    *(void *)buf = &v7;
    sub_1000A7B4C((void ***)buf);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to drop tables without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LOWORD(v7) = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationDatabase::dropTables()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1001FA2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1000A7B4C(&a15);
  uint64_t v29 = 0;
  while (1)
  {
    if (*(&a28 + v29) < 0) {
      operator delete(*(void **)((char *)&a23 + v29));
    }
    v29 -= 24;
    if (v29 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_1001FA340(uint64_t a1, const std::string::value_type *a2)
{
  *((unsigned char *)&v11.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&v11, "SELECT COUNT(*) FROM ");
  uint64_t v4 = std::string::append(&v11, a2);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v10 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = a1 + 72;
  if (sub_1005F93E4(v6, a2))
  {
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    sub_10014D518(v6, (uint64_t)v7);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1001FA5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FA654(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v3 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    if (sub_1005F93E4(v3, a2))
    {
      *((unsigned char *)&v23.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v23, "SELECT ");
      uint64_t v4 = std::string::append(&v23, "Count");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      uint64_t v6 = std::string::append(&v24, " FROM ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      uint64_t v8 = std::string::append(&v25, a2);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      int64_t v10 = std::string::append(&v26, "Counts");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __int16 v12 = std::string::append(&v29, " WHERE rowid=");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v22, 1);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v22;
      }
      else {
        uint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v22.__r_.__value_.__l.__size_;
      }
      uint64_t v16 = std::string::append(&v30, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      int64_t v28 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (v28 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      sub_10014D518(v3, (uint64_t)v18);
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    int v19 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to call numEntriesFromTriggerTable without a backing database", (uint8_t *)&v30, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v30, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      uint64_t v21 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable(const char *const)", "%s\n", (const char *)v21);
      if (v21 != &v30) {
        free(v21);
      }
    }
  }
  return 0;
}

void sub_1001FAD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  if (a49 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FAE40(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 9);
  if (sub_10014C3C0((uint64_t)(a1 + 9)))
  {
    v29[0] = a2;
    v29[1] = (uint64_t)a1;
    sub_1001F9CB0((uint64_t)a1, (uint64_t)buf);
    if (a1[27]) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A4F0);
    }
    if (a1[29]) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A508);
    }
    uint64_t v7 = a1[28];
    BOOL v8 = v7 == 0;
    if (v7) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A520);
    }
    uint64_t v9 = a1[26];
    if (v9) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v8;
    }
    if (v9 && v8) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A538);
    }
    uint64_t v11 = a1[32];
    if (v11) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v10;
    }
    if (v11 && v10) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A550);
    }
    uint64_t v13 = a1[30];
    if (v13) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v12;
    }
    if (v13 && v12) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A568);
    }
    uint64_t v15 = a1[31];
    if (v15) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v14;
    }
    if (v15 && v14) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A580);
    }
    uint64_t v17 = a1[33];
    if (v17) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = v16;
    }
    if (v17 && v16) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A598);
    }
    uint64_t v19 = a1[34];
    if (v19) {
      unsigned int v20 = 0;
    }
    else {
      unsigned int v20 = v18;
    }
    if (v19 && v18) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A5B0);
    }
    uint64_t v21 = a1[35];
    if (v21) {
      unsigned int v22 = 0;
    }
    else {
      unsigned int v22 = v20;
    }
    if (v21 && v20) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A5C8);
    }
    uint64_t v23 = a1[36];
    if (v23) {
      unsigned int v24 = 0;
    }
    else {
      unsigned int v24 = v22;
    }
    if (v23 && v22) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A5E0);
    }
    uint64_t v25 = a1[37];
    if (v25) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v24;
    }
    if (v25 && v24) {
      sub_1001FB5F0(v29, (uint64_t)&xmmword_10247A5F8);
    }
    if ((uint64_t)a1[20] <= 0) {
      uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v26 = a1[20];
    }
    sub_10003CC68(v4, v26);
    sub_1001A8894(buf);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    long long v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to deleteDataOlderThan without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LOWORD(v29[0]) = 0;
      int64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    return 0;
  }
  return v6;
}

#error "1001FB56C: call analysis failed (funcsize=203)"

void sub_1001FB5F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  j__CFAbsoluteTimeGetCurrent_5();
  j__CFAbsoluteTimeGetCurrent_5();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  long long v5 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = (double)*a1 / 1440.0;
    *(_DWORD *)buf = 134217984;
    *(double *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Deleting microlocation data older than %.3Lf days", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes, std::optional<std::chrono::minutes>)::(anonymous class)::operator()(const std::string &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  sub_10014D518(v4 + 72, v7);
}

void sub_1001FBB3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FBB84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    j__CFAbsoluteTimeGetCurrent_5();
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    double v4 = (double)a2;
    long long v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      int buf = 134217984;
      double buf_4 = v4 / 1440.0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Deleting similarity list labels older than %.3Lf days", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)", "%s\n", v9);
      if (v9 != (char *)&buf) {
        free(v9);
      }
    }
    if (byte_10247A66F >= 0) {
      double v6 = &xmmword_10247A658;
    }
    else {
      double v6 = (long long *)xmmword_10247A658;
    }
    sub_10014D518(v3, (uint64_t)v6);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  uint64_t v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to purgeSimilarityListLabels without a backing database", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::purgeSimilarityListLabels(std::chrono::minutes)", "%s\n", v10);
    if (v10 != (char *)&buf) {
      free(v10);
    }
  }
  return 0;
}

void sub_1001FC1E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001FC230(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 224);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = sub_10033C3E4(v7, a2, a3);
    if (*(uint64_t *)(a1 + 160) <= 0) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 160);
    }
    sub_10003CC68(v6, v9);
    return v8;
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v11 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to deleteUnneededModels without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      BOOL v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::deleteUnneededModels(uint32_t, uint32_t)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
}

void sub_1001FC47C()
{
}

void sub_1001FC4A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_1001FC52C();
  sub_1001FC5DC(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002ABBB4, 0, a2, a3, a4, &v10, a5);
}

uint64_t sub_1001FC52C()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsDatabaseSelectionLimit", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 5000;
  }
}

void sub_1001FC5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FC5DC(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v15 = *(void *)(a1 + 216);
    if (!v15) {
      operator new();
    }
    BOOL v16 = (void *)(v15 + (a3 >> 1));
    if (a3) {
      uint64_t v17 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v16 + a2);
    }
    else {
      uint64_t v17 = a2;
    }
    uint64_t v19 = *a7;
    v17(v16, a4, a5, a6, v19);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unsigned int v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uu"
            "ids::uuid &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, co"
            "nst std::string &, const std::string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unsigned int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const boost::uuids::uuid &, const std::string &, const std::string &, unsigned int), Args = <const boost::uuids::uuid &, const std::string &, const std::string &, unsigned int &>]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_1001FC8A8()
{
}

void sub_1001FC8D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  v11[0] = a3;
  v11[1] = a4;
  double v10 = a6;
  unsigned int v9 = sub_1001FC52C();
  sub_1001FCA1C(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1001E54BC, 0, a2, v11, &v9, (unint64_t *)&v10, a5);
}

void sub_1001FC998(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, void *a6@<X8>, double a7@<D0>)
{
  v9[0] = a3;
  v9[1] = a4;
  double v8 = a7;
  unsigned int v7 = a5;
  sub_1001FCA1C(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1001E54BC, 0, a2, v9, &v7, (unint64_t *)&v8, a6);
}

void sub_1001FCA1C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t, __n128)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unsigned int *a6@<X5>, unint64_t *a7@<X6>, void *a8@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v16 = *(void *)(a1 + 240);
    if (!v16) {
      operator new();
    }
    uint64_t v17 = (void *)(v16 + (a3 >> 1));
    if (a3) {
      unsigned int v18 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*v17 + a2);
    }
    else {
      unsigned int v18 = a2;
    }
    uint64_t v20 = *a5;
    uint64_t v21 = a5[1];
    uint64_t v22 = *a6;
    v15.n128_u64[0] = *a7;
    v18(v17, a4, v20, v21, v22, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v19 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock,"
            " std::chrono::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, st"
            "d::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(const std::string &, boost::uuids::uuid, unsigned int, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>>), Args = <const std::string &, boost::uuids::uuid &, unsigned int &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_1001FCCE8()
{
}

void sub_1001FCD14(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 240);
    if (!v11) {
      operator new();
    }
    BOOL v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    BOOL v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(con"
            "st std::string &, unsigned int), Args = <const std::string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = std::vector<CLMicroLocationRecordingLabelsTable::Entry> (CLMicroLocationRecordingLabelsTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_1001FCFC4()
{
}

uint64_t sub_1001FCFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    *(_DWORD *)int buf = sub_1001FC52C();
    sub_1001FCD14(a1, (void (*)(void *, uint64_t, uint64_t))sub_1001E5068, 0, a2, (unsigned int *)buf, v21);
    unsigned int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::string __p = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v5 = (_OWORD *)v21[0];
    uint64_t v6 = (_OWORD *)v21[1];
    v14[0] = &v18;
    while (v5 != v6)
    {
      *(_OWORD *)int buf = *v5;
      sub_10020D800(v14, buf);
      v5 += 4;
    }
    *(_DWORD *)int buf = sub_1001FC52C();
    sub_100200148(a1, (void (*)(void *, uint64_t, uint64_t))sub_10032A7AC, 0, (uint64_t)&v18, (unsigned int *)buf, v14);
    double v10 = v14[0];
    uint64_t v11 = v14[1];
    *(void *)&long long __dst = &__p;
    while (v10 != v11)
    {
      *(_OWORD *)int buf = *(_OWORD *)v10;
      sub_10020D800((void ***)&__dst, buf);
      v10 += 30;
    }
    sub_1001F9CB0(a1, (uint64_t)buf);
    if (sub_1001FD930(a1, (uint64_t (*)(void *, uint64_t))sub_1002AD638, 0, (uint64_t)&__p)
      && sub_1001FDBC8(a1, (uint64_t (*)(void *, uint64_t))sub_10032BBE4, 0, (uint64_t)&__p))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1000DC48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long __dst = *(_OWORD *)a2;
        uint64_t v28 = *(void *)(a2 + 16);
      }
      *((void *)&v29 + 1) = 0;
      std::string v30 = 0;
      uint64_t v31 = 0;
      uint64_t v22 = (void **)&v29 + 1;
      char v23 = 0;
      *((void *)&v29 + 1) = operator new(0x18uLL);
      std::string v30 = (char *)*((void *)&v29 + 1);
      uint64_t v31 = *((void *)&v29 + 1) + 24;
      std::string v30 = sub_1000DC3CC((uint64_t)&v31, &__dst, &v29, *((char **)&v29 + 1));
      uint64_t v8 = sub_1001FDE60(a1, (uint64_t (*)(void *, uint64_t))sub_1001E669C, 0, (uint64_t)&v29 + 8);
      uint64_t v22 = (void **)&v29 + 1;
      sub_1000A7B4C(&v22);
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)__dst);
      }
      if (v8)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1000DC48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          long long __dst = *(_OWORD *)a2;
          uint64_t v28 = *(void *)(a2 + 16);
        }
        *((void *)&v29 + 1) = 0;
        std::string v30 = 0;
        uint64_t v31 = 0;
        uint64_t v22 = (void **)&v29 + 1;
        char v23 = 0;
        *((void *)&v29 + 1) = operator new(0x18uLL);
        std::string v30 = (char *)*((void *)&v29 + 1);
        uint64_t v31 = *((void *)&v29 + 1) + 24;
        std::string v30 = sub_1000DC3CC((uint64_t)&v31, &__dst, &v29, *((char **)&v29 + 1));
        uint64_t v8 = sub_1001FE0F8(a1, (uint64_t (*)(void *, uint64_t))sub_10033EF3C, 0, (uint64_t)&v29 + 8);
        uint64_t v22 = (void **)&v29 + 1;
        sub_1000A7B4C(&v22);
        if (SHIBYTE(v28) < 0) {
          operator delete((void *)__dst);
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (*(uint64_t *)(a1 + 160) <= 0) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = *(void *)(a1 + 160);
    }
    sub_10003CC68(v4, v12);
    sub_1001A8894(buf);
    *(void *)int buf = v14;
    sub_1001EF794((void ***)buf);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
    *(void *)int buf = v21;
    sub_1001E7FBC((void ***)buf);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unsigned int v7 = qword_102419458;
    uint64_t v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        unsigned int v9 = (void *)a2;
      }
      else {
        unsigned int v9 = *(void **)a2;
      }
      *(_DWORD *)int buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v25 = 2081;
      uint64_t v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Attempt to purge data for client without a backing database\", \"clientId\":%{private, location:escape_only}s}", buf, 0x1Cu);
      return 0;
    }
  }
  return v8;
}

#error "1001FD7F0: call analysis failed (funcsize=224)"

void sub_1001FD8C4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_1001FC52C();
  sub_100200148(a1, (void (*)(void *, uint64_t, uint64_t))sub_10032A7AC, 0, a2, &v6, a3);
}

uint64_t sub_1001FD930(uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 216);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = (void *)(v7 + (a3 >> 1));
    if (a3) {
      unsigned int v9 = *(uint64_t (**)(void *, uint64_t))(*v8 + a2);
    }
    else {
      unsigned int v9 = a2;
    }
    return v9(v8, a4);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    double v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = BOOL (CLMicroLocationMeasurementTable::*)(const std::vector<boost::uuids::uuid> &), Args = <std::vector<boost::uuids::uuid> &>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
}

void sub_1001FDB9C()
{
}

uint64_t sub_1001FDBC8(uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 232);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = (void *)(v7 + (a3 >> 1));
    if (a3) {
      unsigned int v9 = *(uint64_t (**)(void *, uint64_t))(*v8 + a2);
    }
    else {
      unsigned int v9 = a2;
    }
    return v9(v8, a4);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    double v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = BOOL (CLMicroLocationRecordingEventsTable::*)(const std::vector<boost::uuids::uuid> &), Args = <std::vector<boost::uuids::uuid> &>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
}

void sub_1001FDE34()
{
}

uint64_t sub_1001FDE60(uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 240);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = (void *)(v7 + (a3 >> 1));
    if (a3) {
      unsigned int v9 = *(uint64_t (**)(void *, uint64_t))(*v8 + a2);
    }
    else {
      unsigned int v9 = a2;
    }
    return v9(v8, a4);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    double v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = BOOL (CLMicroLocationRecordingLabelsTable::*)(const std::vector<std::string> &), Args = <std::vector<std::string>>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
}

void sub_1001FE0CC()
{
}

uint64_t sub_1001FE0F8(uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 224);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = (void *)(v7 + (a3 >> 1));
    if (a3) {
      unsigned int v9 = *(uint64_t (**)(void *, uint64_t))(*v8 + a2);
    }
    else {
      unsigned int v9 = a2;
    }
    return v9(v8, a4);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    double v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to delete entries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::updateEntries(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = BOOL (CLMicroLocationModelTable::*)(const std::vector<std::string> &), Args = <std::vector<std::string>>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
}

void sub_1001FE364()
{
}

void sub_1001FE390(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = sub_1001FC52C();
  sub_1001FE3EC(a1, (void (*)(void *, uint64_t))sub_1001E4810, 0, &v4, a2);
}

void sub_1001FE3EC(uint64_t a1@<X0>, void (*a2)(void *, uint64_t)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 240);
    if (!v9) {
      operator new();
    }
    double v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(void (**)(void *, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    uint64_t v13 = *a4;
    v11(v10, v13);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, Mem"
            "berFn = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingLabelsTable, MemberFn = std::vector<std::string> (CLMicroLocationRecordingLabelsTable::*), Args = <unsigned int &>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_1001FE694()
{
}

void sub_1001FE6C0(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  v6[0] = a3;
  v6[1] = a4;
  unsigned int v5 = a2;
  sub_1001FE734(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_10033AC58, 0, &v5, v6, a5);
}

void sub_1001FE734(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X4>, unsigned char *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 224);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a4;
    uint64_t v16 = *a5;
    uint64_t v17 = a5[1];
    v13(v12, v15, v16, v17);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    BOOL v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unsigned int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_ModelType, boost::uuids::uuid), Args = <CLMicroLocationProto::Model_ModelType &, boost::uuids::uuid &>]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    *a6 = 0;
    a6[280] = 0;
  }
}

void sub_1001FE9E4()
{
}

void sub_1001FEA10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  v5[0] = a3;
  v5[1] = a4;
  sub_1001FEA84(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_10033AE10, 0, a2, v5, a5);
}

void sub_1001FEA84(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unsigned char *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 224);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    uint64_t v16 = a5[1];
    v13(v12, a4, v15, v16);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    BOOL v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uui"
            "ds::uuid), Args = <const std::string &, boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(const std::string &, boost::uuids::uuid), Args = <const std::string &, boost::uuids::uuid &>]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    *a6 = 0;
    a6[280] = 0;
  }
}

void sub_1001FED34()
{
}

void sub_1001FED60(uint64_t a1@<X0>, unsigned int a2@<W1>, long long *a3@<X2>, long long *a4@<X3>, unsigned char *a5@<X8>)
{
  unsigned int v5 = a2;
  sub_1001FEDA8(a1, (void (*)(void *, uint64_t, void **, long long *))sub_10033A548, 0, &v5, a3, a4, a5);
}

void sub_1001FEDA8(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, void **, long long *)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, long long *a5@<X4>, long long *a6@<X5>, unsigned char *a7@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v14 = *(void *)(a1 + 224);
    if (!v14) {
      operator new();
    }
    uint64_t v15 = (void *)(v14 + (a3 >> 1));
    if (a3) {
      a2 = *(void (**)(void *, uint64_t, void **, long long *))(*v15 + a2);
    }
    uint64_t v17 = *a4;
    sub_10020D74C((uint64_t)__p, a5);
    long long v22 = *a6;
    char v23 = *((unsigned char *)a6 + 16);
    a2(v15, v17, __p, &v22);
    if (v21)
    {
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v16 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v27 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::"
            "Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      int v24 = 136446210;
      __int16 v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_Mod"
            "elType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::"
            "Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]";
      unsigned int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::optional<CLMicroLocationModelTable::Entry> (CLMicroLocationModelTable::*)(CLMicroLocationProto::Model_ModelType, std::optional<const std::string>, std::optional<boost::uuids::uuid>), Args = <CLMicroLocationProto::Model_ModelType &, std::optional<const std::string> &, std::optional<boost::uuids::uuid> &>]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    *a7 = 0;
    a7[280] = 0;
  }
}

void sub_1001FF060(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void sub_1001FF0AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  v5[0] = a3;
  v5[1] = a4;
  sub_1001FEA84(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_10033AF60, 0, a2, v5, a5);
}

void sub_1001FF120(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4 = sub_1001FC52C();
  unsigned int v11 = v4;
  if (v4)
  {
    unsigned int v5 = v4;
    sub_1001FF43C(a1, (void (*)(void *))sub_10032F558, 0, buf);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v16)
    {
      unsigned int v10 = v5 - 1;
      sub_1001FF6FC(a1, (void (*)(void *, uint64_t))sub_10022C628, 0, &v10, &v8);
      sub_10020D9A0(a2);
      *(_OWORD *)a2 = v8;
      a2[2] = v9;
      uint64_t v9 = 0;
      long long v8 = 0uLL;
      uint64_t v12 = (void **)&v8;
      sub_10020D8FC(&v12);
      if (!v16) {
        sub_10020D700();
      }
      sub_1001FF9D0(a2, *a2, (unint64_t)buf);
    }
    else
    {
      sub_1001FFB2C(a1, (void (*)(void *, uint64_t))sub_10022C628, 0, &v11, &v8);
      sub_10020D9A0(a2);
      *(_OWORD *)a2 = v8;
      a2[2] = v9;
      uint64_t v9 = 0;
      long long v8 = 0uLL;
      uint64_t v12 = (void **)&v8;
      sub_10020D8FC(&v12);
    }
    if (v16)
    {
      if (v15 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unsigned int v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Database selection limit is not positive. Not selecting LOI Groups", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LOWORD(v8) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::vector<CLMiLoLoiTable::Entry> CLMicroLocationDatabase::selectAllLoiGroups()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1001FF3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28)
  {
    if (a27 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1001FF43C(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 232);
    if (!v7) {
      operator new();
    }
    long long v8 = (void *)(v7 + (a3 >> 1));
    if (a3) {
      uint64_t v9 = *(void (**)(void *))(*v8 + a2);
    }
    else {
      uint64_t v9 = a2;
    }
    v9(v8);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unsigned int v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v14 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unsigned int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::optional<CLMiLoLoiTable::Entry> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *a4 = 0;
    a4[64] = 0;
  }
}

void sub_1001FF6D0()
{
}

void sub_1001FF6FC(uint64_t a1@<X0>, void (*a2)(void *, uint64_t)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 280);
    if (!v9) {
      operator new();
    }
    unsigned int v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      unsigned int v11 = *(void (**)(void *, uint64_t))(*v10 + a2);
    }
    else {
      unsigned int v11 = a2;
    }
    uint64_t v13 = *a4;
    v11(v10, v13);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <const unsigned int &>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_1001FF9A4()
{
}

unint64_t sub_1001FF9D0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (a2 - *a1) >> 6;
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v14 = ((uint64_t)(v6 - v7) >> 6) + 1;
    if (v14 >> 58) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v10 - v7;
    if (v15 >> 5 > v14) {
      unint64_t v14 = v15 >> 5;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v23 = v9;
    if (v16) {
      uint64_t v17 = (char *)sub_10017EAF0(v9, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v19 = v17;
    char v20 = &v17[64 * v8];
    char v21 = v20;
    long long v22 = &v17[64 * v16];
    sub_10020DAD8(&v19, (long long *)a3);
    unint64_t v4 = sub_10020DC4C((uint64_t)a1, &v19, (long long *)v4);
    sub_10020E07C((uint64_t)&v19);
  }
  else if (a2 == v6)
  {
    sub_10020D9DC((uint64_t)a1, (long long *)a3);
  }
  else
  {
    sub_10020DA50((uint64_t)a1, a2, v6, a2 + 64);
    if (v4 <= a3) {
      a3 += (unint64_t)(a1[1] > a3) << 6;
    }
    long long v12 = *(_OWORD *)a3;
    long long v13 = *(_OWORD *)(a3 + 16);
    *(void *)(v4 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)unint64_t v4 = v12;
    *(_OWORD *)(v4 + 16) = v13;
    std::string::operator=((std::string *)(v7 + (v8 << 6) + 40), (const std::string *)(a3 + 40));
  }
  return v4;
}

void sub_1001FFB18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10020E07C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001FFB2C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 280);
    if (!v9) {
      operator new();
    }
    unint64_t v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      unint64_t v11 = *(void (**)(void *, uint64_t))(*v10 + a2);
    }
    else {
      unint64_t v11 = a2;
    }
    uint64_t v13 = *a4;
    v11(v10, v13);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    long long v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiLoLoiTable::Entry> (CLMiLoLoiTable::*), Args = <unsigned int &>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_1001FFDD4()
{
}

void sub_1001FFE00(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_1001FC52C();
  sub_1001FFE6C(a1, (void (*)(void *, uint64_t, uint64_t))sub_1002AC69C, 0, a2, &v6, a3);
}

void sub_1001FFE6C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 216);
    if (!v11) {
      operator new();
    }
    long long v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberF"
            "n = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vect"
            "or<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationMeasurementTable, MemberFn = std::vector<CLMicroLocationMeasurementTable::Entry> (CLMicroLocationMeasurementTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_10020011C()
{
}

void sub_100200148(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 232);
    if (!v11) {
      operator new();
    }
    long long v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_1002003F8()
{
}

void sub_100200424(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_1001FC52C();
  sub_100200148(a1, (void (*)(void *, uint64_t, uint64_t))sub_10032B1C8, 0, a2, &v6, a3);
}

void sub_100200490(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_1000C7F88(&v15);
  int v14 = 0;
  CFStringRef v10 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLearningRecordingLimit", 0x8000100u, kCFAllocatorNull);
  int v11 = sub_1004D08E4(v15, (uint64_t)v10, &v14);
  CFRelease(v10);
  int v12 = v14;
  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (v11) {
    int v13 = v12;
  }
  else {
    int v13 = 500;
  }
  long long v17 = *(_OWORD *)a4;
  char v18 = *(unsigned char *)(a4 + 16);
  LODWORD(v15) = v13;
  sub_1002005E8(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t, long long *))sub_10032C75C, 0, a2, (unsigned int *)&v15, a3, &v17, a5);
}

void sub_1002005C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002005E8(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t, long long *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, void *a8@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v16 = *(void *)(a1 + 232);
    if (!v16) {
      operator new();
    }
    long long v17 = (void *)(v16 + (a3 >> 1));
    if (a3) {
      a2 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, long long *))(*v17 + a2);
    }
    uint64_t v19 = *a5;
    long long v21 = *a7;
    char v22 = *((unsigned char *)a7 + 16);
    a2(v17, a4, v19, a6, &v21);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    char v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v26 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::u"
            "uids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::strin"
            "g &, std::optional<boost::uuids::uuid> &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      int v23 = 136446210;
      int v24 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::u"
            "uids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::strin"
            "g &, std::optional<boost::uuids::uuid> &>]";
      char v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::vector<CLMicroLocationProto::EventType> &, unsigned int, const std::string &, std::optional<boost::uuids::uuid>), Args = <const std::vector<CLMicroLocationProto::EventType> &, unsigned int &, const std::string &, std::optional<boost::uuids::uuid> &>]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_10020087C()
{
}

void sub_1002008A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_1001FC52C();
  sub_10020092C(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10032EB68, 0, a2, a3, a4, &v10, a5);
}

void sub_10020092C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v15 = *(void *)(a1 + 232);
    if (!v15) {
      operator new();
    }
    uint64_t v16 = (void *)(v15 + (a3 >> 1));
    if (a3) {
      long long v17 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v16 + a2);
    }
    else {
      long long v17 = a2;
    }
    uint64_t v19 = *a7;
    v17(v16, a4, a5, a6, v19);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    char v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      int v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string "
            "&, const std::string &, const boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      char v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::string &, const std::string &, const boost::uuids::uuid &, unsigned int), Args = <const std::string &, const std::string &, const boost::uuids::uuid &, unsigned int &>]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_100200BF8()
{
}

void sub_100200C24(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void sub_100200C4C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v13 = *(void *)(a1 + 232);
    if (!v13) {
      operator new();
    }
    int v14 = (void *)(v13 + (a3 >> 1));
    if (a3) {
      uint64_t v15 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    v15(v14, a4, a5, a6);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v16 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      char v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(con"
            "st std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const "
            "std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::vector<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &), Args = <const std::vector<CLMicroLocationProto::EventType> &, const std::string &, const std::string &>]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
}

void sub_100200F10()
{
}

double sub_100200F3C(uint64_t a1)
{
  return sub_100200F58(a1, (double (*)(void *))sub_10032F188, 0);
}

double sub_100200F58(uint64_t a1, double (*a2)(void *), uint64_t a3)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 232);
    if (!v6) {
      operator new();
    }
    uint64_t v7 = (void *)(v6 + (a3 >> 1));
    if (a3) {
      a2 = *(double (**)(void *))(*v7 + a2);
    }
    return a2(v7);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v8 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicr"
            "oLocationRecordingEventsTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    double v9 = 0.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> (CLMicroLocationRecordingEventsTable::*)(), Args = <>]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return v9;
}

void sub_1002011AC()
{
}

void sub_1002011D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_1001FC52C();
  sub_10020125C(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10031C948, 0, a2, a3, a4, &v10, a5);
}

void sub_10020125C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v15 = *(void *)(a1 + 248);
    if (!v15) {
      operator new();
    }
    uint64_t v16 = (void *)(v15 + (a3 >> 1));
    if (a3) {
      long long v17 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v16 + a2);
    }
    else {
      long long v17 = a2;
    }
    uint64_t v19 = *a7;
    v17(v16, a4, a5, a6, v19);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    char v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      int v23 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::s"
            "tring &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <c"
            "onst std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      char v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, MemberFn = std::vector<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int), Args = <const std::string &, const std::string &, const std::vector<CLMicroLocationProto::EventType> &, unsigned int &>]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_100201528()
{
}

void sub_100201554(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
}

void sub_100201578(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 248);
    if (!v11) {
      operator new();
    }
    int v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    v13(v12, a4, a5);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    int v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      char v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, Member"
            "Fn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std:"
            ":string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::ve"
            "ctor<CLMicroLocationProto::EventType> &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationLoggedEventsTable, MemberFn = std::optional<CLMicroLocationLoggedEventsTable::Entry> (CLMicroLocationLoggedEventsTable::*)(const std::string &, const std::vector<CLMicroLocationProto::EventType> &), Args = <const std::string &, const std::vector<CLMicroLocationProto::EventType> &>]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *a6 = 0;
    a6[336] = 0;
  }
}

void sub_100201828()
{
}

void sub_100201854(uint64_t a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  int v3 = 1;
  sub_1002018A4(a1, (void (*)(void *, uint64_t, unsigned char *, long long *))sub_1002263F4, 0, (uint64_t)&v3, a2, a3);
}

void sub_1002018A4(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, unsigned char *, long long *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X5>, unsigned char *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v12 = *(void *)(a1 + 208);
    if (!v12) {
      operator new();
    }
    uint64_t v13 = (void *)(v12 + (a3 >> 1));
    if (a3) {
      a2 = *(void (**)(void *, uint64_t, unsigned char *, long long *))(*v13 + a2);
    }
    buf[0] = 0;
    char v20 = 0;
    long long v16 = *a5;
    char v17 = 1;
    a2(v13, a4, buf, &v16);
    if (v20)
    {
      if (v19 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    int v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<c"
                           "onst std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocatio"
                           "nProto::ConfigurationType, const std::nullopt_t &, const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LODWORD(v16) = 136446210;
      *(void *)((char *)&v16 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::E"
                                      "ntry> (CLMicroLocationConfigurationTable::*)(const CLMicroLocationProto::Configura"
                                      "tionType &, const std::optional<const std::string> &, const std::optional<const bo"
                                      "ost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::"
                                      "nullopt_t &, const boost::uuids::uuid &>]";
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::nullopt_t &, const boost::uuids::uuid &>]", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    *a6 = 0;
    a6[112] = 0;
  }
}

void sub_100201B4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void sub_100201B98(uint64_t a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  int v3 = 0;
  sub_1002018A4(a1, (void (*)(void *, uint64_t, unsigned char *, long long *))sub_1002263F4, 0, (uint64_t)&v3, a2, a3);
}

void sub_100201BE4(uint64_t a1@<X0>, long long *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
}

void sub_100201C14(uint64_t a1@<X0>, void (*a2)(void *, unsigned char *, long long *, void, uint64_t)@<X1>, uint64_t a3@<X2>, long long *a4@<X4>, unsigned int *a5@<X5>, uint64_t a6@<X6>, unsigned char *a7@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v14 = *(void *)(a1 + 208);
    if (!v14) {
      operator new();
    }
    uint64_t v15 = (void *)(v14 + (a3 >> 1));
    if (a3) {
      a2 = *(void (**)(void *, unsigned char *, long long *, void, uint64_t))(*v15 + a2);
    }
    buf[0] = 0;
    char v22 = 0;
    long long v18 = *a4;
    char v19 = 1;
    a2(v15, buf, &v18, *a5, a6);
    if (v22)
    {
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    long long v16 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const std::optional<const std::string> &, const std::optional<const bo"
                           "ost::uuids::uuid> &, CLMicroLocationProto::ConfigurationType, const std::string &), Args = <c"
                           "onst std::nullopt_t &, const boost::uuids::uuid &, const CLMicroLocationProto::ConfigurationT"
                           "ype &, const std::string &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LODWORD(v18) = 136446210;
      *(void *)((char *)&v18 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::E"
                                      "ntry> (CLMicroLocationConfigurationTable::*)(const std::optional<const std::string"
                                      "> &, const std::optional<const boost::uuids::uuid> &, CLMicroLocationProto::Config"
                                      "urationType, const std::string &), Args = <const std::nullopt_t &, const boost::uu"
                                      "ids::uuid &, const CLMicroLocationProto::ConfigurationType &, const std::string &>]";
      char v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &, CLMicroLocationProto::ConfigurationType, const std::string &), Args = <const std::nullopt_t &, const boost::uuids::uuid &, const CLMicroLocationProto::ConfigurationType &, const std::string &>]", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
    }
    *a7 = 0;
    a7[112] = 0;
  }
}

void sub_100201EC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void sub_100201F10(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  int v3 = 2;
  sub_100201F60(a1, (void (*)(void *, uint64_t, uint8_t *, int *))sub_1002263F4, 0, (uint64_t)&v3, a2, a3);
}

void sub_100201F60(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint8_t *, int *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v12 = *(void *)(a1 + 208);
    if (!v12) {
      operator new();
    }
    uint64_t v13 = (void *)(v12 + (a3 >> 1));
    if (a3) {
      a2 = *(void (**)(void *, uint64_t, uint8_t *, int *))(*v13 + a2);
    }
    if (*(char *)(a5 + 23) < 0)
    {
      sub_1000DC48C(buf, *(void **)a5, *(void *)(a5 + 8));
    }
    else
    {
      *(_OWORD *)int buf = *(_OWORD *)a5;
      uint64_t v20 = *(void *)(a5 + 16);
    }
    char v21 = 1;
    LOBYTE(v16) = 0;
    char v18 = 0;
    a2(v13, a4, buf, &v16);
    if (v21)
    {
      if (SHIBYTE(v20) < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurat"
                           "ionTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocation"
                           "ConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<c"
                           "onst std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocatio"
                           "nProto::ConfigurationType, const std::string &, const std::nullopt_t &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      int v16 = 136446210;
      char v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const C"
            "LMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<cons"
            "t boost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::string &, const std::nullopt_t &>]";
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(const CLMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &), Args = <CLMicroLocationProto::ConfigurationType, const std::string &, const std::nullopt_t &>]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *a6 = 0;
    a6[112] = 0;
  }
}

void sub_10020222C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void sub_100202278(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
}

void sub_100202298(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unsigned char *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 208);
    if (!v9) {
      operator new();
    }
    unsigned int v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    v11(v10, v13, v14);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      char v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, Membe"
            "rFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::"
            "uuids::uuid), Args = <const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationConfigurationTable, MemberFn = std::optional<CLMicroLocationConfigurationTable::Entry> (CLMicroLocationConfigurationTable::*)(boost::uuids::uuid), Args = <const boost::uuids::uuid &>]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *a5 = 0;
    a5[112] = 0;
  }
}

void sub_100202540()
{
}

void sub_10020256C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, void *a5@<X8>)
{
  unsigned int v10 = sub_1001FC52C();
  sub_1002025F8(a1, (void (*)(void *, uint64_t, uint64_t, unsigned char *, long long *, void))sub_1002138F0, 0, a2, a3, a4, &v10, a5);
}

void sub_1002025F8(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, unsigned char *, long long *, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, long long *a6@<X6>, unsigned int *a7@<X7>, void *a8@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v16 = *(void *)(a1 + 256);
    if (!v16) {
      operator new();
    }
    char v17 = (void *)(v16 + (a3 >> 1));
    if (a3) {
      a2 = *(void (**)(void *, uint64_t, uint64_t, unsigned char *, long long *, void))(*v17 + a2);
    }
    buf[0] = 0;
    char v24 = 0;
    long long v20 = *a6;
    char v21 = 1;
    a2(v17, a4, a5, buf, &v20, *a7);
    if (v24)
    {
      if (v23 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    char v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRapportTab"
                           "le, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicroLocationRapportTable::"
                           "*)(const std::string &, const std::string &, const std::optional<const std::string> &, const "
                           "std::optional<const boost::uuids::uuid> &, unsigned int), Args = <const std::string &, const "
                           "std::string &, const std::nullopt_t &, const boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LODWORD(v20) = 136446210;
      *(void *)((char *)&v20 + 4) = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocatio"
                                      "nRapportTable, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicro"
                                      "LocationRapportTable::*)(const std::string &, const std::string &, const std::opti"
                                      "onal<const std::string> &, const std::optional<const boost::uuids::uuid> &, unsign"
                                      "ed int), Args = <const std::string &, const std::string &, const std::nullopt_t &,"
                                      " const boost::uuids::uuid &, unsigned int &>]";
      char v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRapportTable, MemberFn = std::vector<CLMicroLocationRapportTable::Entry> (CLMicroLocationRapportTable::*)(const std::string &, const std::string &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &, unsigned int), Args = <const std::string &, const std::string &, const std::nullopt_t &, const boost::uuids::uuid &, unsigned int &>]", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_1002028B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

uint64_t sub_1002028FC(uint64_t a1)
{
  return sub_100202918(a1, (uint64_t (*)(void *))sub_10022C11C, 0);
}

uint64_t sub_100202918(uint64_t a1, uint64_t (*a2)(void *), uint64_t a3)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v5 = *(void *)(a1 + 280);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = (void *)(v5 + (a3 >> 1));
    if (a3) {
      uint64_t v7 = *(uint64_t (**)(void *))(*v6 + a2);
    }
    else {
      uint64_t v7 = a2;
    }
    return v7(v6);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v8 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int "
            "(CLMiLoLoiTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = unsigned int (CLMiLoLoiTable::*)(), Args = <>]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
}

void sub_100202BA0()
{
}

void sub_100202BCC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_1001FC52C();
  sub_100202C38(a1, (void (*)(void *, uint64_t, uint64_t))sub_10022BE30, 0, a2, &v6, a3);
}

void sub_100202C38(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 280);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      char v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<C"
            "LMiLoLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uu"
            "ids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<CLMiLoLoiTable::Entry> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uuids::uuid &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100202EE8()
{
}

void sub_100202F14(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
}

void sub_100202F34(uint64_t a1@<X0>, void (*a2)(void *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 232);
    if (!v9) {
      operator new();
    }
    unsigned int v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(void (**)(void *, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    v11(v10, a4);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, Mem"
            "berFn = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(c"
            "onst boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationRecordingEventsTable, MemberFn = std::optional<CLMicroLocationRecordingEventsTable::Entry> (CLMicroLocationRecordingEventsTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *a5 = 0;
    a5[240] = 0;
  }
}

void sub_1002031DC()
{
}

void sub_100203208(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unsigned int v8 = sub_1001FC52C();
  sub_10020327C(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_10021C510, 0, a2, a3, &v8, a4);
}

void sub_10020327C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v13 = *(void *)(a1 + 296);
    if (!v13) {
      operator new();
    }
    uint64_t v14 = (void *)(v13 + (a3 >> 1));
    if (a3) {
      uint64_t v15 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    uint64_t v17 = *a6;
    v15(v14, a4, a5, v17);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v16 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      char v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, M"
            "emberFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::"
            "*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &"
            ", unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationBluetoothIdentityTable, MemberFn = std::vector<CLMicroLocationBluetoothIdentityTable::Entry> (CLMicroLocationBluetoothIdentityTable::*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &, unsigned int &>]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
}

void sub_100203540()
{
}

uint64_t sub_10020356C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100203590(a1, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100317238, 0, a2, a3);
}

uint64_t sub_100203590(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 288);
    if (!v9) {
      operator new();
    }
    unsigned int v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    return v11(v10, a4, a5);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (C"
            "LMiLoCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const"
            " boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = BOOL (CLMiLoCustomLoiTable::*)(const std::string &, const boost::uuids::uuid &), Args = <const std::string &, const boost::uuids::uuid &>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    return 0;
  }
}

void sub_100203834()
{
}

uint64_t sub_100203860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100203590(a1, sub_100317500, 0, a2, a3);
}

void sub_100203884(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_1002038A4(uint64_t a1@<X0>, void (*a2)(void *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 288);
    if (!v9) {
      operator new();
    }
    unsigned int v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(void (**)(void *, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    v11(v10, a4);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v16 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector<std::string> (CLMiLoCustomLoiTable::*)(const boost::uuids::uuid &), Args = <const boost::uuids::uuid &>]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_100203B4C()
{
}

void sub_100203B78(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = sub_1001FC52C();
  sub_100203BD4(a1, (void (*)(void *, uint64_t))sub_100318758, 0, &v4, a2);
}

void sub_100203BD4(uint64_t a1@<X0>, void (*a2)(void *, uint64_t)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 288);
    if (!v9) {
      operator new();
    }
    unsigned int v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(void (**)(void *, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    uint64_t v13 = *a4;
    v11(v10, v13);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector<boost::uuids::uuid> (CLMiLoCustomLoiTable::*), Args = <unsigned int &>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_100203E7C()
{
}

void sub_100203EA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unsigned int v8 = sub_1001FC52C();
  sub_100203F1C(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_1002DEAAC, 0, a2, a3, &v8, a4);
}

void sub_100203F1C(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, void *a7@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v13 = *(void *)(a1 + 264);
    if (!v13) {
      operator new();
    }
    uint64_t v14 = (void *)(v13 + (a3 >> 1));
    if (a3) {
      uint64_t v15 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(*v14 + a2);
    }
    else {
      uint64_t v15 = a2;
    }
    uint64_t v17 = *a6;
    v15(v14, a4, a5, v17);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v16 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      char v21 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int"
            "), Args = <const std::string &, const std::string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vector<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(const std::string &, const std::string &, unsigned int), Args = <const std::string &, const std::string &, unsigned int &>]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
}

void sub_1002041E0()
{
}

void sub_10020420C(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unsigned int v6 = a2;
  unsigned int v5 = sub_1001FC52C();
  sub_100204270(a1, (void (*)(void *, uint64_t, uint64_t))sub_1002DF100, 0, &v6, &v5, a3);
}

void sub_100204270(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 264);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a4;
    uint64_t v16 = *a5;
    v13(v12, v15, v16);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      long long v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vect"
            "or<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::vector<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(unsigned int, unsigned int), Args = <unsigned int &, unsigned int &>]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100204520()
{
}

void sub_10020454C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  v4[0] = a2;
  v4[1] = a3;
  sub_1002045B8(a1, (void (*)(void *, uint64_t, uint64_t))sub_1002DF508, 0, v4, a4);
}

void sub_1002045B8(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unsigned char *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 264);
    if (!v9) {
      operator new();
    }
    unsigned int v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    uint64_t v13 = *a4;
    uint64_t v14 = a4[1];
    v11(v10, v13, v14);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      char v18 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::opti"
            "onal<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = std::optional<CLMiLoServiceTable::Entry> (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *a5 = 0;
    a5[88] = 0;
  }
}

void sub_100204860()
{
}

uint64_t sub_10020488C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_1002048F8(a1, sub_1002DF994, 0, v4);
}

uint64_t sub_1002048F8(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t), uint64_t a3, uint64_t *a4)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 264);
    if (!v7) {
      operator new();
    }
    unsigned int v8 = (void *)(v7 + (a3 >> 1));
    if (a3) {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v8 + a2);
    }
    else {
      uint64_t v9 = a2;
    }
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    return v9(v8, v12, v13);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unsigned int v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(boost::uuids::uuid), Args = <boost::uuids::uuid &>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    return 0;
  }
}

void sub_100204B88()
{
}

uint64_t sub_100204BB4(uint64_t a1, uint64_t (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v7 = *(void *)(a1 + 264);
    if (!v7) {
      operator new();
    }
    unsigned int v8 = (void *)(v7 + (a3 >> 1));
    if (a3) {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(*v8 + a2);
    }
    else {
      uint64_t v9 = a2;
    }
    return v9(v8, a4);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unsigned int v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v15 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(const std::vector<std::string> &), Args = <const std::vector<std::string> &>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
}

void sub_100204E44()
{
}

uint64_t sub_100204E70(uint64_t a1, uint64_t (*a2)(void *), uint64_t a3)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v5 = *(void *)(a1 + 264);
    if (!v5) {
      operator new();
    }
    unsigned int v6 = (void *)(v5 + (a3 >> 1));
    if (a3) {
      uint64_t v7 = *(uint64_t (**)(void *))(*v6 + a2);
    }
    else {
      uint64_t v7 = a2;
    }
    return v7(v6);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    unsigned int v8 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v13 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(), Args = <>]";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(), Args = <>]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
}

void sub_1002050F8()
{
}

uint64_t sub_100205124(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  v6[0] = a2;
  v6[1] = a3;
  double v5 = a4;
  return sub_100205198(a1, (uint64_t (*)(void *, uint64_t, uint64_t, __n128))sub_1002E33A0, 0, v6, (unint64_t *)&v5);
}

uint64_t sub_100205198(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, __n128), uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v10 = *(void *)(a1 + 264);
    if (!v10) {
      operator new();
    }
    uint64_t v11 = (void *)(v10 + (a3 >> 1));
    if (a3) {
      uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t, __n128))(*v11 + a2);
    }
    else {
      uint64_t v12 = a2;
    }
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    v9.n128_u64[0] = *a5;
    return v12(v11, v15, v16, v9);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v13 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      long long v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono"
            "::duration<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeC"
            "lock, std::chrono::duration<long double>> &>]";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(boost::uuids::uuid, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>>), Args = <boost::uuids::uuid &, std::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::chrono::duration<long double>> &>]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return 0;
  }
}

void sub_10020543C()
{
}

uint64_t sub_100205468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v5 = a4;
  return sub_1002054DC(a1, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))sub_1002E3BF4, 0, v6, &v5);
}

uint64_t sub_1002054DC(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 264);
    if (!v9) {
      operator new();
    }
    uint64_t v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a5;
    return v11(v10, v14, v15, v16);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      long long v20 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLM"
            "iLoServiceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoServiceTable, MemberFn = BOOL (CLMiLoServiceTable::*)(boost::uuids::uuid, unsigned long long), Args = <boost::uuids::uuid &, unsigned long long &>]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return 0;
  }
}

void sub_100205780()
{
}

void sub_1002057AC(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = sub_1001FC52C();
  sub_100205808(a1, (void (*)(void *, uint64_t))sub_100326FEC, 0, &v4, a2);
}

void sub_100205808(uint64_t a1@<X0>, void (*a2)(void *, uint64_t)@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v9 = *(void *)(a1 + 272);
    if (!v9) {
      operator new();
    }
    uint64_t v10 = (void *)(v9 + (a3 >> 1));
    if (a3) {
      uint64_t v11 = *(void (**)(void *, uint64_t))(*v10 + a2);
    }
    else {
      uint64_t v11 = a2;
    }
    uint64_t v13 = *a4;
    v11(v10, v13);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v17 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, MemberFn = std::vector<boost::uuids::uuid> (CLMicroLocationAssociatedStateTable::*), Args = <unsigned int &>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_100205AB0()
{
}

void sub_100205ADC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v11[0] = a4;
  v11[1] = a5;
  unsigned int v10 = sub_1001FC52C();
  sub_100205B84(a1, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10032631C, 0, a2, a3, v11, &v10, a6);
}

void sub_100205B84(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, unsigned int *a7@<X6>, void *a8@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v15 = *(void *)(a1 + 272);
    if (!v15) {
      operator new();
    }
    uint64_t v16 = (void *)(v15 + (a3 >> 1));
    if (a3) {
      uint64_t v17 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v16 + a2);
    }
    else {
      uint64_t v17 = a2;
    }
    uint64_t v19 = *a6;
    uint64_t v20 = a6[1];
    uint64_t v21 = *a7;
    v17(v16, a4, a5, v19, v20, v21);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    char v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      __int16 v25 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, Mem"
            "berFn = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(con"
            "st std::string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const"
            " std::string &, boost::uuids::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      char v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationAssociatedStateTable, MemberFn = std::vector<CLMicroLocationAssociatedStateTable::Entry> (CLMicroLocationAssociatedStateTable::*)(const std::string &, const std::string &, boost::uuids::uuid, unsigned int), Args = <const std::string &, const std::string &, boost::uuids::uuid &, unsigned int &>]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
  }
}

void sub_100205E50()
{
}

void sub_100205E7C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned int v6 = sub_1001FC52C();
  sub_100205EE8(a1, (void (*)(void *, uint64_t, uint64_t))sub_100229E44, 0, a2, &v6, a3);
}

void sub_100205EE8(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, unsigned char *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 280);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional"
            "<boost::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uui"
            "ds::uuid &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::optional<boost::uuids::uuid> (CLMiLoLoiTable::*)(const boost::uuids::uuid &, unsigned int), Args = <const boost::uuids::uuid &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[16] = 0;
  }
}

void sub_100206198()
{
}

void sub_1002061C4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_1001FC52C();
  sub_100206230(a1, (void (*)(void *, uint64_t, uint64_t))sub_10022A2E4, 0, a2, &v6, a3);
}

void sub_100206230(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 280);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<b"
            "oost::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const"
            " std::vector<boost::uuids::uuid> &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = std::vector<boost::uuids::uuid> (CLMiLoLoiTable::*)(const std::vector<boost::uuids::uuid> &, unsigned int), Args = <const std::vector<boost::uuids::uuid> &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_1002064E0()
{
}

uint64_t sub_10020650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100206534(a1, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))sub_10022AF44, 0, a2, a3, a4);
}

uint64_t sub_100206534(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 280);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    return v13(v12, a4, a5, a6);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoL"
            "oiTable::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args "
            "= <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoLoiTable, MemberFn = BOOL (CLMiLoLoiTable::*)(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &), Args = <const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0;
  }
}

void sub_1002067E0()
{
}

void sub_10020680C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v8 = sub_1001FC52C();
  sub_100206908(a1, (void (*)(void *, uint64_t, uint64_t))sub_10033F868, 0, a2, &v8, (void *)a3);
  sub_100206BE4(a1, (void (*)(void *, uint64_t, uint64_t))sub_100318FFC, 0, a2, &v8, &v6);
  sub_10020E10C((uint64_t *)a3, *(std::string **)(a3 + 8), v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  uint64_t v9 = &v6;
  sub_1000A7B4C((void ***)&v9);
}

void sub_1002068D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***a14)
{
  a14 = &a10;
  sub_1000A7B4C((void ***)&a14);
  sub_1000A7B4C(&a10);
  _Unwind_Resume(a1);
}

void sub_100206908(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 224);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = st"
            "d::vector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std:"
            ":string &, unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMicroLocationModelTable, MemberFn = std::vector<std::string> (CLMicroLocationModelTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100206BB8()
{
}

void sub_100206BE4(uint64_t a1@<X0>, void (*a2)(void *, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, void *a6@<X8>)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v11 = *(void *)(a1 + 288);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = (void *)(v11 + (a3 >> 1));
    if (a3) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(*v12 + a2);
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v15 = *a5;
    v13(v12, a4, v15);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136446210;
      uint64_t v19 = "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::ve"
            "ctor<std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &,"
            " unsigned int &>]";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to query %{public}s without a backing database", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationDatabase::select(MemberFn, Args &&...) [Table = CLMiLoCustomLoiTable, MemberFn = std::vector<std::string> (CLMiLoCustomLoiTable::*)(const std::string &, unsigned int), Args = <const std::string &, unsigned int &>]", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_100206E94()
{
}

void sub_100206EC0(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (!sub_10014C3C0(a1 + 72))
  {
    sub_1005F4864(v2);
    sub_1001F9708(a1);
  }
  if (!sub_10014C3C0(v2))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    int v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Failed to connect to database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      unsigned int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationDatabase::connectIfNecessary()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_100207078(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    if (!sub_1002073EC(a1) || !sub_1002075B4(a1)) {
      goto LABEL_28;
    }
    sub_1000C7F88(buf);
    v16[0] = 0;
    CFStringRef v3 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNumModelsToKeepForNonLSL", 0x8000100u, kCFAllocatorNull);
    int v4 = sub_1004D08E4(*(uint64_t *)buf, (uint64_t)v3, v16);
    CFRelease(v3);
    unsigned int v5 = v16[0];
    if (v18) {
      sub_1000DB0A0(v18);
    }
    if (v4) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = 12;
    }
    sub_1000C7F88(buf);
    v16[0] = 0;
    CFStringRef v7 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsNumLSLModelsToKeep", 0x8000100u, kCFAllocatorNull);
    int v8 = sub_1004D08E4(*(uint64_t *)buf, (uint64_t)v7, v16);
    CFRelease(v7);
    int v9 = v16[0];
    if (v18) {
      sub_1000DB0A0(v18);
    }
    unsigned int v10 = v8 ? v9 : 50;
    if (sub_1001FC230(a1, v6, v10)
      && sub_10020777C(a1)
      && sub_100207944(a1)
      && sub_100207B0C(a1)
      && sub_100207CD4(a1)
      && sub_100207E9C(a1)
      && sub_100208064(a1))
    {
      uint64_t v11 = sub_100204E70(a1, (uint64_t (*)(void *))sub_1002E084C, 0);
    }
    else
    {
LABEL_28:
      uint64_t v11 = 0;
    }
    sub_10020822C(a1);
    if (*(uint64_t *)(a1 + 160) <= 0) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = *(void *)(a1 + 160);
    }
    sub_10003CC68(v2, v13);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to freeDatabaseSpace() without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LOWORD(v16[0]) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::freeDatabaseSpace()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    return 0;
  }
  return v11;
}

void sub_1002073C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002073EC(uint64_t a1)
{
  unsigned int v2 = sub_10020E638(a1);
  if (sub_10020D13C() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020E638(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020D13C();
  unint64_t v6 = v5 + sub_10020E5F0();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationMeasurements";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 216);
  if (!v8) {
    operator new();
  }
  return sub_1002ACDFC(v8, v6);
}

void sub_100207588()
{
}

uint64_t sub_1002075B4(uint64_t a1)
{
  unsigned int v2 = sub_10020E920(a1);
  if (sub_10020CE74() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020E920(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020CE74();
  unint64_t v6 = v5 + sub_10020E8D8();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationRecordingEvents";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 232);
  if (!v8) {
    operator new();
  }
  return sub_10032E32C(v8, v6);
}

void sub_100207750()
{
}

uint64_t sub_10020777C(uint64_t a1)
{
  unsigned int v2 = sub_10020EB4C(a1);
  if (sub_10020D560() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020EB4C(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020D560();
  unint64_t v6 = v5 + sub_10020EB04();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationModels";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 224);
  if (!v8) {
    operator new();
  }
  return sub_10033E700(v8, v6);
}

void sub_100207918()
{
}

uint64_t sub_100207944(uint64_t a1)
{
  unsigned int v2 = sub_10020ED78(a1);
  if (sub_10020EF5C() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020ED78(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020EF5C();
  unint64_t v6 = v5 + sub_10020ED30();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationConfiguration";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 208);
  if (!v8) {
    operator new();
  }
  return sub_100227070(v8, v6);
}

void sub_100207AE0()
{
}

uint64_t sub_100207B0C(uint64_t a1)
{
  unsigned int v2 = sub_10020F054(a1);
  if (sub_10020D350() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020F054(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020D350();
  unint64_t v6 = v5 + sub_10020F00C();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationRapport";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 256);
  if (!v8) {
    operator new();
  }
  return sub_100214090(v8, v6);
}

void sub_100207CA8()
{
}

uint64_t sub_100207CD4(uint64_t a1)
{
  unsigned int v2 = sub_10020F280(a1);
  if (sub_10020D1F0() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020F280(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020D1F0();
  unint64_t v6 = v5 + sub_10020F238();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationLabels";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 240);
  if (!v8) {
    operator new();
  }
  return sub_1001E5E60(v8, v6);
}

void sub_100207E70()
{
}

uint64_t sub_100207E9C(uint64_t a1)
{
  unsigned int v2 = sub_10020F4AC(a1);
  if (sub_10020F690() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020F4AC(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020F690();
  unint64_t v6 = v5 + sub_10020F464();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationLoggedEvents";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 248);
  if (!v8) {
    operator new();
  }
  return sub_10031CBEC(v8, v6);
}

void sub_100208038()
{
}

uint64_t sub_100208064(uint64_t a1)
{
  unsigned int v2 = sub_10020F788(a1);
  if (sub_10020D400() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020F788(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020D400();
  unint64_t v6 = v5 + sub_10020F740();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationAssociatedState";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 272);
  if (!v8) {
    operator new();
  }
  return sub_10032788C(v8, v6);
}

void sub_100208200()
{
}

uint64_t sub_10020822C(uint64_t a1)
{
  unsigned int v2 = sub_10020F9B4(a1);
  if (sub_10020D4B0() > v2) {
    return 1;
  }
  unsigned int v4 = sub_10020F9B4(a1);
  unint64_t v5 = v4 - (unint64_t)sub_10020D4B0();
  unint64_t v6 = v5 + sub_10020F96C();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  CFStringRef v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2050;
    unint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = "MicroLocationBluetoothIdentityTable";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Free up database space\", \"Rows to delete\":%{public}llu, \"Table name\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x26u);
  }
  uint64_t v8 = *(void *)(a1 + 296);
  if (!v8) {
    operator new();
  }
  return sub_10021C980(v8, v6);
}

void sub_1002083C8()
{
}

BOOL sub_1002083F4(uint64_t a1)
{
  return sub_10014C3C0(a1 + 72);
}

BOOL sub_1002083FC(uint64_t a1, uint64_t a2)
{
  sub_1001F9070(v7);
  memset(v6, 0, sizeof(v6));
  BOOL v4 = sub_1005F83BC(a1 + 72, a2 + 72, (uint64_t *)v7, v6, 0, 0.0);
  uint64_t v8 = v6;
  sub_1000A7B4C((void ***)&v8);
  v6[0] = (void **)v7;
  sub_1000A7B4C(v6);
  return v4;
}

void sub_100208484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 40) = v2;
  sub_1000A7B4C((void ***)(v3 - 40));
  sub_1000A7B4C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002084A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = *(void *)a2;
    }
    sub_10014D518(v3, v4);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  unint64_t v5 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    uint64_t v10 = 68289282;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"executeStatement Failed. database object is invalid\", \"sqlStatement\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
  }
  CFStringRef v7 = qword_102419458;
  if (os_signpost_enabled((os_log_t)qword_102419458))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    uint64_t v10 = 68289282;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "executeStatement Failed. database object is invalid", "{\"msg%{public}.0s\":\"executeStatement Failed. database object is invalid\", \"sqlStatement\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
  }
  return 0;
}

void sub_100208820(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A51238(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100208840(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = -1;
  uint64_t v3 = a1 + 72;
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  sub_10014D518(v3, a2);
}

void sub_100208A60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100208A74(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x100208ABCLL);
}

void sub_100208A84()
{
}

void sub_100208AC4(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  uint64_t v3 = a1 + 72;
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  sub_10014D518(v3, a2);
}

void sub_100208CE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100208CF4(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x100208D3CLL);
}

void sub_100208D04()
{
}

uint64_t sub_100208D44(uint64_t a1, uint64_t a2, const std::string::value_type *a3, const std::string::value_type *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  uint64_t v16 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    if (a3[23] >= 0) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = *(const std::string::value_type **)a3;
    }
    *(_DWORD *)int buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2081;
    *(void *)&buf[20] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Exporting table using paging\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a5)
  {
    int v18 = a4[23];
    if (v18 < 0)
    {
      if (*((void *)a4 + 1) != 5) {
        goto LABEL_18;
      }
      uint64_t v19 = *(int **)a4;
    }
    else
    {
      uint64_t v19 = (int *)a4;
      if (v18 != 5) {
        goto LABEL_18;
      }
    }
    int v20 = *v19;
    int v21 = *((unsigned __int8 *)v19 + 4);
    if (v20 == 1232564050 && v21 == 100) {
      sub_101A51E84();
    }
  }
LABEL_18:
  if (!sub_10014C3C0(a1 + 72))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    long long v58 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Export using paging. database object is invalid", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419450 == -1) {
      goto LABEL_112;
    }
    goto LABEL_119;
  }
  if (a8 <= 0)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    long long v59 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Export using paging. invalid pageSize should be greater than 0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419450 == -1) {
      goto LABEL_112;
    }
    goto LABEL_119;
  }
  uint64_t v23 = *(unsigned __int8 *)(a6 + 23);
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = *(void *)(a6 + 8);
  }
  if (!v23)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    long long v60 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Export using paging. page select query is empty", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419450 == -1)
    {
LABEL_112:
      LOWORD(v75.__r_.__value_.__l.__data_) = 0;
      uint64_t v63 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)", "%s\n", v63);
      if (v63 != buf) {
        free(v63);
      }
      return 0;
    }
LABEL_119:
    dispatch_once(&qword_102419450, &stru_10229EDB0);
    goto LABEL_112;
  }
  if (a8 >= a7) {
    uint64_t v24 = a7;
  }
  else {
    uint64_t v24 = a8;
  }
  uint64_t v77 = -1;
  unint64_t __val = 0xBFF0000000000000;
  std::to_string(&v75, -1);
  std::operator+<char>();
  __int16 v25 = std::string::append(&v68, " SELECT * FROM (");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  int v27 = *(char *)(a6 + 23);
  if (v27 >= 0) {
    uint64_t v28 = (const std::string::value_type *)a6;
  }
  else {
    uint64_t v28 = *(const std::string::value_type **)a6;
  }
  if (v27 >= 0) {
    std::string::size_type v29 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    std::string::size_type v29 = *(void *)(a6 + 8);
  }
  std::string v30 = std::string::append(&v69, v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  long long v32 = std::string::append(&v70, ") ORDER BY ");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  int v34 = a4[23];
  if (v34 >= 0) {
    long long v35 = a4;
  }
  else {
    long long v35 = *(const std::string::value_type **)a4;
  }
  if (v34 >= 0) {
    std::string::size_type v36 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    std::string::size_type v36 = *((void *)a4 + 1);
  }
  std::string::size_type v37 = std::string::append(&v71, v35, v36);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  int v39 = std::string::append(&v72, " DESC LIMIT ");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v39->__r_.__value_.__l + 2);
  *(_OWORD *)int buf = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v67, v24);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v41 = &v67;
  }
  else {
    unint64_t v41 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v67.__r_.__value_.__l.__size_;
  }
  uint64_t v43 = std::string::append((std::string *)buf, (const std::string::value_type *)v41, size);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v74 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  std::operator+<char>();
  BOOL v45 = std::string::append(&v71, ") FROM ");
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v45->__r_.__value_.__l + 2);
  *(_OWORD *)int buf = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  int v47 = a3[23];
  if (v47 >= 0) {
    uint64_t v48 = a3;
  }
  else {
    uint64_t v48 = *(const std::string::value_type **)a3;
  }
  if (v47 >= 0) {
    std::string::size_type v49 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    std::string::size_type v49 = *((void *)a3 + 1);
  }
  uint64_t v50 = std::string::append((std::string *)buf, v48, v49);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  uint64_t v52 = a7 / a8;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v53 = a7 % a8;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  v71.__r_.__value_.__s.__data_[0] = 0;
  v71.__r_.__value_.__l.__size_ = a1 + 72;
  v71.__r_.__value_.__r.__words[2] = a2 + 72;
  BOOL v54 = sub_1005F7C64(a1 + 72, a2 + 72);
  v71.__r_.__value_.__s.__data_[0] = v54;
  if (v54 && sub_1002084A8(a1, (uint64_t)__p))
  {
    uint64_t v65 = sub_100603880(a1 + 72);
    int v55 = v52 - (v53 < 1);
    uint64_t v56 = 1;
    if (v55 < 1 || v65 < 1) {
      goto LABEL_104;
    }
    uint64_t v57 = *(void *)(a9 + 24);
    if (!v57) {
      sub_10015E48C();
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v57 + 48))(v57))
    {
      if (a5) {
        sub_100208AC4(a1, (uint64_t)&v72, &__val);
      }
      sub_100208840(a1, (uint64_t)&v72, &v77);
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    BOOL v62 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "Export using paging, operation cancelled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      LOWORD(v70.__r_.__value_.__l.__data_) = 0;
      double v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::exportRecordsUsingPaging(const CLMicroLocationDatabase &, const std::string &, const std::string &, const BOOL, const std::string &, const int64_t, const int64_t, std::function<BOOL ()>)", "%s\n", v64);
      if (v64 != buf) {
        free(v64);
      }
    }
  }
  uint64_t v56 = 0;
LABEL_104:
  sub_10020D798((uint64_t)&v71);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  return v56;
}

void sub_100209B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  sub_10020D798((uint64_t)&a63);
  if (a72 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100209DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EDB0);
  }
  unint64_t v5 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v6 = *(const std::string::value_type **)a2;
    }
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"exporting db filterred for user\", \"UserID:\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_10020680C(a3, a2, (uint64_t)v346);
  v345 = (uint64_t *)v346;
  sub_100134750(buf, "MicroLocationRecordingEvents");
  sub_100134750(&buf[24], "RowId");
  char v355 = 0;
  uint64_t v356 = sub_10020CE74();
  sub_1000C7F88(&__dst);
  LODWORD(v340.__r_.__value_.__l.__data_) = 0;
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingEventTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v8 = sub_1004D08E4((uint64_t)__dst.__r_.__value_.__l.__data_, (uint64_t)v7, &v340);
  CFRelease(v7);
  uint64_t data_low = LODWORD(v340.__r_.__value_.__l.__data_);
  if (__dst.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
  }
  uint64_t v10 = 1000;
  if (v8) {
    uint64_t v10 = data_low;
  }
  uint64_t v357 = v10;
  *((unsigned char *)&v339.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v339, "SELECT * FROM OTHER.");
  __int16 v11 = std::string::append(&v339, "MicroLocationRecordingEvents");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v340.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v340.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  __int16 v13 = std::string::append(&v340, " WHERE RtLoiGroupId IN ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_10020CF24(&v345, v337);
  if ((v338 & 0x80u) == 0) {
    uint64_t v15 = v337;
  }
  else {
    uint64_t v15 = (void **)v337[0];
  }
  if ((v338 & 0x80u) == 0) {
    std::string::size_type v16 = v338;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v337[1];
  }
  uint64_t v17 = std::string::append(&__dst, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  std::string::size_type v359 = v17->__r_.__value_.__r.__words[2];
  long long v358 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v360, "MicroLocationMeasurements");
  sub_100134750(v361, "RowId");
  char v362 = 0;
  uint64_t v363 = sub_10020D13C();
  sub_1000C7F88(&v336);
  LODWORD(v335.__r_.__value_.__l.__data_) = 0;
  CFStringRef v19 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v20 = sub_1004D08E4((uint64_t)v336.__r_.__value_.__l.__data_, (uint64_t)v19, &v335);
  CFRelease(v19);
  uint64_t v21 = LODWORD(v335.__r_.__value_.__l.__data_);
  if (v336.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v336.__r_.__value_.__l.__size_);
  }
  uint64_t v22 = 1000;
  if (v20) {
    uint64_t v22 = v21;
  }
  uint64_t v364 = v22;
  *((unsigned char *)&v327.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v327, "   FROM OTHER.");
  uint64_t v23 = std::string::insert(&v327, 0, "SELECT * ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v328.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v328.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  __int16 v25 = std::string::append(&v328, "MicroLocationMeasurements");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v329.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v329.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  int v27 = std::string::append(&v329, "   WHERE ");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v330.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v29 = std::string::append(&v330, "RecordingUUID");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v331.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v331.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  long long v31 = std::string::append(&v331, " IN ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v332.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = (char *)operator new(0x28uLL);
  strcpy(v33, " \t\t(SELECT RecordingUUID FROM OTHER.");
  int v34 = std::string::append(&v332, v33, 0x24uLL);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v333.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v36 = std::string::append(&v333, "MicroLocationRecordingEvents");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v334.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  long long v38 = std::string::append(&v334, " WHERE RtLoiGroupId IN ");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v335.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v335.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  sub_10020CF24(&v345, v325);
  if ((v326 & 0x80u) == 0) {
    long long v40 = v325;
  }
  else {
    long long v40 = (void **)v325[0];
  }
  if ((v326 & 0x80u) == 0) {
    std::string::size_type v41 = v326;
  }
  else {
    std::string::size_type v41 = (std::string::size_type)v325[1];
  }
  unint64_t v42 = std::string::append(&v335, (const std::string::value_type *)v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v336.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v336.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  long long v44 = std::string::append(&v336, ")");
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  std::string::size_type v366 = v44->__r_.__value_.__r.__words[2];
  long long v365 = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v367, "MicroLocationLabels");
  sub_100134750(v368, "RowId");
  char v369 = 0;
  uint64_t v370 = sub_10020D1F0();
  sub_1000C7F88(&v324);
  LODWORD(v323.__r_.__value_.__l.__data_) = 0;
  CFStringRef v46 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLabelTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v47 = sub_1004D08E4((uint64_t)v324.__r_.__value_.__l.__data_, (uint64_t)v46, &v323);
  CFRelease(v46);
  uint64_t v48 = LODWORD(v323.__r_.__value_.__l.__data_);
  if (v324.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v324.__r_.__value_.__l.__size_);
  }
  uint64_t v49 = 1000;
  if (v47) {
    uint64_t v49 = v48;
  }
  uint64_t v371 = v49;
  *((unsigned char *)&v296.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v296, "SELECT ");
  char v295 = 6;
  strcpy(__s, "OTHER.");
  uint64_t v50 = std::string::append(&v296, __s, 6uLL);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v297.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  uint64_t v52 = std::string::append(&v297, "MicroLocationLabels");
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v298.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  BOOL v54 = std::string::append(&v298, ".TriggerUUID, ");
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v299.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  char v293 = 6;
  strcpy(v292, "OTHER.");
  uint64_t v56 = std::string::append(&v299, v292, 6uLL);
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v300.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  long long v58 = std::string::append(&v300, "MicroLocationLabels");
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v301.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  long long v60 = std::string::append(&v301, ".ClientID, ");
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v302.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  char v291 = 6;
  strcpy(v290, "OTHER.");
  BOOL v62 = std::string::append(&v302, v290, 6uLL);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v303.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  double v64 = std::string::append(&v303, "MicroLocationLabels");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v304.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  std::string v66 = std::string::append(&v304, ".LabelUUID, ");
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v305.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v305.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  char v289 = 6;
  strcpy(v288, "OTHER.");
  std::string v68 = std::string::append(&v305, v288, 6uLL);
  long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v306.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  std::string v70 = std::string::append(&v306, "MicroLocationLabels");
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v307.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  std::string v72 = std::string::append(&v307, ".ReceivedTimestamp, ");
  long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v308.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  char v287 = 6;
  strcpy(v286, "OTHER.");
  std::string::size_type v74 = std::string::append(&v308, v286, 6uLL);
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v309.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  uint64_t v76 = std::string::append(&v309, "MicroLocationLabels");
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v310.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v310.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  uint64_t v78 = std::string::append(&v310, ".RowId ");
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v311.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  char v285 = 11;
  strcpy((char *)v284, "FROM OTHER.");
  uint64_t v80 = std::string::append(&v311, (const std::string::value_type *)v284, 0xBuLL);
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v312.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v312.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  uint64_t v82 = std::string::append(&v312, "MicroLocationLabels");
  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v313.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v313.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  uint64_t v84 = std::string::append(&v313, " INNER JOIN OTHER.");
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v314.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  unint64_t v86 = std::string::append(&v314, "MiLoServices");
  long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v315.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  v88 = std::string::append(&v315, "    ON ");
  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v316.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  uint64_t v90 = std::string::append(&v316, "MicroLocationLabels");
  long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v317.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  double v92 = std::string::append(&v317, ".");
  long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  v318.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v318.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0;
  v92->__r_.__value_.__r.__words[2] = 0;
  v92->__r_.__value_.__r.__words[0] = 0;
  uint64_t v94 = std::string::append(&v318, "ClientID");
  long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v319.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  uint64_t v96 = std::string::append(&v319, " LIKE '%' || ");
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v320.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  if (byte_10247A63F >= 0) {
    uint64_t v98 = (const std::string::value_type *)&xmmword_10247A628;
  }
  else {
    uint64_t v98 = (const std::string::value_type *)xmmword_10247A628;
  }
  if (byte_10247A63F >= 0) {
    std::string::size_type v99 = byte_10247A63F;
  }
  else {
    std::string::size_type v99 = *((void *)&xmmword_10247A628 + 1);
  }
  v100 = std::string::append(&v320, v98, v99);
  long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v321.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0;
  v100->__r_.__value_.__r.__words[2] = 0;
  v100->__r_.__value_.__r.__words[0] = 0;
  v102 = std::string::append(&v321, " || '%' ");
  long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v322.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = std::string::append(&v322, "WHERE UserId==\"");
  long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v323.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  int v106 = *(char *)(a2 + 23);
  if (v106 >= 0) {
    int v107 = (const std::string::value_type *)a2;
  }
  else {
    int v107 = *(const std::string::value_type **)a2;
  }
  if (v106 >= 0) {
    std::string::size_type v108 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v108 = *(void *)(a2 + 8);
  }
  v109 = std::string::append(&v323, v107, v108);
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v324.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  v111 = std::string::append(&v324, "\"");
  long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
  std::string::size_type v373 = v111->__r_.__value_.__r.__words[2];
  long long v372 = v112;
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v374, "MiLoServices");
  sub_100134750(v375, "LastActiveTimestamp");
  char v376 = 1;
  sub_1000C7F88(&v283);
  LODWORD(v282.__r_.__value_.__l.__data_) = 0;
  CFStringRef v113 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsServicesTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v114 = sub_1004D08E4((uint64_t)v283.__r_.__value_.__l.__data_, (uint64_t)v113, &v282);
  CFRelease(v113);
  uint64_t v115 = LODWORD(v282.__r_.__value_.__l.__data_);
  if (v283.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v283.__r_.__value_.__l.__size_);
  }
  uint64_t v116 = 256;
  if (v114) {
    uint64_t v116 = v115;
  }
  uint64_t v377 = v116;
  sub_1000C7F88(&v283);
  LODWORD(v282.__r_.__value_.__l.__data_) = 0;
  CFStringRef v117 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsServiceTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v118 = sub_1004D08E4((uint64_t)v283.__r_.__value_.__l.__data_, (uint64_t)v117, &v282);
  CFRelease(v117);
  uint64_t v119 = LODWORD(v282.__r_.__value_.__l.__data_);
  if (v283.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v283.__r_.__value_.__l.__size_);
  }
  uint64_t v120 = 1000;
  if (v118) {
    uint64_t v120 = v119;
  }
  uint64_t v378 = v120;
  *((unsigned char *)&v280.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v280, "SELECT * FROM OTHER.");
  __n128 v121 = std::string::append(&v280, "MiLoServices");
  long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
  v281.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v281.__r_.__value_.__l.__data_ = v122;
  v121->__r_.__value_.__l.__size_ = 0;
  v121->__r_.__value_.__r.__words[2] = 0;
  v121->__r_.__value_.__r.__words[0] = 0;
  v123 = std::string::append(&v281, " WHERE UserId==\"");
  long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
  v282.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v124;
  v123->__r_.__value_.__l.__size_ = 0;
  v123->__r_.__value_.__r.__words[2] = 0;
  v123->__r_.__value_.__r.__words[0] = 0;
  int v125 = *(char *)(a2 + 23);
  if (v125 >= 0) {
    v126 = (const std::string::value_type *)a2;
  }
  else {
    v126 = *(const std::string::value_type **)a2;
  }
  if (v125 >= 0) {
    std::string::size_type v127 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v127 = *(void *)(a2 + 8);
  }
  v128 = std::string::append(&v282, v126, v127);
  long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v283.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  v130 = std::string::append(&v283, "\"");
  long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  std::string::size_type v380 = v130->__r_.__value_.__r.__words[2];
  long long v379 = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v381, "MiLoLoiTable");
  sub_100134750(v382, "LastSeenTimeStamp");
  char v383 = 1;
  uint64_t v384 = sub_10020D2A0();
  sub_1000C7F88(&v279);
  LODWORD(v278.__r_.__value_.__l.__data_) = 0;
  CFStringRef v132 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLoiTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v133 = sub_1004D08E4((uint64_t)v279.__r_.__value_.__l.__data_, (uint64_t)v132, &v278);
  CFRelease(v132);
  uint64_t v134 = LODWORD(v278.__r_.__value_.__l.__data_);
  if (v279.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v279.__r_.__value_.__l.__size_);
  }
  uint64_t v135 = 1000;
  if (v133) {
    uint64_t v135 = v134;
  }
  uint64_t v385 = v135;
  *((unsigned char *)&v277.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v277, "SELECT * FROM OTHER.");
  __int16 v136 = std::string::append(&v277, "MiLoLoiTable");
  long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v137;
  v136->__r_.__value_.__l.__size_ = 0;
  v136->__r_.__value_.__r.__words[2] = 0;
  v136->__r_.__value_.__r.__words[0] = 0;
  v138 = std::string::append(&v278, " WHERE LoiId IN ");
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v279.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v279.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  sub_10020CF24(&v345, v275);
  if ((v276 & 0x80u) == 0) {
    v140 = v275;
  }
  else {
    v140 = (void **)v275[0];
  }
  if ((v276 & 0x80u) == 0) {
    std::string::size_type v141 = v276;
  }
  else {
    std::string::size_type v141 = (std::string::size_type)v275[1];
  }
  v142 = std::string::append(&v279, (const std::string::value_type *)v140, v141);
  long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  std::string::size_type v387 = v142->__r_.__value_.__r.__words[2];
  long long v386 = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v388, "MicroLocationRapport");
  sub_100134750(v389, "RowId");
  char v390 = 0;
  uint64_t v391 = sub_10020D350();
  sub_1000C7F88(&v274);
  LODWORD(v273.__r_.__value_.__l.__data_) = 0;
  CFStringRef v144 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRapportTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v145 = sub_1004D08E4((uint64_t)v274.__r_.__value_.__l.__data_, (uint64_t)v144, &v273);
  CFRelease(v144);
  uint64_t v146 = LODWORD(v273.__r_.__value_.__l.__data_);
  if (v274.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v274.__r_.__value_.__l.__size_);
  }
  uint64_t v147 = 1000;
  if (v145) {
    uint64_t v147 = v146;
  }
  uint64_t v392 = v147;
  *((unsigned char *)&v272.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v272, "SELECT * FROM OTHER.");
  v148 = std::string::append(&v272, "MicroLocationRapport");
  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v273.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  v150 = std::string::append(&v273, " WHERE RtLoiGroupId IN ");
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  v274.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  sub_10020CF24(&v345, v270);
  if ((v271 & 0x80u) == 0) {
    v152 = v270;
  }
  else {
    v152 = (void **)v270[0];
  }
  if ((v271 & 0x80u) == 0) {
    std::string::size_type v153 = v271;
  }
  else {
    std::string::size_type v153 = (std::string::size_type)v270[1];
  }
  v154 = std::string::append(&v274, (const std::string::value_type *)v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  std::string::size_type v394 = v154->__r_.__value_.__r.__words[2];
  long long v393 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v395, "MicroLocationAssociatedState");
  sub_100134750(v396, "RowId");
  char v397 = 0;
  uint64_t v398 = sub_10020D400();
  sub_1000C7F88(&v269);
  LODWORD(v268.__r_.__value_.__l.__data_) = 0;
  CFStringRef v156 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAssociatedStateTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v157 = sub_1004D08E4((uint64_t)v269.__r_.__value_.__l.__data_, (uint64_t)v156, &v268);
  CFRelease(v156);
  uint64_t v158 = LODWORD(v268.__r_.__value_.__l.__data_);
  if (v269.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v269.__r_.__value_.__l.__size_);
  }
  uint64_t v159 = 1000;
  if (v157) {
    uint64_t v159 = v158;
  }
  uint64_t v399 = v159;
  *((unsigned char *)&v267.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v267, "SELECT * FROM OTHER.");
  v160 = std::string::append(&v267, "MicroLocationAssociatedState");
  long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  v268.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  v162 = std::string::append(&v268, " WHERE LoiGroupId IN ");
  long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
  v269.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v269.__r_.__value_.__l.__data_ = v163;
  v162->__r_.__value_.__l.__size_ = 0;
  v162->__r_.__value_.__r.__words[2] = 0;
  v162->__r_.__value_.__r.__words[0] = 0;
  sub_10020CF24(&v345, v265);
  if ((v266 & 0x80u) == 0) {
    v164 = v265;
  }
  else {
    v164 = (void **)v265[0];
  }
  if ((v266 & 0x80u) == 0) {
    std::string::size_type v165 = v266;
  }
  else {
    std::string::size_type v165 = (std::string::size_type)v265[1];
  }
  v166 = std::string::append(&v269, (const std::string::value_type *)v164, v165);
  long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
  std::string::size_type v401 = v166->__r_.__value_.__r.__words[2];
  long long v400 = v167;
  v166->__r_.__value_.__l.__size_ = 0;
  v166->__r_.__value_.__r.__words[2] = 0;
  v166->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v402, "MicroLocationBluetoothIdentityTable");
  sub_100134750(v403, "LastSeenTimeStamp");
  char v404 = 1;
  uint64_t v405 = sub_10020D4B0();
  sub_1000C7F88(&v264);
  LODWORD(v263.__r_.__value_.__l.__data_) = 0;
  CFStringRef v168 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBluetoothIdentityTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v169 = sub_1004D08E4((uint64_t)v264.__r_.__value_.__l.__data_, (uint64_t)v168, &v263);
  CFRelease(v168);
  uint64_t v170 = LODWORD(v263.__r_.__value_.__l.__data_);
  if (v264.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v264.__r_.__value_.__l.__size_);
  }
  uint64_t v171 = 1000;
  if (v169) {
    uint64_t v171 = v170;
  }
  uint64_t v406 = v171;
  *((unsigned char *)&v264.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v264, "SELECT * FROM OTHER.");
  v172 = std::string::append(&v264, "MicroLocationBluetoothIdentityTable");
  std::string::size_type v173 = v172->__r_.__value_.__r.__words[2];
  long long v407 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
  std::string::size_type v408 = v173;
  v172->__r_.__value_.__l.__size_ = 0;
  v172->__r_.__value_.__r.__words[2] = 0;
  v172->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v409, "MicroLocationConfiguration");
  sub_100134750(v410, "GenerationTimestamp");
  char v411 = 1;
  sub_1000C7F88(&v263);
  LODWORD(v262.__r_.__value_.__l.__data_) = 0;
  CFStringRef v174 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsConfigurationTableMigrationLimit", 0x8000100u, kCFAllocatorNull);
  int v175 = sub_1004D08E4((uint64_t)v263.__r_.__value_.__l.__data_, (uint64_t)v174, &v262);
  CFRelease(v174);
  uint64_t v176 = LODWORD(v262.__r_.__value_.__l.__data_);
  if (v263.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v263.__r_.__value_.__l.__size_);
  }
  uint64_t v177 = 100;
  if (v175) {
    uint64_t v177 = v176;
  }
  uint64_t v412 = v177;
  sub_1000C7F88(&v263);
  LODWORD(v262.__r_.__value_.__l.__data_) = 0;
  CFStringRef v178 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsConfigurationTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v179 = sub_1004D08E4((uint64_t)v263.__r_.__value_.__l.__data_, (uint64_t)v178, &v262);
  CFRelease(v178);
  uint64_t v180 = LODWORD(v262.__r_.__value_.__l.__data_);
  if (v263.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v263.__r_.__value_.__l.__size_);
  }
  uint64_t v181 = 1000;
  if (v179) {
    uint64_t v181 = v180;
  }
  uint64_t v413 = v181;
  *((unsigned char *)&v261.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v261, "SELECT * FROM OTHER.");
  v182 = std::string::append(&v261, "MicroLocationConfiguration");
  long long v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
  v262.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v183;
  v182->__r_.__value_.__l.__size_ = 0;
  v182->__r_.__value_.__r.__words[2] = 0;
  v182->__r_.__value_.__r.__words[0] = 0;
  v184 = std::string::append(&v262, " WHERE RtLoiGroupId IN ");
  long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
  v263.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v263.__r_.__value_.__l.__data_ = v185;
  v184->__r_.__value_.__l.__size_ = 0;
  v184->__r_.__value_.__r.__words[2] = 0;
  v184->__r_.__value_.__r.__words[0] = 0;
  sub_10020CF24(&v345, v259);
  if ((v260 & 0x80u) == 0) {
    v186 = v259;
  }
  else {
    v186 = (void **)v259[0];
  }
  if ((v260 & 0x80u) == 0) {
    std::string::size_type v187 = v260;
  }
  else {
    std::string::size_type v187 = (std::string::size_type)v259[1];
  }
  v188 = std::string::append(&v263, (const std::string::value_type *)v186, v187);
  long long v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
  std::string::size_type v415 = v188->__r_.__value_.__r.__words[2];
  long long v414 = v189;
  v188->__r_.__value_.__l.__size_ = 0;
  v188->__r_.__value_.__r.__words[2] = 0;
  v188->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v416, "MicroLocationModels");
  sub_100134750(v417, "RowId");
  char v418 = 0;
  uint64_t v419 = sub_10020D560();
  sub_1000C7F88(&v258);
  LODWORD(v257.__r_.__value_.__l.__data_) = 0;
  CFStringRef v190 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsModelTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v191 = sub_1004D08E4((uint64_t)v258.__r_.__value_.__l.__data_, (uint64_t)v190, &v257);
  CFRelease(v190);
  uint64_t v192 = LODWORD(v257.__r_.__value_.__l.__data_);
  if (v258.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v258.__r_.__value_.__l.__size_);
  }
  uint64_t v193 = 2;
  if (v191) {
    uint64_t v193 = v192;
  }
  uint64_t v420 = v193;
  *((unsigned char *)&v256.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v256, "SELECT * FROM OTHER.");
  v194 = std::string::append(&v256, "MicroLocationModels");
  long long v195 = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
  v257.__r_.__value_.__r.__words[2] = v194->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v257.__r_.__value_.__l.__data_ = v195;
  v194->__r_.__value_.__l.__size_ = 0;
  v194->__r_.__value_.__r.__words[2] = 0;
  v194->__r_.__value_.__r.__words[0] = 0;
  v196 = std::string::append(&v257, " WHERE LoiGroupId IN ");
  long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
  v258.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v197;
  v196->__r_.__value_.__l.__size_ = 0;
  v196->__r_.__value_.__r.__words[2] = 0;
  v196->__r_.__value_.__r.__words[0] = 0;
  sub_10020CF24(&v345, __p);
  if ((v255 & 0x80u) == 0) {
    v198 = __p;
  }
  else {
    v198 = (void **)__p[0];
  }
  if ((v255 & 0x80u) == 0) {
    std::string::size_type v199 = v255;
  }
  else {
    std::string::size_type v199 = (std::string::size_type)__p[1];
  }
  v200 = std::string::append(&v258, (const std::string::value_type *)v198, v199);
  long long v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
  std::string::size_type v422 = v200->__r_.__value_.__r.__words[2];
  long long v421 = v201;
  v200->__r_.__value_.__l.__size_ = 0;
  v200->__r_.__value_.__r.__words[2] = 0;
  v200->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v423, "MiLoCustomLoiTable");
  sub_100134750(v424, "LastSeenTimeStamp");
  char v425 = 1;
  uint64_t v426 = sub_10020D2A0();
  sub_1000C7F88(&v253);
  LODWORD(v252.__r_.__value_.__l.__data_) = 0;
  CFStringRef v202 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsCustomLoiTableMigrationPageSize", 0x8000100u, kCFAllocatorNull);
  int v203 = sub_1004D08E4((uint64_t)v253.__r_.__value_.__l.__data_, (uint64_t)v202, &v252);
  CFRelease(v202);
  uint64_t v204 = LODWORD(v252.__r_.__value_.__l.__data_);
  if (v253.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v253.__r_.__value_.__l.__size_);
  }
  uint64_t v205 = 1000;
  if (v203) {
    uint64_t v205 = v204;
  }
  uint64_t v427 = v205;
  *((unsigned char *)&v247.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v247, "   FROM OTHER.");
  v206 = std::string::insert(&v247, 0, "SELECT * ");
  long long v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
  v248.__r_.__value_.__r.__words[2] = v206->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v207;
  v206->__r_.__value_.__l.__size_ = 0;
  v206->__r_.__value_.__r.__words[2] = 0;
  v206->__r_.__value_.__r.__words[0] = 0;
  v208 = std::string::append(&v248, "MiLoCustomLoiTable");
  long long v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
  v249.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v209;
  v208->__r_.__value_.__l.__size_ = 0;
  v208->__r_.__value_.__r.__words[2] = 0;
  v208->__r_.__value_.__r.__words[0] = 0;
  v210 = (char *)operator new(0x50uLL);
  strcpy(v210, "   WHERE OTHER.MiLoCustomLoiTable.ServiceId IN (SELECT ServiceUUID FROM OTHER.");
  v211 = std::string::append(&v249, v210, 0x4EuLL);
  long long v212 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
  v250.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v212;
  v211->__r_.__value_.__l.__size_ = 0;
  v211->__r_.__value_.__r.__words[2] = 0;
  v211->__r_.__value_.__r.__words[0] = 0;
  v213 = std::string::append(&v250, "MiLoServices");
  long long v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
  v251.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v214;
  v213->__r_.__value_.__l.__size_ = 0;
  v213->__r_.__value_.__r.__words[2] = 0;
  v213->__r_.__value_.__r.__words[0] = 0;
  v215 = std::string::append(&v251, " WHERE UserId==\"");
  long long v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
  v252.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v216;
  v215->__r_.__value_.__l.__size_ = 0;
  v215->__r_.__value_.__r.__words[2] = 0;
  v215->__r_.__value_.__r.__words[0] = 0;
  int v217 = *(char *)(a2 + 23);
  if (v217 >= 0) {
    v218 = (const std::string::value_type *)a2;
  }
  else {
    v218 = *(const std::string::value_type **)a2;
  }
  if (v217 >= 0) {
    std::string::size_type v219 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v219 = *(void *)(a2 + 8);
  }
  v220 = std::string::append(&v252, v218, v219);
  long long v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
  v253.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v221;
  v220->__r_.__value_.__l.__size_ = 0;
  v220->__r_.__value_.__r.__words[2] = 0;
  v220->__r_.__value_.__r.__words[0] = 0;
  v222 = std::string::append(&v253, "\")");
  long long v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
  std::string::size_type v429 = v222->__r_.__value_.__r.__words[2];
  long long v428 = v223;
  v222->__r_.__value_.__l.__size_ = 0;
  v222->__r_.__value_.__r.__words[2] = 0;
  v222->__r_.__value_.__r.__words[0] = 0;
  v343 = 0;
  v342 = 0;
  v344 = 0;
  v347 = &v342;
  char v348 = 0;
  v342 = (char *)operator new(0x420uLL);
  v343 = v342;
  v344 = v342 + 1056;
  v343 = sub_10020FB98((uint64_t)&v344, (long long *)buf, &v430, v342);
  uint64_t v224 = 1056;
  do
  {
    v225 = (void **)&buf[v224];
    if ((char)buf[v224 - 1] < 0) {
      operator delete(*(v225 - 3));
    }
    if (*((char *)v225 - 49) < 0) {
      operator delete(*(void **)&v346[v224]);
    }
    if ((char)v346[v224 - 1] < 0) {
      operator delete(*(v225 - 12));
    }
    v224 -= 96;
  }
  while (v224);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v253.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v252.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v251.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  operator delete(v210);
  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v249.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v248.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v247.__r_.__value_.__l.__data_);
  }
  if ((char)v255 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v258.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  if ((char)v260 < 0) {
    operator delete(v259[0]);
  }
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v263.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v262.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v261.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v264.__r_.__value_.__l.__data_);
  }
  if ((char)v266 < 0) {
    operator delete(v265[0]);
  }
  if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v269.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v268.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v267.__r_.__value_.__l.__data_);
  }
  if ((char)v271 < 0) {
    operator delete(v270[0]);
  }
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v273.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v272.__r_.__value_.__l.__data_);
  }
  if ((char)v276 < 0) {
    operator delete(v275[0]);
  }
  if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v279.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v278.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v277.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v283.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v282.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v281.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v280.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v324.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v323.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v322.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v321.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v320.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v319.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v318.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v317.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v316.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v315.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v314.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v313.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v312.__r_.__value_.__l.__data_);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v311.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v310.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v309.__r_.__value_.__l.__data_);
  }
  if (v287 < 0) {
    operator delete(*(void **)v286);
  }
  if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v308.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v307.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v306.__r_.__value_.__l.__data_);
  }
  if (v289 < 0) {
    operator delete(*(void **)v288);
  }
  if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v305.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v304.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v303.__r_.__value_.__l.__data_);
  }
  if (v291 < 0) {
    operator delete(*(void **)v290);
  }
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v302.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v301.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v300.__r_.__value_.__l.__data_);
  }
  if (v293 < 0) {
    operator delete(*(void **)v292);
  }
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v299.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v298.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v297.__r_.__value_.__l.__data_);
  }
  if (v295 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v296.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v336.__r_.__value_.__l.__data_);
  }
  if ((char)v326 < 0) {
    operator delete(v325[0]);
  }
  if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v335.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v334.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v333.__r_.__value_.__l.__data_);
  }
  operator delete(v33);
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v332.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v331.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v330.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v329.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v328.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v327.__r_.__value_.__l.__data_);
  }
  if ((char)v338 < 0) {
    operator delete(v337[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v340.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v339.__r_.__value_.__l.__data_);
  }
  v226 = v342;
  if (v342 == v343)
  {
    uint64_t v240 = 1;
    goto LABEL_340;
  }
  while (1)
  {
    v227 = v226[23] >= 0 ? v226 : *(char **)v226;
    int v228 = sub_1005F93E4(a1 + 72, v227);
    v229 = v226[23] >= 0 ? v226 : *(char **)v226;
    int v230 = sub_1005F93E4(a3 + 72, v229);
    if ((v228 & v230) != 1) {
      break;
    }
    int v231 = v226[48];
    if (*(char *)(a2 + 23) < 0)
    {
      if (!*(void *)(a2 + 8))
      {
LABEL_311:
        buf[23] = 20;
        strcpy(buf, "SELECT * FROM OTHER.");
        int v233 = v226[23];
        if (v233 >= 0) {
          v234 = v226;
        }
        else {
          v234 = *(const std::string::value_type **)v226;
        }
        if (v233 >= 0) {
          std::string::size_type v235 = v226[23];
        }
        else {
          std::string::size_type v235 = *((void *)v226 + 1);
        }
        v236 = std::string::append((std::string *)buf, v234, v235);
        long long v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v237;
        v236->__r_.__value_.__l.__size_ = 0;
        v236->__r_.__value_.__r.__words[2] = 0;
        v236->__r_.__value_.__r.__words[0] = 0;
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_320;
      }
    }
    else if (!*(unsigned char *)(a2 + 23))
    {
      goto LABEL_311;
    }
    if (v226[95] < 0)
    {
      sub_1000DC48C(&__dst, *((void **)v226 + 9), *((void *)v226 + 10));
    }
    else
    {
      long long v232 = *(_OWORD *)(v226 + 72);
      __dst.__r_.__value_.__r.__words[2] = *((void *)v226 + 11);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v232;
    }
LABEL_320:
    uint64_t v238 = *((void *)v226 + 7);
    uint64_t v239 = *((void *)v226 + 8);
    v349[0] = off_10229EE48;
    v349[3] = v349;
    uint64_t v240 = sub_100208D44(a1, a3, v226, v226 + 24, v231 != 0, (uint64_t)&__dst, v238, v239, (uint64_t)v349);
    sub_1001EFA74(v349);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v226 += 96;
    if (v226 == v343) {
      char v241 = 0;
    }
    else {
      char v241 = v240;
    }
    if ((v241 & 1) == 0) {
      goto LABEL_340;
    }
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_10229EE18);
  }
  v242 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_ERROR))
  {
    v243 = v226;
    if (v226[23] < 0) {
      v243 = *(char **)v226;
    }
    *(_DWORD *)int buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v243;
    __int16 v351 = 1026;
    int v352 = v228;
    __int16 v353 = 1026;
    int v354 = v230;
    _os_log_impl((void *)&_mh_execute_header, v242, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"export using paging, table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInTargetDB\":%{public}hhd, \"ExistsInSourceDB\":%{public}hhd}", buf, 0x28u);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_10229EE18);
    }
  }
  v244 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    if (v226[23] < 0) {
      v226 = *(char **)v226;
    }
    *(_DWORD *)int buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v226;
    __int16 v351 = 1026;
    int v352 = v228;
    __int16 v353 = 1026;
    int v354 = v230;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v244, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "export using paging, table is missing", "{\"msg%{public}.0s\":\"export using paging, table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInTargetDB\":%{public}hhd, \"ExistsInSourceDB\":%{public}hhd}", buf, 0x28u);
  }
  uint64_t v240 = 0;
LABEL_340:
  *(void *)int buf = &v342;
  sub_10020FE2C((void ***)buf);
  *(void *)int buf = v346;
  sub_1000A7B4C((void ***)buf);
  return v240;
}

void sub_10020BF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  STACK[0x9C0] = v86;
  sub_10020FE2C((void ***)&STACK[0x9F0]);
  for (uint64_t i = 960; i != -96; i -= 96)
    sub_10020D610((uint64_t)&STACK[0xA20] + i);
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  operator delete(v85);
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a85);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (SLOBYTE(STACK[0x7F7]) < 0) {
    operator delete((void *)STACK[0x7E0]);
  }
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  if (SLOBYTE(STACK[0x7B7]) < 0) {
    operator delete((void *)STACK[0x7A0]);
  }
  if (SLOBYTE(STACK[0x797]) < 0) {
    operator delete((void *)STACK[0x780]);
  }
  if (SLOBYTE(STACK[0x777]) < 0) {
    operator delete((void *)STACK[0x760]);
  }
  if (SLOBYTE(STACK[0x757]) < 0) {
    operator delete((void *)STACK[0x740]);
  }
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  if (SLOBYTE(STACK[0x717]) < 0) {
    operator delete((void *)STACK[0x700]);
  }
  if (SLOBYTE(STACK[0x6F7]) < 0) {
    operator delete((void *)STACK[0x6E0]);
  }
  if (SLOBYTE(STACK[0x6D7]) < 0) {
    operator delete((void *)STACK[0x6C0]);
  }
  if (SLOBYTE(STACK[0x6B7]) < 0) {
    operator delete((void *)STACK[0x6A0]);
  }
  if (SLOBYTE(STACK[0x697]) < 0) {
    operator delete((void *)STACK[0x680]);
  }
  if (SLOBYTE(STACK[0x677]) < 0) {
    operator delete((void *)STACK[0x660]);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  if (SLOBYTE(STACK[0x657]) < 0) {
    operator delete((void *)STACK[0x640]);
  }
  if (SLOBYTE(STACK[0x637]) < 0) {
    operator delete((void *)STACK[0x620]);
  }
  if (SLOBYTE(STACK[0x617]) < 0) {
    operator delete((void *)STACK[0x600]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x5F7]) < 0) {
    operator delete((void *)STACK[0x5E0]);
  }
  if (SLOBYTE(STACK[0x5D7]) < 0) {
    operator delete((void *)STACK[0x5C0]);
  }
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete((void *)STACK[0x5A0]);
  }
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete((void *)STACK[0x408]);
  }
  if (SLOBYTE(STACK[0x597]) < 0) {
    operator delete((void *)STACK[0x580]);
  }
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete((void *)STACK[0x540]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (SLOBYTE(STACK[0x537]) < 0) {
    operator delete((void *)STACK[0x520]);
  }
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete((void *)STACK[0x4E0]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete((void *)STACK[0x438]);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  if (SLOBYTE(STACK[0x947]) < 0) {
    operator delete((void *)STACK[0x930]);
  }
  if (SLOBYTE(STACK[0x817]) < 0) {
    operator delete((void *)STACK[0x800]);
  }
  if (SLOBYTE(STACK[0x927]) < 0) {
    operator delete((void *)STACK[0x910]);
  }
  if (SLOBYTE(STACK[0x907]) < 0) {
    operator delete((void *)STACK[0x8F0]);
  }
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  operator delete(a11);
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }
  if (SLOBYTE(STACK[0x8A7]) < 0) {
    operator delete((void *)STACK[0x890]);
  }
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  if (SLOBYTE(STACK[0x867]) < 0) {
    operator delete((void *)STACK[0x850]);
  }
  if (SLOBYTE(STACK[0x847]) < 0) {
    operator delete((void *)STACK[0x830]);
  }
  if (SLOBYTE(STACK[0x82F]) < 0) {
    operator delete((void *)STACK[0x818]);
  }
  if (SLOBYTE(STACK[0x95F]) < 0) {
    operator delete((void *)STACK[0x948]);
  }
  if (SLOBYTE(STACK[0x9B7]) < 0) {
    operator delete((void *)STACK[0x9A0]);
  }
  if (SLOBYTE(STACK[0x997]) < 0) {
    operator delete((void *)STACK[0x980]);
  }
  if (SLOBYTE(STACK[0x977]) < 0) {
    operator delete((void *)STACK[0x960]);
  }
  STACK[0xA20] = (unint64_t)&STACK[0x9D8];
  sub_1000A7B4C((void ***)&STACK[0xA20]);
  _Unwind_Resume(a1);
}

uint64_t sub_10020CE74()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 15150;
  }
}

void sub_10020CF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10020CF24(uint64_t **a1@<X0>, void **a2@<X8>)
{
  sub_100134750(&v14, "(SELECT DISTINCT LoiId from OTHER.MiLoLoiTable WHERE LoiGroupId IN (");
  unsigned int v4 = *a1;
  uint64_t v5 = **a1;
  for (uint64_t i = v4[1]; v5 != i; v5 += 24)
  {
    std::operator+<char>();
    CFStringRef v7 = std::string::append(&v15, "\"");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t v17 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (v17 >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    if (v17 >= 0) {
      std::string::size_type v10 = HIBYTE(v17);
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    std::string::append(&v14, (const std::string::value_type *)v9, v10);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (v5 == v4[1] - 24)
    {
      std::string::size_type v11 = 0;
      LOBYTE(__p[0]) = 0;
    }
    else
    {
      strcpy((char *)__p, ", ");
      std::string::size_type v11 = 2;
    }
    HIBYTE(v17) = v11;
    std::string::append(&v14, (const std::string::value_type *)__p, v11);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  sub_1001110E4((uint64_t)a2, size + 2);
  if (*((char *)a2 + 23) < 0) {
    a2 = (void **)*a2;
  }
  if (size)
  {
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v13 = &v14;
    }
    else {
      __int16 v13 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    memmove(a2, v13, size);
  }
  strcpy((char *)a2 + size, "))");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_10020D0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D13C()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 321100;
  }
}

void sub_10020D1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D1F0()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingLabelsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 2500;
  }
}

void sub_10020D284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D2A0()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMiLoLoiTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 1000;
  }
}

void sub_10020D334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D350()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRapportTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 1000;
  }
}

void sub_10020D3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D400()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAssociatedStateTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 1000;
  }
}

void sub_10020D494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D4B0()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsBluetoothIdentityTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 96;
  }
}

void sub_10020D544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D560()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsModelTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 100;
  }
}

void sub_10020D5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D610(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10020D668(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10020D698(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

void sub_10020D6D0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10020D700()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_10020D74C(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_1000E37C4((_OWORD *)a1, a2);
  return a1;
}

void sub_10020D77C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_101A52034(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020D798(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    sub_1005F809C(*(void *)(a1 + 8));
  }
  return a1;
}

void sub_10020D7D0(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void ***sub_10020D800(void ***a1, _OWORD *a2)
{
  unsigned int v4 = *a1;
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v13 = v8 - (void)*v4;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      std::string v15 = (char *)sub_1000C571C(v7, v14);
    }
    else {
      std::string v15 = 0;
    }
    std::string::size_type v16 = &v15[16 * v11];
    int64_t v17 = &v15[16 * v14];
    *(_OWORD *)std::string::size_type v16 = *a2;
    std::string::size_type v10 = v16 + 16;
    CFStringRef v19 = (char *)*v4;
    long long v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      long long v18 = (char *)*v4;
    }
    uint64_t *v4 = v16;
    v4[1] = v10;
    uint64_t v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    std::string::size_type v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void sub_10020D8FC(void ***a1)
{
  unsigned int v2 = *a1;
  if (*v2)
  {
    sub_10020D950((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10020D950(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_10020D9A0(uint64_t *a1)
{
  if (*a1)
  {
    sub_10020D950(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

unsigned char *sub_10020D9DC(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(v3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  BOOL result = (unsigned char *)(v3 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    BOOL result = sub_1000DC48C(result, *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 40);
    *(void *)(v3 + 56) = *((void *)a2 + 7);
    *(_OWORD *)BOOL result = v7;
  }
  *(void *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_10020DA48(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10020DA50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      long long v11 = *(_OWORD *)(v9 + 16);
      *(void *)(v8 + 32) = *(void *)(v9 + 32);
      *(_OWORD *)uint64_t v8 = v10;
      *(_OWORD *)(v8 + 16) = v11;
      long long v12 = *(_OWORD *)(v9 + 40);
      *(void *)(v8 + 56) = *(void *)(v9 + 56);
      *(_OWORD *)(v8 + 40) = v12;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 40) = 0;
      v8 += 64;
      v9 += 64;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_10020DD00((uint64_t)&v14, a2, v7, v6);
}

unsigned char *sub_10020DAD8(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    long long v5 = (long long *)a1[1];
    uint64_t v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = (v4 - *a1) >> 5;
      }
      uint64_t v14 = a1[4];
      uint64_t v34 = a1[4];
      std::string v15 = (char *)sub_10017EAF0(v14, v13);
      int64_t v17 = &v15[64 * (v13 >> 2)];
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2] - v18;
      if (v19)
      {
        int v20 = &v17[v19];
        uint64_t v21 = &v15[64 * (v13 >> 2)];
        do
        {
          long long v22 = *(_OWORD *)v18;
          long long v23 = *(_OWORD *)(v18 + 16);
          *((void *)v21 + 4) = *(void *)(v18 + 32);
          *(_OWORD *)uint64_t v21 = v22;
          *((_OWORD *)v21 + 1) = v23;
          long long v24 = *(_OWORD *)(v18 + 40);
          *((void *)v21 + 7) = *(void *)(v18 + 56);
          *(_OWORD *)(v21 + 40) = v24;
          *(void *)(v18 + 48) = 0;
          *(void *)(v18 + 56) = 0;
          *(void *)(v18 + 40) = 0;
          v21 += 64;
          v18 += 64;
        }
        while (v21 != v20);
        int64x2_t v25 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v25 = vdupq_n_s64(v18);
        int v20 = &v15[64 * (v13 >> 2)];
      }
      uint64_t v31 = *a1;
      *a1 = v15;
      a1[1] = v17;
      int64x2_t v32 = v25;
      uint64_t v26 = a1[3];
      a1[2] = v20;
      a1[3] = &v15[64 * v16];
      uint64_t v33 = v26;
      sub_10020E07C((uint64_t)&v31);
      uint64_t v4 = a1[2];
    }
    else
    {
      uint64_t v7 = v6 >> 6;
      BOOL v8 = v6 >> 6 < -1;
      uint64_t v9 = (v6 >> 6) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      sub_10020DDA4((uint64_t)&v31, v5, (long long *)v4, (uint64_t)&v5[-4 * (v10 >> 1)]);
      uint64_t v4 = v12;
      a1[1] -= v11 << 6;
      a1[2] = v12;
    }
  }
  long long v27 = *a2;
  long long v28 = a2[1];
  *(void *)(v4 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v4 = v27;
  *(_OWORD *)(v4 + 16) = v28;
  BOOL result = (unsigned char *)(v4 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    BOOL result = sub_1000DC48C(result, *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v30 = *(long long *)((char *)a2 + 40);
    *(void *)(v4 + 56) = *((void *)a2 + 7);
    *(_OWORD *)BOOL result = v30;
  }
  a1[2] += 64;
  return result;
}

uint64_t sub_10020DC4C(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_10020DE34(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10020DEE4(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10020DD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 64);
      long long v11 = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      uint64_t v12 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(v8 - 24);
      *(void *)(a4 + v7 - 8) = *(void *)(v8 - 8);
      *(_OWORD *)uint64_t v12 = v13;
      *(unsigned char *)(v8 - 1) = 0;
      *(unsigned char *)(v8 - 24) = 0;
      v7 -= 64;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

long long *sub_10020DDA4(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      long long v8 = v5[1];
      *(void *)(a4 + 32) = *((void *)v5 + 4);
      *(_OWORD *)a4 = v7;
      *(_OWORD *)(a4 + 16) = v8;
      uint64_t v9 = (void **)(a4 + 40);
      if (*(char *)(a4 + 63) < 0) {
        operator delete(*v9);
      }
      long long v10 = *(long long *)((char *)v5 + 40);
      *(void *)(a4 + 56) = *((void *)v5 + 7);
      *(_OWORD *)uint64_t v9 = v10;
      *((unsigned char *)v5 + 63) = 0;
      *((unsigned char *)v5 + 40) = 0;
      a4 += 64;
      v5 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_10020DE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 64);
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 64;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  sub_10020DF7C((uint64_t)v14);
  return a6;
}

uint64_t sub_10020DEE4(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      long long v6 = a2[1];
      *(void *)(v4 + 32) = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v4 = v5;
      *(_OWORD *)(v4 + 16) = v6;
      long long v7 = *(long long *)((char *)a2 + 40);
      *(void *)(v4 + 56) = *((void *)a2 + 7);
      *(_OWORD *)(v4 + 40) = v7;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 5) = 0;
      v4 += 64;
      a2 += 4;
    }
    while (a2 != a3);
    uint64_t v12 = v4;
  }
  char v10 = 1;
  sub_10020DFFC((uint64_t)v9);
  return v4;
}

uint64_t sub_10020DF7C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10020DFB4(a1);
  }
  return a1;
}

void sub_10020DFB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    v1 += 64;
  }
}

uint64_t sub_10020DFFC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10020E034(a1);
  }
  return a1;
}

void sub_10020E034(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 64;
  }
}

uint64_t sub_10020E07C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10020E0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *sub_10020E10C(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = (long long *)&a3[a5];
      }
      else
      {
        uint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = (uint64_t)sub_1001D8604(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_10020E2D0((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_10020E510(a3, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_1000DA5D8(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      long long v23 = v19;
      long long v24 = &v19[24 * v15];
      int64x2_t v25 = v24;
      uint64_t v26 = &v19[24 * v18];
      sub_10020E340(&v23, (long long *)a3, a5);
      uint64_t v5 = (std::string *)sub_10020E3D4((uint64_t)a1, &v23, (long long *)v5);
      sub_1001D8184((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_10020E2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020E2D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      v8 += 24;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_10020E488((uint64_t)&v12, a2, v7, v6);
}

void *sub_10020E340(void *result, long long *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 24 * a3;
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        BOOL result = sub_1000DC48C((unsigned char *)v4, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        *(void *)(v4 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      v4 += 24;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_10020E3CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10020E3D4(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_1001D8064(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10020E570(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10020E488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

std::string *sub_10020E510(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t sub_10020E570(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1000DC52C((uint64_t)v7);
  return v4;
}

uint64_t sub_10020E5F0()
{
  unsigned int v0 = sub_10020D13C();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020E638(v4);
}

uint64_t sub_10020E638(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationMeasurements");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationMeasurementTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

void sub_10020E81C()
{
  sub_1000C7F88(&v2);
  int v1 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsDatabaseFreeSpacePercentage", 0x8000100u, kCFAllocatorNull);
  sub_1004D123C(v2, (uint64_t)v0, (float *)&v1);
  CFRelease(v0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10020E8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020E8D8()
{
  unsigned int v0 = sub_10020CE74();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020E920(v4);
}

uint64_t sub_10020E920(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationRecordingEvents");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRecordingEventsTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_10020EB04()
{
  unsigned int v0 = sub_10020D560();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020EB4C(v4);
}

uint64_t sub_10020EB4C(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationModels");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationModelTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_10020ED30()
{
  unsigned int v0 = sub_10020EF5C();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020ED78(v4);
}

uint64_t sub_10020ED78(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationConfiguration");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationConfigurationTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_10020EF5C()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsConfigurationTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 6666;
  }
}

void sub_10020EFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020F00C()
{
  unsigned int v0 = sub_10020D350();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020F054(v4);
}

uint64_t sub_10020F054(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationRapport");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRapportTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_10020F238()
{
  unsigned int v0 = sub_10020D1F0();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020F280(v4);
}

uint64_t sub_10020F280(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationLabels");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationRecordingLabelsTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_10020F464()
{
  unsigned int v0 = sub_10020F690();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020F4AC(v4);
}

uint64_t sub_10020F4AC(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationLoggedEvents");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationLoggedEventsTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_10020F690()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLoggedEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 25000;
  }
}

void sub_10020F724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020F740()
{
  unsigned int v0 = sub_10020D400();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020F788(v4);
}

uint64_t sub_10020F788(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationAssociatedState");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationAssociatedStateTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

uint64_t sub_10020F96C()
{
  unsigned int v0 = sub_10020D4B0();
  sub_10020E81C();
  if (v1 >= 0.0 && v1 <= 1.0) {
    return (float)(v1 * (float)v0);
  }
  uint64_t v4 = sub_101A52048();
  return sub_10020F9B4(v4);
}

uint64_t sub_10020F9B4(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    return sub_1001FA654(a1, "MicroLocationBluetoothIdentityTable");
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EDB0);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Attempt to get numEntries without a backing database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EDB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLMicroLocationDatabase::numEntriesFromTriggerTable() [Table = CLMicroLocationBluetoothIdentityTable]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0;
  }
}

char *sub_10020FB98(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  char v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_10020FC44(v7, v4, v6);
      v6 += 6;
      uint64_t v4 = v12 + 96;
      v12 += 96;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10020FD38((uint64_t)v9);
  return v4;
}

void sub_10020FC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_10020FC44(int a1, char *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    *((void *)__dst + 5) = *((void *)a3 + 5);
    *(_OWORD *)(__dst + 24) = v6;
  }
  long long v7 = a3[3];
  *((void *)__dst + 8) = *((void *)a3 + 8);
  *((_OWORD *)__dst + 3) = v7;
  BOOL result = __dst + 72;
  if (*((char *)a3 + 95) < 0) {
    return sub_1000DC48C(result, *((void **)a3 + 9), *((void *)a3 + 10));
  }
  long long v9 = *(long long *)((char *)a3 + 72);
  *((void *)__dst + 11) = *((void *)a3 + 11);
  *(_OWORD *)BOOL result = v9;
  return result;
}

void sub_10020FD04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020FD38(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10020FD70((uint64_t *)a1);
  }
  return a1;
}

void sub_10020FD70(uint64_t *a1)
{
  unsigned int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 96;
      sub_10020FDC4(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_10020FDC4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_10020FE2C(void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_10020FDC4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10020FEC8()
{
}

void *sub_10020FEDC()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_10229EE48;
  return result;
}

void sub_10020FF14(uint64_t a1, void *a2)
{
  *a2 = off_10229EE48;
}

uint64_t sub_10020FF3C()
{
  return 0;
}

uint64_t sub_10020FF44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10020FF84()
{
}

void sub_10020FFC8(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x2Cu);
}

BOOL sub_10020FFF4()
{
  uint64_t v1 = qword_102419458;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_100210014(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x2Cu);
}

void sub_100210034(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x2Cu);
}

BOOL sub_100210070()
{
  unsigned int v2 = *(NSObject **)(v0 + 1112);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_10021008C()
{
  unsigned int v2 = *(NSObject **)(v0 + 1112);
  return os_signpost_enabled(v2);
}

void sub_1002100B8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_1002100D8()
{
  *((unsigned char *)&v237.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v237, " WHERE ");
  uint64_t v0 = std::string::append(&v237, "RecordingTimestamp");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  unsigned int v2 = std::string::append(&v238, " < ? OR ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v239, "RecordingTimestamp");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  long long v6 = std::string::append(&v240, " > ?");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  qword_10247A4E8 = v6->__r_.__value_.__r.__words[2];
  xmmword_10247A4D8 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A4D8, (void *)&_mh_execute_header);
  *((unsigned char *)&v236.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v236, "DELETE FROM ");
  char v8 = std::string::append(&v236, "MicroLocationMeasurements");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = std::string::append(&v237, " WHERE RecordingUUID in(SELECT RecordingUUID FROM ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  char v12 = std::string::append(&v238, "MicroLocationRecordingEvents");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (qword_10247A4E8 >= 0) {
    uint64_t v14 = (const std::string::value_type *)&xmmword_10247A4D8;
  }
  else {
    uint64_t v14 = (const std::string::value_type *)xmmword_10247A4D8;
  }
  if (qword_10247A4E8 >= 0) {
    std::string::size_type v15 = HIBYTE(qword_10247A4E8);
  }
  else {
    std::string::size_type v15 = *((void *)&xmmword_10247A4D8 + 1);
  }
  unint64_t v16 = std::string::append(&v239, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v240, ")");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  qword_10247A500 = v18->__r_.__value_.__r.__words[2];
  xmmword_10247A4F0 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A4F0, (void *)&_mh_execute_header);
  *((unsigned char *)&v239.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v239, "DELETE FROM ");
  uint64_t v20 = std::string::append(&v239, "MicroLocationRecordingEvents");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (qword_10247A4E8 >= 0) {
    long long v22 = (const std::string::value_type *)&xmmword_10247A4D8;
  }
  else {
    long long v22 = (const std::string::value_type *)xmmword_10247A4D8;
  }
  if (qword_10247A4E8 >= 0) {
    std::string::size_type v23 = HIBYTE(qword_10247A4E8);
  }
  else {
    std::string::size_type v23 = *((void *)&xmmword_10247A4D8 + 1);
  }
  long long v24 = std::string::append(&v240, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  qword_10247A518 = v24->__r_.__value_.__r.__words[2];
  xmmword_10247A508 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A508, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  uint64_t v26 = std::string::append(&v235, "MicroLocationModels");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  long long v28 = std::string::append(&v236, " WHERE ");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  long long v30 = std::string::append(&v237, "GenerationTimestamp");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  int64x2_t v32 = std::string::append(&v238, " < ? OR ");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  uint64_t v34 = std::string::append(&v239, "GenerationTimestamp");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v36 = std::string::append(&v240, " > ?");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  qword_10247A530 = v36->__r_.__value_.__r.__words[2];
  xmmword_10247A520 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A520, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  long long v38 = std::string::append(&v235, "MicroLocationConfiguration");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  long long v40 = std::string::append(&v236, " WHERE ");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  unint64_t v42 = std::string::append(&v237, "GenerationTimestamp");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  long long v44 = std::string::append(&v238, " < ? OR ");
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v46 = std::string::append(&v239, "GenerationTimestamp");
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  uint64_t v48 = std::string::append(&v240, " > ?");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_10247A548 = v48->__r_.__value_.__r.__words[2];
  xmmword_10247A538 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A538, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  uint64_t v50 = std::string::append(&v235, "MicroLocationRapport");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  uint64_t v52 = std::string::append(&v236, " WHERE ");
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  BOOL v54 = std::string::append(&v237, "GenerationTimestamp");
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  uint64_t v56 = std::string::append(&v238, " < ? OR ");
  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  long long v58 = std::string::append(&v239, "GenerationTimestamp");
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  long long v60 = std::string::append(&v240, " > ?");
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  qword_10247A560 = v60->__r_.__value_.__r.__words[2];
  xmmword_10247A550 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A550, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  BOOL v62 = std::string::append(&v235, "MicroLocationLabels");
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  double v64 = std::string::append(&v236, " WHERE ");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  std::string v66 = std::string::append(&v237, "ReceivedTimestamp");
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  std::string v68 = std::string::append(&v238, " < ? OR ");
  long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  std::string v70 = std::string::append(&v239, "ReceivedTimestamp");
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  std::string v72 = std::string::append(&v240, " > ?");
  long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  qword_10247A578 = v72->__r_.__value_.__r.__words[2];
  xmmword_10247A568 = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A568, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  std::string::size_type v74 = std::string::append(&v235, "MicroLocationLoggedEvents");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  uint64_t v76 = std::string::append(&v236, " WHERE ");
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  uint64_t v78 = std::string::append(&v237, "ReceivedTimestamp");
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  uint64_t v80 = std::string::append(&v238, " < ? OR ");
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  uint64_t v82 = std::string::append(&v239, "ReceivedTimestamp");
  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  uint64_t v84 = std::string::append(&v240, " > ?");
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  qword_10247A590 = v84->__r_.__value_.__r.__words[2];
  xmmword_10247A580 = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A580, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  unint64_t v86 = std::string::append(&v235, "MiLoServices");
  long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  v88 = std::string::append(&v236, " WHERE ");
  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  uint64_t v90 = std::string::append(&v237, "LastActiveTimestamp");
  long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  double v92 = std::string::append(&v238, " < ? OR ");
  long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v93;
  v92->__r_.__value_.__l.__size_ = 0;
  v92->__r_.__value_.__r.__words[2] = 0;
  v92->__r_.__value_.__r.__words[0] = 0;
  uint64_t v94 = std::string::append(&v239, "LastActiveTimestamp");
  long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  uint64_t v96 = std::string::append(&v240, " > ?");
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  qword_10247A5A8 = v96->__r_.__value_.__r.__words[2];
  xmmword_10247A598 = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A598, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  uint64_t v98 = std::string::append(&v235, "MicroLocationAssociatedState");
  long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0;
  v98->__r_.__value_.__r.__words[2] = 0;
  v98->__r_.__value_.__r.__words[0] = 0;
  v100 = std::string::append(&v236, " WHERE ");
  long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v101;
  v100->__r_.__value_.__l.__size_ = 0;
  v100->__r_.__value_.__r.__words[2] = 0;
  v100->__r_.__value_.__r.__words[0] = 0;
  v102 = std::string::append(&v237, "Timestamp");
  long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  v104 = std::string::append(&v238, " < ? OR ");
  long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v105;
  v104->__r_.__value_.__l.__size_ = 0;
  v104->__r_.__value_.__r.__words[2] = 0;
  v104->__r_.__value_.__r.__words[0] = 0;
  int v106 = std::string::append(&v239, "Timestamp");
  long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v108 = std::string::append(&v240, " > ?");
  long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  qword_10247A5C0 = v108->__r_.__value_.__r.__words[2];
  xmmword_10247A5B0 = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A5B0, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  long long v110 = std::string::append(&v235, "MiLoLoiTable");
  long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v111;
  v110->__r_.__value_.__l.__size_ = 0;
  v110->__r_.__value_.__r.__words[2] = 0;
  v110->__r_.__value_.__r.__words[0] = 0;
  long long v112 = std::string::append(&v236, " WHERE ");
  long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0;
  v112->__r_.__value_.__r.__words[2] = 0;
  v112->__r_.__value_.__r.__words[0] = 0;
  int v114 = std::string::append(&v237, "LastSeenTimeStamp");
  long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  uint64_t v116 = std::string::append(&v238, " < ? OR ");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  int v118 = std::string::append(&v239, "LastSeenTimeStamp");
  long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v119;
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  uint64_t v120 = std::string::append(&v240, " > ?");
  long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  qword_10247A5D8 = v120->__r_.__value_.__r.__words[2];
  xmmword_10247A5C8 = v121;
  v120->__r_.__value_.__l.__size_ = 0;
  v120->__r_.__value_.__r.__words[2] = 0;
  v120->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A5C8, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  long long v122 = std::string::append(&v235, "MiLoCustomLoiTable");
  long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  long long v124 = std::string::append(&v236, " WHERE ");
  long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v125;
  v124->__r_.__value_.__l.__size_ = 0;
  v124->__r_.__value_.__r.__words[2] = 0;
  v124->__r_.__value_.__r.__words[0] = 0;
  v126 = std::string::append(&v237, "LastSeenTimeStamp");
  long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  v128 = std::string::append(&v238, " < ? OR ");
  long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  v130 = std::string::append(&v239, "LastSeenTimeStamp");
  long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v131;
  v130->__r_.__value_.__l.__size_ = 0;
  v130->__r_.__value_.__r.__words[2] = 0;
  v130->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v132 = std::string::append(&v240, " > ?");
  long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  qword_10247A5F0 = v132->__r_.__value_.__r.__words[2];
  xmmword_10247A5E0 = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A5E0, (void *)&_mh_execute_header);
  *((unsigned char *)&v235.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v235, "DELETE FROM ");
  uint64_t v134 = std::string::append(&v235, "MicroLocationBluetoothIdentityTable");
  long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v135;
  v134->__r_.__value_.__l.__size_ = 0;
  v134->__r_.__value_.__r.__words[2] = 0;
  v134->__r_.__value_.__r.__words[0] = 0;
  __int16 v136 = std::string::append(&v236, " WHERE ");
  long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v137;
  v136->__r_.__value_.__l.__size_ = 0;
  v136->__r_.__value_.__r.__words[2] = 0;
  v136->__r_.__value_.__r.__words[0] = 0;
  v138 = std::string::append(&v237, "LastSeenTimeStamp");
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  v140 = std::string::append(&v238, " < ? OR ");
  long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v141;
  v140->__r_.__value_.__l.__size_ = 0;
  v140->__r_.__value_.__r.__words[2] = 0;
  v140->__r_.__value_.__r.__words[0] = 0;
  v142 = std::string::append(&v239, "LastSeenTimeStamp");
  long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v143;
  v142->__r_.__value_.__l.__size_ = 0;
  v142->__r_.__value_.__r.__words[2] = 0;
  v142->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v144 = std::string::append(&v240, " > ?");
  long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
  qword_10247A608 = v144->__r_.__value_.__r.__words[2];
  xmmword_10247A5F8 = v145;
  v144->__r_.__value_.__l.__size_ = 0;
  v144->__r_.__value_.__r.__words[2] = 0;
  v144->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A5F8, (void *)&_mh_execute_header);
  uint64_t v146 = (std::string *)sub_100134750(&v239, "MicroLocationLabels");
  uint64_t v147 = std::string::append(v146, ".");
  long long v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v148;
  v147->__r_.__value_.__l.__size_ = 0;
  v147->__r_.__value_.__r.__words[2] = 0;
  v147->__r_.__value_.__r.__words[0] = 0;
  long long v149 = std::string::append(&v240, "ClientID");
  long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
  qword_10247A620 = v149->__r_.__value_.__r.__words[2];
  xmmword_10247A610 = v150;
  v149->__r_.__value_.__l.__size_ = 0;
  v149->__r_.__value_.__r.__words[2] = 0;
  v149->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A610, (void *)&_mh_execute_header);
  long long v151 = (std::string *)sub_100134750(&v239, "MiLoServices");
  v152 = std::string::append(v151, ".");
  long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  v154 = std::string::append(&v240, "ServiceUUID");
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  unk_10247A638 = *((void *)&v154->__r_.__value_.__l + 2);
  xmmword_10247A628 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A628, (void *)&_mh_execute_header);
  CFStringRef v156 = (std::string *)sub_100134750(&v239, "MiLoServices");
  int v157 = std::string::append(v156, ".");
  long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v158;
  v157->__r_.__value_.__l.__size_ = 0;
  v157->__r_.__value_.__r.__words[2] = 0;
  v157->__r_.__value_.__r.__words[0] = 0;
  uint64_t v159 = std::string::append(&v240, "ServiceType");
  long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
  qword_10247A650 = v159->__r_.__value_.__r.__words[2];
  xmmword_10247A640 = v160;
  v159->__r_.__value_.__l.__size_ = 0;
  v159->__r_.__value_.__r.__words[2] = 0;
  v159->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A640, (void *)&_mh_execute_header);
  *((unsigned char *)&v219.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v219, "DELETE FROM ");
  long long v161 = std::string::append(&v219, "MicroLocationLabels");
  long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v162;
  v161->__r_.__value_.__l.__size_ = 0;
  v161->__r_.__value_.__r.__words[2] = 0;
  v161->__r_.__value_.__r.__words[0] = 0;
  long long v163 = std::string::append(&v220, " WHERE (");
  long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v164;
  v163->__r_.__value_.__l.__size_ = 0;
  v163->__r_.__value_.__r.__words[2] = 0;
  v163->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v165 = std::string::append(&v221, "ReceivedTimestamp");
  long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v166;
  v165->__r_.__value_.__l.__size_ = 0;
  v165->__r_.__value_.__r.__words[2] = 0;
  v165->__r_.__value_.__r.__words[0] = 0;
  long long v167 = std::string::append(&v222, " < ? OR ");
  long long v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v168;
  v167->__r_.__value_.__l.__size_ = 0;
  v167->__r_.__value_.__r.__words[2] = 0;
  v167->__r_.__value_.__r.__words[0] = 0;
  int v169 = std::string::append(&v223, "ReceivedTimestamp");
  long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v170;
  v169->__r_.__value_.__l.__size_ = 0;
  v169->__r_.__value_.__r.__words[2] = 0;
  v169->__r_.__value_.__r.__words[0] = 0;
  uint64_t v171 = std::string::append(&v224, " > ?) AND ");
  long long v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v172;
  v171->__r_.__value_.__l.__size_ = 0;
  v171->__r_.__value_.__r.__words[2] = 0;
  v171->__r_.__value_.__r.__words[0] = 0;
  if (qword_10247A620 >= 0) {
    std::string::size_type v173 = (const std::string::value_type *)&xmmword_10247A610;
  }
  else {
    std::string::size_type v173 = (const std::string::value_type *)xmmword_10247A610;
  }
  if (qword_10247A620 >= 0) {
    std::string::size_type v174 = HIBYTE(qword_10247A620);
  }
  else {
    std::string::size_type v174 = *((void *)&xmmword_10247A610 + 1);
  }
  int v175 = std::string::append(&v225, v173, v174);
  long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
  v226.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v176;
  v175->__r_.__value_.__l.__size_ = 0;
  v175->__r_.__value_.__r.__words[2] = 0;
  v175->__r_.__value_.__r.__words[0] = 0;
  uint64_t v177 = std::string::append(&v226, " IN (SELECT ");
  long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
  v227.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v178;
  v177->__r_.__value_.__l.__size_ = 0;
  v177->__r_.__value_.__r.__words[2] = 0;
  v177->__r_.__value_.__r.__words[0] = 0;
  if (qword_10247A620 >= 0) {
    int v179 = (const std::string::value_type *)&xmmword_10247A610;
  }
  else {
    int v179 = (const std::string::value_type *)xmmword_10247A610;
  }
  if (qword_10247A620 >= 0) {
    std::string::size_type v180 = HIBYTE(qword_10247A620);
  }
  else {
    std::string::size_type v180 = *((void *)&xmmword_10247A610 + 1);
  }
  uint64_t v181 = std::string::append(&v227, v179, v180);
  long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v182;
  v181->__r_.__value_.__l.__size_ = 0;
  v181->__r_.__value_.__r.__words[2] = 0;
  v181->__r_.__value_.__r.__words[0] = 0;
  long long v183 = std::string::append(&v228, " FROM ");
  long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v184;
  v183->__r_.__value_.__l.__size_ = 0;
  v183->__r_.__value_.__r.__words[2] = 0;
  v183->__r_.__value_.__r.__words[0] = 0;
  long long v185 = std::string::append(&v229, "MicroLocationLabels");
  long long v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
  v230.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v230.__r_.__value_.__l.__data_ = v186;
  v185->__r_.__value_.__l.__size_ = 0;
  v185->__r_.__value_.__r.__words[2] = 0;
  v185->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v187 = std::string::append(&v230, " INNER JOIN ");
  long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
  v231.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v188;
  v187->__r_.__value_.__l.__size_ = 0;
  v187->__r_.__value_.__r.__words[2] = 0;
  v187->__r_.__value_.__r.__words[0] = 0;
  long long v189 = std::string::append(&v231, "MiLoServices");
  long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
  v232.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v190;
  v189->__r_.__value_.__l.__size_ = 0;
  v189->__r_.__value_.__r.__words[2] = 0;
  v189->__r_.__value_.__r.__words[0] = 0;
  int v191 = std::string::append(&v232, " ON ");
  long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
  v233.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v192;
  v191->__r_.__value_.__l.__size_ = 0;
  v191->__r_.__value_.__r.__words[2] = 0;
  v191->__r_.__value_.__r.__words[0] = 0;
  if (qword_10247A620 >= 0) {
    uint64_t v193 = (const std::string::value_type *)&xmmword_10247A610;
  }
  else {
    uint64_t v193 = (const std::string::value_type *)xmmword_10247A610;
  }
  if (qword_10247A620 >= 0) {
    std::string::size_type v194 = HIBYTE(qword_10247A620);
  }
  else {
    std::string::size_type v194 = *((void *)&xmmword_10247A610 + 1);
  }
  long long v195 = std::string::append(&v233, v193, v194);
  long long v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
  v234.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v196;
  v195->__r_.__value_.__l.__size_ = 0;
  v195->__r_.__value_.__r.__words[2] = 0;
  v195->__r_.__value_.__r.__words[0] = 0;
  long long v197 = std::string::append(&v234, " LIKE '%--' || ");
  long long v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
  v235.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v198;
  v197->__r_.__value_.__l.__size_ = 0;
  v197->__r_.__value_.__r.__words[2] = 0;
  v197->__r_.__value_.__r.__words[0] = 0;
  if (byte_10247A63F >= 0) {
    std::string::size_type v199 = (const std::string::value_type *)&xmmword_10247A628;
  }
  else {
    std::string::size_type v199 = (const std::string::value_type *)xmmword_10247A628;
  }
  if (byte_10247A63F >= 0) {
    std::string::size_type v200 = byte_10247A63F;
  }
  else {
    std::string::size_type v200 = *((void *)&xmmword_10247A628 + 1);
  }
  long long v201 = std::string::append(&v235, v199, v200);
  long long v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
  v236.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v202;
  v201->__r_.__value_.__l.__size_ = 0;
  v201->__r_.__value_.__r.__words[2] = 0;
  v201->__r_.__value_.__r.__words[0] = 0;
  int v203 = std::string::append(&v236, " WHERE ");
  long long v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
  v237.__r_.__value_.__r.__words[2] = v203->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v204;
  v203->__r_.__value_.__l.__size_ = 0;
  v203->__r_.__value_.__r.__words[2] = 0;
  v203->__r_.__value_.__r.__words[0] = 0;
  if (qword_10247A650 >= 0) {
    uint64_t v205 = (const std::string::value_type *)&xmmword_10247A640;
  }
  else {
    uint64_t v205 = (const std::string::value_type *)xmmword_10247A640;
  }
  if (qword_10247A650 >= 0) {
    std::string::size_type v206 = HIBYTE(qword_10247A650);
  }
  else {
    std::string::size_type v206 = *((void *)&xmmword_10247A640 + 1);
  }
  long long v207 = std::string::append(&v237, v205, v206);
  long long v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
  v238.__r_.__value_.__r.__words[2] = v207->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v208;
  v207->__r_.__value_.__l.__size_ = 0;
  v207->__r_.__value_.__r.__words[2] = 0;
  v207->__r_.__value_.__r.__words[0] = 0;
  long long v209 = std::string::append(&v238, " = ");
  long long v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
  v239.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v210;
  v209->__r_.__value_.__l.__size_ = 0;
  v209->__r_.__value_.__r.__words[2] = 0;
  v209->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, 4uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  v213 = std::string::append(&v239, (const std::string::value_type *)p_p, size);
  long long v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v214;
  v213->__r_.__value_.__l.__size_ = 0;
  v213->__r_.__value_.__r.__words[2] = 0;
  v213->__r_.__value_.__r.__words[0] = 0;
  v215 = std::string::append(&v240, ")");
  long long v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
  unk_10247A668 = *((void *)&v215->__r_.__value_.__l + 2);
  xmmword_10247A658 = v216;
  v215->__r_.__value_.__l.__size_ = 0;
  v215->__r_.__value_.__r.__words[2] = 0;
  v215->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v236.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v235.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v232.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v231.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v229.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v227.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v226.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v224.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v220.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A658, (void *)&_mh_execute_header);
}

void sub_100211C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  if (*(char *)(v85 - 57) < 0) {
    operator delete(*(void **)(v85 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v85 - 89) < 0) {
    operator delete(*(void **)(v85 - 112));
  }
  if (*(char *)(v85 - 121) < 0) {
    operator delete(*(void **)(v85 - 144));
  }
  if (*(char *)(v85 - 153) < 0) {
    operator delete(*(void **)(v85 - 176));
  }
  if (*(char *)(v85 - 185) < 0) {
    operator delete(*(void **)(v85 - 208));
  }
  if (*(char *)(v85 - 217) < 0) {
    operator delete(*(void **)(v85 - 240));
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a85);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_100211FE4()
{
  if (*(char *)(v0 - 57) < 0) {
    operator delete(*(void **)(v0 - 80));
  }
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  if (*(char *)(v0 - 153) < 0) {
    operator delete(*(void **)(v0 - 176));
  }
  if (*(char *)(v0 - 185) < 0) {
    JUMPOUT(0x100211FACLL);
  }
  JUMPOUT(0x100211FB0);
}

void sub_100212058()
{
  if (*(char *)(v0 - 57) < 0) {
    operator delete(*(void **)(v0 - 80));
  }
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  if (*(char *)(v0 - 153) < 0) {
    JUMPOUT(0x100211FACLL);
  }
  JUMPOUT(0x100211FB0);
}

void sub_1002120B4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024197D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024197D0))
  {
    sub_100215014((std::string *)&xmmword_1024197B8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1024197B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024197D0);
  }
  if (byte_1024197CF < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_1024197B8, *((unint64_t *)&xmmword_1024197B8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1024197B8;
    *(void *)(a1 + 16) = unk_1024197C8;
  }
}

void sub_100212170(_Unwind_Exception *a1)
{
}

void sub_100212188(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024197F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024197F0))
  {
    sub_1001E8568((std::string *)&xmmword_1024197D8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1024197D8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024197F0);
  }
  if (byte_1024197EF < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_1024197D8, *((unint64_t *)&xmmword_1024197D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1024197D8;
    *(void *)(a1 + 16) = unk_1024197E8;
  }
}

void sub_100212244(_Unwind_Exception *a1)
{
}

uint64_t sub_10021225C(uint64_t a1, long long *a2, uint64_t a3, _OWORD *a4, void *a5)
{
  *(void *)a1 = *a5;
  long long v7 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v7;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_10026D81C(a1 + 32, a3);
  *(_OWORD *)(a1 + 64) = *a4;
  return a1;
}

void sub_1002122C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002122E4(uint64_t *a1)
{
  BOOL v2 = sub_10014C3C0(*a1);
  *((unsigned char *)a1 + 8) = v2;
  if (v2)
  {
    sub_10021270C(a1);
    sub_1005F7B0C(*a1, "MicroLocationRapport", (const char **)&off_10229EEE8, 0, 0);
    char v3 = sub_1005F93E4(*a1, "MicroLocationRapport");
    *((unsigned char *)a1 + 8) = v3;
    if (v3)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EEC8);
      }
      uint64_t v4 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315138;
        long long v9 = "MicroLocationRapport";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 == -1) {
          goto LABEL_16;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229EEC8);
      }
      long long v7 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        long long v9 = "MicroLocationRapport";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229EEC8);
        }
        long long v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMicroLocationRapportTable::initTable()", "%s\n");
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EEC8);
    }
    long long v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our CLMicroLocationRapportTable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 == -1)
      {
LABEL_16:
        long long v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationRapportTable::initTable()", "%s\n");
LABEL_26:
        if (v6 != buf) {
          free(v6);
        }
        return;
      }
LABEL_28:
      dispatch_once(&qword_102419450, &stru_10229EEC8);
      goto LABEL_16;
    }
  }
}

uint64_t sub_1002126DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  sub_1002122E4((uint64_t *)a1);
  return a1;
}

uint64_t sub_10021270C(uint64_t *a1)
{
  uint64_t result = sub_1005F93E4(*a1, "MicroLocationRapport");
  if (result)
  {
    uint64_t v3 = *a1;
    return sub_1001E1DE8(v3, (uint64_t *)&off_10229EEE8, 5, "MicroLocationRapport");
  }
  return result;
}

uint64_t sub_100212774(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v1 = *(void *)a1;
    if (byte_10247A687 >= 0) {
      BOOL v2 = &xmmword_10247A670;
    }
    else {
      BOOL v2 = (long long *)xmmword_10247A670;
    }
    sub_10014D518(v1, (uint64_t)v2);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EEC8);
  }
  uint64_t v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EEC8);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationRapportTable::insertOrReplace(const std::vector<CLMicroLocationRapportTable::Entry> &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

void sub_100212E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_100212EC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *((unsigned char *)&v45.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v45, "SELECT * FROM (");
  char v44 = 7;
  strcpy(__s, "SELECT ");
  long long v6 = std::string::append(&v45, __s, 7uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1002120B4((uint64_t)__p);
  if ((v42 & 0x80u) == 0) {
    char v8 = __p;
  }
  else {
    char v8 = (void **)__p[0];
  }
  if ((v42 & 0x80u) == 0) {
    std::string::size_type v9 = v42;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(&v46, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  char v12 = std::string::append(&v47, " FROM ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v48, "MicroLocationRapport");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  unint64_t v16 = std::string::append(&v49, " ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    long long v19 = (const std::string::value_type *)a2;
  }
  else {
    long long v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  long long v21 = std::string::append(&v50, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v23 = std::string::append(&v51, " ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  long long v25 = std::string::append(&v57, " ORDER BY ");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  long long v27 = std::string::append(&v58, "GenerationTimestamp");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  long long v29 = std::string::append(&v52, " DESC LIMIT ");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v40, a3);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v31 = &v40;
  }
  else {
    long long v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
  }
  long long v33 = std::string::append(&v59, (const std::string::value_type *)v31, size);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  long long v35 = std::string::append(&v53, ") ORDER BY ");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  long long v37 = std::string::append(&v56, "GenerationTimestamp");
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t v55 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)BOOL v54 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if ((char)v42 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v55 >= 0) {
    long long v39 = v54;
  }
  else {
    long long v39 = (void **)v54[0];
  }
  sub_10014D518(a1, (uint64_t)v39);
}

void sub_1002134A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  int buf = &a51;
  sub_100214F7C(&buf);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002138F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, unsigned int a6@<W5>, void *a7@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v55.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v55, "WHERE ");
    uint64_t v14 = std::string::append(&v55, "GenerationTimestamp");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unint64_t v16 = std::string::append(&v56, " > ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = *(char *)(a2 + 23);
    if (v18 >= 0) {
      long long v19 = (const std::string::value_type *)a2;
    }
    else {
      long long v19 = *(const std::string::value_type **)a2;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a2 + 8);
    }
    long long v21 = std::string::append(&v57, v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v23 = std::string::append(&v58, " AND ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    long long v25 = std::string::append(&v59, "GenerationTimestamp");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    long long v27 = std::string::append(&v60, "<= ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    int v29 = *(char *)(a3 + 23);
    if (v29 >= 0) {
      long long v30 = (const std::string::value_type *)a3;
    }
    else {
      long long v30 = *(const std::string::value_type **)a3;
    }
    if (v29 >= 0) {
      std::string::size_type v31 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v31 = *(void *)(a3 + 8);
    }
    int64x2_t v32 = std::string::append(&v61, v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a4 + 24))
    {
      *((unsigned char *)&v57.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v57, " AND ");
      long long v34 = std::string::append(&v57, "RTLOIType");
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      long long v36 = std::string::append(&v58, "=\"");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (!*(unsigned char *)(a4 + 24)) {
        sub_10020D700();
      }
      int v38 = *(char *)(a4 + 23);
      if (v38 >= 0) {
        long long v39 = (const std::string::value_type *)a4;
      }
      else {
        long long v39 = *(const std::string::value_type **)a4;
      }
      if (v38 >= 0) {
        std::string::size_type v40 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v40 = *(void *)(a4 + 8);
      }
      long long v41 = std::string::append(&v59, v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      long long v43 = std::string::append(&v60, "\"");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v45 = &v61;
      }
      else {
        std::string v45 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      std::string::append(&v62, (const std::string::value_type *)v45, size);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
    }
    if (a5[16])
    {
      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v60, " AND ");
      sub_100134750(&v58, "RtLoiGroupId");
      if (!a5[16]) {
        sub_10020D700();
      }
      sub_10022B538((const void **)&v58.__r_.__value_.__l.__data_, a5, (uint64_t)&v59);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v47 = &v59;
      }
      else {
        std::string v47 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v48 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = v59.__r_.__value_.__l.__size_;
      }
      std::string v49 = std::string::append(&v60, (const std::string::value_type *)v47, v48);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v51 = &v61;
      }
      else {
        std::string v51 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v52 = v61.__r_.__value_.__l.__size_;
      }
      std::string::append(&v62, (const std::string::value_type *)v51, v52);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    sub_100212EC8(*(void *)a1, (uint64_t)&v62, a6);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EEC8);
  }
  std::string v53 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v62.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select entries between times at loi", (uint8_t *)&v62, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v62, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EEC8);
    }
    LOWORD(v61.__r_.__value_.__l.__data_) = 0;
    BOOL v54 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLMicroLocationRapportTable::Entry> CLMicroLocationRapportTable::selectBetweenTimesAtLoi(const std::string &, const std::string &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &, uint32_t)", "%s\n", (const char *)v54);
    if (v54 != &v62) {
      free(v54);
    }
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
}

void sub_100213EF4(_Unwind_Exception *a1)
{
}

uint64_t sub_100214090(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v37, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v37, "MicroLocationRapport");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    long long v6 = std::string::append(&v38, " WHERE ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    char v8 = std::string::append(&v39, "GenerationTimestamp");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v40, " IN (");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    char v12 = std::string::append(&v41, "SELECT ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v42, "GenerationTimestamp");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unint64_t v16 = std::string::append(&v43, " FROM ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = std::string::append(&v44, "MicroLocationRapport");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v20 = std::string::append(&v45, " ORDER BY ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v46, "GenerationTimestamp");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v47, " LIMIT ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, a2);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v26 = &v36;
    }
    else {
      long long v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    long long v28 = std::string::append(&v48, (const std::string::value_type *)v26, size);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    long long v30 = std::string::append(&v51, ")");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t v50 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (v50 >= 0) {
      int64x2_t v32 = __p;
    }
    else {
      int64x2_t v32 = (void **)__p[0];
    }
    sub_10014D518(*(void *)a1, (uint64_t)v32);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229EEC8);
  }
  long long v33 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v51, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v51, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229EEC8);
    }
    LOWORD(__p[0]) = 0;
    long long v35 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationRapportTable::deleteOldestRows(uint64_t)", "%s\n", (const char *)v35);
    if (v35 != &v51) {
      free(v35);
    }
  }
  return 0;
}

void sub_100214724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002148CC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1002148FC@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  long long v6 = sqlite3_column_blob(a1, a2);
  int v7 = sqlite3_column_bytes(a1, a2);
  if (!v6) {
    sub_101A521B4();
  }
  int v8 = v7;
  long long v9 = (wireless_diagnostics::google::protobuf::MessageLite *)sub_10023E1E0(a3);
  uint64_t result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100134750(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10229F018;
  }
  return result;
}

void sub_1002149DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_10026D820(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_100214A24(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333) {
    sub_1001D7FD4();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v12 = 0x333333333333333;
  }
  else {
    unint64_t v12 = v7;
  }
  std::string::size_type v20 = a1 + 2;
  if (v12) {
    long long v13 = (char *)sub_100214C7C((uint64_t)(a1 + 2), v12);
  }
  else {
    long long v13 = 0;
  }
  unint64_t v16 = v13;
  int v17 = &v13[80 * v6];
  long long v19 = &v13[80 * v12];
  sub_100214B5C((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  int v18 = v17 + 80;
  sub_100214C04(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100214F00(&v16);
  return v14;
}

void sub_100214B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100214F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_100214B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, void *a6)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 16);
  }
  sub_10021225C(a2, (long long *)__p, a4, a5, a6);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100214BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100214C04(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100214CC4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100214C7C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_1001D7FA0();
  }
  return operator new(80 * a2);
}

uint64_t sub_100214CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80;
      sub_100214D90(a1, (__n128 *)(v7 - 80), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100214E24((uint64_t)v13);
  return v11;
}

void sub_100214D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_100214D90(uint64_t a1, __n128 *a2, uint64_t a3)
{
  a2->n128_u64[0] = *(void *)a3;
  uint64_t v5 = &a2->n128_u8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    a2[1].n128_u64[1] = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }
  sub_10026D81C(&a2[2], a3 + 32);
  __n128 result = *(__n128 *)(a3 + 64);
  a2[4] = result;
  return result;
}

void sub_100214E08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100214E24(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100214E5C((uint64_t *)a1);
  }
  return a1;
}

void sub_100214E5C(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100214EB0(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void sub_100214EB0(uint64_t a1, uint64_t a2)
{
  sub_10026D820((wireless_diagnostics::google::protobuf::MessageLite *)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void **sub_100214F00(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100214F34(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_100214EB0(v4, i - 80);
  }
}

void sub_100214F7C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_100214EB0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sub_100215014@<D0>(std::string *a1@<X8>)
{
  memset(&v3, 0, sizeof(v3));
  sub_100215078(&v3);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_10021505C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100215078(std::string *a1)
{
  sub_1002150C8(a1);
  sub_10021519C(a1);
  sub_10021527C(a1);
  sub_1001E8488(a1);

  return sub_10021535C(a1);
}

uint64_t sub_1002150C8(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v2 = std::string::append(&v7, "GenerationTimestamp");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_100215168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021519C(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "RTLOIType");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_100215248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021527C(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "Device");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_100215328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021535C(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "RtLoiGroupId");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_100215408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021543C()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101D04970;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  uint64_t v0 = std::string::append(&v19, "MicroLocationRapport");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  uint64_t v2 = std::string::append(&v20, " (");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1002120B4((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  long long v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v22, ") ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_100212188((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  unint64_t v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_10247A680 = *((void *)&v12->__r_.__value_.__l + 2);
  xmmword_10247A670 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A670, (void *)&_mh_execute_header);
}

void sub_100215634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 25) < 0) {
    operator delete(*(void **)(v40 - 48));
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002156E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = off_10229F040;
  *(void *)(a1 + 8) = 0;
  long long v6 = (char **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
  sub_1001EF9DC(a1 + 88, a2);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a5;
  *(unsigned char *)(a1 + 320) = 0;
  std::string::size_type v11 = *(_OWORD **)a4;
  unint64_t v12 = *(_OWORD **)(a4 + 8);
  if (*(_OWORD **)a4 != v12)
  {
    do
    {
      uint64_t v13 = *(void *)(a1 + 120);
      v31[0] = *v11;
      char v14 = operator new(0x10uLL);
      long long v34 = v14 + 1;
      long long v35 = v14 + 1;
      *char v14 = v31[0];
      std::string __p = v14;
      sub_1001FFE00(v13, (uint64_t)&__p, v28);
      if (__p)
      {
        long long v34 = __p;
        operator delete(__p);
      }
      sub_1002660C8(v31);
      char v32 = 1;
      long long v29 = *v11;
      char v30 = 1;
      sub_100320670(v28, (uint64_t)v31, (uint64_t)&v29, (unint64_t *)(a1 + 32), &__p);
      if (v32) {
        sub_10026633C(v31);
      }
      if (v36)
      {
        unsigned __int8 v16 = *(_OWORD **)(a1 + 16);
        unint64_t v15 = *(void *)(a1 + 24);
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - *v6) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v20 = v15 - (void)*v6;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            std::string v22 = (char *)sub_1000C571C(a1 + 24, v21);
          }
          else {
            std::string v22 = 0;
          }
          std::string v23 = &v22[16 * v18];
          *(_OWORD *)std::string v23 = *v11;
          long long v25 = *(char **)(a1 + 8);
          long long v24 = *(char **)(a1 + 16);
          long long v26 = v23;
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            long long v24 = *v6;
          }
          int v17 = v23 + 16;
          *(void *)(a1 + 8) = v26;
          *(void *)(a1 + 16) = v23 + 16;
          *(void *)(a1 + 24) = &v22[16 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *unsigned __int8 v16 = *v11;
          int v17 = v16 + 1;
        }
        *(void *)(a1 + 16) = v17;
      }
      sub_100216190((uint64_t)&__p);
      std::string __p = v28;
      sub_100216394((void ***)&__p);
      v11 += 15;
    }
    while (v11 != v12);
  }
  return a1;
}

void sub_100215988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39)
{
  sub_1000D7D80(v39 + 48);
  std::string v42 = *v40;
  if (*v40)
  {
    *(void *)(v39 + 16) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100215A2C(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4;
}

uint64_t sub_100215A3C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 112);
  if (!v3) {
    sub_10015E48C();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 48))(v3))
  {
    unint64_t v11 = a2;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_101D05030;
    strcpy(__p[0].__r_.__value_.__l.__data_, "Data Source Cancelled at index ");
    std::to_string(&v19, v11);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v19;
    }
    else {
      uint64_t v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v19.__r_.__value_.__l.__size_;
    }
    unint64_t v15 = std::string::append(__p, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_1002C5C80(exception, &v23);
  }
  long long v27 = *(_OWORD *)(*(void *)(a1 + 8) + 16 * a2);
  uint64_t v5 = *(void *)(a1 + 120);
  long long v6 = operator new(0x10uLL);
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v6 + 1);
  __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v6 + 1);
  *long long v6 = v27;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  sub_1001FFE00(v5, (uint64_t)__p, v22);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = operator new(0x10uLL);
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v8 + 1);
  __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v8 + 1);
  _OWORD *v8 = v27;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  sub_100200424(v7, (uint64_t)__p, v21);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  long long v9 = (long long *)v21[0];
  sub_100215E60(v22, v21[0]);
  sub_1002660C8(&v19);
  char v20 = 1;
  long long v24 = *v9;
  char v25 = 1;
  sub_100320670(v22, (uint64_t)&v19, (uint64_t)&v24, (unint64_t *)(a1 + 32), __p);
  sub_1002161E4(a1 + 128, (uint64_t)__p);
  sub_100216190((uint64_t)__p);
  if (v20) {
    sub_10026633C(&v19);
  }
  if (!*(unsigned char *)(a1 + 320))
  {
    int v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100134750(&v18, "fFingerprintCache optional is empty, database likely changed since data source construction");
    sub_1002C5C80(v17, &v18);
  }
  usleep(0x12Cu);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  sub_1001EF794((void ***)__p);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  sub_100216394((void ***)__p);
  return a1 + 128;
}

void sub_100215D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a61 < 0)
  {
    operator delete(a56);
    if ((v62 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v62)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v61);
  goto LABEL_10;
}

void sub_100215E60(uint64_t *a1, uint64_t a2)
{
  sub_1000C7F88(buf);
  double v15 = 0.0;
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaximumAgeForValidity", 0x8000100u, kCFAllocatorNull);
  int v5 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v4, &v15);
  CFRelease(v4);
  double v6 = v15;
  if (*(void *)v17) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v17);
  }
  double v7 = 1.0;
  if (v5) {
    double v7 = v6;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = *a1;
  uint64_t v10 = sub_100216494(*a1, v8, *(double *)(a2 + 16) - v7);
  sub_10021641C((uint64_t)a1, v10, a1[1]);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F0A0);
  }
  unint64_t v11 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *a1;
    uint64_t v12 = a1[1];
    char v14 = (char *)operator new(0x28uLL);
    *(void *)(v14 + 29) = 0;
    *(_OWORD *)char v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    sub_1001E0650(a2, v14);
    *(_DWORD *)int buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&v17[2] = "";
    *(_WORD *)int v17 = 2082;
    __int16 v18 = 2050;
    unint64_t v19 = 0xEEEEEEEEEEEEEEEFLL * ((v8 - v9) >> 3);
    __int16 v20 = 2050;
    unint64_t v21 = 0xEEEEEEEEEEEEEEEFLL * ((v12 - v13) >> 3);
    __int16 v22 = 2082;
    std::string v23 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"filterStaleWiFiMeasurementsForFingerprint\", \"num measurements before\":%{public}lu, \"num measurements after filter\":%{public}lu, \"Recording UUID\":%{public, location:escape_only}s}", buf, 0x30u);
    operator delete(v14);
  }
}

void sub_100216074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  _Unwind_Resume(a1);
}

void *sub_1002160A8(void *a1)
{
  *a1 = off_10229F040;
  sub_100216190((uint64_t)(a1 + 16));
  sub_1001EFA74(a1 + 11);
  sub_1000D7D80((uint64_t)(a1 + 6));
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10021610C(void *a1)
{
  *a1 = off_10229F040;
  sub_100216190((uint64_t)(a1 + 16));
  sub_1001EFA74(a1 + 11);
  sub_1000D7D80((uint64_t)(a1 + 6));
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_100216190(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(void *)(a1 + 176) = v2;
      operator delete(v2);
    }
    sub_1000D7D80(a1 + 104);
    sub_1000D7D80(a1 + 64);
    sub_1001F00CC(a1);
  }
  return a1;
}

void sub_1002161E4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 192) == *(unsigned __int8 *)(a2 + 192))
  {
    if (*(unsigned char *)(a1 + 192))
    {
      sub_1001F22B4(a1, (uint64_t *)a2);
      long long v4 = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v4;
      sub_1000E2E9C(a1 + 64, (uint64_t *)(a2 + 64));
      sub_1000E2E9C(a1 + 104, (uint64_t *)(a2 + 104));
      long long v5 = *(_OWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = v5;
      sub_1000F4EBC(a1 + 168, (__n128 *)(a2 + 168));
    }
  }
  else if (*(unsigned char *)(a1 + 192))
  {
    sub_1002162BC(a1);
  }
  else
  {
    sub_100216310(a1, a2);
    *(unsigned char *)(a1 + 192) = 1;
  }
}

uint64_t sub_1002162BC(uint64_t result)
{
  if (*(unsigned char *)(result + 192))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 168);
    if (v2)
    {
      *(void *)(v1 + 176) = v2;
      operator delete(v2);
    }
    sub_1000D7D80(v1 + 104);
    sub_1000D7D80(v1 + 64);
    double result = sub_1001F00CC(v1);
    *(unsigned char *)(v1 + 192) = 0;
  }
  return result;
}

uint64_t sub_100216310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000E2908(a1, (uint64_t *)a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_1000E2908(v4 + 64, (uint64_t *)(a2 + 64));
  sub_1000E2908(a1 + 104, (uint64_t *)(a2 + 104));
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  return a1;
}

void sub_100216394(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 120;
        sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 88));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10021641C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_100216558(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 120;
        sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(v7 - 88));
        uint64_t v7 = v8;
      }
      while (v8 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_100216494(uint64_t a1, uint64_t a2, double a3)
{
  if (a1 == a2) {
    return a2;
  }
  for (uint64_t i = a1 + 120; *(_DWORD *)(i - 24) != 1 || *(double *)(i - 80) >= a3; i += 120)
  {
    if (i == a2) {
      return a2;
    }
  }
  uint64_t v7 = i - 120;
  if (i - 120 != a2)
  {
    while (i != a2)
    {
      if (*(_DWORD *)(i + 96) != 1 || *(double *)(i + 40) >= a3)
      {
        long long v9 = *(_OWORD *)(i + 16);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)i;
        *(_OWORD *)(v7 + 16) = v9;
        sub_1002442C8(v7 + 32, i + 32);
        *(_DWORD *)(v7 + 112) = *(_DWORD *)(i + 112);
        v7 += 120;
      }
      i += 120;
    }
  }
  return v7;
}

uint64_t sub_100216558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    long long v6 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    *(_OWORD *)(a3 + 16) = v6;
    sub_1002442C8(a3 + 32, v4 + 32);
    *(_DWORD *)(a3 + 112) = *(_DWORD *)(v4 + 112);
    a3 += 120;
    v4 += 120;
  }
  while (v4 != v5);
  return v5;
}

void sub_1002165CC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1002165FC@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_1000E9354(v14);
  if (a1[23] >= 0) {
    long long v6 = a1;
  }
  else {
    long long v6 = *(const char **)a1;
  }
  if (!sub_100012960(a2, v6, v14))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
    uint64_t v8 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      long long v9 = a1[23] >= 0 ? (uint64_t *)a1 : *(uint64_t **)a1;
      *(_DWORD *)int buf = 68289795;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 2082;
      __int16 v20 = v9;
      __int16 v21 = 2082;
      __int16 v22 = "assert";
      __int16 v23 = 2081;
      long long v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F0C0);
      }
    }
    uint64_t v10 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      unint64_t v11 = a1[23] >= 0 ? (uint64_t *)a1 : *(uint64_t **)a1;
      *(_DWORD *)int buf = 68289795;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 2082;
      __int16 v20 = v11;
      __int16 v21 = 2082;
      __int16 v22 = "assert";
      __int16 v23 = 2081;
      long long v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't find key: ", "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F0C0);
      }
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
    {
      if (a1[23] >= 0) {
        uint64_t v13 = a1;
      }
      else {
        uint64_t v13 = *(const char **)a1;
      }
      *(_DWORD *)int buf = 68289795;
      int v16 = 0;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 2082;
      __int16 v20 = (uint64_t *)v13;
      __int16 v21 = 2082;
      __int16 v22 = "assert";
      __int16 v23 = 2081;
      long long v24 = "perSourceParams.get(key.c_str(), weightsDict)";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Couldn't find key: \", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
    __break(1u);
  }
  sub_10021690C((uint64_t)v14, a3);
  return sub_10013F3C4(v14);
}

void sub_1002168F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_10021690C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  if ((sub_1000A699C(a1, "wifi", &v12) & 1) == 0)
  {
    uint64_t v4 = sub_101A52608();
    goto LABEL_6;
  }
  uint64_t v4 = sub_1000A699C(a1, "ble", &v11);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    uint64_t result = sub_101A524A4(v4);
    goto LABEL_7;
  }
  uint64_t result = sub_1000A699C(a1, "uwb", &v10);
  if (result)
  {
    uint64_t v7 = v11;
    uint64_t v6 = v12;
    uint64_t v8 = v10;
    *a2 = off_10229F0F0;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
    return result;
  }
LABEL_7:
  uint64_t v9 = sub_101A52340(result);
  return sub_1002169C8(v9);
}

#error "100216A58: call analysis failed (funcsize=44)"

void sub_100216A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100216A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v11 = 0;
  BOOL v10 = 0;
  if ((sub_1000D2988(a1, "wifi", (BOOL *)&v11 + 1) & 1) == 0)
  {
    uint64_t v4 = sub_101A52608();
    goto LABEL_6;
  }
  uint64_t v4 = sub_1000D2988(a1, "ble", (BOOL *)&v11);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    uint64_t result = sub_101A524A4(v4);
    goto LABEL_7;
  }
  uint64_t result = sub_1000D2988(a1, "uwb", &v10);
  if (result)
  {
    char v6 = HIBYTE(v11);
    char v7 = v11;
    BOOL v8 = v10;
    *(void *)a2 = off_10229F140;
    *(unsigned char *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 9) = v7;
    *(unsigned char *)(a2 + 10) = v8;
    return result;
  }
LABEL_7:
  uint64_t v9 = sub_101A52340(result);
  return sub_100216B60(v9);
}

uint64_t sub_100216B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  sub_1000E9354(v71);
  if ((sub_1000A699C(a1, "jaccard_scale_factor", &v73) & 1) == 0)
  {
    sub_101A52BBC((uint64_t)v52, v8, v9, v10, v11, v12, v13, v14, v32, v33, v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)__p, v41, v42,
      (uint64_t)v43,
      v44,
      (uint64_t)v45,
      v46,
      v47);
LABEL_18:
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if ((sub_1000A699C(a1, "e2j_kernel_thr", &v72) & 1) == 0)
  {
    sub_101A52A4C((uint64_t)v52, v15, v16, v17, v18, v19, v20, v21, v32, v33, v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)__p, v41, v42,
      (uint64_t)v43,
      v44,
      (uint64_t)v45,
      v46,
      v47);
    goto LABEL_18;
  }
  if (!sub_100012960(a1, "per_source_params", v71))
  {
    sub_101A528DC((uint64_t)v52, v22, v23, v24, v25, v26, v27, v28, v32, v33, v34, v35, (uint64_t)v36, v37, (uint64_t)v38, v39, (uint64_t)__p, v41, v42,
      (uint64_t)v43,
      v44,
      (uint64_t)v45,
      v46,
      v47);
    goto LABEL_18;
  }
  *(void *)&long long v54 = v73;
  *((void *)&v54 + 1) = v72;
  sub_100134750(v52, "value_scale_factor");
  sub_1004CE5C0(v51, (uint64_t)v71);
  v51[0] = &off_1022A5E30;
  sub_1002165FC((const char *)v52, (uint64_t)v51, &v55);
  sub_100134750(v49, "euclidean_weight");
  sub_1004CE5C0(v48, (uint64_t)v71);
  v48[0] = &off_1022A5E30;
  sub_1002165FC((const char *)v49, (uint64_t)v48, &v58);
  sub_100134750(&v45, "jaccard_pos_weight");
  sub_1004CE5C0(&v43, (uint64_t)v71);
  std::string v43 = &off_1022A5E30;
  sub_1002165FC((const char *)&v45, (uint64_t)&v43, &v61);
  sub_100134750(&__p, "jaccard_neg_weight");
  sub_1004CE5C0(&v38, (uint64_t)v71);
  std::string v38 = &off_1022A5E30;
  sub_1002165FC((const char *)&__p, (uint64_t)&v38, &v64);
  sub_1004CE5C0(&v36, (uint64_t)v71);
  char v36 = &off_1022A5E30;
  sub_1002169C8(&v36);
  *(void *)&long long v69 = *(void *)a2;
  BYTE8(v69) = *(unsigned char *)(a2 + 8);
  sub_100218680((uint64_t)v70, a3);
  *(void *)(a4 + 24) = 0;
  long long v29 = (char *)operator new(0xF8uLL);
  *(void *)long long v29 = off_10229F190;
  *(_OWORD *)(v29 + 8) = v54;
  *((void *)v29 + 3) = off_10229F0F0;
  *((_OWORD *)v29 + 2) = v56;
  *((void *)v29 + 6) = v57;
  *((void *)v29 + 7) = off_10229F0F0;
  *((_OWORD *)v29 + 4) = v59;
  *((void *)v29 + 10) = v60;
  *((void *)v29 + 11) = off_10229F0F0;
  *((_OWORD *)v29 + 6) = v62;
  *((void *)v29 + 14) = v63;
  *((void *)v29 + 15) = off_10229F0F0;
  uint64_t v30 = v66;
  *((_OWORD *)v29 + 8) = v65;
  *((void *)v29 + 18) = v30;
  *((void *)v29 + 19) = off_10229F140;
  v29[162] = v68;
  *((_WORD *)v29 + 80) = v67;
  *(_OWORD *)(v29 + 168) = v69;
  sub_100218680((uint64_t)(v29 + 184), (uint64_t)v70);
  *(void *)(a4 + 24) = v29;
  if (v70[56]) {
    sub_1000D7D80((uint64_t)v70);
  }
  sub_10013F374(&v36);
  sub_10013F374(&v38);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p);
  }
  sub_10013F374(&v43);
  if (SHIBYTE(v47) < 0) {
    operator delete(v45);
  }
  sub_10013F374(v48);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  sub_10013F374(v51);
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  return sub_10013F3C4(v71);
}

void sub_100216FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(v72);
  if (a72) {
    sub_1000D7D80(v73);
  }
  sub_10013F374(&a13);
  sub_10013F374(&a15);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_10013F374(&a23);
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_10013F374(&a31);
  if (a38 < 0) {
    operator delete(a33);
  }
  sub_10013F374(&a39);
  if (a46 < 0) {
    operator delete(a41);
  }
  sub_10013F3C4(v74 - 96);
  _Unwind_Resume(a1);
}

double sub_1002170BC@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  v33[71] = a4;
  switch(a1)
  {
    case 1:
      *(void *)&long long v29 = *(void *)a3;
      BYTE8(v29) = *(unsigned char *)(a3 + 8);
      uint64_t v14 = v30;
      sub_100218680((uint64_t)v30, a5);
      *(void *)(a9 + 24) = 0;
      uint64_t v16 = (char *)operator new(0x58uLL);
      *(void *)uint64_t v16 = off_10229F2A0;
      *(_OWORD *)(v16 + 8) = v29;
      sub_100218680((uint64_t)(v16 + 24), (uint64_t)v30);
      *(void *)(a9 + 24) = v16;
      if (!v31) {
        return result;
      }
      goto LABEL_10;
    case 2:
      uint64_t v27 = 0;
      double v28 = 0.0;
      if ((sub_1000A699C(a2, "jaccard_threshold", &v28) & 1) == 0)
      {
        uint64_t v19 = sub_101A52E98();
LABEL_15:
        uint64_t v17 = sub_101A53004(v19);
LABEL_16:
        a1 = sub_101A52D2C(v17);
LABEL_17:
        sub_101A53170(a1, a2, a3, a4, a5, a6, a7, a8, v20, v21, *((uint64_t *)&v21 + 1), v22, v24, v25[0], v25[1], v25[2], v25[3], v25[4], v25[5],
          v25[6],
          v26,
          v27,
          *(uint64_t *)&v28,
          v29,
          *((uint64_t *)&v29 + 1),
          v30[0],
          v30[1],
          v30[2],
          v30[3],
          v30[4]);
      }
      uint64_t v17 = sub_1000A699C(a2, "jaccard_scale_factor", &v27);
      if ((v17 & 1) == 0) {
        goto LABEL_16;
      }
      *(void *)&long long v21 = *(void *)a3;
      BYTE8(v21) = *(unsigned char *)(a3 + 8);
      *(double *)&long long v23 = v28;
      *((void *)&v23 + 1) = v27;
      uint64_t v14 = v25;
      sub_100218680((uint64_t)v25, a5);
      *(void *)(a9 + 24) = 0;
      uint64_t v18 = (char *)operator new(0x68uLL);
      *(void *)uint64_t v18 = off_10229F320;
      *(_OWORD *)(v18 + 8) = v21;
      *(_OWORD *)(v18 + 24) = v23;
      sub_100218680((uint64_t)(v18 + 40), (uint64_t)v25);
      *(void *)(a9 + 24) = v18;
      if ((_BYTE)v26) {
LABEL_10:
      }
        sub_1000D7D80((uint64_t)v14);
      return result;
    case 3:
      double v28 = 0.0;
      uint64_t v19 = sub_1000A699C(a2, "tanimoto_base", &v28);
      if ((v19 & 1) == 0) {
        goto LABEL_15;
      }
      double result = v28;
      *(void *)a9 = off_10229F3A0;
      *(double *)(a9 + 8) = result;
      *(void *)(a9 + 24) = a9;
      return result;
    case 4:
    case 5:
      sub_100216B60(a2, a3, a5, a9);
      return result;
    case 6:
      goto LABEL_17;
    default:
      *(void *)&long long v32 = *(void *)a3;
      BYTE8(v32) = *(unsigned char *)(a3 + 8);
      uint64_t v14 = (uint64_t *)v33;
      sub_100218680((uint64_t)v33, a5);
      *(void *)(a9 + 24) = 0;
      uint64_t v15 = (char *)operator new(0x58uLL);
      *(void *)uint64_t v15 = off_10229F220;
      *(_OWORD *)(v15 + 8) = v32;
      sub_100218680((uint64_t)(v15 + 24), (uint64_t)v33);
      *(void *)(a9 + 24) = v15;
      if (!v33[56]) {
        return result;
      }
      goto LABEL_10;
  }
}

double sub_1002173D4@<D0>(int a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (sub_100217508()) {
    int v10 = sub_10098AE84();
  }
  else {
    int v10 = 0;
  }
  int v11 = sub_1002175B8();
  int v12 = sub_100217668();
  uint64_t v21 = sub_100274A14(v11, v12, v10);
  sub_1000C7F88(&v24);
  BOOL v23 = 0;
  CFStringRef v13 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAdaptiveSensorsEnable", 0x8000100u, kCFAllocatorNull);
  char v14 = sub_1000D29FC(v24, (uint64_t)v13, &v23);
  CFRelease(v13);
  BOOL v18 = v23;
  if (v25) {
    sub_1000DB0A0(v25);
  }
  char v19 = v14 ^ 1;
  if (v18) {
    char v19 = 1;
  }
  char v22 = v19;
  return sub_1002170BC(a1, a2, (uint64_t)&v21, a3, a4, v15, v16, v17, a5);
}

void sub_1002174EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100217508()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingUwbRangeEnable", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return 1;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_10021759C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002175B8()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingWifiRssiEnable", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return 1;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_10021764C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100217668()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMeasurementProcessingBleLeechEnable", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return 1;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_1002176FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100217718(uint64_t a1)
{
  if (a1 < 2) {
    operator new();
  }
  int v1 = sub_101A5331C(a1);
  sub_1002177A8(v1, v2);
}

void sub_1002177A8(int a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 == 2)
  {
    sub_100217994((void *)a2);
    sub_1000C7F88(&v16);
    LODWORD(v15) = 0;
    CFStringRef v3 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListSmallClusterSize", 0x8000100u, kCFAllocatorNull);
    int v4 = sub_1004D08E4(v16, (uint64_t)v3, &v15);
    CFRelease(v3);
    uint64_t v5 = LODWORD(v15);
    if (v17) {
      sub_1000DB0A0(v17);
    }
    uint64_t v6 = 20;
    if (v4) {
      uint64_t v6 = v5;
    }
    *(void *)(a2 + 24) = v6;
    sub_1000C7F88(&v16);
    double v15 = 0.0;
    CFStringRef v7 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListSmallClusterRelativeSize", 0x8000100u, kCFAllocatorNull);
    int v8 = sub_1000A6A10(v16, (uint64_t)v7, &v15);
    CFRelease(v7);
    double v9 = v15;
    if (v17) {
      sub_1000DB0A0(v17);
    }
    double v10 = 0.2;
    if (v8) {
      double v10 = v9;
    }
    *(double *)(a2 + 32) = v10;
    sub_1000C7F88(&v16);
    double v15 = 0.0;
    CFStringRef v11 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListSmallClusterDistanceThreshold", 0x8000100u, kCFAllocatorNull);
    int v12 = sub_1000A6A10(v16, (uint64_t)v11, &v15);
    CFRelease(v11);
    double v13 = v15;
    if (v17) {
      sub_1000DB0A0(v17);
    }
    double v14 = 0.375;
    if (v12) {
      double v14 = v13;
    }
    *(double *)(a2 + 40) = v14;
  }
  else
  {
    sub_100217A7C((void *)a2);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
}

void sub_100217950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  double v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100217994(void *a1@<X8>)
{
  sub_1000C7F88(&v6);
  CFArrayRef v5 = 0;
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListClusterDistanceThresholdVector", 0x8000100u, kCFAllocatorNull);
  BOOL v3 = sub_1004D1D1C(v6, v2, (CFTypeRef *)&v5);
  CFRelease(v2);
  if (v3)
  {
    sub_1002186EC(v5, (uint64_t)a1);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    int v4 = operator new(8uLL);
    *a1 = v4;
    *v4++ = 0x3FD199999999999ALL;
    a1[1] = v4;
    a1[2] = v4;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100217A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100217A7C(void *a1@<X8>)
{
  sub_1000C7F88(&v6);
  CFArrayRef v5 = 0;
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMagicalMomentsClusterDistanceThresholdVector", 0x8000100u, kCFAllocatorNull);
  BOOL v3 = sub_1004D1D1C(v6, v2, (CFTypeRef *)&v5);
  CFRelease(v2);
  if (v3)
  {
    sub_1002188B8(v5, (uint64_t)a1);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    int v4 = operator new(0x18uLL);
    a1[2] = v4 + 3;
    *(_OWORD *)int v4 = xmmword_101D08FA8;
    uint64_t v4[2] = 0x3FD8000000000000;
    *a1 = v4;
    a1[1] = v4 + 3;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100217B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100217CDC(uint64_t a1)
{
  int v9 = 0;
  if (sub_1004D0870(a1, "type", &v9))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    switch(v9)
    {
      case 0:
        uint64_t v2 = sub_1000A699C(a1, "sigma", &v8);
        if (v2) {
          operator new();
        }
        goto LABEL_16;
      case 1:
        uint64_t v6 = sub_1000A699C(a1, "sigma", &v8);
        if (v6) {
          operator new();
        }
        goto LABEL_17;
      case 2:
        uint64_t v3 = sub_1000A699C(a1, "sigma", &v8);
        if ((v3 & 1) == 0) {
          goto LABEL_14;
        }
        uint64_t v4 = sub_1000A699C(a1, "power", &v7);
        if (v4) {
          operator new();
        }
        return;
      case 3:
        uint64_t v5 = sub_1000A699C(a1, "sigma", &v8);
        if (v5) {
          operator new();
        }
        goto LABEL_15;
      default:
        goto LABEL_13;
    }
  }
  else
  {
    sub_101A53EA0();
LABEL_13:
    uint64_t v3 = sub_101A53604(&v9);
LABEL_14:
    uint64_t v5 = sub_101A53BC8(v3);
LABEL_15:
    uint64_t v2 = sub_101A53D34(v5);
LABEL_16:
    uint64_t v6 = sub_101A53784(v2);
LABEL_17:
    uint64_t v4 = sub_101A538F0(v6);
  }
  sub_101A53A5C(v4);
  __assert_rtn("CLUniformKernelFunction", "CLKernelFunction.h", 97, "sigma > 0.0");
}

void sub_100217EEC()
{
}

double sub_100217F3C@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1002173D4(a1, a2, 0, a3, a4);
}

double sub_100217F48@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W5>, int a6@<W6>, int a7@<W7>, uint64_t a8@<X8>)
{
  return sub_1002170BC(a1, a2, a3, 0, a4, a5, a6, a7, a8);
}

double sub_100217F54@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W5>, int a6@<W6>, int a7@<W7>, uint64_t a8@<X8>)
{
  return sub_1002170BC(a1, a2, a3, 1, a4, a5, a6, a7, a8);
}

uint64_t sub_100217F60()
{
  if (sub_1002175B8()) {
    uint64_t v0 = 2;
  }
  else {
    uint64_t v0 = 0;
  }
  if (sub_100217668()) {
    v0 |= 0x20uLL;
  }
  if (sub_100217508() && sub_10098AE84()) {
    return v0 | 0x40;
  }
  return v0;
}

void sub_100217FB8(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 3)
  {
    uint64_t v3 = (uint64_t *)sub_101A5400C();
    sub_100218004(v3, v4);
  }
  else
  {
    uint64_t v2 = (uint64_t)*(&off_10229F5F0 + (int)a1);
    *a2 = off_10229F550;
    a2[1] = v2;
    a2[3] = a2;
  }
}

void sub_100218004(uint64_t *a1, unsigned int a2)
{
  if (a2 < 2) {
    goto LABEL_4;
  }
  if (a2 == 2) {
    return;
  }
  if (a2 == 3)
  {
LABEL_4:
    sub_1000C7F88(buf);
    v27[0] = 0.0;
    CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMinimumMicroLocationProbabilityForLocalization", 0x8000100u, kCFAllocatorNull);
    int v5 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v4, v27);
    CFRelease(v4);
    double v6 = v27[0];
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (!v5) {
      double v6 = 0.005;
    }
    uint64_t v7 = (long long *)*a1;
    uint64_t v8 = (long long *)a1[1];
    if ((long long *)*a1 == v8)
    {
      double v9 = 0.0;
    }
    else
    {
      double v9 = 0.0;
      do
      {
        if (*((double *)v7 + 2) < 0.0)
        {
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229F0C0);
          }
          double v10 = qword_102419458;
          if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *((void *)v7 + 2);
            *(_DWORD *)int buf = 134349056;
            *(void *)&uint8_t buf[4] = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning microlocation probability should be non-negative %{public}f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419450 != -1) {
              dispatch_once(&qword_102419450, &stru_10229F0C0);
            }
            uint64_t v12 = *((void *)v7 + 2);
            LODWORD(v27[0]) = 134349056;
            *(void *)((char *)v27 + 4) = v12;
            double v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "auto CLMicroLocationAlgorithms::removeImprobableLocations(std::vector<CLMicroLocationResultInternal> &, LocalizerType)::(anonymous class)::operator()(auto, const auto &) const [currentSum:auto = double, result:auto = CLMicroLocationResultInternal]", "%s\n", v13);
            if (v13 != buf) {
              free(v13);
            }
          }
        }
        double v9 = v9 + *((double *)v7 + 2);
        v7 += 2;
      }
      while (v7 != v8);
    }
    if (fabs(v9 + -1.0) > nextafter(1.0, INFINITY) + -1.0)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F0C0);
      }
      double v14 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134349056;
        *(double *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning microlocation probability vector should sum to 1.0 %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229F0C0);
        }
        LODWORD(v27[0]) = 134349056;
        *(double *)((char *)v27 + 4) = v9;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationAlgorithms::removeImprobableLocations(std::vector<CLMicroLocationResultInternal> &, LocalizerType)", "%s\n", v26);
        if (v26 != buf) {
          free(v26);
        }
      }
    }
    uint64_t v16 = *a1;
    double v15 = (long long *)a1[1];
    if ((long long *)*a1 == v15)
    {
      double v19 = 0.0;
      int v17 = (long long *)*a1;
    }
    else
    {
      int v17 = (long long *)*a1;
      while (1)
      {
        double v18 = *((double *)v17 + 2);
        if (v18 < v6) {
          break;
        }
        v17 += 2;
        if (v17 == v15)
        {
          double v19 = 0.0;
          goto LABEL_52;
        }
      }
      double v19 = v18 + 0.0;
    }
    if (v17 != v15)
    {
      char v22 = v17 + 2;
      if (v17 + 2 != v15)
      {
        do
        {
          double v23 = *((double *)v22 + 2);
          if (v23 >= v6)
          {
            long long v24 = *v22;
            *(long long *)((char *)v17 + 12) = *(long long *)((char *)v22 + 12);
            *int v17 = v24;
            v17 += 2;
          }
          else
          {
            double v19 = v23 + v19;
          }
          v22 += 2;
        }
        while (v22 != v15);
        uint64_t v16 = *a1;
        double v15 = (long long *)a1[1];
      }
    }
    if (v17 != v15)
    {
      double v15 = v17;
      a1[1] = (uint64_t)v17;
    }
LABEL_52:
    if ((long long *)v16 != v15)
    {
      double v25 = v19 / (double)(unint64_t)(((uint64_t)v15 - v16) >> 5);
      do
      {
        *(double *)(v16 + 16) = v25 + *(double *)(v16 + 16);
        v16 += 32;
      }
      while ((long long *)v16 != v15);
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
    uint64_t v20 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v29 = 2050;
      uint64_t v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"invalid\", \"localizer type\":%{public}lu}", buf, 0x1Cu);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F0C0);
      }
    }
    uint64_t v21 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v29 = 2050;
      uint64_t v30 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "invalid", "{\"msg%{public}.0s\":\"invalid\", \"localizer type\":%{public}lu}", buf, 0x1Cu);
    }
  }
}

void sub_10021862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100218650(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100218680(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    sub_1001EF40C(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_1002186D0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 56)) {
    sub_1000D7D80(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_1002186EC@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100218774, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100218758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100218774(const void *a1, uint64_t a2)
{
  sub_100218858(a1);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v13 = (char *)sub_1000DA54C(a2 + 16, v12);
      uint64_t v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[8 * v9];
    double v15 = &v13[8 * v12];
    *(void *)double v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = v3;
    CFRange v7 = v6 + 1;
  }
  *(void *)(a2 + 8) = v7;
}

uint64_t sub_100218858(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CFNumberGetTypeID())
  {
    uint64_t result = sub_101A542E4();
    goto LABEL_5;
  }
  uint64_t valuePtr = 0;
  uint64_t result = CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
  if (!result)
  {
LABEL_5:
    uint64_t v4 = sub_101A54180(result);
    return sub_1002188B8(v4);
  }
  return result;
}

double sub_1002188B8@<D0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  CFArrayApplyFunction(a1, v7, (CFArrayApplierFunction)sub_100218940, &v5);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

void sub_100218924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100218940(const void *a1, uint64_t a2)
{
  sub_100218858(a1);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a2) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v13 = (char *)sub_1000DA54C(a2 + 16, v12);
      uint64_t v8 = *(void **)a2;
      uint64_t v6 = *(void **)(a2 + 8);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[8 * v9];
    double v15 = &v13[8 * v12];
    *(void *)double v14 = v4;
    CFRange v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = v3;
    CFRange v7 = v6 + 1;
  }
  *(void *)(a2 + 8) = v7;
}

void sub_100218A24()
{
}

double sub_100218A38(double *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      return a1[3];
    case 5:
      return a1[2];
    case 1:
      return a1[1];
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F0C0);
  }
  uint64_t v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Datatype not supported", buf, 2u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  double result = 0.0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual T CLMicroLocationUtils::PerSourceWeights<double>::operator[](const CLMicroLocationFingerprint::Measurement &) const [T = double]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0.0;
  }
  return result;
}

void sub_100218BFC()
{
}

BOOL sub_100218C10(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  switch(v2)
  {
    case 6:
      int v3 = a1[10];
      return v3 != 0;
    case 5:
      int v3 = a1[9];
      return v3 != 0;
    case 1:
      int v3 = a1[8];
      return v3 != 0;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F0C0);
  }
  BOOL v5 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Datatype not supported", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F0C0);
    }
    CFRange v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual T CLMicroLocationUtils::PerSourceWeights<BOOL>::operator[](const CLMicroLocationFingerprint::Measurement &) const [T = BOOL]", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100218DE0(uint64_t a1)
{
  *(void *)a1 = off_10229F190;
  if (*(unsigned char *)(a1 + 240)) {
    sub_1000D7D80(a1 + 184);
  }
  return a1;
}

void sub_100218E30(uint64_t a1)
{
  *(void *)a1 = off_10229F190;
  if (*(unsigned char *)(a1 + 240)) {
    sub_1000D7D80(a1 + 184);
  }

  operator delete();
}

void *sub_100218EA0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0xF8uLL);
  void *v2 = off_10229F190;
  sub_100219028((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100218EF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100218F08(uint64_t a1, void *a2)
{
  *a2 = off_10229F190;
  return sub_100219028((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100218F34(uint64_t result)
{
  if (*(unsigned char *)(result + 240)) {
    return sub_1000D7D80(result + 184);
  }
  return result;
}

void sub_100218F48(unsigned char *__p)
{
  if (__p[240]) {
    sub_1000D7D80((uint64_t)(__p + 184));
  }

  operator delete(__p);
}

double sub_100218F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D2C98(a2, a3, a1 + 24, a1 + 56, a1 + 88, a1 + 120, a1 + 152, (uint64_t *)(a1 + 168), *(double *)(a1 + 8), *(double *)(a1 + 16), a1 + 184);
}

uint64_t sub_100218FDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10021901C()
{
}

uint64_t sub_100219028(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = off_10229F0F0;
  uint64_t v3 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = off_10229F0F0;
  uint64_t v4 = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = off_10229F0F0;
  uint64_t v5 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = off_10229F0F0;
  uint64_t v6 = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = off_10229F140;
  __int16 v7 = *(_WORD *)(a2 + 152);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_WORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_100218680(a1 + 176, a2 + 176);
  return a1;
}

uint64_t sub_100219148(uint64_t a1)
{
  *(void *)a1 = off_10229F220;
  if (*(unsigned char *)(a1 + 80)) {
    sub_1000D7D80(a1 + 24);
  }
  return a1;
}

void sub_100219198(uint64_t a1)
{
  *(void *)a1 = off_10229F220;
  if (*(unsigned char *)(a1 + 80)) {
    sub_1000D7D80(a1 + 24);
  }

  operator delete();
}

char *sub_100219208(uint64_t a1)
{
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = off_10229F220;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_100218680((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_100219268(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10021927C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10229F220;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_100218680(a2 + 24, a1 + 24);
}

uint64_t sub_1002192B0(uint64_t result)
{
  if (*(unsigned char *)(result + 80)) {
    return sub_1000D7D80(result + 24);
  }
  return result;
}

void sub_1002192C4(unsigned char *__p)
{
  if (__p[80]) {
    sub_1000D7D80((uint64_t)(__p + 24));
  }

  operator delete(__p);
}

double sub_100219308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D2AD0(a2, a3, (uint64_t *)(a1 + 8), a1 + 24);
}

uint64_t sub_100219320(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100219360()
{
}

uint64_t sub_10021936C(uint64_t a1)
{
  *(void *)a1 = off_10229F2A0;
  if (*(unsigned char *)(a1 + 80)) {
    sub_1000D7D80(a1 + 24);
  }
  return a1;
}

void sub_1002193BC(uint64_t a1)
{
  *(void *)a1 = off_10229F2A0;
  if (*(unsigned char *)(a1 + 80)) {
    sub_1000D7D80(a1 + 24);
  }

  operator delete();
}

char *sub_10021942C(uint64_t a1)
{
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = off_10229F2A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_100218680((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_10021948C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002194A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10229F2A0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_100218680(a2 + 24, a1 + 24);
}

uint64_t sub_1002194D4(uint64_t result)
{
  if (*(unsigned char *)(result + 80)) {
    return sub_1000D7D80(result + 24);
  }
  return result;
}

void sub_1002194E8(unsigned char *__p)
{
  if (__p[80]) {
    sub_1000D7D80((uint64_t)(__p + 24));
  }

  operator delete(__p);
}

double sub_10021952C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D2B2C(a2, a3, (uint64_t *)(a1 + 8), a1 + 24);
}

uint64_t sub_100219544(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100219584()
{
}

uint64_t sub_100219590(uint64_t a1)
{
  *(void *)a1 = off_10229F320;
  if (*(unsigned char *)(a1 + 96)) {
    sub_1000D7D80(a1 + 40);
  }
  return a1;
}

void sub_1002195E0(uint64_t a1)
{
  *(void *)a1 = off_10229F320;
  if (*(unsigned char *)(a1 + 96)) {
    sub_1000D7D80(a1 + 40);
  }

  operator delete();
}

char *sub_100219650(uint64_t a1)
{
  int v2 = (char *)operator new(0x68uLL);
  *(void *)int v2 = off_10229F320;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  sub_100218680((uint64_t)(v2 + 40), a1 + 40);
  return v2;
}

void sub_1002196B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002196CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10229F320;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return sub_100218680(a2 + 40, a1 + 40);
}

uint64_t sub_100219708(uint64_t result)
{
  if (*(unsigned char *)(result + 96)) {
    return sub_1000D7D80(result + 40);
  }
  return result;
}

void sub_10021971C(unsigned char *__p)
{
  if (__p[96]) {
    sub_1000D7D80((uint64_t)(__p + 40));
  }

  operator delete(__p);
}

uint64_t sub_100219760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D2BA8(a2, a3, (uint64_t *)(a1 + 8), a1 + 40);
}

uint64_t sub_10021977C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002197BC()
{
}

void sub_1002197CC()
{
}

void *sub_1002197E0(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_10229F3A0;
  result[1] = v3;
  return result;
}

uint64_t sub_100219828(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10229F3A0;
  a2[1] = v2;
  return result;
}

void sub_100219854(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_100219864(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002198A4()
{
}

double sub_1002198B0(double *a1, double a2)
{
  *(void *)a1 = off_10229F420;
  a1[1] = 1.0;
  if (a2 <= 0.0) {
    sub_101A54448();
  }
  double result = 1.0 / a2;
  a1[1] = result;
  return result;
}

void sub_1002198FC()
{
}

uint64_t sub_100219910(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = off_10229E3C8;
  double v4 = sub_1001DEC98((uint64_t)&v6, a2, a3);
  return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 24))(a1, sqrt(v4));
}

double sub_1002199AC(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2));
}

double sub_1002199B8(double *a1, double a2)
{
  *(void *)a1 = off_10229F478;
  a1[1] = 0.5;
  if (a2 <= 0.0) {
    sub_101A54474();
  }
  double result = 1.0 / ((a2 + a2) * a2);
  a1[1] = result;
  return result;
}

double sub_100219A0C(uint64_t a1, uint64_t *a2, void *a3)
{
  double v3 = *(double *)(a1 + 8);
  uint64_t v6 = off_10229E3C8;
  double v4 = -(v3 * sub_1001DEC98((uint64_t)&v6, a2, a3));

  return exp(v4);
}

double sub_100219A70(uint64_t a1, double a2)
{
  return exp(-(*(double *)(a1 + 8) * a2) * a2);
}

uint64_t sub_100219A80(uint64_t a1, long double a2, long double a3)
{
  *(void *)a1 = off_10229F4C0;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q2;
  if (a3 <= 0.0) {
    sub_101A544A0();
  }
  if (a2 <= 0.0) {
    sub_101A544CC();
  }
  *(long double *)(a1 + 8) = a3;
  *(long double *)(a1 + 16) = 1.0 / pow(a2, a3);
  return a1;
}

void sub_100219AF4()
{
}

double sub_100219B08(uint64_t a1, long double a2)
{
  double v2 = *(double *)(a1 + 16);
  long double v3 = -(v2 * pow(a2, *(long double *)(a1 + 8)));

  return exp(v3);
}

double sub_100219B40(uint64_t a1, double a2)
{
  BOOL v2 = *(double *)(a1 + 8) <= a2;
  double result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

void *sub_100219B58(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_10229F550;
  result[1] = v3;
  return result;
}

uint64_t sub_100219BA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10229F550;
  a2[1] = v2;
  return result;
}

uint64_t sub_100219BCC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(a1 + 8))(a2, *a3, a3[1], *a4, a4[1], *a5, a5[1]);
}

uint64_t sub_100219BF0(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10229F5D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100219C30()
{
  return &off_10229F5D0;
}

void sub_100219C3C(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x26u);
}

void sub_100219CFC(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x2Cu);
}

void sub_100219D28(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_INFO, a4, a5, 0x26u);
}

void sub_100219D40(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x26u);
}

BOOL sub_100219D58()
{
  uint64_t v1 = qword_102419458;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_100219DB4()
{
  uint64_t v2 = *(NSObject **)(v0 + 1112);
  return os_signpost_enabled(v2);
}

BOOL sub_100219DE0()
{
  uint64_t v2 = *(NSObject **)(v0 + 1112);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_100219DFC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x2Cu);
}

void sub_100219E1C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x2Cu);
}

BOOL sub_100219E54()
{
  uint64_t v2 = *(NSObject **)(v0 + 1112);
  return os_signpost_enabled(v2);
}

void *sub_100219EB0(void *result, uint64_t a2)
{
  *double result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = a2;
  return result;
}

void sub_100219EBC(uint64_t *a1, long long *a2)
{
  sub_1000C7F88(&v13);
  BOOL v12 = 0;
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEnableEventLogging", 0x8000100u, kCFAllocatorNull);
  char v5 = sub_1000D29FC(v13, (uint64_t)v4, &v12);
  CFRelease(v4);
  BOOL v6 = v12;
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v6) {
    char v7 = 0;
  }
  else {
    char v7 = v5;
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = (long long *)a1[1];
    if ((unint64_t)v8 >= a1[2])
    {
      uint64_t v10 = sub_10021A878(a1, a2);
    }
    else
    {
      long long v9 = *a2;
      *(long long *)((char *)v8 + 12) = *(long long *)((char *)a2 + 12);
      long long *v8 = v9;
      sub_1002603DC(v8 + 2, a2 + 2);
      uint64_t v10 = (uint64_t)(v8 + 21);
      a1[1] = (uint64_t)(v8 + 21);
    }
    a1[1] = v10;
    unint64_t v11 = 0xCF3CF3CF3CF3CF3DLL * ((v10 - *a1) >> 4);
    if (v11 >= sub_10021A000()) {
      sub_10021A0B0(a1);
    }
  }
}

void sub_100219FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021A000()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEventLoggerMaxBufferSize", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 32;
  }
}

void sub_10021A094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021A0B0(uint64_t *a1)
{
  if (*a1 == a1[1]) {
    return 1;
  }
  if (sub_10021A414(a1[3]))
  {
    sub_10021A674(a1);
    return 1;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F608);
  }
  uint64_t v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "EventLogger, failed to flush to disk", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F608);
    }
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMicroLocationEventLogger::flushToDisk()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  if (v4 >= sub_10021A000())
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F608);
    }
    uint64_t v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "EventLogger, Max buffer reached after failing to flush to disk. Clearing event logger buffer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F608);
      }
      char v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMicroLocationEventLogger::flushToDisk()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_10021A674(a1);
  }
  return 0;
}

uint64_t *sub_10021A3D0(uint64_t *a1)
{
  sub_10021A0B0(a1);
  uint64_t v3 = (void **)a1;
  sub_10021A7F0(&v3);
  return a1;
}

uint64_t sub_10021A414(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 248);
    if (!v2) {
      operator new();
    }
    uint64_t v3 = sub_10031AED8(v2);
    sub_10021AB70(a1);
    return v3;
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F608);
    }
    uint64_t v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Can't insert because the database is invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F608);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::insertOrReplace(const std::vector<TableEntry> &) [TableEntry = CLMicroLocationLoggedEventsTable::Entry]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return 0;
  }
}

void sub_10021A648()
{
}

uint64_t sub_10021A674(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      uint64_t v4 = v2 - 336;
      sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)(v2 - 304));
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;

  return sub_10021A6D8((uint64_t)a1);
}

uint64_t sub_10021A6D8(uint64_t result)
{
  unint64_t v1 = *(void *)result;
  int64x2_t v2 = *(int64x2_t *)(result + 8);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(void *)result)), 4uLL);
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xCF3CF3CF3CF3CF3DLL * v3.i64[1] > v4)
  {
    BOOL v6 = (uint64_t *)result;
    uint64_t v7 = result + 16;
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = (char *)sub_10021AA20(v7, v4);
    }
    uint64_t v10 = v8;
    unint64_t v11 = &v8[336 * v5];
    uint64_t v12 = v11;
    uint64_t v13 = &v8[336 * v9];
    sub_10021A9A8(v6, &v10);
    return sub_10021AB1C((uint64_t)&v10);
  }
  return result;
}

void sub_10021A798(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_10021A7C0(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10021A7F0(void ***a1)
{
  unint64_t v1 = *a1;
  int64x2_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 336;
        sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 304));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10021A878(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xC30C30C30C30C3) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x61861861861861) {
    unint64_t v9 = 0xC30C30C30C30C3;
  }
  else {
    unint64_t v9 = v5;
  }
  double v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10021AA20(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[336 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  int v17 = &v10[336 * v9];
  long long v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)unint64_t v11 = v12;
  sub_1002603DC(v11 + 32, a2 + 2);
  v16 += 336;
  sub_10021A9A8(a1, v15);
  uint64_t v13 = a1[1];
  sub_10021AB1C((uint64_t)v15);
  return v13;
}

void sub_10021A994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10021AB1C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021A9A8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10021AA6C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10021AA20(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4) {
    sub_1001D7FA0();
  }
  return operator new(336 * a2);
}

uint64_t sub_10021AA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 368; ; i -= 336)
  {
    uint64_t v12 = a3 + i;
    if (a3 + i - 368 == a5) {
      break;
    }
    uint64_t v13 = (_OWORD *)(a7 + i - 704);
    long long v14 = *(_OWORD *)(v12 - 704);
    *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(v12 - 692);
    *uint64_t v13 = v14;
    uint64_t v15 = a7 + i - 672;
    sub_1002603DC(v15, v12 - 672);
  }
  return a6;
}

uint64_t sub_10021AB1C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 336;
    sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)(i - 304));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10021AB70(uint64_t a1)
{
  unsigned int v2 = sub_10020F4AC(a1);
  if (sub_10021AD68() > v2) {
    return 1;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F608);
  }
  uint64_t v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136446210;
    uint64_t v8 = "MicroLocationLoggedEvents";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F608);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationDatabase::freeSpaceIfFull() [Table = CLMicroLocationLoggedEventsTable]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t result = sub_100207E9C(a1);
  if (result)
  {
    if (*(uint64_t *)(a1 + 160) <= 0) {
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 160);
    }
    sub_10003CC68(a1 + 72, v5);
    return 1;
  }
  return result;
}

uint64_t sub_10021AD68()
{
  sub_1000C7F88(&v5);
  unsigned int v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLoggedEventsTableMaxRows", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1004D08E4(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  unsigned int v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v1) {
    return v2;
  }
  else {
    return 25000;
  }
}

void sub_10021ADFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10021AE18(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419810, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419810))
  {
    sub_10021D7C8((std::string *)&xmmword_1024197F8);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1024197F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419810);
  }
  if (byte_10241980F < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_1024197F8, *((unint64_t *)&xmmword_1024197F8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1024197F8;
    *(void *)(a1 + 16) = unk_102419808;
  }
}

void sub_10021AED4(_Unwind_Exception *a1)
{
}

void sub_10021AEEC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419830))
  {
    sub_1001E8568((std::string *)&xmmword_102419818);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102419818, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419830);
  }
  if (byte_10241982F < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102419818, *((unint64_t *)&xmmword_102419818 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102419818;
    *(void *)(a1 + 16) = unk_102419828;
  }
}

void sub_10021AFA8(_Unwind_Exception *a1)
{
}

void sub_10021AFC0(uint64_t *a1)
{
  BOOL v2 = sub_10014C3C0(*a1);
  *((unsigned char *)a1 + 8) = v2;
  if (v2)
  {
    sub_1005F7B0C(*a1, "MicroLocationBluetoothIdentityTable", (const char **)&off_10229F648, 0, 0);
    char v3 = sub_1005F93E4(*a1, "MicroLocationBluetoothIdentityTable");
    *((unsigned char *)a1 + 8) = v3;
    if (v3)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F628);
      }
      unsigned int v4 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315138;
        unint64_t v9 = "MicroLocationBluetoothIdentityTable";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 == -1) {
          goto LABEL_16;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F628);
      }
      uint64_t v7 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        unint64_t v9 = "MicroLocationBluetoothIdentityTable";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229F628);
        }
        uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMicroLocationBluetoothIdentityTable::initTable()", "%s\n");
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F628);
    }
    uint64_t v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136446210;
      unint64_t v9 = "MicroLocationBluetoothIdentityTable";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our %{public}s table", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 == -1)
      {
LABEL_16:
        uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationBluetoothIdentityTable::initTable()", "%s\n");
LABEL_26:
        if (v6 != buf) {
          free(v6);
        }
        return;
      }
LABEL_28:
      dispatch_once(&qword_102419450, &stru_10229F628);
      goto LABEL_16;
    }
  }
}

uint64_t sub_10021B3D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  sub_10021AFC0((uint64_t *)a1);
  return a1;
}

uint64_t sub_10021B408(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5, double a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 32) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  uint64_t v10 = (unsigned char *)(a1 + 40);
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C(v10, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v11 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)uint64_t v10 = v11;
  }
  *(double *)(a1 + 64) = a6;
  return a1;
}

void sub_10021B4A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021B4C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v1 = *(void *)a1;
    if (byte_10247A69F >= 0) {
      BOOL v2 = &xmmword_10247A688;
    }
    else {
      BOOL v2 = (long long *)xmmword_10247A688;
    }
    sub_10014D518(v1, (uint64_t)v2);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F628);
  }
  char v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F628);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationBluetoothIdentityTable::insertOrReplace(const std::vector<CLMicroLocationBluetoothIdentityTable::Entry> &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

void sub_10021BAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::bad_cast a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_10021BB6C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *((unsigned char *)&v43.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v43, "SELECT * FROM (");
  char v42 = 7;
  strcpy(__s, "SELECT ");
  uint64_t v6 = std::string::append(&v43, __s, 7uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10021AE18((uint64_t)__p);
  if ((v40 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v9 = v40;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(&v44, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v45, " FROM ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  long long v14 = std::string::append(&v46, "MicroLocationBluetoothIdentityTable");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v47, " ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    double v19 = (const std::string::value_type *)a2;
  }
  else {
    double v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  uint64_t v21 = std::string::append(&v48, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  double v23 = std::string::append(&v49, " ORDER BY ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  double v25 = std::string::append(&v55, "LastSeenTimeStamp");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  uint64_t v27 = std::string::append(&v50, " DESC LIMIT ");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v38, a3);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v29 = &v38;
  }
  else {
    __int16 v29 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v38.__r_.__value_.__l.__size_;
  }
  char v31 = std::string::append(&v56, (const std::string::value_type *)v29, size);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  uint64_t v33 = std::string::append(&v51, ") ORDER BY ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v54, "LastSeenTimeStamp");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  int64_t v53 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string::size_type v52 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v53 >= 0) {
    uint64_t v37 = v52;
  }
  else {
    uint64_t v37 = (void **)v52[0];
  }
  sub_10014D518(a1, (uint64_t)v37);
}

void sub_10021C0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  int buf = &a51;
  sub_10021D730(&buf);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10021C4EC()
{
}

void sub_10021C500(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x10021C2E0);
}

void sub_10021C510(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v32.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v32, "WHERE ");
    uint64_t v10 = std::string::append(&v32, "LastSeenTimeStamp");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v33, " > ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      long long v15 = (const std::string::value_type *)a2;
    }
    else {
      long long v15 = *(const std::string::value_type **)a2;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(a2 + 8);
    }
    long long v17 = std::string::append(&v34, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    double v19 = std::string::append(&v35, " AND ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v36, "LastSeenTimeStamp");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    double v23 = std::string::append(&v37, "<= ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    int v25 = *(char *)(a3 + 23);
    if (v25 >= 0) {
      long long v26 = (const std::string::value_type *)a3;
    }
    else {
      long long v26 = *(const std::string::value_type **)a3;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v27 = *(void *)(a3 + 8);
    }
    long long v28 = std::string::append(&v38, v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    __p[2] = (void *)v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    sub_10021BB6C(*(void *)a1, (uint64_t)__p, a4);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F628);
  }
  uint64_t v30 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F628);
    }
    LOWORD(v38.__r_.__value_.__l.__data_) = 0;
    char v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLMicroLocationBluetoothIdentityTable::Entry> CLMicroLocationBluetoothIdentityTable::selectBetweenTimes(const std::string &, const std::string &, uint32_t)", "%s\n", v31);
    if (v31 != (char *)__p) {
      free(v31);
    }
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
}

void sub_10021C8B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10021C980(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v37, "DELETE FROM ");
    unsigned int v4 = std::string::append(&v37, "MicroLocationBluetoothIdentityTable");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = std::string::append(&v38, " WHERE ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v39, "LastSeenTimeStamp");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v40, " IN (");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v41, "SELECT ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = std::string::append(&v42, "LastSeenTimeStamp");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v16 = std::string::append(&v43, " FROM ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v44, "MicroLocationBluetoothIdentityTable");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    long long v20 = std::string::append(&v45, " ORDER BY ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v46, "LastSeenTimeStamp");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v47, " LIMIT ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, a2);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v26 = &v36;
    }
    else {
      long long v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    long long v28 = std::string::append(&v48, (const std::string::value_type *)v26, size);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t v30 = std::string::append(&v51, ")");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t v50 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (v50 >= 0) {
      std::string v32 = __p;
    }
    else {
      std::string v32 = (void **)__p[0];
    }
    sub_10014D518(*(void *)a1, (uint64_t)v32);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F628);
  }
  std::string v33 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v51, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v51, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F628);
    }
    LOWORD(__p[0]) = 0;
    std::string v35 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationBluetoothIdentityTable::deleteOldestRows(uint64_t)", "%s\n", (const char *)v35);
    if (v35 != &v51) {
      free(v35);
    }
  }
  return 0;
}

void sub_10021D014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10021D1BC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10021D1EC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v6 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL) {
    sub_1001D7FD4();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v7) {
    unint64_t v7 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v12 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v12 = v7;
  }
  long long v20 = a1 + 2;
  if (v12) {
    long long v13 = (char *)sub_10021D4B8((uint64_t)(a1 + 2), v12);
  }
  else {
    long long v13 = 0;
  }
  std::string::size_type v16 = v13;
  long long v17 = &v13[72 * v6];
  long long v19 = &v13[72 * v12];
  sub_10021D33C((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  long long v18 = v17 + 72;
  sub_10021D440(a1, &v16);
  uint64_t v14 = a1[1];
  sub_10021D6B4(&v16);
  return v14;
}

void sub_10021D328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10021D6B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_10021D33C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, double *a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 16);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a5;
    uint64_t v12 = *(void *)(a5 + 16);
  }
  sub_10021B408(a2, v9, v10, (long long *)__dst, (long long *)__p, *a6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_10021D40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021D440(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10021D504((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10021D4B8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1001D7FA0();
  }
  return operator new(72 * a2);
}

uint64_t sub_10021D504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      long long v8 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10021D5D0((uint64_t)v12);
  return v10;
}

uint64_t sub_10021D5D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10021D608((uint64_t *)a1);
  }
  return a1;
}

void sub_10021D608(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10021D65C(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void sub_10021D65C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 16);
    operator delete(v3);
  }
}

void **sub_10021D6B4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10021D6E8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_10021D65C(v4, i - 72);
  }
}

void sub_10021D730(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_10021D65C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sub_10021D7C8@<D0>(std::string *a1@<X8>)
{
  memset(&v3, 0, sizeof(v3));
  sub_10021D82C(&v3);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_10021D810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021D82C(std::string *a1)
{
  sub_10021D87C(a1);
  sub_10021D950(a1);
  sub_10021DA30(a1);
  sub_10021DB10(a1);

  return sub_10021DBF0(a1);
}

uint64_t sub_10021D87C(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v2 = std::string::append(&v7, "RowId");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10021D91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021D950(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "LastSeenTimeStamp");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10021D9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021DA30(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "BluetoothId");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10021DADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021DB10(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "DeviceName");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10021DBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021DBF0(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "StableIdentifier");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10021DC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021DCD0()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101D04970;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationBluetoothIdentityTable");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  uint64_t v2 = std::string::append(&v20, " (");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_10021AE18((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  long long v8 = std::string::append(&v22, ") ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_10021AEEC((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_10247A698 = *((void *)&v12->__r_.__value_.__l + 2);
  xmmword_10247A688 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A688, (void *)&_mh_execute_header);
}

void sub_10021DEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 25) < 0) {
    operator delete(*(void **)(v40 - 48));
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10021DF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1002660C8(a1);
  *(_OWORD *)(v6 + 152) = 0u;
  *(void *)(v6 + 136) = a3;
  *(void *)(v6 + 144) = a4;
  *(_OWORD *)(v6 + 168) = 0u;
  *(void *)(v6 + 184) = 0;
  *(CFAbsoluteTime *)(v6 + 152) = j__CFAbsoluteTimeGetCurrent_5();
  operator new();
}

void sub_10021E02C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void **sub_10021E098(void ***a1, void **a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100222878(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10021E0E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  sub_10021E098((void ***)(a1 + 160), 0);

  return sub_10026633C(a1);
}

void sub_10021E13C(void *a1, uint64_t *a2, void *a3)
{
  if (a2[1] - *a2 == a3[1] - *a3)
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v37 = *a2;
    uint64_t v38 = a2[1];
    if (v38 != *a2)
    {
      unint64_t v6 = 0;
      long long v7 = (char **)(a1 + 21);
      char v8 = 1;
      do
      {
        if ((v8 & 1) == 0) {
          sub_100132EFC(&v49[6], (uint64_t)",", 1);
        }
        sub_100132EFC(&v49[6], (uint64_t)"ConfidenceLevel:", 16);
        long long v9 = (void *)std::ostream::operator<<();
        uint64_t v10 = sub_100132EFC(v9, (uint64_t)"ConfidenceReason:", 17);
        sub_1002757B0(*(_DWORD *)(*a3 + 4 * v6), &__p);
        if (SBYTE3(v44) >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if (SBYTE3(v44) >= 0) {
          uint64_t v12 = BYTE3(v44);
        }
        else {
          uint64_t v12 = *(void *)v42;
        }
        sub_100132EFC(v10, (uint64_t)p_p, v12);
        if (SBYTE3(v44) < 0) {
          operator delete(__p);
        }
        uint64_t v13 = *(unsigned int *)(*a2 + 4 * v6);
        uint64_t v14 = *(unsigned int *)(*a3 + 4 * v6);
        unsigned __int8 v16 = (uint64_t *)a1[22];
        unint64_t v15 = a1[23];
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - *v7) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v19 = v15 - (void)*v7;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            std::string v22 = (char *)sub_1000DA54C((uint64_t)(a1 + 23), v21);
          }
          else {
            std::string v22 = 0;
          }
          std::string v23 = &v22[8 * v18];
          *(void *)std::string v23 = v13 | (v14 << 32);
          long long v17 = v23 + 8;
          long long v25 = (char *)a1[21];
          long long v24 = (char *)a1[22];
          if (v24 != v25)
          {
            do
            {
              uint64_t v26 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            long long v24 = *v7;
          }
          a1[21] = v23;
          a1[22] = v17;
          a1[23] = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *unsigned __int8 v16 = v13 | (v14 << 32);
          long long v17 = v16 + 1;
        }
        char v8 = 0;
        a1[22] = v17;
        ++v6;
      }
      while (v6 < (a2[1] - *a2) >> 2);
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    std::string::size_type v27 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      long long v28 = (char *)operator new(0x28uLL);
      *(void *)(v28 + 29) = 0;
      *(_OWORD *)long long v28 = 0u;
      *((_OWORD *)v28 + 1) = 0u;
      sub_1001E0650((uint64_t)(a1 + 17), v28);
      if (v38 == v37)
      {
        std::string __p = (void *)68289538;
        *(_WORD *)std::string v42 = 2082;
        *(void *)&v42[2] = "";
        __int16 v43 = 2082;
        std::string v44 = v28;
        __int16 v45 = 2082;
        std::string v46 = "";
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons\", \"RequestID\":%{public, location:escape_only}s, \"Confidence Levels and Reasons\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
      }
      else
      {
        std::stringbuf::str();
        if (v40 >= 0) {
          long long v29 = (const char *)&v39;
        }
        else {
          long long v29 = (const char *)v39;
        }
        std::string __p = (void *)68289538;
        *(_WORD *)std::string v42 = 2082;
        *(void *)&v42[2] = "";
        __int16 v43 = 2082;
        std::string v44 = v28;
        __int16 v45 = 2082;
        std::string v46 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons\", \"RequestID\":%{public, location:escape_only}s, \"Confidence Levels and Reasons\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
        if (v40 < 0) {
          operator delete(v39);
        }
      }
      operator delete(v28);
    }
    *(void *)&v49[6] = v36;
    if (v51 < 0) {
      operator delete(v50);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    uint64_t v30 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (a2[1] - *a2) >> 2;
      uint64_t v32 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v48 = 2082;
      *(void *)std::string v49 = "";
      *(_WORD *)&v49[8] = 2050;
      *(void *)&v49[10] = v31;
      *(_WORD *)&v49[18] = 2050;
      *(void *)&v49[20] = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons, invalid arguments\", \"confidenceLevelsSize\":%{public}lu, \"confidenceReasonsSize\":%{public}lu}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
    }
    std::string v33 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      uint64_t v34 = (a2[1] - *a2) >> 2;
      uint64_t v35 = (uint64_t)(a3[1] - *a3) >> 2;
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v48 = 2082;
      *(void *)std::string v49 = "";
      *(_WORD *)&v49[8] = 2050;
      *(void *)&v49[10] = v34;
      *(_WORD *)&v49[18] = 2050;
      *(void *)&v49[20] = v35;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocalizationRequest::setConfidenceAndReasons, invalid arguments", "{\"msg%{public}.0s\":\"LocalizationRequest::setConfidenceAndReasons, invalid arguments\", \"confidenceLevelsSize\":%{public}lu, \"confidenceReasonsSize\":%{public}lu}", buf, 0x26u);
    }
  }
}

void sub_10021E75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  operator delete(v24);
  sub_101A129A8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_10021E7B0(uint64_t result, int a2)
{
  long long v3 = *(void **)(result + 168);
  uint64_t v2 = *(void **)(result + 176);
  if (v3 != v2)
  {
    for (uint64_t i = v3 + 1; *((_DWORD *)i - 1) != a2; ++i)
    {
      if (i == v2) {
        return result;
      }
    }
    unint64_t v6 = i - 1;
    if (i - 1 != v2 && i != v2)
    {
      do
      {
        if (*((_DWORD *)i + 1) != a2) {
          *v6++ = *i;
        }
        ++i;
      }
      while (i != v2);
      uint64_t v2 = *(void **)(result + 176);
    }
    if (v6 != v2) {
      *(void *)(result + 176) = v6;
    }
  }
  return result;
}

void sub_10021E86C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 168);
  long long v3 = *(unsigned int **)(a1 + 176);
  if (v2 == v3)
  {
    unsigned int v9 = 3;
  }
  else
  {
    uint64_t v4 = v2 + 2;
    if (v2 + 2 != v3)
    {
      signed int v5 = *v2;
      unint64_t v6 = v2 + 2;
      do
      {
        signed int v8 = *v6;
        v6 += 2;
        signed int v7 = v8;
        if (v8 > v5)
        {
          signed int v5 = v7;
          uint64_t v2 = v4;
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
    }
    unsigned int v9 = *v2;
  }
  if ((sub_10023E744(v9) & 1) == 0) {
    sub_101A544F8();
  }
  *(_DWORD *)(a1 + 128) |= 0x4000u;
  *(_DWORD *)(a1 + 120) = v9;
  sub_10021E9CC(a1, &v15);
  *(_DWORD *)(a1 + 112) = 0;
  uint64_t v10 = v15;
  std::string::size_type v11 = v16;
  if (v15 != v16)
  {
    do
    {
      unsigned int v12 = *v10;
      if (!sub_10023E75C(*v10)) {
        __assert_rtn("add_confidencereasons", "microlocation.pb.h", 20332, "::CLMicroLocationProto::ConfidenceReason_IsValid(value)");
      }
      int v13 = *(_DWORD *)(a1 + 112);
      if (v13 == *(_DWORD *)(a1 + 116))
      {
        sub_100221DFC(a1 + 104, v13 + 1);
        int v13 = *(_DWORD *)(a1 + 112);
      }
      uint64_t v14 = *(void *)(a1 + 104);
      *(_DWORD *)(a1 + 112) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13) = v12;
      ++v10;
    }
    while (v10 != v11);
    uint64_t v10 = v15;
  }
  if (v10)
  {
    unsigned __int8 v16 = v10;
    operator delete(v10);
  }
}

void sub_10021E9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10021E9CC(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[0] = 0;
  v7[1] = 0;
  unint64_t v6 = (uint64_t *)v7;
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 176);
  signed int v5 = (uint64_t *)v7;
  if (v3 != v4)
  {
    do
    {
      sub_1000EDED4(&v6, (int *)(v3 + 4), (_DWORD *)(v3 + 4));
      v3 += 8;
    }
    while (v3 != v4);
    signed int v5 = v6;
  }
  sub_100221CAC(a2, v5, v7);
  sub_1000F5BB0((uint64_t)&v6, v7[0]);
}

void sub_10021EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_10021EA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a4;
  sub_10021DF74((uint64_t)v4, a2, a3, a4);
}

void sub_10021EBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  operator delete(v14);
  sub_10021E0E8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t *sub_10021EC14(uint64_t *result, uint64_t *a2)
{
  if (result[4] != result[5]) {
    return (uint64_t *)sub_100222D18(result + 1, result[2], *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  }
  return result;
}

uint64_t sub_10021EC58(uint64_t a1, uint64_t a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F790);
  }
  uint64_t v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a2 + 77);
    int v6 = *(unsigned __int8 *)(a2 + 76);
    *(_DWORD *)int buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 1026;
    int v19 = v5;
    __int16 v20 = 1026;
    int v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LocalizationController: ignored sensors\", \"isBleIgnore\":%{public}d, \"isNiIgnore\":%{public}d}", buf, 0x1Eu);
  }
  char v7 = sub_100217F60();
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_10022339C(&v12, *(void *)(a1 + 8), *(void *)(a1 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  while (1)
  {
    if (v8 == v9)
    {
      uint64_t v10 = 0;
      goto LABEL_20;
    }
    sub_100243254(buf, v8);
    if (v22 != 6) {
      break;
    }
    sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    if ((v7 & 0x40) != 0) {
      goto LABEL_19;
    }
LABEL_16:
    v8 += 88;
  }
  if (v22 == 5)
  {
    if ((v7 & 0x20) != 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (v22 != 1 || (v7 & 2) == 0)
  {
LABEL_15:
    sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    goto LABEL_16;
  }
LABEL_18:
  sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)buf);
LABEL_19:
  uint64_t v10 = 1;
LABEL_20:
  *(void *)int buf = &v12;
  sub_100221EA8((void ***)buf);
  return v10;
}

void sub_10021EE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_10021EE40(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  uint64_t v70 = a5;
  uint64_t v71 = a6;
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a2 + 16);
  if (a4 + 32 != a2 + 24) {
    sub_1000FB43C((char *)(a4 + 32), *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  }
  uint64_t v9 = *a3;
  std::string v44 = a3[1];
  if (*a3 != v44)
  {
    std::string v42 = (void *)(v8 + 152);
    uint64_t v45 = v8;
    do
    {
      if (*(_DWORD *)(*v9 + 4) == 1 && !*(unsigned char *)(*v9 + 392)) {
        sub_101A54524();
      }
      sub_100134750(&v69, "");
      uint64_t v10 = *v9;
      if (*(_DWORD *)(*v9 + 4) == 2 && *(unsigned char *)(v10 + 192))
      {
        std::to_string((std::string *)&v72, (uint64_t)(*(void *)(v10 + 104) - *(void *)(v10 + 96)) >> 4);
        std::string::size_type v11 = SBYTE3(v75) >= 0 ? (const std::string::value_type *)&v72 : (const std::string::value_type *)v72;
        std::string::size_type v12 = SBYTE3(v75) >= 0 ? BYTE3(v75) : *(void *)v73;
        std::string::append(&v69, v11, v12);
        if (SBYTE3(v75) < 0) {
          operator delete((void *)v72);
        }
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
      uint64_t v13 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *v9;
        unint64_t v15 = operator new(0x28uLL);
        uint64_t v60 = (void **)v15;
        *(_OWORD *)uint64_t v61 = xmmword_101D048C0;
        *unint64_t v15 = 0u;
        v15[1] = 0u;
        *(void *)((char *)v15 + 29) = 0;
        sub_1001E0650(v14 + 352, v15);
        if (SHIBYTE(v61[1]) >= 0) {
          __int16 v16 = (void **)&v60;
        }
        else {
          __int16 v16 = v60;
        }
        uint64_t v17 = *v9;
        uint64_t v18 = *(unsigned int *)(*v9 + 4);
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v19 = &v69;
        }
        else {
          int v19 = (std::string *)v69.__r_.__value_.__r.__words[0];
        }
        char v93 = 0;
        LOBYTE(v91) = 0;
        sub_10021FB74((char *)(v17 + 368), (uint64_t)&v91, (uint64_t)v57);
        if (v58 >= 0) {
          __int16 v20 = v57;
        }
        else {
          __int16 v20 = (void **)v57[0];
        }
        uint64_t v21 = *v9;
        int v22 = operator new(0x28uLL);
        std::string __p = v22;
        long long v68 = xmmword_101D048C0;
        *int v22 = 0u;
        v22[1] = 0u;
        *(void *)((char *)v22 + 29) = 0;
        sub_1001E0650(v21 + 400, v22);
        p_p = &__p;
        if (v68 < 0) {
          p_p = __p;
        }
        int v24 = *(unsigned __int8 *)(*v9 + 536);
        uint64_t v72 = 68290563;
        *(_WORD *)uint64_t v73 = 2082;
        *(void *)&v73[2] = "";
        __int16 v74 = 2082;
        long long v75 = v16;
        __int16 v76 = 2050;
        uint64_t v77 = v18;
        __int16 v78 = 2081;
        long long v79 = v19;
        __int16 v80 = 2081;
        *(void *)long long v81 = v20;
        *(_WORD *)&v81[8] = 2082;
        *(void *)&v81[10] = p_p;
        __int16 v82 = 1026;
        LODWORD(v83) = v24;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"localizationRequestResultsPerModel\", \"ModelUUID\":%{public, location:escape_only}s, \"ModelType\":%{public}lu, \"SimilarityListLengthIfApplicable\":%{private, location:escape_only}s, \"ClientID\":%{private, location:escape_only}s, \"LoiGroupId\":%{public, location:escape_only}s, \"hasAnchorStatistics\":%{public}hhd}", (uint8_t *)&v72, 0x4Au);
        if (SHIBYTE(v68) < 0) {
          operator delete(__p);
        }
        uint64_t v8 = v45;
        if (v58 < 0) {
          operator delete(v57[0]);
        }
        if (v93 < 0) {
          operator delete(v91);
        }
        if (SHIBYTE(v61[1]) < 0) {
          operator delete(v60);
        }
      }
      uint64_t v60 = 0;
      *(_OWORD *)uint64_t v61 = 0uLL;
      int v62 = 3;
      char v66 = 0;
      v63[1] = 0;
      uint64_t v64 = 0;
      v63[0] = 0;
      LOBYTE(v65[0]) = 0;
      if (*(unsigned char *)(v8 + 240))
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229F790);
        }
        long long v25 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(uint64_t **)(v8 + 64);
          if (v26)
          {
            std::string::size_type v27 = 0;
            long long v28 = *(uint64_t **)(v8 + 64);
            do
            {
              if (*((_DWORD *)v28 + 6) == 1) {
                std::string::size_type v27 = (std::string *)((char *)v27 + 1);
              }
              long long v28 = (uint64_t *)*v28;
            }
            while (v28);
            uint64_t v29 = 0;
            uint64_t v30 = *(uint64_t **)(v8 + 64);
            do
            {
              if (*((_DWORD *)v30 + 6) == 5) {
                ++v29;
              }
              uint64_t v30 = (uint64_t *)*v30;
            }
            while (v30);
            uint64_t v31 = 0;
            do
            {
              if (*((_DWORD *)v26 + 6) == 6) {
                ++v31;
              }
              uint64_t v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
          else
          {
            uint64_t v29 = 0;
            std::string::size_type v27 = 0;
            uint64_t v31 = 0;
          }
          uint64_t v36 = (void **)*(unsigned int *)(*v9 + 4);
          uint64_t v37 = *(void *)(v8 + 72);
          LODWORD(v57[0]) = 1;
          uint64_t v38 = sub_1001EF6E0(v42, (unsigned int *)v57);
          if (v38) {
            double v39 = *((double *)v38 + 4) - *((double *)v38 + 3);
          }
          else {
            double v39 = 0.0;
          }
          double v40 = *(double *)(v45 + 200);
          int v41 = (int)*(double *)(v45 + 192);
          uint64_t v72 = 68291075;
          *(_WORD *)uint64_t v73 = 2082;
          *(void *)&v73[2] = "";
          __int16 v74 = 2049;
          long long v75 = v36;
          __int16 v76 = 2049;
          uint64_t v77 = v37;
          __int16 v78 = 2049;
          long long v79 = v27;
          __int16 v80 = 2049;
          *(void *)long long v81 = v29;
          *(_WORD *)&v81[8] = 2049;
          *(void *)&v81[10] = v31;
          __int16 v82 = 2049;
          double v83 = v39;
          __int16 v84 = 1025;
          int v85 = v41;
          __int16 v86 = 1025;
          int v87 = (int)v40;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"testFingerprint\", \"ModelType\":%{private}lu, \"size\":%{private}lu, \"NumWiFiMeasurements\":%{private}lu, \"NumBLEMeasurements\":%{private}lu, \"NumUWBMeasurements\":%{private}lu, \"WiFi RSSI duration_s\":\"%{private}.09f\", \"start\":%{private}d, \"end\":%{private}d}", (uint8_t *)&v72, 0x5Au);
        }
        LOBYTE(v91) = 0;
        char v92 = 0;
        sub_1002AECA8(a1, *v9);
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
      uint64_t v32 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        std::string v33 = (void **)*(unsigned int *)(*v9 + 4);
        uint64_t v72 = 68289282;
        *(_WORD *)uint64_t v73 = 2082;
        *(void *)&v73[2] = "";
        __int16 v74 = 2050;
        long long v75 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController test fingerprint was not created\", \"ModelType\":%{public}lu}", (uint8_t *)&v72, 0x1Cu);
      }
      std::string v55 = 0;
      uint64_t v56 = 0;
      std::string v54 = 0;
      sub_1002227B8(&v54, v60, (uint64_t)v61[0], ((char *)v61[0] - (char *)v60) >> 5);
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      char v34 = sub_1002765B0(*v9);
      sub_1000E3A78((uint64_t)v49, (long long *)(*v9 + 368));
      LOBYTE(v57[0]) = 0;
      char v59 = 0;
      int v35 = *(_DWORD *)(a4 + 24);
      std::string v47 = 0;
      uint64_t v48 = 0;
      std::string v46 = 0;
      sub_10010F834(&v46, *(const void **)(a4 + 32), *(void *)(a4 + 40), (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
      sub_1002226D4((uint64_t)&v72, (uint64_t)&v54, &v52, v34, (long long *)v49, (uint64_t)v57, v35, (uint64_t)&v46);
      sub_10021FC18((uint64_t *)a4, (uint64_t)&v72, (long long *)(*v9 + 352), (uint64_t)v65);
      if (v89)
      {
        uint64_t v90 = v89;
        operator delete(v89);
      }
      if (v88) {
        sub_1002220F0((uint64_t)&v87 + 2);
      }
      if ((_BYTE)v85 && SHIBYTE(v84) < 0) {
        operator delete(*(void **)&v81[6]);
      }
      if (v72)
      {
        *(void *)uint64_t v73 = v72;
        operator delete((void *)v72);
      }
      if (v46)
      {
        std::string v47 = v46;
        operator delete(v46);
      }
      if (v59) {
        sub_1002220F0((uint64_t)v57);
      }
      if (v51 && v50 < 0) {
        operator delete(v49[0]);
      }
      if (v54)
      {
        std::string v55 = v54;
        operator delete(v54);
      }
      if (v66 && v65[0])
      {
        v65[1] = v65[0];
        operator delete(v65[0]);
      }
      if (v63[0])
      {
        v63[1] = v63[0];
        operator delete(v63[0]);
      }
      if (v60)
      {
        v61[0] = v60;
        operator delete(v60);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      v9 += 2;
    }
    while (v9 != v44);
  }
}

void sub_10021F9C8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  _Unwind_Resume(a1);
}

char *sub_10021FB74@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result[24])
  {
    if (result[23] < 0)
    {
      return (char *)sub_1000DC48C((unsigned char *)a3, *(void **)result, *((void *)result + 1));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)result;
      *(void *)(a3 + 16) = *((void *)result + 2);
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
  }
  return result;
}

void *sub_10021FBC0@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[40] = 0;
  double result = sub_100222004(a1, a2);
  if (result) {
    return (void *)sub_100221FC4((uint64_t)a3, (uint64_t)(result + 4));
  }
  return result;
}

void sub_10021FBFC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    sub_1002220F0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021FC18(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= v10)
  {
    unint64_t v13 = 0x84BDA12F684BDA13 * ((uint64_t)(v11 - *a1) >> 3);
    if (v13 + 1 > 0x12F684BDA12F684) {
      sub_1001D7FD4();
    }
    unint64_t v14 = 0x84BDA12F684BDA13 * ((uint64_t)(v9 - *a1) >> 3);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13 + 1) {
      uint64_t v15 = v13 + 1;
    }
    if (v14 >= 0x97B425ED097B42) {
      unint64_t v16 = 0x12F684BDA12F684;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v23 = v8;
    if (v16) {
      uint64_t v17 = (char *)sub_100223660(v8, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    int v19 = v17;
    __int16 v20 = &v17[216 * v13];
    int v22 = &v17[216 * v16];
    sub_1002234BC((uint64_t)v20, a2, a3, a4);
    uint64_t v21 = v20 + 216;
    sub_1002235E8(a1, &v19);
    uint64_t v12 = a1[1];
    sub_1002239A0(&v19);
  }
  else
  {
    sub_1002234BC(*(void *)(v8 - 8), a2, a3, a4);
    uint64_t v12 = v11 + 216;
    a1[1] = v11 + 216;
  }
  a1[1] = v12;
  return v12 - 216;
}

void sub_10021FD64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002239A0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021FD78(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 128)) {
    sub_1002220F0(a1 + 88);
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10021FDE4(uint64_t a1, _DWORD *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1000C7F88(buf);
  v32[0] = 0;
  CFStringRef v13 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  char v14 = sub_1000D29FC(*(uint64_t *)buf, (uint64_t)v13, v32);
  CFRelease(v13);
  BOOL v15 = v32[0];
  if (v50) {
    sub_1000DB0A0(v50);
  }
  if (v15) {
    char v16 = 0;
  }
  else {
    char v16 = v14;
  }
  if (v16)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    uint64_t v17 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLMicroLocationLocalizationController, sendLocalizationCoreAnalyticsEvent, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
      *(_WORD *)uint64_t v32 = 0;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationLocalizationController::sendLocalizationCoreAnalyticsEvent(const CLMiLoService::ModelAndConf &, const std::vector<CLMicroLocationResultInternal> &, const std::optional<std::vector<CLMicroLocationResultInternal>> &, const CLMicroLocationFingerprint &, const CLMicroLocationProto::RecordingEvent &, const std::optional<cl::chrono::CFAbsoluteTimeClock::time_point> &) const", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    return;
  }
  CFStringRef v19 = sub_1002E8FB0(a6);
  __int16 v20 = *(uint64_t **)(a5 + 16);
  if (v20)
  {
    uint64_t v21 = 0;
    int v22 = v20;
    do
    {
      if (*((_DWORD *)v22 + 6) == 1) {
        ++v21;
      }
      int v22 = (uint64_t *)*v22;
    }
    while (v22);
    uint64_t v23 = 0;
    int v24 = v20;
    do
    {
      if (*((_DWORD *)v24 + 6) == 5) {
        ++v23;
      }
      int v24 = (uint64_t *)*v24;
    }
    while (v24);
    uint64_t v25 = 0;
    do
    {
      if (*((_DWORD *)v20 + 6) == 6) {
        ++v25;
      }
      __int16 v20 = (uint64_t *)*v20;
    }
    while (v20);
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    uint64_t v25 = 0;
  }
  sub_10022190C(a4, a3, buf);
  uint64_t v26 = *(void *)buf;
  if (*(std::__shared_weak_count **)buf != v50)
  {
    double v27 = 0.0;
    uint64_t v28 = 0;
    while (1)
    {
      double v29 = *(double *)(v26 + 16);
      if (*(_OWORD *)v26 == 0)
      {
        uint64_t v28 = *(void *)(v26 + 16);
      }
      else if (v29 > v27)
      {
        goto LABEL_38;
      }
      double v29 = v27;
LABEL_38:
      v26 += 32;
      double v27 = v29;
      if ((std::__shared_weak_count *)v26 == v50) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v28 = 0;
  double v29 = 0.0;
LABEL_41:
  CFAbsoluteTime Current_5 = j__CFAbsoluteTimeGetCurrent_5();
  if (*a2 == 4) {
    uint64_t v31 = +[NSNumber numberWithDouble:v29];
  }
  else {
    uint64_t v31 = 0;
  }
  std::string v33 = _NSConcreteStackBlock;
  uint64_t v34 = 3221225472;
  int v35 = sub_100221948;
  uint64_t v36 = &unk_10229F770;
  uint64_t v39 = v23;
  uint64_t v40 = v25;
  double v41 = v29;
  std::string v42 = a2 + 116;
  uint64_t v43 = v28;
  uint64_t v44 = v21;
  uint64_t v45 = a7;
  CFAbsoluteTime v46 = Current_5;
  CFStringRef v37 = v19;
  uint64_t v38 = v31;
  std::string v47 = a2 + 92;
  uint64_t v48 = a6;
  AnalyticsSendEventLazy();
  if (*(void *)buf)
  {
    char v50 = *(std::__shared_weak_count **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1002201AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002201EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 440);
  if (*(unsigned char *)(a1 + 440))
  {
    uint64_t v7 = a1 + 56;
    int v8 = *(unsigned __int8 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 56);
    if (!v8) {
      *(unsigned char *)(a3 + 16) = 1;
    }
    unint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v16 = *a2;
    uint64_t v17 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    CFStringRef v13 = 0;
    char v14 = (void **)&v11;
    char v15 = 0;
    unint64_t v11 = (uint64_t *)operator new(0x10uLL);
    uint64_t v12 = v11;
    CFStringRef v13 = v11 + 2;
    uint64_t v12 = sub_100223A1C((uint64_t)&v13, &v16, &v18, v11);
    if (v17) {
      sub_1000DB0A0(v17);
    }
    if (!*(unsigned char *)(a1 + 440)) {
      sub_10020D700();
    }
    sub_10021EE40(a1, v7, &v11, a4, 0, 0);
    char v14 = (void **)&v11;
    sub_1000C5954(&v14);
  }
  return v4 != 0;
}

void sub_100220328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10022036C(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  int v8 = sub_10021EC58(a1, a2);
  if ((v8 & 1) == 0)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    unint64_t v9 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LocalizationController doesn't have any valid measurements to use, reporting empty results.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
      v32[0] = 0;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationLocalizationController::localizationRequestResultsPerModel(const CLMicroLocationLocalizationController::LocalizationRequest &, const std::vector<std::shared_ptr<CLMiLoService::ModelAndConf>> &, CLMiLoServiceManager::LocalizationResults &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  sub_10031E768(v29);
  sub_10021E9CC(a2, __p);
  sub_1002660C8(buf);
  BYTE8(v41) = 1;
  v31[0] = 0;
  v31[16] = 0;
  sub_100320760((uint64_t *)(a1 + 8), (uint64_t)buf, (uint64_t)v31, (unint64_t *)v29, v32);
  if (BYTE8(v41)) {
    sub_10026633C(buf);
  }
  if (v36) {
    int v10 = v8;
  }
  else {
    int v10 = 0;
  }
  if (v10 == 1)
  {
    int v11 = v33;
    sub_1000FB43C((char *)__p, v34, v35, (v35 - (uint64_t)v34) >> 2);
  }
  else
  {
    uint64_t v12 = (char *)__p[1];
    if (__p[1] >= v28)
    {
      char v14 = (char *)__p[0];
      int64_t v15 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        sub_1001D7FD4();
      }
      uint64_t v17 = v28 - (char *)__p[0];
      if ((v28 - (char *)__p[0]) >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        CFStringRef v19 = (char *)sub_10017EA34((uint64_t)&v28, v18);
        char v14 = (char *)__p[0];
        uint64_t v12 = (char *)__p[1];
      }
      else
      {
        CFStringRef v19 = 0;
      }
      __int16 v20 = &v19[4 * v15];
      uint64_t v21 = &v19[4 * v18];
      *(_DWORD *)__int16 v20 = 3;
      CFStringRef v13 = v20 + 4;
      while (v12 != v14)
      {
        int v22 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v22;
        v20 -= 4;
      }
      __p[0] = v20;
      __p[1] = v13;
      uint64_t v28 = v21;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)__p[1] = 3;
      CFStringRef v13 = v12 + 4;
    }
    int v11 = 0;
    __p[1] = v13;
  }
  sub_10022086C(a1 + 56);
  long long v47 = 0u;
  memset(v48, 0, 144);
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  memset(v40, 0, sizeof(v40));
  *(_OWORD *)int buf = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  sub_10023DFC0((uint64_t)v48 + 8);
  sub_1002208B8(a1 + 56, (uint64_t)buf);
  sub_10026633C((char *)v48 + 8);
  sub_100216190((uint64_t)v40);
  if (v38[1])
  {
    *(void **)&long long v39 = v38[1];
    operator delete(v38[1]);
  }
  int v24 = (void *)(a1 + 80);
  uint64_t v23 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 72) = v11;
  if (v23)
  {
    *(void *)(a1 + 88) = v23;
    operator delete(v23);
    void *v24 = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(void *)(a1 + 96) = v28;
  __p[1] = 0;
  uint64_t v28 = 0;
  __p[0] = 0;
  sub_1002161E4(a1 + 104, (uint64_t)v32);
  sub_100267D64(a1 + 304, a2);
  if (!*(unsigned char *)(a1 + 440)) {
    sub_10020D700();
  }
  sub_10021EE40(a1, a1 + 56, a3, a4, *(void *)(a2 + 152), 1);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a4 + 24);
  if (v24 != (void *)(a4 + 32)) {
    sub_1000FB43C((char *)(a1 + 80), *(char **)(a4 + 32), *(void *)(a4 + 40), (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
  }
  sub_100216190((uint64_t)v32);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return sub_1000D7D80((uint64_t)&v30);
}

void sub_1002207C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_100216190((uint64_t)va1);
  if (__p) {
    operator delete(__p);
  }
  sub_1000D7D80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022086C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 384))
  {
    sub_10026633C(a1 + 248);
    sub_100216190(a1 + 48);
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 384) = 0;
  }
}

uint64_t sub_1002208B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 384))
  {
    long long v4 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)a1 = v4;
    sub_1000F4EBC(a1 + 24, (__n128 *)(a2 + 24));
    sub_1002161E4(a1 + 48, a2 + 48);
    sub_100267D64(a1 + 248, a2 + 248);
  }
  else
  {
    sub_100223B28(a1, (long long *)a2);
    *(unsigned char *)(a1 + 384) = 1;
  }
  return a1;
}

uint64_t sub_100220938(uint64_t a1)
{
  sub_10026633C(a1 + 248);
  sub_100216190(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10022097C(void *a1, void *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  if (v9 != v8)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)(v9 + 136);
      if (*(void *)v21 == *a2 && *(void *)&v21[8] == a2[1]) {
        break;
      }
      v9 += 192;
      if (v9 == v8) {
        goto LABEL_16;
      }
    }
  }
  if (v9 == v8)
  {
LABEL_16:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    uint64_t v15 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      *(void *)(v16 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v16);
      *(void *)uint64_t v21 = 68289282;
      *(_WORD *)&v21[8] = 2082;
      *(void *)&v21[10] = "";
      __int16 v22 = 2082;
      uint64_t v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController, Requested stop for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v21, 0x1Cu);
      operator delete(v16);
    }
  }
  else
  {
    sub_10021E098((void ***)(v9 + 160), 0);
    sub_10021E86C(v9);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    int v11 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *(void *)(v12 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v12);
      *(void *)uint64_t v21 = 68289282;
      *(_WORD *)&v21[8] = 2082;
      *(void *)&v21[10] = "";
      __int16 v22 = 2082;
      uint64_t v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocalizationController, Requested stop for localization request\", \"Request ID\":%{public, location:escape_only}s}", v21, 0x1Cu);
      operator delete(v12);
    }
    sub_10022036C((uint64_t)a1, v9, a3, a4);
    uint64_t v14 = a1[1];
    for (uint64_t i = a1[2]; i != v14; sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(i - 88)))
      ;
    uint64_t v17 = a1[5];
    a1[2] = v14;
    sub_100223BE4(v9 + 192, v17, v9);
    uint64_t v19 = v18;
    for (uint64_t j = a1[5]; j != v19; uint64_t j = sub_10021E0E8(j - 192))
      ;
    a1[5] = v19;
  }
}

void sub_100220C28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100220C48(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(v3 + 136);
      if (*(void *)v8 == *a2 && *(void *)&v8[8] == a2[1]) {
        break;
      }
      v3 += 192;
      if (v3 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_10:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    int v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(void *)(v7 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v7);
      *(void *)uint64_t v8 = 68289282;
      *(_WORD *)&v8[8] = 2082;
      *(void *)&v8[10] = "";
      __int16 v9 = 2082;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Requested set Ignore Ble Rssi Measurements for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v8, 0x1Cu);
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 128) |= 0x2000u;
    *(unsigned char *)(v3 + 77) = 1;
  }
}

void sub_100220DB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100220DCC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(v3 + 136);
      if (*(void *)v8 == *a2 && *(void *)&v8[8] == a2[1]) {
        break;
      }
      v3 += 192;
      if (v3 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_10:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    int v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(void *)(v7 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v7);
      *(void *)uint64_t v8 = 68289282;
      *(_WORD *)&v8[8] = 2082;
      *(void *)&v8[10] = "";
      __int16 v9 = 2082;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Requested set Ignore Uwb Range Measurements for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v8, 0x1Cu);
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)(v3 + 128) |= 0x800u;
    *(unsigned char *)(v3 + 76) = 1;
  }
}

void sub_100220F3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100220F50(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(v6 + 136);
      if (*(void *)v14 == *a2 && *(void *)&v14[8] == a2[1]) {
        break;
      }
      v6 += 192;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_13:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    int v11 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *(void *)(v12 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v12);
      *(void *)uint64_t v14 = 68289282;
      *(_WORD *)&v14[8] = 2082;
      *(void *)&v14[10] = "";
      __int16 v15 = 2082;
      uint64_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"try to set confidence for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v14, 0x1Cu);
      operator delete(v12);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
    }
    uint64_t v13 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(void *)(v10 + 29) = 0;
      *(_OWORD *)uint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      sub_1001E0650((uint64_t)a2, v10);
      *(void *)uint64_t v14 = 68289282;
      *(_WORD *)&v14[8] = 2082;
      *(void *)&v14[10] = "";
      __int16 v15 = 2082;
      uint64_t v16 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "try to set confidence for non-existent localization request", "{\"msg%{public}.0s\":\"try to set confidence for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v14, 0x1Cu);
      goto LABEL_20;
    }
  }
  else
  {
    sub_10021E13C((void *)v6, a3, a4);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    __int16 v9 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *(void *)(v10 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v10);
      *(void *)uint64_t v14 = 68289282;
      *(_WORD *)&v14[8] = 2082;
      *(void *)&v14[10] = "";
      __int16 v15 = 2082;
      uint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setting confidence in current Localization\", \"Request ID\":%{public, location:escape_only}s}", v14, 0x1Cu);
LABEL_20:
      operator delete(v10);
    }
  }
}

void sub_100221240(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100221264(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  sub_10022086C(a1 + 56);
  sub_10022086C(v1);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F790);
  }
  uint64_t v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    int v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationLocalizationController, invalidateCache\"}", (uint8_t *)v3, 0x12u);
  }
}

void sub_100221350(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(v3 + 136);
      if (*(void *)v10 == *a2 && *(void *)&v10[8] == a2[1]) {
        break;
      }
      v3 += 192;
      if (v3 == v4) {
        goto LABEL_12;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_12:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    uint64_t v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *(void *)(v7 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v7);
      *(void *)uint64_t v10 = 68289282;
      *(_WORD *)&v10[8] = 2082;
      *(void *)&v10[10] = "";
      __int16 v11 = 2082;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Requested to remove confidence reason for motion for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v10, 0x1Cu);
      operator delete(v7);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
    }
    uint64_t v8 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      __int16 v9 = (char *)operator new(0x28uLL);
      *(void *)(v9 + 29) = 0;
      *(_OWORD *)__int16 v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      sub_1001E0650((uint64_t)a2, v9);
      *(void *)uint64_t v10 = 68289282;
      *(_WORD *)&v10[8] = 2082;
      *(void *)&v10[10] = "";
      __int16 v11 = 2082;
      uint64_t v12 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested to remove confidence reason for motion for non-existent localization request", "{\"msg%{public}.0s\":\"Requested to remove confidence reason for motion for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v10, 0x1Cu);
      operator delete(v9);
    }
  }
  else
  {
    sub_1002215DC(a1, a2, 1u);
  }
}

void sub_1002215BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002215DC(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6 != v7)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)(v6 + 136);
      if (*(void *)v16 == *a2 && *(void *)&v16[8] == a2[1]) {
        break;
      }
      v6 += 192;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_13:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      *(void *)(v13 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v13);
      *(void *)uint64_t v16 = 68289282;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = "";
      __int16 v17 = 2082;
      uint64_t v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Requested remove confidence reason for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v16, 0x1Cu);
      operator delete(v13);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F790);
      }
    }
    uint64_t v14 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      __int16 v15 = (char *)operator new(0x28uLL);
      *(void *)(v15 + 29) = 0;
      *(_OWORD *)__int16 v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      sub_1001E0650((uint64_t)a2, v15);
      *(void *)uint64_t v16 = 68289282;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = "";
      __int16 v17 = 2082;
      uint64_t v18 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested remove confidence reason for non-existent localization request", "{\"msg%{public}.0s\":\"Requested remove confidence reason for non-existent localization request\", \"Request ID\":%{public, location:escape_only}s}", v16, 0x1Cu);
      __int16 v11 = v15;
      goto LABEL_20;
    }
  }
  else
  {
    sub_10021E7B0(v6, a3);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F790);
    }
    __int16 v9 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (char *)operator new(0x28uLL);
      *(_OWORD *)uint64_t v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *(void *)(v10 + 29) = 0;
      sub_1001E0650((uint64_t)a2, v10);
      *(void *)uint64_t v16 = 68289538;
      *(_WORD *)&v16[8] = 2082;
      *(void *)&v16[10] = "";
      __int16 v17 = 2082;
      uint64_t v18 = v10;
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"removing confidence reason\", \"Request ID\":%{public, location:escape_only}s, \"confidence reason\":%{public}lu}", v16, 0x26u);
      __int16 v11 = v10;
LABEL_20:
      operator delete(v11);
    }
  }
}

void sub_1002218E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10022190C@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a1 + 24);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    uint64_t v6 = *(const void **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = (v7 - *(void *)a1) >> 5;
  }
  else
  {
    uint64_t v7 = (uint64_t)a2[1];
    unint64_t v8 = (v7 - (uint64_t)*a2) >> 5;
    uint64_t v6 = *a2;
  }
  return sub_1002227B8(a3, v6, v7, v8);
}

id sub_100221948(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 48)) forKeyedSubscript:@"bleFingerprintSize"];
  if (*(void *)(a1 + 48) >= 0x19uLL) {
    uint64_t v3 = 25;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 48);
  }
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v3) forKeyedSubscript:@"bleFingerprintSizeBounded"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 56)) forKeyedSubscript:@"uwbFingerprintSize"];
  if (*(void *)(a1 + 56) >= 0x19uLL) {
    uint64_t v4 = 25;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 56);
  }
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v4) forKeyedSubscript:@"uwbFingerprintSizeBounded"];
  [v2 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 64))] forKeyedSubscript:@"maxClusterProbability"];
  int v5 = *(uint64_t **)(a1 + 72);
  if (*((char *)v5 + 23) < 0) {
    int v5 = (uint64_t *)*v5;
  }
  [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5) forKeyedSubscript:@"modelType"];
  [v2 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 80))] forKeyedSubscript:@"nullspaceClusterProbability"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 88)) forKeyedSubscript:@"wifiFingerprintSize"];
  if (*(void *)(a1 + 88) >= 0x64uLL) {
    uint64_t v6 = 100;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 88);
  }
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v6) forKeyedSubscript:@"wifiFingerprintSizeBounded"];
  [v2 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"localizationTriggerEvent"];
  [v2 setObject:&off_102392468 forKeyedSubscript:@"localizationTriggerEventCount"];
  uint64_t v7 = *(void *)(a1 + 96);
  if (*(unsigned char *)(v7 + 8)) {
    [v2 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 104) - *(double *)v7)] forKeyedSubscript:@"localizationRunTime"];
  }
  unint64_t v8 = *(const std::string **)(a1 + 112);
  if (v8[1].__r_.__value_.__s.__data_[0])
  {
    sub_100239A38(v8, &__p);
    __int16 v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9) forKeyedSubscript:@"clientId"];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    [v2 setObject:v10 forKeyedSubscript:@"roiProbability"];
  }
  [v2 setObject:[NSNumber numberWithBool:*((unsigned __int8 *)(*(void *)(a1 + 120) + 77))] forKeyedSubscript:@"bleRssiSamplesIgnore"];
  [v2 setObject:[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 120) + 76)] forKeyedSubscript:@"uwbRangeSamplesIgnore"];
  return v2;
}

void sub_100221C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100221C1C(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(double *)(a1 + 24) = sub_10016C458();
  return a1;
}

void sub_100221C60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100221C7C(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_100221CAC(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    int v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      int v5 = v7;
    }
    while (v7 != a3);
  }
  sub_100221D34(a1, a2, a3, v4);
  return a1;
}

void *sub_100221D34(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_10017C6FC(result, a4);
    return (void *)sub_100221DA4(v6, a2, a3);
  }
  return result;
}

void sub_100221D88(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100221DA4(uint64_t result, void *a2, void *a3)
{
  long long v3 = *(_DWORD **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      _DWORD *v3 = *((_DWORD *)a2 + 7);
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          int v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

uint64_t sub_100221DFC(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    int v3 = 2 * v2;
    if (v3 <= a2) {
      int v3 = a2;
    }
    if (v3 <= 4) {
      int v3 = 4;
    }
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

void sub_100221EA8(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(v4 - 88));
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 sub_100221F2C(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      result.n128_u64[0] = sub_1000F4EBC(a1, a2).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_100221FC4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    a1 = sub_1002220F0(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  uint64_t result = sub_100222178(a1, a2);
  *(unsigned char *)(result + 40) = 1;
  return result;
}

void *sub_100222004(void *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  do
    v3 ^= (v3 << 6) + (v3 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v2++);
  while (v2 != 16);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v6 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v3;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v3 == v9)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }
        else
        {
          v9 &= *(void *)&v4 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1002220F0(uint64_t a1)
{
  sub_10022212C(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10022212C(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100222178(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_1002221F0(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1002221D8(_Unwind_Exception *a1)
{
  sub_1002220F0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1002221F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100222470(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_10022244C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10022251C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100222470@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(v9, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100222500(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10022251C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10022251C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10022257C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      sub_1002225D8(a1, (uint64_t *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    *(unsigned char *)(sub_1002220F0(a1) + 40) = 0;
  }
  else
  {
    *(unsigned char *)(sub_1000E2908(a1, (uint64_t *)a2) + 40) = 1;
  }
}

void sub_1002225D8(uint64_t a1, uint64_t *a2)
{
  sub_10022267C(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint8x8_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void sub_10022267C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_10022212C(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_1002226D4(uint64_t a1, uint64_t a2, long long *a3, char a4, long long *a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 48) = a4;
  *(unsigned char *)(a1 + 80) = 0;
  if (*((unsigned char *)a5 + 24))
  {
    long long v13 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v13;
    *((void *)a5 + 1) = 0;
    *((void *)a5 + 2) = 0;
    *(void *)a5 = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v14 = a1 + 88;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a6 + 40))
  {
    sub_1000E2908(v14, (uint64_t *)a6);
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = a7;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a8;
  *(void *)(a1 + 160) = *(void *)(a8 + 16);
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(void *)(a8 + 16) = 0;
  return a1;
}

void *sub_1002227B8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_100222834(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100222818(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100222834(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1001D7FD4();
  }
  __n128 result = (char *)sub_1001D9EDC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void **sub_100222878(void **a1)
{
  double v2 = sub_10016C458();
  double v3 = *((double *)a1 + 3);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F790);
  }
  uint64_t v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    uint8x8_t v5 = a1;
    if (*((char *)a1 + 23) < 0) {
      uint8x8_t v5 = *a1;
    }
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2082;
    long long v11 = v5;
    __int16 v12 = 2050;
    double v13 = v2 - v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"TimeProfile\", \"action\":%{public, location:escape_only}s, \"durationSecs\":\"%{public}f\"}", (uint8_t *)v7, 0x26u);
  }
  if (*((char *)a1 + 23) < 0) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1002229A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_1002229B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_1002660C8(v4);
  long long v5 = *(_OWORD *)(a2 + 136);
  *(void *)(v4 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(v4 + 136) = v5;
  uint64_t v6 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(v4 + 160) = v6;
  *(void *)(v4 + 168) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  __n128 result = *(__n128 *)(a2 + 168);
  *(__n128 *)(v4 + 168) = result;
  *(void *)(v4 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 8) = v4 + 192;
  return result;
}

void sub_100222A28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100222A30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v20 = a1 + 2;
  if (v9) {
    __int16 v10 = (char *)sub_10017EB28(v7, v9);
  }
  else {
    __int16 v10 = 0;
  }
  float v16 = v10;
  float v17 = &v10[192 * v4];
  BOOL v18 = v17;
  unint64_t v19 = &v10[192 * v9];
  sub_1002660C8(v17);
  long long v11 = v17;
  long long v12 = *(_OWORD *)(a2 + 136);
  *((void *)v17 + 19) = *(void *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *((void *)v11 + 20) = v13;
  *((void *)v11 + 21) = 0;
  *((void *)v11 + 22) = 0;
  *((void *)v11 + 23) = 0;
  *(_OWORD *)(v11 + 168) = *(_OWORD *)(a2 + 168);
  *((void *)v11 + 23) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  v18 += 192;
  sub_100222B78(a1, &v16);
  uint64_t v14 = a1[1];
  sub_100222CC8((uint64_t)&v16);
  return v14;
}

void sub_100222B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100222CC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100222B78(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100222BF0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100222BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      sub_1002660C8(a7 + v11 - 192);
      long long v14 = *(_OWORD *)(a3 + v11 - 56);
      *(void *)(v12 - 40) = *(void *)(a3 + v11 - 40);
      *(_OWORD *)(v12 - 56) = v14;
      uint64_t v15 = *(void *)(a3 + v11 - 32);
      *(void *)(v13 - 32) = 0;
      *(void *)(v12 - 32) = v15;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(a3 + v11 - 24);
      *(void *)(v12 - 8) = *(void *)(a3 + v11 - 8);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      v11 -= 192;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_100222CA8(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 192)
    sub_10021E0E8(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100222CC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    sub_10021E0E8(i - 192);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100222D18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 88 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_100223088(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_100222F28((uint64_t)a1, v5, v12, v5 + 88 * a5);
      sub_1002231A0(v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x2E8BA2E8BA2E8BALL) {
        sub_1001D7FD4();
      }
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1745D1745D1745DLL) {
        unint64_t v18 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_1000DA8B4(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      __int16 v22 = &v19[88 * v15];
      v26[0] = v19;
      v26[1] = v22;
      double v27 = v22;
      uint64_t v28 = &v19[88 * v18];
      uint64_t v23 = 88 * a5;
      int v24 = &v22[88 * a5];
      do
      {
        sub_100243254(v22, v7);
        *((_DWORD *)v22 + 20) = *(_DWORD *)(v7 + 80);
        v22 += 88;
        v7 += 88;
        v23 -= 88;
      }
      while (v23);
      double v27 = v24;
      uint64_t v5 = sub_100222FD4(a1, v26, v5);
      sub_10022334C((uint64_t)v26);
    }
  }
  return v5;
}

void sub_100222EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100222F28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_100243254(v8, v10);
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(v10 + 80);
      v10 += 88;
      v8 += 88;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;

  return sub_100223120(a2, v7, v6);
}

void sub_100222FCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100222FD4(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_10022320C((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1002232B4(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_100223088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(sub_100243254(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1002230FC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100223120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      sub_1002442C8(a3 - 88, v6 - 88);
      *(_DWORD *)(a3 - 8) = *(_DWORD *)(v6 - 8);
      a3 -= 88;
      v6 -= 88;
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t sub_1002231A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    sub_1002442C8(a3, v4);
    *(_DWORD *)(a3 + 80) = *(_DWORD *)(v4 + 80);
    a3 += 88;
    v4 += 88;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_10022320C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      sub_100243254(a7 + v11 - 88, a3 + v11 - 88);
      *(_DWORD *)(a7 + v11 - 8) = *(_DWORD *)(a3 + v11 - 8);
      v11 -= 88;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_100223294(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 88)
    sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002232B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(sub_100243254(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100223328(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022334C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_10022339C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000DA770(result, a4);
    uint64_t result = (void *)sub_100223424((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100223404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100221EA8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100223424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(sub_100243254(a4 + v7, a2 + v7) + 80) = *(_DWORD *)(a2 + v7 + 80);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100223498(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_1002433A8((wireless_diagnostics::google::protobuf::MessageLite *)(v4 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002234BC(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v8 = *(_OWORD *)(a2 + 24);
  long long v9 = *(_OWORD *)(a2 + 33);
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 33) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v10;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v11 = a1 + 88;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    sub_1000E2908(v11, (uint64_t *)(a2 + 88));
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  long long v12 = *a3;
  *(unsigned char *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = v12;
  *(unsigned char *)(a1 + 208) = 0;
  if (*(unsigned char *)(a4 + 24))
  {
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)a4;
    *(void *)(a1 + 200) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(unsigned char *)(a1 + 208) = 1;
  }
  return a1;
}

uint64_t sub_1002235E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1002236AC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100223660(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    sub_1001D7FA0();
  }
  return operator new(216 * a2);
}

uint64_t sub_1002236AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 216;
      sub_100223764(a1, v7 - 216, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 216;
      *((void *)&v16 + 1) -= 216;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_10022387C((uint64_t)v13);
  return v11;
}

__n128 sub_100223764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v5 = *(_OWORD *)(a3 + 24);
  long long v6 = *(_OWORD *)(a3 + 33);
  *(unsigned char *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 33) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 80) = 0;
  if (*(unsigned char *)(a3 + 80))
  {
    long long v7 = *(_OWORD *)(a3 + 56);
    *(void *)(a2 + 72) = *(void *)(a3 + 72);
    *(_OWORD *)(a2 + 56) = v7;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 56) = 0;
    *(unsigned char *)(a2 + 80) = 1;
  }
  *(unsigned char *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  if (*(unsigned char *)(a3 + 128))
  {
    sub_1000E2908(a2 + 88, (uint64_t *)(a3 + 88));
    *(unsigned char *)(a2 + 128) = 1;
  }
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a3 + 136);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 144) = 0;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(void *)(a2 + 160) = *(void *)(a3 + 160);
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  *(void *)(a3 + 144) = 0;
  __n128 result = *(__n128 *)(a3 + 168);
  *(unsigned char *)(a2 + 184) = 0;
  *(__n128 *)(a2 + 168) = result;
  *(unsigned char *)(a2 + 208) = 0;
  if (*(unsigned char *)(a3 + 208))
  {
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    __n128 result = *(__n128 *)(a3 + 184);
    *(__n128 *)(a2 + 184) = result;
    *(void *)(a2 + 200) = *(void *)(a3 + 200);
    *(void *)(a3 + 184) = 0;
    *(void *)(a3 + 192) = 0;
    *(void *)(a3 + 200) = 0;
    *(unsigned char *)(a2 + 208) = 1;
  }
  return result;
}

uint64_t sub_10022387C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002238B4((uint64_t *)a1);
  }
  return a1;
}

void sub_1002238B4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100223908(v3, v1);
      v1 += 216;
    }
    while (v1 != v2);
  }
}

void sub_100223908(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 208))
  {
    uint64_t v3 = *(void **)(a2 + 184);
    if (v3)
    {
      *(void *)(a2 + 192) = v3;
      operator delete(v3);
    }
  }
  uint64_t v4 = *(void **)(a2 + 144);
  if (v4)
  {
    *(void *)(a2 + 152) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 128)) {
    sub_1002220F0(a2 + 88);
  }
  if (*(unsigned char *)(a2 + 80) && *(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  long long v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void **sub_1002239A0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1002239D4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 216;
    sub_100223908(v4, i - 216);
  }
}

void *sub_100223A1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  long long v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    long long v10 = v4;
  }
  char v8 = 1;
  sub_100223AAC((uint64_t)v7);
  return v4;
}

uint64_t sub_100223AAC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

void sub_100223AE4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 -= 16;
  }
}

uint64_t sub_100223B28(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  if (*((unsigned char *)a2 + 240))
  {
    sub_100216310(a1 + 48, (uint64_t)(a2 + 3));
    *(unsigned char *)(a1 + 240) = 1;
  }
  sub_1002660C8(a1 + 248);
  return a1;
}

void sub_100223BC0(_Unwind_Exception *a1)
{
  sub_100216190(v2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100223BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100223C44(a3, v4);
      v4 += 192;
      a3 += 192;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_100223C44(uint64_t a1, uint64_t a2)
{
  sub_100267D64(a1, a2);
  long long v4 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  uint64_t v5 = *(void ***)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  sub_10021E098((void ***)(a1 + 160), v5);
  sub_1000F4EBC(a1 + 168, (__n128 *)(a2 + 168));
  return a1;
}

void *sub_100223C9C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10229F7C0;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = a3;
  a1[1] = [[CLHomeNearbyRangeBridge alloc] initWithDelegate:a1 withUniverse:a2];
  return a1;
}

uint64_t sub_100223D00(uint64_t a1)
{
  *(void *)a1 = off_10229F7C0;
  [*(id *)(a1 + 8) stopRanging];

  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100223D5C(uint64_t a1)
{
  sub_100223D00(a1);

  operator delete();
}

id sub_100223D94(uint64_t a1)
{
  return [*(id *)(a1 + 8) startRanging];
}

id sub_100223D9C(uint64_t a1)
{
  return [*(id *)(a1 + 8) stopRanging];
}

void sub_100223DA4(uint64_t a1, uint64_t a2)
{
  long long v3 = [[CLHomeNearbyRangeBridgeRateConfiguration alloc] initWithUpdateRate:*(void *)a2 withDuration:*(double *)(a2 + 8)];
  [*(id *)(a1 + 8) setRangingRateWithConfiguration:v3];
}

id sub_100223E0C(uint64_t a1)
{
  return _[*(id *)(a1 + 8) resetRangingRate];
}

uint64_t sub_100223E14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t sub_100223E3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))();
}

uint64_t sub_100223E64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))();
}

uint64_t sub_100223E8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

uint64_t sub_100223EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

void sub_100223EDC(uint64_t a1, uint64_t **a2)
{
  [*(id *)(a1 + 16) silo];
  sub_100223F80(a2, (uint64_t)v5);
  CFAbsoluteTime Current_5 = j__CFAbsoluteTimeGetCurrent_5();
  (*(void (**)(void, unsigned char *, CFAbsoluteTime))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v5, Current_5);
  long long v6 = (void **)v5;
  sub_1002242EC(&v6);
}

void sub_100223F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002242EC((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100223F80(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = 0;
  long long v3 = 0uLL;
  long long v9 = 0u;
  long long v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    do
    {
      sub_1002E5DC4(v4, v7);
      if (v8)
      {
        sub_100224068((uint64_t *)&v9, (uint64_t)v7);
        if (v8) {
          sub_100240760((wireless_diagnostics::google::protobuf::MessageLite *)v7);
        }
      }
      v4 += 10;
    }
    while (v4 != v5);
    long long v3 = v9;
    uint64_t v6 = v10;
  }
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = v6;
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  v7[0] = (void **)&v9;
  sub_1002242EC(v7);
}

void sub_100224034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18) {
    sub_100240760((wireless_diagnostics::google::protobuf::MessageLite *)&a10);
  }
  a10 = (void **)(v18 - 64);
  sub_1002242EC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100224068(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v10 + 1) >> 58) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 5;
    if (v11 >> 5 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      char v14 = (char *)sub_10017EAF0(v4, v13);
    }
    else {
      char v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[64 * v10];
    uint64_t v18 = &v14[64 * v13];
    sub_1002406A8(v16, a2);
    uint64_t v17 = v16 + 64;
    sub_10022417C(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = sub_100224280((uint64_t)&v15);
  }
  else
  {
    uint64_t result = sub_1002406A8(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v9;
  return result;
}

void sub_10022415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022417C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1002241F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1002241F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_1002406A8(i + a7, i + a3))
    i -= 64;
  return a6;
}

uint64_t sub_100224280(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 64);
    *(void *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002242EC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 64;
      uint64_t v7 = v4 - 64;
      uint64_t v8 = v4 - 64;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1002243AC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419850))
  {
    sub_100228010((std::string *)&xmmword_102419838);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102419838, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419850);
  }
  if (byte_10241984F < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102419838, *((unint64_t *)&xmmword_102419838 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102419838;
    *(void *)(a1 + 16) = unk_102419848;
  }
}

void sub_100224468(_Unwind_Exception *a1)
{
}

void sub_100224480(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419870))
  {
    sub_10022828C((std::string *)&xmmword_102419858);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102419858, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419870);
  }
  if (byte_10241986F < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102419858, *((unint64_t *)&xmmword_102419858 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102419858;
    *(void *)(a1 + 16) = unk_102419868;
  }
}

void sub_10022453C(_Unwind_Exception *a1)
{
}

uint64_t sub_100224554(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = *(void *)(a3 + 8);
  long long v6 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 40);
  sub_10026CB60(a1 + 56, a3);
  return a1;
}

void sub_1002245BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002245DC(uint64_t *a1)
{
  BOOL v2 = sub_10014C3C0(*a1);
  *((unsigned char *)a1 + 8) = v2;
  if (v2)
  {
    sub_100224A04(a1);
    sub_1005F7B0C(*a1, "MicroLocationConfiguration", (const char **)&off_10229F838, 0, 0);
    char v3 = sub_1005F93E4(*a1, "MicroLocationConfiguration");
    *((unsigned char *)a1 + 8) = v3;
    if (v3)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F818);
      }
      uint64_t v4 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315138;
        uint64_t v9 = "MicroLocationConfiguration";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 == -1) {
          goto LABEL_16;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F818);
      }
      uint64_t v7 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        uint64_t v9 = "MicroLocationConfiguration";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229F818);
        }
        long long v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMicroLocationConfigurationTable::initTable()", "%s\n");
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F818);
    }
    uint64_t v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our table", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 == -1)
      {
LABEL_16:
        long long v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationConfigurationTable::initTable()", "%s\n");
LABEL_26:
        if (v6 != buf) {
          free(v6);
        }
        return;
      }
LABEL_28:
      dispatch_once(&qword_102419450, &stru_10229F818);
      goto LABEL_16;
    }
  }
}

uint64_t sub_1002249D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  sub_1002245DC((uint64_t *)a1);
  return a1;
}

uint64_t sub_100224A04(uint64_t *a1)
{
  uint64_t result = sub_1005F93E4(*a1, "MicroLocationConfiguration");
  if (result)
  {
    uint64_t v3 = *a1;
    return sub_1001E1DE8(v3, (uint64_t *)&off_10229F838, 6, "MicroLocationConfiguration");
  }
  return result;
}

uint64_t sub_100224A6C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v1 = *(void *)a1;
    if (byte_10247A6B7 >= 0) {
      BOOL v2 = &xmmword_10247A6A0;
    }
    else {
      BOOL v2 = (long long *)xmmword_10247A6A0;
    }
    sub_10014D518(v1, (uint64_t)v2);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F818);
  }
  uint64_t v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F818);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationConfigurationTable::insertOrReplace(const std::vector<CLMicroLocationConfigurationTable::Entry> &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

void sub_100225138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002251D0@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = sub_1001E86C0(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_10229E8C8;
    sub_1001E91E8((uint64_t)&v3);
  }
  return result;
}

void sub_100225254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  std::bad_cast::~bad_cast(&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void sub_100225280(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *((unsigned char *)&v45.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v45, "SELECT * FROM (");
  char v44 = 7;
  strcpy(__s, "SELECT ");
  long long v6 = std::string::append(&v45, __s, 7uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1002243AC((uint64_t)__p);
  if ((v42 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v42 & 0x80u) == 0) {
    std::string::size_type v9 = v42;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(&v46, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v47, " FROM ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  char v14 = std::string::append(&v48, "MicroLocationConfiguration");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  long long v16 = std::string::append(&v49, " ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a2 + 23);
  if (v18 >= 0) {
    uint64_t v19 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v19 = *(const std::string::value_type **)a2;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 8);
  }
  uint64_t v21 = std::string::append(&v50, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  uint64_t v23 = std::string::append(&v51, " ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  uint64_t v25 = std::string::append(&v57, " ORDER BY ");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  double v27 = std::string::append(&v58, "GenerationTimestamp");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  uint64_t v29 = std::string::append(&v52, " DESC LIMIT ");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v40, a3);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v31 = &v40;
  }
  else {
    uint64_t v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
  }
  int v33 = std::string::append(&v59, (const std::string::value_type *)v31, size);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v53, ") ORDER BY ");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v37 = std::string::append(&v56, "GenerationTimestamp");
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t v55 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string v54 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if ((char)v42 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v55 >= 0) {
    long long v39 = v54;
  }
  else {
    long long v39 = (void **)v54[0];
  }
  sub_10014D518(a1, (uint64_t)v39);
}

void sub_100225848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void **buf)
{
  int buf = &a51;
  sub_1002283E4(&buf);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100225C8C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v52.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v52, "WHERE ");
    uint64_t v12 = std::string::append(&v52, "ConfigurationType");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v14 = std::string::append(&v53, "=");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v18 = std::string::append(&v54, (const std::string::value_type *)p_p, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v20 = std::string::append(&v55, " AND ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v56, "GenerationTimestamp");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v57, "<= ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = *(char *)(a5 + 23);
    if (v26 >= 0) {
      double v27 = (const std::string::value_type *)a5;
    }
    else {
      double v27 = *(const std::string::value_type **)a5;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v28 = *(void *)(a5 + 8);
    }
    uint64_t v29 = std::string::append(&v58, v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a2 + 24))
    {
      *((unsigned char *)&v54.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v54, " AND ");
      uint64_t v31 = std::string::append(&v54, "RTLOIType");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v33 = std::string::append(&v55, "=\"");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (!*(unsigned char *)(a2 + 24)) {
        sub_10020D700();
      }
      int v35 = *(char *)(a2 + 23);
      if (v35 >= 0) {
        long long v36 = (const std::string::value_type *)a2;
      }
      else {
        long long v36 = *(const std::string::value_type **)a2;
      }
      if (v35 >= 0) {
        std::string::size_type v37 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v37 = *(void *)(a2 + 8);
      }
      long long v38 = std::string::append(&v56, v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::string v40 = std::string::append(&v57, "\"");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned __int8 v42 = &v58;
      }
      else {
        unsigned __int8 v42 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v43 = v58.__r_.__value_.__l.__size_;
      }
      std::string::append(&v59, (const std::string::value_type *)v42, v43);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
    if (a3[16])
    {
      *((unsigned char *)&v57.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v57, " AND ");
      sub_100134750(&v55, "RtLoiGroupId");
      if (!a3[16]) {
        sub_10020D700();
      }
      sub_10022B538((const void **)&v55.__r_.__value_.__l.__data_, a3, (uint64_t)&v56);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v44 = &v56;
      }
      else {
        char v44 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = v56.__r_.__value_.__l.__size_;
      }
      std::string v46 = std::string::append(&v57, (const std::string::value_type *)v44, v45);
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v48 = &v58;
      }
      else {
        std::string v48 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = v58.__r_.__value_.__l.__size_;
      }
      std::string::append(&v59, (const std::string::value_type *)v48, v49);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
    }
    sub_100225280(*(void *)a1, (uint64_t)&v59, 1u);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F818);
  }
  std::string v50 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    v59.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v59.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, table is not valid so we can't get the most recent configuration before time\"}", (uint8_t *)&v59, 0x12u);
  }
  *a6 = 0;
  a6[112] = 0;
}

void sub_100226230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  *(void *)(v47 - 160) = v47 - 128;
  sub_1002283E4((void ***)(v47 - 160));
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_1002263F4(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, unsigned char *a5@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v41.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v41, "WHERE ");
    uint64_t v10 = std::string::append(&v41, "ConfigurationType");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v42, "=");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, *a2);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v14 = &v40;
    }
    else {
      char v14 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    long long v16 = std::string::append(&v43, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a3 + 24))
    {
      *((unsigned char *)&v39.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v39, " AND ");
      int v18 = std::string::append(&v39, "RTLOIType");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v20 = std::string::append(&v40, "=\"");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (!*(unsigned char *)(a3 + 24)) {
        sub_10020D700();
      }
      int v22 = *(char *)(a3 + 23);
      if (v22 >= 0) {
        long long v23 = (const std::string::value_type *)a3;
      }
      else {
        long long v23 = *(const std::string::value_type **)a3;
      }
      if (v22 >= 0) {
        std::string::size_type v24 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v24 = *(void *)(a3 + 8);
      }
      long long v25 = std::string::append(&v41, v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      double v27 = std::string::append(&v42, "\"");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v43;
      }
      else {
        uint64_t v29 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = v43.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v29, v30);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
    }
    if (a4[16])
    {
      *((unsigned char *)&v42.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v42, " AND ");
      sub_100134750(&v40, "RtLoiGroupId");
      if (!a4[16]) {
        sub_10020D700();
      }
      sub_10022B538((const void **)&v40.__r_.__value_.__l.__data_, a4, (uint64_t)&v41);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &v41;
      }
      else {
        uint64_t v31 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = v41.__r_.__value_.__l.__size_;
      }
      int v33 = std::string::append(&v42, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v43;
      }
      else {
        int v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v35, v36);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    sub_100225280(*(void *)a1, (uint64_t)&v44, 1u);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F818);
  }
  std::string::size_type v37 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v44.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't get the most recent wifi channel histogram", (uint8_t *)&v44, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v44, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F818);
    }
    LOWORD(v43.__r_.__value_.__l.__data_) = 0;
    long long v38 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<CLMicroLocationConfigurationTable::Entry> CLMicroLocationConfigurationTable::getMostRecentConfigurationAtLoi(const CLMicroLocationProto::ConfigurationType &, const std::optional<const std::string> &, const std::optional<const boost::uuids::uuid> &)", "%s\n", (const char *)v38);
    if (v38 != &v44) {
      free(v38);
    }
  }
  *a5 = 0;
  a5[112] = 0;
}

void sub_100226944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
}

void sub_100226AB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  v45[0] = a2;
  v45[1] = a3;
  if (*(unsigned char *)(a1 + 8))
  {
    long long v6 = (char *)operator new(0x28uLL);
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = xmmword_101D048C0;
    *(_OWORD *)long long v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *(void *)(v6 + 29) = 0;
    sub_1001E0650((uint64_t)v45, v6);
    std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v44;
    }
    else {
      uint64_t v8 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v44.__r_.__value_.__l.__size_;
    }
    LOBYTE(v42) = 45;
    std::string::size_type v9 = sub_100227008(v8, (unsigned __int8 *)v8 + size, (unsigned __int8 *)&v42);
    uint64_t v10 = (char *)&v44 + HIBYTE(v44.__r_.__value_.__r.__words[2]);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      long long v11 = &v44;
    }
    else
    {
      uint64_t v10 = (char *)(v44.__r_.__value_.__r.__words[0] + v44.__r_.__value_.__l.__size_);
      long long v11 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v44, v9 - (unsigned __int8 *)v11, v10 - (char *)v9);
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v34, "WHERE ");
    uint64_t v12 = std::string::append(&v34, "ConfigurationType");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v14 = std::string::append(&v35, "=");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    int v18 = std::string::append(&v36, (const std::string::value_type *)p_p, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v20 = std::string::append(&v37, " AND HEX(");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = std::string::append(&v38, "Configuration");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v24 = std::string::append(&v39, ") LIKE '%");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v26 = &v44;
    }
    else {
      long long v26 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v44.__r_.__value_.__l.__size_;
    }
    long long v28 = std::string::append(&v40, (const std::string::value_type *)v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v30 = std::string::append(&v41, "%'");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type v43 = v30->__r_.__value_.__r.__words[2];
    long long v42 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    sub_100225280(*(void *)a1, (uint64_t)&v42, 1u);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F818);
  }
  std::string::size_type v32 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    v44.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(v44.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, table is not valid so we can't get cluster anchor value statistics maps from it\"}", (uint8_t *)&v44, 0x12u);
  }
  *a4 = 0;
  a4[112] = 0;
}

void sub_100226ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  *(void *)(v54 - 192) = v54 - 160;
  sub_1002283E4((void ***)(v54 - 192));
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 73) < 0) {
    operator delete(*(void **)(v54 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_100226FFC()
{
}

unsigned __int8 *sub_100227008(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    uint64_t result = a2;
  }
  long long v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_100227070(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v37, "DELETE FROM ");
    uint64_t v4 = std::string::append(&v37, "MicroLocationConfiguration");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    long long v6 = std::string::append(&v38, " WHERE ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v39, "GenerationTimestamp");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v40, " IN (");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v41, "SELECT ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v14 = std::string::append(&v42, "GenerationTimestamp");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    long long v16 = std::string::append(&v43, " FROM ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = std::string::append(&v44, "MicroLocationConfiguration");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v20 = std::string::append(&v45, " ORDER BY ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = std::string::append(&v46, "GenerationTimestamp");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v24 = std::string::append(&v47, " LIMIT ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, a2);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v26 = &v36;
    }
    else {
      long long v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    long long v28 = std::string::append(&v48, (const std::string::value_type *)v26, size);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v30 = std::string::append(&v51, ")");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t v50 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (v50 >= 0) {
      std::string::size_type v32 = __p;
    }
    else {
      std::string::size_type v32 = (void **)__p[0];
    }
    sub_10014D518(*(void *)a1, (uint64_t)v32);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F818);
  }
  int v33 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't deleteOldestRows", (uint8_t *)&v51, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v51, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F818);
    }
    LOWORD(__p[0]) = 0;
    std::string v35 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationConfigurationTable::deleteOldestRows(uint64_t)", "%s\n", (const char *)v35);
    if (v35 != &v51) {
      free(v35);
    }
  }
  return 0;
}

void sub_100227704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  if (a66 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002278AC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1002278DC@<X0>(sqlite3_stmt *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  long long v6 = sqlite3_column_blob(a1, a2);
  int v7 = sqlite3_column_bytes(a1, a2);
  if (!v6) {
    sub_101A54760();
  }
  int v8 = v7;
  sub_10023E1B0(a3);
  uint64_t result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromArray(v9, v6, v8);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_100134750(&v12, "Unable to parse protobuf");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10229F018;
  }
  return result;
}

void sub_1002279BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_10026CC30(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_100227A04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x249249249249249) {
    sub_1001D7FD4();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v10 = 0x249249249249249;
  }
  else {
    unint64_t v10 = v6;
  }
  int v18 = a1 + 2;
  if (v10) {
    long long v11 = (char *)sub_100227C5C((uint64_t)(a1 + 2), v10);
  }
  else {
    long long v11 = 0;
  }
  char v14 = v11;
  long long v15 = &v11[112 * v5];
  int v17 = &v11[112 * v10];
  sub_100227B44((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  long long v16 = v15 + 112;
  sub_100227BE4(a1, &v14);
  uint64_t v12 = a1[1];
  sub_100227EEC(&v14);
  return v12;
}

void sub_100227B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100227EEC((void **)va);
  _Unwind_Resume(a1);
}

void sub_100227B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
  }
  sub_100224554(a2, (long long *)__p, a4, *a5, a5[1]);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100227BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100227BE4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100227CA8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100227C5C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_1001D7FA0();
  }
  return operator new(112 * a2);
}

uint64_t sub_100227CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 112;
      sub_100227D74(a1, v7 - 112, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 112;
      *((void *)&v16 + 1) -= 112;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100227E10((uint64_t)v13);
  return v11;
}

void sub_100227D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100227D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }
  long long v7 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v7;
  return sub_10026CB60(a2 + 56, a3 + 56);
}

void sub_100227DF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100227E10(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100227E48((uint64_t *)a1);
  }
  return a1;
}

void sub_100227E48(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100227E9C(v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
}

void sub_100227E9C(uint64_t a1, uint64_t a2)
{
  sub_10026CC30((wireless_diagnostics::google::protobuf::MessageLite *)(a2 + 56));
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void **sub_100227EEC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100227F20(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    sub_100227E9C(v4, i - 112);
  }
}

uint64_t sub_100227F68(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  sub_10026CB60(a1 + 56, a2 + 56);
  *(unsigned char *)(a1 + 112) = 1;
  return a1;
}

void sub_100227FF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_100228010@<D0>(std::string *a1@<X8>)
{
  memset(&v3, 0, sizeof(v3));
  sub_100228074(&v3);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_100228058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100228074(std::string *a1)
{
  sub_1002150C8(a1);
  sub_10021519C(a1);
  sub_1002280CC(a1);
  sub_1002281AC(a1);
  sub_1001E8488(a1);

  return sub_10021535C(a1);
}

uint64_t sub_1002280CC(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "ConfigurationType");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    long long v4 = __p;
  }
  else {
    long long v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_100228178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002281AC(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  uint64_t v2 = std::string::append(&v7, "Configuration");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    long long v4 = __p;
  }
  else {
    long long v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_100228258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_10022828C@<D0>(std::string *a1@<X8>)
{
  sub_100134750(&v11, "VALUES (");
  uint64_t v2 = 6;
  do
  {
    if (v2 == 6)
    {
      *((unsigned char *)&v8.__r_.__value_.__s + 23) = 0;
      v8.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      *((unsigned char *)&v8.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v8, ", ");
    }
    long long v3 = std::string::append(&v8, "?");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    int64_t v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v10 >= 0) {
      std::string::size_type v5 = __p;
    }
    else {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (v10 >= 0) {
      std::string::size_type v6 = HIBYTE(v10);
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v11, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    --v2;
  }
  while (v2);
  std::string::append(&v11, ")");
  double result = *(double *)&v11.__r_.__value_.__l.__data_;
  *a1 = v11;
  return result;
}

void sub_100228398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002283E4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    std::string::size_type v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_100227E9C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      std::string::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10022847C()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101D04970;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MicroLocationConfiguration");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  uint64_t v2 = std::string::append(&v20, " (");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1002243AC((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  std::string::size_type v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string v8 = std::string::append(&v22, ") ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_100224480((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    int64_t v10 = __p;
  }
  else {
    int64_t v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_10247A6B0 = *((void *)&v12->__r_.__value_.__l + 2);
  xmmword_10247A6A0 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A6A0, (void *)&_mh_execute_header);
}

void sub_100228674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 25) < 0) {
    operator delete(*(void **)(v40 - 48));
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100228720(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419890, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419890))
  {
    sub_10022CA14((std::string *)&xmmword_102419878);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102419878, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419890);
  }
  if (byte_10241988F < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102419878, *((unint64_t *)&xmmword_102419878 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102419878;
    *(void *)(a1 + 16) = unk_102419888;
  }
}

void sub_1002287DC(_Unwind_Exception *a1)
{
}

void sub_1002287F4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024198B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024198B0))
  {
    sub_1001E8568((std::string *)&xmmword_102419898);
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102419898, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024198B0);
  }
  if (byte_1024198AF < 0)
  {
    sub_1000DC48C((unsigned char *)a1, (void *)xmmword_102419898, *((unint64_t *)&xmmword_102419898 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102419898;
    *(void *)(a1 + 16) = unk_1024198A8;
  }
}

void sub_1002288B0(_Unwind_Exception *a1)
{
}

void sub_1002288C8(uint64_t *a1)
{
  BOOL v2 = sub_10014C3C0(*a1);
  *((unsigned char *)a1 + 8) = v2;
  if (v2)
  {
    sub_1005F7B0C(*a1, "MiLoLoiTable", (const char **)&off_10229F9A8, 0, 0);
    char v3 = sub_1005F93E4(*a1, "MiLoLoiTable");
    *((unsigned char *)a1 + 8) = v3;
    if (v3)
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
      uint64_t v4 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315138;
        long long v9 = "MiLoLoiTable";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sucessfully created table if necessary: %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 == -1) {
          goto LABEL_16;
        }
        goto LABEL_28;
      }
    }
    else
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
      long long v7 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136446210;
        long long v9 = "MiLoLoiTable";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to create table: %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229F988);
        }
        std::string::size_type v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMiLoLoiTable::initTable()", "%s\n");
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F988);
    }
    std::string::size_type v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Database is not connected so we can't intialize our table", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 == -1)
      {
LABEL_16:
        std::string::size_type v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMiLoLoiTable::initTable()", "%s\n");
LABEL_26:
        if (v6 != buf) {
          free(v6);
        }
        return;
      }
LABEL_28:
      dispatch_once(&qword_102419450, &stru_10229F988);
      goto LABEL_16;
    }
  }
}

uint64_t sub_100228CB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  sub_1002288C8((uint64_t *)a1);
  return a1;
}

uint64_t sub_100228CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, double a7)
{
  *(double *)a1 = a7;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  uint64_t v8 = a1 + 40;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)v8, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v9 = *a6;
    *(void *)(v8 + 16) = *((void *)a6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }
  return a1;
}

void sub_100228D40(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *((unsigned char *)&v44.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v44, "SELECT * FROM (");
  char v43 = 7;
  strcpy(__s, "SELECT ");
  long long v7 = std::string::append(&v44, __s, 7uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_100228720((uint64_t)__p);
  if ((v41 & 0x80u) == 0) {
    long long v9 = __p;
  }
  else {
    long long v9 = (void **)__p[0];
  }
  if ((v41 & 0x80u) == 0) {
    std::string::size_type v10 = v41;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  std::string::size_type v11 = std::string::append(&v45, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  long long v13 = std::string::append(&v46, " FROM ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  long long v15 = std::string::append(&v47, "MiLoLoiTable");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = std::string::append(&v48, " ");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = *(char *)(a3 + 23);
  if (v19 >= 0) {
    std::string v20 = (const std::string::value_type *)a3;
  }
  else {
    std::string v20 = *(const std::string::value_type **)a3;
  }
  if (v19 >= 0) {
    std::string::size_type v21 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v21 = *(void *)(a3 + 8);
  }
  std::string v22 = std::string::append(&v54, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v24 = std::string::append(&v55, " ORDER BY ");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  long long v26 = std::string::append(&v49, "LastSeenTimeStamp");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  long long v28 = std::string::append(&v56, " DESC LIMIT ");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, a4);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = &v39;
  }
  else {
    std::string::size_type v30 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  std::string::size_type v32 = std::string::append(&v50, (const std::string::value_type *)v30, size);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  char v38 = 1;
  strcpy(v37, ")");
  std::string v34 = std::string::append(&v53, v37, 1uLL);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  int64_t v52 = v34->__r_.__value_.__r.__words[2];
  long long v51 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v38 < 0) {
    operator delete(*(void **)v37);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((char)v41 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (v52 >= 0) {
    std::string v36 = &v51;
  }
  else {
    std::string v36 = (long long *)v51;
  }
  sub_10014D518(a2, (uint64_t)v36);
}

void sub_1002292C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void **buf)
{
  int buf = &a47;
  sub_10020D8FC(&buf);
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002296CC()
{
}

void sub_1002296E0(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x1002294C4);
}

uint64_t sub_1002296F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v1 = *(void *)a1;
    if (byte_10247A6CF >= 0) {
      BOOL v2 = &xmmword_10247A6B8;
    }
    else {
      BOOL v2 = (long long *)xmmword_10247A6B8;
    }
    sub_10014D518(v1, (uint64_t)v2);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F988);
  }
  char v3 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't insert or replace", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F988);
    }
    std::string::size_type v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMiLoLoiTable::insertOrReplace(const std::vector<CLMiLoLoiTable::Entry> &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

void sub_100229DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,std::bad_cast a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_100229E44(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v23.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v23, "WHERE ");
    long long v8 = std::string::append(&v23, "LoiId");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    char v22 = 2;
    strcpy(__s, "=\"");
    std::string::size_type v10 = std::string::append(&v24, __s, 2uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    memset(&__p, 0, sizeof(__p));
    if (sub_1001E86C0(a2, &__p))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      long long v14 = std::string::append(&v25, (const std::string::value_type *)p_p, size);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      HIBYTE(v30) = 1;
      strcpy(v28, "\"");
      long long v16 = std::string::append(&v26, v28, 1uLL);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      double v27[2] = (void *)v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v27 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v30) < 0) {
        operator delete(*(void **)v28);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (v22 < 0) {
        operator delete(*(void **)__s);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      sub_100228D40((uint64_t)v16, *(void *)a1, (uint64_t)v27, a3);
    }
    std::bad_cast::bad_cast((std::bad_cast *)v28);
    *(void *)long long v28 = &off_10229E8C8;
    sub_1001E91E8((uint64_t)v28);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F988);
  }
  long long v18 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't get LOI Group Id for LOI", (uint8_t *)v28, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v28, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F988);
    }
    LOWORD(v27[0]) = 0;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<boost::uuids::uuid> CLMiLoLoiTable::getLoiGroupIdForLoi(const boost::uuids::uuid &, uint32_t)", "%s\n", v19);
    if (v19 != v28) {
      free(v19);
    }
  }
  *a4 = 0;
  a4[16] = 0;
}

void sub_10022A220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,std::bad_cast a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
}

void sub_10022A2E4(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v52 = 0;
  if (*(unsigned char *)(a1 + 8))
  {
    if (*a2 != a2[1])
    {
      *((unsigned char *)&v53.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v53, " WHERE ");
      long long v8 = std::string::append(&v53, "LoiId");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__s, " IN ");
      std::string::size_type v10 = std::string::append(&v49, (const std::string::value_type *)&__s, 4uLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v47.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&v47, "(");
      long long v12 = std::string::append(&v54, (const std::string::value_type *)&v47, 1uLL);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      if (*a2 != v15)
      {
        unsigned int v16 = 1;
        do
        {
          memset(&__s, 0, sizeof(__s));
          if ((sub_1001E86C0(v14, &__s) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v54);
            v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10229E8C8;
            sub_1001E91E8((uint64_t)&v54);
          }
          long long v17 = std::string::insert(&__s, 0, "\"");
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v53.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          int v19 = std::string::append(&v53, "\"");
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v21 = &v49;
          }
          else {
            std::string::size_type v21 = (std::string *)v49.__r_.__value_.__r.__words[0];
          }
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v49.__r_.__value_.__l.__size_;
          }
          std::string::append(&v50, (const std::string::value_type *)v21, size);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (v16 < (unint64_t)((a2[1] - *a2) >> 4)) {
            std::string::append(&v50, ",");
          }
          v14 += 16;
          ++v16;
        }
        while (v14 != v15);
      }
      *((unsigned char *)&v54.__r_.__value_.__s + 23) = 1;
      LOWORD(v54.__r_.__value_.__l.__data_) = 41;
      std::string::append(&v50, (const std::string::value_type *)&v54, 1uLL);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      *((unsigned char *)&v45.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v45, "SELECT DISTINCT ");
      std::string v23 = std::string::append(&v45, "LoiGroupId");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      char v44 = 6;
      strcpy(v43, " FROM ");
      std::string v25 = std::string::append(&v46, v43, 6uLL);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      long long v27 = std::string::append(&v47, "MiLoLoiTable");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v29 = &v50;
      }
      else {
        long long v29 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = v50.__r_.__value_.__l.__size_;
      }
      long long v31 = std::string::append(&__s, (const std::string::value_type *)v29, v30);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      long long v33 = std::string::append(&v53, " LIMIT ");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v42, a3);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &v42;
      }
      else {
        long long v35 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v42.__r_.__value_.__l.__size_;
      }
      std::string v37 = std::string::append(&v54, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (v44 < 0) {
        operator delete(*(void **)v43);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v39 = &v49;
      }
      else {
        std::string v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      sub_10014D518(*(void *)a1, (uint64_t)v39);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F988);
    }
    uint64_t v40 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v54.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't get LOI Group Id for LOIs", (uint8_t *)&v54, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v54, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
      LOWORD(v50.__r_.__value_.__l.__data_) = 0;
      unsigned __int8 v41 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<boost::uuids::uuid> CLMiLoLoiTable::getLoiGroupIdsForLois(const std::vector<boost::uuids::uuid> &, uint32_t)", "%s\n", (const char *)v41);
      if (v41 != &v54) {
        free(v41);
      }
    }
    *(_OWORD *)a4 = *(_OWORD *)__p;
    a4[2] = v52;
  }
}

void sub_10022AB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

#error "10022AEF0: call analysis failed (funcsize=112)"

void sub_10022AF20()
{
}

void sub_10022AF34(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x10022AD2CLL);
}

uint64_t sub_10022AF44(uint64_t a1, uint64_t *a2, long long **a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*a3 == a3[1])
    {
      return 1;
    }
    else
    {
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      unint64_t v42 = 0;
      CFAbsoluteTime Current_5 = j__CFAbsoluteTimeGetCurrent_5();
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if (*(char *)(a4 + 23) < 0)
      {
        sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a4;
        uint64_t v39 = *(void *)(a4 + 16);
      }
      *(CFAbsoluteTime *)&long long v43 = Current_5;
      *((void *)&v43 + 1) = v9;
      *(void *)&long long v44 = v10;
      *((void *)&v44 + 1) = v9;
      uint64_t v45 = v10;
      if (SHIBYTE(v39) < 0)
      {
        sub_1000DC48C(&v46, __p[0], (unint64_t)__p[1]);
        if (SHIBYTE(v39) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v46 = *(_OWORD *)__p;
        uint64_t v47 = v39;
      }
      unint64_t v13 = v41;
      if (v41 >= v42)
      {
        uint64_t v18 = sub_10022CFC4(&v40, &v43);
      }
      else
      {
        long long v14 = v43;
        long long v15 = v44;
        *(void *)(v41 + 32) = v45;
        *(_OWORD *)unint64_t v13 = v14;
        *(_OWORD *)(v13 + 16) = v15;
        unsigned int v16 = (unsigned char *)(v13 + 40);
        if (SHIBYTE(v47) < 0)
        {
          sub_1000DC48C(v16, (void *)v46, *((unint64_t *)&v46 + 1));
        }
        else
        {
          long long v17 = v46;
          *(void *)(v13 + 56) = v47;
          *(_OWORD *)unsigned int v16 = v17;
        }
        uint64_t v18 = v13 + 64;
      }
      unint64_t v41 = v18;
      int v19 = *a3;
      long long v20 = a3[1];
      if (*a3 != v20)
      {
        do
        {
          CFAbsoluteTime v21 = j__CFAbsoluteTimeGetCurrent_5();
          long long v22 = *v19;
          long long v23 = *(_OWORD *)a2;
          if (*(char *)(a4 + 23) < 0)
          {
            long long v34 = *(_OWORD *)a2;
            long long v35 = *v19;
            sub_1000DC48C(__dst, *(void **)a4, *(void *)(a4 + 8));
            long long v23 = v34;
            long long v22 = v35;
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)a4;
            uint64_t v37 = *(void *)(a4 + 16);
          }
          *(CFAbsoluteTime *)int buf = v21;
          *(_OWORD *)&uint8_t buf[8] = v22;
          *(_OWORD *)&unsigned char buf[24] = v23;
          if (SHIBYTE(v37) < 0)
          {
            sub_1000DC48C(&v49, __dst[0], (unint64_t)__dst[1]);
          }
          else
          {
            long long v49 = *(_OWORD *)__dst;
            uint64_t v50 = v37;
          }
          long long v43 = *(_OWORD *)buf;
          long long v44 = *(_OWORD *)&buf[16];
          uint64_t v45 = *(void *)&buf[32];
          if (SHIBYTE(v47) < 0) {
            operator delete((void *)v46);
          }
          long long v46 = v49;
          uint64_t v47 = v50;
          HIBYTE(v50) = 0;
          LOBYTE(v49) = 0;
          if (SHIBYTE(v37) < 0) {
            operator delete(__dst[0]);
          }
          unint64_t v24 = v41;
          if (v41 >= v42)
          {
            uint64_t v29 = sub_10022CFC4(&v40, &v43);
          }
          else
          {
            long long v25 = v43;
            long long v26 = v44;
            *(void *)(v41 + 32) = v45;
            *(_OWORD *)unint64_t v24 = v25;
            *(_OWORD *)(v24 + 16) = v26;
            long long v27 = (unsigned char *)(v24 + 40);
            if (SHIBYTE(v47) < 0)
            {
              sub_1000DC48C(v27, (void *)v46, *((unint64_t *)&v46 + 1));
            }
            else
            {
              long long v28 = v46;
              *(void *)(v24 + 56) = v47;
              *(_OWORD *)long long v27 = v28;
            }
            uint64_t v29 = v24 + 64;
          }
          unint64_t v41 = v29;
          ++v19;
        }
        while (v19 != v20);
      }
      uint64_t v12 = sub_1002296F0(a1);
      if ((v12 & 1) == 0)
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229F988);
        }
        std::string::size_type v30 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#Warning Failed to update LOI Database Table with LOI Ids", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229F988);
          }
          long long v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMiLoLoiTable::updateLoiGroupIdForLois(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &)", "%s\n", v33);
          if (v33 != buf) {
            free(v33);
          }
        }
      }
      if (SHIBYTE(v47) < 0) {
        operator delete((void *)v46);
      }
      *(void *)int buf = &v40;
      sub_10020D8FC((void ***)buf);
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F988);
    }
    long long v11 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we update LOIGroupId for specified LOI Ids", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229F988);
      }
      LOWORD(v43) = 0;
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMiLoLoiTable::updateLoiGroupIdForLois(const boost::uuids::uuid &, const std::vector<boost::uuids::uuid> &, const std::string &)", "%s\n", v32);
      if (v32 != buf) {
        free(v32);
      }
    }
    return 0;
  }
  return v12;
}

void sub_10022B4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char *a44)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  a44 = &a30;
  sub_10020D8FC((void ***)&a44);
  _Unwind_Resume(a1);
}

double sub_10022B538@<D0>(const void **a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (*a2)
  {
LABEL_2:
    if (*((char *)a1 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v6 = (size_t)a1[1];
    }
    long long v7 = &v64;
    sub_1001110E4((uint64_t)&v64, v6 + 12);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v7 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a1 + 23) >= 0) {
        long long v8 = a1;
      }
      else {
        long long v8 = *a1;
      }
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, " IN (SELECT ");
    uint64_t v9 = std::string::append(&v64, "MiLoLoiTable");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    long long v11 = std::string::append(&v65, ".");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    unint64_t v13 = std::string::append(&v66, "LoiId");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    long long v15 = std::string::append(&v67, " FROM ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    long long v17 = std::string::append(&v68, "MiLoLoiTable");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = std::string::append(&v69, " WHERE ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    CFAbsoluteTime v21 = std::string::append(&v70, "MiLoLoiTable");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    long long v23 = std::string::append(&v71, ".");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    long long v25 = std::string::append(&v72, "LoiGroupId");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    long long v27 = std::string::append(&v73, "=(SELECT ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    uint64_t v29 = std::string::append(&v74, "MiLoLoiTable");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    long long v31 = std::string::append(&v75, ".");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    long long v33 = std::string::append(&v76, "LoiGroupId");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    long long v35 = std::string::append(&v77, " FROM ");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint64_t v37 = std::string::append(&v78, "MiLoLoiTable");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    uint64_t v39 = std::string::append(&v79, " WHERE ");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    unint64_t v41 = std::string::append(&v80, "MiLoLoiTable");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    long long v43 = std::string::append(&v81, ".");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    uint64_t v45 = std::string::append(&v82, "LoiId");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v83, "=\"");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    memset(&__p, 0, sizeof(__p));
    if ((sub_1001E86C0((uint64_t)a2, &__p) & 1) == 0)
    {
      uint64_t v62 = std::bad_cast::bad_cast(v86);
      v86[0].__vftable = (std::bad_cast_vtbl *)&off_10229E8C8;
      sub_1001E91E8((uint64_t)v62);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v51 = std::string::append(&v84, (const std::string::value_type *)p_p, size);
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::string v53 = std::string::append(&v85, "\"))");
    std::string::size_type v55 = v53->__r_.__value_.__l.__size_;
    *(void *)a3 = v53->__r_.__value_.__r.__words[0];
    *(void *)(a3 + 8) = v55;
    *(void *)(a3 + 15) = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v55) = *((unsigned char *)&v53->__r_.__value_.__s + 23);
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    int v56 = SHIBYTE(v85.__r_.__value_.__r.__words[2]);
    *(unsigned char *)(a3 + 23) = v55;
    if (v56 < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v57 = 1;
    while (v57 != 16)
    {
      if (a2[v57++])
      {
        if ((unint64_t)(v57 - 2) < 0xF) {
          goto LABEL_2;
        }
        break;
      }
    }
    if (*((char *)a1 + 23) >= 0) {
      size_t v59 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v59 = (size_t)a1[1];
    }
    uint64_t v60 = (char *)v86;
    sub_1001110E4((uint64_t)v86, v59 + 3);
    if (SHIBYTE(v87) < 0) {
      uint64_t v60 = (char *)v86[0].__vftable;
    }
    if (v59)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v61 = a1;
      }
      else {
        uint64_t v61 = *a1;
      }
      memmove(v60, v61, v59);
    }
    *(_DWORD *)&v60[v59] = 2236989;
    double result = *(double *)&v86[0].__vftable;
    *(_OWORD *)a3 = *(_OWORD *)&v86[0].__vftable;
    *(void *)(a3 + 16) = v87;
  }
  return result;
}

void sub_10022BBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  if (*(char *)(v85 - 73) < 0) {
    operator delete(*(void **)(v85 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v85 - 105) < 0) {
    operator delete(*(void **)(v85 - 128));
  }
  if (*(char *)(v85 - 137) < 0) {
    operator delete(*(void **)(v85 - 160));
  }
  if (*(char *)(v85 - 169) < 0) {
    operator delete(*(void **)(v85 - 192));
  }
  if (*(char *)(v85 - 201) < 0) {
    operator delete(*(void **)(v85 - 224));
  }
  if (*(char *)(v85 - 233) < 0) {
    operator delete(*(void **)(v85 - 256));
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a85);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_10022BDB8()
{
}

void sub_10022BDC0()
{
}

void sub_10022BDC8()
{
}

void sub_10022BDD0()
{
}

void sub_10022BDD8()
{
}

void sub_10022BDE0()
{
}

void sub_10022BDE8()
{
}

void sub_10022BDF0()
{
}

void sub_10022BDF8()
{
}

void sub_10022BE00()
{
}

void sub_10022BE08()
{
}

void sub_10022BE10()
{
}

void sub_10022BE18()
{
}

void sub_10022BE20()
{
}

void sub_10022BE28()
{
}

void sub_10022BE30(uint64_t a1@<X0>, unsigned char *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v18.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v18, "WHERE ");
    sub_100134750(v14, "LoiId");
    sub_10022B538((const void **)v14, a2, (uint64_t)__p);
    if ((v17 & 0x80u) == 0) {
      long long v8 = __p;
    }
    else {
      long long v8 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v9 = v17;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    long long v10 = std::string::append(&v18, (const std::string::value_type *)v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)int buf = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    sub_100228D40((uint64_t)v10, *(void *)a1, (uint64_t)buf, a3);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F988);
  }
  long long v12 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid, can't select LOI IDs for specified LOI Group Id", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F988);
    }
    LOWORD(v18.__r_.__value_.__l.__data_) = 0;
    unint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLMiLoLoiTable::Entry> CLMiLoLoiTable::selectLoiIdsInLoiGroupId(const boost::uuids::uuid &, uint32_t)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
}

void sub_10022C0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void sub_10022C11C(uint64_t *a1)
{
  *((unsigned char *)&v17.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&v17, "SELECT COUNT(*) FROM ");
  BOOL v2 = std::string::append(&v17, "MiLoLoiTable");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  char v16 = 7;
  strcpy(__s, " WHERE ");
  uint64_t v4 = std::string::append(&v18, __s, 7uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  size_t v6 = std::string::append(&v19, "LoiId");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  char v14 = 1;
  strcpy(v13, "=");
  long long v8 = std::string::append(&v23, v13, 1uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  long long v10 = std::string::append(&v22, "LoiGroupId");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(*(void **)v13);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v21 >= 0) {
    long long v12 = __p;
  }
  else {
    long long v12 = (void **)__p[0];
  }
  sub_10014D518(*a1, (uint64_t)v12);
}

unint64_t sub_10022C5FC(sqlite3_stmt *a1, int a2)
{
  unint64_t result = sqlite3_column_int64(a1, a2);
  if ((result & 0x8000000000000000) != 0) {
    sub_101A549E8();
  }
  if (HIDWORD(result)) {
    sub_101A54B60();
  }
  return result;
}

void sub_10022C628(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 8))
  {
    *((unsigned char *)&v18.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v18, " WHERE ");
    size_t v6 = std::string::insert(&v18, 0, "MiLoLoiTable");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v19, "LoiId");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    char v17 = 1;
    strcpy(__s, "=");
    long long v10 = std::string::append(&v20, __s, 1uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = std::string::append(&v21, "LoiGroupId");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (v17 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    sub_100228D40((uint64_t)v12, *(void *)a1, (uint64_t)__p, a2);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229F988);
  }
  char v14 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Table is not valid so we can't select all loi groups", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229F988);
    }
    LOWORD(v21.__r_.__value_.__l.__data_) = 0;
    char v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLMiLoLoiTable::Entry> CLMiLoLoiTable::selectAllLoiGroups(uint32_t)", "%s\n", v15);
    if (v15 != (char *)__p) {
      free(v15);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_10022C924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
}

void sub_10022C9B4(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10022C9E4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

double sub_10022CA14@<D0>(std::string *a1@<X8>)
{
  memset(&v3, 0, sizeof(v3));
  sub_10022CA78(&v3);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_10022CA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022CA78(std::string *a1)
{
  sub_10021D87C(a1);
  sub_10021D950(a1);
  sub_10022CAC8(a1);
  sub_10022CBA8(a1);

  return sub_10022CC88(a1);
}

uint64_t sub_10022CAC8(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "LoiId");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10022CB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022CBA8(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "LoiGroupId");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10022CC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022CC88(std::string *a1)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v7, ", ");
  BOOL v2 = std::string::append(&v7, "LoiType");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v9 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v9 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v5 = HIBYTE(v9);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_10022CD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022CD68(uint64_t *a1, uint64_t *a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 6;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58) {
    sub_1001D7FD4();
  }
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 5 > v7) {
    unint64_t v7 = v12 >> 5;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  std::string v21 = a1 + 2;
  if (v13) {
    char v14 = (char *)sub_10017EAF0((uint64_t)(a1 + 2), v13);
  }
  else {
    char v14 = 0;
  }
  char v17 = v14;
  std::string v18 = &v14[64 * v6];
  std::string v20 = &v14[64 * v13];
  sub_10022CE80((uint64_t)(a1 + 2), (uint64_t)v18, a2, a3, a4, a5);
  std::string v19 = v18 + 64;
  sub_10022CF4C(a1, &v17);
  uint64_t v15 = a1[1];
  sub_10020E07C((uint64_t)&v17);
  return v15;
}

void sub_10022CE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10020E07C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022CE80(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t v7 = *a3;
  long long v8 = *a4;
  long long v9 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    long long v11 = *a5;
    long long v12 = *a4;
    sub_1000DC48C(__p, *(void **)a6, *(void *)(a6 + 8));
    long long v9 = v11;
    long long v8 = v12;
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a6;
    uint64_t v14 = *(void *)(a6 + 16);
  }
  *(void *)a2 = v7;
  *(_OWORD *)(a2 + 8) = v8;
  *(_OWORD *)(a2 + 24) = v9;
  long long v10 = (unsigned char *)(a2 + 40);
  if (SHIBYTE(v14) < 0)
  {
    sub_1000DC48C(v10, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v10 = *(_OWORD *)__p;
    *(void *)(a2 + 56) = v14;
  }
}

void sub_10022CF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022CF4C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10020DE34((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10022CFC4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string v21 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10017EAF0(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  std::string v19 = v11;
  std::string v20 = &v10[64 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)long long v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  uint64_t v14 = v11 + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_1000DC48C(v14, *((void **)a2 + 5), *((void *)a2 + 6));
    long long v11 = v19;
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 40);
    *((void *)v11 + 7) = *((void *)a2 + 7);
    *(_OWORD *)uint64_t v14 = v15;
  }
  std::string v19 = v11 + 64;
  sub_10022CF4C(a1, v18);
  uint64_t v16 = a1[1];
  sub_10020E07C((uint64_t)v18);
  return v16;
}

void sub_10022D0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10020E07C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022D0DC()
{
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_101D04970;
  strcpy(v19.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
  CFStringRef v0 = std::string::append(&v19, "MiLoLoiTable");
  long long v1 = *(_OWORD *)&v0->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v0->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v1;
  v0->__r_.__value_.__l.__size_ = 0;
  v0->__r_.__value_.__r.__words[2] = 0;
  v0->__r_.__value_.__r.__words[0] = 0;
  BOOL v2 = std::string::append(&v20, " (");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_100228720((uint64_t)v17);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v5 = v18;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v17[1];
  }
  uint64_t v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v22, ") ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1002287F4((uint64_t)__p);
  if ((v16 & 0x80u) == 0) {
    long long v10 = __p;
  }
  else {
    long long v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  long long v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  unk_10247A6C8 = *((void *)&v12->__r_.__value_.__l + 2);
  xmmword_10247A6B8 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247A6B8, (void *)&_mh_execute_header);
}

void sub_10022D2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 25) < 0) {
    operator delete(*(void **)(v40 - 48));
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022D380(uint64_t *a1)
{
  uint64_t result = objc_opt_class();
  if (result)
  {
    uint64_t result = objc_opt_new();
    *a1 = result;
  }
  return result;
}

void sub_10022D3BC(id *a1)
{
  *a1 = 0;
}

id *sub_10022D3E8(id *result, void *a2)
{
  if (*result)
  {
    long long v3 = result;
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FAE8);
    }
    uint64_t v4 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Saving Microlocation localization results to Biome restricted stream", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FAE8);
      }
      __int16 v14 = 0;
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicrolocationBiomePublisherHelper::saveEventsToBiomeStream(NSArray<BMMicroLocationRestrictedLocalizationEvent *> *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    id v5 = [*v3 source];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t result = (id *)[a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)v11;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(a2);
          }
          [v5 sendEvent:*(void *)(*((void *)&v10 + 1) + 8 * (void)v8)];
          uint64_t v8 = (id *)((char *)v8 + 1);
        }
        while (v6 != v8);
        uint64_t result = (id *)[a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
        uint64_t v6 = result;
      }
      while (result);
    }
  }
  return result;
}

id sub_10022D618(uint64_t a1, void *a2)
{
  id result = (id)objc_opt_class();
  if (result)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FAE8);
    }
    uint64_t v4 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Saving Microlocation localization results to Biome public stream", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FAE8);
      }
      __int16 v14 = 0;
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicrolocationBiomePublisherHelper::saveEventsToPublicBiomeStream(NSArray<BMLocationMicroLocationVisit *> *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    id v5 = [[[BiomeLibrary() Location] MicroLocationVisit] source];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id result = [a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
    if (result)
    {
      id v6 = result;
      uint64_t v7 = *(void *)v11;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(a2);
          }
          [v5 sendEvent:*(void *)(*((void *)&v10 + 1) + 8 * (void)v8)];
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id result = [a2 countByEnumeratingWithState:&v10 objects:v15 count:16];
        id v6 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_10022D854(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_10022D884(void *a1, uint64_t a2)
{
  *a1 = a2;
  v6[0] = off_10229FB68;
  v6[1] = a1;
  void v6[3] = v6;
  v7[0] = off_10229FBF8;
  v7[1] = a1;
  void v7[3] = v7;
  v8[0] = off_10229FC78;
  v8[1] = a1;
  void v8[3] = v8;
  v9[0] = off_10229FCF8;
  v9[1] = a1;
  void v9[3] = v9;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  long long v3 = (char *)operator new(0x80uLL);
  a1[3] = v3 + 128;
  a1[1] = v3;
  a1[2] = v3;
  a1[2] = sub_10022EFC8((uint64_t)(a1 + 3), (uint64_t)v6, (uint64_t)&v10, (uint64_t)v3);
  for (uint64_t i = 12; i != -4; i -= 4)
    sub_10022E964(&v6[i]);
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

void sub_10022D9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v14 = v13;
  *(void *)(v12 + 16) = v14;
  sub_10022F0E4(&a10);
  for (uint64_t i = 96; i != -32; i -= 32)
    sub_10022E964(&a12 + i);
  _Unwind_Resume(a1);
}

void sub_10022DA20(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 64) = j__CFAbsoluteTimeGetCurrent_5();
  *(_DWORD *)(a1 + 32) = sub_10020EB4C(*(void *)a1);
  *(_DWORD *)(a1 + 36) = sub_10020E920(*(void *)a1);
  *(_DWORD *)(a1 + 40) = sub_10020E638(*(void *)a1);
  *(_DWORD *)(a1 + 44) = sub_10020ED78(*(void *)a1);
  *(_DWORD *)(a1 + 48) = sub_10020F054(*(void *)a1);
  *(double *)(a1 + 56) = sub_100200F3C(*(void *)a1);
}

void sub_10022DA90(uint64_t a1)
{
  sub_1000C7F88(buf);
  v17[0] = 0;
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  char v3 = sub_1000D29FC(*(uint64_t *)buf, (uint64_t)v2, v17);
  CFRelease(v2);
  BOOL v4 = v17[0];
  if (v34) {
    sub_1000DB0A0(v34);
  }
  if (v4) {
    char v5 = 0;
  }
  else {
    char v5 = v3;
  }
  if (v5)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FB38);
    }
    id v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLMicroLocationMaintenance, collectMetricsPostMaintenance, not sending event because sending to CoreAnalytics is disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FB38);
      }
      *(_WORD *)char v17 = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationMaintenance::collectMetricsPostMaintenance()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    double Current_5 = j__CFAbsoluteTimeGetCurrent_5();
    double v9 = *(double *)(a1 + 56);
    int v10 = sub_10020EB4C(*(void *)a1);
    int v11 = sub_10020E920(*(void *)a1);
    int v12 = sub_10020E638(*(void *)a1);
    int v13 = sub_10020ED78(*(void *)a1);
    int v14 = sub_10020F054(*(void *)a1);
    sub_100203B78(*(void *)a1, buf);
    CFAbsoluteTime v15 = j__CFAbsoluteTimeGetCurrent_5();
    double v16 = *(double *)(a1 + 64);
    unsigned __int8 v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3321888768;
    std::string v20 = sub_10022DE14;
    std::string v21 = &unk_10229FB08;
    uint64_t v22 = a1;
    uint64_t v23 = (uint64_t)((Current_5 - v9) / 60.0);
    int v28 = v10;
    int v29 = v11;
    int v30 = v12;
    int v31 = v13;
    int v32 = v14;
    double v24 = v15 - v16;
    long long v26 = 0;
    uint64_t v27 = 0;
    std::string __p = 0;
    sub_10017C680(&__p, *(const void **)buf, (uint64_t)v34, ((uint64_t)v34 - *(void *)buf) >> 4);
    AnalyticsSendEventLazy();
    if (__p)
    {
      long long v26 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      long long v34 = *(std::__shared_weak_count **)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_10022DDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_10022DE14(uint64_t a1)
{
  CFStringRef v2 = *(_DWORD **)(a1 + 32);
  v4[0] = @"ageOfOldestRecordingDays";
  v5[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v4[1] = @"numModels";
  v5[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
  uint64_t v4[2] = @"numModelsDeleted";
  uint64_t v5[2] = +[NSNumber numberWithUnsignedInt:(v2[8] - *(_DWORD *)(a1 + 80))];
  v4[3] = @"numRecordingEvents";
  void v5[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  v4[4] = @"numRecordingEventsDeleted";
  v5[4] = +[NSNumber numberWithUnsignedInt:(v2[9] - *(_DWORD *)(a1 + 84))];
  v4[5] = @"numMeasurements";
  v5[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
  v4[6] = @"numMeasurementsDeleted";
  void v5[6] = +[NSNumber numberWithUnsignedInt:(v2[10] - *(_DWORD *)(a1 + 88))];
  v4[7] = @"numConfigurations";
  v5[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  v4[8] = @"numConfiguationsDeleted";
  v5[8] = +[NSNumber numberWithUnsignedInt:(v2[11] - *(_DWORD *)(a1 + 92))];
  v4[9] = @"numRapportEntries";
  v5[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  v4[10] = @"numRapportEntriesDeleted";
  v5[10] = +[NSNumber numberWithUnsignedInt:(v2[12] - *(_DWORD *)(a1 + 96))];
  v4[11] = @"maintenanceRunTime";
  v5[11] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  v4[12] = @"numCustomLoiIds";
  v5[12] = +[NSNumber numberWithUnsignedLong:(uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:13];
}

void *sub_10022E02C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  CFStringRef v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return sub_10017C680(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
}

void sub_10022E048(uint64_t a1)
{
  CFStringRef v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_10022E060(void **a1)
{
  long long v1 = *a1;
  sub_1000C7F88(&v14);
  *(_DWORD *)int buf = 0;
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRecordingPurgeAge", 0x8000100u, kCFAllocatorNull);
  int v3 = sub_1004D08E4(v14, (uint64_t)v2, buf);
  CFRelease(v2);
  unsigned int v4 = *(_DWORD *)buf;
  if (*((void *)&v14 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v14 + 1));
  }
  if (v3) {
    uint64_t v5 = 1440 * v4;
  }
  else {
    uint64_t v5 = 70560;
  }
  sub_1000C7F88(&v14);
  *(_DWORD *)int buf = 0;
  CFStringRef v6 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsSimilarityListLabelsPurgeAge", 0x8000100u, kCFAllocatorNull);
  sub_1004D08E4(v14, (uint64_t)v6, buf);
  CFRelease(v6);
  if (*((void *)&v14 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v14 + 1));
  }
  int v7 = sub_1001FAE40(v1, v5);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FB38);
  }
  uint64_t v8 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    double v9 = "NOT ";
    if (v7) {
      double v9 = "";
    }
    *(_DWORD *)int buf = 136446210;
    int v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Did %{public}s delete old data", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FB38);
    }
    int v10 = "NOT ";
    if (v7) {
      int v10 = "";
    }
    LODWORD(v14) = 136446210;
    *(void *)((char *)&v14 + 4) = v10;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationMaintenance::deleteOldEntries()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

#error "10022E500: call analysis failed (funcsize=105)"

void sub_10022E560(uint64_t *a1)
{
  int v1 = sub_100207078(*a1);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FB38);
  }
  CFStringRef v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    int v3 = "NOT";
    if (v1) {
      int v3 = "";
    }
    *(_DWORD *)int buf = 136446210;
    CFStringRef v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Did %{public}s free database space", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FB38);
    }
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationMaintenance::freeDatabaseSpace()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

#error "10022E8D4: call analysis failed (funcsize=103)"

void sub_10022E934(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void *sub_10022E964(void *a1)
{
  CFStringRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10022E9EC()
{
}

void *sub_10022EA00(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_10229FB68;
  result[1] = v3;
  return result;
}

uint64_t sub_10022EA48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10229FB68;
  a2[1] = v2;
  return result;
}

void *sub_10022EA74(uint64_t a1, uint64_t a2)
{
  sub_10022EB40((uint64_t)v4, a2);
  sub_10022DA20(*(void *)(a1 + 8));
  return sub_1001EFA74(v4);
}

void sub_10022EAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001EFA74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022EAF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10022EB34()
{
}

uint64_t sub_10022EB40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_10022EBC4()
{
}

void *sub_10022EBD8(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_10229FBF8;
  result[1] = v3;
  return result;
}

uint64_t sub_10022EC20(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10229FBF8;
  a2[1] = v2;
  return result;
}

void *sub_10022EC4C(uint64_t a1, uint64_t a2)
{
  sub_10022EB40((uint64_t)v4, a2);
  sub_10022E060(*(void ***)(a1 + 8));
  return sub_1001EFA74(v4);
}

void sub_10022ECB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001EFA74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022ECCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10022ED0C()
{
}

void sub_10022ED1C()
{
}

void *sub_10022ED30(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_10229FC78;
  result[1] = v3;
  return result;
}

uint64_t sub_10022ED78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10229FC78;
  a2[1] = v2;
  return result;
}

void *sub_10022EDA4(uint64_t a1, uint64_t a2)
{
  sub_10022EB40((uint64_t)v4, a2);
  sub_10022E560(*(uint64_t **)(a1 + 8));
  return sub_1001EFA74(v4);
}

void sub_10022EE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001EFA74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022EE24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10022EE64()
{
}

void sub_10022EE74()
{
}

void *sub_10022EE88(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_10229FCF8;
  result[1] = v3;
  return result;
}

uint64_t sub_10022EED0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10229FCF8;
  a2[1] = v2;
  return result;
}

void *sub_10022EEFC(uint64_t a1, uint64_t a2)
{
  sub_10022EB40((uint64_t)v4, a2);
  sub_10022DA90(*(void *)(a1 + 8));
  return sub_1001EFA74(v4);
}

void sub_10022EF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001EFA74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022EF7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10022EFBC()
{
}

uint64_t sub_10022EFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10022F04C(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10022F028(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      sub_10022E964((void *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022F04C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10022F0E4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_10022E964(v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_10022F168(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1001D7FD4();
  }
  id result = (char *)sub_1000C571C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

double sub_10022F1AC(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_WORD *)(a1 + 141) = 0;
  *(_WORD *)(a1 + 158) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 94) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 118) = 0;
  *(_DWORD *)(a1 + 175) = 0;
  *(void *)(a1 + 184) = a2;
  return result;
}

uint64_t sub_10022F1EC(unsigned __int8 *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  int v10 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    int buf = (void *)68289794;
    *(_WORD *)uint64_t v60 = 2082;
    *(void *)&v60[2] = "";
    __int16 v61 = 1026;
    *(_DWORD *)uint64_t v62 = a3;
    *(_WORD *)&void v62[4] = 1026;
    *(_DWORD *)&v62[6] = a4;
    LOWORD(v63[0]) = 2050;
    *(void *)((char *)v63 + 2) = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: requestLocalization\", \"isForce\":%{public}hhd, \"isInMotionTrigger\":%{public}hhd, \"TriggerReason\":%{public}lu}", (uint8_t *)&buf, 0x28u);
  }
  int v11 = sub_1002332AC(a1, a2);
  char v12 = v11;
  if (v11) {
    unsigned int v13 = 5;
  }
  else {
    unsigned int v13 = 0;
  }
  unsigned int v56 = v13;
  double v55 = sub_1002E8470(a2);
  BOOL v14 = sub_10022FF00(a2);
  id v15 = +[NSMutableDictionary dictionary];
  if (v12)
  {
    unsigned int v13 = 5;
    goto LABEL_29;
  }
  if (a1[124])
  {
    (*(void (**)(void, uint64_t))(**((void **)a1 + 23) + 32))(*((void *)a1 + 23), a2);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    double v16 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while waiting for rescheduled localization timer", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FD68);
      }
      LOWORD(v54[0]) = 0;
      char v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLocationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)", "%s\n", v17);
      if (v17 != (char *)&buf) {
        free(v17);
      }
    }
LABEL_27:
    unsigned int v13 = 1;
LABEL_28:
    unsigned int v56 = v13;
    goto LABEL_29;
  }
  int v18 = *a1;
  if (v18 == 1)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    uint64_t v19 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got localization trigger while localizing - AcceptedOngoing", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FD68);
      }
      LOWORD(v54[0]) = 0;
      long long v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLocationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)", "%s\n", v51);
      if (v51 != (char *)&buf) {
        free(v51);
      }
    }
    (*(void (**)(void, uint64_t, void))(**((void **)a1 + 23) + 24))(*((void *)a1 + 23), a2, v14 & (a4 ^ 1u));
    goto LABEL_27;
  }
  if (*((_DWORD *)a1 + 24) == 1)
  {
    long long v26 = (uint64_t *)*((void *)a1 + 3);
    if (v26)
    {
      while (*((_DWORD *)v26 + 8) != 1)
      {
        long long v26 = (uint64_t *)*v26;
        if (!v26) {
          goto LABEL_53;
        }
      }
      if (sub_10022FF94() && !a3)
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229FD68);
        }
        uint64_t v27 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: Got unforced localization trigger in low latency - ReturnCache", (uint8_t *)&buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229FD68);
          }
          LOWORD(v54[0]) = 0;
          long long v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestLocalization(const CLMicroLocationProto::RecordingEvent &, const BOOL, const BOOL, CLMicroLocationProto::TriggerReason)", "%s\n", v52);
          if (v52 != (char *)&buf) {
            free(v52);
          }
        }
        unsigned int v13 = 4;
        goto LABEL_28;
      }
      int v18 = *a1;
    }
  }
LABEL_53:
  if (v18 == 2) {
    (*(void (**)(void, uint64_t))(**((void **)a1 + 23) + 40))(*((void *)a1 + 23), 2);
  }
  double v28 = v55;
  double v29 = *((double *)a1 + 13);
  sub_1000C7F88(&buf);
  v54[0] = 0;
  CFStringRef v30 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMinDurationBetweenTriggers", 0x8000100u, kCFAllocatorNull);
  int v31 = sub_1000A6A10((uint64_t)buf, (uint64_t)v30, v54);
  CFRelease(v30);
  double v32 = v28 - v29;
  double v33 = *(double *)v54;
  if (*(void *)v60) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v60);
  }
  double v34 = 3.0;
  if (v31) {
    double v34 = v33;
  }
  if (v32 >= v34)
  {
    if ((*(uint64_t (**)(void))(**((void **)a1 + 23) + 88))(*((void *)a1 + 23)))
    {
      sub_1002300D8((uint64_t)a1, a2, 1, &v55, (uint64_t)v15, v14 & a4);
      goto LABEL_29;
    }
    unint64_t v40 = *((void *)a1 + 10);
    if (v40 >= *((void *)a1 + 11))
    {
      uint64_t v41 = sub_1002335AC((uint64_t *)a1 + 9);
    }
    else
    {
      sub_1002660C8(*((void *)a1 + 10));
      uint64_t v41 = v40 + 136;
      *((void *)a1 + 10) = v40 + 136;
    }
    *((void *)a1 + 10) = v41;
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    uint64_t v50 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      int buf = (void *)68289026;
      *(_WORD *)uint64_t v60 = 2082;
      *(void *)&v60[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Wait For Display On\"}", (uint8_t *)&buf, 0x12u);
    }
    unsigned int v13 = 2;
    goto LABEL_28;
  }
  uint64_t v35 = qword_102419450;
  if (v55 < *((double *)a1 + 13))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    long long v36 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *((void *)a1 + 13);
      int buf = (void *)68289538;
      *(_WORD *)uint64_t v60 = 2082;
      *(void *)&v60[2] = "";
      __int16 v61 = 2050;
      *(double *)uint64_t v62 = v55;
      *(_WORD *)&v62[8] = 2050;
      v63[0] = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FD68);
      }
    }
    long long v38 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      uint64_t v39 = *((void *)a1 + 13);
      int buf = (void *)68289538;
      *(_WORD *)uint64_t v60 = 2082;
      *(void *)&v60[2] = "";
      __int16 v61 = 2050;
      *(double *)uint64_t v62 = v55;
      *(_WORD *)&v62[8] = 2050;
      v63[0] = v39;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fLastTrigger is in the past", "{\"msg%{public}.0s\":\"fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
      uint64_t v35 = qword_102419450;
    }
    else
    {
      uint64_t v35 = -1;
    }
    *((double *)a1 + 13) = v55;
  }
  if (v35 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  long long v42 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v43 = *((void *)a1 + 13);
    int buf = (void *)68289538;
    *(_WORD *)uint64_t v60 = 2082;
    *(void *)&v60[2] = "";
    __int16 v61 = 2050;
    *(double *)uint64_t v62 = v55;
    *(_WORD *)&v62[8] = 2050;
    v63[0] = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: Reschedule trigger\", \"triggerTS\":\"%{public}.3f\", \"fLastTriggerTS\":\"%{public}.3f\"}", (uint8_t *)&buf, 0x26u);
  }
  unint64_t v44 = *((void *)a1 + 10);
  if (v44 >= *((void *)a1 + 11))
  {
    uint64_t v45 = sub_1002335AC((uint64_t *)a1 + 9);
  }
  else
  {
    sub_1002660C8(*((void *)a1 + 10));
    uint64_t v45 = v44 + 136;
    *((void *)a1 + 10) = v44 + 136;
  }
  *((void *)a1 + 10) = v45;
  unsigned int v56 = 3;
  sub_1000C7F88(&buf);
  v54[0] = 0;
  CFStringRef v46 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLocalizationRescheduleDelay", 0x8000100u, kCFAllocatorNull);
  int v47 = sub_1000A6A10((uint64_t)buf, (uint64_t)v46, v54);
  CFRelease(v46);
  double v48 = *(double *)v54;
  if (*(void *)v60) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v60);
  }
  double v49 = 5.0;
  if (v47) {
    double v49 = v48;
  }
  (*(void (**)(void, uint64_t))(**((void **)a1 + 23) + 72))(*((void *)a1 + 23), (uint64_t)((v49 - (v55 - *((double *)a1 + 13))) * 1000.0));
  a1[124] = 1;
  if (!a1[175]) {
    sub_100231F3C((uint64_t)a1, a2);
  }
  unsigned int v13 = 3;
LABEL_29:
  sub_100230500((uint64_t)a1, a2, 0, a5, v13, (uint64_t)v54);
  uint64_t v20 = *((void *)a1 + 23);
  int v53 = 0;
  sub_1001EE1F4(&v53);
  __p[0] = (void *)sub_1001EC8C4((ssize_t)&v53);
  __p[1] = v21;
  double Current_5 = j__CFAbsoluteTimeGetCurrent_5();
  sub_100230A14(__p, (uint64_t)v54, (uint64_t)&buf, Current_5);
  (*(void (**)(uint64_t, void **))(*(void *)v20 + 96))(v20, &buf);
  sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)((char *)v63 + 2));
  sub_1001EF3E8((unsigned int *)&v53);
  int v53 = 0;
  sub_1002E57D0(&v53, &buf);
  sub_1002E57F4((int *)&v56, __p);
  (*(void (**)(void))(**((void **)a1 + 23) + 88))(*((void *)a1 + 23));
  if (*((_DWORD *)a1 + 24) == 1)
  {
    uint64_t v23 = (uint64_t *)*((void *)a1 + 3);
    if (v23)
    {
      while (*((_DWORD *)v23 + 8) != 1)
      {
        uint64_t v23 = (uint64_t *)*v23;
        if (!v23) {
          goto LABEL_33;
        }
      }
      sub_10022FF94();
    }
  }
LABEL_33:
  sub_1002722E4();
  if (v58 < 0) {
    operator delete(__p[0]);
  }
  if ((v62[3] & 0x80000000) != 0) {
    operator delete(buf);
  }
  uint64_t v24 = v56;
  sub_100267FDC((wireless_diagnostics::google::protobuf::MessageLite *)v54);
  return v24;
}

void sub_10022FE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  *(void *)(v40 + 80) = v41;
  _Unwind_Resume(exception_object);
}

BOOL sub_10022FF00(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 128) & 4) == 0) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_102489AC0 + 16);
  }
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  int v3 = *((char *)v2 + 23);
  if (v3 < 0)
  {
    if (v2[1] != 20) {
      return 0;
    }
    uint64_t v2 = (uint64_t *)*v2;
  }
  else if (v3 != 20)
  {
    return 0;
  }
  uint64_t v4 = (uint64_t *)*v2;
  uint64_t v5 = v2[1];
  int v6 = *((_DWORD *)v2 + 4);
  return v4 == (uint64_t *)0x6C616E7265746E49 && v5 == 0x6F4D746E65696C43 && v6 == 1852795252;
}

uint64_t sub_10022FF94()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPedestrianFenceEnabled", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return 1;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100230028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100230044(uint64_t result, uint64_t a2, int a3)
{
  BOOL v4 = (uint64_t *)result;
  *(unsigned char *)(result + 124) = 1;
  if (*(unsigned char *)(result + 175))
  {
    if (!a3) {
      return result;
    }
  }
  else
  {
    double result = sub_100231F3C(result, a2);
    if (!a3) {
      return result;
    }
  }
  unint64_t v5 = v4[10];
  if (v5 >= v4[11])
  {
    double result = sub_1002335AC(v4 + 9);
  }
  else
  {
    sub_1002660C8(v4[10]);
    double result = v5 + 136;
    v4[10] = v5 + 136;
  }
  v4[10] = result;
  return result;
}

void sub_1002300D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 80) = v2;
  _Unwind_Resume(a1);
}

void sub_1002300D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  sub_1002E83D4(a2, v37);
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  int v11 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = v38;
    unsigned int v13 = "";
    if (v38)
    {
      BOOL v14 = operator new(0x28uLL);
      double v29 = v14;
      long long v30 = xmmword_101D048C0;
      *BOOL v14 = 0u;
      v14[1] = 0u;
      *(void *)((char *)v14 + 29) = 0;
      sub_1001E0650((uint64_t)v37, v14);
      if (v30 >= 0) {
        unsigned int v13 = (const char *)&v29;
      }
      else {
        unsigned int v13 = (const char *)v29;
      }
    }
    sub_100275744(a3, &__p);
    if (SHIBYTE(v28) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)int buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)double v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(void *)&v32[12] = v13;
    __int16 v33 = 2082;
    double v34 = p_p;
    __int16 v35 = 1026;
    int v36 = a6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger\", \"TriggerUUID\":%{public, location:escape_only}s, \"ScanActivity\":%{public, location:escape_only}s, \"isInMotionTrigger\":%{public}hhd}", buf, 0x2Cu);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
    if (v12 && SHIBYTE(v30) < 0) {
      operator delete(v29);
    }
  }
  *(unsigned char *)a1 = a3;
  *(void *)(a1 + 104) = *a4;
  if (a3 == 1) {
    *(void *)(a1 + 112) = *a4;
  }
  *(_WORD *)(a1 + 177) = a6 | 0x100;
  sub_100232568(a1, a2);
  sub_1002E83D4(a2, buf);
  LODWORD(__p) = 0;
  sub_1001EE1F4((int *)&__p);
  uint64_t v16 = sub_1001EC8C4((ssize_t)&__p);
  uint64_t v19 = *(void **)buf;
  uint64_t v18 = *(void *)v32;
  if (!v32[8])
  {
    uint64_t v18 = v17;
    uint64_t v19 = (void *)v16;
  }
  int v20 = *(unsigned __int8 *)(a1 + 158);
  *(void *)(a1 + 142) = v19;
  *(void *)(a1 + 150) = v18;
  if (!v20) {
    *(unsigned char *)(a1 + 158) = 1;
  }
  sub_1001EF3E8((unsigned int *)&__p);
  (*(void (**)(void, uint64_t, uint64_t, void *, uint64_t))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), a2, a3, a4, a5);
  if (*(unsigned char *)a1 == 1 && *(unsigned char *)(a1 + 176))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    std::string v21 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v32 = 2082;
      *(void *)&v32[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::startTrigger, setting medium confidence due to motion\"}", buf, 0x12u);
    }
    uint64_t v22 = *(void *)(a1 + 184);
    uint64_t v23 = operator new(4uLL);
    *(void *)int buf = v23;
    _DWORD *v23 = 2;
    *(void *)&v32[8] = v23 + 1;
    *(void *)double v32 = v23 + 1;
    uint64_t v24 = operator new(4uLL);
    std::string __p = v24;
    _DWORD *v24 = 1;
    uint64_t v27 = v24 + 1;
    double v28 = v24 + 1;
    (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v22 + 80))(v22, buf, &__p);
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      *(void *)double v32 = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_100230494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100230500(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int v27 = a5;
  unsigned int v28 = a3;
  sub_10023E010(a6);
  if ((*(unsigned char *)(a2 + 128) & 4) == 0) {
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_102489AC0 + 16);
  }
  if ((*(unsigned char *)(v10 + 44) & 4) != 0)
  {
    int v20 = *(long long **)(v10 + 16);
    if (*((char *)v20 + 23) < 0)
    {
      sub_1000DC48C(&__str, *(void **)v20, *((void *)v20 + 1));
    }
    else
    {
      long long v21 = *v20;
      __str.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
    }
  }
  else
  {
LABEL_5:
    sub_100134750(&__str, "");
  }
  *(_DWORD *)(a6 + 80) |= 0x10u;
  int v11 = *(std::string **)(a6 + 32);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v11, &__str);
  unsigned int v12 = v28;
  if (!sub_1001A4C4C(v28))
  {
    uint64_t v22 = "::CLMicroLocationProto::TriggerRequestType_IsValid(value)";
    int v23 = 20735;
    uint64_t v24 = "set_requesttype";
    goto LABEL_39;
  }
  *(_DWORD *)(a6 + 80) |= 0x100u;
  *(_DWORD *)(a6 + 56) = v12;
  if (!sub_1001A4C58(a4))
  {
    uint64_t v22 = "::CLMicroLocationProto::TriggerReason_IsValid(value)";
    int v23 = 20781;
    uint64_t v24 = "set_reason";
LABEL_39:
    __assert_rtn(v24, "microlocation.pb.h", v23, v22);
  }
  *(_DWORD *)(a6 + 80) |= 0x400u;
  *(_DWORD *)(a6 + 72) = a4;
  sub_1002E57D0(&v28, &v29);
  *(_DWORD *)(a6 + 80) |= 8u;
  unsigned int v13 = *(std::string **)(a6 + 16);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v13, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  sub_1002E83D4(a2, v30);
  if (v30[16])
  {
    memset(&v25, 0, sizeof(v25));
    if ((sub_1001E86C0((uint64_t)v30, &v25) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v29);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10229E8C8;
      sub_1001E91E8((uint64_t)&v29);
    }
    *(_DWORD *)(a6 + 80) |= 0x40u;
    BOOL v14 = *(std::string **)(a6 + 48);
    if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v14, &v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  char v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 88))(*(void *)(a1 + 184));
  *(_DWORD *)(a6 + 80) |= 4u;
  *(unsigned char *)(a6 + 28) = v15;
  unsigned int v16 = v27;
  if (!sub_1001A4C58(v27)) {
    __assert_rtn("set_requeststatus", "microlocation.pb.h", 20758, "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)");
  }
  *(_DWORD *)(a6 + 80) |= 0x200u;
  *(_DWORD *)(a6 + 60) = v16;
  sub_1002E57F4((int *)&v27, &v29);
  *(_DWORD *)(a6 + 80) |= 0x20u;
  uint64_t v17 = *(std::string **)(a6 + 40);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v17, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  char v18 = *(unsigned char *)(a1 + 124);
  *(_DWORD *)(a6 + 80) |= 0x80u;
  *(unsigned char *)(a6 + 29) = v18;
  if (*(unsigned char *)(a1 + 158))
  {
    memset(&v25, 0, sizeof(v25));
    if ((sub_1001E86C0(a1 + 142, &v25) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v29);
      v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_10229E8C8;
      sub_1001E91E8((uint64_t)&v29);
    }
    *(_DWORD *)(a6 + 80) |= 0x800u;
    uint64_t v19 = *(std::string **)(a6 + 64);
    if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v19, &v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_10023098C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::bad_cast a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::bad_cast::~bad_cast(&a24);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_100267FDC(v29);
  _Unwind_Resume(a1);
}

void sub_100230A14(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  sub_10023DF50((uint64_t)v8);
  sub_1002E7BD4((uint64_t)v8, a2);
  sub_10031A9F0(a3, a1, *(_DWORD *)(a2 + 24), (uint64_t)v8, a4);
  sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)v8);
}

void sub_100230A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100230AA0(unsigned __int8 *a1, uint64_t a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  BOOL v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLMicroLocationTriggerManager: requestRecording", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    LOWORD(v21[0]) = 0;
    int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMicroLocationProto::TriggerRequestStatus CLMicroLocationTriggerManager::requestRecording(const CLMicroLocationProto::RecordingEvent &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  unsigned int v24 = 0;
  if (sub_1002332AC(a1, a2)) {
    unsigned int v5 = 5;
  }
  else {
    unsigned int v5 = 0;
  }
  unsigned int v24 = v5;
  id v6 = +[NSMutableDictionary dictionary];
  if (v24 == 5) {
    goto LABEL_13;
  }
  int v7 = *a1;
  if (v7 == 1) {
    goto LABEL_32;
  }
  if (v7 == 2)
  {
    (*(void (**)(void, uint64_t, void))(**((void **)a1 + 23) + 24))(*((void *)a1 + 23), a2, 0);
    unsigned int v24 = 1;
    goto LABEL_13;
  }
  if (a1[176])
  {
LABEL_32:
    unint64_t v13 = *((void *)a1 + 7);
    if (v13 >= *((void *)a1 + 8))
    {
      uint64_t v14 = sub_1002335AC((uint64_t *)a1 + 6);
    }
    else
    {
      sub_1002660C8(*((void *)a1 + 7));
      uint64_t v14 = v13 + 136;
      *((void *)a1 + 7) = v13 + 136;
    }
    *((void *)a1 + 7) = v14;
    unsigned int v10 = 2;
    unsigned int v24 = 2;
    goto LABEL_36;
  }
  *(void *)int buf = sub_1002E8470(a2);
  sub_1002300D8((uint64_t)a1, a2, 2, buf, (uint64_t)v6, 0);
  if ((*(unsigned char *)(a2 + 129) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v8 = *(void *)(a2 + 88);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489AC0 + 88);
  }
  if ((*(unsigned char *)(v8 + 44) & 4) != 0)
  {
    int v11 = *(long long **)(v8 + 16);
    if (*((char *)v11 + 23) < 0)
    {
      sub_1000DC48C(buf, *(void **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v12 = *v11;
      uint64_t v28 = *((void *)v11 + 2);
      *(_OWORD *)int buf = v12;
    }
  }
  else
  {
LABEL_17:
    sub_100134750(buf, "");
  }
  int v23 = 1;
  sub_1002E57D0(&v23, v21);
  sub_1002E57F4((int *)&v24, __p);
  (*(void (**)(void))(**((void **)a1 + 23) + 88))(*((void *)a1 + 23));
  if (*((_DWORD *)a1 + 24) == 1)
  {
    double v9 = (uint64_t *)*((void *)a1 + 3);
    if (v9)
    {
      while (*((_DWORD *)v9 + 8) != 1)
      {
        double v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_22;
        }
      }
      sub_10022FF94();
    }
  }
LABEL_22:
  sub_1002722E4();
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  unsigned int v10 = v24;
LABEL_36:
  sub_100230500((uint64_t)a1, a2, 1u, 0, v10, (uint64_t)v21);
  uint64_t v15 = *((void *)a1 + 23);
  int v23 = 0;
  sub_1001EE1F4(&v23);
  __p[0] = (void *)sub_1001EC8C4((ssize_t)&v23);
  __p[1] = v16;
  double Current_5 = j__CFAbsoluteTimeGetCurrent_5();
  sub_100230A14(__p, (uint64_t)v21, (uint64_t)buf, Current_5);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v15 + 96))(v15, buf);
  sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)&v29);
  sub_1001EF3E8((unsigned int *)&v23);
  uint64_t v18 = v24;
  sub_100267FDC((wireless_diagnostics::google::protobuf::MessageLite *)v21);
  return v18;
}

void sub_100230F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  *(void *)(v38 + 56) = v39;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100230FA8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    BOOL v4 = *(uint64_t **)(a1 + 24);
    if (v4)
    {
      while (*((_DWORD *)v4 + 8) != 1)
      {
        BOOL v4 = (uint64_t *)*v4;
        if (!v4) {
          goto LABEL_5;
        }
      }
      goto LABEL_6;
    }
  }
LABEL_5:
  if (sub_100231268())
  {
LABEL_6:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    unsigned int v5 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 1026;
      LODWORD(p_p) = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion - setting fence\", \"onlyIfNotRunning\":%{public}hhd}", buf, 0x18u);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 184) + 48))(*(void *)(a1 + 184), a2);
    return 1;
  }
  if (*(_DWORD *)(a1 + 96))
  {
    __int16 v14 = 31075;
    std::string __p = *(void **)"LowLatency";
    uint64_t v7 = 10;
    char v8 = 10;
  }
  else
  {
    qmemcpy(&__p, "Legacy", 6);
    uint64_t v7 = 6;
    char v8 = 6;
  }
  *((unsigned char *)&__p + v7) = 0;
  char v15 = v8;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  double v9 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    for (uint64_t i = *(uint64_t **)(a1 + 24); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((_DWORD *)i + 8) == 1) {
        break;
      }
    }
    int v11 = sub_100231268();
    *(_DWORD *)int buf = 68289794;
    int v17 = 0;
    __int16 v18 = 2082;
    uint64_t v19 = "";
    __int16 v20 = 2082;
    p_p = &__p;
    __int16 v22 = 1026;
    BOOL v23 = i != 0;
    __int16 v24 = 1026;
    int v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager::requestMotion, denied requestMotion\", \"Mode\":%{public, location:escape_only}s, \"isLowLatencyPolicyAvailable\":%{public}hhd, \"PedestrianFenceWhenSpectatingEnabled\":%{public}hhd}", buf, 0x28u);
    int v12 = v15;
    *(unsigned char *)(a1 + 176) = 0;
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 176) = 0;
  }
  return 0;
}

void sub_100231244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100231268()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPedestrianFenceWhenSpectatingEnabled", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_1002312F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100231314(uint64_t a1)
{
  *(unsigned char *)(a1 + 176) = 1;
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t v1 = *(void *)(a1 + 184);
    BOOL v2 = operator new(4uLL);
    uint64_t v7 = v2;
    _DWORD *v2 = 2;
    char v8 = v2 + 1;
    double v9 = v2 + 1;
    int v3 = operator new(4uLL);
    std::string __p = v3;
    _DWORD *v3 = 1;
    uint64_t v5 = v3 + 1;
    id v6 = v3 + 1;
    (*(void (**)(uint64_t, void **, void **))(*(void *)v1 + 80))(v1, &v7, &__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      char v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_1002313D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100231404(uint64_t result)
{
  *(unsigned char *)(result + 176) = 0;
  return result;
}

uint64_t sub_10023140C(uint64_t a1, int a2, unsigned int a3)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  if (*(unsigned char *)a1 == 1
    && *(_DWORD *)(a1 + 96) == 1
    && !*(unsigned char *)(a1 + 176)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 184) + 88))(*(void *)(a1 + 184)))
  {
    (*(void (**)(void, void))(**(void **)(a1 + 184) + 48))(*(void *)(a1 + 184), 0);
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  id v6 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: stopTrigger\", \"Reason\":%{public}d}", buf, 0x18u);
  }
  *(_OWORD *)int buf = *(_OWORD *)(a1 + 48);
  *(void *)&uint8_t buf[16] = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  sub_10023386C((void **)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  memset(v9, 0, sizeof(v9));
  unsigned int v10 = v9;
  sub_1002334EC((void ***)&v10);
  sub_10023163C(a1);
  if (*(unsigned char *)(a1 + 141)) {
    *(unsigned char *)(a1 + 141) = 0;
  }
  if (*(unsigned char *)(a1 + 158)) {
    *(unsigned char *)(a1 + 158) = 0;
  }
  if (a2) {
    uint64_t v7 = sub_1002316D0(a1, (uint64_t *)buf, a3);
  }
  else {
    uint64_t v7 = 0;
  }
  v9[0] = (void **)buf;
  sub_1002334EC(v9);
  return v7;
}

void sub_100231624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_10023163C(uint64_t result)
{
  uint64_t v1 = result;
  *(unsigned char *)double result = 0;
  int v3 = *(uint64_t (****)(void))(result + 48);
  BOOL v2 = *(uint64_t (****)(void))(result + 56);
  if (v2 != v3)
  {
    BOOL v4 = v2 - 17;
    uint64_t v5 = v2 - 17;
    id v6 = v2 - 17;
    do
    {
      uint64_t v7 = *v6;
      v6 -= 17;
      double result = (*v7)(v5);
      v4 -= 17;
      BOOL v8 = v5 == v3;
      uint64_t v5 = v6;
    }
    while (!v8);
  }
  *(void *)(v1 + 56) = v3;
  if (*(unsigned char *)(v1 + 178)) {
    *(unsigned char *)(v1 + 178) = 0;
  }
  return result;
}

uint64_t sub_1002316D0(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    if (!*(unsigned char *)(a1 + 1)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 124) || *(unsigned char *)(a1 + 176))
    {
      uint64_t v6 = a1 + 48;
      if ((uint64_t *)(a1 + 48) != a2) {
        sub_100233BA0(v6, *a2, v4, 0xF0F0F0F0F0F0F0F1 * ((v4 - v3) >> 3));
      }
      return 0;
    }
    char v9 = 1;
    do
    {
      if (v9)
      {
        CFAbsoluteTime Current_5 = j__CFAbsoluteTimeGetCurrent_5();
        sub_1002300D8(a1, v3, 2, &Current_5, 0, 0);
        sub_100230500(a1, v3, 1u, a3, 0, (uint64_t)v18);
        uint64_t v10 = *(void *)(a1 + 184);
        int v17 = 0;
        sub_1001EE1F4(&v17);
        *(void *)&long long v20 = sub_1001EC8C4((ssize_t)&v17);
        *((void *)&v20 + 1) = v11;
        double v12 = j__CFAbsoluteTimeGetCurrent_5();
        sub_100230A14(&v20, (uint64_t)v18, (uint64_t)v21, v12);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 96))(v10, v21);
        sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)v22);
        p_CFAbsoluteTime Current_5 = (unsigned int *)&v17;
      }
      else
      {
        (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184), v3, 0);
        sub_100230500(a1, v3, 1u, a3, 1u, (uint64_t)v18);
        uint64_t v14 = *(void *)(a1 + 184);
        LODWORD(Current_5) = 0;
        sub_1001EE1F4((int *)&Current_5);
        *(void *)&long long v20 = sub_1001EC8C4((ssize_t)&Current_5);
        *((void *)&v20 + 1) = v15;
        double v16 = j__CFAbsoluteTimeGetCurrent_5();
        sub_100230A14(&v20, (uint64_t)v18, (uint64_t)v21, v16);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 96))(v14, v21);
        sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)v22);
        p_CFAbsoluteTime Current_5 = (unsigned int *)&Current_5;
      }
      sub_1001EF3E8(p_Current_5);
      sub_100267FDC((wireless_diagnostics::google::protobuf::MessageLite *)v18);
      char v9 = 0;
      v3 += 136;
    }
    while (v3 != v4);
  }
  return 1;
}

void sub_10023192C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100267FDC((wireless_diagnostics::google::protobuf::MessageLite *)va);
  _Unwind_Resume(a1);
}

void sub_100231988(uint64_t a1, int a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  uint64_t v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "No";
    v13[0] = 68289282;
    v13[1] = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    if (a2) {
      uint64_t v5 = "Yes";
    }
    __int16 v16 = 2082;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: setSpectatingEnabled\", \"spectatingEnabled\":%{public, location:escape_only}s}", (uint8_t *)v13, 0x1Cu);
  }
  *(unsigned char *)(a1 + 1) = a2;
  if ((a2 & 1) == 0)
  {
    sub_10023163C(a1);
    *(unsigned char *)(a1 + 124) = 0;
    if (*(unsigned char *)(a1 + 175)) {
      *(unsigned char *)(a1 + 175) = 0;
    }
    uint64_t v7 = *(void (****)(void))(a1 + 72);
    uint64_t v6 = *(void (****)(void))(a1 + 80);
    if (v6 != v7)
    {
      BOOL v8 = v6 - 17;
      char v9 = v6 - 17;
      uint64_t v10 = v6 - 17;
      do
      {
        uint64_t v11 = *v10;
        v10 -= 17;
        (*v11)(v9);
        v8 -= 17;
        BOOL v12 = v9 == v7;
        char v9 = v10;
      }
      while (!v12);
    }
    *(void *)(a1 + 80) = v7;
  }
}

BOOL sub_100231B0C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 178) && *(unsigned char *)(a1 + 177) != 0;
}

uint64_t sub_100231B2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_100231B34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

BOOL sub_100231B3C(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  uint64_t v7 = sub_1001EFDE4((void *)(a1 + 8), a2);
  if (!v7)
  {
    uint64_t v10 = a2;
    *((_DWORD *)sub_10023390C(v6, a2, (uint64_t)&unk_101D0B290, &v10) + 8) = *a3;
    if (!*(_DWORD *)(a1 + 96))
    {
      char v9 = *(uint64_t **)(a1 + 24);
      if (v9)
      {
        while (*((_DWORD *)v9 + 8) != 1)
        {
          char v9 = (uint64_t *)*v9;
          if (!v9) {
            return v7 == 0;
          }
        }
        if (sub_10022FF94())
        {
          *(_DWORD *)(a1 + 96) = 1;
          (*(void (**)(void))(**(void **)(a1 + 184) + 56))(*(void *)(a1 + 184));
        }
      }
    }
  }
  return v7 == 0;
}

BOOL sub_100231C24(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = sub_1001EFDE4((void *)(a1 + 8), a2);
  if (v5)
  {
    sub_100233B68(v4, a2);
    if (*(_DWORD *)(a1 + 96) == 1)
    {
      uint64_t v6 = *(uint64_t **)(a1 + 24);
      if (v6)
      {
        while (*((_DWORD *)v6 + 8) != 1)
        {
          uint64_t v6 = (uint64_t *)*v6;
          if (!v6) {
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_6:
        if ((sub_100231268() & 1) == 0)
        {
          *(_DWORD *)(a1 + 96) = 0;
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229FD68);
          }
          uint64_t v7 = qword_102419458;
          if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Stopping motion based triggers", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419450 != -1) {
              dispatch_once(&qword_102419450, &stru_10229FD68);
            }
            char v9 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMicroLocationTriggerManager::removePolicy(const boost::uuids::uuid &)", "%s\n", v9);
            if (v9 != (char *)buf) {
              free(v9);
            }
          }
          (*(void (**)(void))(**(void **)(a1 + 184) + 64))(*(void *)(a1 + 184));
        }
      }
    }
    if (!*(void *)(a1 + 32) && *(unsigned char *)a1) {
      (*(void (**)(void))(**(void **)(a1 + 184) + 40))(*(void *)(a1 + 184));
    }
  }
  return v5 != 0;
}

BOOL sub_100231E78(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 1;
}

void sub_100231E88(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1000C571C(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    char v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_100231F3C(uint64_t a1, uint64_t a2)
{
  sub_1002E83D4(a2, v12);
  if (!v13)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FD68);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMicroLocationTriggerManager::setRescheduledTriggerLocalizationUUID(const CLMicroLocationProto::RecordingEvent &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  *(_DWORD *)int buf = 0;
  sub_1001EE1F4((int *)buf);
  uint64_t v4 = sub_1001EC8C4((ssize_t)buf);
  uint64_t v7 = v12[0];
  uint64_t v6 = v12[1];
  if (!v13)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v4;
  }
  int v8 = *(unsigned __int8 *)(a1 + 175);
  *(void *)(a1 + 159) = v7;
  *(void *)(a1 + 167) = v6;
  if (!v8) {
    *(unsigned char *)(a1 + 175) = 1;
  }
  return sub_1001EF3E8((unsigned int *)buf);
}

void sub_10023212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001EF3E8((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100232148(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      BOOL v2 = (unsigned char *)a1;
      unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
      goto LABEL_6;
    }
    return 255;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 255;
  }
  BOOL v2 = *(unsigned char **)a1;
LABEL_6:
  if (v3 >= 0x2D) {
    unint64_t v3 = 45;
  }
  uint64_t v4 = &v2[v3];
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  do
  {
    if (*v5 == 109)
    {
      uint64_t v7 = &_mh_execute_header.magic + 1;
      while (v7 != 45)
      {
        if (&v5[v7] == v4) {
          goto LABEL_18;
        }
        int v8 = v5[v7];
        int v9 = aMiloInternalLe[v7++];
        if (v8 != v9) {
          goto LABEL_10;
        }
      }
      uint64_t v6 = v5;
    }
LABEL_10:
    ++v5;
  }
  while (v5 != v4);
LABEL_18:
  if (v6 != v4 && v6 == v2) {
    return 0;
  }
  if ((v1 & 0x80u) == 0) {
    uint64_t v11 = (unsigned char *)a1;
  }
  else {
    uint64_t v11 = *(unsigned char **)a1;
  }
  if ((v1 & 0x80u) != 0) {
    unint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v12 = 20;
  if (v1 < 0x14) {
    uint64_t v12 = v1;
  }
  if (v12)
  {
    char v13 = &v11[v12];
    __int16 v14 = v11;
    uint64_t v15 = v13;
    do
    {
      if (*v14 == 73)
      {
        uint64_t v16 = &_mh_execute_header.magic + 1;
        while (v16 != 20)
        {
          if (&v14[v16] == v13) {
            goto LABEL_40;
          }
          int v17 = v14[v16];
          int v18 = aInternalclient[v16++];
          if (v17 != v18) {
            goto LABEL_32;
          }
        }
        uint64_t v15 = v14;
      }
LABEL_32:
      ++v14;
    }
    while (v14 != v13);
LABEL_40:
    if (v15 != v13 && v15 == v11) {
      return 1;
    }
  }
  uint64_t v19 = 17;
  if (v1 < 0x11) {
    uint64_t v19 = v1;
  }
  if (v19)
  {
    long long v20 = &v11[v19];
    long long v21 = v11;
    __int16 v22 = v20;
    do
    {
      if (*v21 == 73)
      {
        uint64_t v23 = &_mh_execute_header.magic + 1;
        while (v23 != 17)
        {
          if (&v21[v23] == v20) {
            goto LABEL_56;
          }
          int v24 = v21[v23];
          int v25 = aInternalclient_0[v23++];
          if (v24 != v25) {
            goto LABEL_48;
          }
        }
        __int16 v22 = v21;
      }
LABEL_48:
      ++v21;
    }
    while (v21 != v20);
LABEL_56:
    if (v22 != v20 && v22 == v11) {
      return 2;
    }
  }
  uint64_t v26 = 19;
  if (v1 < 0x13) {
    uint64_t v26 = v1;
  }
  if (v26)
  {
    unsigned int v27 = &v11[v26];
    uint64_t v28 = v11;
    uint64_t v29 = v27;
    do
    {
      if (*v28 == 73)
      {
        uint64_t v30 = &_mh_execute_header.magic + 1;
        while (v30 != 19)
        {
          if (&v28[v30] == v27) {
            goto LABEL_71;
          }
          int v31 = v28[v30];
          int v32 = aInternalclient_1[v30++];
          if (v31 != v32) {
            goto LABEL_63;
          }
        }
        uint64_t v29 = v28;
      }
LABEL_63:
      ++v28;
    }
    while (v28 != v27);
LABEL_71:
    if (v29 != v27 && v29 == v11) {
      return 3;
    }
  }
  uint64_t v33 = 30;
  if (v1 < 0x1E) {
    uint64_t v33 = v1;
  }
  if (v33)
  {
    double v34 = &v11[v33];
    __int16 v35 = v11;
    int v36 = v34;
    do
    {
      if (*v35 == 73)
      {
        uint64_t v37 = &_mh_execute_header.magic + 1;
        while (v37 != 30)
        {
          if (&v35[v37] == v34) {
            goto LABEL_87;
          }
          int v38 = v35[v37];
          int v39 = aInternalclient_2[v37++];
          if (v38 != v39) {
            goto LABEL_79;
          }
        }
        int v36 = v35;
      }
LABEL_79:
      ++v35;
    }
    while (v35 != v34);
LABEL_87:
    if (v36 != v34 && v36 == v11) {
      return 2;
    }
  }
  uint64_t v40 = 26;
  if (v1 < 0x1A) {
    uint64_t v40 = v1;
  }
  if (!v40) {
    goto LABEL_105;
  }
  uint64_t v41 = &v11[v40];
  long long v42 = v11;
  uint64_t v43 = v41;
  do
  {
    if (*v42 == 73)
    {
      uint64_t v44 = &_mh_execute_header.magic + 1;
      while (v44 != 26)
      {
        if (&v42[v44] == v41) {
          goto LABEL_102;
        }
        int v45 = v42[v44];
        int v46 = aInternalclient_3[v44++];
        if (v45 != v46) {
          goto LABEL_94;
        }
      }
      uint64_t v43 = v42;
    }
LABEL_94:
    ++v42;
  }
  while (v42 != v41);
LABEL_102:
  if (v43 != v41 && v43 == v11) {
    return 2;
  }
LABEL_105:
  uint64_t v47 = 10;
  if (v1 < 0xA) {
    uint64_t v47 = v1;
  }
  double v48 = &v11[v47];
  if (v47)
  {
    double v49 = v11;
    uint64_t v50 = &v11[v47];
    do
    {
      if (*v49 == 102)
      {
        uint64_t v51 = &_mh_execute_header.magic + 1;
        while (v51 != 10)
        {
          if (&v49[v51] == v48) {
            goto LABEL_119;
          }
          int v52 = v49[v51];
          int v53 = aFocusMode[v51++];
          if (v52 != v53) {
            goto LABEL_110;
          }
        }
        uint64_t v50 = v49;
      }
LABEL_110:
      ++v49;
    }
    while (v49 != v48);
  }
  else
  {
    uint64_t v50 = v11;
  }
LABEL_119:
  if (v50 != v11 || v50 == v48) {
    return 4;
  }
  else {
    return 0;
  }
}

uint64_t sub_100232568(uint64_t a1, uint64_t a2)
{
  sub_1002E83D4(a2, v12);
  if (!v13)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    unint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Localization trigger does not have a valid trigger UUID", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FD68);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMicroLocationTriggerManager::setCurrentLocalizationUUID(const CLMicroLocationProto::RecordingEvent &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  *(_DWORD *)int buf = 0;
  sub_1001EE1F4((int *)buf);
  uint64_t v4 = sub_1001EC8C4((ssize_t)buf);
  uint64_t v7 = v12[0];
  uint64_t v6 = v12[1];
  if (!v13)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v4;
  }
  int v8 = *(unsigned __int8 *)(a1 + 141);
  *(void *)(a1 + 125) = v7;
  *(void *)(a1 + 133) = v6;
  if (!v8) {
    *(unsigned char *)(a1 + 141) = 1;
  }
  return sub_1001EF3E8((unsigned int *)buf);
}

void sub_100232758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001EF3E8((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100232774(unsigned __int8 *a1, void *a2, int a3)
{
  if (*a2 != a2[1])
  {
    if (!a1[1]) {
      return 0;
    }
    int v18 = a2;
    int v19 = a3;
    long long v20 = a1;
    int v5 = *a1;
    if (*a1)
    {
      if (v5 != 2)
      {
        if (v5 == 1)
        {
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229FD68);
          }
          uint64_t v6 = qword_102419458;
          if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 68289026;
            int v22 = 0;
            __int16 v23 = 2082;
            int v24 = "";
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while localizing, shouldn't happen\"}", buf, 0x12u);
          }
          uint64_t v8 = *a2;
          uint64_t v7 = a2[1];
          while (v8 != v7)
          {
            (*(void (**)(void, uint64_t, void))(**((void **)a1 + 23) + 24))(*((void *)a1 + 23), v8, 0);
            v8 += 136;
          }
        }
        return 1;
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FD68);
      }
      uint64_t v10 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        int v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handeling rescheduled localizations while recording, shouldn't happen\"}", buf, 0x12u);
      }
      uint64_t v12 = (void (***)(void))*((void *)a1 + 6);
      uint64_t v11 = (void (***)(void))*((void *)a1 + 7);
      if (v11 != v12)
      {
        char v13 = v11 - 17;
        __int16 v14 = v11 - 17;
        uint64_t v15 = v11 - 17;
        do
        {
          uint64_t v16 = *v15;
          v15 -= 17;
          (*v16)(v14);
          v13 -= 17;
          BOOL v17 = v14 == v12;
          __int16 v14 = v15;
        }
        while (!v17);
      }
      *((void *)a1 + 7) = v12;
      (*(void (**)(void, void))(**((void **)a1 + 23) + 40))(*((void *)a1 + 23), *a1);
      *a1 = 0;
    }
    sub_100232A04((uint64_t)&v18);
  }
  return 1;
}

void sub_100232A04(uint64_t a1)
{
  uint64_t v1 = **(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 8);
  if (v1 != v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    char v5 = 1;
    do
    {
      if (v5)
      {
        v12[0] = j__CFAbsoluteTimeGetCurrent_5();
        sub_1002300D8(v4, v1, 1, v12, 0, 0);
        sub_100230500(v4, v1, 0, *(_DWORD *)(a1 + 8), 0, (uint64_t)v10);
      }
      else
      {
        (*(void (**)(void, uint64_t, void))(**(void **)(v4 + 184) + 24))(*(void *)(v4 + 184), v1, 0);
        sub_100230500(v4, v1, 0, *(_DWORD *)(a1 + 8), 1u, (uint64_t)v10);
      }
      uint64_t v6 = *(void *)(v4 + 184);
      int v9 = 0;
      sub_1001EE1F4(&v9);
      *(void *)&long long v11 = sub_1001EC8C4((ssize_t)&v9);
      *((void *)&v11 + 1) = v7;
      double Current_5 = j__CFAbsoluteTimeGetCurrent_5();
      sub_100230A14(&v11, (uint64_t)v10, (uint64_t)v12, Current_5);
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, v12);
      sub_100260A2C((wireless_diagnostics::google::protobuf::MessageLite *)&v13);
      sub_1001EF3E8((unsigned int *)&v9);
      sub_100267FDC((wireless_diagnostics::google::protobuf::MessageLite *)v10);
      char v5 = 0;
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void sub_100232C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, char a12)
{
  sub_100260A2C(v12);
  sub_1001EF3E8(&a11);
  sub_100267FDC((wireless_diagnostics::google::protobuf::MessageLite *)&a12);
  _Unwind_Resume(a1);
}

void sub_100232C50(uint64_t a1, uint64_t a2)
{
  sub_1000C7F88(buf);
  LOBYTE(v20) = 0;
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEnableInternalFallbackLocalization", 0x8000100u, kCFAllocatorNull);
  char v5 = sub_1000D29FC(*(uint64_t *)buf, (uint64_t)v4, (BOOL *)&v20);
  CFRelease(v4);
  int v6 = LOBYTE(v20);
  if (*(void *)v22) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v22);
  }
  if (v6) {
    char v7 = 0;
  }
  else {
    char v7 = v5;
  }
  if ((v7 & 1) == 0 && *(_DWORD *)(a1 + 96) == 1)
  {
    sub_1000C7F88(buf);
    double v20 = 0.0;
    CFStringRef v8 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaxDurationBetweenLocalizationTriggers", 0x8000100u, kCFAllocatorNull);
    int v9 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v8, &v20);
    CFRelease(v8);
    double v10 = v20;
    if (*(void *)v22) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v22);
    }
    if (v9) {
      double v11 = v10;
    }
    else {
      double v11 = 3600.0;
    }
    double v12 = sub_1002E8470(a2);
    double v13 = *(double *)(a1 + 112);
    if (v12 >= v13)
    {
      if (v12 - v13 < v11) {
        return;
      }
    }
    else
    {
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10229FD68);
      }
      __int16 v14 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
      {
        double v15 = *(double *)(a1 + 112);
        *(_DWORD *)int buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v22 = 2082;
        *(void *)&v22[2] = "";
        __int16 v23 = 2050;
        double v24 = v12;
        __int16 v25 = 2050;
        double v26 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", buf, 0x26u);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_10229FD68);
        }
      }
      uint64_t v16 = qword_102419458;
      if (!os_signpost_enabled((os_log_t)qword_102419458)) {
        goto LABEL_24;
      }
      double v17 = *(double *)(a1 + 112);
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v22 = 2082;
      *(void *)&v22[2] = "";
      __int16 v23 = 2050;
      double v24 = v12;
      __int16 v25 = 2050;
      double v26 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "triggerFallbackLocalizationEvent: fLastTrigger is in the past", "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: fLastTrigger is in the past\", \"triggerTS\":\"%{public}.3f\", \"fLastLocalizationTriggerTS\":\"%{public}.3f\"}", buf, 0x26u);
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
LABEL_24:
    int v18 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      double v19 = v12 - *(double *)(a1 + 112);
      *(_DWORD *)int buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v22 = 2082;
      *(void *)&v22[2] = "";
      __int16 v23 = 2050;
      double v24 = v11;
      __int16 v25 = 2050;
      double v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"triggerFallbackLocalizationEvent: requesting localization on screen on because we haven't localized for more than \", \"Max time between localizations\":\"%{public}f\", \"Time since last_s\":\"%{public}.09f\"}", buf, 0x26u);
    }
    sub_10022F1EC((unsigned __int8 *)a1, a2, 1, 0, 0);
  }
}

void sub_100232FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100232FFC(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    if (!*(unsigned char *)(result + 124)) {
      sub_100233050(result, 1);
    }
    return sub_100230FA8(v2, 1);
  }
  return result;
}

void sub_100233050(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 124) = 0;
  if (*(unsigned char *)(a1 + 175)) {
    *(unsigned char *)(a1 + 175) = 0;
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 184) + 88))(*(void *)(a1 + 184)))
  {
    *(_OWORD *)int buf = *(_OWORD *)(a1 + 72);
    *(void *)&uint8_t buf[16] = *(void *)(a1 + 88);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 72) = 0;
    sub_10023386C((void **)(a1 + 72));
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    memset(v5, 0, sizeof(v5));
    int v6 = v5;
    sub_1002334EC((void ***)&v6);
    sub_100232774((unsigned __int8 *)a1, buf, a2);
    v5[0] = (void **)buf;
    sub_1002334EC(v5);
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FD68);
    }
    CFStringRef v4 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: get delayed trigger timeout, awaiting display on\"}", buf, 0x12u);
    }
  }
}

void sub_1002331DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

__n128 sub_1002331F4@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 125);
  *a2 = result;
  a2[1].n128_u8[0] = *(unsigned char *)(a1 + 141);
  return result;
}

__n128 sub_100233208@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 159);
  *a2 = result;
  a2[1].n128_u8[0] = *(unsigned char *)(a1 + 175);
  return result;
}

BOOL sub_10023321C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 129) & 4) == 0) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_102489AC0 + 88);
  }
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  int v3 = *((char *)v2 + 23);
  if (v3 < 0)
  {
    if (v2[1] != 17) {
      return 0;
    }
    uint64_t v2 = (uint64_t *)*v2;
  }
  else if (v3 != 17)
  {
    return 0;
  }
  CFStringRef v4 = (uint64_t *)*v2;
  uint64_t v5 = v2[1];
  int v6 = *((unsigned __int8 *)v2 + 16);
  return v4 == (uint64_t *)0x6C616E7265746E49 && v5 == 0x614D746E65696C43 && v6 == 99;
}

uint64_t sub_1002332AC(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = a1[1];
  if (a1[124]) {
    int v4 = (*(_DWORD *)(a2 + 128) >> 10) & 1;
  }
  else {
    int v4 = 0;
  }
  BOOL v5 = sub_10023321C(a2) && a1[101] != 0;
  if (v3) {
    uint64_t v6 = v4 | v5;
  }
  else {
    uint64_t v6 = 1;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FD68);
  }
  char v7 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68290050;
    v9[1] = 0;
    __int16 v10 = 2082;
    double v11 = "";
    __int16 v12 = 1026;
    int v13 = v3 ^ 1;
    __int16 v14 = 1026;
    int v15 = v4;
    __int16 v16 = 1026;
    BOOL v17 = v5;
    __int16 v18 = 1026;
    int v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationTriggerManager: shouldReject\", \"spectatingDiabled\":%{public}hhd, \"isRecordingRequestDuringWaitForRescheduledTrigger\":%{public}hhd, \"macTriggerThrottle\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v9, 0x2Au);
  }
  return v6;
}

std::string *sub_100233408@<X0>(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  __n128 result = (std::string *)sub_100134750(a2, "");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_102489AC0 + 16);
    }
    if ((*(unsigned char *)(v6 + 44) & 4) != 0)
    {
      CFStringRef v8 = (const std::string **)(v6 + 16);
      return std::string::operator=(a2, *v8);
    }
  }
  if ((v5 & 0x400) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_102489AC0 + 88);
    }
    if ((*(unsigned char *)(v7 + 44) & 4) != 0)
    {
      CFStringRef v8 = (const std::string **)(v7 + 16);
      return std::string::operator=(a2, *v8);
    }
  }
  return result;
}

void sub_1002334A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002334BC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1002334EC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 136;
      uint64_t v7 = v4 - 136;
      CFStringRef v8 = v4 - 136;
      do
      {
        int v9 = *(void (***)(char *))v8;
        v8 -= 136;
        (*v9)(v7);
        v6 -= 136;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1002335AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_1001D7FD4();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v7 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v7 = v4;
  }
  int v15 = a1 + 2;
  if (v7) {
    CFStringRef v8 = (char *)sub_10023372C(v5, v7);
  }
  else {
    CFStringRef v8 = 0;
  }
  double v11 = v8;
  __int16 v12 = &v8[136 * v3];
  __int16 v14 = &v8[136 * v7];
  sub_1002660C8(v12);
  int v13 = v12 + 136;
  sub_1002336B4(a1, &v11);
  uint64_t v9 = a1[1];
  sub_100233800((uint64_t)&v11);
  return v9;
}

void sub_1002336A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100233800((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002336B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100233774((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10023372C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    sub_1001D7FA0();
  }
  return operator new(136 * a2);
}

uint64_t sub_100233774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_1002660C8(i + a7))
    i -= 136;
  return a6;
}

uint64_t sub_100233800(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 136);
    *(void *)(a1 + 16) = i - 136;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10023386C(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 136;
      uint64_t v6 = v3 - 136;
      uint64_t v7 = v3 - 136;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 136;
        (*v8)(v6);
        v5 -= 136;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_10023390C(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    double v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      __int16 v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2 && v12[3] == a2[1]) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          __int16 v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  __int16 v12 = operator new(0x28uLL);
  *__int16 v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a4;
  *((_DWORD *)v12 + 8) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *__int16 v12 = *v22;
LABEL_44:
    *int v22 = v12;
    goto LABEL_45;
  }
  *__int16 v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_100233B54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100233B68(void *a1, void *a2)
{
  uint64_t result = sub_1001EFDE4(a1, a2);
  if (result)
  {
    sub_10017FB70(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_100233BA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_10023386C((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100233D40((void *)a1, v11);
    uint64_t result = sub_100233D94(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_100233E1C(a2, v13, (uint64_t)v9);
    uint64_t result = sub_100233D94(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_100233E1C(a2, a3, (uint64_t)v9);
  float v15 = v14;
  float v16 = *(uint64_t (****)(void))(a1 + 8);
  if (v16 != v14)
  {
    BOOL v17 = v16 - 17;
    unint64_t v18 = v16 - 17;
    unint64_t v19 = v16 - 17;
    do
    {
      size_t v20 = *v19;
      v19 -= 17;
      uint64_t result = (*v20)(v18);
      v17 -= 17;
      BOOL v21 = v18 == v15;
      unint64_t v18 = v19;
    }
    while (!v21);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_100233D30(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100233D38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_100233D40(void *a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_10023372C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

uint64_t sub_100233D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1002660C8(a4 + v7);
      v7 += 136;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100233E00(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_101A54D60(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100233E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_100267D64(a3, v4);
      v4 += 136;
      a3 += 136;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_100233E7C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  if (!sub_100278D98(a1)) {
    sub_101A54F58();
  }
  if (!*(unsigned char *)(a3 + 32)) {
    sub_101A54DCC();
  }
  int v46 = 0;
  uint64_t v47 = 0;
  int v45 = (uint64_t *)&v46;
  uint64_t v9 = *(void *)(a1 + 232);
  uint64_t v8 = *(void *)(a1 + 240);
  if (v9 == v8)
  {
    __int16 v12 = 0;
  }
  else
  {
    do
    {
      uint64_t v10 = *(void *)(a3 + 24);
      if (!v10) {
        sub_10015E48C();
      }
      *(void *)&long long v42 = (*(double (**)(uint64_t, void, uint64_t))(*(void *)v10 + 48))(v10, *(void *)v9, a2);
      uint64_t v11 = v9 + 16;
      sub_10023423C(&v45, (double *)&v42, (_OWORD *)(v9 + 16));
      v9 += 32;
    }
    while (v11 + 16 != v8);
    __int16 v12 = v47;
  }
  sub_1000C7F88(&v42);
  LODWORD(v48) = 0;
  CFStringRef v13 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaximumNearestNeighbors", 0x8000100u, kCFAllocatorNull);
  int v14 = sub_1004D08E4(v42, (uint64_t)v13, &v48);
  CFRelease(v13);
  unint64_t v15 = v48;
  if (*((void *)&v42 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v42 + 1));
  }
  if (v14) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 1;
  }
  if (v16 >= (unint64_t)v12) {
    BOOL v17 = v12;
  }
  else {
    BOOL v17 = (void *)v16;
  }
  if (v16) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = v12;
  }
  long long v42 = 0u;
  long long v43 = 0u;
  int v44 = 1065353216;
  if (v18)
  {
    unint64_t v19 = 0;
    size_t v20 = v45;
    do
    {
      double v48 = v20 + 5;
      BOOL v21 = (double *)sub_1002342D8((uint64_t)&v42, v20 + 5, (uint64_t)&unk_101D0B290, &v48);
      v21[4] = 1.0 / (double)(unint64_t)v18 + v21[4];
      int v22 = (uint64_t *)v20[1];
      if (v22)
      {
        do
        {
          unint64_t v23 = v22;
          int v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          unint64_t v23 = (uint64_t *)v20[2];
          BOOL v24 = *v23 == (void)v20;
          size_t v20 = v23;
        }
        while (!v24);
      }
      unint64_t v19 = (void *)((char *)v19 + 1);
      size_t v20 = v23;
    }
    while (v19 != v18);
    unint64_t v18 = (void *)v43;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *((_DWORD *)a4 + 6) = 3;
  *((unsigned char *)a4 + 80) = 0;
  a4[5] = 0;
  a4[6] = 0;
  a4[4] = 0;
  *((unsigned char *)a4 + 56) = 0;
  if (v18)
  {
    __int16 v25 = 0;
    double v26 = a4 + 2;
    do
    {
      uint64_t v28 = v18[2];
      uint64_t v27 = v18[3];
      if ((unint64_t)v25 >= *v26)
      {
        uint64_t v30 = (v25 - *a4) >> 5;
        if ((unint64_t)(v30 + 1) >> 59) {
          sub_1001D7FD4();
        }
        uint64_t v31 = *v26 - (void)*a4;
        uint64_t v32 = v31 >> 4;
        if (v31 >> 4 <= (unint64_t)(v30 + 1)) {
          uint64_t v32 = v30 + 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        double v34 = (char *)sub_1001D9EDC((uint64_t)(a4 + 2), v33);
        int v36 = &v34[32 * v30];
        uint64_t v37 = v18[4];
        *(void *)int v36 = v28;
        *((void *)v36 + 1) = v27;
        *((void *)v36 + 2) = v37;
        *((_DWORD *)v36 + 6) = 0;
        int v39 = *a4;
        int v38 = a4[1];
        uint64_t v40 = v36;
        if (v38 != *a4)
        {
          do
          {
            long long v41 = *((_OWORD *)v38 - 2);
            *(_OWORD *)(v40 - 20) = *(_OWORD *)(v38 - 20);
            *((_OWORD *)v40 - 2) = v41;
            v40 -= 32;
            v38 -= 32;
          }
          while (v38 != v39);
          int v38 = *a4;
        }
        __int16 v25 = v36 + 32;
        *a4 = v40;
        a4[1] = v36 + 32;
        a4[2] = &v34[32 * v35];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        uint64_t v29 = v18[4];
        *(void *)__int16 v25 = v28;
        *((void *)v25 + 1) = v27;
        *((void *)v25 + 2) = v29;
        *((_DWORD *)v25 + 6) = 0;
        v25 += 32;
      }
      a4[1] = v25;
      unint64_t v18 = (void *)*v18;
    }
    while (v18);
  }
  sub_1000D7D80((uint64_t)&v42);
  sub_1000F5BB0((uint64_t)&v45, v46);
}

void sub_1002341B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000F5BB0((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_10023420C(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

char *sub_10023423C(uint64_t **a1, double *a2, _OWORD *a3)
{
  uint64_t v6 = (char *)operator new(0x38uLL);
  double v7 = *a2;
  *((double *)v6 + 4) = *a2;
  *(_OWORD *)(v6 + 40) = *a3;
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v9;
        if (v7 >= *((double *)v9 + 4)) {
          break;
        }
        uint64_t v9 = (uint64_t *)*v9;
        uint64_t v10 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = (uint64_t *)v9[1];
    }
    while (v9);
    uint64_t v10 = v8 + 1;
  }
  else
  {
    uint64_t v10 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v8, v10, (uint64_t *)v6);
  return v6;
}

void *sub_1002342D8(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_44:
    *int v22 = i;
    goto LABEL_45;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100234520(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100234534(void *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v10 = a2;
  sub_1002177A8(a2, (uint64_t)&v66);
  sub_1000C7F88(buf);
  v79[0] = 0;
  CFStringRef v13 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPruneDistanceThreshold", 0x8000100u, kCFAllocatorNull);
  int v14 = sub_1000A6A10(*(uint64_t *)buf, (uint64_t)v13, v79);
  CFRelease(v13);
  double v15 = *(double *)v79;
  if (*(void *)v74) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v74);
  }
  if (!v14) {
    double v15 = 0.075;
  }
  float v16 = (double *)v66;
  if (v66 == v67)
  {
    sub_101A550E4(buf);
LABEL_69:
    abort_report_np();
    __break(1u);
LABEL_70:
    dispatch_once(&qword_102419450, &stru_10229FE38);
    goto LABEL_16;
  }
  BOOL v17 = (double *)((char *)v66 + 8);
  if ((char *)v66 + 8 != v67)
  {
    double v18 = *(double *)v66;
    unint64_t v19 = (double *)((char *)v66 + 8);
    do
    {
      double v20 = *v19++;
      double v21 = v20;
      if (v20 < v18)
      {
        double v18 = v21;
        float v16 = v17;
      }
      BOOL v17 = v19;
    }
    while (v19 != (double *)v67);
  }
  if (v15 > *v16)
  {
    sub_101A553C4(buf);
    goto LABEL_69;
  }
  if (!sub_1002D3900((uint64_t)a1))
  {
    sub_101A55254(buf);
    goto LABEL_69;
  }
  sub_100275E9C(a7);
  *(_DWORD *)a7 = 1;
  *(_DWORD *)(a7 + 4) = v10;
  uint64_t v10 = a7 + 16;
  if (a7 + 16 != a4)
  {
    *(_DWORD *)(a7 + 48) = *(_DWORD *)(a4 + 32);
    sub_1001EEAA8((void *)(a7 + 16), *(uint64_t **)(a4 + 16), 0);
  }
  *(_OWORD *)(a7 + 56) = *(_OWORD *)(a4 + 40);
  if (qword_102419450 != -1) {
    goto LABEL_70;
  }
LABEL_16:
  int v22 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    BOOL v23 = sub_1002765B0(a7);
    *(void *)int buf = 68289282;
    *(_WORD *)std::string v74 = 2082;
    *(void *)&v74[2] = "";
    __int16 v75 = 1026;
    BOOL v76 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"isStable, dendrogram, initialization\", \"isStableflag\":%{public}hhd}", buf, 0x18u);
  }
  sub_1000C7F88(buf);
  LODWORD(v79[0]) = 0;
  CFStringRef v24 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDistanceFunctionType", 0x8000100u, kCFAllocatorNull);
  int v25 = sub_1004D08E4(*(uint64_t *)buf, (uint64_t)v24, v79);
  CFRelease(v24);
  int v26 = v79[0];
  if (*(void *)v74) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v74);
  }
  if (v25) {
    int v27 = v26;
  }
  else {
    int v27 = 4;
  }
  sub_1002A9DA0(v27, v65);
  sub_1000C7F88(buf);
  LOBYTE(v79[0]) = 0;
  CFStringRef v28 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsAdaptiveAnchorsEnable", 0x8000100u, kCFAllocatorNull);
  char v29 = sub_1000D29FC(*(uint64_t *)buf, (uint64_t)v28, (BOOL *)v79);
  CFRelease(v28);
  int v30 = LOBYTE(v79[0]);
  if (*(void *)v74) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v74);
  }
  if (v30) {
    char v31 = 0;
  }
  else {
    char v31 = v29;
  }
  if (v31)
  {
    char v32 = 0;
    buf[0] = 0;
  }
  else
  {
    sub_1001EF40C((uint64_t)buf, v10);
    long long v77 = *(_OWORD *)(a7 + 56);
    char v32 = 1;
  }
  char v78 = v32;
  sub_100217F3C(v27, (uint64_t)v65, (uint64_t)buf, (uint64_t)v79);
  if (v78) {
    sub_1000D7D80((uint64_t)buf);
  }
  sub_1000C7F88(&v61);
  LODWORD(v64[0]) = 0;
  CFStringRef v33 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLinkageFunction", 0x8000100u, kCFAllocatorNull);
  int v34 = sub_1004D08E4((uint64_t)v61, (uint64_t)v33, v64);
  CFRelease(v33);
  unsigned int v35 = v64[0];
  if (__p) {
    sub_1000DB0A0((std::__shared_weak_count *)__p);
  }
  if (v34) {
    unsigned int v36 = v35;
  }
  else {
    unsigned int v36 = 1;
  }
  sub_100217FB8(v36, buf);
  sub_1001F37F0((uint64_t)v72, (uint64_t)v79);
  sub_100234D2C((uint64_t *)&v61, a1, (uint64_t)v72);
  sub_1001F3C58((uint64_t)v71, (uint64_t)buf);
  sub_1001DDBF8((char **)v64, (unint64_t *)&v61, (uint64_t)v71);
  sub_1001F2E3C(v71);
  if (__p)
  {
    uint64_t v63 = __p;
    operator delete(__p);
  }
  sub_1001F2DB8(v72);
  unint64_t v37 = vcvtmd_u64_f64(v69 * (double)a6);
  if (v68 <= v37) {
    unint64_t v38 = v37;
  }
  else {
    unint64_t v38 = v68;
  }
  __int16 v61 = 0;
  std::string __p = 0;
  uint64_t v63 = 0;
  unint64_t v39 = sub_1001DDBFC((uint64_t *)v64, &v61, &v66, v38, a3, v70);
  sub_100278F54(v39, v60);
  uint64_t v57 = 0;
  char v58 = 0;
  uint64_t v59 = 0;
  unint64_t v40 = sub_1001DE024((uint64_t *)v64, &v57, 0, v15, 0.0);
  uint64_t v54 = 0;
  sub_1001F3CF0(&v55, v40, &v54);
  long long v41 = v57;
  long long v42 = (unint64_t *)v55;
  if (v58 != v57)
  {
    unint64_t v43 = 0;
    unint64_t v44 = (v58 - (unsigned char *)v57) >> 3;
    if (v44 <= 1) {
      unint64_t v44 = 1;
    }
    do
    {
      v42[v41[v43]] = v43;
      ++v43;
    }
    while (v44 != v43);
  }
  int v45 = v56;
  while (v42 != v45)
  {
    uint64_t v46 = *((void *)v61 + *v42);
    uint64_t v47 = sub_1002D386C(a1, *v42);
    sub_100277998(a7, v47, (long long *)v60[0] + v46, a5);
    ++v42;
  }
  double v48 = v61;
  if (__p != v61)
  {
    unint64_t v49 = 0;
    do
    {
      uint64_t v50 = v48[v49];
      uint64_t v51 = v60[0];
      uint64_t v52 = sub_1002D386C(a1, v49);
      sub_100277A74(a7, &v51[v50], (_OWORD *)(v52 + 40));
      ++v49;
      double v48 = v61;
    }
    while (v49 < ((unsigned char *)__p - (unsigned char *)v61) >> 3);
  }
  if (v55)
  {
    unsigned int v56 = (unint64_t *)v55;
    operator delete(v55);
  }
  if (v57)
  {
    char v58 = v57;
    operator delete(v57);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (v61)
  {
    std::string __p = v61;
    operator delete(v61);
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  sub_1001F2E3C(buf);
  sub_1001F2DB8(v79);
  sub_10013F374(v65);
  if (v66)
  {
    std::string v67 = (char *)v66;
    operator delete(v66);
  }
}

void sub_100234B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_10013F374(&a31);
  sub_1001EC93C(v39);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100234CFC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t *sub_100234D2C(uint64_t *a1, void *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = a1 + 1;
  a1[3] = 0;
  uint64_t v7 = sub_1002D3900((uint64_t)a2);
  *a1 = v7;
  v20[0] = 0;
  sub_1001F3B04((uint64_t)v6, (unint64_t)(v7 + v7 * v7) >> 1, v20);
  if (*a1)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = sub_1002D386C(a2, v8);
      sub_1001F03C4((uint64_t)v20, v9);
      long long v10 = *(_OWORD *)(v9 + 40);
      uint64_t v22 = *(void *)(v9 + 56);
      long long v21 = v10;
      sub_1001F08B0((uint64_t)v23, v9 + 64);
      sub_1001F0B48((uint64_t)v24, v9 + 104);
      long long v11 = *(_OWORD *)(v9 + 144);
      int v25 = *(_DWORD *)(v9 + 160);
      *(_OWORD *)&v24[40] = v11;
      int v27 = 0;
      uint64_t v28 = 0;
      std::string __p = 0;
      sub_10010F834(&__p, *(const void **)(v9 + 168), *(void *)(v9 + 176), (uint64_t)(*(void *)(v9 + 176) - *(void *)(v9 + 168)) >> 2);
      if (v8)
      {
        for (unint64_t i = 0; i != v8; ++i)
        {
          uint64_t v13 = sub_1002D386C(a2, i);
          uint64_t v14 = *(void *)(a3 + 24);
          if (!v14) {
            sub_10015E48C();
          }
          (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v14 + 48))(v14, v20, v13);
          if (v8 <= i) {
            unint64_t v16 = i;
          }
          else {
            unint64_t v16 = v8;
          }
          if (v8 >= i) {
            unint64_t v17 = i;
          }
          else {
            unint64_t v17 = v8;
          }
          float v18 = v15;
          *(float *)(*v6 + 4 * (v17 + ((v16 + v16 * v16) >> 1))) = v18;
        }
      }
      if (__p)
      {
        int v27 = __p;
        operator delete(__p);
      }
      sub_1000D7D80((uint64_t)v24);
      sub_1000D7D80((uint64_t)v23);
      sub_1001F00CC((uint64_t)v20);
      ++v8;
    }
    while (v8 < *a1);
  }
  return a1;
}

void sub_100234F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100234F98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x26u);
}

void sub_100234FD0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x26u);
}

void sub_100234FF0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x26u);
}

uint64_t sub_10023554C()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsEnabled", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_1002355DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002355F8(void *result, void *a2)
{
  if (a2)
  {
    BOOL v2 = result;
    *(void *)(result[4] + 80) = a2;
    uint64_t v3 = (void *)v2[4];
    return _[v3 requestBootstrapWithLastGeofenceStates];
  }
  return result;
}

id sub_100235640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) regionMonitor:a2 didGenerateEvent:a3];
}

id sub_100235984(uint64_t a1)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FF98);
  }
  BOOL v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    id v3 = [[[*(id *)(a1 + 32) lastEvent] identifier] UTF8String];
    unsigned int v4 = [[*(id *)(a1 + 32) lastEvent] state];
    v6[0] = 68289539;
    v6[1] = 0;
    __int16 v7 = 2082;
    unint64_t v8 = "";
    __int16 v9 = 2081;
    id v10 = v3;
    __int16 v11 = 1025;
    unsigned int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LOI Bridge, generating bootstrap geofence update\", \"Geofence Id\":%{private, location:escape_only}s, \"state\":%{private}d}", (uint8_t *)v6, 0x22u);
  }
  return [*(id *)(a1 + 40) generateGeofenceUpdateToClient:[*(id *)(a1 + 32) lastEvent]];
}

uint64_t sub_100236378(uint64_t a1)
{
  unsigned int v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[8];
  id v3 = [v1 generateLocationManagerNotAvailableError];
  unsigned int v4 = *(uint64_t (**)(uint64_t, void, id))(*(void *)v2 + 8);

  return v4(v2, 0, v3);
}

uint64_t sub_1002363DC(uint64_t a1)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FF98);
  }
  uint64_t v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 68289026;
    int v9 = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen\"}", buf, 0x12u);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FF98);
    }
  }
  id v3 = qword_102419458;
  if (os_signpost_enabled((os_log_t)qword_102419458))
  {
    *(_DWORD *)int buf = 68289026;
    int v9 = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen", "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, timed out waiting for fetching place inference, this shouldn't happen\"}", buf, 0x12u);
  }
  [*(id *)(a1 + 32) invalidateFetchPlaceInferenceTimer];
  id v4 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
  CFStringRef v7 = @"Request to fetch place inference timed out";
  return (*(uint64_t (**)(void, void, id))(**(void **)(*(void *)(a1 + 32) + 64) + 8))(*(void *)(*(void *)(a1 + 32) + 64), 0, [v4 initWithDomain:kCLErrorDomainPrivate code:0 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1)]);
}

uint64_t sub_1002365EC(uint64_t a1, void *a2, uint64_t a3)
{
  [*(id *)(a1 + 32) invalidateFetchPlaceInferenceTimer];
  uint64_t v14 = a3;
  if (a3)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10229FF98);
    }
    NSErrorUserInfoKey v6 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289283;
      __int16 v21 = 2082;
      uint64_t v22 = "";
      __int16 v23 = 2113;
      uint64_t v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, failed to request place inference, we will start leeching and wait for next location update\", \"Error Reason\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v16;
      do
      {
        __int16 v10 = 0;
        do
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(a2);
          }
          uint64_t v11 = *(void *)(*((void *)&v15 + 1) + 8 * (void)v10);
          if (qword_102419450 != -1) {
            dispatch_once(&qword_102419450, &stru_10229FF98);
          }
          unsigned int v12 = qword_102419458;
          if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t buf = 68289283;
            __int16 v21 = 2082;
            uint64_t v22 = "";
            __int16 v23 = 2113;
            uint64_t v24 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"fetchPlaceInferenceAtCurrentLocation, received Place Inference\", \"PI\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
          }
          __int16 v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v8);
    }
  }
  return (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 64) + 8))(*(void *)(*(void *)(a1 + 32) + 64), a2, v14);
}

uint64_t sub_1002369F0(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(**(void **)(a1[4] + 64) + 16))(*(void *)(a1[4] + 64), 0, a1[5], a1[6]);
}

uint64_t sub_100236A28(uint64_t a1, void *a2)
{
  -[CLMicroLocationLoi initWithIdentifier:andType:]([CLMicroLocationLoi alloc], "initWithIdentifier:andType:", [a2 identifier], [a2 type]);
  id v3 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 64) + 16);

  return v3();
}

uint64_t sub_100236C58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 32) + 64) + 24))(*(void *)(*(void *)(a1 + 32) + 64), 0, *(void *)(a1 + 40));
}

id sub_100236C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100236D00;
  void v6[3] = &unk_10229FF28;
  void v6[4] = a2;
  v6[5] = v3;
  v6[6] = a3;
  return [v4 async:v6];
}

uint64_t sub_100236D00(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v3 = (__CFString *)[v2 componentsJoinedByString:@","];
  }
  else {
    uint64_t v3 = &stru_10234F018;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_10229FF98);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) count];
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    id v11 = v5;
    __int16 v12 = 2082;
    id v13 = [(__CFString *)v3 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI Bridge, received LOI Ids from CLRoutineMonitor\", \"LOI ID Count\":%{public}ld, \"LOI List\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x26u);
  }
  return (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(a1 + 40) + 64) + 24))(*(void *)(*(void *)(a1 + 40) + 64), *(void *)(a1 + 32), *(void *)(a1 + 48));
}

uint64_t sub_1002371F0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1[4] + 64) + 40))(*(void *)(a1[4] + 64), a1[5], a1[6]);
}

void sub_1002374EC()
{
  sub_1000C7F88(&v2);
  uint64_t v1 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsCustomLoiGeofenceRadius", 0x8000100u, kCFAllocatorNull);
  sub_1000A6A10(v2, (uint64_t)v0, &v1);
  CFRelease(v0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10023758C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100237790(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[8];
  id v3 = [v1 generateLocationManagerNotAvailableError];
  id v4 = *(uint64_t (**)(uint64_t, void, id))(*(void *)v2 + 32);

  return v4(v2, 0, v3);
}

uint64_t sub_100237A9C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1[4] + 64) + 48))(*(void *)(a1[4] + 64), a1[5], a1[7], a1[8], a1[6]);
}

uint64_t sub_100237B7C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1[4] + 64) + 64))(*(void *)(a1[4] + 64), a1[5], a1[6]);
}

uint64_t sub_100237EC0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1[4] + 64) + 32))(*(void *)(a1[4] + 64), a1[5], a1[6]);
}

void sub_100238384(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_1002383B4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    goto LABEL_32;
  }
  id v5 = (signed __int8 *)(a2 + 1);
  int v6 = *a2;
  if (v6 == 123)
  {
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    id v5 = (signed __int8 *)(a2 + 2);
    signed __int8 v7 = a2[1];
  }
  else
  {
    signed __int8 v7 = *a2;
  }
  int v8 = 0;
  uint64_t v9 = 0;
  while (1)
  {
    do
    {
      if (v9 == 4)
      {
        if (v7 == 45)
        {
          if (v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          int v8 = 1;
LABEL_22:
          signed __int8 v12 = *v5++;
          signed __int8 v7 = v12;
          goto LABEL_24;
        }
        int v8 = 0;
      }
      else
      {
        BOOL v11 = (v9 & 0x7FFFFFFD) == 8 || v9 == 6;
        if (v11 && ((v8 ^ 1) & 1) == 0)
        {
          if (v7 != 45 || v5 == (signed __int8 *)a3) {
            goto LABEL_32;
          }
          goto LABEL_22;
        }
      }
LABEL_24:
      char v13 = sub_1001E72D4(a1, v7);
      *((unsigned char *)&v17 + v9) = v13;
      if (v5 == (signed __int8 *)a3) {
        goto LABEL_32;
      }
      int v14 = *v5++;
      signed __int8 v7 = v14;
      *((unsigned char *)&v17 + v9++) = sub_1001E72D4(a1, v14) | (16 * v13);
    }
    while (!v9);
    if (v9 == 16) {
      break;
    }
    if (v5 == (signed __int8 *)a3) {
      goto LABEL_32;
    }
    signed __int8 v10 = *v5++;
    signed __int8 v7 = v10;
  }
  if (v6 == 123 && (v5 == (signed __int8 *)a3 || (int v15 = *v5, ++v5, v15 != 125))
    || v5 != (signed __int8 *)a3)
  {
LABEL_32:
    sub_1001E726C();
  }
  return v17;
}

uint64_t sub_100238554()
{
  sub_100134750(&qword_10247A6D0, "/System/Library/LocationBundles/MicroLocation.bundle");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247A6D0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247A6E8, "/var/root/Library/Caches/locationd/");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247A6E8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247A700, "CLMicroLocationRegionMonitor");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247A700, (void *)&_mh_execute_header);
}

void sub_100238614(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  char v13 = a2;
  int v6 = sub_1002387C4(a1, a2, (uint64_t)&unk_101D0B290, &v13);
  *a4 = 0;
  a4[1] = 0;
  signed __int8 v7 = (std::__shared_weak_count *)v6[5];
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    a4[1] = v8;
    if (v8)
    {
      uint64_t v9 = v6[4];
      *a4 = v9;
      if (v9) {
        return;
      }
    }
  }
  else
  {
    int v8 = 0;
  }
  sub_100238AA8(a3, &v13);
  BOOL v11 = v13;
  signed __int8 v10 = v14;
  char v13 = 0;
  int v14 = 0;
  *a4 = v11;
  a4[1] = v10;
  if (v8)
  {
    sub_1000DB0A0(v8);
    if (v14) {
      sub_1000DB0A0(v14);
    }
  }
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  signed __int8 v12 = (std::__shared_weak_count *)v6[5];
  void v6[4] = v11;
  v6[5] = v10;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1002386F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100238708(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = 0;
  a3[192] = 0;
  id v4 = sub_100222004(a1, a2);
  id v5 = v4;
  if (v4)
  {
    int v6 = (std::__shared_weak_count *)v4[5];
    if (v6)
    {
      signed __int8 v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        int v8 = v7;
        uint64_t v9 = v5[4];
        if (v9)
        {
          sub_1002162BC((uint64_t)a3);
          sub_100238C14((uint64_t)a3, v9);
          a3[192] = 1;
        }
        sub_1000DB0A0(v8);
      }
    }
  }
}

void sub_1002387A0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  sub_100216190(v1);
  _Unwind_Resume(a1);
}

void *sub_1002387C4(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  do
    v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v7++);
  while (v7 != 16);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    BOOL v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  int v15 = (void *)(a1 + 16);
  unint64_t i = operator new(0x30uLL);
  *unint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = **a4;
  i[4] = 0;
  i[5] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  __int16 v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *unint64_t i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  *unint64_t i = *v15;
  *int v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    __int16 v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100238A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_100238A4C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100238A4C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    id v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_100238AA8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0xD8uLL);
  uint64_t result = sub_100238B04(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100238AF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100238B04(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10229FFC8;
  sub_1001F3468((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100238B60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100238B74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10229FFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100238B94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10229FFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100238BE8(uint64_t a1)
{
  return sub_1001F0024((uint64_t)&v2, a1 + 24);
}

uint64_t sub_100238C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001F03C4(a1, a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_1001F08B0(v4 + 64, a2 + 64);
  sub_1001F0B48(a1 + 104, a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 144);
  int v7 = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  sub_10010F834((void *)(a1 + 168), *(const void **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
  return a1;
}

void sub_100238CA4(_Unwind_Exception *a1)
{
  sub_1000D7D80(v3);
  sub_1000D7D80(v2);
  sub_1001F00CC(v1);
  _Unwind_Resume(a1);
}

void sub_100238CD8(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3 = (_DWORD *)sub_100275E9C(a2);
  _DWORD *v3 = 2;
  v3[1] = a1;
  operator new();
}

void sub_100239448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41)
{
  a41 = &a21;
  sub_1001DCABC((void ***)&a41);
  a41 = &a25;
  sub_1001DCABC((void ***)&a41);
  a41 = &a28;
  sub_1001DCABC((void ***)&a41);
  sub_1001F00CC((uint64_t)&a31);
  sub_100239640(&a38);
  sub_1001EC93C(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100239594()
{
  sub_1000C7F88(&v5);
  BOOL v4 = 0;
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsUseKMeansClusterCenters", 0x8000100u, kCFAllocatorNull);
  unsigned int v1 = sub_1000D29FC(v5, (uint64_t)v0, &v4);
  CFRelease(v0);
  BOOL v2 = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_100239624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100239640(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1002396C4(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100239700(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  p_p = &__p;
  sub_1001110E4((uint64_t)&__p, v6 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v8 = a1;
    }
    else {
      unint64_t v8 = *a1;
    }
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, "--");
  unint64_t v9 = (char *)operator new(0x28uLL);
  *(void *)(v9 + 29) = 0;
  *(_OWORD *)unint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  sub_1001E0650(a2, v9);
  uint8x8_t v10 = std::string::append(&__p, v9, 0x24uLL);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  operator delete(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10023980C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10023983C(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  sub_100134750(v17, "--");
  std::string::size_type size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v5 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v5 = a1->__r_.__value_.__r.__words[0];
  }
  if ((v18 & 0x80u) == 0) {
    size_t v6 = v17;
  }
  else {
    size_t v6 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    int64_t v7 = v18;
  }
  else {
    int64_t v7 = (int64_t)v17[1];
  }
  if (v7)
  {
    if ((char)size < 0) {
      std::string::size_type size = (char *)a1->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v7)
    {
      unint64_t v9 = &size[v5];
      int v10 = *(char *)v6;
      uint64_t v11 = (void *)v5;
      do
      {
        signed __int8 v12 = &size[-v7];
        if (v12 == (char *)-1) {
          break;
        }
        unint64_t v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13) {
          break;
        }
        int v14 = v13;
        if (!memcmp(v13, v6, v7))
        {
          if (v14 != v9)
          {
            int64_t v8 = (int64_t)&v14[-v5];
            if (&v14[-v5] != (char *)-1) {
              goto LABEL_16;
            }
          }
          break;
        }
        uint64_t v11 = v14 + 1;
        std::string::size_type size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    int64_t v8 = 0;
LABEL_16:
    std::string::basic_string(&v20, a1, v8 + v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
    std::string __p = v20;
    sub_1002E58D4((uint64_t)&__p, (uint64_t)&v20);
    if (v20.__r_.__value_.__s.__data_[16])
    {
      *a2 = __p;
      a2[1].__r_.__value_.__s.__data_[0] = 1;
    }
    else
    {
      int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2[1].__r_.__value_.__s.__data_[0] = 0;
      if (v15 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_1002399FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100239A38(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  BOOL v4 = __p;
  sub_100134750(__p, "--");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v6 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v6 = a1->__r_.__value_.__r.__words[0];
  }
  if ((v17 & 0x80u) == 0)
  {
    int64_t v7 = v17;
  }
  else
  {
    BOOL v4 = (void **)__p[0];
    int64_t v7 = (int64_t)__p[1];
  }
  if (v7)
  {
    if ((char)size < 0) {
      std::string::size_type size = (char *)a1->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v7)
    {
      unint64_t v9 = &size[v6];
      int v10 = *(char *)v4;
      uint64_t v11 = (void *)v6;
      do
      {
        signed __int8 v12 = &size[-v7];
        if (v12 == (char *)-1) {
          break;
        }
        unint64_t v13 = (char *)memchr(v11, v10, (size_t)(v12 + 1));
        if (!v13) {
          break;
        }
        int v14 = v13;
        if (!memcmp(v13, v4, v7))
        {
          if (v14 != v9)
          {
            std::string::size_type v8 = (std::string::size_type)&v14[-v6];
            if (&v14[-v6] != (char *)-1) {
              goto LABEL_13;
            }
          }
          break;
        }
        uint64_t v11 = v14 + 1;
        std::string::size_type size = (char *)(v9 - (v14 + 1));
      }
      while ((uint64_t)size >= v7);
    }
    std::string::operator=(a2, a1);
  }
  else
  {
    std::string::size_type v8 = 0;
LABEL_13:
    std::string::basic_string(&v15, a1, 0, v8, (std::allocator<char> *)&v18);
    *a2 = v15;
  }
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100239B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100239BC0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1001FD8C4(a1, (uint64_t)a2, &v21);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022A0068);
  }
  std::string::size_type v5 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (uint64_t)(a2[1] - *a2) >> 4;
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = v6;
    *(_WORD *)&unsigned char buf[28] = 2050;
    *(void *)&buf[30] = 0xEEEEEEEEEEEEEEEFLL * (v22 - v21);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMicroLocationClientUtils, requireFingerprintsForTriggerUuids, recording entries found for trigger uuids\", \"NumTriggerUUID\":%{public}lu, \"NumEntries\":%{public}lu}", buf, 0x26u);
  }
  int64_t v7 = v22;
  if (v21 != v22)
  {
    std::string::size_type v8 = (long long *)((char *)v21 + 216);
    do
    {
      if (*((unsigned char *)v8 + 16))
      {
        v27[0] = off_10229EA20;
        v27[1] = sub_10031DCB8;
        v27[3] = v27;
        char v28 = 1;
        if (*((_DWORD *)v8 - 36) == 1) {
          sub_10023A408((uint64_t)v27, (uint64_t)sub_10031E768);
        }
        sub_1000C7F88(buf);
        LODWORD(v19) = 0;
        CFStringRef v9 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsFingerprintDataSource", 0x8000100u, kCFAllocatorNull);
        int v10 = sub_1004D08E4(*(uint64_t *)buf, (uint64_t)v9, &v19);
        CFRelease(v9);
        unsigned int v11 = v19;
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v10) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = 1;
        }
        v26[0] = off_1022A0098;
        void v26[3] = v26;
        if (v28)
        {
          sub_1001EFAF8((uint64_t)v25, (uint64_t)v27);
          long long v13 = *(long long *)((char *)v8 - 216);
          *(void *)&uint8_t buf[16] = *((void *)v8 - 25);
          *(_OWORD *)uint64_t buf = v13;
          if (*((char *)v8 - 169) < 0)
          {
            sub_1000DC48C(&buf[24], *((void **)v8 - 24), *((void *)v8 - 23));
          }
          else
          {
            long long v14 = *(v8 - 12);
            uint64_t v30 = *((void *)v8 - 22);
            *(_OWORD *)&unsigned char buf[24] = v14;
          }
          long long v17 = *(long long *)((char *)v8 - 168);
          *(_OWORD *)((char *)v31 + 12) = *(long long *)((char *)v8 - 156);
          v31[0] = v17;
          sub_1002660C8(&v32);
          long long v18 = *v8;
          char v34 = *((unsigned char *)v8 + 16);
          long long v33 = v18;
          long long v20 = 0uLL;
          char v19 = 0;
          __int16 v23 = &v19;
          char v24 = 0;
          char v19 = operator new(0xF0uLL);
          *(void *)&long long v20 = v19;
          *((void *)&v20 + 1) = (char *)v19 + 240;
          *(void *)&long long v20 = sub_10023AC9C((uint64_t)&v20 + 8, (long long *)buf, v35, (uint64_t)v19);
          sub_1002C5CB4(v12);
        }
        sub_10020D700();
      }
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A0068);
      }
      std::string v15 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Error: recording entry does not have trigger UUID", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_1022A0068);
        }
        LOWORD(v27[0]) = 0;
        float v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::unordered_map<boost::uuids::uuid, CLMicroLocationFingerprint> CLMicroLocationClientUtils::requireFingerprintsForTriggerUuids(CLMicroLocationDatabase &, const std::vector<boost::uuids::uuid> &)", "%s\n", v16);
        if (v16 != buf) {
          free(v16);
        }
      }
      v8 += 15;
    }
    while ((long long *)((char *)v8 - 216) != v7);
  }
  *(void *)uint64_t buf = &v21;
  sub_1001EF794((void ***)buf);
}

void sub_10023A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41)
{
  a41 = (void **)&a28;
  sub_1001EF794(&a41);
  _Unwind_Resume(a1);
}

void sub_10023A39C()
{
}

void sub_10023A3A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x10023A358);
}

uint64_t sub_10023A408(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    v4[0] = off_10229EA20;
    v4[1] = a2;
    v4[3] = v4;
    sub_10023A964(v4, (void *)a1);
    sub_1001EF958(v4);
  }
  else
  {
    *(void *)a1 = off_10229EA20;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 24) = a1;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t sub_10023A4CC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_10023A508(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  sub_1000D7D80(a1 + 120);
  sub_1000D7D80(a1 + 80);
  sub_1001F00CC(a1 + 16);
  return a1;
}

void sub_10023A558(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  if (*(unsigned char *)(a4 + 24))
  {
    sub_100239700(a3, a2, __p);
    if (!*(unsigned char *)(a4 + 24)) {
      sub_10020D700();
    }
    sub_1001FC8D4(a1, (uint64_t)__p, *(void *)(a4 + 8), *(void *)(a4 + 16), a5, a6);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022A0068);
    }
    int v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMicroLocationClientUtils, requireServiceLabelEntries, cannot load label entries for unknown LOI", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022A0068);
      }
      unsigned int v11 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::vector<CLMicroLocationRecordingLabelsTable::Entry> CLMicroLocationClientUtils::requireServiceLabelEntries(CLMicroLocationDatabase &, const CLMiLoService::ServiceUuid &, const std::string &, const std::optional<CLMiLoService::MiLoLocation> &, cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", (const char *)v11);
      if (v11 != __p) {
        free(v11);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
}

void sub_10023A758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_10023A77C(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_10023A7AC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *a2;
  sub_1001F03C4(a1 + 16, a3);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(void *)(a1 + 72) = *(void *)(a3 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  sub_1001F08B0(a1 + 80, a3 + 64);
  sub_1001F0B48(a1 + 120, a3 + 104);
  long long v6 = *(_OWORD *)(a3 + 144);
  int v7 = *(_DWORD *)(a3 + 160);
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 160) = v6;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  sub_10010F834((void *)(a1 + 184), *(const void **)(a3 + 168), *(void *)(a3 + 176), (uint64_t)(*(void *)(a3 + 176) - *(void *)(a3 + 168)) >> 2);
  return a1;
}

void sub_10023A858(_Unwind_Exception *a1)
{
  sub_1000D7D80(v3);
  sub_1000D7D80(v2);
  sub_1001F00CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10023A88C(uint64_t a1)
{
  sub_10023A8C8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10023A8C8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10023A90C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_10023A90C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  sub_1000D7D80(a1 + 120);
  sub_1000D7D80(a1 + 80);

  return sub_1001F00CC(a1 + 16);
}

void *sub_10023A964(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    BOOL v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10023ABC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10023ABD4()
{
}

void *sub_10023ABE8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022A0098;
  return result;
}

void sub_10023AC20(uint64_t a1, void *a2)
{
  *a2 = off_1022A0098;
}

uint64_t sub_10023AC48()
{
  return 0;
}

uint64_t sub_10023AC50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10023AC90()
{
}

uint64_t sub_10023AC9C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      sub_1001F2A70(a1, v4, v6);
      v6 += 15;
      uint64_t v4 = v12 + 240;
      v12 += 240;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10023AD48((uint64_t)v9);
  return v4;
}

void sub_10023AD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10023AD48(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10023AD80((uint64_t *)a1);
  }
  return a1;
}

void sub_10023AD80(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 240;
      sub_1001EF82C(v5, v3);
    }
    while (v3 != v4);
  }
}

void *sub_10023ADD4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
    v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + *((unsigned __int8 *)a2 + v6++);
  while (v6 != 16);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    char v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  std::string v15 = operator new(0xE0uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *std::string v15 = 0;
  v15[1] = v7;
  sub_10023B064((uint64_t)(v15 + 2), a3);
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t v11 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  sub_10023B0F0((uint64_t)v25, 0);
  return v11;
}

void sub_10023B04C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023B0F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10023B064(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000E2908(a1 + 16, (uint64_t *)(a2 + 16));
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  sub_1000E2908(a1 + 80, (uint64_t *)(a2 + 80));
  sub_1000E2908(a1 + 120, (uint64_t *)(a2 + 120));
  long long v5 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v5;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  return a1;
}

void sub_10023B0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10023A90C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_10023B148()
{
  if (qword_102489920) {
    (*(void (**)(uint64_t))(*(void *)qword_102489920 + 8))(qword_102489920);
  }
  if (qword_102489928) {
    (*(void (**)(uint64_t))(*(void *)qword_102489928 + 8))(qword_102489928);
  }
  if (qword_102489930) {
    (*(void (**)(uint64_t))(*(void *)qword_102489930 + 8))(qword_102489930);
  }
  if (qword_102489938) {
    (*(void (**)(uint64_t))(*(void *)qword_102489938 + 8))(qword_102489938);
  }
  if (qword_102489940) {
    (*(void (**)(uint64_t))(*(void *)qword_102489940 + 8))(qword_102489940);
  }
  if (qword_102489948) {
    (*(void (**)(uint64_t))(*(void *)qword_102489948 + 8))(qword_102489948);
  }
  if (qword_102489950) {
    (*(void (**)(uint64_t))(*(void *)qword_102489950 + 8))(qword_102489950);
  }
  if (qword_102489958) {
    (*(void (**)(uint64_t))(*(void *)qword_102489958 + 8))(qword_102489958);
  }
  if (qword_102489960) {
    (*(void (**)(uint64_t))(*(void *)qword_102489960 + 8))(qword_102489960);
  }
  if (qword_102489968) {
    (*(void (**)(uint64_t))(*(void *)qword_102489968 + 8))(qword_102489968);
  }
  if (qword_102489970) {
    (*(void (**)(uint64_t))(*(void *)qword_102489970 + 8))(qword_102489970);
  }
  if (qword_102489978) {
    (*(void (**)(uint64_t))(*(void *)qword_102489978 + 8))(qword_102489978);
  }
  if (qword_102489980) {
    (*(void (**)(uint64_t))(*(void *)qword_102489980 + 8))(qword_102489980);
  }
  if (qword_102489988) {
    (*(void (**)(uint64_t))(*(void *)qword_102489988 + 8))(qword_102489988);
  }
  if (qword_102489990) {
    (*(void (**)(uint64_t))(*(void *)qword_102489990 + 8))(qword_102489990);
  }
  if (qword_102489998) {
    (*(void (**)(uint64_t))(*(void *)qword_102489998 + 8))(qword_102489998);
  }
  if (qword_1024899A0) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899A0 + 8))(qword_1024899A0);
  }
  if (qword_1024899A8) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899A8 + 8))(qword_1024899A8);
  }
  if (qword_1024899B0) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899B0 + 8))(qword_1024899B0);
  }
  if (qword_1024899B8) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899B8 + 8))(qword_1024899B8);
  }
  if (qword_1024899C0) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899C0 + 8))(qword_1024899C0);
  }
  if (qword_1024899C8) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899C8 + 8))(qword_1024899C8);
  }
  if (qword_1024899D0) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899D0 + 8))(qword_1024899D0);
  }
  if (qword_1024899D8) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899D8 + 8))(qword_1024899D8);
  }
  if (qword_1024899E0) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899E0 + 8))(qword_1024899E0);
  }
  if (qword_1024899E8) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899E8 + 8))(qword_1024899E8);
  }
  if (qword_1024899F0) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899F0 + 8))(qword_1024899F0);
  }
  if (qword_1024899F8) {
    (*(void (**)(uint64_t))(*(void *)qword_1024899F8 + 8))(qword_1024899F8);
  }
  if (qword_102489A00) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A00 + 8))(qword_102489A00);
  }
  if (qword_102489A08) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A08 + 8))(qword_102489A08);
  }
  if (qword_102489A10) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A10 + 8))(qword_102489A10);
  }
  if (qword_102489A18) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A18 + 8))(qword_102489A18);
  }
  if (qword_102489A20) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A20 + 8))(qword_102489A20);
  }
  if (qword_102489A28) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A28 + 8))(qword_102489A28);
  }
  if (qword_102489A30) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A30 + 8))(qword_102489A30);
  }
  if (qword_102489A38) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A38 + 8))(qword_102489A38);
  }
  if (qword_102489A40) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A40 + 8))(qword_102489A40);
  }
  if (qword_102489A48) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A48 + 8))(qword_102489A48);
  }
  if (qword_102489A50) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A50 + 8))(qword_102489A50);
  }
  if (qword_102489A58) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A58 + 8))(qword_102489A58);
  }
  if (qword_102489A60) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A60 + 8))(qword_102489A60);
  }
  if (qword_102489A68) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A68 + 8))(qword_102489A68);
  }
  if (qword_102489A70) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A70 + 8))(qword_102489A70);
  }
  if (qword_102489A78) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A78 + 8))(qword_102489A78);
  }
  if (qword_102489A80) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A80 + 8))(qword_102489A80);
  }
  if (qword_102489A88) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A88 + 8))(qword_102489A88);
  }
  if (qword_102489A90) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A90 + 8))(qword_102489A90);
  }
  if (qword_102489A98) {
    (*(void (**)(uint64_t))(*(void *)qword_102489A98 + 8))(qword_102489A98);
  }
  if (qword_102489AA0) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AA0 + 8))(qword_102489AA0);
  }
  if (qword_102489AA8) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AA8 + 8))(qword_102489AA8);
  }
  if (qword_102489AB0) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AB0 + 8))(qword_102489AB0);
  }
  if (qword_102489AB8) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AB8 + 8))(qword_102489AB8);
  }
  if (qword_102489AC0) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AC0 + 8))(qword_102489AC0);
  }
  if (qword_102489AC8) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AC8 + 8))(qword_102489AC8);
  }
  if (qword_102489AD0) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AD0 + 8))(qword_102489AD0);
  }
  if (qword_102489AD8) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AD8 + 8))(qword_102489AD8);
  }
  if (qword_102489AE0) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AE0 + 8))(qword_102489AE0);
  }
  if (qword_102489AE8) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AE8 + 8))(qword_102489AE8);
  }
  if (qword_102489AF0) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AF0 + 8))(qword_102489AF0);
  }
  if (qword_102489AF8) {
    (*(void (**)(uint64_t))(*(void *)qword_102489AF8 + 8))(qword_102489AF8);
  }
  if (qword_102489B00) {
    (*(void (**)(uint64_t))(*(void *)qword_102489B00 + 8))(qword_102489B00);
  }
  if (qword_102489B08) {
    (*(void (**)(uint64_t))(*(void *)qword_102489B08 + 8))(qword_102489B08);
  }
  if (qword_102489B10) {
    (*(void (**)(uint64_t))(*(void *)qword_102489B10 + 8))(qword_102489B10);
  }
  if (qword_102489B18) {
    (*(void (**)(uint64_t))(*(void *)qword_102489B18 + 8))(qword_102489B18);
  }
  if (qword_102489B20) {
    (*(void (**)(uint64_t))(*(void *)qword_102489B20 + 8))(qword_102489B20);
  }
  uint64_t result = qword_102489B28;
  if (qword_102489B28)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_102489B28 + 8);
    return v1();
  }
  return result;
}

void sub_10023BDD0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10247A718 & 1) == 0)
  {
    byte_10247A718 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc", a4);
    operator new();
  }
}

uint64_t sub_10023D4E8(uint64_t result)
{
  *(void *)uint64_t result = off_1022A0118;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 5;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_10023D524(uint64_t result)
{
  *(_DWORD *)(result + 16) = 1;
  *(void *)uint64_t result = off_1022A0190;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 28) = 0;
  *(void *)(result + 20) = 0;
  return result;
}

uint64_t sub_10023D558(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_1022A0208;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10023D580(uint64_t result)
{
  *(void *)uint64_t result = off_1022A0280;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 6;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 1;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 48) = 0;
  return result;
}

double sub_10023D5C4(uint64_t a1)
{
  *(void *)a1 = off_1022A0460;
  *(void *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return result;
}

void *sub_10023D608(void *result)
{
  *double result = off_1022A04D8;
  result[1] = 0;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0;
  return result;
}

void *sub_10023D634(void *result)
{
  *double result = &off_1022A0550;
  result[1] = 0;
  result[2] = 1;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t sub_10023D660(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022A05C8;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 72) = 0;
  *(_WORD *)(result + 96) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t sub_10023D6AC(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(void *)double result = off_1022A0640;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_10023D6E0(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)double result = off_1022A0730;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10023D714(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022A07A8;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void *sub_10023D740(void *result)
{
  *double result = off_1022A0820;
  result[1] = 0;
  result[2] = 0;
  result[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[4] = 0;
  return result;
}

uint64_t sub_10023D770(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022A0898;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_10023D7A4(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022A0910;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void *sub_10023D7D0(void *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  *double result = off_1022A0988;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  return result;
}

uint64_t sub_10023D800(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022A0A00;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = 0;
  return result;
}

double sub_10023D838(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022A0A78;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 184) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 176) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t sub_10023D8A0(uint64_t result)
{
  *(void *)double result = off_1022A0AF0;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

double sub_10023D8C8(void *a1)
{
  *a1 = off_1022A0B68;
  *(void *)&double result = 0x100000001;
  a1[1] = 0x100000001;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[5] = 0;
  return result;
}

double sub_10023D900(void *a1)
{
  *a1 = off_1022A0BE0;
  *(void *)&double result = 0x10000000DLL;
  a1[1] = 0x10000000DLL;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[5] = 0;
  return result;
}

double sub_10023D93C(uint64_t a1)
{
  *(void *)&double result = 2;
  *(void *)(a1 + 32) = 2;
  *(void *)a1 = off_1022A0C58;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_10023D978(uint64_t a1)
{
  *(void *)&double result = 4;
  *(void *)(a1 + 16) = 4;
  *(void *)a1 = off_1022A0CD0;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_10023D9B0(uint64_t a1)
{
  *(void *)a1 = off_1022A0D48;
  *(void *)&double result = 5;
  *(void *)(a1 + 8) = 5;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_10023D9E0(uint64_t a1)
{
  *(void *)&double result = 14;
  *(void *)(a1 + 32) = 14;
  *(void *)a1 = off_1022A0DC0;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_10023DA1C(uint64_t a1)
{
  *(void *)a1 = off_1022A0E38;
  *(void *)&double result = 7;
  *(void *)(a1 + 8) = 7;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_10023DA4C(uint64_t result)
{
  *(_DWORD *)(result + 64) = 9;
  *(void *)double result = off_1022A0EB0;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 80) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_WORD *)(result + 68) = 0;
  *(void *)(result + 88) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 96) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 104) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 112) = 0;
  return result;
}

uint64_t sub_10023DA98(uint64_t result)
{
  *(_DWORD *)(result + 48) = 10;
  *(void *)double result = off_1022A0F28;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_WORD *)(result + 52) = 0;
  *(void *)(result + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 80) = 0;
  return result;
}

double sub_10023DADC(void *a1)
{
  *a1 = off_1022A0FA0;
  double result = 0.0;
  a1[1] = 0;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = 0;
  return result;
}

double sub_10023DB14(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = off_1022A1018;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 12;
  *(void *)(a1 + 16) = 12;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return result;
}

double sub_10023DB58(uint64_t a1)
{
  *(void *)a1 = off_1022A1090;
  *(void *)&double result = 31;
  *(void *)(a1 + 8) = 31;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_10023DB88(uint64_t a1)
{
  *(void *)a1 = off_1022A1108;
  *(void *)&double result = 32;
  *(void *)(a1 + 8) = 32;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_10023DBB8(uint64_t a1)
{
  *(void *)a1 = off_1022A1180;
  *(void *)&double result = 33;
  *(void *)(a1 + 8) = 33;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_10023DBE8(uint64_t a1)
{
  *(void *)a1 = off_1022A11F8;
  *(void *)&double result = 34;
  *(void *)(a1 + 8) = 34;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_10023DC18(uint64_t a1)
{
  *(void *)a1 = off_1022A1270;
  *(void *)&double result = 35;
  *(void *)(a1 + 8) = 35;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

double sub_10023DC48(uint64_t a1)
{
  *(void *)&double result = 36;
  *(void *)(a1 + 24) = 36;
  *(void *)a1 = off_1022A12E8;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_10023DC84(uint64_t a1)
{
  *(void *)&double result = 37;
  *(void *)(a1 + 24) = 37;
  *(void *)a1 = off_1022A1360;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_10023DCC0(uint64_t a1)
{
  *(void *)&double result = 38;
  *(void *)(a1 + 24) = 38;
  *(void *)a1 = off_1022A13D8;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_10023DCFC(uint64_t a1)
{
  *(void *)&double result = 39;
  *(void *)(a1 + 24) = 39;
  *(void *)a1 = off_1022A1450;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_10023DD38(uint64_t result)
{
  *(_DWORD *)(result + 16) = 40;
  *(void *)double result = off_1022A14C8;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 20) = 0;
  return result;
}

double sub_10023DD70(uint64_t a1)
{
  *(void *)&double result = 41;
  *(void *)(a1 + 24) = 41;
  *(void *)a1 = off_1022A1540;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_10023DDAC(uint64_t a1)
{
  *(void *)&double result = 42;
  *(void *)(a1 + 40) = 42;
  *(void *)a1 = off_1022A15B8;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

double sub_10023DDEC(uint64_t a1)
{
  *(void *)&double result = 43;
  *(void *)(a1 + 32) = 43;
  *(void *)a1 = off_1022A1630;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double sub_10023DE28(uint64_t a1)
{
  *(void *)&double result = 44;
  *(void *)(a1 + 16) = 44;
  *(void *)a1 = off_1022A16A8;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_10023DE60(void *a1)
{
  *a1 = off_1022A1720;
  a1[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 45;
  a1[2] = 45;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = 0;
  a1[5] = 0;
  return result;
}

double sub_10023DE9C(uint64_t a1)
{
  *(void *)&double result = 46;
  *(void *)(a1 + 16) = 46;
  *(void *)a1 = off_1022A1798;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_10023DED4(uint64_t a1)
{
  *(void *)a1 = off_1022A1810;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 0x10000002FLL;
  *(void *)(a1 + 24) = 0x10000002FLL;
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

double sub_10023DF18(uint64_t a1)
{
  *(void *)&double result = 55;
  *(void *)(a1 + 16) = 55;
  *(void *)a1 = off_1022A1888;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_10023DF50(uint64_t a1)
{
  *(void *)a1 = off_1022A1900;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

double sub_10023DFC0(uint64_t a1)
{
  *(void *)a1 = off_1022A1978;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return result;
}

double sub_10023E010(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 48;
  *(void *)a1 = off_1022A19F0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  double result = 0.0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

double sub_10023E064(uint64_t a1)
{
  *(void *)a1 = off_1022A1A68;
  *(void *)&double result = 0x100000031;
  *(_OWORD *)(a1 + 8) = xmmword_101D068A0;
  return result;
}

uint64_t sub_10023E090(uint64_t result)
{
  *(void *)double result = off_1022A1AE0;
  *(_DWORD *)(result + 8) = 50;
  *(unsigned char *)(result + 12) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_10023E0C0(uint64_t result)
{
  *(void *)double result = off_1022A1B58;
  *(void *)(result + 8) = 51;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_WORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10023E0EC(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022A1D38;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10023E114(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022A1DB0;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

double sub_10023E144(uint64_t a1)
{
  *(void *)&double result = 1;
  *(void *)(a1 + 16) = 1;
  *(void *)a1 = &off_1022A1E28;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double sub_10023E174(uint64_t a1)
{
  *(void *)&double result = 2;
  *(void *)(a1 + 24) = 2;
  *(void *)a1 = off_1022A1EA0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_10023E1B0(uint64_t a1)
{
  *(void *)a1 = off_1022A1F18;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

void *sub_10023E1E0(void *result)
{
  *double result = off_1022A1F90;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0;
  return result;
}

uint64_t sub_10023E20C(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_102489928;
  if (!qword_102489928)
  {
    double result = sub_10023BDD0();
    uint64_t v2 = qword_102489928;
  }
  v1[2] = v2;
  uint64_t v3 = qword_102489940;
  if (!qword_102489940)
  {
    double result = sub_10023BDD0();
    uint64_t v3 = qword_102489940;
  }
  v1[3] = v3;
  uint64_t v4 = qword_102489948;
  if (!qword_102489948)
  {
    double result = sub_10023BDD0();
    uint64_t v4 = qword_102489948;
  }
  v1[4] = v4;
  uint64_t v5 = qword_102489950;
  if (!qword_102489950)
  {
    double result = sub_10023BDD0();
    uint64_t v5 = qword_102489950;
  }
  v1[5] = v5;
  uint64_t v6 = qword_102489920;
  if (!qword_102489920)
  {
    double result = sub_10023BDD0();
    uint64_t v6 = qword_102489920;
  }
  v1[6] = v6;
  uint64_t v7 = qword_102489938;
  if (!qword_102489938)
  {
    double result = sub_10023BDD0();
    uint64_t v7 = qword_102489938;
  }
  v1[7] = v7;
  return result;
}

uint64_t sub_10023E2BC(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1024899D0;
  if (!qword_1024899D0)
  {
    double result = sub_10023BDD0();
    uint64_t v2 = qword_1024899D0;
  }
  v1[1] = v2;
  uint64_t v3 = qword_1024899E0;
  if (!qword_1024899E0)
  {
    double result = sub_10023BDD0();
    uint64_t v3 = qword_1024899E0;
  }
  v1[2] = v3;
  uint64_t v4 = qword_1024899E8;
  if (!qword_1024899E8)
  {
    double result = sub_10023BDD0();
    uint64_t v4 = qword_1024899E8;
  }
  v1[3] = v4;
  uint64_t v5 = qword_1024899F0;
  if (!qword_1024899F0)
  {
    double result = sub_10023BDD0();
    uint64_t v5 = qword_1024899F0;
  }
  v1[4] = v5;
  uint64_t v6 = qword_102489A00;
  if (!qword_102489A00)
  {
    double result = sub_10023BDD0();
    uint64_t v6 = qword_102489A00;
  }
  v1[5] = v6;
  uint64_t v7 = qword_102489A08;
  if (!qword_102489A08)
  {
    double result = sub_10023BDD0();
    uint64_t v7 = qword_102489A08;
  }
  v1[6] = v7;
  uint64_t v8 = qword_102489A10;
  if (!qword_102489A10)
  {
    double result = sub_10023BDD0();
    uint64_t v8 = qword_102489A10;
  }
  v1[7] = v8;
  uint64_t v9 = qword_102489A20;
  if (!qword_102489A20)
  {
    double result = sub_10023BDD0();
    uint64_t v9 = qword_102489A20;
  }
  v1[8] = v9;
  uint64_t v10 = qword_1024899D8;
  if (!qword_1024899D8)
  {
    double result = sub_10023BDD0();
    uint64_t v10 = qword_1024899D8;
  }
  v1[9] = v10;
  uint64_t v11 = qword_1024899F8;
  if (!qword_1024899F8)
  {
    double result = sub_10023BDD0();
    uint64_t v11 = qword_1024899F8;
  }
  v1[10] = v11;
  uint64_t v12 = qword_102489A28;
  if (!qword_102489A28)
  {
    double result = sub_10023BDD0();
    uint64_t v12 = qword_102489A28;
  }
  v1[11] = v12;
  uint64_t v13 = qword_102489A30;
  if (!qword_102489A30)
  {
    double result = sub_10023BDD0();
    uint64_t v13 = qword_102489A30;
  }
  v1[12] = v13;
  uint64_t v14 = qword_102489A38;
  if (!qword_102489A38)
  {
    double result = sub_10023BDD0();
    uint64_t v14 = qword_102489A38;
  }
  v1[13] = v14;
  uint64_t v15 = qword_102489A40;
  if (!qword_102489A40)
  {
    double result = sub_10023BDD0();
    uint64_t v15 = qword_102489A40;
  }
  v1[14] = v15;
  uint64_t v16 = qword_102489A48;
  if (!qword_102489A48)
  {
    double result = sub_10023BDD0();
    uint64_t v16 = qword_102489A48;
  }
  v1[15] = v16;
  uint64_t v17 = qword_102489A50;
  if (!qword_102489A50)
  {
    double result = sub_10023BDD0();
    uint64_t v17 = qword_102489A50;
  }
  v1[16] = v17;
  uint64_t v18 = qword_102489A58;
  if (!qword_102489A58)
  {
    double result = sub_10023BDD0();
    uint64_t v18 = qword_102489A58;
  }
  v1[17] = v18;
  uint64_t v19 = qword_102489A60;
  if (!qword_102489A60)
  {
    double result = sub_10023BDD0();
    uint64_t v19 = qword_102489A60;
  }
  v1[18] = v19;
  uint64_t v20 = qword_102489A68;
  if (!qword_102489A68)
  {
    double result = sub_10023BDD0();
    uint64_t v20 = qword_102489A68;
  }
  v1[19] = v20;
  uint64_t v21 = qword_102489A70;
  if (!qword_102489A70)
  {
    double result = sub_10023BDD0();
    uint64_t v21 = qword_102489A70;
  }
  v1[20] = v21;
  uint64_t v22 = qword_102489A78;
  if (!qword_102489A78)
  {
    double result = sub_10023BDD0();
    uint64_t v22 = qword_102489A78;
  }
  v1[21] = v22;
  uint64_t v23 = qword_102489A80;
  if (!qword_102489A80)
  {
    double result = sub_10023BDD0();
    uint64_t v23 = qword_102489A80;
  }
  v1[22] = v23;
  uint64_t v24 = qword_102489A88;
  if (!qword_102489A88)
  {
    double result = sub_10023BDD0();
    uint64_t v24 = qword_102489A88;
  }
  v1[23] = v24;
  uint64_t v25 = qword_102489A90;
  if (!qword_102489A90)
  {
    double result = sub_10023BDD0();
    uint64_t v25 = qword_102489A90;
  }
  v1[24] = v25;
  uint64_t v26 = qword_102489A98;
  if (!qword_102489A98)
  {
    double result = sub_10023BDD0();
    uint64_t v26 = qword_102489A98;
  }
  v1[25] = v26;
  uint64_t v27 = qword_102489AA0;
  if (!qword_102489AA0)
  {
    double result = sub_10023BDD0();
    uint64_t v27 = qword_102489AA0;
  }
  v1[26] = v27;
  uint64_t v28 = qword_102489AA8;
  if (!qword_102489AA8)
  {
    double result = sub_10023BDD0();
    uint64_t v28 = qword_102489AA8;
  }
  v1[27] = v28;
  uint64_t v29 = qword_102489AC8;
  if (!qword_102489AC8)
  {
    double result = sub_10023BDD0();
    uint64_t v29 = qword_102489AC8;
  }
  v1[28] = v29;
  uint64_t v30 = qword_102489AD0;
  if (!qword_102489AD0)
  {
    double result = sub_10023BDD0();
    uint64_t v30 = qword_102489AD0;
  }
  v1[29] = v30;
  uint64_t v31 = qword_102489AD8;
  if (!qword_102489AD8)
  {
    double result = sub_10023BDD0();
    uint64_t v31 = qword_102489AD8;
  }
  v1[30] = v31;
  uint64_t v32 = qword_102489AE0;
  if (!qword_102489AE0)
  {
    double result = sub_10023BDD0();
    uint64_t v32 = qword_102489AE0;
  }
  v1[31] = v32;
  uint64_t v33 = qword_102489AE8;
  if (!qword_102489AE8)
  {
    double result = sub_10023BDD0();
    uint64_t v33 = qword_102489AE8;
  }
  v1[32] = v33;
  uint64_t v34 = qword_102489AF0;
  if (!qword_102489AF0)
  {
    double result = sub_10023BDD0();
    uint64_t v34 = qword_102489AF0;
  }
  v1[33] = v34;
  uint64_t v35 = qword_102489AF8;
  if (!qword_102489AF8)
  {
    double result = sub_10023BDD0();
    uint64_t v35 = qword_102489AF8;
  }
  v1[34] = v35;
  uint64_t v36 = qword_102489AB0;
  if (!qword_102489AB0)
  {
    double result = sub_10023BDD0();
    uint64_t v36 = qword_102489AB0;
  }
  v1[35] = v36;
  return result;
}

uint64_t sub_10023E624(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_1024899D0;
  if (!qword_1024899D0)
  {
    double result = sub_10023BDD0();
    uint64_t v2 = qword_1024899D0;
  }
  v1[2] = v2;
  uint64_t v3 = qword_1024899E0;
  if (!qword_1024899E0)
  {
    double result = sub_10023BDD0();
    uint64_t v3 = qword_1024899E0;
  }
  v1[3] = v3;
  uint64_t v4 = qword_1024899E8;
  if (!qword_1024899E8)
  {
    double result = sub_10023BDD0();
    uint64_t v4 = qword_1024899E8;
  }
  v1[4] = v4;
  uint64_t v5 = qword_1024899F0;
  if (!qword_1024899F0)
  {
    double result = sub_10023BDD0();
    uint64_t v5 = qword_1024899F0;
  }
  v1[5] = v5;
  uint64_t v6 = qword_102489A00;
  if (!qword_102489A00)
  {
    double result = sub_10023BDD0();
    uint64_t v6 = qword_102489A00;
  }
  v1[6] = v6;
  uint64_t v7 = qword_102489A08;
  if (!qword_102489A08)
  {
    double result = sub_10023BDD0();
    uint64_t v7 = qword_102489A08;
  }
  v1[7] = v7;
  uint64_t v8 = qword_102489A10;
  if (!qword_102489A10)
  {
    double result = sub_10023BDD0();
    uint64_t v8 = qword_102489A10;
  }
  v1[8] = v8;
  uint64_t v9 = qword_102489A20;
  if (!qword_102489A20)
  {
    double result = sub_10023BDD0();
    uint64_t v9 = qword_102489A20;
  }
  v1[10] = v9;
  uint64_t v10 = qword_1024899D8;
  if (!qword_1024899D8)
  {
    double result = sub_10023BDD0();
    uint64_t v10 = qword_1024899D8;
  }
  v1[11] = v10;
  uint64_t v11 = qword_1024899F8;
  if (!qword_1024899F8)
  {
    double result = sub_10023BDD0();
    uint64_t v11 = qword_1024899F8;
  }
  v1[12] = v11;
  return result;
}

BOOL sub_10023E734(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_10023E744(unsigned int a1)
{
  return (a1 < 0x10) & (0x800Fu >> a1);
}

BOOL sub_10023E75C(unsigned int a1)
{
  return a1 < 8;
}

BOOL sub_10023E768(unsigned int a1)
{
  return a1 < 9;
}

uint64_t sub_10023E774(unsigned int a1)
{
  return (a1 < 0x38) & (0xFFFFFF800076B6uLL >> a1);
}

BOOL sub_10023E790(int a1)
{
  return (a1 - 1) < 4;
}

BOOL sub_10023E7A0(int a1)
{
  return (a1 - 1) < 2;
}

BOOL sub_10023E7B0(int a1)
{
  return (a1 - 1) < 0xB;
}

BOOL sub_10023E7C0(int a1)
{
  return (a1 - 1) < 2 || a1 == 255;
}

uint64_t sub_10023E7DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022A0118;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 5;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 64) = 0;
  sub_10023E850(a1, a2);
  return a1;
}

void sub_10023E83C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10023E850(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 64);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    int v5 = *(_DWORD *)(a2 + 16);
    if ((v5 - 1) >= 6) {
      sub_101A55B9C();
    }
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_DWORD *)(a1 + 16) = v5;
    int v4 = *(_DWORD *)(a2 + 64);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(void *)(a1 + 8) = v6;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_9:
      if ((v4 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_9;
  }
  int v7 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(_DWORD *)(a1 + 20) = v7;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v8 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 8u;
  uint64_t v9 = *(std::string **)(a1 + 24);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v9, v8);
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v11 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(void *)(a1 + 32) = v11;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_13:
      if ((v4 & 0x80) == 0) {
        return;
      }
      goto LABEL_25;
    }
    goto LABEL_22;
  }
LABEL_20:
  int v10 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(_DWORD *)(a1 + 56) = v10;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if ((v4 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_22:
  uint64_t v12 = *(const std::string **)(a2 + 40);
  *(_DWORD *)(a1 + 64) |= 0x40u;
  uint64_t v13 = *(std::string **)(a1 + 40);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v13, v12);
  if ((*(_DWORD *)(a2 + 64) & 0x80) != 0)
  {
LABEL_25:
    uint64_t v14 = *(const std::string **)(a2 + 48);
    *(_DWORD *)(a1 + 64) |= 0x80u;
    uint64_t v15 = *(std::string **)(a1 + 48);
    if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v15, v14);
  }
}

void sub_10023EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_10023EAA8(void *result)
{
  uint64_t v1 = result[3];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[5];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t v5 = result[6];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  return result;
}

void sub_10023EB9C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0118;
  sub_10023EAA8(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10023EBF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0118;
  sub_10023EAA8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10023EC58()
{
}

uint64_t sub_10023ECBC(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 64);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 5;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 56) = 0;
    *(void *)(result + 32) = 0;
    if ((*(unsigned char *)(result + 64) & 0x40) != 0)
    {
      uint64_t v3 = *(void *)(result + 40);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 64) & 0x80) != 0)
    {
      uint64_t v4 = *(void *)(result + 48);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_10023ED7C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 32);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        v25[0] = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v10 = v25[0];
        }
        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 64) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }
        uint64_t v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_26;
        }
LABEL_36:
        *(void *)uint64_t v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v25) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v25;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        uint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 29) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_40:
        v25[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v25))
        {
          *(_DWORD *)(a1 + 20) = v25[0];
          int v11 = *(_DWORD *)(a1 + 64) | 4;
          *(_DWORD *)(a1 + 64) = v11;
          uint64_t v19 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v19 < *((void *)this + 2) && *v19 == 34)
          {
            *((void *)this + 1) = v19 + 1;
LABEL_44:
            *(_DWORD *)(a1 + 64) = v11 | 8;
            if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!result) {
              return result;
            }
            uint64_t v20 = (unsigned char *)*((void *)this + 1);
            unint64_t v12 = *((void *)this + 2);
            if ((unint64_t)v20 < v12 && *v20 == 40)
            {
              uint64_t v13 = v20 + 1;
              *((void *)this + 1) = v13;
LABEL_50:
              v25[0] = 0;
              if ((unint64_t)v13 >= v12 || *v13 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
                if (!result) {
                  return result;
                }
                unsigned int v21 = v25[0];
                uint64_t v22 = (unsigned char *)*((void *)this + 1);
                unint64_t v12 = *((void *)this + 2);
              }
              else
              {
                unsigned int v21 = *v13;
                uint64_t v22 = v13 + 1;
                *((void *)this + 1) = v22;
              }
              *(_DWORD *)(a1 + 56) = v21;
              *(_DWORD *)(a1 + 64) |= 0x10u;
              if ((unint64_t)v22 < v12 && *v22 == 48)
              {
                uint64_t v14 = v22 + 1;
                *((void *)this + 1) = v14;
LABEL_58:
                if ((unint64_t)v14 >= v12 || *v14 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
                  if (!result) {
                    return result;
                  }
                  uint64_t v23 = (unsigned char *)*((void *)this + 1);
                  unint64_t v12 = *((void *)this + 2);
                }
                else
                {
                  *uint64_t v5 = *v14;
                  uint64_t v23 = v14 + 1;
                  *((void *)this + 1) = v23;
                }
                int v15 = *(_DWORD *)(a1 + 64) | 0x20;
                *(_DWORD *)(a1 + 64) = v15;
                if ((unint64_t)v23 < v12 && *v23 == 58)
                {
                  *((void *)this + 1) = v23 + 1;
LABEL_66:
                  *(_DWORD *)(a1 + 64) = v15 | 0x40;
                  if (*(_UNKNOWN **)(a1 + 40) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
                    operator new();
                  }
                  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                  if (!result) {
                    return result;
                  }
                  uint64_t v24 = (unsigned char *)*((void *)this + 1);
                  if ((unint64_t)v24 < *((void *)this + 2) && *v24 == 66)
                  {
                    *((void *)this + 1) = v24 + 1;
LABEL_72:
                    *(_DWORD *)(a1 + 64) |= 0x80u;
                    if (*(_UNKNOWN **)(a1 + 48) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
                      operator new();
                    }
                    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
                    if (!result) {
                      return result;
                    }
                    if (*((void *)this + 1) == *((void *)this + 2)
                      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      uint64_t result = 1;
                      *((unsigned char *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_40;
        }
        goto LABEL_26;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v11 = *(_DWORD *)(a1 + 64);
        goto LABEL_44;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_50;
      case 6u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        uint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_58;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v15 = *(_DWORD *)(a1 + 64);
        goto LABEL_66;
      case 8u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        goto LABEL_72;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10023F214(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 64);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 56), a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 64) & 0x80) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(void *)(v5 + 32), a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return result;
  }
LABEL_17:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_10023F32C(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 64);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_55;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      unsigned int v4 = 2;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    char v9 = v8;
    uint64_t v10 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      uint64_t v10 = *(void *)(v7 + 8);
      int v3 = *(_DWORD *)(a1 + 64);
      char v9 = *(unsigned char *)(v7 + 23);
    }
    else
    {
      int v12 = 1;
    }
    if (v9 < 0) {
      int v8 = v10;
    }
    uint64_t v5 = (v5 + v12 + v8 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
  if ((v13 & 0x80000000) != 0)
  {
    int v14 = 11;
  }
  else if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    int v14 = 2;
  }
  uint64_t v5 = (v14 + v5);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v5 = v5
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
  int v3 = *(_DWORD *)(a1 + 64);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_55;
    }
    goto LABEL_46;
  }
LABEL_37:
  uint64_t v15 = *(void *)(a1 + 40);
  int v16 = *(unsigned __int8 *)(v15 + 23);
  char v17 = v16;
  uint64_t v18 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    unint64_t v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 >= 0x80)
  {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19, a2);
    int v16 = *(unsigned __int8 *)(v15 + 23);
    uint64_t v18 = *(void *)(v15 + 8);
    int v3 = *(_DWORD *)(a1 + 64);
    char v17 = *(unsigned char *)(v15 + 23);
  }
  else
  {
    int v20 = 1;
  }
  if (v17 < 0) {
    int v16 = v18;
  }
  uint64_t v5 = (v5 + v20 + v16 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_46:
    uint64_t v21 = *(void *)(a1 + 48);
    int v22 = *(unsigned __int8 *)(v21 + 23);
    char v23 = v22;
    uint64_t v24 = *(void *)(v21 + 8);
    if ((v22 & 0x80u) == 0) {
      unint64_t v25 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25 >= 0x80)
    {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v25, a2);
      int v22 = *(unsigned __int8 *)(v21 + 23);
      uint64_t v24 = *(void *)(v21 + 8);
      char v23 = *(unsigned char *)(v21 + 23);
    }
    else
    {
      int v26 = 1;
    }
    if (v23 < 0) {
      int v22 = v24;
    }
    uint64_t v5 = (v5 + v26 + v22 + 1);
  }
LABEL_55:
  *(_DWORD *)(a1 + 60) = v5;
  return v5;
}

void sub_10023F520(uint64_t a1, void *lpsrc)
{
  sub_10023E850(a1, (uint64_t)lpsrc);
}

void sub_10023F5A8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10023E850(a1, a2);
  }
}

uint64_t sub_10023F614()
{
  return 1;
}

void *sub_10023F61C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.BleLeechedBeacons");
}

uint64_t sub_10023F62C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)a1 = off_1022A0190;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  sub_10023F698(a1, a2);
  return a1;
}

void sub_10023F684(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10023F698(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    int v5 = *(_DWORD *)(a2 + 16);
    if ((v5 - 1) >= 6) {
      sub_101A55BF4();
    }
    *(_DWORD *)(a1 + 40) |= 1u;
    *(_DWORD *)(a1 + 16) = v5;
    int v4 = *(_DWORD *)(a2 + 40);
  }
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    int v8 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v8;
    int v4 = *(_DWORD *)(a2 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) |= 2u;
  *(void *)(a1 + 8) = v7;
  int v4 = *(_DWORD *)(a2 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v4 & 8) == 0) {
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v9 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) |= 8u;
  *(void *)(a1 + 24) = v9;
  if ((*(_DWORD *)(a2 + 40) & 0x10) != 0)
  {
LABEL_11:
    int v6 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v6;
  }
}

void sub_10023F7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10023F7D4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0190;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10023F7F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0190;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10023F848()
{
}

uint64_t sub_10023F8A4(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    *(_DWORD *)(result + 16) = 1;
    *(void *)(result + 8) = 0;
    *(void *)(result + 28) = 0;
    *(void *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10023F8C8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 24);
  while (2)
  {
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        v21[0] = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v21);
          if (!result) {
            return result;
          }
          unsigned int v10 = v21[0];
        }
        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }
        uint64_t v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 17)
        {
          *((void *)this + 1) = v15 + 1;
          goto LABEL_31;
        }
        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_20;
        }
LABEL_31:
        *(void *)uint64_t v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v21) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v21;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 != 29) {
          continue;
        }
        *((void *)this + 1) = v16 + 1;
LABEL_35:
        v21[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v21))
        {
          *(_DWORD *)(a1 + 20) = v21[0];
          *(_DWORD *)(a1 + 40) |= 4u;
          char v17 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v17 < v11 && *v17 == 32)
          {
            int v12 = v17 + 1;
            *((void *)this + 1) = v12;
LABEL_39:
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
              if (!result) {
                return result;
              }
              uint64_t v18 = (unsigned char *)*((void *)this + 1);
              unint64_t v11 = *((void *)this + 2);
            }
            else
            {
              *int v5 = *v12;
              uint64_t v18 = v12 + 1;
              *((void *)this + 1) = v18;
            }
            *(_DWORD *)(a1 + 40) |= 8u;
            if ((unint64_t)v18 < v11 && *v18 == 40)
            {
              uint64_t v13 = v18 + 1;
              *((void *)this + 1) = v13;
LABEL_47:
              v21[0] = 0;
              if ((unint64_t)v13 >= v11 || *v13 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v21);
                if (!result) {
                  return result;
                }
                unsigned int v19 = v21[0];
                int v20 = (unsigned __int8 *)*((void *)this + 1);
                unint64_t v11 = *((void *)this + 2);
              }
              else
              {
                unsigned int v19 = *v13;
                int v20 = (unsigned __int8 *)(v13 + 1);
                *((void *)this + 1) = v20;
              }
              *(_DWORD *)(a1 + 32) = v19;
              *(_DWORD *)(a1 + 40) |= 0x10u;
              if (v20 == (unsigned __int8 *)v11
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_35;
        }
        goto LABEL_20;
      case 4u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_39;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_47;
      default:
        int v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10023FBDC(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 24), a2, a4);
    if ((*(_DWORD *)(v5 + 40) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_11:
  int v7 = *(_DWORD *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, a2, a4);
}

uint64_t sub_10023FCA0(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        unsigned int v4 = 2;
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      uint64_t v5 = v4 + 5;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 40);
    }
    if ((v3 & 0x10) != 0)
    {
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v7 & 0x80000000) != 0)
      {
        int v8 = 11;
      }
      else if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      }
      else
      {
        int v8 = 2;
      }
      uint64_t v5 = (v8 + v5);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_10023FD70(uint64_t a1, void *lpsrc)
{
  sub_10023F698(a1, (uint64_t)lpsrc);
}

void sub_10023FDF8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10023F698(a1, a2);
  }
}

uint64_t sub_10023FE64()
{
  return 1;
}

float sub_10023FE6C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    int v2 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v2;
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v3;
    float result = *(float *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(float *)(a2 + 20) = result;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = v5;
  }
  return result;
}

void *sub_10023FEE8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.WiFiRssi");
}

float sub_10023FEF8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      float result = *(float *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(float *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *(float *)(a2 + 12);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(float *)(a1 + 12) = result;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0) {
      return result;
    }
LABEL_7:
    float result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

void sub_10023FFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10023FFE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0208;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100240004(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0208;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100240058()
{
}

uint64_t sub_1002400A8(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1002400C0(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_27;
        }
        unsigned int v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        a1[2] = v14;
        a1[6] |= 1u;
        uint64_t v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 21)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          unsigned int v13 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0) {
            return 0;
          }
          a1[3] = v13;
          a1[6] |= 2u;
          unsigned int v10 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 29)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }
      int v8 = TagFallback & 7;
      if (v8 == 5) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unsigned int v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    a1[4] = v12;
    a1[6] |= 4u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_100240288(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v4 + 12), a3);
    if ((*(_DWORD *)(v4 + 24) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 24);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  float v6 = *(float *)(v4 + 16);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_100240314(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0) {
      v2 += 5;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 5;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

float sub_10024034C(uint64_t a1, void *lpsrc)
{
  return sub_10023FEF8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002403D4()
{
  return 1;
}

void *sub_1002403DC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.Direction");
}

uint64_t sub_1002403EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022A0280;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 6;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  sub_100240468(a1, a2);
  return a1;
}

void sub_100240454(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float sub_100240468(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 56);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 56))
    {
      int v6 = *(_DWORD *)(a2 + 16);
      if ((v6 - 1) >= 6) {
        sub_101A55C4C();
      }
      *(_DWORD *)(a1 + 56) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 56);
    }
    if ((v5 & 2) != 0)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 56) |= 2u;
      *(void *)(a1 + 8) = v4;
      int v5 = *(_DWORD *)(a2 + 56);
      if ((v5 & 4) == 0)
      {
LABEL_9:
        if ((v5 & 8) == 0) {
          goto LABEL_10;
        }
        goto LABEL_19;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_9;
    }
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 56) |= 4u;
    *(_DWORD *)(a1 + 20) = v4;
    int v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }
LABEL_19:
    *(_DWORD *)(a1 + 56) |= 8u;
    uint64_t v7 = *(void *)(a1 + 24);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_102489938 + 24);
    }
    *(float *)&uint64_t v4 = sub_10023FEF8(v7, v8);
    int v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x10) == 0)
    {
LABEL_11:
      if ((v5 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_27;
    }
LABEL_24:
    uint64_t v9 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    unsigned int v10 = *(std::string **)(a1 + 32);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v10, v9);
    int v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x20) == 0)
    {
LABEL_12:
      if ((v5 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
LABEL_27:
    int v11 = *(_DWORD *)(a2 + 40);
    if ((v11 - 1) >= 2) {
      sub_101A55C20();
    }
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_DWORD *)(a1 + 40) = v11;
    int v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    LODWORD(v4) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    *(_DWORD *)(a1 + 44) = v4;
    int v5 = *(_DWORD *)(a2 + 56);
LABEL_14:
    if ((v5 & 0x80) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) |= 0x80u;
      *(_DWORD *)(a1 + 48) = v4;
    }
  }
  return *(float *)&v4;
}

void sub_100240690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1002406AC(void *result)
{
  uint64_t v1 = result[4];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  if ((void *)qword_102489938 != result)
  {
    uint64_t result = (void *)result[3];
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100240760(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0280;
  sub_1002406AC(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002407B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0280;
  sub_1002406AC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10024081C()
{
}

uint64_t sub_100240888(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 56);
  if ((_BYTE)v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 6;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 24))
        {
          *(void *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
        int v1 = *(_DWORD *)(result + 56);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      uint64_t v3 = *(void *)(result + 32);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 44) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_DWORD *)(result + 40) = 1;
  }
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_100240908(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        v31[0] = 0;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v31);
          if (!result) {
            return result;
          }
          unsigned int v9 = v31[0];
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 56) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        unsigned int v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 17)
        {
          *((void *)this + 1) = v14 + 1;
          goto LABEL_35;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_25;
        }
LABEL_35:
        *(void *)uint64_t v31 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v31) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v31;
        }
        *(_DWORD *)(a1 + 56) |= 2u;
        uint64_t v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 != 29) {
          continue;
        }
        *((void *)this + 1) = v15 + 1;
LABEL_39:
        v31[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v31) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 20) = v31[0];
        int v10 = *(_DWORD *)(a1 + 56) | 4;
        *(_DWORD *)(a1 + 56) = v10;
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 != 34) {
          continue;
        }
        *((void *)this + 1) = v16 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 56) = v10 | 8;
        char v17 = *(_DWORD **)(a1 + 24);
        if (!v17) {
          operator new();
        }
        v31[0] = 0;
        uint64_t v18 = (char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v31))return 0; {
        }
          }
        else
        {
          v31[0] = *v18;
          *((void *)this + 1) = v18 + 1;
        }
        int v19 = *((_DWORD *)this + 14);
        int v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20) {
          return 0;
        }
        int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31[0]);
        if (!sub_1002400C0(v17, this, v22) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        int v23 = *((_DWORD *)this + 14);
        BOOL v24 = __OFSUB__(v23, 1);
        int v25 = v23 - 1;
        if (v25 < 0 == v24) {
          *((_DWORD *)this + 14) = v25;
        }
        int v26 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v26 >= *((void *)this + 2) || *v26 != 42) {
          continue;
        }
        *((void *)this + 1) = v26 + 1;
LABEL_57:
        *(_DWORD *)(a1 + 56) |= 0x10u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        uint64_t v27 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v27 >= v11 || *v27 != 48) {
          continue;
        }
        unsigned int v12 = v27 + 1;
        *((void *)this + 1) = v12;
LABEL_63:
        v31[0] = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v31);
          if (!result) {
            return result;
          }
          unsigned int v28 = v31[0];
        }
        else
        {
          unsigned int v28 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (v28 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 56) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v28;
        }
        uint64_t v29 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 != 61) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_73:
        v31[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v31) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 44) = v31[0];
        *(_DWORD *)(a1 + 56) |= 0x40u;
        uint64_t v30 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 != 69) {
          continue;
        }
        *((void *)this + 1) = v30 + 1;
LABEL_77:
        v31[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v31))
        {
          *(_DWORD *)(a1 + 48) = v31[0];
          *(_DWORD *)(a1 + 56) |= 0x80u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_39;
        }
        goto LABEL_25;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        int v10 = *(_DWORD *)(a1 + 56);
        goto LABEL_43;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_57;
        }
        goto LABEL_25;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        unsigned int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_63;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_73;
        }
        goto LABEL_25;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_25;
        }
        goto LABEL_77;
      default:
        int v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100240E14(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 56);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_102489938 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (int)a2, *(float *)(v5 + 44), a3);
    if ((*(_DWORD *)(v5 + 56) & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return result;
  }
LABEL_19:
  float v8 = *(float *)(v5 + 48);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (int)a2, v8, a3);
}

uint64_t sub_100240F3C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_49;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      int v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      int v4 = 2;
    }
  }
  else
  {
    int v4 = 0;
  }
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    int v7 = v4 + 5;
  }
  else {
    int v7 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_102489938 + 24);
    }
    int v9 = *(unsigned __int8 *)(v8 + 24);
    int v10 = (v9 << 31 >> 31) & 5;
    if ((v9 & 2) != 0) {
      v10 += 5;
    }
    if ((v9 & 4) != 0) {
      v10 += 5;
    }
    if (*(unsigned char *)(v8 + 24)) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    *(_DWORD *)(v8 + 20) = v11;
    v7 += v11 + 2;
    int v3 = *(_DWORD *)(a1 + 56);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_44;
      }
      goto LABEL_38;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 56);
    char v14 = *(unsigned char *)(v12 + 23);
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < 0) {
    int v13 = v15;
  }
  v7 += v17 + v13 + 1;
  if ((v3 & 0x20) == 0) {
    goto LABEL_44;
  }
LABEL_38:
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v18 & 0x80000000) != 0)
  {
    int v19 = 11;
  }
  else if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 56);
  }
  else
  {
    int v19 = 2;
  }
  v7 += v19;
LABEL_44:
  unsigned int v20 = v7 + 5;
  if ((v3 & 0x40) == 0) {
    unsigned int v20 = v7;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t result = v20 + 5;
  }
  else {
    uint64_t result = v20;
  }
LABEL_49:
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

float sub_1002410D0(uint64_t a1, void *lpsrc)
{
  return sub_100240468(a1, (uint64_t)lpsrc);
}

float sub_100241158(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return sub_100240468(a1, a2);
  }
  return result;
}

uint64_t sub_1002411C4()
{
  return 1;
}

void *sub_1002411CC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.UwbRange");
}

void sub_1002411DC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      int v5 = *(_DWORD *)(a2 + 16);
      if ((v5 - 1) >= 6) {
        sub_101A55C78();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      *(void *)(a1 + 8) = v6;
      int v4 = *(_DWORD *)(a2 + 40);
      if ((v4 & 4) == 0)
      {
LABEL_9:
        if ((v4 & 8) == 0) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_9;
    }
    int v7 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 20) = v7;
    int v4 = *(_DWORD *)(a2 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0) {
        return;
      }
LABEL_15:
      int v9 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 0x10u;
      int v10 = *(std::string **)(a1 + 24);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v10, v9);
      return;
    }
LABEL_14:
    int v8 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 8u;
    *(_DWORD *)(a1 + 32) = v8;
    if ((*(_DWORD *)(a2 + 40) & 0x10) == 0) {
      return;
    }
    goto LABEL_15;
  }
}

void sub_100241338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100241350(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

void sub_1002413C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A02F8;
  sub_100241350((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100241418(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A02F8;
  sub_100241350((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100241480()
{
}

uint64_t sub_1002414E0(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 40);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 2;
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100241534(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        v16[0] = 0;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
          if (!result) {
            return result;
          }
          unsigned int v9 = v16[0];
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 17)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_20;
        }
LABEL_30:
        *(void *)unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v16;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 29) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_34:
        v16[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v16) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 20) = v16[0];
        *(_DWORD *)(a1 + 40) |= 4u;
        char v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 37) {
          continue;
        }
        *((void *)this + 1) = v14 + 1;
LABEL_38:
        v16[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v16))
        {
          *(_DWORD *)(a1 + 32) = v16[0];
          int v10 = *(_DWORD *)(a1 + 40) | 8;
          *(_DWORD *)(a1 + 40) = v10;
          uint64_t v15 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 42)
          {
            *((void *)this + 1) = v15 + 1;
LABEL_42:
            *(_DWORD *)(a1 + 40) = v10 | 0x10;
            if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!result) {
              return result;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_34;
        }
        goto LABEL_20;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_38;
        }
        goto LABEL_20;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_20;
        }
        int v10 = *(_DWORD *)(a1 + 40);
        goto LABEL_42;
      default:
        int v7 = TagFallback & 7;
LABEL_20:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100241838(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(float *)(v5 + 32), a3);
    if ((*(_DWORD *)(v5 + 40) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_11:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_1002418FC(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        unsigned int v4 = 2;
      }
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 5;
    }
    if ((v3 & 8) != 0) {
      uint64_t v5 = v4 + 5;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      char v9 = v8;
      uint64_t v10 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
        int v8 = *(unsigned __int8 *)(v7 + 23);
        uint64_t v10 = *(void *)(v7 + 8);
        char v9 = *(unsigned char *)(v7 + 23);
      }
      else
      {
        int v12 = 1;
      }
      if (v9 < 0) {
        int v8 = v10;
      }
      uint64_t v5 = (v5 + v12 + v8 + 1);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_1002419EC(uint64_t a1, void *lpsrc)
{
  sub_1002411DC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100241A74()
{
  return 1;
}

void *sub_100241A7C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.WiFiRange");
}

void sub_100241A8C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 44))
  {
    int v5 = *(_DWORD *)(a2 + 16);
    if ((v5 - 1) >= 6) {
      sub_101A55CA4();
    }
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v5;
    int v4 = *(_DWORD *)(a2 + 44);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 8) = v7;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_9:
      if ((v4 & 8) == 0) {
        goto LABEL_10;
      }
LABEL_16:
      int v9 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 8u;
      *(_DWORD *)(a1 + 32) = v9;
      int v4 = *(_DWORD *)(a2 + 44);
      if ((v4 & 0x10) == 0)
      {
LABEL_11:
        if ((v4 & 0x20) == 0) {
          return;
        }
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 20) = v8;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v4 & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v10 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  unint64_t v11 = *(std::string **)(a1 + 24);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v11, v10);
  if ((*(_DWORD *)(a2 + 44) & 0x20) != 0)
  {
LABEL_12:
    int v6 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v6;
  }
}

void sub_100241C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100241C28(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0370;
  sub_100241350((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100241C7C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0370;
  sub_100241350((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100241CE4()
{
}

uint64_t sub_100241D40(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 3;
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 0x10) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 36) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100241D98(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        v24[0] = 0;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
          if (!result) {
            return result;
          }
          unsigned int v10 = v24[0];
        }
        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v10 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 44) |= 1u;
          *(_DWORD *)(a1 + 16) = v10;
        }
        int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_33;
        }
        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_22;
        }
LABEL_33:
        *(void *)BOOL v24 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v24) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v24;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        uint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 29) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_37:
        v24[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v24))
        {
          *(_DWORD *)(a1 + 20) = v24[0];
          *(_DWORD *)(a1 + 44) |= 4u;
          int v19 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v19 < v11 && *v19 == 32)
          {
            int v12 = v19 + 1;
            *((void *)this + 1) = v12;
LABEL_41:
            if ((unint64_t)v12 >= v11 || *v12 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
              if (!result) {
                return result;
              }
              unsigned int v20 = (unsigned char *)*((void *)this + 1);
              unint64_t v11 = *((void *)this + 2);
            }
            else
            {
              *int v5 = *v12;
              unsigned int v20 = v12 + 1;
              *((void *)this + 1) = v20;
            }
            int v13 = *(_DWORD *)(a1 + 44) | 8;
            *(_DWORD *)(a1 + 44) = v13;
            if ((unint64_t)v20 < v11 && *v20 == 42)
            {
              *((void *)this + 1) = v20 + 1;
LABEL_49:
              *(_DWORD *)(a1 + 44) = v13 | 0x10;
              if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
                operator new();
              }
              uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
              if (!result) {
                return result;
              }
              int v21 = (unsigned char *)*((void *)this + 1);
              unint64_t v14 = *((void *)this + 2);
              if ((unint64_t)v21 < v14 && *v21 == 48)
              {
                uint64_t v15 = v21 + 1;
                *((void *)this + 1) = v15;
LABEL_55:
                v24[0] = 0;
                if ((unint64_t)v15 >= v14 || *v15 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v24);
                  if (!result) {
                    return result;
                  }
                  unsigned int v22 = v24[0];
                  int v23 = (unsigned __int8 *)*((void *)this + 1);
                  unint64_t v14 = *((void *)this + 2);
                }
                else
                {
                  unsigned int v22 = *v15;
                  int v23 = (unsigned __int8 *)(v15 + 1);
                  *((void *)this + 1) = v23;
                }
                *(_DWORD *)(a1 + 36) = v22;
                *(_DWORD *)(a1 + 44) |= 0x20u;
                if (v23 == (unsigned __int8 *)v14
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1;
                  *((unsigned char *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_37;
        }
        goto LABEL_22;
      case 4u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_41;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_22;
        }
        int v13 = *(_DWORD *)(a1 + 44);
        goto LABEL_49;
      case 6u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_55;
      default:
        int v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100242134(uint64_t result, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    if ((*(_DWORD *)(v5 + 44) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 32), a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  int v7 = *(_DWORD *)(v5 + 36);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v7, a2, a4);
}

uint64_t sub_100242214(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_38;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      unsigned int v4 = 2;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      int v8 = 2;
    }
    uint64_t v5 = (v8 + v5);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_38;
      }
      goto LABEL_32;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  int v10 = *(unsigned __int8 *)(v9 + 23);
  char v11 = v10;
  uint64_t v12 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    unint64_t v13 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    unint64_t v13 = v12;
  }
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13, a2);
    int v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v12 = *(void *)(v9 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v11 = *(unsigned char *)(v9 + 23);
  }
  else
  {
    int v14 = 1;
  }
  if (v11 < 0) {
    int v10 = v12;
  }
  uint64_t v5 = (v5 + v14 + v10 + 1);
  if ((v3 & 0x20) != 0)
  {
LABEL_32:
    uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v15 & 0x80000000) != 0)
    {
      int v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }
    else
    {
      int v16 = 2;
    }
    uint64_t v5 = (v16 + v5);
  }
LABEL_38:
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

void sub_100242360(uint64_t a1, void *lpsrc)
{
  sub_100241A8C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002423E8()
{
  return 1;
}

void *sub_1002423F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ATVAirplayBluetoothRssi");
}

void sub_100242400(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 44))
  {
    int v5 = *(_DWORD *)(a2 + 16);
    if ((v5 - 1) >= 6) {
      sub_101A55D28();
    }
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v5;
    int v4 = *(_DWORD *)(a2 + 44);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(void *)(a1 + 8) = v6;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_9:
      if ((v4 & 8) == 0) {
        goto LABEL_10;
      }
LABEL_15:
      int v8 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 44) |= 8u;
      uint64_t v9 = *(std::string **)(a1 + 24);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v9, v8);
      int v4 = *(_DWORD *)(a2 + 44);
      if ((v4 & 0x10) == 0)
      {
LABEL_11:
        if ((v4 & 0x20) == 0) {
          return;
        }
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_9;
  }
  int v7 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 20) = v7;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 8) != 0) {
    goto LABEL_15;
  }
LABEL_10:
  if ((v4 & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_18:
  int v10 = *(_DWORD *)(a2 + 32);
  if ((v10 - 1) >= 0xF) {
    sub_101A55CFC();
  }
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(_DWORD *)(a1 + 32) = v10;
  if ((*(_DWORD *)(a2 + 44) & 0x20) != 0)
  {
LABEL_20:
    int v11 = *(_DWORD *)(a2 + 36);
    if ((v11 - 1) >= 2) {
      sub_101A55CD0();
    }
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v11;
  }
}

void sub_1002425A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002425BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A03E8;
  sub_100241350((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100242610(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A03E8;
  sub_100241350((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100242678()
{
}

uint64_t sub_1002426DC(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 4;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(void *)(result + 32) = 0x100000001;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_100242734(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        v23[0] = 0;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v23);
          if (!result) {
            return result;
          }
          unsigned int v9 = v23[0];
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 44) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 17)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_32;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_21;
        }
LABEL_32:
        *(void *)int v23 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v23) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v23;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 29) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_36:
        v23[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v23))
        {
          *(_DWORD *)(a1 + 20) = v23[0];
          int v10 = *(_DWORD *)(a1 + 44) | 4;
          *(_DWORD *)(a1 + 44) = v10;
          uint64_t v18 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v18 < *((void *)this + 2) && *v18 == 34)
          {
            *((void *)this + 1) = v18 + 1;
LABEL_40:
            *(_DWORD *)(a1 + 44) = v10 | 8;
            if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!result) {
              return result;
            }
            int v19 = (unsigned char *)*((void *)this + 1);
            unint64_t v11 = *((void *)this + 2);
            if ((unint64_t)v19 < v11 && *v19 == 40)
            {
              uint64_t v12 = v19 + 1;
              *((void *)this + 1) = v12;
LABEL_46:
              v23[0] = 0;
              if ((unint64_t)v12 >= v11 || *v12 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v23);
                if (!result) {
                  return result;
                }
                unsigned int v20 = v23[0];
              }
              else
              {
                unsigned int v20 = *v12;
                *((void *)this + 1) = v12 + 1;
              }
              if (v20 - 1 <= 0xE)
              {
                *(_DWORD *)(a1 + 44) |= 0x10u;
                *(_DWORD *)(a1 + 32) = v20;
              }
              int v21 = (unsigned char *)*((void *)this + 1);
              unint64_t v13 = *((void *)this + 2);
              if ((unint64_t)v21 < v13 && *v21 == 48)
              {
                int v14 = v21 + 1;
                *((void *)this + 1) = v14;
LABEL_56:
                v23[0] = 0;
                if ((unint64_t)v14 >= v13 || *v14 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v23);
                  if (!result) {
                    return result;
                  }
                  unsigned int v22 = v23[0];
                }
                else
                {
                  unsigned int v22 = *v14;
                  *((void *)this + 1) = v14 + 1;
                }
                if (v22 - 1 <= 1)
                {
                  *(_DWORD *)(a1 + 44) |= 0x20u;
                  *(_DWORD *)(a1 + 36) = v22;
                }
                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1;
                  *((unsigned char *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_36;
        }
        goto LABEL_21;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_21;
        }
        int v10 = *(_DWORD *)(a1 + 44);
        goto LABEL_40;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_46;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_21;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_56;
      default:
        int v7 = TagFallback & 7;
LABEL_21:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100242AEC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 32), a2, a4);
    if ((*(_DWORD *)(v5 + 44) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  int v7 = *(_DWORD *)(v5 + 36);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v7, a2, a4);
}

uint64_t sub_100242BCC(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_40;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
    }
    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      unsigned int v4 = 2;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    uint64_t v5 = v4 + 5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    char v9 = v8;
    uint64_t v10 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      uint64_t v10 = *(void *)(v7 + 8);
      int v3 = *(_DWORD *)(a1 + 44);
      char v9 = *(unsigned char *)(v7 + 23);
    }
    else
    {
      int v12 = 1;
    }
    if (v9 < 0) {
      int v8 = v10;
    }
    uint64_t v5 = (v5 + v12 + v8 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_17:
      if ((v3 & 0x20) == 0) {
        goto LABEL_40;
      }
      goto LABEL_34;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_17;
  }
  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v13 & 0x80000000) != 0)
  {
    int v14 = 11;
  }
  else if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    int v14 = 2;
  }
  uint64_t v5 = (v14 + v5);
  if ((v3 & 0x20) != 0)
  {
LABEL_34:
    uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if ((v15 & 0x80000000) != 0)
    {
      int v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    }
    else
    {
      int v16 = 2;
    }
    uint64_t v5 = (v16 + v5);
  }
LABEL_40:
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

void sub_100242D24(uint64_t a1, void *lpsrc)
{
  sub_100242400(a1, (uint64_t)lpsrc);
}

uint64_t sub_100242DAC()
{
  return 1;
}

void *sub_100242DB4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.HomeKitBluetoothRssi");
}

uint64_t sub_100242DC4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022A0460;
  *(void *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  sub_100242E40(a1, a2);
  return a1;
}

void sub_100242E2C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float sub_100242E40(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 72);
  if (!(_BYTE)v5) {
    return *(float *)&v4;
  }
  if (*(unsigned char *)(a2 + 72))
  {
    int v6 = *(_DWORD *)(a2 + 64);
    if ((v6 - 1) >= 6) {
      sub_101A55D54();
    }
    *(_DWORD *)(a1 + 72) |= 1u;
    *(_DWORD *)(a1 + 64) = v6;
    int v5 = *(_DWORD *)(a2 + 72);
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 72) |= 2u;
    *(void *)(a1 + 8) = v4;
    int v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 4) == 0)
    {
LABEL_9:
      if ((v5 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 72) |= 4u;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489958 + 16);
  }
  sub_10023F698(v7, v8);
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_21:
  *(_DWORD *)(a1 + 72) |= 8u;
  uint64_t v9 = *(void *)(a1 + 24);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_102489958 + 24);
  }
  sub_1002411DC(v9, v10);
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_31:
    *(_DWORD *)(a1 + 72) |= 0x20u;
    uint64_t v13 = *(void *)(a1 + 40);
    if (!v13) {
      operator new();
    }
    uint64_t v14 = *(void *)(a2 + 40);
    if (!v14) {
      uint64_t v14 = *(void *)(qword_102489958 + 40);
    }
    sub_100242400(v13, v14);
    int v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_13:
      if ((v5 & 0x80) == 0) {
        return *(float *)&v4;
      }
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_26:
  *(_DWORD *)(a1 + 72) |= 0x10u;
  uint64_t v11 = *(void *)(a1 + 32);
  if (!v11) {
    operator new();
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_102489958 + 32);
  }
  sub_100241A8C(v11, v12);
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0) {
    goto LABEL_31;
  }
LABEL_12:
  if ((v5 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_36:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  uint64_t v15 = *(void *)(a1 + 48);
  if (!v15) {
    operator new();
  }
  uint64_t v16 = *(void *)(a2 + 48);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_102489958 + 48);
  }
  sub_10023E850(v15, v16);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_41:
    *(_DWORD *)(a1 + 72) |= 0x80u;
    uint64_t v17 = *(void *)(a1 + 56);
    if (!v17) {
      operator new();
    }
    uint64_t v18 = *(void *)(a2 + 56);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_102489958 + 56);
    }
    *(float *)&uint64_t v4 = sub_100240468(v17, v18);
  }
  return *(float *)&v4;
}

void sub_10024323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_100243258(void *result)
{
  if ((void *)qword_102489958 != result)
  {
    char v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t result = (void *)v1[7];
    if (result)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v7();
    }
  }
  return result;
}

void sub_1002433A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0460;
  sub_100243258(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002433FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0460;
  sub_100243258(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100243464()
{
}

uint64_t sub_1002434D0(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 72);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 64) = 1;
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 40))
        {
          *(_DWORD *)(v3 + 16) = 1;
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 28) = 0;
          *(void *)(v3 + 20) = 0;
        }
        *(_DWORD *)(v3 + 40) = 0;
        int v2 = *(_DWORD *)(result + 72);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(result + 24);
      if (result)
      {
        uint64_t result = sub_1002414E0(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t result = *(void *)(v1 + 32);
      if (result)
      {
        uint64_t result = sub_100241D40(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      uint64_t result = *(void *)(v1 + 40);
      if (result)
      {
        uint64_t result = sub_1002426DC(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      uint64_t result = *(void *)(v1 + 48);
      if (result)
      {
        uint64_t result = sub_10023ECBC(result);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 56);
      if (result) {
        uint64_t result = sub_100240888(result);
      }
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  return result;
}

uint64_t sub_100243598(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        v68[0] = 0;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68);
          if (!result) {
            return result;
          }
          unsigned int v9 = v68[0];
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 72) |= 1u;
          *(_DWORD *)(a1 + 64) = v9;
        }
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 17)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_35;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_25;
        }
LABEL_35:
        *(void *)unint64_t v68 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v68) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v68;
        }
        int v10 = *(_DWORD *)(a1 + 72) | 2;
        *(_DWORD *)(a1 + 72) = v10;
        uint64_t v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 26) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_39:
        *(_DWORD *)(a1 + 72) = v10 | 4;
        uint64_t v14 = *(void *)(a1 + 16);
        if (!v14) {
          operator new();
        }
        v68[0] = 0;
        uint64_t v15 = (char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v15;
          *((void *)this + 1) = v15 + 1;
        }
        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_10023F8C8(v14, this, v19) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        int v23 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 != 34) {
          continue;
        }
        *((void *)this + 1) = v23 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 72) |= 8u;
        uint64_t v24 = *(void *)(a1 + 24);
        if (!v24) {
          operator new();
        }
        v68[0] = 0;
        int v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v25;
          *((void *)this + 1) = v25 + 1;
        }
        int v26 = *((_DWORD *)this + 14);
        int v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27) {
          return 0;
        }
        int v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100241534(v24, this, v29) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        int v30 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v30, 1);
        int v31 = v30 - 1;
        if (v31 < 0 == v21) {
          *((_DWORD *)this + 14) = v31;
        }
        uint64_t v32 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 != 42) {
          continue;
        }
        *((void *)this + 1) = v32 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 72) |= 0x10u;
        uint64_t v33 = *(void *)(a1 + 32);
        if (!v33) {
          operator new();
        }
        v68[0] = 0;
        uint64_t v34 = (char *)*((void *)this + 1);
        if ((unint64_t)v34 >= *((void *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v34;
          *((void *)this + 1) = v34 + 1;
        }
        int v35 = *((_DWORD *)this + 14);
        int v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36) {
          return 0;
        }
        int v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100241D98(v33, this, v38) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        int v39 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v39, 1);
        int v40 = v39 - 1;
        if (v40 < 0 == v21) {
          *((_DWORD *)this + 14) = v40;
        }
        long long v41 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v41 >= *((void *)this + 2) || *v41 != 50) {
          continue;
        }
        *((void *)this + 1) = v41 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 72) |= 0x20u;
        uint64_t v42 = *(void *)(a1 + 40);
        if (!v42) {
          operator new();
        }
        v68[0] = 0;
        unint64_t v43 = (char *)*((void *)this + 1);
        if ((unint64_t)v43 >= *((void *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v43;
          *((void *)this + 1) = v43 + 1;
        }
        int v44 = *((_DWORD *)this + 14);
        int v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45) {
          return 0;
        }
        int v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100242734(v42, this, v47) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        int v48 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v48, 1);
        int v49 = v48 - 1;
        if (v49 < 0 == v21) {
          *((_DWORD *)this + 14) = v49;
        }
        uint64_t v50 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v50 >= *((void *)this + 2) || *v50 != 58) {
          continue;
        }
        *((void *)this + 1) = v50 + 1;
LABEL_95:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        uint64_t v51 = *(void *)(a1 + 48);
        if (!v51) {
          operator new();
        }
        v68[0] = 0;
        uint64_t v52 = (char *)*((void *)this + 1);
        if ((unint64_t)v52 >= *((void *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v52;
          *((void *)this + 1) = v52 + 1;
        }
        int v53 = *((_DWORD *)this + 14);
        int v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54) {
          return 0;
        }
        int v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_10023ED7C(v51, this, v56) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        int v57 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v57, 1);
        int v58 = v57 - 1;
        if (v58 < 0 == v21) {
          *((_DWORD *)this + 14) = v58;
        }
        uint64_t v59 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v59 >= *((void *)this + 2) || *v59 != 66) {
          continue;
        }
        *((void *)this + 1) = v59 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 72) |= 0x80u;
        uint64_t v60 = *(void *)(a1 + 56);
        if (!v60) {
          operator new();
        }
        v68[0] = 0;
        __int16 v61 = (char *)*((void *)this + 1);
        if ((unint64_t)v61 >= *((void *)this + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v68))return 0; {
        }
          }
        else
        {
          v68[0] = *v61;
          *((void *)this + 1) = v61 + 1;
        }
        int v62 = *((_DWORD *)this + 14);
        int v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63) {
          return 0;
        }
        int v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v68[0]);
        if (!sub_100240908(v60, this, v65) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        int v66 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v66, 1);
        int v67 = v66 - 1;
        if (v67 < 0 == v21) {
          *((_DWORD *)this + 14) = v67;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        int v10 = *(_DWORD *)(a1 + 72);
        goto LABEL_39;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_53;
        }
        goto LABEL_25;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_67;
        }
        goto LABEL_25;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_81;
        }
        goto LABEL_25;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_95;
        }
        goto LABEL_25;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        goto LABEL_109;
      default:
        int v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100243E80(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 64), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_102489958 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v8 = *(void *)(v5 + 24);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489958 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v9 = *(void *)(v5 + 32);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_102489958 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v10 = *(void *)(v5 + 40);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_102489958 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_24:
  uint64_t v11 = *(void *)(v5 + 48);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_102489958 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) != 0)
  {
LABEL_27:
    uint64_t v12 = *(void *)(v5 + 56);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_102489958 + 56);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v12, a2, a4);
  }
  return result;
}

uint64_t sub_100243FF8(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    goto LABEL_57;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 10;
    }
    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      int v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      int v7 = 1;
    }
    unsigned int v4 = v7 + 1;
  }
  else
  {
    unsigned int v4 = 0;
  }
  if ((v3 & 2) != 0) {
    uint64_t v5 = v4 + 9;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_102489958 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10023FCA0(v8, a2);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    }
    else {
      int v11 = 1;
    }
    uint64_t v5 = (v5 + v10 + v11 + 1);
    int v3 = *(_DWORD *)(a1 + 72);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_33;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_102489958 + 24);
  }
  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002418FC(v12, a2);
  int v14 = (int)v13;
  if (v13 >= 0x80) {
    int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
  }
  else {
    int v15 = 1;
  }
  uint64_t v5 = (v5 + v14 + v15 + 1);
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v16 = *(void *)(a1 + 32);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_102489958 + 32);
  }
  int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100242214(v16, a2);
  int v18 = (int)v17;
  if (v17 >= 0x80) {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
  }
  else {
    int v19 = 1;
  }
  uint64_t v5 = (v5 + v18 + v19 + 1);
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x20) == 0)
  {
LABEL_18:
    if ((v3 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_39:
  uint64_t v20 = *(void *)(a1 + 40);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_102489958 + 40);
  }
  BOOL v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100242BCC(v20, a2);
  int v22 = (int)v21;
  if (v21 >= 0x80) {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
  }
  else {
    int v23 = 1;
  }
  uint64_t v5 = (v5 + v22 + v23 + 1);
  int v3 = *(_DWORD *)(a1 + 72);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_51;
  }
LABEL_45:
  uint64_t v24 = *(void *)(a1 + 48);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_102489958 + 48);
  }
  int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10023F32C(v24, a2);
  int v26 = (int)v25;
  if (v25 >= 0x80) {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
  }
  else {
    int v27 = 1;
  }
  uint64_t v5 = (v5 + v26 + v27 + 1);
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
  {
LABEL_51:
    uint64_t v28 = *(void *)(a1 + 56);
    if (!v28) {
      uint64_t v28 = *(void *)(qword_102489958 + 56);
    }
    unsigned int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100240F3C(v28, a2);
    int v31 = (int)v29;
    if (v29 >= 0x80) {
      int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, v30);
    }
    else {
      int v32 = 1;
    }
    uint64_t v5 = (v5 + v31 + v32 + 1);
  }
LABEL_57:
  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

float sub_100244240(uint64_t a1, void *lpsrc)
{
  return sub_100242E40(a1, (uint64_t)lpsrc);
}

float sub_1002442C8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return sub_100242E40(a1, a2);
  }
  return result;
}

uint64_t sub_100244334()
{
  return 1;
}

double sub_10024433C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    int v2 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = v2;
    double result = *(double *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(double *)(a2 + 8) = result;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = v5;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v6;
    uint64_t v7 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = v7;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = v8;
    uint64_t v9 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = v9;
  }
  return result;
}

void *sub_1002443E8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.Measurement");
}

void sub_1002443F8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v7 = *(std::string **)(a1 + 16);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_1002444E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002444F8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

void sub_10024456C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A04D8;
  sub_1002444F8((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002445C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A04D8;
  sub_1002444F8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100244628()
{
}

uint64_t sub_10024467C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1002446C8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_16;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!result) {
            return result;
          }
          uint64_t v12 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v5 = *v11;
          uint64_t v12 = v11 + 1;
          *((void *)this + 1) = v12;
        }
        int v9 = *(_DWORD *)(a1 + 28) | 1;
        *(_DWORD *)(a1 + 28) = v9;
        if ((unint64_t)v12 < v10 && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_16;
      }
      int v9 = *(_DWORD *)(a1 + 28);
LABEL_24:
      *(_DWORD *)(a1 + 28) = v9 | 2;
      if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100244878(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
  return result;
}

uint64_t sub_1002448E4(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if (*(unsigned char *)(a1 + 28))
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      if ((*(_DWORD *)(a1 + 28) & 2) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
        goto LABEL_16;
      }
    }
    uint64_t v4 = *(void *)(a1 + 16);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 23);
    }
    else
    {
      int v9 = 1;
    }
    if (v6 < 0) {
      int v5 = v7;
    }
    uint64_t v3 = (v3 + v9 + v5 + 1);
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_16:
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

void sub_100244998(uint64_t a1, void *lpsrc)
{
  sub_1002443F8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100244A20()
{
  return 1;
}

void *sub_100244A28@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.DeviceId");
}

void sub_100244A38(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 16);
      if ((v6 - 1) >= 6) {
        sub_101A55D80();
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 16) = v6;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 4) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_DWORD *)(a1 + 20) = v7;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      uint64_t v8 = *(void *)(a1 + 24);
      if (!v8) {
        operator new();
      }
      uint64_t v9 = *(void *)(a2 + 24);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_102489968 + 24);
      }
      sub_1002443F8(v8, v9);
    }
  }
}

void sub_100244B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100244BA0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022A0550;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102489968 != this)
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100244C30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100244BA0(a1);

  operator delete();
}

void sub_100244C68()
{
}

uint64_t sub_100244CBC(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 36);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 1;
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(result + 24);
      if (result) {
        uint64_t result = sub_10024467C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100244D00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_22;
        }
        *(void *)int v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v25) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v25;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v9 = (unsigned char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 != 16) {
          continue;
        }
        unint64_t v10 = v9 + 1;
        *((void *)this + 1) = v10;
        goto LABEL_15;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_15:
        v25[0] = 0;
        if ((unint64_t)v10 >= v8 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v11 = v25[0];
        }
        else
        {
          unsigned int v11 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        if (v11 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v11;
        }
        int v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 29) {
          continue;
        }
        *((void *)this + 1) = v14 + 1;
LABEL_32:
        v25[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v25) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 20) = v25[0];
        int v12 = *(_DWORD *)(a1 + 36) | 4;
        *(_DWORD *)(a1 + 36) = v12;
        int v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 != 34) {
          continue;
        }
        *((void *)this + 1) = v15 + 1;
LABEL_36:
        *(_DWORD *)(a1 + 36) = v12 | 8;
        uint64_t v16 = *(void *)(a1 + 24);
        if (!v16) {
          operator new();
        }
        v25[0] = 0;
        int v17 = (char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25))return 0; {
        }
          }
        else
        {
          v25[0] = *v17;
          *((void *)this + 1) = v17 + 1;
        }
        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 < v19)
        {
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25[0]);
          if (sub_1002446C8(v16, this, v21))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
              int v22 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v22, 1);
              int v24 = v22 - 1;
              if (v24 < 0 == v23) {
                *((_DWORD *)this + 14) = v24;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_32;
        }
        goto LABEL_22;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_22;
        }
        int v12 = *(_DWORD *)(a1 + 36);
        goto LABEL_36;
      default:
        int v7 = TagFallback & 7;
LABEL_22:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10024504C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_102489968 + 24);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_100245104(uint64_t a1, unint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    LODWORD(v4) = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        int v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 36);
      }
      else
      {
        int v6 = 2;
      }
      LODWORD(v4) = v6 + v4;
    }
    if ((v3 & 4) != 0) {
      uint64_t v4 = (v4 + 5);
    }
    else {
      uint64_t v4 = v4;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_102489968 + 24);
      }
      unint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002448E4(v7, a2);
      int v10 = (int)v8;
      if (v8 >= 0x80) {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, v9);
      }
      else {
        int v11 = 1;
      }
      uint64_t v4 = (v4 + v10 + v11 + 1);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

void sub_1002451D4(uint64_t a1, void *lpsrc)
{
  sub_100244A38(a1, (uint64_t)lpsrc);
}

void sub_10024525C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100244A38(a1, a2);
  }
}

uint64_t sub_1002452C8()
{
  return 1;
}

void *sub_1002452D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.FingerprintMeasurement");
}

void sub_1002452E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 20);
      uint64_t v7 = *(int *)(a1 + 16);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 20);
        }
        *(_DWORD *)(a1 + 20) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v7 + 1;
      sub_100242E40(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
  sub_10026DF9C((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72), a2 + 72);
  int v9 = *(_DWORD *)(a2 + 104);
  if ((v9 & 0x1FE) == 0) {
    goto LABEL_20;
  }
  if ((v9 & 2) == 0)
  {
    if ((v9 & 4) == 0) {
      goto LABEL_14;
    }
LABEL_24:
    uint64_t v14 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 104) |= 4u;
    *(void *)(a1 + 40) = v14;
    int v9 = *(_DWORD *)(a2 + 104);
    if ((v9 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 104) |= 2u;
  *(void *)(a1 + 32) = v13;
  int v9 = *(_DWORD *)(a2 + 104);
  if ((v9 & 4) != 0) {
    goto LABEL_24;
  }
LABEL_14:
  if ((v9 & 8) != 0)
  {
LABEL_15:
    uint64_t v10 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 104) |= 8u;
    *(void *)(a1 + 48) = v10;
    int v9 = *(_DWORD *)(a2 + 104);
  }
LABEL_16:
  if ((v9 & 0x10) != 0)
  {
    int v15 = *(const std::string **)(a2 + 56);
    *(_DWORD *)(a1 + 104) |= 0x10u;
    uint64_t v16 = *(std::string **)(a1 + 56);
    if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v16, v15);
    int v9 = *(_DWORD *)(a2 + 104);
    if ((v9 & 0x20) == 0)
    {
LABEL_18:
      if ((v9 & 0x80) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else if ((v9 & 0x20) == 0)
  {
    goto LABEL_18;
  }
  int v17 = *(const std::string **)(a2 + 64);
  *(_DWORD *)(a1 + 104) |= 0x20u;
  int v18 = *(std::string **)(a1 + 64);
  if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v18, v17);
  int v9 = *(_DWORD *)(a2 + 104);
  if ((v9 & 0x80) != 0)
  {
LABEL_19:
    char v11 = *(unsigned char *)(a2 + 96);
    *(_DWORD *)(a1 + 104) |= 0x80u;
    *(unsigned char *)(a1 + 96) = v11;
    int v9 = *(_DWORD *)(a2 + 104);
  }
LABEL_20:
  if ((v9 & 0x100) != 0)
  {
    char v12 = *(unsigned char *)(a2 + 97);
    *(_DWORD *)(a1 + 104) |= 0x100u;
    *(unsigned char *)(a1 + 97) = v12;
  }
}

void sub_1002455C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002455DC(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022A05C8;
  uint64_t v2 = a1 + 9;
  sub_10024564C((uint64_t)a1);
  sub_10016B2E8(v2);
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

uint64_t sub_10024564C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = *(void *)(result + 64);
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  return result;
}

void sub_10024570C(uint64_t *a1)
{
  sub_1002455DC(a1);

  operator delete();
}

void sub_100245744()
{
}

uint64_t sub_1002457B8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x1FE) != 0)
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    if ((v2 & 0x10) != 0)
    {
      uint64_t v3 = *(void *)(a1 + 56);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(a1 + 104) & 0x20) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 64);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(a1 + 96) = 0;
    int v2 = *(_DWORD *)(a1 + 104);
  }
  if ((v2 & 0xFF00) != 0) {
    *(unsigned char *)(a1 + 97) = 0;
  }
  sub_10026DEDC(a1 + 8);
  uint64_t result = sub_10026DEDC(a1 + 72);
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t sub_100245880(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  int v6 = (unint64_t *)(a1 + 32);
  uint64_t v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 72);
  while (1)
  {
LABEL_2:
    uint64_t v8 = (char *)*((void *)this + 1);
    if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_45;
        }
        while (1)
        {
          int v11 = *(_DWORD *)(a1 + 20);
          uint64_t v12 = *(int *)(a1 + 16);
          if ((int)v12 >= v11)
          {
            if (v11 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v11 + 1);
              int v11 = *(_DWORD *)(a1 + 20);
            }
            *(_DWORD *)(a1 + 20) = v11 + 1;
            operator new();
          }
          uint64_t v13 = *(void *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v12 + 1;
          uint64_t v14 = *(void *)(v13 + 8 * v12);
          v53[0] = 0;
          int v15 = (char *)*((void *)this + 1);
          if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v53))return 0; {
          }
            }
          else
          {
            v53[0] = *v15;
            *((void *)this + 1) = v15 + 1;
          }
          int v16 = *((_DWORD *)this + 14);
          int v17 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v16 + 1;
          if (v16 >= v17) {
            return 0;
          }
          int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v53[0]);
          if (!sub_100243598(v14, this, v19) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
          int v20 = *((_DWORD *)this + 14);
          BOOL v21 = __OFSUB__(v20, 1);
          int v22 = v20 - 1;
          if (v22 < 0 == v21) {
            *((_DWORD *)this + 14) = v22;
          }
          int v24 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          if ((unint64_t)v24 >= v23) {
            goto LABEL_2;
          }
          int v25 = *v24;
          if (v25 != 10) {
            break;
          }
          *((void *)this + 1) = v24 + 1;
        }
        if (v25 != 16) {
          continue;
        }
        int v26 = (char *)(v24 + 1);
        *((void *)this + 1) = v26;
        goto LABEL_29;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_45;
        }
        int v26 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
LABEL_29:
        if ((unint64_t)v26 >= v23 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!result) {
            return result;
          }
          int v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          *int v6 = *v26;
          int v27 = v26 + 1;
          *((void *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 104) |= 2u;
        if ((unint64_t)v27 >= v23 || *v27 != 25) {
          continue;
        }
        *((void *)this + 1) = v27 + 1;
LABEL_56:
        *(void *)int v53 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v53) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v53;
        }
        *(_DWORD *)(a1 + 104) |= 4u;
        uint64_t v33 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v33 >= *((void *)this + 2) || *v33 != 33) {
          continue;
        }
        *((void *)this + 1) = v33 + 1;
LABEL_60:
        *(void *)int v53 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v53) & 1) == 0)return 0; {
        *(void *)(a1 + 48) = *(void *)v53;
        }
        int v28 = *(_DWORD *)(a1 + 104) | 8;
        *(_DWORD *)(a1 + 104) = v28;
        uint64_t v34 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v34 < *((void *)this + 2) && *v34 == 42)
        {
          *((void *)this + 1) = v34 + 1;
LABEL_64:
          *(_DWORD *)(a1 + 104) = v28 | 0x10;
          if (*(_UNKNOWN **)(a1 + 56) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          int v35 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v35 < *((void *)this + 2) && *v35 == 50)
          {
            *((void *)this + 1) = v35 + 1;
LABEL_70:
            *(_DWORD *)(a1 + 104) |= 0x20u;
            if (*(_UNKNOWN **)(a1 + 64) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!result) {
              return result;
            }
            int v36 = (unsigned char *)*((void *)this + 1);
            if ((unint64_t)v36 < *((void *)this + 2) && *v36 == 58)
            {
              do
              {
                *((void *)this + 1) = v36 + 1;
LABEL_76:
                int v37 = *(_DWORD *)(a1 + 84);
                uint64_t v38 = *(int *)(a1 + 80);
                if ((int)v38 >= v37)
                {
                  if (v37 == *(_DWORD *)(a1 + 88))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v37 + 1);
                    int v37 = *(_DWORD *)(a1 + 84);
                  }
                  *(_DWORD *)(a1 + 84) = v37 + 1;
                  operator new();
                }
                uint64_t v39 = *(void *)(a1 + 72);
                *(_DWORD *)(a1 + 80) = v38 + 1;
                uint64_t v40 = *(void *)(v39 + 8 * v38);
                v53[0] = 0;
                long long v41 = (char *)*((void *)this + 1);
                if ((unint64_t)v41 >= *((void *)this + 2) || *v41 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v53))return 0; {
                }
                  }
                else
                {
                  v53[0] = *v41;
                  *((void *)this + 1) = v41 + 1;
                }
                int v42 = *((_DWORD *)this + 14);
                int v43 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v42 + 1;
                if (v42 >= v43) {
                  return 0;
                }
                int v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v53[0]);
                if (!sub_100244D00(v40, this, v45) || !*((unsigned char *)this + 36)) {
                  return 0;
                }
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v44);
                int v46 = *((_DWORD *)this + 14);
                BOOL v21 = __OFSUB__(v46, 1);
                int v47 = v46 - 1;
                if (v47 < 0 == v21) {
                  *((_DWORD *)this + 14) = v47;
                }
                int v36 = (unsigned char *)*((void *)this + 1);
                unint64_t v29 = *((void *)this + 2);
                if ((unint64_t)v36 >= v29) {
                  goto LABEL_2;
                }
                int v48 = *v36;
              }
              while (v48 == 58);
              if (v48 == 64)
              {
                unsigned int v30 = v36 + 1;
                *((void *)this + 1) = v30;
LABEL_94:
                v53[0] = 0;
                if ((unint64_t)v30 >= v29 || *v30 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v53);
                  if (!result) {
                    return result;
                  }
                  unsigned int v49 = v53[0];
                  uint64_t v50 = (unsigned char *)*((void *)this + 1);
                  unint64_t v29 = *((void *)this + 2);
                }
                else
                {
                  unsigned int v49 = *v30;
                  uint64_t v50 = v30 + 1;
                  *((void *)this + 1) = v50;
                }
                *(unsigned char *)(a1 + 96) = v49 != 0;
                *(_DWORD *)(a1 + 104) |= 0x80u;
                if ((unint64_t)v50 < v29 && *v50 == 72)
                {
                  int v31 = v50 + 1;
                  *((void *)this + 1) = v31;
LABEL_102:
                  v53[0] = 0;
                  if ((unint64_t)v31 >= v29 || *v31 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v53);
                    if (!result) {
                      return result;
                    }
                    unsigned int v51 = v53[0];
                    uint64_t v52 = (unsigned __int8 *)*((void *)this + 1);
                    unint64_t v29 = *((void *)this + 2);
                  }
                  else
                  {
                    unsigned int v51 = *v31;
                    uint64_t v52 = (unsigned __int8 *)(v31 + 1);
                    *((void *)this + 1) = v52;
                  }
                  *(unsigned char *)(a1 + 97) = v51 != 0;
                  *(_DWORD *)(a1 + 104) |= 0x100u;
                  if (v52 == (unsigned __int8 *)v29
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    uint64_t result = 1;
                    *((unsigned char *)this + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if (v10 == 1) {
          goto LABEL_56;
        }
        goto LABEL_45;
      case 4u:
        int v10 = TagFallback & 7;
        if (v10 == 1) {
          goto LABEL_60;
        }
        goto LABEL_45;
      case 5u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_45;
        }
        int v28 = *(_DWORD *)(a1 + 104);
        goto LABEL_64;
      case 6u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_70;
        }
        goto LABEL_45;
      case 7u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_76;
        }
        goto LABEL_45;
      case 8u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_45;
        }
        unsigned int v30 = (char *)*((void *)this + 1);
        unint64_t v29 = *((void *)this + 2);
        goto LABEL_94;
      case 9u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_45;
        }
        int v31 = (char *)*((void *)this + 1);
        unint64_t v29 = *((void *)this + 2);
        goto LABEL_102;
      default:
        int v10 = TagFallback & 7;
LABEL_45:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100245FCC(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  int v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 2) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 32), (unint64_t)a2, a4);
    int v7 = *(_DWORD *)(v5 + 104);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 40), a3);
  int v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, *(double *)(v5 + 48), a3);
  int v7 = *(_DWORD *)(v5 + 104);
  if ((v7 & 0x10) == 0)
  {
LABEL_8:
    if ((v7 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 104) & 0x20) != 0) {
LABEL_9:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
LABEL_10:
  if (*(int *)(v5 + 80) >= 1)
  {
    uint64_t v8 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(void *)(*(void *)(v5 + 72) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 80));
  }
  int v9 = *(_DWORD *)(v5 + 104);
  if ((v9 & 0x80) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 96), (BOOL)a2, a4);
    int v9 = *(_DWORD *)(v5 + 104);
  }
  if ((v9 & 0x100) != 0)
  {
    int v10 = *(unsigned __int8 *)(v5 + 97);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v10, (BOOL)a2, a4);
  }
  return result;
}

uint64_t sub_100246138(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 104);
  if ((v3 & 0x1FE) != 0)
  {
    if ((v3 & 2) != 0)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 104);
    }
    else
    {
      int v4 = 0;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      int v6 = v4 + 9;
    }
    else {
      int v6 = v4;
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      char v9 = v8;
      uint64_t v10 = *(void *)(v7 + 8);
      if ((v8 & 0x80u) == 0) {
        unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
        int v8 = *(unsigned __int8 *)(v7 + 23);
        uint64_t v10 = *(void *)(v7 + 8);
        int v3 = *(_DWORD *)(a1 + 104);
        char v9 = *(unsigned char *)(v7 + 23);
      }
      else
      {
        int v12 = 1;
      }
      if (v9 < 0) {
        int v8 = v10;
      }
      v6 += v12 + v8 + 1;
    }
    if ((v3 & 0x20) != 0)
    {
      uint64_t v13 = *(void *)(a1 + 64);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      char v15 = v14;
      uint64_t v16 = *(void *)(v13 + 8);
      if ((v14 & 0x80u) == 0) {
        unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17 >= 0x80)
      {
        int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
        int v14 = *(unsigned __int8 *)(v13 + 23);
        uint64_t v16 = *(void *)(v13 + 8);
        int v3 = *(_DWORD *)(a1 + 104);
        char v15 = *(unsigned char *)(v13 + 23);
      }
      else
      {
        int v18 = 1;
      }
      if (v15 < 0) {
        int v14 = v16;
      }
      v6 += v18 + v14 + 1;
    }
    int v5 = v6 + 2;
    if ((v3 & 0x80) == 0) {
      int v5 = v6;
    }
  }
  else
  {
    int v5 = 0;
  }
  if ((v3 & 0x100) != 0) {
    int v19 = v5 + 2;
  }
  else {
    int v19 = v5;
  }
  int v20 = *(_DWORD *)(a1 + 16);
  int v21 = v19 + v20;
  if (v20 >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      unint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100243FF8(*(void *)(*(void *)(a1 + 8) + 8 * v22), a2);
      int v24 = (int)v23;
      if (v23 >= 0x80) {
        int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      }
      else {
        int v25 = 1;
      }
      v21 += v24 + v25;
      ++v22;
    }
    while (v22 < *(int *)(a1 + 16));
  }
  int v26 = *(_DWORD *)(a1 + 80);
  uint64_t v27 = (v26 + v21);
  if (v26 >= 1)
  {
    uint64_t v28 = 0;
    do
    {
      unint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100245104(*(void *)(*(void *)(a1 + 72) + 8 * v28), a2);
      int v30 = (int)v29;
      if (v29 >= 0x80) {
        int v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
      }
      else {
        int v31 = 1;
      }
      uint64_t v27 = (v30 + v27 + v31);
      ++v28;
    }
    while (v28 < *(int *)(a1 + 80));
  }
  *(_DWORD *)(a1 + 100) = v27;
  return v27;
}

void sub_100246320(uint64_t a1, void *lpsrc)
{
  sub_1002452E0(a1, (uint64_t)lpsrc);
}

void sub_1002463A8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_1002452E0(a1, a2);
  }
}

uint64_t sub_100246414()
{
  return 1;
}

void *sub_10024641C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.Fingerprint");
}

std::string *sub_10024642C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  uint64_t result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = *(const std::string **)(*(void *)(a2 + 16) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 28);
      uint64_t v8 = *(int *)(a1 + 24);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 32))
        {
          uint64_t result = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v7 + 1);
          int v7 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v7 + 1;
        uint64_t v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v12 = *(int *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 16);
        *(_DWORD *)(a1 + 24) = v8 + 1;
        uint64_t v10 = *(std::string **)(v9 + 8 * v8);
      }
      uint64_t result = std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 24));
  }
  if (*(unsigned char *)(a2 + 44))
  {
    uint64_t v13 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 44) |= 1u;
    int v14 = *(std::string **)(a1 + 8);
    if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    return std::string::operator=(v14, v13);
  }
  return result;
}

void sub_1002465AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002465C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0640;
  uint64_t v2 = (int *)((char *)a1 + 16);
  sub_1001A4D20((uint64_t)a1);
  sub_10026E0AC(v2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10024662C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1002465C4(a1);

  operator delete();
}

void sub_100246664()
{
}

uint64_t sub_1002466C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v2 = 0;
        *(unsigned char *)(v2 + 23) = 0;
      }
    }
  }
  uint64_t result = sub_10026DF4C(a1 + 16);
  *(_DWORD *)(a1 + 44) = 0;
  return result;
}

uint64_t sub_100246728(uint64_t result, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          int v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
          *((_DWORD *)this + 8) = result;
          if (!result) {
            return 1;
          }
        }
        else
        {
          int v7 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = v7;
          *((void *)this + 1) = v6 + 1;
          if (!v7) {
            return 1;
          }
        }
        if (v7 >> 3 != 1) {
          break;
        }
        int v8 = v7 & 7;
        if (v8 != 2) {
          goto LABEL_19;
        }
        *(_DWORD *)(v4 + 44) |= 1u;
        if (*(_UNKNOWN **)(v4 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        uint64_t v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 18) {
          goto LABEL_22;
        }
      }
      if (v7 >> 3 != 2) {
        break;
      }
      int v8 = v7 & 7;
      if (v8 != 2) {
        goto LABEL_19;
      }
      while (1)
      {
        int v10 = *(_DWORD *)(v4 + 28);
        int v11 = *(_DWORD *)(v4 + 24);
        if (v11 >= v10)
        {
          if (v10 == *(_DWORD *)(v4 + 32))
          {
            uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v10 + 1);
            int v10 = *(_DWORD *)(v4 + 28);
          }
          *(_DWORD *)(v4 + 28) = v10 + 1;
          uint64_t v12 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
          uint64_t v13 = *(void *)(v4 + 16);
          uint64_t v14 = *(int *)(v4 + 24);
          *(_DWORD *)(v4 + 24) = v14 + 1;
          *(void *)(v13 + 8 * v14) = v12;
        }
        else
        {
          *(_DWORD *)(v4 + 24) = v11 + 1;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        uint64_t v9 = (unsigned char *)*((void *)this + 1);
        char v15 = (unsigned char *)*((void *)this + 2);
        if (v9 >= v15 || *v9 != 18) {
          break;
        }
LABEL_22:
        *((void *)this + 1) = v9 + 1;
      }
      if (v9 == v15 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = v7 & 7;
LABEL_19:
    if (v8 == 4) {
      return 1;
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, v7, a3);
    if ((result & 1) == 0) {
      return 0;
    }
  }
}

uint64_t sub_100246920(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 44)) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
  if (*(int *)(v1 + 24) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  return result;
}

uint64_t sub_100246998(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      int v9 = v10 + 1;
      char v6 = *(unsigned char *)(v4 + 23);
    }
    else
    {
      int v9 = 2;
    }
    if (v6 < 0) {
      int v5 = v7;
    }
    int v3 = v9 + v5;
  }
  else
  {
    int v3 = 0;
  }
  int v11 = *(_DWORD *)(a1 + 24);
  uint64_t v12 = (v11 + v3);
  if (v11 >= 1)
  {
    for (uint64_t i = 0; i < v11; ++i)
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 8 * i);
      int v15 = *(unsigned __int8 *)(v14 + 23);
      char v16 = v15;
      uint64_t v17 = *(void *)(v14 + 8);
      if ((v15 & 0x80u) == 0) {
        unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18 >= 0x80)
      {
        int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
        int v15 = *(unsigned __int8 *)(v14 + 23);
        uint64_t v17 = *(void *)(v14 + 8);
        int v11 = *(_DWORD *)(a1 + 24);
        char v16 = *(unsigned char *)(v14 + 23);
      }
      else
      {
        int v19 = 1;
      }
      if (v16 < 0) {
        int v15 = v17;
      }
      uint64_t v12 = (v19 + v12 + v15);
    }
  }
  *(_DWORD *)(a1 + 40) = v12;
  return v12;
}

std::string *sub_100246A98(uint64_t a1, void *lpsrc)
{
  return sub_10024642C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100246B20()
{
  return 1;
}

void *sub_100246B28@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ClusterRecordings");
}

void sub_100246B38(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 48) |= 1u;
    *(void *)(a1 + 8) = v5;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 48) |= 2u;
  *(void *)(a1 + 16) = v6;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_14:
  int v7 = *(_DWORD *)(a2 + 24);
  if ((v7 - 1) >= 2) {
    sub_101A55DD8();
  }
  *(_DWORD *)(a1 + 48) |= 4u;
  *(_DWORD *)(a1 + 24) = v7;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    char v9 = *(unsigned char *)(a2 + 29);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(unsigned char *)(a1 + 29) = v9;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_10:
      if ((v4 & 0x40) == 0) {
        return;
      }
      goto LABEL_20;
    }
    goto LABEL_18;
  }
LABEL_16:
  char v8 = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 48) |= 8u;
  *(unsigned char *)(a1 + 28) = v8;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if ((v4 & 0x20) == 0) {
    goto LABEL_10;
  }
LABEL_18:
  int v10 = *(_DWORD *)(a2 + 40);
  if ((v10 - 1) >= 6) {
    sub_101A55DAC();
  }
  *(_DWORD *)(a1 + 48) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v10;
  if ((*(_DWORD *)(a2 + 48) & 0x40) != 0)
  {
LABEL_20:
    int v11 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x40u;
    uint64_t v12 = *(std::string **)(a1 + 32);
    if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v12, v11);
  }
}

void sub_100246CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100246D00(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

void sub_100246D74(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A06B8;
  sub_100246D00((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100246DC8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A06B8;
  sub_100246D00((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100246E30()
{
}

uint64_t sub_100246EA4(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 48);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 1;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 40) = 1;
    if ((v1 & 0x40) != 0)
    {
      uint64_t v2 = *(void *)(result + 32);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_100246F00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_30;
        }
        *(void *)int v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v25) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v25;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        char v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 != 17) {
          continue;
        }
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_30;
        }
LABEL_14:
        *(void *)int v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v25) & 1) == 0)return 0; {
        *(void *)(a1 + 16) = *(void *)v25;
        }
        *(_DWORD *)(a1 + 48) |= 2u;
        int v10 = (unsigned char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 != 24) {
          continue;
        }
        int v11 = v10 + 1;
        *((void *)this + 1) = v11;
LABEL_20:
        v25[0] = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v12 = v25[0];
        }
        else
        {
          unsigned int v12 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v12 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 48) |= 4u;
          *(_DWORD *)(a1 + 24) = v12;
        }
        unint64_t v18 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v18 >= v13 || *v18 != 32) {
          continue;
        }
        uint64_t v14 = v18 + 1;
        *((void *)this + 1) = v14;
LABEL_40:
        v25[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v19 = v25[0];
          int v20 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          unsigned int v19 = *v14;
          int v20 = v14 + 1;
          *((void *)this + 1) = v20;
        }
        *(unsigned char *)(a1 + 28) = v19 != 0;
        *(_DWORD *)(a1 + 48) |= 8u;
        if ((unint64_t)v20 >= v13 || *v20 != 40) {
          continue;
        }
        int v15 = v20 + 1;
        *((void *)this + 1) = v15;
LABEL_48:
        v25[0] = 0;
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v21 = v25[0];
          uint64_t v22 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }
        else
        {
          unsigned int v21 = *v15;
          uint64_t v22 = v15 + 1;
          *((void *)this + 1) = v22;
        }
        *(unsigned char *)(a1 + 29) = v21 != 0;
        *(_DWORD *)(a1 + 48) |= 0x10u;
        if ((unint64_t)v22 >= v13 || *v22 != 48) {
          continue;
        }
        char v16 = v22 + 1;
        *((void *)this + 1) = v16;
LABEL_56:
        v25[0] = 0;
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v23 = v25[0];
        }
        else
        {
          unsigned int v23 = *v16;
          *((void *)this + 1) = v16 + 1;
        }
        if (v23 - 1 <= 5)
        {
          *(_DWORD *)(a1 + 48) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v23;
        }
        int v24 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v24 >= *((void *)this + 2) || *v24 != 58) {
          continue;
        }
        *((void *)this + 1) = v24 + 1;
LABEL_66:
        *(_DWORD *)(a1 + 48) |= 0x40u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_30;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_20;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_30;
        }
        uint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_40;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_30;
        }
        int v15 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_48;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_30;
        }
        char v16 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_56;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_30;
        }
        goto LABEL_66;
      default:
        int v7 = TagFallback & 7;
LABEL_30:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100247334(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), a2, a4);
    if ((*(_DWORD *)(v5 + 48) & 0x40) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    return result;
  }
LABEL_15:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t sub_100247430(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48))
  {
    if ((v3 & 2) != 0) {
      int v4 = ((v3 << 31 >> 31) & 9) + 9;
    }
    else {
      int v4 = (v3 << 31 >> 31) & 9;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
      if ((v5 & 0x80000000) != 0)
      {
        int v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        int v6 = 2;
      }
      v4 += v6;
    }
    unsigned int v8 = v4 + 2;
    if ((v3 & 8) == 0) {
      unsigned int v8 = v4;
    }
    if ((v3 & 0x10) != 0) {
      uint64_t v7 = v8 + 2;
    }
    else {
      uint64_t v7 = v8;
    }
    if ((v3 & 0x20) != 0)
    {
      unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
      if ((v9 & 0x80000000) != 0)
      {
        int v10 = 11;
      }
      else if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        int v10 = 2;
      }
      uint64_t v7 = (v10 + v7);
    }
    if ((v3 & 0x40) != 0)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = *(unsigned __int8 *)(v11 + 23);
      char v13 = v12;
      uint64_t v14 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        unint64_t v15 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15 >= 0x80)
      {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15, a2);
        int v12 = *(unsigned __int8 *)(v11 + 23);
        uint64_t v14 = *(void *)(v11 + 8);
        char v13 = *(unsigned char *)(v11 + 23);
      }
      else
      {
        int v16 = 1;
      }
      if (v13 < 0) {
        int v12 = v14;
      }
      uint64_t v7 = (v7 + v16 + v12 + 1);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 44) = v7;
  return v7;
}

void sub_10024755C(uint64_t a1, void *lpsrc)
{
  sub_100246B38(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002475E4()
{
  return 1;
}

void *sub_1002475EC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.AnchorMetadata");
}

void sub_1002475FC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 40);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((*(unsigned char *)(a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v6 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 2u;
    *(void *)(a1 + 16) = v6;
    int v4 = *(_DWORD *)(a2 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_12;
    }
LABEL_11:
    int v7 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 32) = v7;
    if ((*(_DWORD *)(a2 + 40) & 8) == 0) {
      return;
    }
LABEL_12:
    unsigned int v8 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 8u;
    unint64_t v9 = *(std::string **)(a1 + 24);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v9, v8);
  }
}

void sub_10024772C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100247744(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0730;
  sub_100241350((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100247798(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0730;
  sub_100241350((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100247800()
{
}

uint64_t sub_10024785C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_1002478AC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 32);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_26;
        }
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v16;
        *(_DWORD *)(a1 + 40) |= 1u;
        unint64_t v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 != 17) {
          continue;
        }
        *((void *)this + 1) = v9 + 1;
        goto LABEL_15;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_26;
        }
LABEL_15:
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v11 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 != 24) {
          continue;
        }
        int v12 = v11 + 1;
        *((void *)this + 1) = v12;
LABEL_21:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          char v13 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v5 = *v12;
          char v13 = v12 + 1;
          *((void *)this + 1) = v13;
        }
        int v14 = *(_DWORD *)(a1 + 40) | 4;
        *(_DWORD *)(a1 + 40) = v14;
        if ((unint64_t)v13 >= v10 || *v13 != 34) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 40) = v14 | 8;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_21;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v14 = *(_DWORD *)(a1 + 40);
        goto LABEL_34;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100247B44(uint64_t result, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 32), a2, a4);
      if ((*(_DWORD *)(v5 + 40) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_100247BEC(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 4) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        int v7 = 2;
      }
      uint64_t v5 = (v7 + v5);
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 24);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      char v10 = v9;
      uint64_t v11 = *(void *)(v8 + 8);
      if ((v9 & 0x80u) == 0) {
        unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12 >= 0x80)
      {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
        int v9 = *(unsigned __int8 *)(v8 + 23);
        uint64_t v11 = *(void *)(v8 + 8);
        char v10 = *(unsigned char *)(v8 + 23);
      }
      else
      {
        int v13 = 1;
      }
      if (v10 < 0) {
        int v9 = v11;
      }
      uint64_t v5 = (v5 + v13 + v9 + 1);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 36) = v5;
  return v5;
}

void sub_100247CC0(uint64_t a1, void *lpsrc)
{
  sub_1002475FC(a1, (uint64_t)lpsrc);
}

void sub_100247D48(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_1002475FC(a1, a2);
  }
}

uint64_t sub_100247DB4()
{
  return 1;
}

void *sub_100247DBC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.AnchorAppearance");
}

void sub_100247DCC(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_1002475FC(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
}

void sub_100247F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100247F50(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022A07A8;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100247FAC(uint64_t *a1)
{
  sub_100247F50(a1);

  operator delete();
}

void sub_100247FE4()
{
}

uint64_t sub_100248038(uint64_t a1)
{
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_100248064(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
    }
    if (TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        uint64_t v10 = *((void *)a1 + 1);
        a1[4] = v9 + 1;
        uint64_t v11 = *(void *)(v10 + 8 * v9);
        unsigned int v23 = 0;
        unint64_t v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0; {
        }
          }
        else
        {
          unsigned int v23 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        int v13 = *((_DWORD *)this + 14);
        int v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        int v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_1002478AC(v11, this, v16) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        int v20 = (unsigned char *)*((void *)this + 1);
        unsigned int v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((void *)this + 1) = v20 + 1;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10024829C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_1002482FC(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100247BEC(*(void *)(*(void *)(a1 + 8) + 8 * v4), a2);
      int v6 = (int)v5;
      if (v5 >= 0x80) {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      }
      else {
        int v7 = 1;
      }
      uint64_t v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_10024837C(_DWORD *a1, void *lpsrc)
{
  sub_100247DCC(a1, (uint64_t)lpsrc);
}

void sub_100248404(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(void *)a1 + 32))(a1);
    sub_100247DCC(a1, a2);
  }
}

uint64_t sub_100248470()
{
  return 1;
}

void *sub_100248478@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.anchorAppearancesVector");
}

void sub_100248488(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v6 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(void *)(a1 + 16) = v6;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return;
    }
LABEL_10:
    int v7 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    int v8 = *(std::string **)(a1 + 24);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v8, v7);
  }
}

void sub_100248598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002485B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0820;
  sub_100241350((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100248604(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0820;
  sub_100241350((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10024866C()
{
}

uint64_t sub_1002486C4(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 36);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100248710(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_29;
        }
        unint64_t v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v13;
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 17)
        {
          *((void *)this + 1) = v10 + 1;
          goto LABEL_17;
        }
      }
      if (v7 == 2) {
        break;
      }
      if (v7 == 3)
      {
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          int v9 = *(_DWORD *)(a1 + 36);
          goto LABEL_21;
        }
      }
      else
      {
        int v8 = TagFallback & 7;
      }
LABEL_29:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    int v8 = TagFallback & 7;
    if (v8 != 1) {
      goto LABEL_29;
    }
LABEL_17:
    unint64_t v13 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 16) = v13;
    int v9 = *(_DWORD *)(a1 + 36) | 2;
    *(_DWORD *)(a1 + 36) = v9;
    uint64_t v11 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 26)
    {
      *((void *)this + 1) = v11 + 1;
LABEL_21:
      *(_DWORD *)(a1 + 36) = v9 | 4;
      if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_10024890C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_100248998(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        char v8 = *(unsigned char *)(v6 + 23);
      }
      else
      {
        int v11 = 1;
      }
      if (v8 < 0) {
        int v7 = v9;
      }
      uint64_t v5 = (v5 + v11 + v7 + 1);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_100248A44(uint64_t a1, void *lpsrc)
{
  sub_100248488(a1, (uint64_t)lpsrc);
}

uint64_t sub_100248ACC()
{
  return 1;
}

void *sub_100248AD4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.AnchorValueStatistics");
}

void sub_100248AE4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 20);
      uint64_t v7 = *(int *)(a1 + 16);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 24))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 20);
        }
        *(_DWORD *)(a1 + 20) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v7 + 1;
      sub_100248488(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
  if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    uint64_t v9 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 2u;
    unint64_t v10 = *(std::string **)(a1 + 32);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v10, v9);
  }
}

void sub_100248C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100248CB4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0898;
  uint64_t v2 = (uint64_t *)((char *)a1 + 8);
  sub_100246D00((uint64_t)a1);
  sub_10016B2E8(v2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100248D1C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100248CB4(a1);

  operator delete();
}

void sub_100248D54()
{
}

uint64_t sub_100248DB0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v2 = 0;
        *(unsigned char *)(v2 + 23) = 0;
      }
    }
  }
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 44) = 0;
  return result;
}

uint64_t sub_100248E18(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  do
  {
    while (1)
    {
LABEL_2:
      int v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2)
      {
        while (1)
        {
          int v10 = *(_DWORD *)(a1 + 20);
          uint64_t v11 = *(int *)(a1 + 16);
          if ((int)v11 >= v10)
          {
            if (v10 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v10 + 1);
              int v10 = *(_DWORD *)(a1 + 20);
            }
            *(_DWORD *)(a1 + 20) = v10 + 1;
            operator new();
          }
          uint64_t v12 = *(void *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v11 + 1;
          uint64_t v13 = *(void *)(v12 + 8 * v11);
          unsigned int v24 = 0;
          int v14 = (char *)*((void *)this + 1);
          if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24))return 0; {
          }
            }
          else
          {
            unsigned int v24 = *v14;
            *((void *)this + 1) = v14 + 1;
          }
          int v15 = *((_DWORD *)this + 14);
          int v16 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v15 + 1;
          if (v15 >= v16) {
            return 0;
          }
          int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v24);
          if (!sub_100248710(v13, this, v18) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
          int v19 = *((_DWORD *)this + 14);
          BOOL v20 = __OFSUB__(v19, 1);
          int v21 = v19 - 1;
          if (v21 < 0 == v20) {
            *((_DWORD *)this + 14) = v21;
          }
          uint64_t v22 = (unsigned __int8 *)*((void *)this + 1);
          if ((unint64_t)v22 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v23 = *v22;
          if (v23 != 10)
          {
            if (v23 != 18) {
              goto LABEL_2;
            }
            *((void *)this + 1) = v22 + 1;
            goto LABEL_10;
          }
          *((void *)this + 1) = v22 + 1;
        }
      }
LABEL_36:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    if (TagFallback >> 3 != 2)
    {
      int v8 = TagFallback & 7;
      goto LABEL_36;
    }
    int v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_36;
    }
LABEL_10:
    *(_DWORD *)(a1 + 44) |= 2u;
    if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
    if (!result) {
      return result;
    }
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_1002490E0(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(unsigned char *)(v5 + 44) & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
  return result;
}

uint64_t sub_100249174(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      int v9 = v10 + 1;
      char v6 = *(unsigned char *)(v4 + 23);
    }
    else
    {
      int v9 = 2;
    }
    if (v6 < 0) {
      int v5 = v7;
    }
    int v3 = v9 + v5;
  }
  else
  {
    int v3 = 0;
  }
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = (v11 + v3);
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100248998(*(void *)(*(void *)(a1 + 8) + 8 * v13), a2);
      int v15 = (int)v14;
      if (v14 >= 0x80) {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
      }
      else {
        int v16 = 1;
      }
      uint64_t v12 = (v15 + v12 + v16);
      ++v13;
    }
    while (v13 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 40) = v12;
  return v12;
}

void sub_100249254(uint64_t a1, void *lpsrc)
{
  sub_100248AE4(a1, (uint64_t)lpsrc);
}

uint64_t sub_1002492DC()
{
  return 1;
}

void *sub_1002492E4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ClusterAnchorValueStatistics");
}

void sub_1002492F4(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100248AE4(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
}

void sub_100249460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100249478(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022A0910;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1002494D4(uint64_t *a1)
{
  sub_100249478(a1);

  operator delete();
}

void sub_10024950C()
{
}

uint64_t sub_100249560(uint64_t a1)
{
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_10024958C(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
    }
    if (TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }
          a1[5] = v8 + 1;
          operator new();
        }
        uint64_t v10 = *((void *)a1 + 1);
        a1[4] = v9 + 1;
        uint64_t v11 = *(void *)(v10 + 8 * v9);
        unsigned int v23 = 0;
        uint64_t v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0; {
        }
          }
        else
        {
          unsigned int v23 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        int v13 = *((_DWORD *)this + 14);
        int v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        int v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_100248E18(v11, this, v16) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        BOOL v20 = (unsigned char *)*((void *)this + 1);
        int v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((void *)this + 1) = v20 + 1;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_1002497C4(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100249824(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100249174(*(void *)(*(void *)(a1 + 8) + 8 * v4), a2);
      int v6 = (int)v5;
      if (v5 >= 0x80) {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      }
      else {
        int v7 = 1;
      }
      uint64_t v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_1002498A4(_DWORD *a1, void *lpsrc)
{
  sub_1002492F4(a1, (uint64_t)lpsrc);
}

void sub_10024992C(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(void *)a1 + 32))(a1);
    sub_1002492F4(a1, a2);
  }
}

uint64_t sub_100249998()
{
  return 1;
}

void *sub_1002499A0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ClusterAnchorValueStatisticsVector");
}

void sub_1002499B0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    sub_10026DE30(a1 + 16, *(_DWORD *)(a1 + 24) + v4);
    memcpy((void *)(*(void *)(a1 + 16) + 8 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 8 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  if (*(unsigned char *)(a2 + 36))
  {
    uint64_t v5 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 36) |= 1u;
    int v6 = *(std::string **)(a1 + 8);
    if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v6, v5);
  }
}

void sub_100249ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100249AD4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0988;
  sub_1001A4D20((uint64_t)a1);
  if (*((void *)a1 + 2)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100249B48(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100249AD4(a1);

  operator delete();
}

void sub_100249B80()
{
}

uint64_t sub_100249BD8(uint64_t result)
{
  if (*(unsigned char *)(result + 36))
  {
    uint64_t v1 = *(void *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(unsigned char **)uint64_t v1 = 0;
        *(void *)(v1 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v1 = 0;
        *(unsigned char *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100249C20(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      int v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_21;
      }
      *(_DWORD *)(a1 + 36) |= 1u;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!result) {
        return result;
      }
      uint64_t v10 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 17)
      {
        do
        {
          *((void *)this + 1) = v10 + 1;
LABEL_25:
          v22[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, v22) & 1) == 0) {
            return 0;
          }
          unint64_t v11 = v22[0];
          int v12 = *(_DWORD *)(a1 + 24);
          if (v12 == *(_DWORD *)(a1 + 28))
          {
            sub_10026DE30(v5, v12 + 1);
            int v12 = *(_DWORD *)(a1 + 24);
          }
          uint64_t v13 = *(void *)(a1 + 16);
          int v14 = v12 + 1;
          *(_DWORD *)(a1 + 24) = v12 + 1;
          *(void *)(v13 + 8 * v12) = v11;
          uint64_t v15 = *((void *)this + 1);
          int v16 = *((_DWORD *)this + 4) - v15;
          if (v16 >= 1)
          {
            signed int v17 = v16 / 9u;
            int v18 = v17 >= *(_DWORD *)(a1 + 28) - v14 ? *(_DWORD *)(a1 + 28) - v14 : v17;
            if (v18 >= 1)
            {
              int v19 = 0;
              while (*(unsigned char *)v15 == 17)
              {
                uint64_t v20 = *(void *)(v15 + 1);
                if (v14 >= *(_DWORD *)(a1 + 28))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
                  int v14 = *(_DWORD *)(a1 + 24);
                  uint64_t v13 = *(void *)(a1 + 16);
                }
                *(_DWORD *)(a1 + 24) = v14 + 1;
                *(void *)(v13 + 8 * v14) = v20;
                ++v19;
                v15 += 9;
                ++v14;
                if (v18 == v19)
                {
                  int v19 = v18;
                  break;
                }
              }
              if (v19) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v19);
              }
            }
          }
LABEL_41:
          uint64_t v10 = (unsigned char *)*((void *)this + 1);
          int v21 = (unsigned char *)*((void *)this + 2);
        }
        while (v10 < v21 && *v10 == 17);
        if (v10 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2) {
      break;
    }
    int v8 = TagFallback & 7;
LABEL_21:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  int v8 = TagFallback & 7;
  if (v8 == 1) {
    goto LABEL_25;
  }
  if (v8 != 2) {
    goto LABEL_21;
  }
  uint64_t result = sub_100249F20(this, v5);
  if (result) {
    goto LABEL_41;
  }
  return result;
}

void sub_100249F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100249F20(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  unsigned int v11 = 0;
  int v4 = (char *)*((void *)this + 1);
  if ((unint64_t)v4 >= *((void *)this + 2) || *v4 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v11);
    if (!result) {
      return result;
    }
    unsigned int v5 = v11;
  }
  else
  {
    unsigned int v5 = *v4;
    unsigned int v11 = v5;
    *((void *)this + 1) = v4 + 1;
  }
  int v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_11:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1;
  }
  else
  {
    while (1)
    {
      unint64_t v12 = 0;
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12);
      if (!result) {
        break;
      }
      unint64_t v8 = v12;
      int v9 = *(_DWORD *)(a2 + 8);
      if (v9 == *(_DWORD *)(a2 + 12))
      {
        sub_10026DE30(a2, v9 + 1);
        int v9 = *(_DWORD *)(a2 + 8);
      }
      uint64_t v10 = *(void *)a2;
      *(_DWORD *)(a2 + 8) = v9 + 1;
      *(void *)(v10 + 8 * v9) = v8;
      if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) <= 0) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t sub_10024A01C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  if (*(unsigned char *)(result + 36)) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
  if (*(int *)(v4 + 24) >= 1)
  {
    uint64_t v5 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(*(void *)(v4 + 16) + 8 * v5++), a3);
    while (v5 < *(int *)(v4 + 24));
  }
  return result;
}

uint64_t sub_10024A094(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v5 = *(unsigned __int8 *)(v4 + 23);
    char v6 = v5;
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8, a2);
      int v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v7 = *(void *)(v4 + 8);
      int v9 = v10 + 1;
      char v6 = *(unsigned char *)(v4 + 23);
    }
    else
    {
      int v9 = 2;
    }
    if (v6 < 0) {
      int v5 = v7;
    }
    int v3 = v9 + v5;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t result = (9 * *(_DWORD *)(a1 + 24) + v3);
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_10024A120(uint64_t a1, void *lpsrc)
{
  sub_1002499B0(a1, (uint64_t)lpsrc);
}

uint64_t sub_10024A1A8()
{
  return 1;
}

void *sub_10024A1B0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.LocationSimilarityListElement");
}

void sub_10024A1C0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  uint64_t v4 = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), *(_DWORD *)(a2 + 16) + *(_DWORD *)(a1 + 16));
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      char v6 = *(const std::string **)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = *(_DWORD *)(a1 + 20);
      uint64_t v8 = *(int *)(a1 + 16);
      if ((int)v8 >= v7)
      {
        if (v7 == *(_DWORD *)(a1 + 24))
        {
          uint64_t v4 = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), v7 + 1);
          int v7 = *(_DWORD *)(a1 + 20);
        }
        *(_DWORD *)(a1 + 20) = v7 + 1;
        int v10 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)v4);
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(int *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 8);
        *(_DWORD *)(a1 + 16) = v8 + 1;
        int v10 = *(std::string **)(v9 + 8 * v8);
      }
      uint64_t v4 = std::string::operator=(v10, v6);
      ++v5;
    }
    while (v5 < *(int *)(a2 + 16));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + 32) + 8 * v13);
      int v15 = *(_DWORD *)(a1 + 44);
      uint64_t v16 = *(int *)(a1 + 40);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), v15 + 1);
          int v15 = *(_DWORD *)(a1 + 44);
        }
        *(_DWORD *)(a1 + 44) = v15 + 1;
        operator new();
      }
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = v16 + 1;
      sub_1002499B0(*(void *)(v17 + 8 * v16), v14);
      ++v13;
    }
    while (v13 < *(int *)(a2 + 40));
  }
  int v18 = *(_DWORD *)(a2 + 64);
  if (v18)
  {
    sub_100221DFC(a1 + 56, *(_DWORD *)(a1 + 64) + v18);
    memcpy((void *)(*(void *)(a1 + 56) + 4 * *(int *)(a1 + 64)), *(const void **)(a2 + 56), 4 * *(int *)(a2 + 64));
    *(_DWORD *)(a1 + 64) += *(_DWORD *)(a2 + 64);
  }
}

void sub_10024A414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10024A42C(uint64_t a1)
{
  *(void *)a1 = off_1022A0A00;
  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }
  sub_10016B2E8((uint64_t *)(a1 + 32));
  sub_10026E0AC((int *)(a1 + 8));

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_10024A4B4(uint64_t a1)
{
  sub_10024A42C(a1);

  operator delete();
}

void sub_10024A4EC()
{
}

uint64_t sub_10024A54C(uint64_t a1)
{
  sub_10026DF4C(a1 + 8);
  uint64_t result = sub_10026DEDC(a1 + 32);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t sub_10024A584(uint64_t result, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result + 56;
  char v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 8);
  int v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 32);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
          *((_DWORD *)this + 8) = result;
          if (!result) {
            return 1;
          }
        }
        else
        {
          uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
          *((_DWORD *)this + 8) = v9;
          *((void *)this + 1) = v8 + 1;
          if (!v9) {
            return 1;
          }
        }
        unsigned int v10 = v9 >> 3;
        if (v9 >> 3 != 1) {
          break;
        }
        int v11 = v9 & 7;
        if (v11 != 2) {
          goto LABEL_26;
        }
        while (1)
        {
          int v14 = *(_DWORD *)(v4 + 20);
          int v15 = *(_DWORD *)(v4 + 16);
          if (v15 >= v14)
          {
            if (v14 == *(_DWORD *)(v4 + 24))
            {
              uint64_t result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
              int v14 = *(_DWORD *)(v4 + 20);
            }
            *(_DWORD *)(v4 + 20) = v14 + 1;
            uint64_t v16 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
            uint64_t v17 = *(void *)(v4 + 8);
            uint64_t v18 = *(int *)(v4 + 16);
            *(_DWORD *)(v4 + 16) = v18 + 1;
            *(void *)(v17 + 8 * v18) = v16;
          }
          else
          {
            *(_DWORD *)(v4 + 16) = v15 + 1;
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          int v19 = (char *)*((void *)this + 1);
          if ((unint64_t)v19 >= *((void *)this + 2)) {
            break;
          }
          int v20 = *v19;
          if (v20 != 10)
          {
            if (v20 != 18) {
              goto LABEL_2;
            }
            goto LABEL_32;
          }
          *((void *)this + 1) = v19 + 1;
        }
      }
      if (v10 != 2) {
        break;
      }
      int v11 = v9 & 7;
      if (v11 != 2) {
        goto LABEL_26;
      }
      while (1)
      {
        int v21 = *(_DWORD *)(v4 + 44);
        uint64_t v22 = *(int *)(v4 + 40);
        if ((int)v22 >= v21)
        {
          if (v21 == *(_DWORD *)(v4 + 48))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v21 + 1);
            int v21 = *(_DWORD *)(v4 + 44);
          }
          *(_DWORD *)(v4 + 44) = v21 + 1;
          operator new();
        }
        uint64_t v23 = *(void *)(v4 + 32);
        *(_DWORD *)(v4 + 40) = v22 + 1;
        uint64_t v24 = *(void *)(v23 + 8 * v22);
        unsigned int v39 = 0;
        int v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0; {
        }
          }
        else
        {
          unsigned int v39 = *v25;
          *((void *)this + 1) = v25 + 1;
        }
        int v26 = *((_DWORD *)this + 14);
        int v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27) {
          return 0;
        }
        int v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_100249C20(v24, this, v29) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        int v30 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v30, 1);
        int v32 = v30 - 1;
        if (v32 < 0 == v31) {
          *((_DWORD *)this + 14) = v32;
        }
        int v19 = (char *)*((void *)this + 1);
        uint64_t v12 = (char *)*((void *)this + 2);
        if (v19 >= v12) {
          break;
        }
        int v33 = *v19;
        if (v33 != 18)
        {
          if (v33 == 24)
          {
            do
            {
              uint64_t v13 = v19 + 1;
              *((void *)this + 1) = v13;
LABEL_51:
              unsigned int v38 = 0;
              if (v13 >= v12 || *v13 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38);
                if (!result) {
                  return result;
                }
                unsigned int v34 = v38;
              }
              else
              {
                unsigned int v34 = *v13;
                *((void *)this + 1) = v13 + 1;
              }
              if (v34 < 4 || v34 == 15)
              {
                int v36 = *(_DWORD *)(v4 + 64);
                if (v36 == *(_DWORD *)(v4 + 68))
                {
                  uint64_t result = sub_100221DFC(v5, v36 + 1);
                  int v36 = *(_DWORD *)(v4 + 64);
                }
                uint64_t v37 = *(void *)(v4 + 56);
                *(_DWORD *)(v4 + 64) = v36 + 1;
                *(_DWORD *)(v37 + 4 * v36) = v34;
              }
LABEL_64:
              int v19 = (char *)*((void *)this + 1);
              uint64_t v12 = (char *)*((void *)this + 2);
            }
            while (v19 < v12 && *v19 == 24);
            if (v19 == v12 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
          goto LABEL_2;
        }
LABEL_32:
        *((void *)this + 1) = v19 + 1;
      }
    }
    if (v10 != 3)
    {
      int v11 = v9 & 7;
      goto LABEL_26;
    }
    int v11 = v9 & 7;
    if (v11 == 2) {
      break;
    }
    if ((v9 & 7) == 0)
    {
      uint64_t v13 = (char *)*((void *)this + 1);
      uint64_t v12 = (char *)*((void *)this + 2);
      goto LABEL_51;
    }
LABEL_26:
    if (v11 == 4) {
      return 1;
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, v9, a3);
    if ((result & 1) == 0) {
      return 0;
    }
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline();
  if (result) {
    goto LABEL_64;
  }
  return result;
}

uint64_t sub_10024A96C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      ++v6;
    }
    while (v6 < *(int *)(v5 + 16));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 64) >= 1)
  {
    uint64_t v8 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(*(void *)(v5 + 56) + 4 * v8++), (int)a2, a4);
    while (v8 < *(int *)(v5 + 64));
  }
  return result;
}

uint64_t sub_10024AA34(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    int v5 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      char v8 = v7;
      uint64_t v9 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
        int v7 = *(unsigned __int8 *)(v6 + 23);
        uint64_t v9 = *(void *)(v6 + 8);
        int v3 = *(_DWORD *)(a1 + 16);
        char v8 = *(unsigned char *)(v6 + 23);
      }
      else
      {
        int v11 = 1;
      }
      if (v8 < 0) {
        int v7 = v9;
      }
      v5 += v11 + v7;
      ++v4;
    }
    while (v4 < v3);
  }
  int v12 = *(_DWORD *)(a1 + 40);
  int v13 = v12 + v5;
  if (v12 >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10024A094(*(void *)(*(void *)(a1 + 32) + 8 * v14), a2);
      int v16 = (int)v15;
      if (v15 >= 0x80) {
        int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      }
      else {
        int v17 = 1;
      }
      v13 += v16 + v17;
      ++v14;
    }
    while (v14 < *(int *)(a1 + 40));
  }
  int v18 = *(_DWORD *)(a1 + 64);
  if (v18 < 1)
  {
    int v20 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    int v20 = 0;
    do
    {
      int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 56)
                                                                                             + 4 * v19);
      if ((v21 & 0x80000000) != 0)
      {
        int v22 = 10;
      }
      else if (v21 >= 0x80)
      {
        int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
        int v18 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        int v22 = 1;
      }
      v20 += v22;
      ++v19;
    }
    while (v19 < v18);
  }
  uint64_t result = (v20 + v13 + v18);
  *(_DWORD *)(a1 + 72) = result;
  return result;
}

void sub_10024AB90(uint64_t a1, void *lpsrc)
{
  sub_10024A1C0(a1, (uint64_t)lpsrc);
}

void sub_10024AC18(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10024A1C0(a1, a2);
  }
}

uint64_t sub_10024AC84()
{
  return 1;
}

void *sub_10024AC8C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.LocationSimilarityListData");
}

uint64_t sub_10024AC9C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022A0A78;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 176) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 192) = 0;
  sub_10024ADA0(a1, a2);
  return a1;
}

void sub_10024AD4C(_Unwind_Exception *a1)
{
  if (*((void *)v1 + 17)) {
    operator delete[]();
  }
  sub_10016B2E8(v4);
  sub_10016B2E8(v3);
  sub_10016B2E8(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10024ADA0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }
  sub_10026E12C((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), a2 + 8);
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56), *(_DWORD *)(a2 + 64) + *(_DWORD *)(a1 + 64));
  if (*(int *)(a2 + 64) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 68);
      uint64_t v7 = *(int *)(a1 + 64);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 72))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 68);
        }
        *(_DWORD *)(a1 + 68) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)(a1 + 64) = v7 + 1;
      sub_10024642C(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 64));
  }
  sub_10026E25C((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80), a2 + 80);
  int v9 = *(_DWORD *)(a2 + 144);
  if (v9)
  {
    sub_100221DFC(a1 + 136, *(_DWORD *)(a1 + 144) + v9);
    memcpy((void *)(*(void *)(a1 + 136) + 4 * *(int *)(a1 + 144)), *(const void **)(a2 + 136), 4 * *(int *)(a2 + 144));
    *(_DWORD *)(a1 + 144) += *(_DWORD *)(a2 + 144);
  }
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x1FE) == 0) {
    goto LABEL_20;
  }
  if ((v10 & 2) != 0)
  {
    uint64_t v14 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 192) |= 2u;
    *(void *)(a1 + 32) = v14;
    int v10 = *(_DWORD *)(a2 + 192);
    if ((v10 & 4) == 0)
    {
LABEL_16:
      if ((v10 & 8) == 0) {
        goto LABEL_17;
      }
LABEL_40:
      unsigned int v16 = *(_DWORD *)(a2 + 48);
      if (v16 >= 6) {
        sub_101A55E88();
      }
      *(_DWORD *)(a1 + 192) |= 8u;
      *(_DWORD *)(a1 + 48) = v16;
      int v10 = *(_DWORD *)(a2 + 192);
      if ((v10 & 0x10) == 0)
      {
LABEL_18:
        if ((v10 & 0x80) == 0) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      goto LABEL_42;
    }
  }
  else if ((v10 & 4) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v15 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 192) |= 4u;
  *(void *)(a1 + 40) = v15;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 8) != 0) {
    goto LABEL_40;
  }
LABEL_17:
  if ((v10 & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_42:
  unsigned int v17 = *(_DWORD *)(a2 + 52);
  if (v17 >= 4) {
    sub_101A55E5C();
  }
  *(_DWORD *)(a1 + 192) |= 0x10u;
  *(_DWORD *)(a1 + 52) = v17;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x80) != 0)
  {
LABEL_19:
    char v11 = *(unsigned char *)(a2 + 104);
    *(_DWORD *)(a1 + 192) |= 0x80u;
    *(unsigned char *)(a1 + 104) = v11;
    int v10 = *(_DWORD *)(a2 + 192);
  }
LABEL_20:
  if ((v10 & 0xFF00) == 0) {
    goto LABEL_30;
  }
  if ((v10 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 192) |= 0x100u;
    int v18 = *(_DWORD **)(a1 + 112);
    if (!v18) {
      operator new();
    }
    uint64_t v19 = *(void *)(a2 + 112);
    if (!v19) {
      uint64_t v19 = *(void *)(qword_1024899C0 + 112);
    }
    sub_100247DCC(v18, v19);
    int v10 = *(_DWORD *)(a2 + 192);
    if ((v10 & 0x200) == 0)
    {
LABEL_23:
      if ((v10 & 0x400) == 0) {
        goto LABEL_24;
      }
      goto LABEL_51;
    }
  }
  else if ((v10 & 0x200) == 0)
  {
    goto LABEL_23;
  }
  int v20 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 192) |= 0x200u;
  *(_DWORD *)(a1 + 108) = v20;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x400) == 0)
  {
LABEL_24:
    if ((v10 & 0x800) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_51:
  *(_DWORD *)(a1 + 192) |= 0x400u;
  uint64_t v21 = *(void *)(a1 + 120);
  if (!v21) {
    operator new();
  }
  uint64_t v22 = *(void *)(a2 + 120);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_1024899C0 + 120);
  }
  sub_10024A1C0(v21, v22);
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x800) == 0)
  {
LABEL_25:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_56:
  unsigned int v23 = *(_DWORD *)(a2 + 128);
  if (v23 >= 4) {
    sub_101A55E30();
  }
  *(_DWORD *)(a1 + 192) |= 0x800u;
  *(_DWORD *)(a1 + 128) = v23;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x1000) == 0)
  {
LABEL_26:
    if ((v10 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_58:
  unsigned int v24 = *(_DWORD *)(a2 + 132);
  if (v24 >= 4) {
    sub_101A55E04();
  }
  *(_DWORD *)(a1 + 192) |= 0x1000u;
  *(_DWORD *)(a1 + 132) = v24;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x4000) == 0) {
    goto LABEL_28;
  }
LABEL_27:
  int v12 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 192) |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v12;
  int v10 = *(_DWORD *)(a2 + 192);
LABEL_28:
  if ((v10 & 0x8000) != 0)
  {
    int v13 = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a1 + 192) |= 0x8000u;
    *(_DWORD *)(a1 + 156) = v13;
    int v10 = *(_DWORD *)(a2 + 192);
  }
LABEL_30:
  if ((v10 & 0xFF0000) == 0) {
    return;
  }
  if ((v10 & 0x10000) != 0)
  {
    int v25 = *(_DWORD *)(a2 + 160);
    *(_DWORD *)(a1 + 192) |= 0x10000u;
    *(_DWORD *)(a1 + 160) = v25;
    int v10 = *(_DWORD *)(a2 + 192);
    if ((v10 & 0x20000) == 0)
    {
LABEL_33:
      if ((v10 & 0x40000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_63;
    }
  }
  else if ((v10 & 0x20000) == 0)
  {
    goto LABEL_33;
  }
  int v26 = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 192) |= 0x20000u;
  *(_DWORD *)(a1 + 164) = v26;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x40000) == 0)
  {
LABEL_34:
    if ((v10 & 0x80000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v27 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 192) |= 0x40000u;
  *(_DWORD *)(a1 + 168) = v27;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x80000) == 0)
  {
LABEL_35:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_36;
    }
LABEL_65:
    int v29 = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a1 + 192) |= 0x100000u;
    *(_DWORD *)(a1 + 184) = v29;
    if ((*(_DWORD *)(a2 + 192) & 0x200000) == 0) {
      return;
    }
    goto LABEL_66;
  }
LABEL_64:
  int v28 = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 192) |= 0x80000u;
  *(_DWORD *)(a1 + 172) = v28;
  int v10 = *(_DWORD *)(a2 + 192);
  if ((v10 & 0x100000) != 0) {
    goto LABEL_65;
  }
LABEL_36:
  if ((v10 & 0x200000) == 0) {
    return;
  }
LABEL_66:
  int v30 = *(const std::string **)(a2 + 176);
  *(_DWORD *)(a1 + 192) |= 0x200000u;
  BOOL v31 = *(std::string **)(a1 + 176);
  if (v31 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v31, v30);
}

void sub_10024B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10024B308(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022A0A78;
  sub_10024B39C(a1);
  if (a1[17]) {
    operator delete[]();
  }
  sub_10016B2E8(a1 + 10);
  sub_10016B2E8(a1 + 7);
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void *sub_10024B39C(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[22];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  if ((void *)qword_1024899C0 != result)
  {
    uint64_t v4 = result[14];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t result = (void *)v1[15];
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  return result;
}

void sub_10024B480(uint64_t *a1)
{
  sub_10024B308(a1);

  operator delete();
}

void sub_10024B4B8()
{
}

uint64_t sub_10024B548(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 192);
  if ((v2 & 0x1FE) != 0)
  {
    *(unsigned char *)(a1 + 104) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t v3 = *(void *)(a1 + 112);
      if (v3)
      {
        sub_10026DEDC(v3 + 8);
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(a1 + 192);
      }
    }
    *(_DWORD *)(a1 + 108) = 0;
    if ((v2 & 0x400) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 120);
      if (v4)
      {
        sub_10026DF4C(v4 + 8);
        sub_10026DEDC(v4 + 32);
        *(_DWORD *)(v4 + 64) = 0;
        *(_DWORD *)(v4 + 76) = 0;
        int v2 = *(_DWORD *)(a1 + 192);
      }
    }
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 152) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_DWORD *)(a1 + 184) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    if ((v2 & 0x200000) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 176);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
  }
  sub_10026DEDC(a1 + 8);
  sub_10026DEDC(a1 + 56);
  uint64_t result = sub_10026DEDC(a1 + 80);
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t sub_10024B644(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = a1 + 136;
  int v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8);
  uint64_t v120 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56);
  long long v121 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80);
  long long v122 = (unint64_t *)(a1 + 32);
  uint64_t v7 = (unsigned int *)(a1 + 108);
  uint64_t v8 = (unsigned int *)(a1 + 152);
  int v9 = (unsigned int *)(a1 + 156);
  v126 = (unsigned int *)(a1 + 164);
  long long v127 = (unsigned int *)(a1 + 160);
  long long v124 = (unsigned int *)(a1 + 172);
  long long v125 = (unsigned int *)(a1 + 168);
  long long v123 = (unsigned int *)(a1 + 184);
LABEL_2:
  while (2)
  {
    int v10 = (char *)*((void *)this + 1);
    if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v10;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_80;
        }
        while (1)
        {
          int v13 = *(_DWORD *)(a1 + 20);
          uint64_t v14 = *(int *)(a1 + 16);
          if ((int)v14 >= v13)
          {
            if (v13 == *(_DWORD *)(a1 + 24))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v13 + 1);
              int v13 = *(_DWORD *)(a1 + 20);
            }
            *(_DWORD *)(a1 + 20) = v13 + 1;
            operator new();
          }
          uint64_t v15 = *(void *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v14 + 1;
          uint64_t v16 = *(void *)(v15 + 8 * v14);
          v128[0] = 0;
          unsigned int v17 = (char *)*((void *)this + 1);
          if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128))return 0; {
          }
            }
          else
          {
            v128[0] = *v17;
            *((void *)this + 1) = v17 + 1;
          }
          int v18 = *((_DWORD *)this + 14);
          int v19 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v18 + 1;
          if (v18 >= v19) {
            return 0;
          }
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v128[0]);
          if (!sub_100245880(v16, this, v21) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
          int v22 = *((_DWORD *)this + 14);
          BOOL v23 = __OFSUB__(v22, 1);
          int v24 = v22 - 1;
          if (v24 < 0 == v23) {
            *((_DWORD *)this + 14) = v24;
          }
          int v26 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          if ((unint64_t)v26 >= v25) {
            goto LABEL_2;
          }
          int v27 = *v26;
          if (v27 != 10) {
            break;
          }
          *((void *)this + 1) = v26 + 1;
        }
        if (v27 != 16) {
          continue;
        }
        int v28 = (char *)(v26 + 1);
        *((void *)this + 1) = v28;
        goto LABEL_29;
      case 2u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        int v28 = (char *)*((void *)this + 1);
        unint64_t v25 = *((void *)this + 2);
LABEL_29:
        if ((unint64_t)v28 >= v25 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v122);
          if (!result) {
            return result;
          }
          int v29 = (unsigned char *)*((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
        }
        else
        {
          *long long v122 = *v28;
          int v29 = v28 + 1;
          *((void *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 192) |= 2u;
        if ((unint64_t)v29 >= v25 || *v29 != 25) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_92:
        *(void *)v128 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v128) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v128;
        }
        *(_DWORD *)(a1 + 192) |= 4u;
        int v55 = (unsigned char *)*((void *)this + 1);
        unint64_t v30 = *((void *)this + 2);
        if ((unint64_t)v55 >= v30 || *v55 != 32) {
          continue;
        }
        BOOL v31 = v55 + 1;
        *((void *)this + 1) = v31;
LABEL_96:
        v128[0] = 0;
        if ((unint64_t)v31 >= v30 || *v31 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128);
          if (!result) {
            return result;
          }
          unsigned int v56 = v128[0];
        }
        else
        {
          unsigned int v56 = *v31;
          *((void *)this + 1) = v31 + 1;
        }
        if (v56 <= 5)
        {
          *(_DWORD *)(a1 + 192) |= 8u;
          *(_DWORD *)(a1 + 48) = v56;
        }
        int v57 = (unsigned char *)*((void *)this + 1);
        unint64_t v32 = *((void *)this + 2);
        if ((unint64_t)v57 >= v32 || *v57 != 40) {
          continue;
        }
        int v33 = v57 + 1;
        *((void *)this + 1) = v33;
LABEL_106:
        v128[0] = 0;
        if ((unint64_t)v33 >= v32 || *v33 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128);
          if (!result) {
            return result;
          }
          unsigned int v58 = v128[0];
        }
        else
        {
          unsigned int v58 = *v33;
          *((void *)this + 1) = v33 + 1;
        }
        if (v58 <= 3)
        {
          *(_DWORD *)(a1 + 192) |= 0x10u;
          *(_DWORD *)(a1 + 52) = v58;
        }
        uint64_t v59 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v59 >= *((void *)this + 2) || *v59 != 50) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v59 + 1;
LABEL_116:
          int v60 = *(_DWORD *)(a1 + 68);
          uint64_t v61 = *(int *)(a1 + 64);
          if ((int)v61 >= v60)
          {
            if (v60 == *(_DWORD *)(a1 + 72))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v120, v60 + 1);
              int v60 = *(_DWORD *)(a1 + 68);
            }
            *(_DWORD *)(a1 + 68) = v60 + 1;
            operator new();
          }
          uint64_t v62 = *(void *)(a1 + 56);
          *(_DWORD *)(a1 + 64) = v61 + 1;
          uint64_t v63 = *(void *)(v62 + 8 * v61);
          v128[0] = 0;
          int v64 = (char *)*((void *)this + 1);
          if ((unint64_t)v64 >= *((void *)this + 2) || *v64 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128))return 0; {
          }
            }
          else
          {
            v128[0] = *v64;
            *((void *)this + 1) = v64 + 1;
          }
          int v65 = *((_DWORD *)this + 14);
          int v66 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v65 + 1;
          if (v65 >= v66) {
            return 0;
          }
          int v67 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v128[0]);
          if (!sub_100246728(v63, this, v68) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v67);
          int v69 = *((_DWORD *)this + 14);
          BOOL v23 = __OFSUB__(v69, 1);
          int v70 = v69 - 1;
          if (v70 < 0 == v23) {
            *((_DWORD *)this + 14) = v70;
          }
          uint64_t v59 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v59 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v71 = *v59;
        }
        while (v71 == 50);
        if (v71 != 58) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v59 + 1;
LABEL_134:
          int v72 = *(_DWORD *)(a1 + 92);
          uint64_t v73 = *(int *)(a1 + 88);
          if ((int)v73 >= v72)
          {
            if (v72 == *(_DWORD *)(a1 + 96))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v121, v72 + 1);
              int v72 = *(_DWORD *)(a1 + 92);
            }
            *(_DWORD *)(a1 + 92) = v72 + 1;
            operator new();
          }
          uint64_t v74 = *(void *)(a1 + 80);
          *(_DWORD *)(a1 + 88) = v73 + 1;
          uint64_t v75 = *(void *)(v74 + 8 * v73);
          v128[0] = 0;
          BOOL v76 = (char *)*((void *)this + 1);
          if ((unint64_t)v76 >= *((void *)this + 2) || *v76 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128))return 0; {
          }
            }
          else
          {
            v128[0] = *v76;
            *((void *)this + 1) = v76 + 1;
          }
          int v77 = *((_DWORD *)this + 14);
          int v78 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v77 + 1;
          if (v77 >= v78) {
            return 0;
          }
          int v79 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v128[0]);
          if (!sub_100246F00(v75, this, v80) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v79);
          int v81 = *((_DWORD *)this + 14);
          BOOL v23 = __OFSUB__(v81, 1);
          int v82 = v81 - 1;
          if (v82 < 0 == v23) {
            *((_DWORD *)this + 14) = v82;
          }
          uint64_t v59 = (unsigned char *)*((void *)this + 1);
          unint64_t v34 = *((void *)this + 2);
          if ((unint64_t)v59 >= v34) {
            goto LABEL_2;
          }
          int v83 = *v59;
        }
        while (v83 == 58);
        if (v83 != 64) {
          continue;
        }
        int v35 = v59 + 1;
        *((void *)this + 1) = v35;
LABEL_152:
        v128[0] = 0;
        if ((unint64_t)v35 >= v34 || *v35 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128);
          if (!result) {
            return result;
          }
          unsigned int v84 = v128[0];
          uint64_t v85 = (unsigned char *)*((void *)this + 1);
          unint64_t v34 = *((void *)this + 2);
        }
        else
        {
          unsigned int v84 = *v35;
          uint64_t v85 = v35 + 1;
          *((void *)this + 1) = v85;
        }
        *(unsigned char *)(a1 + 104) = v84 != 0;
        int v36 = *(_DWORD *)(a1 + 192) | 0x80;
        *(_DWORD *)(a1 + 192) = v36;
        if ((unint64_t)v85 >= v34 || *v85 != 74) {
          continue;
        }
        *((void *)this + 1) = v85 + 1;
LABEL_160:
        *(_DWORD *)(a1 + 192) = v36 | 0x100;
        __int16 v86 = *(int **)(a1 + 112);
        if (!v86) {
          operator new();
        }
        v128[0] = 0;
        int v87 = (char *)*((void *)this + 1);
        if ((unint64_t)v87 >= *((void *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128))return 0; {
        }
          }
        else
        {
          v128[0] = *v87;
          *((void *)this + 1) = v87 + 1;
        }
        int v88 = *((_DWORD *)this + 14);
        int v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89) {
          return 0;
        }
        int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v128[0]);
        if (!sub_100248064(v86, this, v91) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        int v92 = *((_DWORD *)this + 14);
        BOOL v23 = __OFSUB__(v92, 1);
        int v93 = v92 - 1;
        if (v93 < 0 == v23) {
          *((_DWORD *)this + 14) = v93;
        }
        uint64_t v94 = (unsigned char *)*((void *)this + 1);
        unint64_t v37 = *((void *)this + 2);
        if ((unint64_t)v94 >= v37 || *v94 != 80) {
          continue;
        }
        unsigned int v38 = v94 + 1;
        *((void *)this + 1) = v38;
LABEL_174:
        if ((unint64_t)v38 >= v37 || *v38 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          long long v95 = (unsigned char *)*((void *)this + 1);
          unint64_t v37 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v7 = *v38;
          long long v95 = v38 + 1;
          *((void *)this + 1) = v95;
        }
        int v39 = *(_DWORD *)(a1 + 192) | 0x200;
        *(_DWORD *)(a1 + 192) = v39;
        if ((unint64_t)v95 >= v37 || *v95 != 90) {
          continue;
        }
        *((void *)this + 1) = v95 + 1;
LABEL_182:
        *(_DWORD *)(a1 + 192) = v39 | 0x400;
        uint64_t v96 = *(void *)(a1 + 120);
        if (!v96) {
          operator new();
        }
        v128[0] = 0;
        long long v97 = (char *)*((void *)this + 1);
        if ((unint64_t)v97 >= *((void *)this + 2) || *v97 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128))return 0; {
        }
          }
        else
        {
          v128[0] = *v97;
          *((void *)this + 1) = v97 + 1;
        }
        int v98 = *((_DWORD *)this + 14);
        int v99 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v98 + 1;
        if (v98 >= v99) {
          return 0;
        }
        int v100 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v128[0]);
        if (!sub_10024A584(v96, this, v101) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v100);
        int v102 = *((_DWORD *)this + 14);
        BOOL v23 = __OFSUB__(v102, 1);
        int v103 = v102 - 1;
        if (v103 < 0 == v23) {
          *((_DWORD *)this + 14) = v103;
        }
        v104 = (unsigned char *)*((void *)this + 1);
        unint64_t v40 = *((void *)this + 2);
        if ((unint64_t)v104 < v40 && *v104 == 96)
        {
          long long v41 = v104 + 1;
          *((void *)this + 1) = v41;
LABEL_196:
          v128[0] = 0;
          if ((unint64_t)v41 >= v40 || *v41 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128);
            if (!result) {
              return result;
            }
            unsigned int v105 = v128[0];
          }
          else
          {
            unsigned int v105 = *v41;
            *((void *)this + 1) = v41 + 1;
          }
          if (v105 <= 3)
          {
            *(_DWORD *)(a1 + 192) |= 0x800u;
            *(_DWORD *)(a1 + 128) = v105;
          }
          int v106 = (unsigned char *)*((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          if ((unint64_t)v106 < v42 && *v106 == 104)
          {
            int v43 = v106 + 1;
            *((void *)this + 1) = v43;
LABEL_206:
            v128[0] = 0;
            if ((unint64_t)v43 >= v42 || *v43 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128);
              if (!result) {
                return result;
              }
              unsigned int v107 = v128[0];
            }
            else
            {
              unsigned int v107 = *v43;
              *((void *)this + 1) = v43 + 1;
            }
            if (v107 <= 3)
            {
              *(_DWORD *)(a1 + 192) |= 0x1000u;
              *(_DWORD *)(a1 + 132) = v107;
            }
            std::string::size_type v108 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v44 = *((void *)this + 2);
            if ((unint64_t)v108 < v44)
            {
              int v109 = *v108;
              goto LABEL_226;
            }
          }
        }
        continue;
      case 3u:
        int v12 = TagFallback & 7;
        if (v12 == 1) {
          goto LABEL_92;
        }
        goto LABEL_80;
      case 4u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        BOOL v31 = (char *)*((void *)this + 1);
        unint64_t v30 = *((void *)this + 2);
        goto LABEL_96;
      case 5u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        int v33 = (char *)*((void *)this + 1);
        unint64_t v32 = *((void *)this + 2);
        goto LABEL_106;
      case 6u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_116;
        }
        goto LABEL_80;
      case 7u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_134;
        }
        goto LABEL_80;
      case 8u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        int v35 = (char *)*((void *)this + 1);
        unint64_t v34 = *((void *)this + 2);
        goto LABEL_152;
      case 9u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_80;
        }
        int v36 = *(_DWORD *)(a1 + 192);
        goto LABEL_160;
      case 0xAu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        unsigned int v38 = (char *)*((void *)this + 1);
        unint64_t v37 = *((void *)this + 2);
        goto LABEL_174;
      case 0xBu:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_80;
        }
        int v39 = *(_DWORD *)(a1 + 192);
        goto LABEL_182;
      case 0xCu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        long long v41 = (char *)*((void *)this + 1);
        unint64_t v40 = *((void *)this + 2);
        goto LABEL_196;
      case 0xDu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        int v43 = (char *)*((void *)this + 1);
        unint64_t v42 = *((void *)this + 2);
        goto LABEL_206;
      case 0xEu:
        int v12 = TagFallback & 7;
        if (v12 == 2)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline();
          if (!result) {
            return result;
          }
          while (1)
          {
            std::string::size_type v108 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v44 = *((void *)this + 2);
            if ((unint64_t)v108 >= v44) {
              goto LABEL_2;
            }
            int v109 = *v108;
            if (v109 == 120) {
              break;
            }
LABEL_226:
            if (v109 != 112) {
              goto LABEL_2;
            }
            unsigned int v45 = (char *)(v108 + 1);
            *((void *)this + 1) = v45;
LABEL_215:
            v128[0] = 0;
            if ((unint64_t)v45 >= v44 || *v45 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v128);
              if (!result) {
                return result;
              }
              unsigned int v110 = v128[0];
            }
            else
            {
              unsigned int v110 = *v45;
              *((void *)this + 1) = v45 + 1;
            }
            if (v110 <= 8)
            {
              int v111 = *(_DWORD *)(a1 + 144);
              if (v111 == *(_DWORD *)(a1 + 148))
              {
                sub_100221DFC(v5, v111 + 1);
                int v111 = *(_DWORD *)(a1 + 144);
              }
              uint64_t v112 = *(void *)(a1 + 136);
              *(_DWORD *)(a1 + 144) = v111 + 1;
              *(_DWORD *)(v112 + 4 * v111) = v110;
            }
          }
          int v46 = v108 + 1;
          *((void *)this + 1) = v46;
LABEL_229:
          if ((unint64_t)v46 >= v44 || (char)*v46 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
            if (!result) {
              return result;
            }
            long long v113 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v44 = *((void *)this + 2);
          }
          else
          {
            unsigned int *v8 = *v46;
            long long v113 = v46 + 1;
            *((void *)this + 1) = v113;
          }
          *(_DWORD *)(a1 + 192) |= 0x4000u;
          if ((int)v44 - (int)v113 >= 2 && *v113 == 128 && v113[1] == 1)
          {
            int v47 = v113 + 2;
            *((void *)this + 1) = v47;
LABEL_238:
            if ((unint64_t)v47 >= v44 || (char)*v47 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
              if (!result) {
                return result;
              }
              int v114 = (unsigned __int8 *)*((void *)this + 1);
              unint64_t v44 = *((void *)this + 2);
            }
            else
            {
              unsigned int *v9 = *v47;
              int v114 = v47 + 1;
              *((void *)this + 1) = v114;
            }
            *(_DWORD *)(a1 + 192) |= 0x8000u;
            if ((int)v44 - (int)v114 >= 2 && *v114 == 136 && v114[1] == 1)
            {
              int v48 = v114 + 2;
              *((void *)this + 1) = v48;
LABEL_247:
              if ((unint64_t)v48 >= v44 || (char)*v48 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v127);
                if (!result) {
                  return result;
                }
                long long v115 = (unsigned __int8 *)*((void *)this + 1);
                unint64_t v44 = *((void *)this + 2);
              }
              else
              {
                *long long v127 = *v48;
                long long v115 = v48 + 1;
                *((void *)this + 1) = v115;
              }
              *(_DWORD *)(a1 + 192) |= 0x10000u;
              if ((int)v44 - (int)v115 >= 2 && *v115 == 144 && v115[1] == 1)
              {
                unsigned int v49 = v115 + 2;
                *((void *)this + 1) = v49;
LABEL_256:
                if ((unint64_t)v49 >= v44 || (char)*v49 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v126);
                  if (!result) {
                    return result;
                  }
                  uint64_t v116 = (unsigned __int8 *)*((void *)this + 1);
                  unint64_t v44 = *((void *)this + 2);
                }
                else
                {
                  unsigned int *v126 = *v49;
                  uint64_t v116 = v49 + 1;
                  *((void *)this + 1) = v116;
                }
                *(_DWORD *)(a1 + 192) |= 0x20000u;
                if ((int)v44 - (int)v116 >= 2 && *v116 == 152 && v116[1] == 1)
                {
                  uint64_t v50 = v116 + 2;
                  *((void *)this + 1) = v50;
LABEL_265:
                  if ((unint64_t)v50 >= v44 || (char)*v50 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v125);
                    if (!result) {
                      return result;
                    }
                    long long v117 = (unsigned __int8 *)*((void *)this + 1);
                    unint64_t v44 = *((void *)this + 2);
                  }
                  else
                  {
                    unsigned int *v125 = *v50;
                    long long v117 = v50 + 1;
                    *((void *)this + 1) = v117;
                  }
                  *(_DWORD *)(a1 + 192) |= 0x40000u;
                  if ((int)v44 - (int)v117 >= 2 && *v117 == 160 && v117[1] == 1)
                  {
                    unsigned int v51 = v117 + 2;
                    *((void *)this + 1) = v51;
LABEL_274:
                    if ((unint64_t)v51 >= v44 || (char)*v51 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v124);
                      if (!result) {
                        return result;
                      }
                      int v118 = (unsigned __int8 *)*((void *)this + 1);
                      unint64_t v44 = *((void *)this + 2);
                    }
                    else
                    {
                      unsigned int *v124 = *v51;
                      int v118 = v51 + 1;
                      *((void *)this + 1) = v118;
                    }
                    *(_DWORD *)(a1 + 192) |= 0x80000u;
                    if ((int)v44 - (int)v118 >= 2 && *v118 == 168 && v118[1] == 1)
                    {
                      uint64_t v52 = v118 + 2;
                      *((void *)this + 1) = v52;
LABEL_283:
                      if ((unint64_t)v52 >= v44 || (char)*v52 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v123);
                        if (!result) {
                          return result;
                        }
                        long long v119 = (unsigned __int8 *)*((void *)this + 1);
                        unint64_t v44 = *((void *)this + 2);
                      }
                      else
                      {
                        unsigned int *v123 = *v52;
                        long long v119 = v52 + 1;
                        *((void *)this + 1) = v119;
                      }
                      int v53 = *(_DWORD *)(a1 + 192) | 0x100000;
                      *(_DWORD *)(a1 + 192) = v53;
                      if ((int)v44 - (int)v119 >= 2 && *v119 == 178 && v119[1] == 1)
                      {
                        *((void *)this + 1) = v119 + 2;
LABEL_73:
                        *(_DWORD *)(a1 + 192) = v53 | 0x200000;
                        if (*(_UNKNOWN **)(a1 + 176) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
                          operator new();
                        }
                        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                        if (!result) {
                          return result;
                        }
                        if (*((void *)this + 1) == *((void *)this + 2)
                          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                        {
                          *((_DWORD *)this + 8) = 0;
                          uint64_t result = 1;
                          *((unsigned char *)this + 36) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        }
        if ((TagFallback & 7) == 0)
        {
          unsigned int v45 = (char *)*((void *)this + 1);
          unint64_t v44 = *((void *)this + 2);
          goto LABEL_215;
        }
LABEL_80:
        if (v12 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
          continue;
          }
        }
        return 1;
      case 0xFu:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        int v46 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        goto LABEL_229;
      case 0x10u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        int v47 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        goto LABEL_238;
      case 0x11u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        int v48 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        goto LABEL_247;
      case 0x12u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        unsigned int v49 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        goto LABEL_256;
      case 0x13u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        uint64_t v50 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        goto LABEL_265;
      case 0x14u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        unsigned int v51 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        goto LABEL_274;
      case 0x15u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_80;
        }
        uint64_t v52 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        goto LABEL_283;
      case 0x16u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_80;
        }
        int v53 = *(_DWORD *)(a1 + 192);
        goto LABEL_73;
      default:
        int v12 = TagFallback & 7;
        goto LABEL_80;
    }
  }
}

uint64_t sub_10024C758(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  int v7 = *(_DWORD *)(v5 + 192);
  if ((v7 & 2) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 32), (unint64_t)a2, a4);
    int v7 = *(_DWORD *)(v5 + 192);
    if ((v7 & 4) == 0)
    {
LABEL_6:
      if ((v7 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_36;
    }
  }
  else if ((v7 & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v5 + 40), a3);
  int v7 = *(_DWORD *)(v5 + 192);
  if ((v7 & 8) == 0)
  {
LABEL_7:
    if ((v7 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_36:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 48), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 192) & 0x10) != 0) {
LABEL_8:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 52), (int)a2, a4);
LABEL_9:
  if (*(int *)(v5 + 64) >= 1)
  {
    uint64_t v8 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(void *)(*(void *)(v5 + 56) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 64));
  }
  if (*(int *)(v5 + 88) >= 1)
  {
    uint64_t v9 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(void *)(*(void *)(v5 + 80) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 88));
  }
  int v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x80) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 104), (BOOL)a2, a4);
    int v10 = *(_DWORD *)(v5 + 192);
    if ((v10 & 0x100) == 0)
    {
LABEL_17:
      if ((v10 & 0x200) == 0) {
        goto LABEL_18;
      }
      goto LABEL_42;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v5 + 112);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_1024899C0 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v13, a2, a4);
  int v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x200) == 0)
  {
LABEL_18:
    if ((v10 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 108), a2, a4);
  int v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x400) == 0)
  {
LABEL_19:
    if ((v10 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_43:
  uint64_t v14 = *(void *)(v5 + 120);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_1024899C0 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  int v10 = *(_DWORD *)(v5 + 192);
  if ((v10 & 0x800) == 0)
  {
LABEL_20:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_46:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 128), (int)a2, a4);
  if ((*(_DWORD *)(v5 + 192) & 0x1000) != 0) {
LABEL_21:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(_DWORD *)(v5 + 132), (int)a2, a4);
LABEL_22:
  if (*(int *)(v5 + 144) >= 1)
  {
    uint64_t v11 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(_DWORD *)(*(void *)(v5 + 136) + 4 * v11++), (int)a2, a4);
    while (v11 < *(int *)(v5 + 144));
  }
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x4000) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(_DWORD *)(v5 + 152), a2, a4);
    int v12 = *(_DWORD *)(v5 + 192);
    if ((v12 & 0x8000) == 0)
    {
LABEL_27:
      if ((v12 & 0x10000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_50;
    }
  }
  else if ((v12 & 0x8000) == 0)
  {
    goto LABEL_27;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(_DWORD *)(v5 + 156), a2, a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x10000) == 0)
  {
LABEL_28:
    if ((v12 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, *(_DWORD *)(v5 + 160), a2, a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x20000) == 0)
  {
LABEL_29:
    if ((v12 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(_DWORD *)(v5 + 164), a2, a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x40000) == 0)
  {
LABEL_30:
    if ((v12 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(_DWORD *)(v5 + 168), a2, a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x80000) == 0)
  {
LABEL_31:
    if ((v12 & 0x100000) == 0) {
      goto LABEL_32;
    }
LABEL_54:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(_DWORD *)(v5 + 184), a2, a4);
    if ((*(_DWORD *)(v5 + 192) & 0x200000) == 0) {
      return result;
    }
    goto LABEL_55;
  }
LABEL_53:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(_DWORD *)(v5 + 172), a2, a4);
  int v12 = *(_DWORD *)(v5 + 192);
  if ((v12 & 0x100000) != 0) {
    goto LABEL_54;
  }
LABEL_32:
  if ((v12 & 0x200000) == 0) {
    return result;
  }
LABEL_55:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t sub_10024CA84(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 192);
  if ((v3 & 0x1FE) != 0)
  {
    if ((v3 & 2) != 0)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      int v4 = 0;
    }
    if ((v3 & 4) != 0) {
      int v6 = v4 + 9;
    }
    else {
      int v6 = v4;
    }
    if ((v3 & 8) != 0)
    {
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v7 & 0x80000000) != 0)
      {
        int v8 = 10;
      }
      else if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 192);
      }
      else
      {
        int v8 = 1;
      }
      v6 += v8 + 1;
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
      if ((v9 & 0x80000000) != 0)
      {
        int v10 = 10;
      }
      else if (v9 >= 0x80)
      {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
        int v3 = *(_DWORD *)(a1 + 192);
      }
      else
      {
        int v10 = 1;
      }
      v6 += v10 + 1;
    }
    if ((v3 & 0x80) != 0) {
      int v5 = v6 + 2;
    }
    else {
      int v5 = v6;
    }
  }
  else
  {
    int v5 = 0;
  }
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_71;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 112);
    if (!v11) {
      uint64_t v11 = *(void *)(qword_1024899C0 + 112);
    }
    int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002482FC(v11, a2);
    int v13 = (int)v12;
    if (v12 >= 0x80) {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
    }
    else {
      int v14 = 1;
    }
    v5 += v13 + v14 + 1;
    int v3 = *(_DWORD *)(a1 + 192);
    if ((v3 & 0x200) == 0)
    {
LABEL_29:
      if ((v3 & 0x400) == 0) {
        goto LABEL_30;
      }
      goto LABEL_45;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_29;
  }
  uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 108);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    int v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    int v16 = 1;
  }
  v5 += v16 + 1;
  if ((v3 & 0x400) == 0)
  {
LABEL_30:
    if ((v3 & 0x800) == 0) {
      goto LABEL_31;
    }
    goto LABEL_51;
  }
LABEL_45:
  uint64_t v17 = *(void *)(a1 + 120);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1024899C0 + 120);
  }
  int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10024AA34(v17, a2);
  int v19 = (int)v18;
  if (v18 >= 0x80) {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  }
  else {
    int v20 = 1;
  }
  v5 += v19 + v20 + 1;
  int v3 = *(_DWORD *)(a1 + 192);
  if ((v3 & 0x800) == 0)
  {
LABEL_31:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_32;
    }
LABEL_57:
    BOOL v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
    if ((v23 & 0x80000000) != 0)
    {
      int v24 = 10;
    }
    else if (v23 >= 0x80)
    {
      int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      int v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      int v24 = 1;
    }
    v5 += v24 + 1;
    if ((v3 & 0x4000) == 0)
    {
LABEL_33:
      if ((v3 & 0x8000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_67;
    }
    goto LABEL_63;
  }
LABEL_51:
  unsigned int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 128);
  if ((v21 & 0x80000000) != 0)
  {
    int v22 = 10;
  }
  else if (v21 >= 0x80)
  {
    int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    int v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    int v22 = 1;
  }
  v5 += v22 + 1;
  if ((v3 & 0x1000) != 0) {
    goto LABEL_57;
  }
LABEL_32:
  if ((v3 & 0x4000) == 0) {
    goto LABEL_33;
  }
LABEL_63:
  unint64_t v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 152);
  if (v25 >= 0x80)
  {
    int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
    int v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    int v26 = 1;
  }
  v5 += v26 + 1;
  if ((v3 & 0x8000) != 0)
  {
LABEL_67:
    int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 156);
    if (v27 >= 0x80)
    {
      int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
      int v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      int v28 = 1;
    }
    v5 += v28 + 2;
  }
LABEL_71:
  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_108;
  }
  if ((v3 & 0x10000) != 0)
  {
    int v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 160);
    if (v29 >= 0x80)
    {
      int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
      int v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      int v30 = 1;
    }
    v5 += v30 + 2;
    if ((v3 & 0x20000) == 0)
    {
LABEL_74:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_75;
      }
      goto LABEL_87;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_74;
  }
  BOOL v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 164);
  if (v31 >= 0x80)
  {
    int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2);
    int v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    int v32 = 1;
  }
  v5 += v32 + 2;
  if ((v3 & 0x40000) == 0)
  {
LABEL_75:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_91;
  }
LABEL_87:
  int v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 168);
  if (v33 >= 0x80)
  {
    int v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2);
    int v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    int v34 = 1;
  }
  v5 += v34 + 2;
  if ((v3 & 0x80000) == 0)
  {
LABEL_76:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_77;
    }
LABEL_95:
    unint64_t v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 184);
    if (v37 >= 0x80)
    {
      int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2) + 2;
      int v3 = *(_DWORD *)(a1 + 192);
    }
    else
    {
      int v38 = 3;
    }
    v5 += v38;
    if ((v3 & 0x200000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_99;
  }
LABEL_91:
  int v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 172);
  if (v35 >= 0x80)
  {
    int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2) + 2;
    int v3 = *(_DWORD *)(a1 + 192);
  }
  else
  {
    int v36 = 3;
  }
  v5 += v36;
  if ((v3 & 0x100000) != 0) {
    goto LABEL_95;
  }
LABEL_77:
  if ((v3 & 0x200000) == 0) {
    goto LABEL_108;
  }
LABEL_99:
  uint64_t v39 = *(void *)(a1 + 176);
  int v40 = *(unsigned __int8 *)(v39 + 23);
  char v41 = v40;
  uint64_t v42 = *(void *)(v39 + 8);
  if ((v40 & 0x80u) == 0) {
    unint64_t v43 = *(unsigned __int8 *)(v39 + 23);
  }
  else {
    unint64_t v43 = v42;
  }
  if (v43 >= 0x80)
  {
    int v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v43, a2);
    int v40 = *(unsigned __int8 *)(v39 + 23);
    uint64_t v42 = *(void *)(v39 + 8);
    char v41 = *(unsigned char *)(v39 + 23);
  }
  else
  {
    int v44 = 1;
  }
  if (v41 < 0) {
    int v40 = v42;
  }
  v5 += v44 + v40 + 2;
LABEL_108:
  int v45 = *(_DWORD *)(a1 + 16);
  int v46 = v45 + v5;
  if (v45 >= 1)
  {
    uint64_t v47 = 0;
    do
    {
      int v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100246138(*(void *)(*(void *)(a1 + 8) + 8 * v47), a2);
      int v49 = (int)v48;
      if (v48 >= 0x80) {
        int v50 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v48, a2);
      }
      else {
        int v50 = 1;
      }
      v46 += v49 + v50;
      ++v47;
    }
    while (v47 < *(int *)(a1 + 16));
  }
  int v51 = *(_DWORD *)(a1 + 64);
  int v52 = v51 + v46;
  if (v51 >= 1)
  {
    uint64_t v53 = 0;
    do
    {
      int v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100246998(*(void *)(*(void *)(a1 + 56) + 8 * v53), a2);
      int v55 = (int)v54;
      if (v54 >= 0x80) {
        int v56 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54, a2);
      }
      else {
        int v56 = 1;
      }
      v52 += v55 + v56;
      ++v53;
    }
    while (v53 < *(int *)(a1 + 64));
  }
  int v57 = *(_DWORD *)(a1 + 88);
  int v58 = v57 + v52;
  if (v57 >= 1)
  {
    uint64_t v59 = 0;
    do
    {
      int v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100247430(*(void *)(*(void *)(a1 + 80) + 8 * v59), a2);
      int v61 = (int)v60;
      if (v60 >= 0x80) {
        int v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60, a2);
      }
      else {
        int v62 = 1;
      }
      v58 += v61 + v62;
      ++v59;
    }
    while (v59 < *(int *)(a1 + 88));
  }
  int v63 = *(_DWORD *)(a1 + 144);
  if (v63 < 1)
  {
    int v65 = 0;
  }
  else
  {
    uint64_t v64 = 0;
    int v65 = 0;
    do
    {
      int v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 136)
                                                                                             + 4 * v64);
      if ((v66 & 0x80000000) != 0)
      {
        int v67 = 10;
      }
      else if (v66 >= 0x80)
      {
        int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66, a2);
        int v63 = *(_DWORD *)(a1 + 144);
      }
      else
      {
        int v67 = 1;
      }
      v65 += v67;
      ++v64;
    }
    while (v64 < v63);
  }
  uint64_t result = (v65 + v58 + v63);
  *(_DWORD *)(a1 + 188) = result;
  return result;
}

void sub_10024CF8C(uint64_t a1, void *lpsrc)
{
  sub_10024ADA0(a1, (uint64_t)lpsrc);
}

uint64_t sub_10024D014()
{
  return 1;
}

double sub_10024D01C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 8), (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8));
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = v4;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 56), (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 56));
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80), (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 80));
    char v6 = *(unsigned char *)(a1 + 104);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(unsigned char *)(a2 + 104) = v6;
    uint64_t v7 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a2 + 112) = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(a2 + 108) = v7;
    uint64_t v8 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = v8;
    uint64_t v9 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    double result = *(double *)(a2 + 144);
    *(void *)(a2 + 136) = v9;
    uint64_t v11 = *(void *)(a1 + 144);
    *(double *)(a1 + 144) = result;
    *(void *)(a2 + 144) = v11;
    LODWORD(v9) = *(_DWORD *)(a1 + 152);
    *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 152) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 156);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
    *(_DWORD *)(a2 + 156) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    *(_DWORD *)(a2 + 160) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 164);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
    *(_DWORD *)(a2 + 164) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 168);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    *(_DWORD *)(a2 + 168) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 172);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(_DWORD *)(a2 + 172) = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 184);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a2 + 184) = v9;
    uint64_t v12 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a2 + 176) = v12;
    LODWORD(v12) = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
    *(_DWORD *)(a2 + 192) = v12;
    LODWORD(v12) = *(_DWORD *)(a1 + 188);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a2 + 188) = v12;
  }
  return result;
}

void *sub_10024D1D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.Model");
}

uint64_t sub_10024D1E0(uint64_t a1, unsigned char *a2)
{
  *(void *)a1 = off_1022A0AF0;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_10024D240(a1, a2);
  return a1;
}

void sub_10024D22C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10024D240(uint64_t a1, unsigned char *a2)
{
  if (a2 == (unsigned char *)a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = a2[16];
  if ((_BYTE)v4)
  {
    if (a2[16])
    {
      char v5 = a2[8];
      *(_DWORD *)(a1 + 16) |= 1u;
      *(unsigned char *)(a1 + 8) = v5;
      int v4 = *((_DWORD *)a2 + 4);
    }
    if ((v4 & 2) != 0)
    {
      char v6 = a2[9];
      *(_DWORD *)(a1 + 16) |= 2u;
      *(unsigned char *)(a1 + 9) = v6;
    }
  }
}

void sub_10024D2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10024D308(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0AF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10024D328(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0AF0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10024D37C()
{
}

uint64_t sub_10024D3CC(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_WORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10024D3E0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      char v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v17 = 0;
      int v10 = (char *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
        if (!result) {
          return result;
        }
        unsigned int v11 = v17;
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
      }
      else
      {
        unsigned int v11 = *v10;
        uint64_t v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }
      *(unsigned char *)(a1 + 8) = v11 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        uint64_t v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_23:
        unsigned int v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v13 = v16;
          int v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v13 = *v9;
          int v14 = (unsigned __int8 *)(v9 + 1);
          *((void *)this + 1) = v14;
        }
        *(unsigned char *)(a1 + 9) = v13 != 0;
        *(_DWORD *)(a1 + 16) |= 2u;
        if (v14 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10024D598(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 16);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(unsigned __int8 *)(v5 + 9);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t sub_10024D604(uint64_t a1)
{
  unsigned int v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  if ((*(_DWORD *)(a1 + 16) & 2) != 0) {
    v1 += 2;
  }
  if (*(_DWORD *)(a1 + 16)) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(a1 + 12) = v2;
  return v2;
}

void sub_10024D62C(uint64_t a1, unsigned char *lpsrc)
{
  sub_10024D240(a1, lpsrc);
}

void sub_10024D6B4(uint64_t a1, unsigned char *a2)
{
  if (a2 != (unsigned char *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10024D240(a1, a2);
  }
}

uint64_t sub_10024D720()
{
  return 1;
}

void *sub_10024D728@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.BundleIdFeatures");
}

void sub_10024D738(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A55EE0();
      }
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 12);
      if ((v6 - 1) >= 4) {
        sub_101A55EB4();
      }
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 4) != 0)
    {
      int v7 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 4u;
      unint64_t v8 = *(std::string **)(a1 + 16);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v8, v7);
      int v4 = *(_DWORD *)(a2 + 44);
      if ((v4 & 8) == 0)
      {
LABEL_14:
        if ((v4 & 0x10) == 0) {
          return;
        }
        goto LABEL_22;
      }
    }
    else if ((v4 & 8) == 0)
    {
      goto LABEL_14;
    }
    uint64_t v9 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    int v10 = *(std::string **)(a1 + 24);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 44) & 0x10) != 0)
    {
LABEL_22:
      unsigned int v11 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 0x10u;
      uint64_t v12 = *(std::string **)(a1 + 32);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v12, v11);
    }
  }
}

void sub_10024D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_10024D944(void *result)
{
  uint64_t v1 = result[2];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[3];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t v5 = result[4];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  return result;
}

void sub_10024DA38(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0B68;
  sub_10024D944(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10024DA8C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0B68;
  sub_10024D944(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10024DAF4()
{
}

uint64_t sub_10024DB54(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0x100000001;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 44) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 44) & 0x10) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_10024DC0C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v21 = 0;
        unint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_24:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v12 = ((1 << v9) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A55EE0();
            }
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }
          int v14 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v14 < v10 && *v14 == 16)
          {
            unsigned int v11 = v14 + 1;
            *((void *)this + 1) = v11;
            goto LABEL_38;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
        if (result)
        {
          unsigned int v9 = v21;
          goto LABEL_24;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_38:
        unsigned int v20 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!result) {
            return result;
          }
          unsigned int v15 = v20;
        }
        else
        {
          unsigned int v15 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v15 - 1 <= 3)
        {
          *(_DWORD *)(a1 + 44) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 != 26) {
          continue;
        }
        *((void *)this + 1) = v16 + 1;
LABEL_48:
        *(_DWORD *)(a1 + 44) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 34) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_54:
        *(_DWORD *)(a1 + 44) |= 8u;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        int v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 42) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_60:
        *(_DWORD *)(a1 + 44) |= 0x10u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_48;
        }
        goto LABEL_19;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        goto LABEL_54;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_60;
        }
        goto LABEL_19;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_10024DFC4(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    if ((*(_DWORD *)(v5 + 44) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_11:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_10024E088(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_50;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 44) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    char v10 = v9;
    uint64_t v11 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v11 = *(void *)(v8 + 8);
      int v3 = *(_DWORD *)(a1 + 44);
      char v10 = *(unsigned char *)(v8 + 23);
    }
    else
    {
      int v13 = 1;
    }
    if (v10 < 0) {
      int v9 = v11;
    }
    uint64_t v4 = (v4 + v13 + v9 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0) {
        goto LABEL_50;
      }
      goto LABEL_41;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v16 = *(unsigned char *)(v14 + 23);
  }
  else
  {
    int v19 = 1;
  }
  if (v16 < 0) {
    int v15 = v17;
  }
  uint64_t v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_41:
    uint64_t v20 = *(void *)(a1 + 32);
    int v21 = *(unsigned __int8 *)(v20 + 23);
    char v22 = v21;
    uint64_t v23 = *(void *)(v20 + 8);
    if ((v21 & 0x80u) == 0) {
      unint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24, a2);
      int v21 = *(unsigned __int8 *)(v20 + 23);
      uint64_t v23 = *(void *)(v20 + 8);
      char v22 = *(unsigned char *)(v20 + 23);
    }
    else
    {
      int v25 = 1;
    }
    if (v22 < 0) {
      int v21 = v23;
    }
    uint64_t v4 = (v4 + v25 + v21 + 1);
  }
LABEL_50:
  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

void sub_10024E250(uint64_t a1, void *lpsrc)
{
  sub_10024D738(a1, (uint64_t)lpsrc);
}

void sub_10024E2D8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10024D738(a1, a2);
  }
}

uint64_t sub_10024E344()
{
  return 1;
}

void *sub_10024E34C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ReceivedEventAction");
}

void sub_10024E35C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A55F38();
      }
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 12);
      if ((v6 - 1) >= 2) {
        sub_101A55F0C();
      }
      *(_DWORD *)(a1 + 44) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 4) != 0)
    {
      int v7 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 44) |= 4u;
      uint64_t v8 = *(std::string **)(a1 + 16);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v8, v7);
      int v4 = *(_DWORD *)(a2 + 44);
      if ((v4 & 8) == 0)
      {
LABEL_14:
        if ((v4 & 0x10) == 0) {
          return;
        }
        goto LABEL_22;
      }
    }
    else if ((v4 & 8) == 0)
    {
      goto LABEL_14;
    }
    int v9 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 8u;
    char v10 = *(std::string **)(a1 + 24);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 44) & 0x10) != 0)
    {
LABEL_22:
      uint64_t v11 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 44) |= 0x10u;
      unint64_t v12 = *(std::string **)(a1 + 32);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v12, v11);
    }
  }
}

void sub_10024E550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10024E568(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0BE0;
  sub_10024D944(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10024E5BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0BE0;
  sub_10024D944(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10024E624()
{
}

uint64_t sub_10024E688(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 44);
  if (v1)
  {
    *(void *)(result + 8) = 0x10000000DLL;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 44) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 44) & 0x10) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_10024E744(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    unsigned int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v21 = 0;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_24:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v12 = ((1 << v9) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A55F38();
            }
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }
          uint64_t v14 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v14 < v10 && *v14 == 16)
          {
            uint64_t v11 = v14 + 1;
            *((void *)this + 1) = v11;
            goto LABEL_38;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
        if (result)
        {
          unsigned int v9 = v21;
          goto LABEL_24;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_38:
        unsigned int v20 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!result) {
            return result;
          }
          unsigned int v15 = v20;
        }
        else
        {
          unsigned int v15 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v15 - 1 <= 1)
        {
          *(_DWORD *)(a1 + 44) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        char v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 != 26) {
          continue;
        }
        *((void *)this + 1) = v16 + 1;
LABEL_48:
        *(_DWORD *)(a1 + 44) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 34) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_54:
        *(_DWORD *)(a1 + 44) |= 8u;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        unint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 42) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_60:
        *(_DWORD *)(a1 + 44) |= 0x10u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_48;
        }
        goto LABEL_19;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        goto LABEL_54;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_60;
        }
        goto LABEL_19;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_10024EAFC(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    if ((*(_DWORD *)(v5 + 44) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_11:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_10024EBC0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_50;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 44) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    char v10 = v9;
    uint64_t v11 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v11 = *(void *)(v8 + 8);
      int v3 = *(_DWORD *)(a1 + 44);
      char v10 = *(unsigned char *)(v8 + 23);
    }
    else
    {
      int v13 = 1;
    }
    if (v10 < 0) {
      int v9 = v11;
    }
    uint64_t v4 = (v4 + v13 + v9 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0) {
        goto LABEL_50;
      }
      goto LABEL_41;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v16 = *(unsigned char *)(v14 + 23);
  }
  else
  {
    int v19 = 1;
  }
  if (v16 < 0) {
    int v15 = v17;
  }
  uint64_t v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_41:
    uint64_t v20 = *(void *)(a1 + 32);
    int v21 = *(unsigned __int8 *)(v20 + 23);
    char v22 = v21;
    uint64_t v23 = *(void *)(v20 + 8);
    if ((v21 & 0x80u) == 0) {
      unint64_t v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24, a2);
      int v21 = *(unsigned __int8 *)(v20 + 23);
      uint64_t v23 = *(void *)(v20 + 8);
      char v22 = *(unsigned char *)(v20 + 23);
    }
    else
    {
      int v25 = 1;
    }
    if (v22 < 0) {
      int v21 = v23;
    }
    uint64_t v4 = (v4 + v25 + v21 + 1);
  }
LABEL_50:
  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

void sub_10024ED88(uint64_t a1, void *lpsrc)
{
  sub_10024E35C(a1, (uint64_t)lpsrc);
}

void sub_10024EE10(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10024E35C(a1, a2);
  }
}

uint64_t sub_10024EE7C()
{
  return 1;
}

void *sub_10024EE84@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.RecordingRequest");
}

void sub_10024EE94(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 32);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A55F64();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v5;
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 40);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0) {
          return;
        }
        goto LABEL_21;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    *(_DWORD *)(a1 + 40) |= 4u;
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      operator new();
    }
    int v9 = *(unsigned char **)(a2 + 16);
    if (!v9) {
      int v9 = *(unsigned char **)(qword_1024899E0 + 16);
    }
    sub_10024D240(v8, v9);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_21:
      char v10 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      uint64_t v11 = *(std::string **)(a1 + 24);
      if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v11, v10);
    }
  }
}

void sub_10024F088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_10024F0A0(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[3];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  if ((void *)qword_1024899E0 != result)
  {
    uint64_t result = (void *)result[2];
    if (result)
    {
      unsigned int v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  return result;
}

void sub_10024F198(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0C58;
  sub_10024F0A0(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10024F1EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0C58;
  sub_10024F0A0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10024F254()
{
}

uint64_t sub_10024F2B8(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 2;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    int v3 = *(_DWORD *)(result + 40);
    if ((v3 & 4) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 16)) {
          *(_WORD *)(v4 + 8) = 0;
        }
        *(_DWORD *)(v4 + 16) = 0;
        int v3 = *(_DWORD *)(result + 40);
      }
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v5 = *(void *)(result + 24);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10024F35C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v25 = 0;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!result) {
            return result;
          }
          unsigned int v9 = v25;
        }
        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }
        if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v11 = ((1 << v9) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
            sub_101A55F64();
          }
          *(_DWORD *)(a1 + 40) |= 1u;
          *(_DWORD *)(a1 + 32) = v9;
        }
        int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
LABEL_37:
        *(_DWORD *)(a1 + 40) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 26) {
          continue;
        }
        *((void *)this + 1) = v14 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v15 = *(void *)(a1 + 16);
        if (!v15) {
          operator new();
        }
        unsigned int v26 = 0;
        char v16 = (char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0; {
        }
          }
        else
        {
          unsigned int v26 = *v16;
          *((void *)this + 1) = v16 + 1;
        }
        int v17 = *((_DWORD *)this + 14);
        int v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 < v18)
        {
          int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v26);
          if (sub_10024D3E0(v15, this, v20))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
              int v21 = *((_DWORD *)this + 14);
              BOOL v22 = __OFSUB__(v21, 1);
              int v23 = v21 - 1;
              if (v23 < 0 == v22) {
                *((_DWORD *)this + 14) = v23;
              }
              unint64_t v24 = (unsigned char *)*((void *)this + 1);
              if ((unint64_t)v24 < *((void *)this + 2) && *v24 == 34)
              {
                *((void *)this + 1) = v24 + 1;
LABEL_57:
                *(_DWORD *)(a1 + 40) |= 8u;
                if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
                  operator new();
                }
                uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
                if (!result) {
                  return result;
                }
                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1;
                  *((unsigned char *)this + 36) = 1;
                  return result;
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_43;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_57;
        }
        goto LABEL_18;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10024F734(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1024899E0 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_11:
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return result;
}

uint64_t sub_10024F7EC(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_42;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v8 = *(unsigned char *)(v6 + 23);
  }
  else
  {
    int v11 = 1;
  }
  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1024899E0 + 16);
  }
  int v13 = 2 * (*(_DWORD *)(v12 + 16) & 1);
  if ((*(_DWORD *)(v12 + 16) & 2) != 0) {
    v13 += 2;
  }
  if (*(_DWORD *)(v12 + 16)) {
    int v14 = v13;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(v12 + 12) = v14;
  uint64_t v4 = (v4 + v14 + 2);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_33:
    uint64_t v15 = *(void *)(a1 + 24);
    int v16 = *(unsigned __int8 *)(v15 + 23);
    char v17 = v16;
    uint64_t v18 = *(void *)(v15 + 8);
    if ((v16 & 0x80u) == 0) {
      unint64_t v19 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19, a2);
      int v16 = *(unsigned __int8 *)(v15 + 23);
      uint64_t v18 = *(void *)(v15 + 8);
      char v17 = *(unsigned char *)(v15 + 23);
    }
    else
    {
      int v20 = 1;
    }
    if (v17 < 0) {
      int v16 = v18;
    }
    uint64_t v4 = (v4 + v20 + v16 + 1);
  }
LABEL_42:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

void sub_10024F968(uint64_t a1, void *lpsrc)
{
  sub_10024EE94(a1, (uint64_t)lpsrc);
}

void sub_10024F9F0(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10024EE94(a1, a2);
  }
}

uint64_t sub_10024FA5C()
{
  return 1;
}

void *sub_10024FA64@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.AppLaunch");
}

void sub_10024FA74(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A55F90();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_10024FB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10024FBA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0CD0;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10024FBF4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0CD0;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10024FC5C()
{
}

uint64_t sub_10024FCBC(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 4;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10024FD0C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v14 = 0;
      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v14);
        if (!result) {
          return result;
        }
        unsigned int v9 = v14;
      }
      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_101A55F90();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }
      uint64_t v12 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10024FF18(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return result;
}

uint64_t sub_10024FF84(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 24);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_22:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_10025005C(uint64_t a1, void *lpsrc)
{
  sub_10024FA74(a1, (uint64_t)lpsrc);
}

void sub_1002500E4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10024FA74(a1, a2);
  }
}

uint64_t sub_100250150()
{
  return 1;
}

void *sub_100250158@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.BacklightOn");
}

void sub_100250168(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0)) {
      sub_101A55FBC();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_100250220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100250238(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0D48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100250258(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0D48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1002502AC()
{
}

uint64_t sub_100250304(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 5;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10025031C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v8 = v12;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101A55FBC();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100250484(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_1002504A0(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002504FC(uint64_t a1, void *lpsrc)
{
  sub_100250168(a1, (uint64_t)lpsrc);
}

void sub_100250584(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100250168(a1, a2);
  }
}

uint64_t sub_1002505F0()
{
  return 1;
}

void *sub_1002505F8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.BatteryChargerConnected");
}

void sub_100250608(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 32);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A55FE8();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v5;
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 40);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0) {
          return;
        }
        goto LABEL_19;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    unsigned int v8 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    BOOL v9 = *(std::string **)(a1 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v9, v8);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_19:
      unint64_t v10 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      int v11 = *(std::string **)(a1 + 24);
      if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v11, v10);
    }
  }
}

void sub_1002507E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1002507F8(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  return result;
}

void sub_1002508EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0DC0;
  sub_1002507F8(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100250940(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0DC0;
  sub_1002507F8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1002509A8()
{
}

uint64_t sub_100250A0C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 14;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 40) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 40) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100250AC4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          int v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v16 = 0;
          unsigned int v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
            if (!result) {
              return result;
            }
            unsigned int v9 = v16;
          }
          else
          {
            unsigned int v9 = *v8;
            *((void *)this + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A55FE8();
            }
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }
          unsigned int v12 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
          {
            *((void *)this + 1) = v12 + 1;
            goto LABEL_37;
          }
          continue;
        case 2u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_18;
          }
LABEL_37:
          *(_DWORD *)(a1 + 40) |= 2u;
          if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          int v13 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 26) {
            continue;
          }
          *((void *)this + 1) = v13 + 1;
LABEL_43:
          *(_DWORD *)(a1 + 40) |= 4u;
          if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          unsigned int v14 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 34) {
            continue;
          }
          *((void *)this + 1) = v14 + 1;
LABEL_49:
          *(_DWORD *)(a1 + 40) |= 8u;
          if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          if (*((void *)this + 1) != *((void *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        case 3u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_43;
          }
          goto LABEL_18;
        case 4u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_49;
          }
          goto LABEL_18;
        default:
          int v7 = TagFallback & 7;
LABEL_18:
          if (v7 == 4) {
            return 1;
          }
          if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
          return 0;
          }
      }
    }
    break;
  }
  unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = TagFallback;
  if (TagFallback) {
    goto LABEL_6;
  }
  return 1;
}

uint64_t sub_100250DF4(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 40);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    int v5 = *(_DWORD *)(v4 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      if ((*(_DWORD *)(v4 + 40) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v5 = *(_DWORD *)(v4 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v5 & 8) == 0) {
    return result;
  }
LABEL_9:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_100250E9C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_43;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v8 = *(unsigned char *)(v6 + 23);
  }
  else
  {
    int v11 = 1;
  }
  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v14 = *(unsigned char *)(v12 + 23);
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < 0) {
    int v13 = v15;
  }
  uint64_t v4 = (v4 + v17 + v13 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_34:
    uint64_t v18 = *(void *)(a1 + 24);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    char v20 = v19;
    uint64_t v21 = *(void *)(v18 + 8);
    if ((v19 & 0x80u) == 0) {
      unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 >= 0x80)
    {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, a2);
      int v19 = *(unsigned __int8 *)(v18 + 23);
      uint64_t v21 = *(void *)(v18 + 8);
      char v20 = *(unsigned char *)(v18 + 23);
    }
    else
    {
      int v23 = 1;
    }
    if (v20 < 0) {
      int v19 = v21;
    }
    uint64_t v4 = (v4 + v23 + v19 + 1);
  }
LABEL_43:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

void sub_10025102C(uint64_t a1, void *lpsrc)
{
  sub_100250608(a1, (uint64_t)lpsrc);
}

void sub_1002510B4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100250608(a1, a2);
  }
}

uint64_t sub_100251120()
{
  return 1;
}

void *sub_100251128@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.TruthLabelDonation");
}

void sub_100251138(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0)) {
      sub_101A56014();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_1002511F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100251208(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0E38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100251228(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0E38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025127C()
{
}

uint64_t sub_1002512D4(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 7;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002512EC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v8 = v12;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101A56014();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100251454(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_100251470(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002514CC(uint64_t a1, void *lpsrc)
{
  sub_100251138(a1, (uint64_t)lpsrc);
}

void sub_100251554(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100251138(a1, a2);
  }
}

uint64_t sub_1002515C0()
{
  return 1;
}

void *sub_1002515C8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ForcedRecording");
}

void sub_1002515D8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }
  int v4 = *(_DWORD *)(a2 + 116);
  if (!(_BYTE)v4) {
    goto LABEL_38;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 64);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101A56040();
    }
    *(_DWORD *)(a1 + 116) |= 1u;
    *(_DWORD *)(a1 + 64) = v5;
    int v4 = *(_DWORD *)(a2 + 116);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v6 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 116) |= 2u;
    int v7 = *(std::string **)(a1 + 8);
    if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v7, v6);
    int v4 = *(_DWORD *)(a2 + 116);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  unsigned int v8 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 116) |= 4u;
  BOOL v9 = *(std::string **)(a1 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v9, v8);
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_23:
  unint64_t v10 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 116) |= 8u;
  int v11 = *(std::string **)(a1 + 24);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v11, v10);
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    char v14 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 116) |= 0x20u;
    uint64_t v15 = *(std::string **)(a1 + 40);
    if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v15, v14);
    int v4 = *(_DWORD *)(a2 + 116);
    if ((v4 & 0x40) == 0)
    {
LABEL_15:
      if ((v4 & 0x80) == 0) {
        goto LABEL_38;
      }
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_26:
  unsigned int v12 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 116) |= 0x10u;
  int v13 = *(std::string **)(a1 + 32);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v13, v12);
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v4 & 0x40) == 0) {
    goto LABEL_15;
  }
LABEL_32:
  unint64_t v16 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 116) |= 0x40u;
  int v17 = *(std::string **)(a1 + 48);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v17, v16);
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 0x80) != 0)
  {
LABEL_35:
    uint64_t v18 = *(const std::string **)(a2 + 56);
    *(_DWORD *)(a1 + 116) |= 0x80u;
    int v19 = *(std::string **)(a1 + 56);
    if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v19, v18);
    int v4 = *(_DWORD *)(a2 + 116);
  }
LABEL_38:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    char v20 = *(const std::string **)(a2 + 72);
    *(_DWORD *)(a1 + 116) |= 0x100u;
    uint64_t v21 = *(std::string **)(a1 + 72);
    if (v21 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v21, v20);
    int v4 = *(_DWORD *)(a2 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_41:
      if ((v4 & 0x400) == 0) {
        goto LABEL_42;
      }
      goto LABEL_53;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_41;
  }
  unint64_t v22 = *(const std::string **)(a2 + 80);
  *(_DWORD *)(a1 + 116) |= 0x200u;
  int v23 = *(std::string **)(a1 + 80);
  if (v23 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v23, v22);
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_42:
    if ((v4 & 0x800) == 0) {
      goto LABEL_43;
    }
    goto LABEL_54;
  }
LABEL_53:
  char v24 = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 116) |= 0x400u;
  *(unsigned char *)(a1 + 68) = v24;
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_43:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_55;
  }
LABEL_54:
  char v25 = *(unsigned char *)(a2 + 69);
  *(_DWORD *)(a1 + 116) |= 0x800u;
  *(unsigned char *)(a1 + 69) = v25;
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_44:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_58;
  }
LABEL_55:
  unsigned int v26 = *(const std::string **)(a2 + 88);
  *(_DWORD *)(a1 + 116) |= 0x1000u;
  int v27 = *(std::string **)(a1 + 88);
  if (v27 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v27, v26);
  int v4 = *(_DWORD *)(a2 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_45:
    if ((v4 & 0x4000) == 0) {
      return;
    }
    goto LABEL_61;
  }
LABEL_58:
  int v28 = *(const std::string **)(a2 + 96);
  *(_DWORD *)(a1 + 116) |= 0x2000u;
  int v29 = *(std::string **)(a1 + 96);
  if (v29 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v29, v28);
  if ((*(_DWORD *)(a2 + 116) & 0x4000) != 0)
  {
LABEL_61:
    int v30 = *(const std::string **)(a2 + 104);
    *(_DWORD *)(a1 + 116) |= 0x4000u;
    BOOL v31 = *(std::string **)(a1 + 104);
    if (v31 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v31, v30);
  }
}

void sub_100251B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_100251B50(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  uint64_t v7 = result[4];
  if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    operator delete();
  }
  uint64_t v9 = result[5];
  if ((_UNKNOWN *)v9 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v9)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    operator delete();
  }
  uint64_t v10 = result[6];
  if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    operator delete();
  }
  uint64_t v11 = result[7];
  if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    operator delete();
  }
  uint64_t v12 = result[9];
  if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    operator delete();
  }
  uint64_t v13 = result[10];
  if ((_UNKNOWN *)v13 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v13)
  {
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    operator delete();
  }
  uint64_t v14 = result[11];
  if ((_UNKNOWN *)v14 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v14)
  {
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    operator delete();
  }
  uint64_t v15 = result[12];
  if ((_UNKNOWN *)v15 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v15)
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    operator delete();
  }
  uint64_t v16 = result[13];
  if ((_UNKNOWN *)v16 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v16)
  {
    if (*(char *)(v16 + 23) < 0) {
      operator delete(*(void **)v16);
    }
    operator delete();
  }
  return result;
}

void sub_100251E3C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0EB0;
  sub_100251B50(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100251E90(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0EB0;
  sub_100251B50(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100251EF8()
{
}

uint64_t sub_100251F6C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 116);
  if (v1)
  {
    *(_DWORD *)(result + 64) = 9;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 116) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 116) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 116) & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 116) & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(result + 40);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 116) & 0x40) != 0)
    {
      uint64_t v7 = *(void *)(result + 48);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 116) & 0x80) != 0)
    {
      uint64_t v8 = *(void *)(result + 56);
      if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
  }
  int v9 = *(_DWORD *)(result + 116);
  if ((v9 & 0xFF00) != 0)
  {
    if ((v9 & 0x100) != 0)
    {
      uint64_t v10 = *(void *)(result + 72);
      if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 117) & 2) != 0)
    {
      uint64_t v11 = *(void *)(result + 80);
      if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v11 + 23) < 0)
        {
          **(unsigned char **)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v11 = 0;
          *(unsigned char *)(v11 + 23) = 0;
        }
      }
    }
    *(_WORD *)(result + 68) = 0;
    if ((*(unsigned char *)(result + 117) & 0x10) != 0)
    {
      uint64_t v12 = *(void *)(result + 88);
      if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(unsigned char **)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v12 = 0;
          *(unsigned char *)(v12 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 117) & 0x20) != 0)
    {
      uint64_t v13 = *(void *)(result + 96);
      if ((_UNKNOWN *)v13 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(unsigned char **)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v13 = 0;
          *(unsigned char *)(v13 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 117) & 0x40) != 0)
    {
      uint64_t v14 = *(void *)(result + 104);
      if ((_UNKNOWN *)v14 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v14 + 23) < 0)
        {
          **(unsigned char **)uint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_10025222C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        unsigned int v33 = 0;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_44:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v14 = ((1 << v9) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A56040();
            }
            *(_DWORD *)(a1 + 116) |= 1u;
            *(_DWORD *)(a1 + 64) = v9;
          }
          uint64_t v16 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 18)
          {
            *((void *)this + 1) = v16 + 1;
            goto LABEL_58;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (result)
        {
          unsigned int v9 = v33;
          goto LABEL_44;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_39;
        }
LABEL_58:
        *(_DWORD *)(a1 + 116) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 26) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_64:
        *(_DWORD *)(a1 + 116) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 34) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_70:
        *(_DWORD *)(a1 + 116) |= 8u;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v19 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 != 42) {
          continue;
        }
        *((void *)this + 1) = v19 + 1;
LABEL_76:
        *(_DWORD *)(a1 + 116) |= 0x10u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v20 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v20 >= *((void *)this + 2) || *v20 != 50) {
          continue;
        }
        *((void *)this + 1) = v20 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 116) |= 0x20u;
        if (*(_UNKNOWN **)(a1 + 40) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 58) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_88:
        *(_DWORD *)(a1 + 116) |= 0x40u;
        if (*(_UNKNOWN **)(a1 + 48) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 != 66) {
          continue;
        }
        *((void *)this + 1) = v22 + 1;
LABEL_94:
        *(_DWORD *)(a1 + 116) |= 0x80u;
        if (*(_UNKNOWN **)(a1 + 56) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v23 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 != 74) {
          continue;
        }
        *((void *)this + 1) = v23 + 1;
LABEL_100:
        *(_DWORD *)(a1 + 116) |= 0x100u;
        if (*(_UNKNOWN **)(a1 + 72) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v24 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v24 >= *((void *)this + 2) || *v24 != 82) {
          continue;
        }
        *((void *)this + 1) = v24 + 1;
LABEL_106:
        *(_DWORD *)(a1 + 116) |= 0x200u;
        if (*(_UNKNOWN **)(a1 + 80) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v25 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v25 >= v10 || *v25 != 88) {
          continue;
        }
        uint64_t v13 = v25 + 1;
        *((void *)this + 1) = v13;
LABEL_112:
        unsigned int v35 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v35);
          if (!result) {
            return result;
          }
          unsigned int v26 = v35;
          int v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v26 = *v13;
          int v27 = v13 + 1;
          *((void *)this + 1) = v27;
        }
        *(unsigned char *)(a1 + 68) = v26 != 0;
        *(_DWORD *)(a1 + 116) |= 0x400u;
        if ((unint64_t)v27 >= v10 || *v27 != 96) {
          continue;
        }
        uint64_t v11 = v27 + 1;
        *((void *)this + 1) = v11;
LABEL_120:
        unsigned int v34 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!result) {
            return result;
          }
          unsigned int v28 = v34;
          int v29 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v28 = *v11;
          int v29 = v11 + 1;
          *((void *)this + 1) = v29;
        }
        *(unsigned char *)(a1 + 69) = v28 != 0;
        int v12 = *(_DWORD *)(a1 + 116) | 0x800;
        *(_DWORD *)(a1 + 116) = v12;
        if ((unint64_t)v29 >= v10 || *v29 != 106) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_128:
        *(_DWORD *)(a1 + 116) = v12 | 0x1000;
        if (*(_UNKNOWN **)(a1 + 88) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v30 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 != 114) {
          continue;
        }
        *((void *)this + 1) = v30 + 1;
LABEL_134:
        *(_DWORD *)(a1 + 116) |= 0x2000u;
        if (*(_UNKNOWN **)(a1 + 96) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        BOOL v31 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v31 >= *((void *)this + 2) || *v31 != 122) {
          continue;
        }
        *((void *)this + 1) = v31 + 1;
LABEL_140:
        *(_DWORD *)(a1 + 116) |= 0x4000u;
        if (*(_UNKNOWN **)(a1 + 104) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_64;
        }
        goto LABEL_39;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_70;
        }
        goto LABEL_39;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_76;
        }
        goto LABEL_39;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_82;
        }
        goto LABEL_39;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_88;
        }
        goto LABEL_39;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_94;
        }
        goto LABEL_39;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_100;
        }
        goto LABEL_39;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_106;
        }
        goto LABEL_39;
      case 0xBu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_112;
      case 0xCu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_120;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_39;
        }
        int v12 = *(_DWORD *)(a1 + 116);
        goto LABEL_128;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_39;
        }
        goto LABEL_134;
      case 0xFu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_140;
        }
        goto LABEL_39;
      default:
        int v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100252AE4(uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 116);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 64), a2, a4);
    int v6 = *(_DWORD *)(v5 + 116);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned __int8 *)(v5 + 68), a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned __int8 *)(v5 + 69), a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 116) & 0x4000) == 0) {
      return result;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x2000) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v6 & 0x4000) == 0) {
    return result;
  }
LABEL_31:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t sub_100252CC0(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 116);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_82;
  }
  if (v3)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      int v3 = *(_DWORD *)(a1 + 116);
    }
    else
    {
      int v6 = 1;
    }
    uint64_t v4 = (v6 + 1);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 23);
  char v9 = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v10 = *(void *)(v7 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v9 = *(unsigned char *)(v7 + 23);
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < 0) {
    int v8 = v10;
  }
  uint64_t v4 = (v4 + v12 + v8 + 1);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v4 = (v4 + v18 + v14 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  int v20 = *(unsigned __int8 *)(v19 + 23);
  char v21 = v20;
  uint64_t v22 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    unint64_t v23 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    unint64_t v23 = v22;
  }
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23, a2);
    int v20 = *(unsigned __int8 *)(v19 + 23);
    uint64_t v22 = *(void *)(v19 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v21 = *(unsigned char *)(v19 + 23);
  }
  else
  {
    int v24 = 1;
  }
  if (v21 < 0) {
    int v20 = v22;
  }
  uint64_t v4 = (v4 + v24 + v20 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_46:
  uint64_t v25 = *(void *)(a1 + 32);
  int v26 = *(unsigned __int8 *)(v25 + 23);
  char v27 = v26;
  uint64_t v28 = *(void *)(v25 + 8);
  if ((v26 & 0x80u) == 0) {
    unint64_t v29 = *(unsigned __int8 *)(v25 + 23);
  }
  else {
    unint64_t v29 = v28;
  }
  if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29, a2);
    int v26 = *(unsigned __int8 *)(v25 + 23);
    uint64_t v28 = *(void *)(v25 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v27 = *(unsigned char *)(v25 + 23);
  }
  else
  {
    int v30 = 1;
  }
  if (v27 < 0) {
    int v26 = v28;
  }
  uint64_t v4 = (v4 + v30 + v26 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_55:
  uint64_t v31 = *(void *)(a1 + 40);
  int v32 = *(unsigned __int8 *)(v31 + 23);
  char v33 = v32;
  uint64_t v34 = *(void *)(v31 + 8);
  if ((v32 & 0x80u) == 0) {
    unint64_t v35 = *(unsigned __int8 *)(v31 + 23);
  }
  else {
    unint64_t v35 = v34;
  }
  if (v35 >= 0x80)
  {
    int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v35, a2);
    int v32 = *(unsigned __int8 *)(v31 + 23);
    uint64_t v34 = *(void *)(v31 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v33 = *(unsigned char *)(v31 + 23);
  }
  else
  {
    int v36 = 1;
  }
  if (v33 < 0) {
    int v32 = v34;
  }
  uint64_t v4 = (v4 + v36 + v32 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0) {
      goto LABEL_82;
    }
    goto LABEL_73;
  }
LABEL_64:
  uint64_t v37 = *(void *)(a1 + 48);
  int v38 = *(unsigned __int8 *)(v37 + 23);
  char v39 = v38;
  uint64_t v40 = *(void *)(v37 + 8);
  if ((v38 & 0x80u) == 0) {
    unint64_t v41 = *(unsigned __int8 *)(v37 + 23);
  }
  else {
    unint64_t v41 = v40;
  }
  if (v41 >= 0x80)
  {
    int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41, a2);
    int v38 = *(unsigned __int8 *)(v37 + 23);
    uint64_t v40 = *(void *)(v37 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v39 = *(unsigned char *)(v37 + 23);
  }
  else
  {
    int v42 = 1;
  }
  if (v39 < 0) {
    int v38 = v40;
  }
  uint64_t v4 = (v4 + v42 + v38 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_73:
    uint64_t v43 = *(void *)(a1 + 56);
    int v44 = *(unsigned __int8 *)(v43 + 23);
    char v45 = v44;
    uint64_t v46 = *(void *)(v43 + 8);
    if ((v44 & 0x80u) == 0) {
      unint64_t v47 = *(unsigned __int8 *)(v43 + 23);
    }
    else {
      unint64_t v47 = v46;
    }
    if (v47 >= 0x80)
    {
      int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v47, a2);
      int v44 = *(unsigned __int8 *)(v43 + 23);
      uint64_t v46 = *(void *)(v43 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v45 = *(unsigned char *)(v43 + 23);
    }
    else
    {
      int v48 = 1;
    }
    if (v45 < 0) {
      int v44 = v46;
    }
    uint64_t v4 = (v4 + v48 + v44 + 1);
  }
LABEL_82:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_139;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v49 = *(void *)(a1 + 72);
    int v50 = *(unsigned __int8 *)(v49 + 23);
    char v51 = v50;
    uint64_t v52 = *(void *)(v49 + 8);
    if ((v50 & 0x80u) == 0) {
      unint64_t v53 = *(unsigned __int8 *)(v49 + 23);
    }
    else {
      unint64_t v53 = v52;
    }
    if (v53 >= 0x80)
    {
      int v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v53, a2);
      int v50 = *(unsigned __int8 *)(v49 + 23);
      uint64_t v52 = *(void *)(v49 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v51 = *(unsigned char *)(v49 + 23);
    }
    else
    {
      int v54 = 1;
    }
    if (v51 < 0) {
      int v50 = v52;
    }
    LODWORD(v4) = v4 + v54 + v50 + 1;
  }
  if ((v3 & 0x200) != 0)
  {
    uint64_t v55 = *(void *)(a1 + 80);
    int v56 = *(unsigned __int8 *)(v55 + 23);
    char v57 = v56;
    uint64_t v58 = *(void *)(v55 + 8);
    if ((v56 & 0x80u) == 0) {
      unint64_t v59 = *(unsigned __int8 *)(v55 + 23);
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59 >= 0x80)
    {
      int v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v59, a2);
      int v56 = *(unsigned __int8 *)(v55 + 23);
      uint64_t v58 = *(void *)(v55 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v57 = *(unsigned char *)(v55 + 23);
    }
    else
    {
      int v60 = 1;
    }
    if (v57 < 0) {
      int v56 = v58;
    }
    LODWORD(v4) = v4 + v60 + v56 + 1;
  }
  unsigned int v61 = v4 + 2;
  if ((v3 & 0x400) == 0) {
    unsigned int v61 = v4;
  }
  if ((v3 & 0x800) != 0) {
    uint64_t v4 = v61 + 2;
  }
  else {
    uint64_t v4 = v61;
  }
  if ((v3 & 0x1000) != 0)
  {
    uint64_t v62 = *(void *)(a1 + 88);
    int v63 = *(unsigned __int8 *)(v62 + 23);
    char v64 = v63;
    uint64_t v65 = *(void *)(v62 + 8);
    if ((v63 & 0x80u) == 0) {
      unint64_t v66 = *(unsigned __int8 *)(v62 + 23);
    }
    else {
      unint64_t v66 = v65;
    }
    if (v66 >= 0x80)
    {
      int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v66, a2);
      int v63 = *(unsigned __int8 *)(v62 + 23);
      uint64_t v65 = *(void *)(v62 + 8);
      int v3 = *(_DWORD *)(a1 + 116);
      char v64 = *(unsigned char *)(v62 + 23);
    }
    else
    {
      int v67 = 1;
    }
    if (v64 < 0) {
      int v63 = v65;
    }
    uint64_t v4 = (v4 + v67 + v63 + 1);
    if ((v3 & 0x2000) == 0)
    {
LABEL_110:
      if ((v3 & 0x4000) == 0) {
        goto LABEL_139;
      }
      goto LABEL_130;
    }
  }
  else if ((v3 & 0x2000) == 0)
  {
    goto LABEL_110;
  }
  uint64_t v68 = *(void *)(a1 + 96);
  int v69 = *(unsigned __int8 *)(v68 + 23);
  char v70 = v69;
  uint64_t v71 = *(void *)(v68 + 8);
  if ((v69 & 0x80u) == 0) {
    unint64_t v72 = *(unsigned __int8 *)(v68 + 23);
  }
  else {
    unint64_t v72 = v71;
  }
  if (v72 >= 0x80)
  {
    int v73 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v72, a2);
    int v69 = *(unsigned __int8 *)(v68 + 23);
    uint64_t v71 = *(void *)(v68 + 8);
    int v3 = *(_DWORD *)(a1 + 116);
    char v70 = *(unsigned char *)(v68 + 23);
  }
  else
  {
    int v73 = 1;
  }
  if (v70 < 0) {
    int v69 = v71;
  }
  uint64_t v4 = (v4 + v73 + v69 + 1);
  if ((v3 & 0x4000) != 0)
  {
LABEL_130:
    uint64_t v74 = *(void *)(a1 + 104);
    int v75 = *(unsigned __int8 *)(v74 + 23);
    char v76 = v75;
    uint64_t v77 = *(void *)(v74 + 8);
    if ((v75 & 0x80u) == 0) {
      unint64_t v78 = *(unsigned __int8 *)(v74 + 23);
    }
    else {
      unint64_t v78 = v77;
    }
    if (v78 >= 0x80)
    {
      int v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v78, a2);
      int v75 = *(unsigned __int8 *)(v74 + 23);
      uint64_t v77 = *(void *)(v74 + 8);
      char v76 = *(unsigned char *)(v74 + 23);
    }
    else
    {
      int v79 = 1;
    }
    if (v76 < 0) {
      int v75 = v77;
    }
    uint64_t v4 = (v4 + v79 + v75 + 1);
  }
LABEL_139:
  *(_DWORD *)(a1 + 112) = v4;
  return v4;
}

void sub_1002531A0(uint64_t a1, void *lpsrc)
{
  sub_1002515D8(a1, (uint64_t)lpsrc);
}

void sub_100253228(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_1002515D8(a1, a2);
  }
}

uint64_t sub_100253294()
{
  return 1;
}

void *sub_10025329C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.HomeKitAccessory");
}

void sub_1002532AC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }
  int v4 = *(_DWORD *)(a2 + 84);
  if (!(_BYTE)v4) {
    goto LABEL_38;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 48);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101A5606C();
    }
    *(_DWORD *)(a1 + 84) |= 1u;
    *(_DWORD *)(a1 + 48) = v5;
    int v4 = *(_DWORD *)(a2 + 84);
  }
  if ((v4 & 2) != 0)
  {
    int v6 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 84) |= 2u;
    uint64_t v7 = *(std::string **)(a1 + 8);
    if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v7, v6);
    int v4 = *(_DWORD *)(a2 + 84);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  int v8 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 84) |= 4u;
  char v9 = *(std::string **)(a1 + 16);
  if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v9, v8);
  int v4 = *(_DWORD *)(a2 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v10 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 84) |= 8u;
  unint64_t v11 = *(std::string **)(a1 + 24);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v11, v10);
  int v4 = *(_DWORD *)(a2 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      goto LABEL_14;
    }
LABEL_29:
    int v14 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 84) |= 0x20u;
    char v15 = *(std::string **)(a1 + 40);
    if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v15, v14);
    int v4 = *(_DWORD *)(a2 + 84);
    if ((v4 & 0x40) == 0)
    {
LABEL_15:
      if ((v4 & 0x80) == 0) {
        goto LABEL_38;
      }
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_26:
  int v12 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 84) |= 0x10u;
  uint64_t v13 = *(std::string **)(a1 + 32);
  if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v13, v12);
  int v4 = *(_DWORD *)(a2 + 84);
  if ((v4 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_14:
  if ((v4 & 0x40) == 0) {
    goto LABEL_15;
  }
LABEL_32:
  uint64_t v16 = *(const std::string **)(a2 + 56);
  *(_DWORD *)(a1 + 84) |= 0x40u;
  unint64_t v17 = *(std::string **)(a1 + 56);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v17, v16);
  int v4 = *(_DWORD *)(a2 + 84);
  if ((v4 & 0x80) != 0)
  {
LABEL_35:
    int v18 = *(const std::string **)(a2 + 64);
    *(_DWORD *)(a1 + 84) |= 0x80u;
    uint64_t v19 = *(std::string **)(a1 + 64);
    if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v19, v18);
    int v4 = *(_DWORD *)(a2 + 84);
  }
LABEL_38:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) == 0)
  {
    if ((v4 & 0x200) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    char v21 = *(unsigned char *)(a2 + 53);
    *(_DWORD *)(a1 + 84) |= 0x200u;
    *(unsigned char *)(a1 + 53) = v21;
    if ((*(_DWORD *)(a2 + 84) & 0x400) == 0) {
      return;
    }
    goto LABEL_45;
  }
  char v20 = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 84) |= 0x100u;
  *(unsigned char *)(a1 + 52) = v20;
  int v4 = *(_DWORD *)(a2 + 84);
  if ((v4 & 0x200) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  if ((v4 & 0x400) == 0) {
    return;
  }
LABEL_45:
  uint64_t v22 = *(const std::string **)(a2 + 72);
  *(_DWORD *)(a1 + 84) |= 0x400u;
  unint64_t v23 = *(std::string **)(a1 + 72);
  if (v23 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v23, v22);
}

void sub_10025369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1002536B4(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  uint64_t v7 = result[4];
  if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    operator delete();
  }
  uint64_t v9 = result[5];
  if ((_UNKNOWN *)v9 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v9)
  {
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    operator delete();
  }
  uint64_t v10 = result[7];
  if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    operator delete();
  }
  uint64_t v11 = result[8];
  if ((_UNKNOWN *)v11 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    operator delete();
  }
  uint64_t v12 = result[9];
  if ((_UNKNOWN *)v12 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    operator delete();
  }
  return result;
}

void sub_1002538C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0F28;
  sub_1002536B4(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100253914(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0F28;
  sub_1002536B4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025397C()
{
}

uint64_t sub_1002539E8(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 84);
  if (v1)
  {
    *(_DWORD *)(result + 48) = 10;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 84) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 84) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 84) & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 84) & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(result + 40);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 84) & 0x40) != 0)
    {
      uint64_t v7 = *(void *)(result + 56);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 84) & 0x80) != 0)
    {
      uint64_t v8 = *(void *)(result + 64);
      if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(unsigned char **)uint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v8 = 0;
          *(unsigned char *)(v8 + 23) = 0;
        }
      }
    }
  }
  int v9 = *(_DWORD *)(result + 84);
  if ((v9 & 0xFF00) != 0)
  {
    *(_WORD *)(result + 52) = 0;
    if ((v9 & 0x400) != 0)
    {
      uint64_t v10 = *(void *)(result + 72);
      if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(unsigned char **)uint64_t v10 = 0;
          *(void *)(v10 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v10 = 0;
          *(unsigned char *)(v10 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 84) = 0;
  return result;
}

uint64_t sub_100253BB8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        unsigned int v29 = 0;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_37:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v14 = ((1 << v9) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A5606C();
            }
            *(_DWORD *)(a1 + 84) |= 1u;
            *(_DWORD *)(a1 + 48) = v9;
          }
          uint64_t v16 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 18)
          {
            *((void *)this + 1) = v16 + 1;
            goto LABEL_51;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
        if (result)
        {
          unsigned int v9 = v29;
          goto LABEL_37;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_32;
        }
LABEL_51:
        *(_DWORD *)(a1 + 84) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 26) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_57:
        *(_DWORD *)(a1 + 84) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 34) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_63:
        *(_DWORD *)(a1 + 84) |= 8u;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v19 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 != 42) {
          continue;
        }
        *((void *)this + 1) = v19 + 1;
LABEL_69:
        *(_DWORD *)(a1 + 84) |= 0x10u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v20 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v20 >= *((void *)this + 2) || *v20 != 50) {
          continue;
        }
        *((void *)this + 1) = v20 + 1;
LABEL_75:
        *(_DWORD *)(a1 + 84) |= 0x20u;
        if (*(_UNKNOWN **)(a1 + 40) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 58) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 84) |= 0x40u;
        if (*(_UNKNOWN **)(a1 + 56) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 != 66) {
          continue;
        }
        *((void *)this + 1) = v22 + 1;
LABEL_87:
        *(_DWORD *)(a1 + 84) |= 0x80u;
        if (*(_UNKNOWN **)(a1 + 64) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v23 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v23 >= v10 || *v23 != 72) {
          continue;
        }
        uint64_t v12 = v23 + 1;
        *((void *)this + 1) = v12;
LABEL_93:
        unsigned int v31 = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31);
          if (!result) {
            return result;
          }
          unsigned int v24 = v31;
          uint64_t v25 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v24 = *v12;
          uint64_t v25 = v12 + 1;
          *((void *)this + 1) = v25;
        }
        *(unsigned char *)(a1 + 52) = v24 != 0;
        *(_DWORD *)(a1 + 84) |= 0x100u;
        if ((unint64_t)v25 >= v10 || *v25 != 80) {
          continue;
        }
        uint64_t v11 = v25 + 1;
        *((void *)this + 1) = v11;
LABEL_101:
        unsigned int v30 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!result) {
            return result;
          }
          unsigned int v26 = v30;
          char v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v26 = *v11;
          char v27 = v11 + 1;
          *((void *)this + 1) = v27;
        }
        *(unsigned char *)(a1 + 53) = v26 != 0;
        int v13 = *(_DWORD *)(a1 + 84) | 0x200;
        *(_DWORD *)(a1 + 84) = v13;
        if ((unint64_t)v27 >= v10 || *v27 != 90) {
          continue;
        }
        *((void *)this + 1) = v27 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 84) = v13 | 0x400;
        if (*(_UNKNOWN **)(a1 + 72) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_57;
        }
        goto LABEL_32;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_63;
        }
        goto LABEL_32;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_69;
        }
        goto LABEL_32;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_75;
        }
        goto LABEL_32;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_81;
        }
        goto LABEL_32;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_87;
        }
        goto LABEL_32;
      case 9u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_93;
      case 0xAu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_32;
        }
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_101;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_32;
        }
        int v13 = *(_DWORD *)(a1 + 84);
        goto LABEL_109;
      default:
        int v7 = TagFallback & 7;
LABEL_32:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100254270(uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 84);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 48), a2, a4);
    int v6 = *(_DWORD *)(v5 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned __int8 *)(v5 + 53), a2, a4);
    if ((*(_DWORD *)(v5 + 84) & 0x400) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 52), a2, a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x200) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v6 & 0x400) == 0) {
    return result;
  }
LABEL_23:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t sub_1002543DC(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 84);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_82;
  }
  if (v3)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 10;
    }
    else if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      int v3 = *(_DWORD *)(a1 + 84);
    }
    else
    {
      int v6 = 1;
    }
    uint64_t v4 = (v6 + 1);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 23);
  char v9 = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v10 = *(void *)(v7 + 8);
    int v3 = *(_DWORD *)(a1 + 84);
    char v9 = *(unsigned char *)(v7 + 23);
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < 0) {
    int v8 = v10;
  }
  uint64_t v4 = (v4 + v12 + v8 + 1);
LABEL_21:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 84);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    uint64_t v4 = (v4 + v18 + v14 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  int v20 = *(unsigned __int8 *)(v19 + 23);
  char v21 = v20;
  uint64_t v22 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    unint64_t v23 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    unint64_t v23 = v22;
  }
  if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23, a2);
    int v20 = *(unsigned __int8 *)(v19 + 23);
    uint64_t v22 = *(void *)(v19 + 8);
    int v3 = *(_DWORD *)(a1 + 84);
    char v21 = *(unsigned char *)(v19 + 23);
  }
  else
  {
    int v24 = 1;
  }
  if (v21 < 0) {
    int v20 = v22;
  }
  uint64_t v4 = (v4 + v24 + v20 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_46:
  uint64_t v25 = *(void *)(a1 + 32);
  int v26 = *(unsigned __int8 *)(v25 + 23);
  char v27 = v26;
  uint64_t v28 = *(void *)(v25 + 8);
  if ((v26 & 0x80u) == 0) {
    unint64_t v29 = *(unsigned __int8 *)(v25 + 23);
  }
  else {
    unint64_t v29 = v28;
  }
  if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29, a2);
    int v26 = *(unsigned __int8 *)(v25 + 23);
    uint64_t v28 = *(void *)(v25 + 8);
    int v3 = *(_DWORD *)(a1 + 84);
    char v27 = *(unsigned char *)(v25 + 23);
  }
  else
  {
    int v30 = 1;
  }
  if (v27 < 0) {
    int v26 = v28;
  }
  uint64_t v4 = (v4 + v30 + v26 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_55:
  uint64_t v31 = *(void *)(a1 + 40);
  int v32 = *(unsigned __int8 *)(v31 + 23);
  char v33 = v32;
  uint64_t v34 = *(void *)(v31 + 8);
  if ((v32 & 0x80u) == 0) {
    unint64_t v35 = *(unsigned __int8 *)(v31 + 23);
  }
  else {
    unint64_t v35 = v34;
  }
  if (v35 >= 0x80)
  {
    int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v35, a2);
    int v32 = *(unsigned __int8 *)(v31 + 23);
    uint64_t v34 = *(void *)(v31 + 8);
    int v3 = *(_DWORD *)(a1 + 84);
    char v33 = *(unsigned char *)(v31 + 23);
  }
  else
  {
    int v36 = 1;
  }
  if (v33 < 0) {
    int v32 = v34;
  }
  uint64_t v4 = (v4 + v36 + v32 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0) {
      goto LABEL_82;
    }
    goto LABEL_73;
  }
LABEL_64:
  uint64_t v37 = *(void *)(a1 + 56);
  int v38 = *(unsigned __int8 *)(v37 + 23);
  char v39 = v38;
  uint64_t v40 = *(void *)(v37 + 8);
  if ((v38 & 0x80u) == 0) {
    unint64_t v41 = *(unsigned __int8 *)(v37 + 23);
  }
  else {
    unint64_t v41 = v40;
  }
  if (v41 >= 0x80)
  {
    int v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41, a2);
    int v38 = *(unsigned __int8 *)(v37 + 23);
    uint64_t v40 = *(void *)(v37 + 8);
    int v3 = *(_DWORD *)(a1 + 84);
    char v39 = *(unsigned char *)(v37 + 23);
  }
  else
  {
    int v42 = 1;
  }
  if (v39 < 0) {
    int v38 = v40;
  }
  uint64_t v4 = (v4 + v42 + v38 + 1);
  if ((v3 & 0x80) != 0)
  {
LABEL_73:
    uint64_t v43 = *(void *)(a1 + 64);
    int v44 = *(unsigned __int8 *)(v43 + 23);
    char v45 = v44;
    uint64_t v46 = *(void *)(v43 + 8);
    if ((v44 & 0x80u) == 0) {
      unint64_t v47 = *(unsigned __int8 *)(v43 + 23);
    }
    else {
      unint64_t v47 = v46;
    }
    if (v47 >= 0x80)
    {
      int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v47, a2);
      int v44 = *(unsigned __int8 *)(v43 + 23);
      uint64_t v46 = *(void *)(v43 + 8);
      int v3 = *(_DWORD *)(a1 + 84);
      char v45 = *(unsigned char *)(v43 + 23);
    }
    else
    {
      int v48 = 1;
    }
    if (v45 < 0) {
      int v44 = v46;
    }
    uint64_t v4 = (v4 + v48 + v44 + 1);
  }
LABEL_82:
  if ((v3 & 0xFF00) != 0)
  {
    unsigned int v49 = v4 + 2;
    if ((v3 & 0x100) == 0) {
      unsigned int v49 = v4;
    }
    if ((v3 & 0x200) != 0) {
      uint64_t v4 = v49 + 2;
    }
    else {
      uint64_t v4 = v49;
    }
    if ((v3 & 0x400) != 0)
    {
      uint64_t v50 = *(void *)(a1 + 72);
      int v51 = *(unsigned __int8 *)(v50 + 23);
      char v52 = v51;
      uint64_t v53 = *(void *)(v50 + 8);
      if ((v51 & 0x80u) == 0) {
        unint64_t v54 = *(unsigned __int8 *)(v50 + 23);
      }
      else {
        unint64_t v54 = v53;
      }
      if (v54 >= 0x80)
      {
        int v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v54, a2);
        int v51 = *(unsigned __int8 *)(v50 + 23);
        uint64_t v53 = *(void *)(v50 + 8);
        char v52 = *(unsigned char *)(v50 + 23);
      }
      else
      {
        int v55 = 1;
      }
      if (v52 < 0) {
        int v51 = v53;
      }
      uint64_t v4 = (v4 + v55 + v51 + 1);
    }
  }
  *(_DWORD *)(a1 + 80) = v4;
  return v4;
}

void sub_100254750(uint64_t a1, void *lpsrc)
{
  sub_1002532AC(a1, (uint64_t)lpsrc);
}

void sub_1002547D8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_1002532AC(a1, a2);
  }
}

uint64_t sub_100254844()
{
  return 1;
}

void *sub_10025484C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.HomeKitScene");
}

void sub_10025485C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }
    else if ((*(unsigned char *)(a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v6 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 28) |= 2u;
    *(_DWORD *)(a1 + 12) = v6;
    if ((*(_DWORD *)(a2 + 28) & 4) == 0) {
      return;
    }
LABEL_10:
    uint64_t v7 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 28) |= 4u;
    int v8 = *(std::string **)(a1 + 16);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v8, v7);
  }
}

void sub_10025496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100254984(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0FA0;
  sub_1002444F8((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002549D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A0FA0;
  sub_1002444F8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100254A40()
{
}

uint64_t sub_100254AA0(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100254AEC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 8);
  int v6 = (unsigned int *)(a1 + 12);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v7 = (char *)*((void *)this + 1);
          if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v7;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v7 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_19;
          }
          uint64_t v13 = (char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
          if ((unint64_t)v13 >= v12 || *v13 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
            if (!result) {
              return result;
            }
            int v14 = (unsigned char *)*((void *)this + 1);
            unint64_t v12 = *((void *)this + 2);
          }
          else
          {
            *int v5 = *v13;
            int v14 = v13 + 1;
            *((void *)this + 1) = v14;
          }
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v14 < v12 && *v14 == 16)
          {
            char v15 = v14 + 1;
            *((void *)this + 1) = v15;
            goto LABEL_27;
          }
        }
        if (v9 != 2) {
          break;
        }
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        char v15 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
LABEL_27:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          uint64_t v16 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          *int v6 = *v15;
          uint64_t v16 = v15 + 1;
          *((void *)this + 1) = v16;
        }
        int v11 = *(_DWORD *)(a1 + 28) | 2;
        *(_DWORD *)(a1 + 28) = v11;
        if ((unint64_t)v16 < v12 && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_35;
        }
      }
      if (v9 != 3) {
        break;
      }
      int v10 = TagFallback & 7;
      if (v10 != 2) {
        goto LABEL_19;
      }
      int v11 = *(_DWORD *)(a1 + 28);
LABEL_35:
      *(_DWORD *)(a1 + 28) = v11 | 4;
      if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v10 = TagFallback & 7;
LABEL_19:
    if (v10 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100254D20(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
}

uint64_t sub_100254DAC(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_24;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_14;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_14:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    char v10 = v9;
    uint64_t v11 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12, a2);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v11 = *(void *)(v8 + 8);
      char v10 = *(unsigned char *)(v8 + 23);
    }
    else
    {
      int v13 = 1;
    }
    if (v10 < 0) {
      int v9 = v11;
    }
    uint64_t v4 = (v4 + v13 + v9 + 1);
  }
LABEL_24:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100254E9C(uint64_t a1, void *lpsrc)
{
  sub_10025485C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100254F24()
{
  return 1;
}

void *sub_100254F2C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.NowPlayingOutputDevice");
}

uint64_t sub_100254F3C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)a1 = off_1022A1018;
  *(void *)(a1 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 16) = 12;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_100254FD4(a1, a2);
  return a1;
}

void sub_100254FB4(_Unwind_Exception *a1)
{
  sub_10016B2E8(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_100254FD4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), *(_DWORD *)(a2 + 40) + *(_DWORD *)(a1 + 40));
  if (*(int *)(a2 + 40) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 32) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 44);
      uint64_t v7 = *(int *)(a1 + 40);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 44);
        }
        *(_DWORD *)(a1 + 44) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = v7 + 1;
      sub_10025485C(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 40));
  }
  LOBYTE(v9) = *(unsigned char *)(a2 + 68);
  if (!(_BYTE)v9) {
    return;
  }
  if (*(unsigned char *)(a2 + 68))
  {
    unsigned int v10 = *(_DWORD *)(a2 + 16);
    if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
      sub_101A56098();
    }
    *(_DWORD *)(a1 + 68) |= 1u;
    *(_DWORD *)(a1 + 16) = v10;
    int v9 = *(_DWORD *)(a2 + 68);
  }
  if ((v9 & 2) == 0)
  {
    if ((v9 & 4) == 0) {
      goto LABEL_19;
    }
LABEL_25:
    int v13 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 68) |= 4u;
    *(_DWORD *)(a1 + 20) = v13;
    int v9 = *(_DWORD *)(a2 + 68);
    if ((v9 & 8) == 0)
    {
LABEL_20:
      if ((v9 & 0x20) == 0) {
        return;
      }
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  uint64_t v11 = *(const std::string **)(a2 + 8);
  *(_DWORD *)(a1 + 68) |= 2u;
  unint64_t v12 = *(std::string **)(a1 + 8);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v12, v11);
  int v9 = *(_DWORD *)(a2 + 68);
  if ((v9 & 4) != 0) {
    goto LABEL_25;
  }
LABEL_19:
  if ((v9 & 8) == 0) {
    goto LABEL_20;
  }
LABEL_26:
  int v14 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 68) |= 8u;
  char v15 = *(std::string **)(a1 + 24);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v15, v14);
  if ((*(_DWORD *)(a2 + 68) & 0x20) != 0)
  {
LABEL_29:
    *(_DWORD *)(a1 + 68) |= 0x20u;
    uint64_t v16 = *(void *)(a1 + 56);
    if (!v16) {
      operator new();
    }
    unint64_t v17 = *(unsigned char **)(a2 + 56);
    if (!v17) {
      unint64_t v17 = *(unsigned char **)(qword_102489A20 + 56);
    }
    sub_10024D240(v16, v17);
  }
}

void sub_1002552E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002552FC(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022A1018;
  uint64_t v2 = a1 + 4;
  sub_100255360(a1);
  sub_10016B2E8(v2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void *sub_100255360(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[3];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  if ((void *)qword_102489A20 != result)
  {
    uint64_t result = (void *)result[7];
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  return result;
}

void sub_10025545C(uint64_t *a1)
{
  sub_1002552FC(a1);

  operator delete();
}

void sub_100255494()
{
}

uint64_t sub_100255500(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 68);
  if (v2)
  {
    *(_DWORD *)(a1 + 16) = 12;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(a1 + 20) = 0;
    if ((*(unsigned char *)(a1 + 68) & 8) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(a1 + 68) & 0x20) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 56);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 16)) {
          *(_WORD *)(v5 + 8) = 0;
        }
        *(_DWORD *)(v5 + 16) = 0;
      }
    }
  }
  uint64_t result = sub_10026DEDC(a1 + 32);
  *(_DWORD *)(a1 + 68) = 0;
  return result;
}

uint64_t sub_1002555CC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 20);
  int v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 32);
LABEL_2:
  while (2)
  {
    uint64_t v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        unsigned int v43 = 0;
        unsigned int v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
          if (!result) {
            return result;
          }
          unsigned int v11 = v43;
        }
        else
        {
          unsigned int v11 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        if (v11 - 31 < 0x19 || (v11 <= 0xE ? (BOOL v16 = ((1 << v11) & 0x76B6) == 0) : (BOOL v16 = 1), !v16))
        {
          if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0)) {
            sub_101A56098();
          }
          *(_DWORD *)(a1 + 68) |= 1u;
          *(_DWORD *)(a1 + 16) = v11;
        }
        int v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 < *((void *)this + 2) && *v18 == 18)
        {
          *((void *)this + 1) = v18 + 1;
          goto LABEL_42;
        }
        continue;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_23;
        }
LABEL_42:
        *(_DWORD *)(a1 + 68) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v19 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v19 >= v12 || *v19 != 24) {
          continue;
        }
        int v13 = v19 + 1;
        *((void *)this + 1) = v13;
LABEL_48:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          int v20 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v5 = *v13;
          int v20 = v13 + 1;
          *((void *)this + 1) = v20;
        }
        int v14 = *(_DWORD *)(a1 + 68) | 4;
        *(_DWORD *)(a1 + 68) = v14;
        if ((unint64_t)v20 >= v12 || *v20 != 34) {
          continue;
        }
        *((void *)this + 1) = v20 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 68) = v14 | 8;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 42) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v21 + 1;
LABEL_62:
          int v22 = *(_DWORD *)(a1 + 44);
          uint64_t v23 = *(int *)(a1 + 40);
          if ((int)v23 >= v22)
          {
            if (v22 == *(_DWORD *)(a1 + 48))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v22 + 1);
              int v22 = *(_DWORD *)(a1 + 44);
            }
            *(_DWORD *)(a1 + 44) = v22 + 1;
            operator new();
          }
          uint64_t v24 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = v23 + 1;
          uint64_t v25 = *(void *)(v24 + 8 * v23);
          unsigned int v44 = 0;
          int v26 = (char *)*((void *)this + 1);
          if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v44))return 0; {
          }
            }
          else
          {
            unsigned int v44 = *v26;
            *((void *)this + 1) = v26 + 1;
          }
          int v27 = *((_DWORD *)this + 14);
          int v28 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v27 + 1;
          if (v27 >= v28) {
            return 0;
          }
          int v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v44);
          if (!sub_100254AEC(v25, this, v30) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
          int v31 = *((_DWORD *)this + 14);
          BOOL v32 = __OFSUB__(v31, 1);
          int v33 = v31 - 1;
          if (v33 < 0 == v32) {
            *((_DWORD *)this + 14) = v33;
          }
          char v21 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v21 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v34 = *v21;
        }
        while (v34 == 42);
        if (v34 != 50) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_80:
        *(_DWORD *)(a1 + 68) |= 0x20u;
        uint64_t v35 = *(void *)(a1 + 56);
        if (!v35) {
          operator new();
        }
        unsigned int v45 = 0;
        int v36 = (char *)*((void *)this + 1);
        if ((unint64_t)v36 >= *((void *)this + 2) || *v36 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45))return 0; {
        }
          }
        else
        {
          unsigned int v45 = *v36;
          *((void *)this + 1) = v36 + 1;
        }
        int v37 = *((_DWORD *)this + 14);
        int v38 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v37 + 1;
        if (v37 < v38)
        {
          int v39 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
          if (sub_10024D3E0(v35, this, v40))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v39);
              int v41 = *((_DWORD *)this + 14);
              BOOL v32 = __OFSUB__(v41, 1);
              int v42 = v41 - 1;
              if (v42 < 0 == v32) {
                *((_DWORD *)this + 14) = v42;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_48;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_23;
        }
        int v14 = *(_DWORD *)(a1 + 68);
        goto LABEL_56;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_62;
        }
        goto LABEL_23;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_80;
        }
        goto LABEL_23;
      default:
        int v9 = TagFallback & 7;
LABEL_23:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100255B9C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 68);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), (int)a2, a4);
    int v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), a2, a4);
  if ((*(_DWORD *)(v5 + 68) & 8) != 0) {
LABEL_5:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
LABEL_6:
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(*(void *)(v5 + 32) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if ((*(unsigned char *)(v5 + 68) & 0x20) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 56);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_102489A20 + 56);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v8, a2, a4);
  }
  return result;
}

uint64_t sub_100255CB0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 68);
  if (!(_BYTE)v3)
  {
    int v4 = 0;
    goto LABEL_47;
  }
  if (*(unsigned char *)(a1 + 68))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      int v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 68);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 68) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 68);
    char v8 = *(unsigned char *)(v6 + 23);
  }
  else
  {
    int v11 = 1;
  }
  if (v8 < 0) {
    int v7 = v9;
  }
  v4 += v11 + v7 + 1;
LABEL_22:
  if ((v3 & 4) != 0)
  {
    unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 68);
    }
    else
    {
      int v13 = 2;
    }
    v4 += v13;
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x20) == 0) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 68);
    char v16 = *(unsigned char *)(v14 + 23);
  }
  else
  {
    int v19 = 1;
  }
  if (v16 < 0) {
    int v15 = v17;
  }
  v4 += v19 + v15 + 1;
  if ((v3 & 0x20) != 0)
  {
LABEL_39:
    uint64_t v20 = *(void *)(a1 + 56);
    if (!v20) {
      uint64_t v20 = *(void *)(qword_102489A20 + 56);
    }
    int v21 = 2 * (*(_DWORD *)(v20 + 16) & 1);
    if ((*(_DWORD *)(v20 + 16) & 2) != 0) {
      v21 += 2;
    }
    if (*(_DWORD *)(v20 + 16)) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    *(_DWORD *)(v20 + 12) = v22;
    v4 += v22 + 2;
  }
LABEL_47:
  int v23 = *(_DWORD *)(a1 + 40);
  uint64_t v24 = (v23 + v4);
  if (v23 >= 1)
  {
    uint64_t v25 = 0;
    do
    {
      int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100254DAC(*(void *)(*(void *)(a1 + 32) + 8 * v25), a2);
      int v27 = (int)v26;
      if (v26 >= 0x80) {
        int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
      }
      else {
        int v28 = 1;
      }
      uint64_t v24 = (v27 + v24 + v28);
      ++v25;
    }
    while (v25 < *(int *)(a1 + 40));
  }
  *(_DWORD *)(a1 + 64) = v24;
  return v24;
}

void sub_100255EAC(uint64_t a1, void *lpsrc)
{
  sub_100254FD4(a1, (uint64_t)lpsrc);
}

void sub_100255F34(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100254FD4(a1, a2);
  }
}

uint64_t sub_100255FA0()
{
  return 1;
}

void *sub_100255FA8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.NowPlaying");
}

void sub_100255FB8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0)) {
      sub_101A560C4();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_100256070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100256088(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1090;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002560A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1090;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1002560FC()
{
}

uint64_t sub_100256154(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 31;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10025616C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v8 = v12;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101A560C4();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_1002562D4(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_1002562F0(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_10025634C(uint64_t a1, void *lpsrc)
{
  sub_100255FB8(a1, (uint64_t)lpsrc);
}

void sub_1002563D4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100255FB8(a1, a2);
  }
}

uint64_t sub_100256440()
{
  return 1;
}

void *sub_100256448@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.LearnModel");
}

void sub_100256458(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0)) {
      sub_101A560F0();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_100256510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100256528(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1108;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100256548(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1108;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025659C()
{
}

uint64_t sub_1002565F4(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 32;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10025660C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v8 = v12;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101A560F0();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100256774(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_100256790(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002567EC(uint64_t a1, void *lpsrc)
{
  sub_100256458(a1, (uint64_t)lpsrc);
}

void sub_100256874(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100256458(a1, a2);
  }
}

uint64_t sub_1002568E0()
{
  return 1;
}

void *sub_1002568E8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.LearnCompleted");
}

void sub_1002568F8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0)) {
      sub_101A5611C();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_1002569B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1002569C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1180;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002569E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1180;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100256A3C()
{
}

uint64_t sub_100256A94(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 33;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100256AAC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v8 = v12;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101A5611C();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100256C14(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_100256C30(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100256C8C(uint64_t a1, void *lpsrc)
{
  sub_1002568F8(a1, (uint64_t)lpsrc);
}

void sub_100256D14(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_1002568F8(a1, a2);
  }
}

uint64_t sub_100256D80()
{
  return 1;
}

void *sub_100256D88@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.SensorsScanComplete");
}

void sub_100256D98(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0)) {
      sub_101A56148();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_100256E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100256E68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A11F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100256E88(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A11F8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100256EDC()
{
}

uint64_t sub_100256F34(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 34;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100256F4C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v8 = v12;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101A56148();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_1002570B4(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_1002570D0(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_10025712C(uint64_t a1, void *lpsrc)
{
  sub_100256D98(a1, (uint64_t)lpsrc);
}

void sub_1002571B4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100256D98(a1, a2);
  }
}

uint64_t sub_100257220()
{
  return 1;
}

void *sub_100257228@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.StartSpectating");
}

void sub_100257238(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4 - 31 >= 0x19 && (v4 > 0xE || ((1 << v4) & 0x76B6) == 0)) {
      sub_101A56174();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_1002572F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100257308(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1270;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100257328(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1270;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025737C()
{
}

uint64_t sub_1002573D4(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 35;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1002573EC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v8 = v12;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101A56174();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100257554(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_100257570(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_1002575CC(uint64_t a1, void *lpsrc)
{
  sub_100257238(a1, (uint64_t)lpsrc);
}

void sub_100257654(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100257238(a1, a2);
  }
}

uint64_t sub_1002576C0()
{
  return 1;
}

void *sub_1002576C8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.StopSpectating");
}

void sub_1002576D8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 24);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A561A0();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v5;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 4) != 0)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      *(void *)(a1 + 16) = v8;
    }
  }
}

void sub_100257810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100257828(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A12E8;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025787C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A12E8;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1002578E4()
{
}

uint64_t sub_100257948(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 36;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10025799C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int v5 = (unint64_t *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v20 = 0;
        unsigned int v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!result) {
            return result;
          }
          unsigned int v13 = v20;
        }
        else
        {
          unsigned int v13 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (v13 - 31 < 0x19 || (v13 <= 0xE ? (BOOL v14 = ((1 << v13) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
        {
          if (v13 - 31 >= 0x19 && (v13 > 0xE || ((1 << v13) & 0x76B6) == 0)) {
            sub_101A561A0();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v13;
        }
        char v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 18)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_38;
        }
      }
      if (v8 != 2) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_19;
      }
LABEL_38:
      *(_DWORD *)(a1 + 32) |= 2u;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      uint64_t v17 = (unsigned char *)*((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
      if ((unint64_t)v17 < v10 && *v17 == 24)
      {
        int v11 = v17 + 1;
        *((void *)this + 1) = v11;
LABEL_44:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!result) {
            return result;
          }
          unint64_t v18 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          *unsigned int v5 = *v11;
          unint64_t v18 = (unsigned __int8 *)(v11 + 1);
          *((void *)this + 1) = v18;
        }
        *(_DWORD *)(a1 + 32) |= 4u;
        if (v18 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v8 == 3)
    {
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_44;
      }
    }
    else
    {
      int v9 = TagFallback & 7;
    }
LABEL_19:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100257C24(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v5 + 32) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100257CB0(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_24;
  }
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
    uint64_t v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_22:
  if ((v3 & 4) != 0) {
    uint64_t v4 = v4
  }
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
LABEL_24:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_100257DA0(uint64_t a1, void *lpsrc)
{
  sub_1002576D8(a1, (uint64_t)lpsrc);
}

void sub_100257E28(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_1002576D8(a1, a2);
  }
}

uint64_t sub_100257E94()
{
  return 1;
}

void *sub_100257E9C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ServiceCreate");
}

void sub_100257EAC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 24);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A561CC();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v5;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 4) != 0)
    {
      char v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      uint64_t v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_100258020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100258038(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = *(void *)(result + 16);
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  return result;
}

void sub_1002580F4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1360;
  sub_100258038((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100258148(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1360;
  sub_100258038((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1002581B0()
{
}

uint64_t sub_100258214(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 37;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100258298(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v16 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v10 = v16;
        }
        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101A561CC();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        unsigned int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      BOOL v14 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 26)
      {
        *((void *)this + 1) = v14 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100258528(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 32);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v4 + 32) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
  int v5 = *(_DWORD *)(v4 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_1002585B4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_32;
  }
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
    uint64_t v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1002586E4(uint64_t a1, void *lpsrc)
{
  sub_100257EAC(a1, (uint64_t)lpsrc);
}

void sub_10025876C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100257EAC(a1, a2);
  }
}

uint64_t sub_1002587D8()
{
  return 1;
}

void *sub_1002587E0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ServiceDelete");
}

void sub_1002587F0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 24);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A561F8();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v5;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 4) != 0)
    {
      char v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      uint64_t v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_100258964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10025897C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A13D8;
  sub_100258038((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1002589D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A13D8;
  sub_100258038((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100258A38()
{
}

uint64_t sub_100258A9C(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 38;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100258B20(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v16 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v10 = v16;
        }
        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101A561F8();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      char v14 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 26)
      {
        *((void *)this + 1) = v14 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100258DB0(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 32);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v4 + 32) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
  int v5 = *(_DWORD *)(v4 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_100258E3C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_32;
  }
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
    uint64_t v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_100258F6C(uint64_t a1, void *lpsrc)
{
  sub_1002587F0(a1, (uint64_t)lpsrc);
}

void sub_100258FF4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_1002587F0(a1, a2);
  }
}

uint64_t sub_100259060()
{
  return 1;
}

void *sub_100259068@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ServiceConnect");
}

void sub_100259078(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 24);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A56224();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v5;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 4) != 0)
    {
      char v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      uint64_t v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_1002591EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100259204(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1450;
  sub_100258038((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100259258(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1450;
  sub_100258038((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1002592C0()
{
}

uint64_t sub_100259324(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 39;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1002593A8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v16 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v10 = v16;
        }
        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101A56224();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      char v14 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 26)
      {
        *((void *)this + 1) = v14 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100259638(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 32);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v4 + 32) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
  int v5 = *(_DWORD *)(v4 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_1002596C4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_32;
  }
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
    uint64_t v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_1002597F4(uint64_t a1, void *lpsrc)
{
  sub_100259078(a1, (uint64_t)lpsrc);
}

void sub_10025987C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100259078(a1, a2);
  }
}

uint64_t sub_1002598E8()
{
  return 1;
}

void *sub_1002598F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ServiceDisconnect");
}

void sub_100259900(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A56250();
      }
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v8, v7);
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0) {
          return;
        }
        goto LABEL_12;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    uint64_t v9 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    unint64_t v10 = *(std::string **)(a1 + 24);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 36) & 8) != 0)
    {
LABEL_12:
      char v6 = *(unsigned char *)(a2 + 20);
      *(_DWORD *)(a1 + 36) |= 8u;
      *(unsigned char *)(a1 + 20) = v6;
    }
  }
}

void sub_100259A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100259AB4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A14C8;
  sub_1001A4C64((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100259B08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A14C8;
  sub_1001A4C64((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100259B70()
{
}

uint64_t sub_100259BD8(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 36);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 40;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 36) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(result + 20) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100259C60(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    unsigned int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v20 = 0;
        char v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_23:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v12 = ((1 << v9) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A56250();
            }
            *(_DWORD *)(a1 + 36) |= 1u;
            *(_DWORD *)(a1 + 16) = v9;
          }
          char v14 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 18)
          {
            *((void *)this + 1) = v14 + 1;
            goto LABEL_37;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
        if (result)
        {
          unsigned int v9 = v20;
          goto LABEL_23;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
LABEL_37:
        *(_DWORD *)(a1 + 36) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 != 26) {
          continue;
        }
        *((void *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 36) |= 4u;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        unint64_t v16 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v16 >= v10 || *v16 != 32) {
          continue;
        }
        int v11 = v16 + 1;
        *((void *)this + 1) = v11;
LABEL_49:
        unsigned int v21 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!result) {
            return result;
          }
          unsigned int v17 = v21;
          unint64_t v18 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v17 = *v11;
          unint64_t v18 = (unsigned __int8 *)(v11 + 1);
          *((void *)this + 1) = v18;
        }
        *(unsigned char *)(a1 + 20) = v17 != 0;
        *(_DWORD *)(a1 + 36) |= 8u;
        if (v18 != (unsigned __int8 *)v10 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_43;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_49;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100259F94(uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  int v7 = *(unsigned __int8 *)(v5 + 20);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_10025A03C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_35;
  }
  if ((*(unsigned char *)(a1 + 36) & 1) == 0)
  {
    unsigned int v4 = 0;
    if ((*(unsigned char *)(a1 + 36) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    char v9 = v8;
    uint64_t v10 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      uint64_t v10 = *(void *)(v7 + 8);
      int v3 = *(_DWORD *)(a1 + 36);
      char v9 = *(unsigned char *)(v7 + 23);
    }
    else
    {
      int v12 = 1;
    }
    if (v9 < 0) {
      int v8 = v10;
    }
    v4 += v12 + v8 + 1;
    goto LABEL_22;
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v6 & 0x80000000) != 0)
  {
    unsigned int v4 = 11;
    if ((v3 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  if (v6 < 0x80)
  {
    unsigned int v4 = 2;
    if ((v3 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  int v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 2) != 0) {
    goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 36);
      char v15 = *(unsigned char *)(v13 + 23);
    }
    else
    {
      int v18 = 1;
    }
    if (v15 < 0) {
      int v14 = v16;
    }
    v4 += v18 + v14 + 1;
  }
  if ((v3 & 8) != 0) {
    uint64_t result = v4 + 2;
  }
  else {
    uint64_t result = v4;
  }
LABEL_35:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_10025A178(uint64_t a1, void *lpsrc)
{
  sub_100259900(a1, (uint64_t)lpsrc);
}

void sub_10025A200(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_100259900(a1, a2);
  }
}

uint64_t sub_10025A26C()
{
  return 1;
}

void *sub_10025A274@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ServiceStartUpdating");
}

void sub_10025A284(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 24);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A5627C();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v5;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      uint64_t v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 4) != 0)
    {
      int v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      char v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v9, v8);
    }
  }
}

void sub_10025A3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10025A410(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1540;
  sub_100258038((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025A464(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1540;
  sub_100258038((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025A4CC()
{
}

uint64_t sub_10025A530(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 41;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10025A5B4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v16 = 0;
        char v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v10 = v16;
        }
        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101A5627C();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }
        uint64_t v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      int v14 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 26)
      {
        *((void *)this + 1) = v14 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10025A844(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 32);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    if ((*(_DWORD *)(v4 + 32) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
  int v5 = *(_DWORD *)(v4 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_10025A8D0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_32;
  }
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
    uint64_t v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_10025AA00(uint64_t a1, void *lpsrc)
{
  sub_10025A284(a1, (uint64_t)lpsrc);
}

void sub_10025AA88(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025A284(a1, a2);
  }
}

uint64_t sub_10025AAF4()
{
  return 1;
}

void *sub_10025AAFC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.ServiceStopUpdating");
}

void sub_10025AB0C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    unsigned int v5 = *(_DWORD *)(a2 + 40);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101A562A8();
    }
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 40) = v5;
    int v4 = *(_DWORD *)(a2 + 48);
  }
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_17:
    char v8 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v9 = *(std::string **)(a1 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v9, v8);
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_12:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  uint64_t v6 = *(const std::string **)(a2 + 8);
  *(_DWORD *)(a1 + 48) |= 2u;
  int v7 = *(std::string **)(a1 + 8);
  if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v7, v6);
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 4) != 0) {
    goto LABEL_17;
  }
LABEL_11:
  if ((v4 & 8) == 0) {
    goto LABEL_12;
  }
LABEL_20:
  unint64_t v10 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 8u;
  int v11 = *(std::string **)(a1 + 24);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v11, v10);
  if ((*(_DWORD *)(a2 + 48) & 0x10) != 0)
  {
LABEL_23:
    uint64_t v12 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    int v13 = *(std::string **)(a1 + 32);
    if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v13, v12);
  }
}

void sub_10025AD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_10025AD58(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t v5 = result[3];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  uint64_t v7 = result[4];
  if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    operator delete();
  }
  return result;
}

void sub_10025AE84(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A15B8;
  sub_10025AD58(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025AED8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A15B8;
  sub_10025AD58(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025AF40()
{
}

uint64_t sub_10025AFA8(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 48);
  if (v1)
  {
    *(_DWORD *)(result + 40) = 42;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 48) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 48) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 48) & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10025B094(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          int v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_19;
          }
          unsigned int v17 = 0;
          char v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
            if (!result) {
              return result;
            }
            unsigned int v9 = v17;
          }
          else
          {
            unsigned int v9 = *v8;
            *((void *)this + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A562A8();
            }
            *(_DWORD *)(a1 + 48) |= 1u;
            *(_DWORD *)(a1 + 40) = v9;
          }
          uint64_t v12 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
          {
            *((void *)this + 1) = v12 + 1;
            goto LABEL_38;
          }
          continue;
        case 2u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_19;
          }
LABEL_38:
          *(_DWORD *)(a1 + 48) |= 2u;
          if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          int v13 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 26) {
            continue;
          }
          *((void *)this + 1) = v13 + 1;
LABEL_44:
          *(_DWORD *)(a1 + 48) |= 4u;
          if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          char v14 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 34) {
            continue;
          }
          *((void *)this + 1) = v14 + 1;
LABEL_50:
          *(_DWORD *)(a1 + 48) |= 8u;
          if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          uint64_t v15 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v15 >= *((void *)this + 2) || *v15 != 42) {
            continue;
          }
          *((void *)this + 1) = v15 + 1;
LABEL_56:
          *(_DWORD *)(a1 + 48) |= 0x10u;
          if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          if (*((void *)this + 1) != *((void *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        case 3u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_44;
          }
          goto LABEL_19;
        case 4u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_19;
          }
          goto LABEL_50;
        case 5u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_56;
          }
          goto LABEL_19;
        default:
          int v7 = TagFallback & 7;
LABEL_19:
          if (v7 == 4) {
            return 1;
          }
          if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
          return 0;
          }
      }
    }
    break;
  }
  unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = TagFallback;
  if (TagFallback) {
    goto LABEL_6;
  }
  return 1;
}

uint64_t sub_10025B444(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 48);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 40), a2, a4);
    int v5 = *(_DWORD *)(v4 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v5 = *(_DWORD *)(v4 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
    if ((*(_DWORD *)(v4 + 48) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v5 = *(_DWORD *)(v4 + 48);
  if ((v5 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v5 & 0x10) == 0) {
    return result;
  }
LABEL_11:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_10025B508(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_53;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v8 = *(unsigned char *)(v6 + 23);
  }
  else
  {
    int v11 = 1;
  }
  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      int v3 = *(_DWORD *)(a1 + 48);
      char v14 = *(unsigned char *)(v12 + 23);
    }
    else
    {
      int v17 = 1;
    }
    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x10) == 0) {
        goto LABEL_53;
      }
      goto LABEL_44;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(a1 + 24);
  int v19 = *(unsigned __int8 *)(v18 + 23);
  char v20 = v19;
  uint64_t v21 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, a2);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    uint64_t v21 = *(void *)(v18 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v20 = *(unsigned char *)(v18 + 23);
  }
  else
  {
    int v23 = 1;
  }
  if (v20 < 0) {
    int v19 = v21;
  }
  uint64_t v4 = (v4 + v23 + v19 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_44:
    uint64_t v24 = *(void *)(a1 + 32);
    int v25 = *(unsigned __int8 *)(v24 + 23);
    char v26 = v25;
    uint64_t v27 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28 >= 0x80)
    {
      int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28, a2);
      int v25 = *(unsigned __int8 *)(v24 + 23);
      uint64_t v27 = *(void *)(v24 + 8);
      char v26 = *(unsigned char *)(v24 + 23);
    }
    else
    {
      int v29 = 1;
    }
    if (v26 < 0) {
      int v25 = v27;
    }
    uint64_t v4 = (v4 + v29 + v25 + 1);
  }
LABEL_53:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_10025B6F4(uint64_t a1, void *lpsrc)
{
  sub_10025AB0C(a1, (uint64_t)lpsrc);
}

void sub_10025B77C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025AB0C(a1, a2);
  }
}

uint64_t sub_10025B7E8()
{
  return 1;
}

void *sub_10025B7F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.RequestObservation");
}

void sub_10025B800(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 32);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A562D4();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v5;
      int v4 = *(_DWORD *)(a2 + 40);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 40);
      if ((v4 & 4) == 0)
      {
LABEL_11:
        if ((v4 & 8) == 0) {
          return;
        }
        goto LABEL_19;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_11;
    }
    char v8 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    uint64_t v9 = *(std::string **)(a1 + 16);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v9, v8);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_19:
      unint64_t v10 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      int v11 = *(std::string **)(a1 + 24);
      if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v11, v10);
    }
  }
}

void sub_10025B9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10025B9F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1630;
  sub_1002507F8(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025BA44(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1630;
  sub_1002507F8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025BAAC()
{
}

uint64_t sub_10025BB10(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 43;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 40) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 40) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10025BBC8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    unsigned int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          int v7 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v16 = 0;
          char v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
            if (!result) {
              return result;
            }
            unsigned int v9 = v16;
          }
          else
          {
            unsigned int v9 = *v8;
            *((void *)this + 1) = v8 + 1;
          }
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A562D4();
            }
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }
          uint64_t v12 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
          {
            *((void *)this + 1) = v12 + 1;
            goto LABEL_37;
          }
          continue;
        case 2u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_18;
          }
LABEL_37:
          *(_DWORD *)(a1 + 40) |= 2u;
          if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
          int v13 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 26) {
            continue;
          }
          *((void *)this + 1) = v13 + 1;
LABEL_43:
          *(_DWORD *)(a1 + 40) |= 4u;
          if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          char v14 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 34) {
            continue;
          }
          *((void *)this + 1) = v14 + 1;
LABEL_49:
          *(_DWORD *)(a1 + 40) |= 8u;
          if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          if (*((void *)this + 1) != *((void *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        case 3u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_43;
          }
          goto LABEL_18;
        case 4u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_49;
          }
          goto LABEL_18;
        default:
          int v7 = TagFallback & 7;
LABEL_18:
          if (v7 == 4) {
            return 1;
          }
          if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
          return 0;
          }
      }
    }
    break;
  }
  unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = TagFallback;
  if (TagFallback) {
    goto LABEL_6;
  }
  return 1;
}

uint64_t sub_10025BEF8(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 40);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    int v5 = *(_DWORD *)(v4 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
      if ((*(_DWORD *)(v4 + 40) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v5 = *(_DWORD *)(v4 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v5 & 8) == 0) {
    return result;
  }
LABEL_9:

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
}

uint64_t sub_10025BFA0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_43;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v8 = *(unsigned char *)(v6 + 23);
  }
  else
  {
    int v11 = 1;
  }
  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v14 = *(unsigned char *)(v12 + 23);
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < 0) {
    int v13 = v15;
  }
  uint64_t v4 = (v4 + v17 + v13 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_34:
    uint64_t v18 = *(void *)(a1 + 24);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    char v20 = v19;
    uint64_t v21 = *(void *)(v18 + 8);
    if ((v19 & 0x80u) == 0) {
      unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 >= 0x80)
    {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, a2);
      int v19 = *(unsigned __int8 *)(v18 + 23);
      uint64_t v21 = *(void *)(v18 + 8);
      char v20 = *(unsigned char *)(v18 + 23);
    }
    else
    {
      int v23 = 1;
    }
    if (v20 < 0) {
      int v19 = v21;
    }
    uint64_t v4 = (v4 + v23 + v19 + 1);
  }
LABEL_43:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

void sub_10025C130(uint64_t a1, void *lpsrc)
{
  sub_10025B800(a1, (uint64_t)lpsrc);
}

void sub_10025C1B8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025B800(a1, a2);
  }
}

uint64_t sub_10025C224()
{
  return 1;
}

void *sub_10025C22C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.RequestPrediction");
}

void sub_10025C23C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A56300();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_10025C350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10025C368(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A16A8;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025C3BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A16A8;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025C424()
{
}

uint64_t sub_10025C484(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 44;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10025C4D4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v14 = 0;
      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v14);
        if (!result) {
          return result;
        }
        unsigned int v9 = v14;
      }
      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_101A56300();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }
      uint64_t v12 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10025C6E0(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return result;
}

uint64_t sub_10025C74C(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 24);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_22:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_10025C824(uint64_t a1, void *lpsrc)
{
  sub_10025C23C(a1, (uint64_t)lpsrc);
}

void sub_10025C8AC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025C23C(a1, a2);
  }
}

uint64_t sub_10025C918()
{
  return 1;
}

void *sub_10025C920@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.MiloInit");
}

BOOL sub_10025C930(unsigned int a1)
{
  return a1 < 0xB;
}

void sub_10025C93C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 44))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A56384();
      }
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 4) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 20);
      if (v8 >= 0xB) {
        sub_101A56358();
      }
      *(_DWORD *)(a1 + 44) |= 4u;
      *(_DWORD *)(a1 + 20) = v8;
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 8) != 0)
    {
      uint64_t v9 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 44) |= 8u;
      unint64_t v10 = *(std::string **)(a1 + 24);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v10, v9);
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 0x10) != 0)
    {
      unsigned int v11 = *(_DWORD *)(a2 + 32);
      if (v11 >= 3) {
        sub_101A5632C();
      }
      *(_DWORD *)(a1 + 44) |= 0x10u;
      *(_DWORD *)(a1 + 32) = v11;
      int v4 = *(_DWORD *)(a2 + 44);
    }
    if ((v4 & 0x20) != 0)
    {
      int v12 = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(a1 + 44) |= 0x20u;
      *(_DWORD *)(a1 + 36) = v12;
    }
  }
}

void sub_10025CB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10025CB34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1720;
  sub_1001A4C64((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025CB88(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1720;
  sub_1001A4C64((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025CBF0()
{
}

uint64_t sub_10025CC54(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 44);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 45;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 20) = 0;
    if ((*(unsigned char *)(result + 44) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(void *)(result + 32) = 0;
  }
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_10025CCE0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)(a1 + 36);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v30 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && (*v9 & 0x80000000) == 0)
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
LABEL_28:
          if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v17 = ((1 << v10) & 0x76B6) == 0) : (BOOL v17 = 1), !v17))
          {
            if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
              sub_101A56384();
            }
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 16) = v10;
          }
          int v19 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v19 < *((void *)this + 2) && *v19 == 18)
          {
            *((void *)this + 1) = v19 + 1;
            goto LABEL_42;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
        if (result)
        {
          unsigned int v10 = v30;
          goto LABEL_28;
        }
        break;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_22;
        }
LABEL_42:
        *(_DWORD *)(a1 + 44) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        char v20 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v20 >= v11 || *v20 != 24) {
          continue;
        }
        int v12 = v20 + 1;
        *((void *)this + 1) = v12;
LABEL_48:
        unsigned int v29 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!result) {
            return result;
          }
          unsigned int v21 = v29;
        }
        else
        {
          unsigned int v21 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (v21 <= 0xA)
        {
          *(_DWORD *)(a1 + 44) |= 4u;
          *(_DWORD *)(a1 + 20) = v21;
        }
        unint64_t v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 != 34) {
          continue;
        }
        *((void *)this + 1) = v22 + 1;
LABEL_58:
        *(_DWORD *)(a1 + 44) |= 8u;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v23 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v23 >= v13 || *v23 != 40) {
          continue;
        }
        unsigned int v14 = v23 + 1;
        *((void *)this + 1) = v14;
LABEL_64:
        unsigned int v28 = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
          if (!result) {
            return result;
          }
          unsigned int v24 = v28;
        }
        else
        {
          unsigned int v24 = *v14;
          *((void *)this + 1) = v14 + 1;
        }
        if (v24 <= 2)
        {
          *(_DWORD *)(a1 + 44) |= 0x10u;
          *(_DWORD *)(a1 + 32) = v24;
        }
        int v25 = (unsigned char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v25 >= v15 || *v25 != 48) {
          continue;
        }
        unint64_t v16 = v25 + 1;
        *((void *)this + 1) = v16;
LABEL_74:
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          char v26 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }
        else
        {
          *unsigned int v5 = *v16;
          char v26 = (unsigned __int8 *)(v16 + 1);
          *((void *)this + 1) = v26;
        }
        *(_DWORD *)(a1 + 44) |= 0x20u;
        if (v26 != (unsigned __int8 *)v15 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_48;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_58;
        }
        goto LABEL_22;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_64;
      case 6u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_74;
      default:
        int v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

int *sub_10025D114(int *result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v5 = result;
  int v6 = result[11];
  if (v6)
  {
    uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, result[4], a2, a4);
    int v6 = v5[11];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = v5[11];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  int v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[8], a2, a4);
    if ((v5[11] & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = v5[11];
  if ((v6 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  int v7 = v5[9];

  return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v7, a2, a4);
}

uint64_t sub_10025D1F4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_52;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    unsigned int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 44) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v8 = *(unsigned char *)(v6 + 23);
  }
  else
  {
    int v11 = 1;
  }
  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) != 0)
  {
    int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v12 & 0x80000000) != 0)
    {
      int v13 = 11;
    }
    else if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      int v13 = 2;
    }
    uint64_t v4 = (v13 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x10) == 0) {
        goto LABEL_25;
      }
      goto LABEL_42;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18, a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v16 = *(unsigned char *)(v14 + 23);
  }
  else
  {
    int v19 = 1;
  }
  if (v16 < 0) {
    int v15 = v17;
  }
  uint64_t v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_25:
    if ((v3 & 0x20) == 0) {
      goto LABEL_52;
    }
    goto LABEL_48;
  }
LABEL_42:
  char v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if ((v20 & 0x80000000) != 0)
  {
    int v21 = 11;
  }
  else if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }
  else
  {
    int v21 = 2;
  }
  uint64_t v4 = (v21 + v4);
  if ((v3 & 0x20) != 0)
  {
LABEL_48:
    unint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if (v22 >= 0x80) {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2) + 1;
    }
    else {
      int v23 = 2;
    }
    uint64_t v4 = (v23 + v4);
  }
LABEL_52:
  *(_DWORD *)(a1 + 40) = v4;
  return v4;
}

void sub_10025D3C4(uint64_t a1, void *lpsrc)
{
  sub_10025C93C(a1, (uint64_t)lpsrc);
}

void sub_10025D44C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025C93C(a1, a2);
  }
}

uint64_t sub_10025D4B8()
{
  return 1;
}

void *sub_10025D4C0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.MotionEvent");
}

void sub_10025D4D0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A563B0();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      int v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_10025D5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10025D5FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1798;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025D650(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1798;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025D6B8()
{
}

uint64_t sub_10025D718(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 46;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10025D768(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v14 = 0;
      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v14);
        if (!result) {
          return result;
        }
        unsigned int v9 = v14;
      }
      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_101A563B0();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }
      int v12 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10025D974(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  return result;
}

uint64_t sub_10025D9E0(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 24);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_22:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_10025DAB8(uint64_t a1, void *lpsrc)
{
  sub_10025D4D0(a1, (uint64_t)lpsrc);
}

void sub_10025DB40(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025D4D0(a1, a2);
  }
}

uint64_t sub_10025DBAC()
{
  return 1;
}

void *sub_10025DBB4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.LegacyThrottle");
}

void sub_10025DBC4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101A56408();
    }
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 24) = v5;
    int v4 = *(_DWORD *)(a2 + 48);
  }
  if ((v4 & 2) != 0)
  {
    int v7 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 48) |= 2u;
    char v8 = *(std::string **)(a1 + 8);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v8, v7);
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 4) == 0)
    {
LABEL_11:
      if ((v4 & 8) == 0) {
        goto LABEL_12;
      }
LABEL_22:
      int v11 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 48) |= 8u;
      int v12 = *(std::string **)(a1 + 32);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v12, v11);
      int v4 = *(_DWORD *)(a2 + 48);
      if ((v4 & 0x10) == 0)
      {
LABEL_13:
        if ((v4 & 0x20) == 0) {
          return;
        }
        goto LABEL_14;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_11;
  }
  uint64_t v9 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 48) |= 4u;
  unint64_t v10 = *(std::string **)(a1 + 16);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v10, v9);
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_12:
  if ((v4 & 0x10) == 0) {
    goto LABEL_13;
  }
LABEL_25:
  int v13 = *(_DWORD *)(a2 + 28);
  if ((v13 - 1) >= 0xB) {
    sub_101A563DC();
  }
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v13;
  if ((*(_DWORD *)(a2 + 48) & 0x20) != 0)
  {
LABEL_14:
    char v6 = *(unsigned char *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(unsigned char *)(a1 + 40) = v6;
  }
}

void sub_10025DDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_10025DE04(void *result)
{
  uint64_t v1 = result[1];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[2];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t v5 = result[4];
  if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    operator delete();
  }
  return result;
}

void sub_10025DEF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1810;
  sub_10025DE04(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025DF4C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1810;
  sub_10025DE04(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025DFB4()
{
}

uint64_t sub_10025E020(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 48);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 47;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 48) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 48) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(result + 28) = 1;
    *(unsigned char *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10025E0E4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v26 = 0;
        char v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_27:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v14 = ((1 << v9) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101A56408();
            }
            *(_DWORD *)(a1 + 48) |= 1u;
            *(_DWORD *)(a1 + 24) = v9;
          }
          char v16 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 18)
          {
            *((void *)this + 1) = v16 + 1;
            goto LABEL_41;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
        if (result)
        {
          unsigned int v9 = v26;
          goto LABEL_27;
        }
        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_22;
        }
LABEL_41:
        *(_DWORD *)(a1 + 48) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        uint64_t v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 26) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
LABEL_47:
        *(_DWORD *)(a1 + 48) |= 4u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unint64_t v18 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 != 34) {
          continue;
        }
        *((void *)this + 1) = v18 + 1;
LABEL_53:
        *(_DWORD *)(a1 + 48) |= 8u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        int v19 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v19 >= v10 || *v19 != 40) {
          continue;
        }
        int v11 = v19 + 1;
        *((void *)this + 1) = v11;
LABEL_59:
        unsigned int v25 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!result) {
            return result;
          }
          unsigned int v20 = v25;
        }
        else
        {
          unsigned int v20 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v20 - 1 <= 0xA)
        {
          *(_DWORD *)(a1 + 48) |= 0x10u;
          *(_DWORD *)(a1 + 28) = v20;
        }
        int v21 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v21 >= v12 || *v21 != 48) {
          continue;
        }
        int v13 = v21 + 1;
        *((void *)this + 1) = v13;
LABEL_69:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v22 = v27;
          int v23 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          unsigned int v22 = *v13;
          int v23 = (unsigned __int8 *)(v13 + 1);
          *((void *)this + 1) = v23;
        }
        *(unsigned char *)(a1 + 40) = v22 != 0;
        *(_DWORD *)(a1 + 48) |= 0x20u;
        if (v23 != (unsigned __int8 *)v12 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_47;
        }
        goto LABEL_22;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_53;
        }
        goto LABEL_22;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_59;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_69;
      default:
        int v7 = TagFallback & 7;
LABEL_22:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_10025E520(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 28), a2, a4);
    if ((*(_DWORD *)(v5 + 48) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  int v7 = *(unsigned __int8 *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v7, a2, a4);
}

uint64_t sub_10025E600(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_53;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      unsigned int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    unsigned int v4 = 0;
    if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 23);
  char v9 = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11, a2);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v10 = *(void *)(v7 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v9 = *(unsigned char *)(v7 + 23);
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < 0) {
    int v8 = v10;
  }
  v4 += v12 + v8 + 1;
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_24;
    }
LABEL_35:
    uint64_t v19 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 *)(v19 + 23);
    char v21 = v20;
    uint64_t v22 = *(void *)(v19 + 8);
    if ((v20 & 0x80u) == 0) {
      unint64_t v23 = *(unsigned __int8 *)(v19 + 23);
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23 >= 0x80)
    {
      int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23, a2);
      int v20 = *(unsigned __int8 *)(v19 + 23);
      uint64_t v22 = *(void *)(v19 + 8);
      int v3 = *(_DWORD *)(a1 + 48);
      char v21 = *(unsigned char *)(v19 + 23);
    }
    else
    {
      int v24 = 1;
    }
    if (v21 < 0) {
      int v20 = v22;
    }
    v4 += v24 + v20 + 1;
    if ((v3 & 0x10) == 0) {
      goto LABEL_50;
    }
    goto LABEL_44;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  int v14 = *(unsigned __int8 *)(v13 + 23);
  char v15 = v14;
  uint64_t v16 = *(void *)(v13 + 8);
  if ((v14 & 0x80u) == 0) {
    unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    unint64_t v17 = v16;
  }
  if (v17 >= 0x80)
  {
    int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17, a2);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    uint64_t v16 = *(void *)(v13 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v15 = *(unsigned char *)(v13 + 23);
  }
  else
  {
    int v18 = 1;
  }
  if (v15 < 0) {
    int v14 = v16;
  }
  v4 += v18 + v14 + 1;
  if ((v3 & 8) != 0) {
    goto LABEL_35;
  }
LABEL_24:
  if ((v3 & 0x10) != 0)
  {
LABEL_44:
    unsigned int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v25 & 0x80000000) != 0)
    {
      int v26 = 11;
    }
    else if (v25 >= 0x80)
    {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v26 = 2;
    }
    v4 += v26;
  }
LABEL_50:
  if ((v3 & 0x20) != 0) {
    uint64_t result = v4 + 2;
  }
  else {
    uint64_t result = v4;
  }
LABEL_53:
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_10025E7D4(uint64_t a1, void *lpsrc)
{
  sub_10025DBC4(a1, (uint64_t)lpsrc);
}

void sub_10025E85C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025DBC4(a1, a2);
  }
}

uint64_t sub_10025E8C8()
{
  return 1;
}

void *sub_10025E8D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.RetrievedLoi");
}

void sub_10025E8E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 16);
      if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
        sub_101A56434();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      uint64_t v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
}

void sub_10025E9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10025EA0C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1888;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10025EA60(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1888;
  sub_1001A4D20((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10025EAC8()
{
}

uint64_t sub_10025EB28(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 55;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10025EB78(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v14 = 0;
      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v14);
        if (!result) {
          return result;
        }
        unsigned int v9 = v14;
      }
      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_101A56434();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }
      int v12 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10025ED84(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 16), a2, a4);
    int v5 = *(_DWORD *)(v4 + 24);
  }
  if ((v5 & 2) != 0)
  {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  }
  return result;
}

uint64_t sub_10025EDF0(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 24);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_22:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

void sub_10025EEC8(uint64_t a1, void *lpsrc)
{
  sub_10025E8E0(a1, (uint64_t)lpsrc);
}

void sub_10025EF50(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    sub_10025E8E0(a1, a2);
  }
}

uint64_t sub_10025EFBC()
{
  return 1;
}

void *sub_10025EFC4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLMicroLocationProto.EnableAtCurrentLocation");
}

uint64_t sub_10025EFD4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022A1900;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_10025F07C(a1, a2);
  return a1;
}

void sub_10025F068(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10025F07C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v76);
  }
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if (!(_BYTE)v4) {
    goto LABEL_53;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 292) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_102489AB8 + 8);
    }
    sub_10024D738(v5, v6);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 292) |= 2u;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489AB8 + 16);
  }
  sub_10024EE94(v7, v8);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_23:
  *(_DWORD *)(a1 + 292) |= 4u;
  uint64_t v9 = *(void *)(a1 + 24);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_102489AB8 + 24);
  }
  sub_10024FA74(v9, v10);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_28:
  *(_DWORD *)(a1 + 292) |= 8u;
  uint64_t v11 = *(void *)(a1 + 32);
  if (!v11) {
    operator new();
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_102489AB8 + 32);
  }
  sub_100250168(v11, v12);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_38:
    *(_DWORD *)(a1 + 292) |= 0x20u;
    uint64_t v15 = *(void *)(a1 + 48);
    if (!v15) {
      operator new();
    }
    uint64_t v16 = *(void *)(a2 + 48);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_102489AB8 + 48);
    }
    sub_1002515D8(v15, v16);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_53;
      }
      goto LABEL_48;
    }
    goto LABEL_43;
  }
LABEL_33:
  *(_DWORD *)(a1 + 292) |= 0x10u;
  uint64_t v13 = *(void *)(a1 + 40);
  if (!v13) {
    operator new();
  }
  uint64_t v14 = *(void *)(a2 + 40);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_102489AB8 + 40);
  }
  sub_100251138(v13, v14);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_43:
  *(_DWORD *)(a1 + 292) |= 0x40u;
  uint64_t v17 = *(void *)(a1 + 56);
  if (!v17) {
    operator new();
  }
  uint64_t v18 = *(void *)(a2 + 56);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_102489AB8 + 56);
  }
  sub_1002532AC(v17, v18);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x80) != 0)
  {
LABEL_48:
    *(_DWORD *)(a1 + 292) |= 0x80u;
    uint64_t v19 = *(void *)(a1 + 64);
    if (!v19) {
      operator new();
    }
    uint64_t v20 = *(void *)(a2 + 64);
    if (!v20) {
      uint64_t v20 = *(void *)(qword_102489AB8 + 64);
    }
    sub_100254FD4(v19, v20);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
  }
LABEL_53:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_103;
  }
  if ((v4 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x100u;
    uint64_t v21 = *(void *)(a1 + 72);
    if (!v21) {
      operator new();
    }
    uint64_t v22 = *(void *)(a2 + 72);
    if (!v22) {
      uint64_t v22 = *(void *)(qword_102489AB8 + 72);
    }
    sub_10024E35C(v21, v22);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
    if ((v4 & 0x200) == 0)
    {
LABEL_56:
      if ((v4 & 0x400) == 0) {
        goto LABEL_57;
      }
      goto LABEL_73;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_56;
  }
  *(_DWORD *)(a1 + 292) |= 0x200u;
  uint64_t v23 = *(void *)(a1 + 80);
  if (!v23) {
    operator new();
  }
  uint64_t v24 = *(void *)(a2 + 80);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_102489AB8 + 80);
  }
  sub_100250608(v23, v24);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x400) == 0)
  {
LABEL_57:
    if ((v4 & 0x800) == 0) {
      goto LABEL_58;
    }
    goto LABEL_78;
  }
LABEL_73:
  *(_DWORD *)(a1 + 292) |= 0x400u;
  uint64_t v25 = *(void *)(a1 + 88);
  if (!v25) {
    operator new();
  }
  uint64_t v26 = *(void *)(a2 + 88);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_102489AB8 + 88);
  }
  sub_100255FB8(v25, v26);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x800) == 0)
  {
LABEL_58:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_83;
  }
LABEL_78:
  *(_DWORD *)(a1 + 292) |= 0x800u;
  uint64_t v27 = *(void *)(a1 + 96);
  if (!v27) {
    operator new();
  }
  uint64_t v28 = *(void *)(a2 + 96);
  if (!v28) {
    uint64_t v28 = *(void *)(qword_102489AB8 + 96);
  }
  sub_100256458(v27, v28);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x1000) == 0)
  {
LABEL_59:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_88;
  }
LABEL_83:
  *(_DWORD *)(a1 + 292) |= 0x1000u;
  uint64_t v29 = *(void *)(a1 + 104);
  if (!v29) {
    operator new();
  }
  uint64_t v30 = *(void *)(a2 + 104);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_102489AB8 + 104);
  }
  sub_1002568F8(v29, v30);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x2000) == 0)
  {
LABEL_60:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_93;
  }
LABEL_88:
  *(_DWORD *)(a1 + 292) |= 0x2000u;
  uint64_t v31 = *(void *)(a1 + 112);
  if (!v31) {
    operator new();
  }
  uint64_t v32 = *(void *)(a2 + 112);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_102489AB8 + 112);
  }
  sub_100256D98(v31, v32);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x4000) == 0)
  {
LABEL_61:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_98;
  }
LABEL_93:
  *(_DWORD *)(a1 + 292) |= 0x4000u;
  uint64_t v33 = *(void *)(a1 + 120);
  if (!v33) {
    operator new();
  }
  uint64_t v34 = *(void *)(a2 + 120);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_102489AB8 + 120);
  }
  sub_100257238(v33, v34);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x8000) != 0)
  {
LABEL_98:
    *(_DWORD *)(a1 + 292) |= 0x8000u;
    uint64_t v35 = *(void *)(a1 + 128);
    if (!v35) {
      operator new();
    }
    uint64_t v36 = *(void *)(a2 + 128);
    if (!v36) {
      uint64_t v36 = *(void *)(qword_102489AB8 + 128);
    }
    sub_1002576D8(v35, v36);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
  }
LABEL_103:
  if ((v4 & 0xFF0000) == 0) {
    goto LABEL_153;
  }
  if ((v4 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x10000u;
    uint64_t v37 = *(void *)(a1 + 136);
    if (!v37) {
      operator new();
    }
    uint64_t v38 = *(void *)(a2 + 136);
    if (!v38) {
      uint64_t v38 = *(void *)(qword_102489AB8 + 136);
    }
    sub_100257EAC(v37, v38);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
    if ((v4 & 0x20000) == 0)
    {
LABEL_106:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_123;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_106;
  }
  *(_DWORD *)(a1 + 292) |= 0x20000u;
  uint64_t v39 = *(void *)(a1 + 144);
  if (!v39) {
    operator new();
  }
  uint64_t v40 = *(void *)(a2 + 144);
  if (!v40) {
    uint64_t v40 = *(void *)(qword_102489AB8 + 144);
  }
  sub_1002587F0(v39, v40);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x40000) == 0)
  {
LABEL_107:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_128;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) |= 0x40000u;
  uint64_t v41 = *(void *)(a1 + 152);
  if (!v41) {
    operator new();
  }
  uint64_t v42 = *(void *)(a2 + 152);
  if (!v42) {
    uint64_t v42 = *(void *)(qword_102489AB8 + 152);
  }
  sub_100259078(v41, v42);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x80000) == 0)
  {
LABEL_108:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_133;
  }
LABEL_128:
  *(_DWORD *)(a1 + 292) |= 0x80000u;
  uint64_t v43 = *(void *)(a1 + 160);
  if (!v43) {
    operator new();
  }
  uint64_t v44 = *(void *)(a2 + 160);
  if (!v44) {
    uint64_t v44 = *(void *)(qword_102489AB8 + 160);
  }
  sub_100259900(v43, v44);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x100000) == 0)
  {
LABEL_109:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_138;
  }
LABEL_133:
  *(_DWORD *)(a1 + 292) |= 0x100000u;
  uint64_t v45 = *(void *)(a1 + 168);
  if (!v45) {
    operator new();
  }
  uint64_t v46 = *(void *)(a2 + 168);
  if (!v46) {
    uint64_t v46 = *(void *)(qword_102489AB8 + 168);
  }
  sub_10025A284(v45, v46);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x200000) == 0)
  {
LABEL_110:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_111;
    }
    goto LABEL_143;
  }
LABEL_138:
  *(_DWORD *)(a1 + 292) |= 0x200000u;
  uint64_t v47 = *(void *)(a1 + 176);
  if (!v47) {
    operator new();
  }
  uint64_t v48 = *(void *)(a2 + 176);
  if (!v48) {
    uint64_t v48 = *(void *)(qword_102489AB8 + 176);
  }
  sub_10025AB0C(v47, v48);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x400000) == 0)
  {
LABEL_111:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_153;
    }
    goto LABEL_148;
  }
LABEL_143:
  *(_DWORD *)(a1 + 292) |= 0x400000u;
  uint64_t v49 = *(void *)(a1 + 184);
  if (!v49) {
    operator new();
  }
  uint64_t v50 = *(void *)(a2 + 184);
  if (!v50) {
    uint64_t v50 = *(void *)(qword_102489AB8 + 184);
  }
  sub_10025B800(v49, v50);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x800000) != 0)
  {
LABEL_148:
    *(_DWORD *)(a1 + 292) |= 0x800000u;
    uint64_t v51 = *(void *)(a1 + 192);
    if (!v51) {
      operator new();
    }
    uint64_t v52 = *(void *)(a2 + 192);
    if (!v52) {
      uint64_t v52 = *(void *)(qword_102489AB8 + 192);
    }
    sub_10025C23C(v51, v52);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
  }
LABEL_153:
  if (!HIBYTE(v4)) {
    goto LABEL_203;
  }
  if ((v4 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x1000000u;
    uint64_t v53 = *(void *)(a1 + 200);
    if (!v53) {
      operator new();
    }
    uint64_t v54 = *(void *)(a2 + 200);
    if (!v54) {
      uint64_t v54 = *(void *)(qword_102489AB8 + 200);
    }
    sub_10025C93C(v53, v54);
    unsigned int v4 = *(_DWORD *)(a2 + 292);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_156:
      if ((v4 & 0x4000000) == 0) {
        goto LABEL_157;
      }
      goto LABEL_173;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_156;
  }
  *(_DWORD *)(a1 + 292) |= 0x2000000u;
  uint64_t v55 = *(void *)(a1 + 208);
  if (!v55) {
    operator new();
  }
  uint64_t v56 = *(void *)(a2 + 208);
  if (!v56) {
    uint64_t v56 = *(void *)(qword_102489AB8 + 208);
  }
  sub_10025D4D0(v55, v56);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_157:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_178;
  }
LABEL_173:
  *(_DWORD *)(a1 + 292) |= 0x4000000u;
  uint64_t v57 = *(void *)(a1 + 216);
  if (!v57) {
    operator new();
  }
  uint64_t v58 = *(void *)(a2 + 216);
  if (!v58) {
    uint64_t v58 = *(void *)(qword_102489AB8 + 216);
  }
  sub_10025DBC4(v57, v58);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_158:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_183;
  }
LABEL_178:
  *(_DWORD *)(a1 + 292) |= 0x8000000u;
  uint64_t v59 = *(void *)(a1 + 224);
  if (!v59) {
    operator new();
  }
  uint64_t v60 = *(void *)(a2 + 224);
  if (!v60) {
    uint64_t v60 = *(void *)(qword_102489AB8 + 224);
  }
  sub_100264F2C(v59, v60);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_159:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_188;
  }
LABEL_183:
  *(_DWORD *)(a1 + 292) |= 0x10000000u;
  unsigned int v61 = *(_DWORD **)(a1 + 232);
  if (!v61) {
    operator new();
  }
  uint64_t v62 = *(void *)(a2 + 232);
  if (!v62) {
    uint64_t v62 = *(void *)(qword_102489AB8 + 232);
  }
  sub_1002652B4(v61, v62);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_160:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_193;
  }
LABEL_188:
  *(_DWORD *)(a1 + 292) |= 0x20000000u;
  uint64_t v63 = *(void *)(a1 + 240);
  if (!v63) {
    operator new();
  }
  uint64_t v64 = *(void *)(a2 + 240);
  if (!v64) {
    uint64_t v64 = *(void *)(qword_102489AB8 + 240);
  }
  sub_1002653BC(v63, v64);
  unsigned int v4 = *(_DWORD *)(a2 + 292);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_161:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_203;
    }
    goto LABEL_198;
  }
LABEL_193:
  *(_DWORD *)(a1 + 292) |= 0x40000000u;
  uint64_t v65 = *(void *)(a1 + 248);
  if (!v65) {
    operator new();
  }
  uint64_t v66 = *(void *)(a2 + 248);
  if (!v66) {
    uint64_t v66 = *(void *)(qword_102489AB8 + 248);
  }
  sub_1002654AC(v65, v66);
  if ((*(_DWORD *)(a2 + 292) & 0x80000000) != 0)
  {
LABEL_198:
    *(_DWORD *)(a1 + 292) |= 0x80000000;
    uint64_t v67 = *(void *)(a1 + 256);
    if (!v67) {
      operator new();
    }
    uint64_t v68 = *(void *)(a2 + 256);
    if (!v68) {
      uint64_t v68 = *(void *)(qword_102489AB8 + 256);
    }
    sub_100265640(v67, v68);
  }
LABEL_203:
  LOBYTE(v69) = *(unsigned char *)(a2 + 296);
  if (!(_BYTE)v69) {
    return;
  }
  if (*(unsigned char *)(a2 + 296))
  {
    *(_DWORD *)(a1 + 296) |= 1u;
    uint64_t v70 = *(void *)(a1 + 264);
    if (!v70) {
      operator new();
    }
    uint64_t v71 = *(void *)(a2 + 264);
    if (!v71) {
      uint64_t v71 = *(void *)(qword_102489AB8 + 264);
    }
    sub_100265730(v70, v71);
    int v69 = *(_DWORD *)(a2 + 296);
    if ((v69 & 2) == 0)
    {
LABEL_206:
      if ((v69 & 4) == 0) {
        return;
      }
      goto LABEL_218;
    }
  }
  else if ((*(unsigned char *)(a2 + 296) & 2) == 0)
  {
    goto LABEL_206;
  }
  *(_DWORD *)(a1 + 296) |= 2u;
  uint64_t v72 = *(void *)(a1 + 272);
  if (!v72) {
    operator new();
  }
  uint64_t v73 = *(void *)(a2 + 272);
  if (!v73) {
    uint64_t v73 = *(void *)(qword_102489AB8 + 272);
  }
  sub_100265800(v72, v73);
  if ((*(_DWORD *)(a2 + 296) & 4) != 0)
  {
LABEL_218:
    *(_DWORD *)(a1 + 296) |= 4u;
    uint64_t v74 = *(void *)(a1 + 280);
    if (!v74) {
      operator new();
    }
    uint64_t v75 = *(void *)(a2 + 280);
    if (!v75) {
      uint64_t v75 = *(void *)(qword_102489AB8 + 280);
    }
    sub_10025E8E0(v74, v75);
  }
}

void sub_1002603C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1002603E0(void *result)
{
  if ((void *)qword_102489AB8 != result)
  {
    char v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[5];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[6];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v1[7];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = v1[8];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = v1[9];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v1[10];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = v1[11];
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = v1[12];
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = v1[13];
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v1[14];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v1[15];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v1[16];
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = v1[17];
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = v1[18];
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = v1[19];
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = v1[20];
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = v1[21];
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = v1[22];
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = v1[23];
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    uint64_t v25 = v1[24];
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    uint64_t v26 = v1[25];
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    uint64_t v27 = v1[26];
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    uint64_t v28 = v1[27];
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
    uint64_t v29 = v1[28];
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    uint64_t v30 = v1[29];
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    uint64_t v31 = v1[30];
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    uint64_t v32 = v1[31];
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
    uint64_t v33 = v1[32];
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
    uint64_t v34 = v1[33];
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    }
    uint64_t v35 = v1[34];
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
    uint64_t result = (void *)v1[35];
    if (result)
    {
      uint64_t v36 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v36();
    }
  }
  return result;
}

void sub_100260A2C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1900;
  sub_1002603E0(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100260A80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022A1900;
  sub_1002603E0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100260AE8()
{
}

uint64_t sub_100260B80(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (unsigned int *)(result + 292);
  unsigned int v3 = *(_DWORD *)(result + 292);
  if ((_BYTE)v3)
  {
    if (v3)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_10024DB54(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_10024F2B8(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 4) != 0)
    {
      uint64_t result = *(void *)(v1 + 24);
      if (result)
      {
        uint64_t result = sub_10024FCBC(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 32);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 16)) {
          *(_DWORD *)(v4 + 8) = 5;
        }
        *(_DWORD *)(v4 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 40);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 16)) {
          *(_DWORD *)(v5 + 8) = 7;
        }
        *(_DWORD *)(v5 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x20) != 0)
    {
      uint64_t result = *(void *)(v1 + 48);
      if (result)
      {
        uint64_t result = sub_100251F6C(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x40) != 0)
    {
      uint64_t result = *(void *)(v1 + 56);
      if (result)
      {
        uint64_t result = sub_1002539E8(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 64);
      if (result)
      {
        uint64_t result = sub_100255500(result);
        unsigned int v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t result = *(void *)(v1 + 72);
      if (result)
      {
        uint64_t result = sub_10024E688(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x200) != 0)
    {
      uint64_t result = *(void *)(v1 + 80);
      if (result)
      {
        uint64_t result = sub_100250A0C(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x400) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 88);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 16)) {
          *(_DWORD *)(v6 + 8) = 31;
        }
        *(_DWORD *)(v6 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x800) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 96);
      if (v7)
      {
        if (*(unsigned char *)(v7 + 16)) {
          *(_DWORD *)(v7 + 8) = 32;
        }
        *(_DWORD *)(v7 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      uint64_t v8 = *(void *)(v1 + 104);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 16)) {
          *(_DWORD *)(v8 + 8) = 33;
        }
        *(_DWORD *)(v8 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      uint64_t v9 = *(void *)(v1 + 112);
      if (v9)
      {
        if (*(unsigned char *)(v9 + 16)) {
          *(_DWORD *)(v9 + 8) = 34;
        }
        *(_DWORD *)(v9 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      uint64_t v10 = *(void *)(v1 + 120);
      if (v10)
      {
        if (*(unsigned char *)(v10 + 16)) {
          *(_DWORD *)(v10 + 8) = 35;
        }
        *(_DWORD *)(v10 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x8000) != 0)
    {
      uint64_t result = *(void *)(v1 + 128);
      if (result)
      {
        uint64_t result = sub_100257948(result);
        unsigned int v3 = *v2;
      }
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      uint64_t result = *(void *)(v1 + 136);
      if (result)
      {
        uint64_t result = sub_100258214(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x20000) != 0)
    {
      uint64_t result = *(void *)(v1 + 144);
      if (result)
      {
        uint64_t result = sub_100258A9C(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x40000) != 0)
    {
      uint64_t result = *(void *)(v1 + 152);
      if (result)
      {
        uint64_t result = sub_100259324(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x80000) != 0)
    {
      uint64_t result = *(void *)(v1 + 160);
      if (result)
      {
        uint64_t result = sub_100259BD8(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x100000) != 0)
    {
      uint64_t result = *(void *)(v1 + 168);
      if (result)
      {
        uint64_t result = sub_10025A530(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x200000) != 0)
    {
      uint64_t result = *(void *)(v1 + 176);
      if (result)
      {
        uint64_t result = sub_10025AFA8(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x400000) != 0)
    {
      uint64_t result = *(void *)(v1 + 184);
      if (result)
      {
        uint64_t result = sub_10025BB10(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x800000) != 0)
    {
      uint64_t result = *(void *)(v1 + 192);
      if (result)
      {
        uint64_t result = sub_10025C484(result);
        unsigned int v3 = *v2;
      }
    }
  }
  if (HIBYTE(v3))
  {
    if ((v3 & 0x1000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 200);
      if (result)
      {
        uint64_t result = sub_10025CC54(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x2000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 208);
      if (result)
      {
        uint64_t result = sub_10025D718(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x4000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 216);
      if (result)
      {
        uint64_t result = sub_10025E020(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x8000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 224);
      if (result)
      {
        uint64_t result = sub_100260F68(result);
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x10000000) != 0)
    {
      uint64_t v11 = *(void *)(v1 + 232);
      if (v11)
      {
        if (*(unsigned char *)(v11 + 20)) {
          *(void *)(v11 + 8) = 0x100000031;
        }
        *(_DWORD *)(v11 + 20) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x20000000) != 0)
    {
      uint64_t v12 = *(void *)(v1 + 240);
      if (v12)
      {
        if (*(unsigned char *)(v12 + 20))
        {
          *(_DWORD *)(v12 + 8) = 50;
          *(unsigned char *)(v12 + 12) = 0;
        }
        *(_DWORD *)(v12 + 20) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x40000000) != 0)
    {
      uint64_t v13 = *(void *)(v1 + 248);
      if (v13)
      {
        if (*(unsigned char *)(v13 + 24))
        {
          *(void *)(v13 + 8) = 51;
          *(_WORD *)(v13 + 16) = 0;
        }
        *(_DWORD *)(v13 + 24) = 0;
        unsigned int v3 = *v2;
      }
    }
    if ((v3 & 0x80000000) != 0)
    {
      uint64_t v14 = *(void *)(v1 + 256);
      if (v14)
      {
        if (*(unsigned char *)(v14 + 20))
        {
          *(_DWORD *)(v14 + 8) = 52;
          *(unsigned char *)(v14 + 12) = 0;
        }
        *(_DWORD *)(v14 + 20) = 0;
      }
    }
  }
  LOBYTE(v15) = *(unsigned char *)(v1 + 296);
  if ((_BYTE)v15)
  {
    if (*(unsigned char *)(v1 + 296))
    {
      uint64_t v16 = *(void *)(v1 + 264);
      if (v16)
      {
        if (*(unsigned char *)(v16 + 16)) {
          *(_DWORD *)(v16 + 8) = 53;
        }
        *(_DWORD *)(v16 + 16) = 0;
        int v15 = *(_DWORD *)(v1 + 296);
      }
    }
    if ((v15 & 2) != 0)
    {
      uint64_t v17 = *(void *)(v1 + 272);
      if (v17)
      {
        if (*(unsigned char *)(v17 + 16)) {
          *(_DWORD *)(v17 + 8) = 54;
        }
        *(_DWORD *)(v17 + 16) = 0;
        int v15 = *(_DWORD *)(v1 + 296);
      }
    }
    if ((v15 & 4) != 0)
    {
      uint64_t result = *(void *)(v1 + 280);
      if (result) {
        uint64_t result = sub_10025EB28(result);
      }
    }
  }
  *(void *)uint64_t v2 = 0;
  return result;
}

uint64_t sub_100260F68(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 80);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 24) = 48;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 28) = 0;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 80) & 0x10) != 0)
    {
      uint64_t v3 = *(void *)(result + 32);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 80) & 0x20) != 0)
    {
      uint64_t v4 = *(void *)(result + 40);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 80) & 0x40) != 0)
    {
      uint64_t v5 = *(void *)(result + 48);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(unsigned char **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v5 = 0;
          *(unsigned char *)(v5 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(result + 29) = 0;
    int v1 = *(_DWORD *)(result + 80);
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 56) = 0;
    *(_DWORD *)(result + 72) = 0;
    if ((v1 & 0x800) != 0)
    {
      uint64_t v6 = *(void *)(result + 64);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(unsigned char **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v6 = 0;
          *(unsigned char *)(v6 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_1002610B0(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0x100000031;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1002610CC(uint64_t result)
{
  if (*(unsigned char *)(result + 20))
  {
    *(_DWORD *)(result + 8) = 50;
    *(unsigned char *)(result + 12) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1002610E8(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    *(void *)(result + 8) = 51;
    *(_WORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100261104(uint64_t result)
{
  if (*(unsigned char *)(result + 20))
  {
    *(_DWORD *)(result + 8) = 52;
    *(unsigned char *)(result + 12) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100261120(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 53;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100261138(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 54;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100261150(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_81;
        }
        *(_DWORD *)(a1 + 292) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10024DC0C(v8, this, v13) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        uint64_t v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 18) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
        goto LABEL_93;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_81;
        }
LABEL_93:
        *(_DWORD *)(a1 + 292) |= 2u;
        uint64_t v18 = *(void *)(a1 + 16);
        if (!v18) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v19 = (char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v19;
          *((void *)this + 1) = v19 + 1;
        }
        int v20 = *((_DWORD *)this + 14);
        int v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21) {
          return 0;
        }
        int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10024F35C(v18, this, v23) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        int v24 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v24, 1);
        int v25 = v24 - 1;
        if (v25 < 0 == v15) {
          *((_DWORD *)this + 14) = v25;
        }
        uint64_t v26 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v26 >= *((void *)this + 2) || *v26 != 34) {
          continue;
        }
        *((void *)this + 1) = v26 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 292) |= 4u;
        uint64_t v27 = *(void *)(a1 + 24);
        if (!v27) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v28 = (char *)*((void *)this + 1);
        if ((unint64_t)v28 >= *((void *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v28;
          *((void *)this + 1) = v28 + 1;
        }
        int v29 = *((_DWORD *)this + 14);
        int v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30) {
          return 0;
        }
        int v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10024FD0C(v27, this, v32) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        int v33 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v33, 1);
        int v34 = v33 - 1;
        if (v34 < 0 == v15) {
          *((_DWORD *)this + 14) = v34;
        }
        uint64_t v35 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v35 >= *((void *)this + 2) || *v35 != 42) {
          continue;
        }
        *((void *)this + 1) = v35 + 1;
LABEL_121:
        *(_DWORD *)(a1 + 292) |= 8u;
        uint64_t v36 = *(void *)(a1 + 32);
        if (!v36) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v37 = (char *)*((void *)this + 1);
        if ((unint64_t)v37 >= *((void *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v37;
          *((void *)this + 1) = v37 + 1;
        }
        int v38 = *((_DWORD *)this + 14);
        int v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 >= v39) {
          return 0;
        }
        int v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025031C(v36, this, v41) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
        int v42 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v42, 1);
        int v43 = v42 - 1;
        if (v43 < 0 == v15) {
          *((_DWORD *)this + 14) = v43;
        }
        uint64_t v44 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v44 >= *((void *)this + 2) || *v44 != 58) {
          continue;
        }
        *((void *)this + 1) = v44 + 1;
LABEL_135:
        *(_DWORD *)(a1 + 292) |= 0x10u;
        uint64_t v45 = *(void *)(a1 + 40);
        if (!v45) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v46 = (char *)*((void *)this + 1);
        if ((unint64_t)v46 >= *((void *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v46;
          *((void *)this + 1) = v46 + 1;
        }
        int v47 = *((_DWORD *)this + 14);
        int v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48) {
          return 0;
        }
        int v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_1002512EC(v45, this, v50) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        int v51 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v51, 1);
        int v52 = v51 - 1;
        if (v52 < 0 == v15) {
          *((_DWORD *)this + 14) = v52;
        }
        uint64_t v53 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v53 >= *((void *)this + 2) || *v53 != 74) {
          continue;
        }
        *((void *)this + 1) = v53 + 1;
LABEL_149:
        *(_DWORD *)(a1 + 292) |= 0x20u;
        uint64_t v54 = *(void *)(a1 + 48);
        if (!v54) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v55 = (char *)*((void *)this + 1);
        if ((unint64_t)v55 >= *((void *)this + 2) || *v55 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v55;
          *((void *)this + 1) = v55 + 1;
        }
        int v56 = *((_DWORD *)this + 14);
        int v57 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v56 + 1;
        if (v56 >= v57) {
          return 0;
        }
        int v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025222C(v54, this, v59) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v58);
        int v60 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v60, 1);
        int v61 = v60 - 1;
        if (v61 < 0 == v15) {
          *((_DWORD *)this + 14) = v61;
        }
        uint64_t v62 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v62 >= *((void *)this + 2) || *v62 != 82) {
          continue;
        }
        *((void *)this + 1) = v62 + 1;
LABEL_163:
        *(_DWORD *)(a1 + 292) |= 0x40u;
        uint64_t v63 = *(void *)(a1 + 56);
        if (!v63) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v64 = (char *)*((void *)this + 1);
        if ((unint64_t)v64 >= *((void *)this + 2) || *v64 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v64;
          *((void *)this + 1) = v64 + 1;
        }
        int v65 = *((_DWORD *)this + 14);
        int v66 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v65 + 1;
        if (v65 >= v66) {
          return 0;
        }
        int v67 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100253BB8(v63, this, v68) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v67);
        int v69 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v69, 1);
        int v70 = v69 - 1;
        if (v70 < 0 == v15) {
          *((_DWORD *)this + 14) = v70;
        }
        uint64_t v71 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v71 >= *((void *)this + 2) || *v71 != 90) {
          continue;
        }
        *((void *)this + 1) = v71 + 1;
LABEL_177:
        *(_DWORD *)(a1 + 292) |= 0x80u;
        uint64_t v72 = *(void *)(a1 + 64);
        if (!v72) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v73 = (char *)*((void *)this + 1);
        if ((unint64_t)v73 >= *((void *)this + 2) || *v73 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v73;
          *((void *)this + 1) = v73 + 1;
        }
        int v74 = *((_DWORD *)this + 14);
        int v75 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v74 + 1;
        if (v74 >= v75) {
          return 0;
        }
        int v76 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_1002555CC(v72, this, v77) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v76);
        int v78 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v78, 1);
        int v79 = v78 - 1;
        if (v79 < 0 == v15) {
          *((_DWORD *)this + 14) = v79;
        }
        unsigned int v80 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v80 >= *((void *)this + 2) || *v80 != 98) {
          continue;
        }
        *((void *)this + 1) = v80 + 1;
LABEL_191:
        *(_DWORD *)(a1 + 292) |= 0x100u;
        uint64_t v81 = *(void *)(a1 + 72);
        if (!v81) {
          operator new();
        }
        unsigned int v324 = 0;
        int v82 = (char *)*((void *)this + 1);
        if ((unint64_t)v82 >= *((void *)this + 2) || *v82 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v82;
          *((void *)this + 1) = v82 + 1;
        }
        int v83 = *((_DWORD *)this + 14);
        int v84 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v83 + 1;
        if (v83 >= v84) {
          return 0;
        }
        int v85 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10024E744(v81, this, v86) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v85);
        int v87 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v87, 1);
        int v88 = v87 - 1;
        if (v88 < 0 == v15) {
          *((_DWORD *)this + 14) = v88;
        }
        int v89 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v89 >= *((void *)this + 2) || *v89 != 106) {
          continue;
        }
        *((void *)this + 1) = v89 + 1;
LABEL_205:
        *(_DWORD *)(a1 + 292) |= 0x200u;
        uint64_t v90 = *(void *)(a1 + 80);
        if (!v90) {
          operator new();
        }
        unsigned int v324 = 0;
        unsigned int v91 = (char *)*((void *)this + 1);
        if ((unint64_t)v91 >= *((void *)this + 2) || *v91 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v91;
          *((void *)this + 1) = v91 + 1;
        }
        int v92 = *((_DWORD *)this + 14);
        int v93 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v92 + 1;
        if (v92 >= v93) {
          return 0;
        }
        int v94 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100250AC4(v90, this, v95) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v94);
        int v96 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v96, 1);
        int v97 = v96 - 1;
        if (v97 < 0 == v15) {
          *((_DWORD *)this + 14) = v97;
        }
        int v98 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v98 >= *((void *)this + 2) || *v98 != 114) {
          continue;
        }
        *((void *)this + 1) = v98 + 1;
LABEL_219:
        *(_DWORD *)(a1 + 292) |= 0x400u;
        uint64_t v99 = *(void *)(a1 + 88);
        if (!v99) {
          operator new();
        }
        unsigned int v324 = 0;
        int v100 = (char *)*((void *)this + 1);
        if ((unint64_t)v100 >= *((void *)this + 2) || *v100 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v100;
          *((void *)this + 1) = v100 + 1;
        }
        int v101 = *((_DWORD *)this + 14);
        int v102 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v101 + 1;
        if (v101 >= v102) {
          return 0;
        }
        int v103 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025616C(v99, this, v104) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v103);
        int v105 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v105, 1);
        int v106 = v105 - 1;
        if (v106 < 0 == v15) {
          *((_DWORD *)this + 14) = v106;
        }
        unsigned int v107 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v107 >= *((void *)this + 2) || *v107 != 122) {
          continue;
        }
        *((void *)this + 1) = v107 + 1;
LABEL_233:
        *(_DWORD *)(a1 + 292) |= 0x800u;
        uint64_t v108 = *(void *)(a1 + 96);
        if (!v108) {
          operator new();
        }
        unsigned int v324 = 0;
        int v109 = (char *)*((void *)this + 1);
        if ((unint64_t)v109 >= *((void *)this + 2) || *v109 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v109;
          *((void *)this + 1) = v109 + 1;
        }
        int v110 = *((_DWORD *)this + 14);
        int v111 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v110 + 1;
        if (v110 >= v111) {
          return 0;
        }
        int v112 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025660C(v108, this, v113) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v112);
        int v114 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v114, 1);
        int v115 = v114 - 1;
        if (v115 < 0 == v15) {
          *((_DWORD *)this + 14) = v115;
        }
        uint64_t v116 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v116 <= 1 || *v116 != 130 || v116[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v116 + 2;
LABEL_248:
        *(_DWORD *)(a1 + 292) |= 0x1000u;
        uint64_t v117 = *(void *)(a1 + 104);
        if (!v117) {
          operator new();
        }
        unsigned int v324 = 0;
        int v118 = (char *)*((void *)this + 1);
        if ((unint64_t)v118 >= *((void *)this + 2) || *v118 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v118;
          *((void *)this + 1) = v118 + 1;
        }
        int v119 = *((_DWORD *)this + 14);
        int v120 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v119 + 1;
        if (v119 >= v120) {
          return 0;
        }
        int v121 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100256AAC(v117, this, v122) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v121);
        int v123 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v123, 1);
        int v124 = v123 - 1;
        if (v124 < 0 == v15) {
          *((_DWORD *)this + 14) = v124;
        }
        long long v125 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v125 <= 1 || *v125 != 138 || v125[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v125 + 2;
LABEL_263:
        *(_DWORD *)(a1 + 292) |= 0x2000u;
        uint64_t v126 = *(void *)(a1 + 112);
        if (!v126) {
          operator new();
        }
        unsigned int v324 = 0;
        long long v127 = (char *)*((void *)this + 1);
        if ((unint64_t)v127 >= *((void *)this + 2) || *v127 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v127;
          *((void *)this + 1) = v127 + 1;
        }
        int v128 = *((_DWORD *)this + 14);
        int v129 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v128 + 1;
        if (v128 >= v129) {
          return 0;
        }
        int v130 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100256F4C(v126, this, v131) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v130);
        int v132 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v132, 1);
        int v133 = v132 - 1;
        if (v133 < 0 == v15) {
          *((_DWORD *)this + 14) = v133;
        }
        uint64_t v134 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v134 <= 1 || *v134 != 146 || v134[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v134 + 2;
LABEL_278:
        *(_DWORD *)(a1 + 292) |= 0x4000u;
        uint64_t v135 = *(void *)(a1 + 120);
        if (!v135) {
          operator new();
        }
        unsigned int v324 = 0;
        __int16 v136 = (char *)*((void *)this + 1);
        if ((unint64_t)v136 >= *((void *)this + 2) || *v136 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v136;
          *((void *)this + 1) = v136 + 1;
        }
        int v137 = *((_DWORD *)this + 14);
        int v138 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v137 + 1;
        if (v137 >= v138) {
          return 0;
        }
        int v139 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_1002573EC(v135, this, v140) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v139);
        int v141 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v141, 1);
        int v142 = v141 - 1;
        if (v142 < 0 == v15) {
          *((_DWORD *)this + 14) = v142;
        }
        long long v143 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v143 <= 1 || *v143 != 154 || v143[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v143 + 2;
LABEL_293:
        *(_DWORD *)(a1 + 292) |= 0x8000u;
        uint64_t v144 = *(void *)(a1 + 128);
        if (!v144) {
          operator new();
        }
        unsigned int v324 = 0;
        long long v145 = (char *)*((void *)this + 1);
        if ((unint64_t)v145 >= *((void *)this + 2) || *v145 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v145;
          *((void *)this + 1) = v145 + 1;
        }
        int v146 = *((_DWORD *)this + 14);
        int v147 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v146 + 1;
        if (v146 >= v147) {
          return 0;
        }
        int v148 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025799C(v144, this, v149) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v148);
        int v150 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v150, 1);
        int v151 = v150 - 1;
        if (v151 < 0 == v15) {
          *((_DWORD *)this + 14) = v151;
        }
        v152 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v152 <= 1 || *v152 != 162 || v152[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v152 + 2;
LABEL_308:
        *(_DWORD *)(a1 + 292) |= 0x10000u;
        uint64_t v153 = *(void *)(a1 + 136);
        if (!v153) {
          operator new();
        }
        unsigned int v324 = 0;
        v154 = (char *)*((void *)this + 1);
        if ((unint64_t)v154 >= *((void *)this + 2) || *v154 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v154;
          *((void *)this + 1) = v154 + 1;
        }
        int v155 = *((_DWORD *)this + 14);
        int v156 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v155 + 1;
        if (v155 >= v156) {
          return 0;
        }
        int v157 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100258298(v153, this, v158) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v157);
        int v159 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v159, 1);
        int v160 = v159 - 1;
        if (v160 < 0 == v15) {
          *((_DWORD *)this + 14) = v160;
        }
        long long v161 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v161 <= 1 || *v161 != 170 || v161[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v161 + 2;
LABEL_323:
        *(_DWORD *)(a1 + 292) |= 0x20000u;
        uint64_t v162 = *(void *)(a1 + 144);
        if (!v162) {
          operator new();
        }
        unsigned int v324 = 0;
        long long v163 = (char *)*((void *)this + 1);
        if ((unint64_t)v163 >= *((void *)this + 2) || *v163 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v163;
          *((void *)this + 1) = v163 + 1;
        }
        int v164 = *((_DWORD *)this + 14);
        int v165 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v164 + 1;
        if (v164 >= v165) {
          return 0;
        }
        int v166 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100258B20(v162, this, v167) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v166);
        int v168 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v168, 1);
        int v169 = v168 - 1;
        if (v169 < 0 == v15) {
          *((_DWORD *)this + 14) = v169;
        }
        long long v170 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v170 <= 1 || *v170 != 178 || v170[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v170 + 2;
LABEL_338:
        *(_DWORD *)(a1 + 292) |= 0x40000u;
        uint64_t v171 = *(void *)(a1 + 152);
        if (!v171) {
          operator new();
        }
        unsigned int v324 = 0;
        long long v172 = (char *)*((void *)this + 1);
        if ((unint64_t)v172 >= *((void *)this + 2) || *v172 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v172;
          *((void *)this + 1) = v172 + 1;
        }
        int v173 = *((_DWORD *)this + 14);
        int v174 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v173 + 1;
        if (v173 >= v174) {
          return 0;
        }
        int v175 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_1002593A8(v171, this, v176) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v175);
        int v177 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v177, 1);
        int v178 = v177 - 1;
        if (v178 < 0 == v15) {
          *((_DWORD *)this + 14) = v178;
        }
        int v179 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v179 <= 1 || *v179 != 186 || v179[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v179 + 2;
LABEL_353:
        *(_DWORD *)(a1 + 292) |= 0x80000u;
        uint64_t v180 = *(void *)(a1 + 160);
        if (!v180) {
          operator new();
        }
        unsigned int v324 = 0;
        uint64_t v181 = (char *)*((void *)this + 1);
        if ((unint64_t)v181 >= *((void *)this + 2) || *v181 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v181;
          *((void *)this + 1) = v181 + 1;
        }
        int v182 = *((_DWORD *)this + 14);
        int v183 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v182 + 1;
        if (v182 >= v183) {
          return 0;
        }
        int v184 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100259C60(v180, this, v185) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v184);
        int v186 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v186, 1);
        int v187 = v186 - 1;
        if (v187 < 0 == v15) {
          *((_DWORD *)this + 14) = v187;
        }
        long long v188 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v188 <= 1 || *v188 != 194 || v188[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v188 + 2;
LABEL_368:
        *(_DWORD *)(a1 + 292) |= 0x100000u;
        uint64_t v189 = *(void *)(a1 + 168);
        if (!v189) {
          operator new();
        }
        unsigned int v324 = 0;
        long long v190 = (char *)*((void *)this + 1);
        if ((unint64_t)v190 >= *((void *)this + 2) || *v190 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v190;
          *((void *)this + 1) = v190 + 1;
        }
        int v191 = *((_DWORD *)this + 14);
        int v192 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v191 + 1;
        if (v191 >= v192) {
          return 0;
        }
        int v193 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025A5B4(v189, this, v194) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v193);
        int v195 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v195, 1);
        int v196 = v195 - 1;
        if (v196 < 0 == v15) {
          *((_DWORD *)this + 14) = v196;
        }
        long long v197 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v197 <= 1 || *v197 != 202 || v197[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v197 + 2;
LABEL_383:
        *(_DWORD *)(a1 + 292) |= 0x200000u;
        uint64_t v198 = *(void *)(a1 + 176);
        if (!v198) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string::size_type v199 = (char *)*((void *)this + 1);
        if ((unint64_t)v199 >= *((void *)this + 2) || *v199 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v199;
          *((void *)this + 1) = v199 + 1;
        }
        int v200 = *((_DWORD *)this + 14);
        int v201 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v200 + 1;
        if (v200 >= v201) {
          return 0;
        }
        int v202 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025B094(v198, this, v203) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v202);
        int v204 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v204, 1);
        int v205 = v204 - 1;
        if (v205 < 0 == v15) {
          *((_DWORD *)this + 14) = v205;
        }
        std::string::size_type v206 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v206 <= 1 || *v206 != 210 || v206[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v206 + 2;
LABEL_398:
        *(_DWORD *)(a1 + 292) |= 0x400000u;
        uint64_t v207 = *(void *)(a1 + 184);
        if (!v207) {
          operator new();
        }
        unsigned int v324 = 0;
        long long v208 = (char *)*((void *)this + 1);
        if ((unint64_t)v208 >= *((void *)this + 2) || *v208 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v208;
          *((void *)this + 1) = v208 + 1;
        }
        int v209 = *((_DWORD *)this + 14);
        int v210 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v209 + 1;
        if (v209 >= v210) {
          return 0;
        }
        int v211 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025BBC8(v207, this, v212) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v211);
        int v213 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v213, 1);
        int v214 = v213 - 1;
        if (v214 < 0 == v15) {
          *((_DWORD *)this + 14) = v214;
        }
        v215 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v215 <= 1 || *v215 != 218 || v215[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v215 + 2;
LABEL_413:
        *(_DWORD *)(a1 + 292) |= 0x800000u;
        uint64_t v216 = *(void *)(a1 + 192);
        if (!v216) {
          operator new();
        }
        unsigned int v324 = 0;
        int v217 = (char *)*((void *)this + 1);
        if ((unint64_t)v217 >= *((void *)this + 2) || *v217 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v217;
          *((void *)this + 1) = v217 + 1;
        }
        int v218 = *((_DWORD *)this + 14);
        int v219 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v218 + 1;
        if (v218 >= v219) {
          return 0;
        }
        int v220 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025C4D4(v216, this, v221) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v220);
        int v222 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v222, 1);
        int v223 = v222 - 1;
        if (v223 < 0 == v15) {
          *((_DWORD *)this + 14) = v223;
        }
        std::string v224 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v224 <= 1 || *v224 != 226 || v224[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v224 + 2;
LABEL_428:
        *(_DWORD *)(a1 + 292) |= 0x1000000u;
        uint64_t v225 = *(void *)(a1 + 200);
        if (!v225) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v226 = (char *)*((void *)this + 1);
        if ((unint64_t)v226 >= *((void *)this + 2) || *v226 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v226;
          *((void *)this + 1) = v226 + 1;
        }
        int v227 = *((_DWORD *)this + 14);
        int v228 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v227 + 1;
        if (v227 >= v228) {
          return 0;
        }
        int v229 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025CCE0(v225, this, v230) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v229);
        int v231 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v231, 1);
        int v232 = v231 - 1;
        if (v232 < 0 == v15) {
          *((_DWORD *)this + 14) = v232;
        }
        std::string v233 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v233 <= 1 || *v233 != 234 || v233[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v233 + 2;
LABEL_443:
        *(_DWORD *)(a1 + 292) |= 0x2000000u;
        uint64_t v234 = *(void *)(a1 + 208);
        if (!v234) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v235 = (char *)*((void *)this + 1);
        if ((unint64_t)v235 >= *((void *)this + 2) || *v235 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v235;
          *((void *)this + 1) = v235 + 1;
        }
        int v236 = *((_DWORD *)this + 14);
        int v237 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v236 + 1;
        if (v236 >= v237) {
          return 0;
        }
        int v238 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025D768(v234, this, v239) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v238);
        int v240 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v240, 1);
        int v241 = v240 - 1;
        if (v241 < 0 == v15) {
          *((_DWORD *)this + 14) = v241;
        }
        v242 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v242 <= 1 || *v242 != 242 || v242[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v242 + 2;
LABEL_458:
        *(_DWORD *)(a1 + 292) |= 0x4000000u;
        uint64_t v243 = *(void *)(a1 + 216);
        if (!v243) {
          operator new();
        }
        unsigned int v324 = 0;
        v244 = (char *)*((void *)this + 1);
        if ((unint64_t)v244 >= *((void *)this + 2) || *v244 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v244;
          *((void *)this + 1) = v244 + 1;
        }
        int v245 = *((_DWORD *)this + 14);
        int v246 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v245 + 1;
        if (v245 >= v246) {
          return 0;
        }
        int v247 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025E0E4(v243, this, v248) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v247);
        int v249 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v249, 1);
        int v250 = v249 - 1;
        if (v250 < 0 == v15) {
          *((_DWORD *)this + 14) = v250;
        }
        std::string v251 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v251 <= 1 || *v251 != 250 || v251[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v251 + 2;
LABEL_473:
        *(_DWORD *)(a1 + 292) |= 0x8000000u;
        uint64_t v252 = *(void *)(a1 + 224);
        if (!v252) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v253 = (char *)*((void *)this + 1);
        if ((unint64_t)v253 >= *((void *)this + 2) || *v253 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v253;
          *((void *)this + 1) = v253 + 1;
        }
        int v254 = *((_DWORD *)this + 14);
        int v255 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v254 + 1;
        if (v254 >= v255) {
          return 0;
        }
        int v256 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100268114(v252, this, v257) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v256);
        int v258 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v258, 1);
        int v259 = v258 - 1;
        if (v259 < 0 == v15) {
          *((_DWORD *)this + 14) = v259;
        }
        unsigned __int8 v260 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v260 <= 1 || *v260 != 130 || v260[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v260 + 2;
LABEL_488:
        *(_DWORD *)(a1 + 292) |= 0x10000000u;
        std::string v261 = *(_DWORD **)(a1 + 232);
        if (!v261) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v262 = (char *)*((void *)this + 1);
        if ((unint64_t)v262 >= *((void *)this + 2) || *v262 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v262;
          *((void *)this + 1) = v262 + 1;
        }
        int v263 = *((_DWORD *)this + 14);
        int v264 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v263 + 1;
        if (v263 >= v264) {
          return 0;
        }
        int v265 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_100268EA8(v261, this, v266) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v265);
        int v267 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v267, 1);
        int v268 = v267 - 1;
        if (v268 < 0 == v15) {
          *((_DWORD *)this + 14) = v268;
        }
        std::string v269 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v269 <= 1 || *v269 != 138 || v269[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v269 + 2;
LABEL_503:
        *(_DWORD *)(a1 + 292) |= 0x20000000u;
        uint64_t v270 = *(void *)(a1 + 240);
        if (!v270) {
          operator new();
        }
        unsigned int v324 = 0;
        unsigned __int8 v271 = (char *)*((void *)this + 1);
        if ((unint64_t)v271 >= *((void *)this + 2) || *v271 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v271;
          *((void *)this + 1) = v271 + 1;
        }
        int v272 = *((_DWORD *)this + 14);
        int v273 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v272 + 1;
        if (v272 >= v273) {
          return 0;
        }
        int v274 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_1002693A4(v270, this, v275) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v274);
        int v276 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v276, 1);
        int v277 = v276 - 1;
        if (v277 < 0 == v15) {
          *((_DWORD *)this + 14) = v277;
        }
        std::string v278 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v278 <= 1 || *v278 != 146 || v278[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v278 + 2;
LABEL_518:
        *(_DWORD *)(a1 + 292) |= 0x40000000u;
        uint64_t v279 = *(void *)(a1 + 248);
        if (!v279) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v280 = (char *)*((void *)this + 1);
        if ((unint64_t)v280 >= *((void *)this + 2) || *v280 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v280;
          *((void *)this + 1) = v280 + 1;
        }
        int v281 = *((_DWORD *)this + 14);
        int v282 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v281 + 1;
        if (v281 >= v282) {
          return 0;
        }
        int v283 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10026985C(v279, this, v284) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v283);
        int v285 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v285, 1);
        int v286 = v285 - 1;
        if (v286 < 0 == v15) {
          *((_DWORD *)this + 14) = v286;
        }
        char v287 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v287 <= 1 || *v287 != 154 || v287[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v287 + 2;
LABEL_533:
        *(_DWORD *)(a1 + 292) |= 0x80000000;
        uint64_t v288 = *(void *)(a1 + 256);
        if (!v288) {
          operator new();
        }
        unsigned int v324 = 0;
        char v289 = (char *)*((void *)this + 1);
        if ((unint64_t)v289 >= *((void *)this + 2) || *v289 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v289;
          *((void *)this + 1) = v289 + 1;
        }
        int v290 = *((_DWORD *)this + 14);
        int v291 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v290 + 1;
        if (v290 >= v291) {
          return 0;
        }
        int v292 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10026A0A0(v288, this, v293) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v292);
        int v294 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v294, 1);
        int v295 = v294 - 1;
        if (v295 < 0 == v15) {
          *((_DWORD *)this + 14) = v295;
        }
        std::string v296 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v296 <= 1 || *v296 != 162 || v296[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v296 + 2;
LABEL_548:
        *(_DWORD *)(a1 + 296) |= 1u;
        uint64_t v297 = *(void *)(a1 + 264);
        if (!v297) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v298 = (char *)*((void *)this + 1);
        if ((unint64_t)v298 >= *((void *)this + 2) || *v298 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v298;
          *((void *)this + 1) = v298 + 1;
        }
        int v299 = *((_DWORD *)this + 14);
        int v300 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v299 + 1;
        if (v299 >= v300) {
          return 0;
        }
        int v301 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10026A4F0(v297, this, v302) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v301);
        int v303 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v303, 1);
        int v304 = v303 - 1;
        if (v304 < 0 == v15) {
          *((_DWORD *)this + 14) = v304;
        }
        std::string v305 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v305 <= 1 || *v305 != 170 || v305[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v305 + 2;
LABEL_563:
        *(_DWORD *)(a1 + 296) |= 2u;
        uint64_t v306 = *(void *)(a1 + 272);
        if (!v306) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v307 = (char *)*((void *)this + 1);
        if ((unint64_t)v307 >= *((void *)this + 2) || *v307 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v307;
          *((void *)this + 1) = v307 + 1;
        }
        int v308 = *((_DWORD *)this + 14);
        int v309 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v308 + 1;
        if (v308 >= v309) {
          return 0;
        }
        int v310 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10026A83C(v306, this, v311) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v310);
        int v312 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v312, 1);
        int v313 = v312 - 1;
        if (v313 < 0 == v15) {
          *((_DWORD *)this + 14) = v313;
        }
        std::string v314 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v314 <= 1 || *v314 != 178 || v314[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v314 + 2;
LABEL_578:
        *(_DWORD *)(a1 + 296) |= 4u;
        uint64_t v315 = *(void *)(a1 + 280);
        if (!v315) {
          operator new();
        }
        unsigned int v324 = 0;
        std::string v316 = (char *)*((void *)this + 1);
        if ((unint64_t)v316 >= *((void *)this + 2) || *v316 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v324))return 0; {
        }
          }
        else
        {
          unsigned int v324 = *v316;
          *((void *)this + 1) = v316 + 1;
        }
        int v317 = *((_DWORD *)this + 14);
        int v318 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v317 + 1;
        if (v317 >= v318) {
          return 0;
        }
        int v319 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        if (!sub_10025EB78(v315, this, v320) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v319);
        int v321 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v321, 1);
        int v322 = v321 - 1;
        if (v322 < 0 == v15) {
          *((_DWORD *)this + 14) = v322;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_107;
        }
        goto LABEL_81;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_121;
        }
        goto LABEL_81;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_135;
        }
        goto LABEL_81;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_149;
        }
        goto LABEL_81;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_163;
        }
        goto LABEL_81;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_177;
        }
        goto LABEL_81;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_191;
        }
        goto LABEL_81;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_205;
        }
        goto LABEL_81;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_219;
        }
        goto LABEL_81;
      case 0xFu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_233;
        }
        goto LABEL_81;
      case 0x10u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_248;
        }
        goto LABEL_81;
      case 0x11u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_263;
        }
        goto LABEL_81;
      case 0x12u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_278;
        }
        goto LABEL_81;
      case 0x13u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_293;
        }
        goto LABEL_81;
      case 0x14u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_308;
        }
        goto LABEL_81;
      case 0x15u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_323;
        }
        goto LABEL_81;
      case 0x16u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_338;
        }
        goto LABEL_81;
      case 0x17u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_353;
        }
        goto LABEL_81;
      case 0x18u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_368;
        }
        goto LABEL_81;
      case 0x19u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_383;
        }
        goto LABEL_81;
      case 0x1Au:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_398;
        }
        goto LABEL_81;
      case 0x1Bu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_413;
        }
        goto LABEL_81;
      case 0x1Cu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_428;
        }
        goto LABEL_81;
      case 0x1Du:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_443;
        }
        goto LABEL_81;
      case 0x1Eu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_458;
        }
        goto LABEL_81;
      case 0x1Fu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_473;
        }
        goto LABEL_81;
      case 0x20u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_488;
        }
        goto LABEL_81;
      case 0x21u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_503;
        }
        goto LABEL_81;
      case 0x22u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_518;
        }
        goto LABEL_81;
      case 0x23u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_533;
        }
        goto LABEL_81;
      case 0x24u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_548;
        }
        goto LABEL_81;
      case 0x25u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_563;
        }
        goto LABEL_81;
      case 0x26u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_81;
        }
        goto LABEL_578;
      default:
        int v7 = TagFallback & 7;
LABEL_81:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_100263DA8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 292);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_102489AB8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 292);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_102489AB8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_40:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_102489AB8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_43:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_102489AB8 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }
LABEL_46:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_102489AB8 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_102489AB8 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }
LABEL_52:
  uint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_102489AB8 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_55:
  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_102489AB8 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v14, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_58:
  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_102489AB8 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v15, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_61:
  uint64_t v16 = *(void *)(v5 + 80);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_102489AB8 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v16, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_67;
  }
LABEL_64:
  uint64_t v17 = *(void *)(v5 + 88);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_102489AB8 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v17, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_70;
  }
LABEL_67:
  uint64_t v18 = *(void *)(v5 + 96);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_102489AB8 + 96);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v18, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }
LABEL_70:
  uint64_t v19 = *(void *)(v5 + 104);
  if (!v19) {
    uint64_t v19 = *(void *)(qword_102489AB8 + 104);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v19, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_73:
  uint64_t v20 = *(void *)(v5 + 112);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_102489AB8 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11, v20, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_79;
  }
LABEL_76:
  uint64_t v21 = *(void *)(v5 + 120);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_102489AB8 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, v21, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }
LABEL_79:
  uint64_t v22 = *(void *)(v5 + 128);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_102489AB8 + 128);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v22, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_82:
  uint64_t v23 = *(void *)(v5 + 136);
  if (!v23) {
    uint64_t v23 = *(void *)(qword_102489AB8 + 136);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, v23, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_88;
  }
LABEL_85:
  uint64_t v24 = *(void *)(v5 + 144);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_102489AB8 + 144);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v24, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_91;
  }
LABEL_88:
  uint64_t v25 = *(void *)(v5 + 152);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_102489AB8 + 152);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v25, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_94;
  }
LABEL_91:
  uint64_t v26 = *(void *)(v5 + 160);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_102489AB8 + 160);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v26, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }
LABEL_94:
  uint64_t v27 = *(void *)(v5 + 168);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_102489AB8 + 168);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v27, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_100;
  }
LABEL_97:
  uint64_t v28 = *(void *)(v5 + 176);
  if (!v28) {
    uint64_t v28 = *(void *)(qword_102489AB8 + 176);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v28, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_103;
  }
LABEL_100:
  uint64_t v29 = *(void *)(v5 + 184);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_102489AB8 + 184);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, v29, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_106;
  }
LABEL_103:
  uint64_t v30 = *(void *)(v5 + 192);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_102489AB8 + 192);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, v30, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }
LABEL_106:
  uint64_t v31 = *(void *)(v5 + 200);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_102489AB8 + 200);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, v31, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }
LABEL_109:
  uint64_t v32 = *(void *)(v5 + 208);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_102489AB8 + 208);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, v32, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_115;
  }
LABEL_112:
  uint64_t v33 = *(void *)(v5 + 216);
  if (!v33) {
    uint64_t v33 = *(void *)(qword_102489AB8 + 216);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v33, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_118;
  }
LABEL_115:
  uint64_t v34 = *(void *)(v5 + 224);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_102489AB8 + 224);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, v34, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_121;
  }
LABEL_118:
  uint64_t v35 = *(void *)(v5 + 232);
  if (!v35) {
    uint64_t v35 = *(void *)(qword_102489AB8 + 232);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, v35, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_124;
  }
LABEL_121:
  uint64_t v36 = *(void *)(v5 + 240);
  if (!v36) {
    uint64_t v36 = *(void *)(qword_102489AB8 + 240);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, v36, a2, a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_127;
  }
LABEL_124:
  uint64_t v37 = *(void *)(v5 + 248);
  if (!v37) {
    uint64_t v37 = *(void *)(qword_102489AB8 + 248);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, v37, a2, a4);
  if ((*(_DWORD *)(v5 + 292) & 0x80000000) != 0)
  {
LABEL_127:
    uint64_t v38 = *(void *)(v5 + 256);
    if (!v38) {
      uint64_t v38 = *(void *)(qword_102489AB8 + 256);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, v38, a2, a4);
  }
LABEL_130:
  int v39 = *(_DWORD *)(v5 + 296);
  if (v39)
  {
    uint64_t v40 = *(void *)(v5 + 264);
    if (!v40) {
      uint64_t v40 = *(void *)(qword_102489AB8 + 264);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24, v40, a2, a4);
    int v39 = *(_DWORD *)(v5 + 296);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0) {
        return result;
      }
      goto LABEL_140;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }
  uint64_t v41 = *(void *)(v5 + 272);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_102489AB8 + 272);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25, v41, a2, a4);
  if ((*(_DWORD *)(v5 + 296) & 4) != 0)
  {
LABEL_140:
    uint64_t v42 = *(void *)(v5 + 280);
    if (!v42) {
      uint64_t v42 = *(void *)(qword_102489AB8 + 280);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26, v42, a2, a4);
  }
  return result;
}

uint64_t sub_1002643E4(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_61;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_102489AB8 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10024E088(v5, a2);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  }
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_102489AB8 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10024F7EC(v9, a2);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_102489AB8 + 24);
    }
    uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10024FF84(v13, a2);
    int v15 = (int)v14;
    if (v14 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    }
    else {
      int v16 = 1;
    }
    uint64_t v4 = (v4 + v15 + v16 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_102489AB8 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002504A0(v17, a2);
  int v19 = (int)v18;
  if (v18 >= 0x80) {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  }
  else {
    int v20 = 1;
  }
  uint64_t v4 = (v4 + v19 + v20 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_37:
  uint64_t v21 = *(void *)(a1 + 40);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_102489AB8 + 40);
  }
  uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100251470(v21, a2);
  int v23 = (int)v22;
  if (v22 >= 0x80) {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  }
  else {
    int v24 = 1;
  }
  uint64_t v4 = (v4 + v23 + v24 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_43:
  uint64_t v25 = *(void *)(a1 + 48);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_102489AB8 + 48);
  }
  uint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100252CC0(v25, a2);
  int v27 = (int)v26;
  if (v26 >= 0x80) {
    int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
  }
  else {
    int v28 = 1;
  }
  uint64_t v4 = (v4 + v27 + v28 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
LABEL_49:
  uint64_t v29 = *(void *)(a1 + 56);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_102489AB8 + 56);
  }
  uint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002543DC(v29, a2);
  int v31 = (int)v30;
  if (v30 >= 0x80) {
    int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
  }
  else {
    int v32 = 1;
  }
  uint64_t v4 = (v4 + v31 + v32 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v33 = *(void *)(a1 + 64);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_102489AB8 + 64);
    }
    uint64_t v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100255CB0(v33, a2);
    int v35 = (int)v34;
    if (v34 >= 0x80) {
      int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
    }
    else {
      int v36 = 1;
    }
    uint64_t v4 = (v4 + v35 + v36 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
  }
LABEL_61:
  if ((v3 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v37 = *(void *)(a1 + 72);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_102489AB8 + 72);
    }
    uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10024EBC0(v37, a2);
    int v39 = (int)v38;
    if (v38 >= 0x80) {
      int v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2);
    }
    else {
      int v40 = 1;
    }
    uint64_t v4 = (v4 + v39 + v40 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  uint64_t v41 = *(void *)(a1 + 80);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_102489AB8 + 80);
  }
  uint64_t v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100250E9C(v41, a2);
  int v43 = (int)v42;
  if (v42 >= 0x80) {
    int v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42, a2);
  }
  else {
    int v44 = 1;
  }
  uint64_t v4 = (v4 + v43 + v44 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }
LABEL_83:
  uint64_t v45 = *(void *)(a1 + 88);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_102489AB8 + 88);
  }
  uint64_t v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002562F0(v45, a2);
  int v47 = (int)v46;
  if (v46 >= 0x80) {
    int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2);
  }
  else {
    int v48 = 1;
  }
  uint64_t v4 = (v4 + v47 + v48 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }
LABEL_89:
  uint64_t v49 = *(void *)(a1 + 96);
  if (!v49) {
    uint64_t v49 = *(void *)(qword_102489AB8 + 96);
  }
  unsigned int v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100256790(v49, a2);
  int v51 = (int)v50;
  if (v50 >= 0x80) {
    int v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50, a2);
  }
  else {
    int v52 = 1;
  }
  uint64_t v4 = (v4 + v51 + v52 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }
LABEL_95:
  uint64_t v53 = *(void *)(a1 + 104);
  if (!v53) {
    uint64_t v53 = *(void *)(qword_102489AB8 + 104);
  }
  uint64_t v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100256C30(v53, a2);
  int v55 = (int)v54;
  if (v54 >= 0x80) {
    int v56 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54, a2);
  }
  else {
    int v56 = 1;
  }
  uint64_t v4 = (v4 + v55 + v56 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }
LABEL_101:
  uint64_t v57 = *(void *)(a1 + 112);
  if (!v57) {
    uint64_t v57 = *(void *)(qword_102489AB8 + 112);
  }
  int v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002570D0(v57, a2);
  int v59 = (int)v58;
  if (v58 >= 0x80) {
    int v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58, a2);
  }
  else {
    int v60 = 1;
  }
  uint64_t v4 = (v4 + v59 + v60 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }
LABEL_107:
  uint64_t v61 = *(void *)(a1 + 120);
  if (!v61) {
    uint64_t v61 = *(void *)(qword_102489AB8 + 120);
  }
  uint64_t v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100257570(v61, a2);
  int v63 = (int)v62;
  if (v62 >= 0x80) {
    int v64 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62, a2);
  }
  else {
    int v64 = 1;
  }
  uint64_t v4 = (v4 + v63 + v64 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    uint64_t v65 = *(void *)(a1 + 128);
    if (!v65) {
      uint64_t v65 = *(void *)(qword_102489AB8 + 128);
    }
    int v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100257CB0(v65, a2);
    int v67 = (int)v66;
    if (v66 >= 0x80) {
      int v68 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66, a2);
    }
    else {
      int v68 = 1;
    }
    uint64_t v4 = (v4 + v67 + v68 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
  }
LABEL_119:
  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_177;
  }
  if ((v3 & 0x10000) != 0)
  {
    uint64_t v69 = *(void *)(a1 + 136);
    if (!v69) {
      uint64_t v69 = *(void *)(qword_102489AB8 + 136);
    }
    int v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002585B4(v69, a2);
    int v71 = (int)v70;
    if (v70 >= 0x80) {
      int v72 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70, a2);
    }
    else {
      int v72 = 1;
    }
    uint64_t v4 = (v4 + v71 + v72 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_141;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  uint64_t v73 = *(void *)(a1 + 144);
  if (!v73) {
    uint64_t v73 = *(void *)(qword_102489AB8 + 144);
  }
  int v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100258E3C(v73, a2);
  int v75 = (int)v74;
  if (v74 >= 0x80) {
    int v76 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74, a2);
  }
  else {
    int v76 = 1;
  }
  uint64_t v4 = (v4 + v75 + v76 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_147;
  }
LABEL_141:
  uint64_t v77 = *(void *)(a1 + 152);
  if (!v77) {
    uint64_t v77 = *(void *)(qword_102489AB8 + 152);
  }
  int v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002596C4(v77, a2);
  int v79 = (int)v78;
  if (v78 >= 0x80) {
    int v80 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78, a2);
  }
  else {
    int v80 = 1;
  }
  uint64_t v4 = (v4 + v79 + v80 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_153;
  }
LABEL_147:
  uint64_t v81 = *(void *)(a1 + 160);
  if (!v81) {
    uint64_t v81 = *(void *)(qword_102489AB8 + 160);
  }
  int v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025A03C(v81, a2);
  int v83 = (int)v82;
  if (v82 >= 0x80) {
    int v84 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82, a2);
  }
  else {
    int v84 = 1;
  }
  uint64_t v4 = (v4 + v83 + v84 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_159;
  }
LABEL_153:
  uint64_t v85 = *(void *)(a1 + 168);
  if (!v85) {
    uint64_t v85 = *(void *)(qword_102489AB8 + 168);
  }
  unsigned int v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025A8D0(v85, a2);
  int v87 = (int)v86;
  if (v86 >= 0x80) {
    int v88 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v86, a2);
  }
  else {
    int v88 = 1;
  }
  uint64_t v4 = (v4 + v87 + v88 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x200000) == 0)
  {
LABEL_126:
    if ((v3 & 0x400000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_165;
  }
LABEL_159:
  uint64_t v89 = *(void *)(a1 + 176);
  if (!v89) {
    uint64_t v89 = *(void *)(qword_102489AB8 + 176);
  }
  uint64_t v90 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025B508(v89, a2);
  int v91 = (int)v90;
  if (v90 >= 0x80) {
    int v92 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v90, a2);
  }
  else {
    int v92 = 1;
  }
  uint64_t v4 = (v4 + v91 + v92 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x400000) == 0)
  {
LABEL_127:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_171;
  }
LABEL_165:
  uint64_t v93 = *(void *)(a1 + 184);
  if (!v93) {
    uint64_t v93 = *(void *)(qword_102489AB8 + 184);
  }
  int v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025BFA0(v93, a2);
  int v95 = (int)v94;
  if (v94 >= 0x80) {
    int v96 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94, a2);
  }
  else {
    int v96 = 1;
  }
  uint64_t v4 = (v4 + v95 + v96 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x800000) != 0)
  {
LABEL_171:
    uint64_t v97 = *(void *)(a1 + 192);
    if (!v97) {
      uint64_t v97 = *(void *)(qword_102489AB8 + 192);
    }
    int v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025C74C(v97, a2);
    int v99 = (int)v98;
    if (v98 >= 0x80) {
      int v100 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v98, a2);
    }
    else {
      int v100 = 1;
    }
    uint64_t v4 = (v4 + v99 + v100 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
  }
LABEL_177:
  if (!HIBYTE(v3)) {
    goto LABEL_235;
  }
  if ((v3 & 0x1000000) != 0)
  {
    uint64_t v101 = *(void *)(a1 + 200);
    if (!v101) {
      uint64_t v101 = *(void *)(qword_102489AB8 + 200);
    }
    int v102 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025D1F4(v101, a2);
    int v103 = (int)v102;
    if (v102 >= 0x80) {
      int v104 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v102, a2);
    }
    else {
      int v104 = 1;
    }
    uint64_t v4 = (v4 + v103 + v104 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v3 & 0x4000000) == 0) {
        goto LABEL_181;
      }
      goto LABEL_199;
    }
  }
  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }
  uint64_t v105 = *(void *)(a1 + 208);
  if (!v105) {
    uint64_t v105 = *(void *)(qword_102489AB8 + 208);
  }
  int v106 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025D9E0(v105, a2);
  int v107 = (int)v106;
  if (v106 >= 0x80) {
    int v108 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v106, a2);
  }
  else {
    int v108 = 1;
  }
  uint64_t v4 = (v4 + v107 + v108 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v3 & 0x8000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_205;
  }
LABEL_199:
  uint64_t v109 = *(void *)(a1 + 216);
  if (!v109) {
    uint64_t v109 = *(void *)(qword_102489AB8 + 216);
  }
  int v110 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025E600(v109, a2);
  int v111 = (int)v110;
  if (v110 >= 0x80) {
    int v112 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v110, a2);
  }
  else {
    int v112 = 1;
  }
  uint64_t v4 = (v4 + v111 + v112 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v3 & 0x10000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_211;
  }
LABEL_205:
  uint64_t v113 = *(void *)(a1 + 224);
  if (!v113) {
    uint64_t v113 = *(void *)(qword_102489AB8 + 224);
  }
  int v114 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002689BC(v113, a2);
  int v115 = (int)v114;
  if (v114 >= 0x80) {
    int v116 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v114, a2);
  }
  else {
    int v116 = 1;
  }
  uint64_t v4 = (v4 + v115 + v116 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_184;
    }
    goto LABEL_217;
  }
LABEL_211:
  uint64_t v117 = *(void *)(a1 + 232);
  if (!v117) {
    uint64_t v117 = *(void *)(qword_102489AB8 + 232);
  }
  int v118 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100269120(v117, a2);
  int v119 = (int)v118;
  if (v118 >= 0x80) {
    int v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v118, a2);
  }
  else {
    int v120 = 1;
  }
  uint64_t v4 = (v4 + v119 + v120 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v3 & 0x40000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_223;
  }
LABEL_217:
  uint64_t v121 = *(void *)(a1 + 240);
  if (!v121) {
    uint64_t v121 = *(void *)(qword_102489AB8 + 240);
  }
  unsigned int v122 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100269610(v121, a2);
  int v123 = (int)v122;
  if (v122 >= 0x80) {
    int v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v122, a2);
  }
  else {
    int v124 = 1;
  }
  uint64_t v4 = (v4 + v123 + v124 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_235;
    }
    goto LABEL_229;
  }
LABEL_223:
  uint64_t v125 = *(void *)(a1 + 248);
  if (!v125) {
    uint64_t v125 = *(void *)(qword_102489AB8 + 248);
  }
  uint64_t v126 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100269E14(v125, a2);
  int v127 = (int)v126;
  if (v126 >= 0x80) {
    int v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v126, a2);
  }
  else {
    int v128 = 1;
  }
  uint64_t v4 = (v4 + v127 + v128 + 2);
  if ((*(_DWORD *)(a1 + 292) & 0x80000000) != 0)
  {
LABEL_229:
    uint64_t v129 = *(void *)(a1 + 256);
    if (!v129) {
      uint64_t v129 = *(void *)(qword_102489AB8 + 256);
    }
    int v130 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10026A30C(v129, a2);
    int v131 = (int)v130;
    if (v130 >= 0x80) {
      int v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v130, a2);
    }
    else {
      int v132 = 1;
    }
    uint64_t v4 = (v4 + v131 + v132 + 2);
  }
LABEL_235:
  LOBYTE(v133) = *(unsigned char *)(a1 + 296);
  if (!(_BYTE)v133) {
    goto LABEL_258;
  }
  if (*(unsigned char *)(a1 + 296))
  {
    uint64_t v134 = *(void *)(a1 + 264);
    if (!v134) {
      uint64_t v134 = *(void *)(qword_102489AB8 + 264);
    }
    uint64_t v135 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10026A674(v134, a2);
    int v136 = (int)v135;
    if (v135 >= 0x80) {
      int v137 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v135, a2);
    }
    else {
      int v137 = 1;
    }
    uint64_t v4 = (v4 + v136 + v137 + 2);
    int v133 = *(_DWORD *)(a1 + 296);
    if ((v133 & 2) == 0)
    {
LABEL_238:
      if ((v133 & 4) == 0) {
        goto LABEL_258;
      }
      goto LABEL_252;
    }
  }
  else if ((*(unsigned char *)(a1 + 296) & 2) == 0)
  {
    goto LABEL_238;
  }
  uint64_t v138 = *(void *)(a1 + 272);
  if (!v138) {
    uint64_t v138 = *(void *)(qword_102489AB8 + 272);
  }
  int v139 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10026A9C0(v138, a2);
  int v140 = (int)v139;
  if (v139 >= 0x80) {
    int v141 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v139, a2);
  }
  else {
    int v141 = 1;
  }
  uint64_t v4 = (v4 + v140 + v141 + 2);
  if ((*(_DWORD *)(a1 + 296) & 4) != 0)
  {
LABEL_252:
    uint64_t v142 = *(void *)(a1 + 280);
    if (!v142) {
      uint64_t v142 = *(void *)(qword_102489AB8 + 280);
    }
    long long v143 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10025EDF0(v142, a2);
    int v145 = (int)v143;
    if (v143 >= 0x80) {
      int v146 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v143, v144);
    }
    else {
      int v146 = 1;
    }
    uint64_t v4 = (v4 + v145 + v146 + 2);
  }
LABEL_258:
  *(_DWORD *)(a1 + 288) = v4;
  return v4;
}