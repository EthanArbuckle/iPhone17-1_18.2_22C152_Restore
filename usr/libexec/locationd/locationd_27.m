void sub_101254E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = (void **)&a17;
  sub_101258EFC(&a61);
  _Unwind_Resume(a1);
}

void sub_101254EAC(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -1;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = [a3 description];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to get predicted LOI from RoutineManager - %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      id v5 = [a3 description];
      int v113 = 138543362;
      id v114 = v5;
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v6);
LABEL_10:
      if (v6 != buf) {
        free(v6);
      }
      goto LABEL_95;
    }
    goto LABEL_95;
  }
  if (a2)
  {
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    id v8 = [a2 countByEnumeratingWithState:&v87 objects:v98 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v88;
      do
      {
        v10 = 0;
        do
        {
          if (*(void *)v88 != v9) {
            objc_enumerationMutation(a2);
          }
          v11 = *(void **)(*((void *)&v87 + 1) + 8 * (void)v10);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          v12 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
          {
            [objc_msgSend(objc_msgSend(objc_msgSend(v11, "locationOfInterest"), "location"), "latitude");
            uint64_t v14 = v13;
            [objc_msgSend(objc_msgSend(objc_msgSend(v11, "locationOfInterest"), "location"), "longitude");
            uint64_t v16 = v15;
            [v11 confidence];
            *(_DWORD *)buf = 134284033;
            *(void *)&buf[4] = v14;
            __int16 v105 = 2049;
            uint64_t v106 = v16;
            __int16 v107 = 2050;
            uint64_t v108 = v17;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "@IndoorPreFetch, predicted, %{private}.7f, %{private}.7f, conf, %{public}.1f", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10231A1C8);
            }
            [objc_msgSend(objc_msgSend(objc_msgSend(v11, "locationOfInterest"), "location"), "latitude");
            v19 = v18;
            [objc_msgSend(objc_msgSend(objc_msgSend(v11, "locationOfInterest"), "location"), "longitude");
            uint64_t v21 = v20;
            [v11 confidence];
            int v113 = 134284033;
            id v114 = v19;
            __int16 v115 = 2049;
            uint64_t v116 = v21;
            __int16 v117 = 2050;
            uint64_t v118 = v22;
            v23 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v23);
            if (v23 != buf) {
              free(v23);
            }
          }
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v24 = [a2 countByEnumeratingWithState:&v87 objects:v98 count:16];
        id v8 = v24;
      }
      while (v24);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 count];
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 64);
    unint64_t v86 = 0;
    long long v85 = 0uLL;
    sub_101256350((uint64_t *)&v85, (unint64_t)[a2 count]);
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    id v28 = [a2 countByEnumeratingWithState:&v94 objects:&v113 count:16];
    if (!v28)
    {
LABEL_89:
      uint64_t v82 = *(void *)(*(void *)(a1 + 48) + 8);
      sub_101258F40((char **)(v82 + 48));
      *(_OWORD *)(v82 + 48) = v85;
      *(void *)(v82 + 64) = v86;
      unint64_t v86 = 0;
      long long v85 = 0uLL;
      *(void *)buf = &v85;
      sub_101258EFC((void ***)buf);
      goto LABEL_95;
    }
    uint64_t v29 = *(void *)v95;
    double v30 = ((double)v25 * (double)v27 + (double)v27 * 0.5) * 1000000.0;
LABEL_32:
    uint64_t v31 = 0;
    while (1)
    {
      if (*(void *)v95 != v29) {
        objc_enumerationMutation(a2);
      }
      v32 = *(void **)(*((void *)&v94 + 1) + 8 * v31);
      v111[0] = 0;
      if ([v32 nextEntryTime])
      {
        [objc_msgSend(v32, "nextEntryTime") timeIntervalSinceReferenceDate];
        if (!v111[0]) {
          v111[0] = 1;
        }
        uint64_t v112 = (uint64_t)(v33 * 1000000.0 + 9.783072e14);
      }
      [sub_101258468([objc_msgSend(objc_msgSend(v32, "locationOfInterest"), "visits")], (uint64_t)v109);
      unsigned int v93 = 0;
      unsigned int v93 = [[[v32 locationOfInterest] visits] count];
      id v34 = [v32 locationOfInterest];
      if (v111[0] && v112 >= v26 && v30 >= (double)(v112 - v26))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        v35 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          [objc_msgSend(v34, "location") latitude];
          uint64_t v37 = v36;
          [objc_msgSend(v34, "location") longitude];
          if (!v111[0]) {
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          }
          *(_DWORD *)buf = 134284033;
          *(void *)&buf[4] = v37;
          __int16 v105 = 2049;
          uint64_t v106 = v38;
          __int16 v107 = 2050;
          uint64_t v108 = v112;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "VisitTime, predloi, %{private}.7f, %{private}.7f, entry, %{public}lld", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          [objc_msgSend(v34, "location") latitude];
          uint64_t v78 = v77;
          [objc_msgSend(v34, "location") longitude];
          if (!v111[0]) {
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          }
          *(_DWORD *)v99 = 134284033;
          *(void *)&v99[4] = v78;
          __int16 v100 = 2049;
          uint64_t v101 = v79;
          __int16 v102 = 2050;
          uint64_t v103 = v112;
          v80 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertPredictedLOI(uint32_t, std::chrono::system_clock::time_point, cl::chrono::secondsf, NSArray *)", "%s\n", v80);
          if (v80 != buf) {
            free(v80);
          }
        }
        [objc_msgSend(v34, "location") latitude];
        *(void *)buf = v39;
        [objc_msgSend(v34, "location") longitude];
        *(void *)v99 = v40;
        [objc_msgSend(v34, "location") horizontalUncertainty];
        uint64_t v92 = v41;
        [v32 confidence];
        uint64_t v91 = v42;
        uint64_t v43 = *((void *)&v85 + 1);
        if (*((void *)&v85 + 1) >= v86)
        {
          uint64_t v51 = sub_101258AE4((uint64_t *)&v85, buf, (uint64_t *)v99, &v92, &v91, v109, v111, (int *)&v93);
        }
        else
        {
          uint64_t v44 = *(void *)v99;
          uint64_t v45 = v92;
          int v46 = v109[0];
          uint64_t v47 = v110;
          int v48 = v111[0];
          uint64_t v49 = v112;
          unsigned int v50 = v93;
          **((void **)&v85 + 1) = *(void *)buf;
          *(void *)(v43 + 8) = v44;
          *(void *)(v43 + 16) = v45;
          *(void *)(v43 + 24) = v42;
          *(unsigned char *)(v43 + 32) = 0;
          if (v46)
          {
            *(void *)(v43 + 40) = v47;
            *(unsigned char *)(v43 + 32) = 1;
          }
          *(unsigned char *)(v43 + 48) = 0;
          if (v48)
          {
            *(void *)(v43 + 56) = v49;
            *(unsigned char *)(v43 + 48) = 1;
          }
          *(_DWORD *)(v43 + 64) = v50;
          *(unsigned char *)(v43 + 68) = 1;
          uint64_t v51 = v43 + 72;
        }
      }
      else
      {
        if (!v109[0])
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          v65 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            [objc_msgSend(v34, "location") latitude];
            uint64_t v67 = v66;
            [objc_msgSend(v34, "location") longitude];
            *(_DWORD *)buf = 134283777;
            *(void *)&buf[4] = v67;
            __int16 v105 = 2049;
            uint64_t v106 = v68;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, skiploi, %{private}.7f, %{private}.7f, predicted, time", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10231A1C8);
            }
            [objc_msgSend(v34, "location") latitude];
            uint64_t v70 = v69;
            [objc_msgSend(v34, "location") longitude];
            *(_DWORD *)v99 = 134283777;
            *(void *)&v99[4] = v70;
            __int16 v100 = 2049;
            uint64_t v101 = v71;
            v72 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertPredictedLOI(uint32_t, std::chrono::system_clock::time_point, cl::chrono::secondsf, NSArray *)", "%s\n", v72);
            if (v72 != buf) {
              free(v72);
            }
          }
          goto LABEL_76;
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        v52 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          [objc_msgSend(v34, "location") latitude];
          uint64_t v54 = v53;
          [objc_msgSend(v34, "location") longitude];
          if (!v109[0]) {
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          }
          *(_DWORD *)buf = 134284033;
          *(void *)&buf[4] = v54;
          __int16 v105 = 2049;
          uint64_t v106 = v55;
          __int16 v107 = 2050;
          uint64_t v108 = v110;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "VisitTime, p2hloi, %{private}.7f, %{private}.7f, recent, %{public}ld", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          [objc_msgSend(v34, "location") latitude];
          uint64_t v74 = v73;
          [objc_msgSend(v34, "location") longitude];
          if (!v109[0]) {
            __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
          }
          *(_DWORD *)v99 = 134284033;
          *(void *)&v99[4] = v74;
          __int16 v100 = 2049;
          uint64_t v101 = v75;
          __int16 v102 = 2050;
          uint64_t v103 = v110;
          v76 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertPredictedLOI(uint32_t, std::chrono::system_clock::time_point, cl::chrono::secondsf, NSArray *)", "%s\n", v76);
          if (v76 != buf) {
            free(v76);
          }
        }
        [objc_msgSend(v34, "location") latitude];
        *(void *)buf = v56;
        [objc_msgSend(v34, "location") longitude];
        *(void *)v99 = v57;
        [objc_msgSend(v34, "location") horizontalUncertainty];
        uint64_t v92 = v58;
        [v32 confidence];
        uint64_t v91 = v59;
        if (!v109[0]) {
          __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
        }
        uint64_t v60 = *((void *)&v85 + 1);
        if (*((void *)&v85 + 1) >= v86)
        {
          uint64_t v51 = sub_101258CBC((uint64_t *)&v85, buf, (uint64_t *)v99, &v92, &v91, &v110, (int *)&v93);
        }
        else
        {
          uint64_t v61 = *(void *)v99;
          uint64_t v62 = v92;
          uint64_t v63 = v110;
          unsigned int v64 = v93;
          **((void **)&v85 + 1) = *(void *)buf;
          *(void *)(v60 + 8) = v61;
          *(void *)(v60 + 16) = v62;
          *(void *)(v60 + 24) = v59;
          *(void *)(v60 + 40) = v63;
          *(unsigned char *)(v60 + 32) = 1;
          *(unsigned char *)(v60 + 48) = 0;
          *(_DWORD *)(v60 + 64) = v64;
          uint64_t v51 = v60 + 72;
          *(unsigned char *)(v60 + 68) = 0;
        }
      }
      *((void *)&v85 + 1) = v51;
LABEL_76:
      if (v28 == (id)++v31)
      {
        id v81 = [a2 countByEnumeratingWithState:&v94 objects:&v113 count:16];
        id v28 = v81;
        if (!v81) {
          goto LABEL_89;
        }
        goto LABEL_32;
      }
    }
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  v83 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#Warning No predicted locations of interest", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    LOWORD(v113) = 0;
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v6);
    goto LABEL_10;
  }
LABEL_95:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_101255DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = (void **)&a17;
  sub_101258EFC(&a61);
  _Unwind_Resume(a1);
}

void sub_101255E44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    int v6 = 954437177
       * ((*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56)
         - *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48)) >> 3);
    int v7 = 954437177
       * ((*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56)
         - *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48)) >> 3);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v5;
    __int16 v26 = 1026;
    int v27 = v6;
    __int16 v28 = 1026;
    int v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, routine, %{public}d, %{public}d, converted, %{public}d, %{public}d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v13 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v14 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    int v15 = 954437177
        * ((*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56)
          - *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48)) >> 3);
    int v16 = 954437177
        * ((*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56)
          - *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48)) >> 3);
    LODWORD(v22) = 67240960;
    HIDWORD(v22) = v13;
    LOWORD(v23) = 1026;
    *(_DWORD *)((char *)&v23 + 2) = v14;
    HIWORD(v23) = 1026;
    LODWORD(v24[0]) = v15;
    WORD2(v24[0]) = 1026;
    *(_DWORD *)((char *)v24 + 6) = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  v23 = 0;
  v24[0] = 0;
  uint64_t v22 = 0;
  sub_101256350((uint64_t *)&v22, 0x8E38E38E38E38E39* ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56)- *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48)) >> 3)- 0x71C71C71C71C71C7* ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56)- *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48)) >> 3));
  sub_101258FA4((uint64_t *)&v22, (uint64_t)v23, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56), 0x8E38E38E38E38E39* ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 56)- *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 48)) >> 3));
  sub_101258FA4((uint64_t *)&v22, (uint64_t)v23, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48), *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56), 0x8E38E38E38E38E39* ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 56)- *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 48)) >> 3));
  unint64_t v8 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v23 - (char *)v22) >> 3));
  if (v23 == v22) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  sub_10125963C((uint64_t)v22, v23, (uint64_t)&v20, v9, 1);
  sub_1001D69FC(*(void *)(v2 + 144), *(void *)(a1 + 88), (uint64_t *)&v22);
  v10 = *(_xpc_activity_s **)(a1 + 40);
  if (v10 && !xpc_activity_set_state(v10, 5))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      *(_DWORD *)buf = 134349056;
      *(void *)&buf[4] = state;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Failed to mark prefetch activity as done. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      xpc_activity_state_t v18 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      int v20 = 134349056;
      xpc_activity_state_t v21 = v18;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
  }
  *(void *)buf = &v22;
  sub_101258EFC((void ***)buf);
}

void sub_101256318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a13;
  sub_101258EFC(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_101256350(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10021D4B8(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    sub_101258930(a1, v7);
    return sub_101258A80((uint64_t)v7);
  }
  return result;
}

void sub_1012563FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101258A80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101256410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a2 + 4);
    uint64_t v8 = *(void *)(a2 + 12);
    uint64_t v9 = *(void *)(a2 + 20);
    *(_DWORD *)buf = 134284033;
    *(void *)&buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&unsigned char buf[14] = v8;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&buf[24] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "request to start indoor,%{private}lf,%{private}lf,%{public}lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::startUpdatingLocationAtLocation(const CLLastFix &, const _CLARSessionState)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  memcpy(buf, &unk_101D216A0, 0x230uLL);
  id v10 = [objc_alloc((Class)CLGpsPosition) initWithLocation:a2 andPrivateLocation:buf];
  [objc_msgSend(*(id *)(a1 + 152), "indoord") startUpdatingLocationAtLocation:v10];

  sub_101256670(a1, a3);
  sub_101256858(a1, 1);
}

id sub_101256670(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 152) indoord];
  if (result)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ClxIndoor, enablement, ar state, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendARStateInformation(const _CLARSessionState)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return [objc_msgSend(*(id *)(a1 + 152), "indoord") clVisionNotificationAvailable:[objc_msgSend(objc_alloc((Class)CLVisionNotification), "initWithARSessionState:", a2)];
  }
  return result;
}

void sub_101256858(uint64_t a1, char a2)
{
  v5[0] = 11;
  if (sub_1001072EC(a1, v5, 1))
  {
    sub_1000DB3D4((uint64_t)v5);
    int v8 = 10;
    char v9 = a2;
    int v4 = 11;
    (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v4, v5, 1, 0xFFFFFFFFLL, 0);

    if (v12) {
      sub_1000DB0A0(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v7) {
      sub_1000DB0A0(v7);
    }
    if (v6) {
      sub_1000DB0A0(v6);
    }
  }
}

void sub_10125693C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101256950(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_101256958(uint64_t a1, uint64_t a2)
{
  return sub_101256670(a1 - 120, a2);
}

void sub_101256960(uint64_t a1, void *a2)
{
  if ([*(id *)(a1 + 152) indoord])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ClxIndoor, vio estimation", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      LOWORD(v9[0]) = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100B66FE4((uint64_t)buf);
    sub_100864CF0(a2, (uint64_t)buf);
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v10 = 0;
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
    *(_OWORD *)__p = *(_OWORD *)v9;
    uint64_t v8 = 0;
    id v5 = [objc_alloc((Class)CLVisionNotification) initWithSerializedVIOEstimation:__p];
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
    [objc_msgSend(*(id *)(a1 + 152), "indoord") clVisionNotificationAvailable:v5];
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
    sub_100B6B85C((wireless_diagnostics::google::protobuf::MessageLite *)buf);
  }
}

void sub_101256BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_100B6B85C((wireless_diagnostics::google::protobuf::MessageLite *)&a25);
  _Unwind_Resume(a1);
}

void sub_101256BF8(uint64_t a1, void *a2)
{
}

void sub_101256C00(uint64_t a1, void *a2)
{
  if ([*(id *)(a1 + 152) indoord])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ClxIndoor, vl localization", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      LOWORD(v9[0]) = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100B6715C((uint64_t)buf);
    sub_10086646C(a2, (uint64_t)buf);
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v10 = 0;
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
    *(_OWORD *)__p = *(_OWORD *)v9;
    uint64_t v8 = 0;
    id v5 = [objc_alloc((Class)CLVisionNotification) initWithSerializedVLLocalizationResult:__p];
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
    [objc_msgSend(*(id *)(a1 + 152), "indoord") clVisionNotificationAvailable:v5];
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
    sub_100B74AA0((wireless_diagnostics::google::protobuf::MessageLite *)buf);
  }
}

void sub_101256E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_100B74AA0((wireless_diagnostics::google::protobuf::MessageLite *)&a25);
  _Unwind_Resume(a1);
}

void sub_101256E98(uint64_t a1, void *a2)
{
}

void sub_101256EA0(uint64_t a1, uint64_t *a2)
{
  if ([*(id *)(a1 + 152) indoord])
  {
    sub_1012C1318((uint64_t)v19);
    v21 |= 1u;
    if (!v20) {
      operator new();
    }
    BOOL v4 = sub_10045F080((uint64_t)a2, v20);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = a2[2];
      uint64_t v7 = a2[3];
      uint64_t v8 = *a2;
      uint64_t v9 = a2[4];
      *(_DWORD *)buf = 67241217;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&buf[8] = 2050;
      *(void *)&buf[10] = v6;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v7;
      __int16 v33 = 2049;
      uint64_t v34 = v8;
      __int16 v35 = 2050;
      uint64_t v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "ClxIndoor, outdoor update converted, %{public}d, type, %{public}ld, confidence, %ld , start time, %{private}.3f, outdoor prob, %{public}.3f", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v12 = a2[2];
      uint64_t v13 = a2[3];
      uint64_t v14 = *a2;
      uint64_t v15 = a2[4];
      int v22 = 67241217;
      BOOL v23 = v4;
      __int16 v24 = 2050;
      uint64_t v25 = v12;
      __int16 v26 = 2048;
      uint64_t v27 = v13;
      __int16 v28 = 2049;
      uint64_t v29 = v14;
      __int16 v30 = 2050;
      uint64_t v31 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendOutdoorUpdate(const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    memset(buf, 0, 24);
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
    id v10 = objc_alloc((Class)CLPOutdoorEstimatorLogEntryNotification);
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_1000DC48C(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)buf;
      uint64_t v18 = *(void *)&buf[16];
    }
    id v11 = [v10 initWithSerializedOutdoorEstimatorLogEntry:__p];
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    [objc_msgSend(*(id *)(a1 + 152), "indoord") clpOutdoorEstimatorLogEntryNotificationAvailable:v11];
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_1012C1B68((wireless_diagnostics::google::protobuf::MessageLite *)v19);
  }
}

void sub_1012571C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

void sub_101257238(uint64_t a1, uint64_t *a2)
{
}

void sub_101257240(uint64_t a1)
{
  uint64_t v2 = (objc_class *)[objc_msgSend(*(id *)(a1 + 152), "indoorBundle") principalClass];
  [objc_msgSend(*(id *)(a1 + 152), "indoord") invalidate];
  [*(id *)(a1 + 152) setIndoord:0];
  id v3 = [[v2 alloc] initWithApiKey:@"4d44bee9-c1f9-4074-974c-86076b5311ef" onServer:@"https://purpleslam.apple.com"];
  [*(id *)(a1 + 152) setIndoord:v3];

  if ([*(id *)(a1 + 152) indoord])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    BOOL v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 152) indoord];
      *(_DWORD *)buf = 134349056;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice fBounce.indoord = %{public}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      [*(id *)(a1 + 152) indoord];
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::startDaemonLocalizing()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    [objc_msgSend(*(id *)(a1 + 152), "indoord") setDelegate: *(void *)(a1 + 152)];
    [*(id *)(*(void *)(a1 + 376) + 16) register:*(void *)(*(void *)(a1 + 376) + 8) forNotification:4 registrationInfo:0];
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "failed to load principal class from indoor bundle", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPipelineLocationProvider::startDaemonLocalizing()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1012575B4(uint64_t a1)
{
}

BOOL sub_1012575BC(uint64_t a1)
{
  return [*(id *)(a1 + 152) indoord] != 0;
}

BOOL sub_1012575E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) indoord] != 0;
}

BOOL sub_101257604()
{
  return sub_1001198CC() == 1;
}

BOOL sub_101257624()
{
  return sub_1001198CC() == 1;
}

void sub_101257644(uint64_t a1)
{
}

id sub_10125764C(uint64_t a1, uint64_t **a2)
{
  BOOL v4 = *a2;
  id v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      v6 -= 0x5555555555555555 * ((uint64_t)(*(void *)(v4[3] + 8) - *(void *)v4[3]) >> 3);
      v4 += 7;
    }
    while (v4 != v5);
  }
  uint64_t v42 = +[NSMutableArray arrayWithCapacity:v6];
  uint64_t v7 = (objc_class *)[objc_msgSend(*(id *)(a1 + 152), "indoorBundle") classNamed:@"CLPrefetchFloorRequest"];
  if (v7)
  {
    uint64_t v2 = v7;
    if (qword_1024193A0 == -1) {
      goto LABEL_8;
    }
  }
  else
  {
    sub_101AA9C4C(qword_1024193A0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193A0, &stru_10231A1C8);
LABEL_8:
  uint64_t v39 = a1;
  uint64_t v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * (a2[1] - *a2);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, request, venues, %{public}lu", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v30 = 0x6DB6DB6DB6DB6DB7 * (a2[1] - *a2);
    int v43 = 134349056;
    uint64_t v44 = v30;
    uint64_t v31 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::prefetchVenues(const vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> &)", "%s\n", (const char *)v31);
    if (v31 != buf) {
      free(v31);
    }
  }
  id v10 = *a2;
  uint64_t v41 = a2[1];
  if (*a2 != v41)
  {
    do
    {
      id v11 = v10;
      if (*((char *)v10 + 23) < 0) {
        id v11 = (uint64_t *)*v10;
      }
      uint64_t v12 = +[NSString stringWithUTF8String:v11];
      uint64_t v13 = (const std::string **)v10[3];
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      if (*v13 != v14)
      {
        int v16 = v12;
        uint64_t v17 = v10[5];
        uint64_t v18 = *((int *)v10 + 12);
        do
        {
          std::string::basic_string(buf, v15, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v19 = buf;
          }
          else {
            v19 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
          }
          uint64_t v20 = +[NSString stringWithUTF8String:v19];
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf[0].__r_.__value_.__l.__data_);
          }
          id v21 = [v2 initWithFloor:v20 inVenue:v16 lastRelevant:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", ((double)v10[4] + -9.783072e14) / 1000000.0) locationContext:v17 ranking:v18];
          [(NSMutableArray *)v42 addObject:v21];

          ++v15;
        }
        while (v15 != v14);
      }
      v10 += 7;
    }
    while (v10 != v41);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v22 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v24 = *a2;
    BOOL v23 = a2[1];
    id v25 = [(NSMutableArray *)v42 count];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = 0x6DB6DB6DB6DB6DB7 * (v23 - v24);
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, venues, %{public}lu, floors, %{public}lu", (uint8_t *)buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    __int16 v33 = *a2;
    v32 = a2[1];
    id v34 = [(NSMutableArray *)v42 count];
    int v43 = 134349312;
    uint64_t v44 = 0x6DB6DB6DB6DB6DB7 * (v32 - v33);
    __int16 v45 = 2050;
    id v46 = v34;
    __int16 v35 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::prefetchVenues(const vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> &)", "%s\n", (const char *)v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  __int16 v26 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    id v27 = [*(id *)(v39 + 152) indoord];
    id v28 = [[-[NSMutableArray componentsJoinedByString:](v42, "componentsJoinedByString:", @",") UTF8String];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134218242;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%p CLPipelineLocationProvider::prefetchVenues() --> requesting prefetch for %s", (uint8_t *)buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v36 = [*(id *)(v39 + 152) indoord];
    id v37 = [[-[NSMutableArray componentsJoinedByString:](v42, "componentsJoinedByString:", @",") UTF8String];
    int v43 = 134218242;
    uint64_t v44 = (uint64_t)v36;
    __int16 v45 = 2080;
    id v46 = v37;
    uint64_t v38 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::prefetchVenues(const vector<tuple<string, const vector<string> &, system_clock::time_point, CLPipelinedLocationContext, int>> &)", "%s\n", (const char *)v38);
    if (v38 != buf) {
      free(v38);
    }
  }
  return [[[*(id *)(v39 + 152) daemonControl] prefetch:v42];
}

void sub_101257D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_101257DB0(uint64_t a1, uint64_t **a2)
{
  return sub_10125764C(a1 - 120, a2);
}

void sub_101257E68(id a1)
{
  qword_102486888 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPipelineLocationProviderSilo"];
}

void sub_101257F00(_Unwind_Exception *a1)
{
}

BOOL sub_101257F18()
{
  v1 = sub_10124D740();
  BOOL v2 = v1 != 0;
  [(NSBundle *)v1 unload];
  return v2;
}

void sub_1012581DC()
{
}

void sub_101258294(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1012582D0()
{
}

void sub_101258390(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1012583CC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1012583FC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10125842C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10125845C(uint64_t a1)
{
}

id sub_101258468@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id result = [a1 countByEnumeratingWithState:&v21 objects:v37 count:16];
  id v4 = result;
  if (result)
  {
    int v5 = 0;
    uint64_t v6 = *(void *)v22;
    uint64_t v7 = *(void *)(a2 + 8);
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v8);
        if ([v9 exitDate]) {
          id v10 = [v9 exitDate];
        }
        else {
          id v10 = [v9 entryDate];
        }
        id v11 = v10;
        [v10 timeIntervalSinceReferenceDate];
        double v13 = v12;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        uint64_t v14 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          id v15 = [[[v11 description] UTF8String];
          [v11 timeIntervalSinceNow];
          *(_DWORD *)buf = 136446722;
          id v32 = v15;
          __int16 v33 = 2050;
          double v34 = v16 / 3600.0;
          __int16 v35 = 2050;
          uint64_t v36 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "VisitTime, visit, %{public}s, delta, %{public}.1f, val, %{public}ld", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          id v17 = [[objc_msgSend(v11, "description") UTF8String];
          [v11 timeIntervalSinceNow];
          int v25 = 136446722;
          id v26 = v17;
          __int16 v27 = 2050;
          double v28 = v18 / 3600.0;
          __int16 v29 = 2050;
          uint64_t v30 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
          v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "boost::optional<system_clock::time_point> mostRecentVisitInVisits(NSArray *)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        if (v5)
        {
          if (v7 <= (uint64_t)(v13 * 1000000.0 + 9.783072e14)) {
            uint64_t v7 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
          }
        }
        else
        {
          int v5 = 1;
          *(unsigned char *)a2 = 1;
          uint64_t v7 = (uint64_t)(v13 * 1000000.0 + 9.783072e14);
        }
        *(void *)(a2 + 8) = v7;
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v4 != v8);
      id result = [a1 countByEnumeratingWithState:&v21 objects:v37 count:16];
      id v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_1012587A0(_Unwind_Exception *a1)
{
  if (!v2) {
    _Unwind_Resume(a1);
  }
  unsigned char *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_1012587D0(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8 = *a1;
  unint64_t v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL) {
    sub_1001D7FD4();
  }
  uint64_t v17 = (uint64_t)(a1 + 2);
  unint64_t v18 = 0x8E38E38E38E38E39 * ((a1[2] - v8) >> 3);
  if (2 * v18 > v10) {
    unint64_t v10 = 2 * v18;
  }
  if (v18 >= 0x1C71C71C71C71C7) {
    unint64_t v19 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v19 = v10;
  }
  v30[4] = a1 + 2;
  uint64_t v20 = (char *)sub_10021D4B8(v17, v19);
  long long v21 = &v20[72 * v9];
  v30[0] = v20;
  v30[1] = v21;
  v30[3] = &v20[72 * v22];
  uint64_t v23 = *a3;
  uint64_t v24 = *a4;
  uint64_t v25 = *a5;
  uint64_t v26 = *a6;
  uint64_t v27 = *a7;
  *(void *)long long v21 = *a2;
  *((void *)v21 + 1) = v23;
  *((void *)v21 + 2) = v24;
  *((void *)v21 + 3) = v25;
  *((void *)v21 + 5) = v26;
  v21[32] = 1;
  v21[48] = 0;
  *((_DWORD *)v21 + 16) = v27;
  v21[68] = 0;
  v30[2] = v21 + 72;
  sub_101258930(a1, v30);
  uint64_t v28 = a1[1];
  sub_101258A80((uint64_t)v30);
  return v28;
}

void sub_10125891C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101258A80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101258930(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1012589A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1012589A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a6;
  uint64_t v11 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    do
    {
      v8 -= 72;
      sub_1001DC3EC(a7 - 72, v8);
      a7 = v11 - 72;
      v11 -= 72;
    }
    while (v8 != a5);
    return v10;
  }
  return a6;
}

void sub_101258A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101258A40(uint64_t result)
{
  if (!*(unsigned char *)(result + 24))
  {
    uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
    uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
    while (v1 != v2)
    {
      if (*(unsigned char *)(v1 + 48)) {
        *(unsigned char *)(v1 + 48) = 0;
      }
      if (*(unsigned char *)(v1 + 32)) {
        *(unsigned char *)(v1 + 32) = 0;
      }
      v1 += 72;
    }
  }
  return result;
}

uint64_t sub_101258A80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      if (*(unsigned char *)(v3 - 24)) {
        *(unsigned char *)(v3 - 24) = 0;
      }
      if (*(unsigned char *)(v3 - 40)) {
        *(unsigned char *)(v3 - 40) = 0;
      }
      v3 -= 72;
    }
    while (v3 != v2);
    *(void *)(a1 + 16) = v2;
  }
  id v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_101258AE4(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned __int8 *a6, unsigned __int8 *a7, int *a8)
{
  unint64_t v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL) {
    sub_1001D7FD4();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v10) {
    unint64_t v10 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v18 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v18 = v10;
  }
  uint64_t v26 = a1 + 2;
  if (v18) {
    unint64_t v19 = (char *)sub_10021D4B8((uint64_t)(a1 + 2), v18);
  }
  else {
    unint64_t v19 = 0;
  }
  uint64_t v22 = v19;
  uint64_t v23 = &v19[72 * v9];
  uint64_t v25 = &v19[72 * v18];
  sub_101258C54((uint64_t)(a1 + 2), (uint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v24 = v23 + 72;
  sub_101258930(a1, &v22);
  uint64_t v20 = a1[1];
  sub_101258A80((uint64_t)&v22);
  return v20;
}

void sub_101258C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101258A80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101258C54(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned __int8 *a7, unsigned __int8 *a8, int *a9)
{
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  int v12 = *a7;
  uint64_t v13 = *((void *)a7 + 1);
  int v14 = *a8;
  uint64_t v15 = *((void *)a8 + 1);
  int v16 = *a9;
  *(void *)a2 = *a3;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 32) = 0;
  if (v12)
  {
    *(void *)(a2 + 40) = v13;
    *(unsigned char *)(a2 + 32) = 1;
  }
  *(unsigned char *)(a2 + 48) = 0;
  if (v14)
  {
    *(void *)(a2 + 56) = v15;
    *(unsigned char *)(a2 + 48) = 1;
  }
  *(_DWORD *)(a2 + 64) = v16;
  *(unsigned char *)(a2 + 68) = 1;
}

uint64_t sub_101258CBC(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7)
{
  uint64_t v8 = *a1;
  unint64_t v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL) {
    sub_1001D7FD4();
  }
  uint64_t v17 = (uint64_t)(a1 + 2);
  unint64_t v18 = 0x8E38E38E38E38E39 * ((a1[2] - v8) >> 3);
  if (2 * v18 > v10) {
    unint64_t v10 = 2 * v18;
  }
  if (v18 >= 0x1C71C71C71C71C7) {
    unint64_t v19 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v19 = v10;
  }
  v30[4] = a1 + 2;
  uint64_t v20 = (char *)sub_10021D4B8(v17, v19);
  long long v21 = &v20[72 * v9];
  v30[0] = v20;
  v30[1] = v21;
  v30[3] = &v20[72 * v22];
  uint64_t v23 = *a3;
  uint64_t v24 = *a4;
  uint64_t v25 = *a5;
  uint64_t v26 = *a6;
  int v27 = *a7;
  *(void *)long long v21 = *a2;
  *((void *)v21 + 1) = v23;
  *((void *)v21 + 2) = v24;
  *((void *)v21 + 3) = v25;
  *((void *)v21 + 5) = v26;
  v21[32] = 1;
  v21[48] = 0;
  *((_DWORD *)v21 + 16) = v27;
  v21[68] = 0;
  v30[2] = v21 + 72;
  sub_101258930(a1, v30);
  uint64_t v28 = a1[1];
  sub_101258A80((uint64_t)v30);
  return v28;
}

void sub_101258E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101258A80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101258E20()
{
}

void *sub_101258E34(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10231A238;
  result[1] = v3;
  return result;
}

uint64_t sub_101258E7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231A238;
  a2[1] = v2;
  return result;
}

void sub_101258EA8(uint64_t a1, _DWORD *a2)
{
}

uint64_t sub_101258EB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101258EF0()
{
}

void sub_101258EFC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 72)
    {
      if (*(i - 24)) {
        *(i - 24) = 0;
      }
      if (*(i - 40)) {
        *(i - 40) = 0;
      }
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

void sub_101258F40(char **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 72)
    {
      if (*(i - 24)) {
        *(i - 24) = 0;
      }
      if (*(i - 40)) {
        *(i - 40) = 0;
      }
    }
    a1[1] = v2;
    operator delete(v2);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_101258FA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 72 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_10125930C(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_1012591B4((uint64_t)a1, v5, v12, v5 + 72 * a5);
      sub_1012594C8((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x38E38E38E38E38ELL) {
        sub_1001D7FD4();
      }
      unint64_t v15 = 0x8E38E38E38E38E39 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1C71C71C71C71C7) {
        unint64_t v18 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_10021D4B8(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      uint64_t v22 = (uint64_t)&v19[72 * v15];
      v27[0] = v19;
      v27[1] = v22;
      uint64_t v28 = v22;
      __int16 v29 = &v19[72 * v18];
      uint64_t v23 = 9 * a5;
      uint64_t v24 = v22 + 72 * a5;
      uint64_t v25 = 8 * v23;
      do
      {
        sub_1001DC3EC(v22, v7);
        v22 += 72;
        v7 += 72;
        v25 -= 72;
      }
      while (v25);
      uint64_t v28 = v24;
      uint64_t v5 = sub_101259258(a1, v27, v5);
      sub_101258A80((uint64_t)v27);
    }
  }
  return v5;
}

void sub_101259188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012591B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_1001DC3EC(v8, v10);
      v10 += 72;
      v8 += 72;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1012593D8((uint64_t)&v12, a2, v7, v6);
}

void sub_101259250(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_101259258(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_1012589A8((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1012595B0(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10125930C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      sub_1001DC3EC(a4, v5);
      v5 += 72;
      a4 = v7 + 72;
      v7 += 72;
    }
    while (v5 != a3);
  }
  return a4;
}

void sub_101259384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101259398(uint64_t result)
{
  if (!*(unsigned char *)(result + 24))
  {
    uint64_t v1 = **(void **)(result + 16);
    uint64_t v2 = **(void **)(result + 8);
    while (v1 != v2)
    {
      if (*(unsigned char *)(v1 - 24)) {
        *(unsigned char *)(v1 - 24) = 0;
      }
      if (*(unsigned char *)(v1 - 40)) {
        *(unsigned char *)(v1 - 40) = 0;
      }
      v1 -= 72;
    }
  }
  return result;
}

uint64_t sub_1012593D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a3;
  if (a3 != a2)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = a4 + v5;
      long long v7 = *(_OWORD *)(a3 + v5 - 72);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(a3 + v5 - 56);
      *(_OWORD *)(v6 - 72) = v7;
      if (*(unsigned char *)(a4 + v5 - 40))
      {
        if (*(unsigned char *)(a3 + v5 - 40)) {
          *(void *)(a4 + v5 - 32) = *(void *)(a3 + v5 - 32);
        }
        else {
          *(unsigned char *)(v6 - 40) = 0;
        }
      }
      else if (*(unsigned char *)(a3 + v5 - 40))
      {
        *(void *)(a4 + v5 - 32) = *(void *)(a3 + v5 - 32);
        *(unsigned char *)(v6 - 40) = 1;
      }
      uint64_t v8 = a4 + v5;
      if (*(unsigned char *)(a4 + v5 - 24))
      {
        if (*(unsigned char *)(a3 + v5 - 24)) {
          *(void *)(a4 + v5 - 16) = *(void *)(a3 + v5 - 16);
        }
        else {
          *(unsigned char *)(v8 - 24) = 0;
        }
      }
      else if (*(unsigned char *)(a3 + v5 - 24))
      {
        *(void *)(a4 + v5 - 16) = *(void *)(a3 + v5 - 16);
        *(unsigned char *)(v8 - 24) = 1;
      }
      uint64_t v9 = a4 + v5;
      int v10 = *(_DWORD *)(a3 + v5 - 8);
      *(unsigned char *)(v9 - 4) = *(unsigned char *)(a3 + v5 - 4);
      *(_DWORD *)(v9 - 8) = v10;
      v5 -= 72;
    }
    while (a3 + v5 != a2);
  }
  return result;
}

uint64_t sub_1012594C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t result = a3;
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = a2 + v5;
    uint64_t v7 = a4 + v5;
    long long v8 = *(_OWORD *)(a2 + v5 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + v5);
    *(_OWORD *)(v7 + 16) = v8;
    if (*(unsigned char *)(a4 + v5 + 32))
    {
      if (*(unsigned char *)(a2 + v5 + 32)) {
        *(void *)(a4 + v5 + 40) = *(void *)(a2 + v5 + 40);
      }
      else {
        *(unsigned char *)(v7 + 32) = 0;
      }
    }
    else if (*(unsigned char *)(a2 + v5 + 32))
    {
      *(void *)(a4 + v5 + 40) = *(void *)(a2 + v5 + 40);
      *(unsigned char *)(v7 + 32) = 1;
    }
    uint64_t v9 = a4 + v5;
    if (*(unsigned char *)(a4 + v5 + 48))
    {
      if (*(unsigned char *)(v6 + 48)) {
        *(void *)(a4 + v5 + 56) = *(void *)(a2 + v5 + 56);
      }
      else {
        *(unsigned char *)(v9 + 48) = 0;
      }
    }
    else if (*(unsigned char *)(v6 + 48))
    {
      *(void *)(a4 + v5 + 56) = *(void *)(a2 + v5 + 56);
      *(unsigned char *)(v9 + 48) = 1;
    }
    uint64_t v10 = a4 + v5;
    int v11 = *(_DWORD *)(v6 + 64);
    *(unsigned char *)(v10 + 68) = *(unsigned char *)(v6 + 68);
    *(_DWORD *)(v10 + 64) = v11;
    v5 += 72;
  }
  while (v6 + 72 != a3);
  return result;
}

uint64_t sub_1012595B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      sub_1001DC3EC(a4, v5);
      v5 += 72;
      a4 = v7 + 72;
      v7 += 72;
    }
    while (v5 != a3);
  }
  return a4;
}

void sub_101259628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10125963C(uint64_t result, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = (long long *)result;
  uint64_t v25 = a2;
  uint64_t v26 = (long long *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0x8E38E38E38E38E39 * (((char *)v9 - (char *)v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v25 = (long long *)((char *)v9 - 72);
          uint64_t result = sub_1001C6E78((uint64_t)v9 - 72, (uint64_t)v10);
          if (result) {
            uint64_t result = (uint64_t)sub_101259944(&v26, &v25);
          }
          break;
        case 3uLL:
          uint64_t v25 = (long long *)((char *)v9 - 72);
          uint64_t result = sub_101259ED8(v10, (long long *)((char *)v10 + 72), (long long *)((char *)v9 - 72));
          break;
        case 4uLL:
          uint64_t v25 = (long long *)((char *)v9 - 72);
          uint64_t result = (uint64_t)sub_10125A82C(v10, (long long *)((char *)v10 + 72), v10 + 9, (long long *)((char *)v9 - 72));
          break;
        case 5uLL:
          uint64_t v25 = (long long *)((char *)v9 - 72);
          uint64_t result = (uint64_t)sub_10125A8CC(v10, (long long *)((char *)v10 + 72), v10 + 9, (long long *)((char *)v10 + 216), (long long *)((char *)v9 - 72));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 1727)
    {
      if (a5) {
        return sub_101259A54((uint64_t)v10, v9);
      }
      else {
        return sub_101259CB4((uint64_t)v10, v9);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = (long long *)((char *)v9 - 72);
    if ((unint64_t)v12 >= 0x2401)
    {
      sub_101259ED8(v10, (long long *)((char *)v10 + 72 * (v13 >> 1)), v15);
      unint64_t v16 = v25;
      uint64_t v17 = 9 * v14;
      uint64_t v18 = 72 * v14;
      uint64_t v19 = 72 * v14 - 72;
      sub_101259ED8((long long *)((char *)v26 + 72), (long long *)((char *)v26 + v19), v25 - 9);
      v18 += 72;
      sub_101259ED8(v26 + 9, (long long *)((char *)v26 + v18), (long long *)((char *)v16 - 216));
      sub_101259ED8((long long *)((char *)v26 + v19), (long long *)((char *)v26 + 8 * v17), (long long *)((char *)v26 + v18));
      uint64_t v24 = (long long *)((char *)v26 + 8 * v17);
      sub_101259944(&v26, &v24);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_101259ED8((long long *)((char *)v10 + 72 * (v13 >> 1)), v10, v15);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = v25;
        goto LABEL_14;
      }
    }
    BOOL v20 = sub_1001C6E78((uint64_t)v26 - 72, (uint64_t)v26);
    uint64_t v9 = v25;
    if (!v20)
    {
      uint64_t result = (uint64_t)sub_101259FA0((uint64_t)v26, v25);
      uint64_t v10 = (long long *)result;
LABEL_22:
      a5 = 0;
      uint64_t v26 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    uint64_t v21 = sub_10125A240((uint64_t)v26, v9);
    if ((v22 & 1) == 0) {
      goto LABEL_21;
    }
    BOOL v23 = sub_10125A4E8(v26, v21);
    uint64_t v10 = (long long *)((char *)v21 + 72);
    uint64_t result = sub_10125A4E8((long long *)((char *)v21 + 72), v9);
    if (result)
    {
      if (v23) {
        return result;
      }
      uint64_t v25 = v21;
      uint64_t v10 = v26;
      uint64_t v9 = v21;
    }
    else
    {
      if (!v23)
      {
LABEL_21:
        uint64_t result = sub_10125963C(v26, v21, a3, -i, a5 & 1);
        uint64_t v10 = (long long *)((char *)v21 + 72);
        goto LABEL_22;
      }
      uint64_t v26 = (long long *)((char *)v21 + 72);
    }
  }
  if (v10 != v9) {
    return (uint64_t)sub_10125A998(v10, v9, v9, a3);
  }
  return result;
}

long long **sub_101259944(long long **result, long long **a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  long long v4 = **result;
  long long v5 = (*result)[1];
  int v6 = *((unsigned __int8 *)*result + 32);
  uint64_t v7 = *((void *)*result + 5);
  int v8 = *((unsigned __int8 *)*result + 48);
  uint64_t v9 = *((void *)*result + 7);
  uint64_t v11 = (uint64_t)(*result + 4);
  int v10 = *(_DWORD *)v11;
  char v12 = *((unsigned char *)*result + 68);
  long long v13 = (*a2)[1];
  *uint64_t v2 = **a2;
  v2[1] = v13;
  if (v6)
  {
    if (*((unsigned char *)v3 + 32)) {
      *((void *)v2 + 5) = *((void *)v3 + 5);
    }
    else {
      *((unsigned char *)v2 + 32) = 0;
    }
  }
  else if (*((unsigned char *)v3 + 32))
  {
    *((void *)v2 + 5) = *((void *)v3 + 5);
    *((unsigned char *)v2 + 32) = 1;
  }
  if (v8)
  {
    if (*((unsigned char *)v3 + 48)) {
      *((void *)v2 + 7) = *((void *)v3 + 7);
    }
    else {
      *((unsigned char *)v2 + 48) = 0;
    }
  }
  else if (*((unsigned char *)v3 + 48))
  {
    *((void *)v2 + 7) = *((void *)v3 + 7);
    *((unsigned char *)v2 + 48) = 1;
  }
  int v14 = *((_DWORD *)v3 + 16);
  *(unsigned char *)(v11 + 4) = *((unsigned char *)v3 + 68);
  *(_DWORD *)uint64_t v11 = v14;
  long long *v3 = v4;
  v3[1] = v5;
  if (*((unsigned char *)v3 + 32))
  {
    if (v6) {
      *((void *)v3 + 5) = v7;
    }
    else {
      *((unsigned char *)v3 + 32) = 0;
    }
  }
  else if (v6)
  {
    *((void *)v3 + 5) = v7;
    *((unsigned char *)v3 + 32) = 1;
  }
  if (*((unsigned char *)v3 + 48))
  {
    if (v8) {
      *((void *)v3 + 7) = v9;
    }
    else {
      *((unsigned char *)v3 + 48) = 0;
    }
  }
  else if (v8)
  {
    *((void *)v3 + 7) = v9;
    *((unsigned char *)v3 + 48) = 1;
  }
  *((_DWORD *)v3 + 16) = v10;
  *((unsigned char *)v3 + 68) = v12;
  return result;
}

uint64_t sub_101259A54(uint64_t result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 72;
    if ((_OWORD *)(result + 72) != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = (long long *)v4;
        uint64_t result = sub_1001C6E78(v4, v6);
        if (result)
        {
          long long v8 = *(_OWORD *)(v6 + 88);
          long long v16 = *v7;
          long long v17 = v8;
          char v18 = 0;
          if (*(unsigned char *)(v6 + 104))
          {
            uint64_t v19 = *(void *)(v6 + 112);
            char v18 = 1;
          }
          char v20 = 0;
          if (*(unsigned char *)(v6 + 120))
          {
            uint64_t v21 = *(void *)(v6 + 128);
            char v20 = 1;
          }
          int v22 = *(_DWORD *)(v6 + 136);
          char v23 = *(unsigned char *)(v6 + 140);
          uint64_t v9 = v5;
          while (1)
          {
            uint64_t v10 = v3 + v9;
            long long v11 = *(_OWORD *)(v3 + v9 + 16);
            *(_OWORD *)(v10 + 72) = *(_OWORD *)(v3 + v9);
            *(_OWORD *)(v10 + 88) = v11;
            if (*(unsigned char *)(v3 + v9 + 104))
            {
              if (*(unsigned char *)(v3 + v9 + 32)) {
                *(void *)(v3 + v9 + 112) = *(void *)(v3 + v9 + 40);
              }
              else {
                *(unsigned char *)(v10 + 104) = 0;
              }
            }
            else if (*(unsigned char *)(v3 + v9 + 32))
            {
              *(void *)(v3 + v9 + 112) = *(void *)(v3 + v9 + 40);
              *(unsigned char *)(v10 + 104) = 1;
            }
            uint64_t v12 = v3 + v9;
            if (*(unsigned char *)(v3 + v9 + 120))
            {
              if (*(unsigned char *)(v3 + v9 + 48)) {
                *(void *)(v3 + v9 + 128) = *(void *)(v3 + v9 + 56);
              }
              else {
                *(unsigned char *)(v12 + 120) = 0;
              }
            }
            else if (*(unsigned char *)(v3 + v9 + 48))
            {
              *(void *)(v3 + v9 + 128) = *(void *)(v3 + v9 + 56);
              *(unsigned char *)(v12 + 120) = 1;
            }
            uint64_t v13 = v3 + v9;
            *(_DWORD *)(v13 + 136) = *(_DWORD *)(v3 + v9 + 64);
            *(unsigned char *)(v13 + 140) = *(unsigned char *)(v3 + v9 + 68);
            if (!v9) {
              break;
            }
            uint64_t result = sub_1001C6E78((uint64_t)&v16, v13 - 72);
            v9 -= 72;
            if ((result & 1) == 0)
            {
              uint64_t v14 = v3 + v9 + 72;
              goto LABEL_26;
            }
          }
          uint64_t v14 = v3;
LABEL_26:
          long long v15 = v17;
          *(_OWORD *)uint64_t v14 = v16;
          *(_OWORD *)(v14 + 16) = v15;
          if (*(unsigned char *)(v14 + 32))
          {
            if (v18) {
              *(void *)(v14 + 40) = v19;
            }
            else {
              *(unsigned char *)(v14 + 32) = 0;
            }
          }
          else if (v18)
          {
            *(void *)(v14 + 40) = v19;
            *(unsigned char *)(v14 + 32) = 1;
          }
          if (*(unsigned char *)(v14 + 48))
          {
            if (v20) {
              *(void *)(v14 + 56) = v21;
            }
            else {
              *(unsigned char *)(v14 + 48) = 0;
            }
          }
          else if (v20)
          {
            *(void *)(v14 + 56) = v21;
            *(unsigned char *)(v14 + 48) = 1;
          }
          *(_DWORD *)(v13 + 64) = v22;
          *(unsigned char *)(v13 + 68) = v23;
        }
        uint64_t v4 = (uint64_t)v7 + 72;
        v5 += 72;
        uint64_t v6 = (uint64_t)v7;
      }
      while ((long long *)((char *)v7 + 72) != a2);
    }
  }
  return result;
}

uint64_t sub_101259CB4(uint64_t result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 72;
    if ((_OWORD *)(result + 72) != a2)
    {
      uint64_t v5 = result - 72;
      do
      {
        uint64_t v6 = (long long *)v4;
        uint64_t result = sub_1001C6E78(v4, v3);
        if (result)
        {
          long long v7 = *(_OWORD *)(v3 + 88);
          long long v11 = *v6;
          long long v12 = v7;
          char v13 = 0;
          if (*(unsigned char *)(v3 + 104))
          {
            uint64_t v14 = *(void *)(v3 + 112);
            char v13 = 1;
          }
          char v15 = 0;
          if (*(unsigned char *)(v3 + 120))
          {
            uint64_t v16 = *(void *)(v3 + 128);
            char v15 = 1;
          }
          int v17 = *(_DWORD *)(v3 + 136);
          char v18 = *(unsigned char *)(v3 + 140);
          uint64_t v8 = v5;
          do
          {
            long long v9 = *(_OWORD *)(v8 + 88);
            *(_OWORD *)(v8 + 144) = *(_OWORD *)(v8 + 72);
            *(_OWORD *)(v8 + 160) = v9;
            if (*(unsigned char *)(v8 + 176))
            {
              if (*(unsigned char *)(v8 + 104)) {
                *(void *)(v8 + 184) = *(void *)(v8 + 112);
              }
              else {
                *(unsigned char *)(v8 + 176) = 0;
              }
            }
            else if (*(unsigned char *)(v8 + 104))
            {
              *(void *)(v8 + 184) = *(void *)(v8 + 112);
              *(unsigned char *)(v8 + 176) = 1;
            }
            if (*(unsigned char *)(v8 + 192))
            {
              if (*(unsigned char *)(v8 + 120)) {
                *(void *)(v8 + 200) = *(void *)(v8 + 128);
              }
              else {
                *(unsigned char *)(v8 + 192) = 0;
              }
            }
            else if (*(unsigned char *)(v8 + 120))
            {
              *(void *)(v8 + 200) = *(void *)(v8 + 128);
              *(unsigned char *)(v8 + 192) = 1;
            }
            *(_DWORD *)(v8 + 208) = *(_DWORD *)(v8 + 136);
            *(unsigned char *)(v8 + 212) = *(unsigned char *)(v8 + 140);
            uint64_t result = sub_1001C6E78((uint64_t)&v11, v8);
            v8 -= 72;
          }
          while ((result & 1) != 0);
          long long v10 = v12;
          *(_OWORD *)(v8 + 144) = v11;
          *(_OWORD *)(v8 + 160) = v10;
          if (*(unsigned char *)(v8 + 176))
          {
            if (v13) {
              *(void *)(v8 + 184) = v14;
            }
            else {
              *(unsigned char *)(v8 + 176) = 0;
            }
          }
          else if (v13)
          {
            *(void *)(v8 + 184) = v14;
            *(unsigned char *)(v8 + 176) = 1;
          }
          if (*(unsigned char *)(v8 + 192))
          {
            if (v15) {
              *(void *)(v8 + 200) = v16;
            }
            else {
              *(unsigned char *)(v8 + 192) = 0;
            }
          }
          else if (v15)
          {
            *(void *)(v8 + 200) = v16;
            *(unsigned char *)(v8 + 192) = 1;
          }
          *(_DWORD *)(v8 + 208) = v17;
          *(unsigned char *)(v8 + 212) = v18;
        }
        uint64_t v4 = (uint64_t)v6 + 72;
        v5 += 72;
        uint64_t v3 = (uint64_t)v6;
      }
      while ((long long *)((char *)v6 + 72) != a2);
    }
  }
  return result;
}

uint64_t sub_101259ED8(long long *a1, long long *a2, long long *a3)
{
  long long v10 = a2;
  long long v11 = a1;
  long long v9 = a3;
  BOOL v5 = sub_1001C6E78((uint64_t)a2, (uint64_t)a1);
  uint64_t result = sub_1001C6E78((uint64_t)a3, (uint64_t)a2);
  if (!v5)
  {
    if (!result) {
      return result;
    }
    sub_101259944(&v10, &v9);
    if (!sub_1001C6E78((uint64_t)v10, (uint64_t)v11)) {
      return 1;
    }
    long long v7 = &v11;
    uint64_t v8 = &v10;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_101259944(&v11, &v10);
    if (!sub_1001C6E78((uint64_t)v9, (uint64_t)v10)) {
      return 1;
    }
    long long v7 = &v10;
    uint64_t v8 = &v9;
LABEL_9:
    sub_101259944(v7, v8);
    return 2;
  }
  sub_101259944(&v11, &v9);
  return 1;
}

long long *sub_101259FA0(uint64_t a1, long long *a2)
{
  char v13 = a2;
  uint64_t v14 = (long long *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v15 = *(_OWORD *)a1;
  long long v16 = v3;
  char v17 = 0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v18 = *(void *)(a1 + 40);
    char v17 = 1;
  }
  char v19 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v20 = *(void *)(a1 + 56);
    char v19 = 1;
  }
  int v21 = *(_DWORD *)(a1 + 64);
  char v22 = *(unsigned char *)(a1 + 68);
  if (sub_1001C6E78((uint64_t)&v15, (uint64_t)a2 - 72))
  {
    do
      uint64_t v14 = (long long *)((char *)v14 + 72);
    while (!sub_1001C6E78((uint64_t)&v15, (uint64_t)v14));
  }
  else
  {
    do
    {
      uint64_t v4 = (long long *)((char *)v14 + 72);
      uint64_t v14 = v4;
    }
    while (v4 < v13 && !sub_1001C6E78((uint64_t)&v15, (uint64_t)v4));
  }
  uint64_t v6 = v13;
  BOOL v5 = v14;
  if (v14 >= v13) {
    goto LABEL_13;
  }
  do
    char v13 = (long long *)((char *)v13 - 72);
  while (sub_1001C6E78((uint64_t)&v15, (uint64_t)v13));
  while (1)
  {
    uint64_t v6 = v13;
    BOOL v5 = v14;
LABEL_13:
    if (v5 >= v6) {
      break;
    }
    sub_101259944(&v14, &v13);
    do
      uint64_t v14 = (long long *)((char *)v14 + 72);
    while (!sub_1001C6E78((uint64_t)&v15, (uint64_t)v14));
    do
      char v13 = (long long *)((char *)v13 - 72);
    while (sub_1001C6E78((uint64_t)&v15, (uint64_t)v13));
  }
  long long v7 = (long long *)((char *)v5 - 72);
  if ((long long *)((char *)v5 - 72) != (long long *)a1)
  {
    long long v8 = *(long long *)((char *)v5 - 56);
    *(_OWORD *)a1 = *v7;
    *(_OWORD *)(a1 + 16) = v8;
    if (*(unsigned char *)(a1 + 32))
    {
      if (*((unsigned char *)v5 - 40)) {
        *(void *)(a1 + 40) = *((void *)v5 - 4);
      }
      else {
        *(unsigned char *)(a1 + 32) = 0;
      }
    }
    else if (*((unsigned char *)v5 - 40))
    {
      *(void *)(a1 + 40) = *((void *)v5 - 4);
      *(unsigned char *)(a1 + 32) = 1;
    }
    if (*(unsigned char *)(a1 + 48))
    {
      if (*((unsigned char *)v5 - 24)) {
        *(void *)(a1 + 56) = *((void *)v5 - 2);
      }
      else {
        *(unsigned char *)(a1 + 48) = 0;
      }
    }
    else if (*((unsigned char *)v5 - 24))
    {
      *(void *)(a1 + 56) = *((void *)v5 - 2);
      *(unsigned char *)(a1 + 48) = 1;
    }
    int v9 = *((_DWORD *)v5 - 2);
    *(unsigned char *)(a1 + 68) = *((unsigned char *)v5 - 4);
    *(_DWORD *)(a1 + 64) = v9;
  }
  long long v10 = v16;
  *long long v7 = v15;
  *(long long *)((char *)v5 - 56) = v10;
  if (*((unsigned char *)v5 - 40))
  {
    if (v17) {
      *((void *)v5 - 4) = v18;
    }
    else {
      *((unsigned char *)v5 - 40) = 0;
    }
  }
  else if (v17)
  {
    *((void *)v5 - 4) = v18;
    *((unsigned char *)v5 - 40) = 1;
  }
  if (*((unsigned char *)v5 - 24))
  {
    if (v19) {
      *((void *)v5 - 2) = v20;
    }
    else {
      *((unsigned char *)v5 - 24) = 0;
    }
  }
  else if (v19)
  {
    *((void *)v5 - 2) = v20;
    *((unsigned char *)v5 - 24) = 1;
  }
  int v11 = v21;
  *((unsigned char *)v5 - 4) = v22;
  *((_DWORD *)v5 - 2) = v11;
  return v14;
}

long long *sub_10125A240(uint64_t a1, long long *a2)
{
  long long v10 = a2;
  int v11 = (long long *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v12 = *(_OWORD *)a1;
  long long v13 = v3;
  char v14 = 0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    char v14 = 1;
  }
  char v16 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v17 = *(void *)(a1 + 56);
    char v16 = 1;
  }
  int v18 = *(_DWORD *)(a1 + 64);
  char v19 = *(unsigned char *)(a1 + 68);
  do
    int v11 = (long long *)((char *)v11 + 72);
  while (sub_1001C6E78((uint64_t)v11, (uint64_t)&v12));
  if ((long long *)((char *)v11 - 72) == (long long *)a1)
  {
    do
    {
      if (v11 >= v10) {
        break;
      }
      long long v10 = (long long *)((char *)v10 - 72);
    }
    while (!sub_1001C6E78((uint64_t)v10, (uint64_t)&v12));
  }
  else
  {
    do
      long long v10 = (long long *)((char *)v10 - 72);
    while (!sub_1001C6E78((uint64_t)v10, (uint64_t)&v12));
  }
  for (uint64_t i = v11; v11 < v10; uint64_t i = v11)
  {
    sub_101259944(&v11, &v10);
    do
      int v11 = (long long *)((char *)v11 + 72);
    while (sub_1001C6E78((uint64_t)v11, (uint64_t)&v12));
    do
      long long v10 = (long long *)((char *)v10 - 72);
    while (!sub_1001C6E78((uint64_t)v10, (uint64_t)&v12));
  }
  uint64_t result = (long long *)((char *)i - 72);
  if ((long long *)((char *)i - 72) != (long long *)a1)
  {
    long long v6 = *(long long *)((char *)i - 56);
    *(_OWORD *)a1 = *result;
    *(_OWORD *)(a1 + 16) = v6;
    if (*(unsigned char *)(a1 + 32))
    {
      if (*((unsigned char *)i - 40)) {
        *(void *)(a1 + 40) = *((void *)i - 4);
      }
      else {
        *(unsigned char *)(a1 + 32) = 0;
      }
    }
    else if (*((unsigned char *)i - 40))
    {
      *(void *)(a1 + 40) = *((void *)i - 4);
      *(unsigned char *)(a1 + 32) = 1;
    }
    if (*(unsigned char *)(a1 + 48))
    {
      if (*((unsigned char *)i - 24)) {
        *(void *)(a1 + 56) = *((void *)i - 2);
      }
      else {
        *(unsigned char *)(a1 + 48) = 0;
      }
    }
    else if (*((unsigned char *)i - 24))
    {
      *(void *)(a1 + 56) = *((void *)i - 2);
      *(unsigned char *)(a1 + 48) = 1;
    }
    int v7 = *((_DWORD *)i - 2);
    *(unsigned char *)(a1 + 68) = *((unsigned char *)i - 4);
    *(_DWORD *)(a1 + 64) = v7;
  }
  long long v8 = v13;
  *uint64_t result = v12;
  *(long long *)((char *)i - 56) = v8;
  if (*((unsigned char *)i - 40))
  {
    if (v14) {
      *((void *)i - 4) = v15;
    }
    else {
      *((unsigned char *)i - 40) = 0;
    }
  }
  else if (v14)
  {
    *((void *)i - 4) = v15;
    *((unsigned char *)i - 40) = 1;
  }
  if (*((unsigned char *)i - 24))
  {
    if (v16) {
      *((void *)i - 2) = v17;
    }
    else {
      *((unsigned char *)i - 24) = 0;
    }
  }
  else if (v16)
  {
    *((void *)i - 2) = v17;
    *((unsigned char *)i - 24) = 1;
  }
  int v9 = v18;
  *((unsigned char *)i - 4) = v19;
  *((_DWORD *)i - 2) = v9;
  return result;
}

BOOL sub_10125A4E8(long long *a1, long long *a2)
{
  uint64_t v15 = a2;
  char v16 = a1;
  uint64_t v4 = 1;
  switch(0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v15 = (long long *)((char *)a2 - 72);
      if (sub_1001C6E78((uint64_t)a2 - 72, (uint64_t)a1)) {
        sub_101259944(&v16, &v15);
      }
      return v4;
    case 3uLL:
      sub_101259ED8(a1, (long long *)((char *)a1 + 72), (long long *)((char *)a2 - 72));
      return v4;
    case 4uLL:
      sub_10125A82C(a1, (long long *)((char *)a1 + 72), a1 + 9, (long long *)((char *)a2 - 72));
      return v4;
    case 5uLL:
      sub_10125A8CC(a1, (long long *)((char *)a1 + 72), a1 + 9, (long long *)((char *)a1 + 216), (long long *)((char *)a2 - 72));
      return v4;
    default:
      uint64_t v5 = (uint64_t)(a1 + 9);
      sub_101259ED8(a1, (long long *)((char *)a1 + 72), a1 + 9);
      uint64_t v6 = (uint64_t)a1 + 216;
      uint64_t v4 = 1;
      if ((long long *)v6 == a2) {
        return v4;
      }
      int v7 = 0;
      break;
  }
  while (!sub_1001C6E78(v6, v5))
  {
    long long v12 = v15;
LABEL_40:
    uint64_t v5 = v6;
    v6 += 72;
    if ((long long *)v6 == v12) {
      return 1;
    }
  }
  long long v8 = *(_OWORD *)(v6 + 16);
  long long v17 = *(_OWORD *)v6;
  long long v18 = v8;
  char v19 = 0;
  if (*(unsigned char *)(v6 + 32))
  {
    uint64_t v20 = *(void *)(v6 + 40);
    char v19 = 1;
  }
  char v21 = 0;
  if (*(unsigned char *)(v6 + 48))
  {
    uint64_t v22 = *(void *)(v6 + 56);
    char v21 = 1;
  }
  int v23 = *(_DWORD *)(v6 + 64);
  char v24 = *(unsigned char *)(v6 + 68);
  do
  {
    uint64_t v9 = v5;
    long long v10 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(v5 + 72) = *(_OWORD *)v5;
    *(_OWORD *)(v5 + 88) = v10;
    if (*(unsigned char *)(v5 + 104))
    {
      if (*(unsigned char *)(v5 + 32)) {
        *(void *)(v5 + 112) = *(void *)(v5 + 40);
      }
      else {
        *(unsigned char *)(v5 + 104) = 0;
      }
    }
    else if (*(unsigned char *)(v5 + 32))
    {
      *(void *)(v5 + 112) = *(void *)(v5 + 40);
      *(unsigned char *)(v5 + 104) = 1;
    }
    if (*(unsigned char *)(v5 + 120))
    {
      if (*(unsigned char *)(v5 + 48)) {
        *(void *)(v5 + 128) = *(void *)(v5 + 56);
      }
      else {
        *(unsigned char *)(v5 + 120) = 0;
      }
    }
    else if (*(unsigned char *)(v5 + 48))
    {
      *(void *)(v5 + 128) = *(void *)(v5 + 56);
      *(unsigned char *)(v5 + 120) = 1;
    }
    *(_DWORD *)(v5 + 136) = *(_DWORD *)(v5 + 64);
    *(unsigned char *)(v5 + 140) = *(unsigned char *)(v5 + 68);
    if ((long long *)v5 == v16) {
      break;
    }
    v5 -= 72;
  }
  while (sub_1001C6E78((uint64_t)&v17, v9 - 72));
  long long v11 = v18;
  *(_OWORD *)uint64_t v9 = v17;
  *(_OWORD *)(v9 + 16) = v11;
  if (*(unsigned char *)(v9 + 32))
  {
    if (v19) {
      *(void *)(v9 + 40) = v20;
    }
    else {
      *(unsigned char *)(v9 + 32) = 0;
    }
  }
  else if (v19)
  {
    *(void *)(v9 + 40) = v20;
    *(unsigned char *)(v9 + 32) = 1;
  }
  if (*(unsigned char *)(v9 + 48))
  {
    if (v21) {
      *(void *)(v9 + 56) = v22;
    }
    else {
      *(unsigned char *)(v9 + 48) = 0;
    }
  }
  else if (v21)
  {
    *(void *)(v9 + 56) = v22;
    *(unsigned char *)(v9 + 48) = 1;
  }
  int v13 = v23;
  *(unsigned char *)(v9 + 68) = v24;
  *(_DWORD *)(v9 + 64) = v13;
  ++v7;
  long long v12 = v15;
  if (v7 != 8) {
    goto LABEL_40;
  }
  return v6 + 72 == (void)v15;
}

long long **sub_10125A82C(long long *a1, long long *a2, long long *a3, long long *a4)
{
  long long v11 = a2;
  long long v12 = a1;
  uint64_t v9 = a4;
  long long v10 = a3;
  sub_101259ED8(a1, a2, a3);
  uint64_t result = (long long **)sub_1001C6E78((uint64_t)a4, (uint64_t)a3);
  if (result)
  {
    sub_101259944(&v10, &v9);
    uint64_t result = (long long **)sub_1001C6E78((uint64_t)v10, (uint64_t)a2);
    if (result)
    {
      sub_101259944(&v11, &v10);
      uint64_t result = (long long **)sub_1001C6E78((uint64_t)v11, (uint64_t)a1);
      if (result) {
        return sub_101259944(&v12, &v11);
      }
    }
  }
  return result;
}

long long **sub_10125A8CC(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  char v14 = a2;
  uint64_t v15 = a1;
  long long v12 = a4;
  int v13 = a3;
  long long v11 = a5;
  sub_10125A82C(a1, a2, a3, a4);
  uint64_t result = (long long **)sub_1001C6E78((uint64_t)a5, (uint64_t)a4);
  if (result)
  {
    sub_101259944(&v12, &v11);
    uint64_t result = (long long **)sub_1001C6E78((uint64_t)v12, (uint64_t)a3);
    if (result)
    {
      sub_101259944(&v13, &v12);
      uint64_t result = (long long **)sub_1001C6E78((uint64_t)v13, (uint64_t)a2);
      if (result)
      {
        sub_101259944(&v14, &v13);
        uint64_t result = (long long **)sub_1001C6E78((uint64_t)v14, (uint64_t)a1);
        if (result) {
          return sub_101259944(&v15, &v14);
        }
      }
    }
  }
  return result;
}

long long *sub_10125A998(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v18 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 72;
    if ((char *)a2 - (char *)a1 >= 73)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)a1 + 72 * v10;
      do
      {
        sub_10125AAFC((BOOL)v7, a4, v9, v12);
        v12 -= 72;
        --v11;
      }
      while (v11);
    }
    long long v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      int v13 = v6;
      do
      {
        if (sub_1001C6E78((uint64_t)v13, (uint64_t)v18))
        {
          sub_101259944(&v17, &v18);
          sub_10125AAFC((BOOL)v18, a4, v9, (uint64_t)v18);
        }
        int v13 = (long long *)((char *)v17 + 72);
        long long v17 = v13;
      }
      while (v13 != a3);
      int v7 = v18;
      uint64_t v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 73)
    {
      unint64_t v14 = v8 / 0x48uLL;
      do
      {
        sub_10125ADD0((uint64_t)v7, (uint64_t)v6, a4, v14);
        uint64_t v6 = (long long *)((char *)v6 - 72);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

BOOL sub_10125AAFC(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    BOOL v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * ((a4 - result) >> 3)))
    {
      uint64_t v9 = (0x1C71C71C71C71C72 * ((a4 - result) >> 3)) | 1;
      uint64_t v10 = result + 72 * v9;
      uint64_t v11 = 0x1C71C71C71C71C72 * ((a4 - result) >> 3) + 2;
      if (v11 < a3 && sub_1001C6E78(result + 72 * v9, v10 + 72))
      {
        v10 += 72;
        uint64_t v9 = v11;
      }
      uint64_t result = sub_1001C6E78(v10, v5);
      if (!result)
      {
        long long v12 = *(_OWORD *)(v5 + 16);
        long long v19 = *(_OWORD *)v5;
        long long v20 = v12;
        char v21 = 0;
        if (*(unsigned char *)(v5 + 32))
        {
          uint64_t v22 = *(void *)(v5 + 40);
          char v21 = 1;
        }
        char v23 = 0;
        if (*(unsigned char *)(v5 + 48))
        {
          uint64_t v24 = *(void *)(v5 + 56);
          char v23 = 1;
        }
        int v25 = *(_DWORD *)(v5 + 64);
        char v26 = *(unsigned char *)(v5 + 68);
        do
        {
          uint64_t v13 = v10;
          long long v14 = *(_OWORD *)(v10 + 16);
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v10;
          *(_OWORD *)(v5 + 16) = v14;
          if (*(unsigned char *)(v5 + 32))
          {
            if (*(unsigned char *)(v10 + 32)) {
              *(void *)(v5 + 40) = *(void *)(v10 + 40);
            }
            else {
              *(unsigned char *)(v5 + 32) = 0;
            }
          }
          else if (*(unsigned char *)(v10 + 32))
          {
            *(void *)(v5 + 40) = *(void *)(v10 + 40);
            *(unsigned char *)(v5 + 32) = 1;
          }
          if (*(unsigned char *)(v5 + 48))
          {
            if (*(unsigned char *)(v10 + 48)) {
              *(void *)(v5 + 56) = *(void *)(v10 + 56);
            }
            else {
              *(unsigned char *)(v5 + 48) = 0;
            }
          }
          else if (*(unsigned char *)(v10 + 48))
          {
            *(void *)(v5 + 56) = *(void *)(v10 + 56);
            *(unsigned char *)(v5 + 48) = 1;
          }
          int v15 = *(_DWORD *)(v10 + 64);
          *(unsigned char *)(v5 + 68) = *(unsigned char *)(v10 + 68);
          *(_DWORD *)(v5 + 64) = v15;
          if (v7 < v9) {
            break;
          }
          uint64_t v16 = (2 * v9) | 1;
          uint64_t v10 = v6 + 72 * v16;
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            uint64_t v9 = v16;
          }
          else if (sub_1001C6E78(v6 + 72 * v16, v10 + 72))
          {
            v10 += 72;
          }
          else
          {
            uint64_t v9 = v16;
          }
          uint64_t result = sub_1001C6E78(v10, (uint64_t)&v19);
          uint64_t v5 = v13;
        }
        while (!result);
        long long v17 = v20;
        *(_OWORD *)uint64_t v13 = v19;
        *(_OWORD *)(v13 + 16) = v17;
        if (*(unsigned char *)(v13 + 32))
        {
          if (v21) {
            *(void *)(v13 + 40) = v22;
          }
          else {
            *(unsigned char *)(v13 + 32) = 0;
          }
        }
        else if (v21)
        {
          *(void *)(v13 + 40) = v22;
          *(unsigned char *)(v13 + 32) = 1;
        }
        if (*(unsigned char *)(v13 + 48))
        {
          if (v23) {
            *(void *)(v13 + 56) = v24;
          }
          else {
            *(unsigned char *)(v13 + 48) = 0;
          }
        }
        else if (v23)
        {
          *(void *)(v13 + 56) = v24;
          *(unsigned char *)(v13 + 48) = 1;
        }
        int v18 = v25;
        *(unsigned char *)(v13 + 68) = v26;
        *(_DWORD *)(v13 + 64) = v18;
      }
    }
  }
  return result;
}

uint64_t sub_10125ADD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    BOOL v8 = result;
    int v9 = *(unsigned __int8 *)(result + 32);
    if (*(unsigned char *)(result + 32)) {
      uint64_t v5 = *(void *)(result + 40);
    }
    int v10 = *(unsigned __int8 *)(result + 48);
    if (*(unsigned char *)(result + 48)) {
      uint64_t v4 = *(void *)(result + 56);
    }
    uint64_t v12 = *(void *)result;
    uint64_t v11 = *(void *)(result + 8);
    uint64_t v14 = *(void *)(result + 16);
    uint64_t v13 = *(void *)(result + 24);
    int v15 = *(_DWORD *)(result + 64);
    char v16 = *(unsigned char *)(result + 68);
    uint64_t result = sub_10125B030(result, a3, a4);
    if (result == a2 - 72)
    {
      *(void *)uint64_t result = v12;
      *(void *)(result + 8) = v11;
      *(void *)(result + 16) = v14;
      *(void *)(result + 24) = v13;
      if (*(unsigned char *)(result + 32))
      {
        if (v9) {
          *(void *)(result + 40) = v5;
        }
        else {
          *(unsigned char *)(result + 32) = 0;
        }
      }
      else if (v9)
      {
        *(void *)(result + 40) = v5;
        *(unsigned char *)(result + 32) = 1;
      }
      if (*(unsigned char *)(result + 48))
      {
        if (v10) {
          *(void *)(result + 56) = v4;
        }
        else {
          *(unsigned char *)(result + 48) = 0;
        }
      }
      else if (v10)
      {
        *(void *)(result + 56) = v4;
        *(unsigned char *)(result + 48) = 1;
      }
      *(_DWORD *)(result + 64) = v15;
      *(unsigned char *)(result + 68) = v16;
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 - 56);
      *(_OWORD *)uint64_t result = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(result + 16) = v17;
      if (*(unsigned char *)(result + 32))
      {
        if (*(unsigned char *)(a2 - 40)) {
          *(void *)(result + 40) = *(void *)(a2 - 32);
        }
        else {
          *(unsigned char *)(result + 32) = 0;
        }
      }
      else if (*(unsigned char *)(a2 - 40))
      {
        *(void *)(result + 40) = *(void *)(a2 - 32);
        *(unsigned char *)(result + 32) = 1;
      }
      if (*(unsigned char *)(result + 48))
      {
        if (*(unsigned char *)(a2 - 24)) {
          *(void *)(result + 56) = *(void *)(a2 - 16);
        }
        else {
          *(unsigned char *)(result + 48) = 0;
        }
      }
      else if (*(unsigned char *)(a2 - 24))
      {
        *(void *)(result + 56) = *(void *)(a2 - 16);
        *(unsigned char *)(result + 48) = 1;
      }
      int v18 = *(_DWORD *)(a2 - 8);
      *(unsigned char *)(result + 68) = *(unsigned char *)(a2 - 4);
      *(_DWORD *)(result + 64) = v18;
      *(void *)(a2 - 72) = v12;
      *(void *)(a2 - 64) = v11;
      *(void *)(a2 - 56) = v14;
      *(void *)(a2 - 48) = v13;
      if (*(unsigned char *)(a2 - 40))
      {
        if (v9) {
          *(void *)(a2 - 32) = v5;
        }
        else {
          *(unsigned char *)(a2 - 40) = 0;
        }
      }
      else if (v9)
      {
        *(void *)(a2 - 32) = v5;
        *(unsigned char *)(a2 - 40) = 1;
      }
      if (*(unsigned char *)(a2 - 24))
      {
        if (v10) {
          *(void *)(a2 - 16) = v4;
        }
        else {
          *(unsigned char *)(a2 - 24) = 0;
        }
      }
      else if (v10)
      {
        *(void *)(a2 - 16) = v4;
        *(unsigned char *)(a2 - 24) = 1;
      }
      *(_DWORD *)(a2 - 8) = v15;
      *(unsigned char *)(a2 - 4) = v16;
      return sub_10125B160(v8, result + 72, a3, 0x8E38E38E38E38E39 * ((result + 72 - v8) >> 3));
    }
  }
  return result;
}

uint64_t sub_10125B030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    a1 += 72 * v5 + 72;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3 && sub_1001C6E78(a1, a1 + 72))
    {
      a1 += 72;
      uint64_t v5 = v10;
    }
    long long v11 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a1;
    *(_OWORD *)(v8 + 16) = v11;
    if (*(unsigned char *)(v8 + 32))
    {
      if (*(unsigned char *)(a1 + 32)) {
        *(void *)(v8 + 40) = *(void *)(a1 + 40);
      }
      else {
        *(unsigned char *)(v8 + 32) = 0;
      }
    }
    else if (*(unsigned char *)(a1 + 32))
    {
      *(void *)(v8 + 40) = *(void *)(a1 + 40);
      *(unsigned char *)(v8 + 32) = 1;
    }
    if (*(unsigned char *)(v8 + 48))
    {
      if (*(unsigned char *)(a1 + 48)) {
        *(void *)(v8 + 56) = *(void *)(a1 + 56);
      }
      else {
        *(unsigned char *)(v8 + 48) = 0;
      }
    }
    else if (*(unsigned char *)(a1 + 48))
    {
      *(void *)(v8 + 56) = *(void *)(a1 + 56);
      *(unsigned char *)(v8 + 48) = 1;
    }
    int v12 = *(_DWORD *)(a1 + 64);
    *(unsigned char *)(v8 + 68) = *(unsigned char *)(a1 + 68);
    *(_DWORD *)(v8 + 64) = v12;
  }
  while (v5 <= v7);
  return a1;
}

BOOL sub_10125B160(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    BOOL v5 = result;
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = result + 72 * v6;
    uint64_t v8 = a2 - 72;
    uint64_t result = sub_1001C6E78(v7, a2 - 72);
    if (result)
    {
      long long v9 = *(_OWORD *)(a2 - 56);
      long long v15 = *(_OWORD *)(a2 - 72);
      long long v16 = v9;
      char v17 = 0;
      if (*(unsigned char *)(a2 - 40))
      {
        uint64_t v18 = *(void *)(a2 - 32);
        char v17 = 1;
      }
      char v19 = 0;
      if (*(unsigned char *)(a2 - 24))
      {
        uint64_t v20 = *(void *)(a2 - 16);
        char v19 = 1;
      }
      int v21 = *(_DWORD *)(a2 - 8);
      char v22 = *(unsigned char *)(a2 - 4);
      do
      {
        uint64_t v10 = v7;
        long long v11 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
        *(_OWORD *)(v8 + 16) = v11;
        if (*(unsigned char *)(v8 + 32))
        {
          if (*(unsigned char *)(v7 + 32)) {
            *(void *)(v8 + 40) = *(void *)(v7 + 40);
          }
          else {
            *(unsigned char *)(v8 + 32) = 0;
          }
        }
        else if (*(unsigned char *)(v7 + 32))
        {
          *(void *)(v8 + 40) = *(void *)(v7 + 40);
          *(unsigned char *)(v8 + 32) = 1;
        }
        if (*(unsigned char *)(v8 + 48))
        {
          if (*(unsigned char *)(v7 + 48)) {
            *(void *)(v8 + 56) = *(void *)(v7 + 56);
          }
          else {
            *(unsigned char *)(v8 + 48) = 0;
          }
        }
        else if (*(unsigned char *)(v7 + 48))
        {
          *(void *)(v8 + 56) = *(void *)(v7 + 56);
          *(unsigned char *)(v8 + 48) = 1;
        }
        uint64_t v13 = (_DWORD *)(v7 + 64);
        int v12 = *(_DWORD *)(v7 + 64);
        *(unsigned char *)(v8 + 68) = *(unsigned char *)(v7 + 68);
        *(_DWORD *)(v8 + 64) = v12;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = v5 + 72 * v6;
        uint64_t result = sub_1001C6E78(v7, (uint64_t)&v15);
        uint64_t v8 = v10;
      }
      while (result);
      long long v14 = v16;
      *(_OWORD *)uint64_t v10 = v15;
      *(_OWORD *)(v10 + 16) = v14;
      if (*(unsigned char *)(v10 + 32))
      {
        if (v17) {
          *(void *)(v10 + 40) = v18;
        }
        else {
          *(unsigned char *)(v10 + 32) = 0;
        }
      }
      else if (v17)
      {
        *(void *)(v10 + 40) = v18;
        *(unsigned char *)(v10 + 32) = 1;
      }
      if (*(unsigned char *)(v10 + 48))
      {
        if (v19) {
          *(void *)(v10 + 56) = v20;
        }
        else {
          *(unsigned char *)(v10 + 48) = 0;
        }
      }
      else if (v19)
      {
        *(void *)(v10 + 56) = v20;
        *(unsigned char *)(v10 + 48) = 1;
      }
      *uint64_t v13 = v21;
      *(unsigned char *)(v10 + 68) = v22;
    }
  }
  return result;
}

void sub_10125B3B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10125B468(_Unwind_Exception *a1)
{
}

void sub_10125B480()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10125B528(_Unwind_Exception *a1)
{
}

void sub_10125B540()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10125B5C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10125B650(_Unwind_Exception *a1)
{
}

void sub_10125B668()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DAF148;
      v0[3] = unk_101DAF158;
      v0[4] = xmmword_101DAF168;
      v0[0] = xmmword_101DAF128;
      v0[1] = unk_101DAF138;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10125B748(_Unwind_Exception *a1)
{
}

uint64_t sub_10125B760()
{
  sub_100134750(&qword_102486860, "IndoorLocationProvider");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102486860, (void *)&_mh_execute_header);
}

int8x8_t sub_10125BA3C(unsigned __int16 *a1, uint64_t a2)
{
  *(_WORD *)(a2 + 2) = bswap32(a1[1]) >> 16;
  *(_WORD *)a2 = bswap32(*a1) >> 16;
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 2));
  *(int8x8_t *)(a2 + 4) = result;
  return result;
}

int8x16_t sub_10125BA6C(unsigned __int16 *a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)a1;
  long long v3 = *((_OWORD *)a1 + 1);
  long long v4 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  long long v5 = *((_OWORD *)a1 + 4);
  long long v6 = *((_OWORD *)a1 + 5);
  long long v7 = *((_OWORD *)a1 + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  long long v8 = *((_OWORD *)a1 + 8);
  long long v9 = *((_OWORD *)a1 + 9);
  long long v10 = *((_OWORD *)a1 + 10);
  *(_OWORD *)(a2 + 172) = *(_OWORD *)(a1 + 86);
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 160) = v10;
  *(_OWORD *)(a2 + 128) = v8;
  *(_WORD *)(a2 + 2) = bswap32(a1[1]) >> 16;
  *(_WORD *)a2 = bswap32(*a1) >> 16;
  *(int8x16_t *)(a2 + 20) = vrev32q_s8(*(int8x16_t *)(a1 + 10));
  int8x16_t result = vrev32q_s8(*(int8x16_t *)(a1 + 2));
  *(int8x16_t *)(a2 + 4) = result;
  unsigned int v12 = bswap32(*((_DWORD *)a1 + 44));
  unint64_t v13 = bswap64(*((void *)a1 + 5));
  *(_DWORD *)(a2 + 36) = bswap32(*((_DWORD *)a1 + 9));
  *(_DWORD *)(a2 + 176) = v12;
  *(void *)(a2 + 40) = v13;
  return result;
}

uint64_t sub_10125BB04(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v8 = *(double *)(a2 + 76);
  double v9 = *(double *)(a2 + 20);
  double v10 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1) / 20.0;
  double v11 = fmin(fmax(v10, (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1) / 20.0), 0.01);
  double v12 = *(double *)(a2 + 4);
  double v13 = v12 - sub_10013DAC0(a1 + 48);
  double v14 = *(double *)(a2 + 12);
  double v15 = v14 - sub_10013DA9C(a1 + 48);
  BOOL v16 = v13 >= -v11 && v13 <= v11 + (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
  double v17 = a4 - v8;
  BOOL v18 = v15 >= -v11 && v15 <= v11 + (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  BOOL v19 = v17 < a3 && v9 > 0.0;
  if (v19 && *(double *)(a2 + 20) <= 3000.0) {
    uint64_t v20 = v16 & v18;
  }
  else {
    uint64_t v20 = 0;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A310);
  }
  int v21 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    double v22 = *(double *)(a2 + 20);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
    int v23 = SBYTE1(v42);
    uint64_t v24 = (void **)__p;
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
    *(_DWORD *)buf = 67242243;
    int v54 = v20;
    p_p = &__p;
    __int16 v55 = 1026;
    if (v23 < 0) {
      p_p = v24;
    }
    BOOL v56 = v16;
    __int16 v57 = 1026;
    BOOL v58 = v18;
    __int16 v59 = 1026;
    BOOL v60 = v19;
    __int16 v61 = 1026;
    BOOL v62 = v9 > 0.0;
    __int16 v63 = 1026;
    BOOL v64 = v17 < a3;
    __int16 v65 = 1026;
    BOOL v66 = v22 <= 3000.0;
    __int16 v67 = 2081;
    uint64_t v68 = p_p;
    __int16 v69 = 2050;
    uint64_t v70 = v25;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "@TileDl, isCurrent, %{public}d, inside, %{public}d, %{public}d, locknown, %{public}d, %{public}d, %{public}d, %{public}d, tile, %{private}s, delta, %{public}.02f", buf, 0x40u);
    if (SBYTE1(v42) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A310);
    }
    double v28 = *(double *)(a2 + 20);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(v34, a1);
    int v29 = v35;
    uint64_t v30 = (void **)v34[0];
    (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
    LODWORD(__p) = 67242243;
    HIDWORD(__p) = v20;
    id v32 = v34;
    __int16 v37 = 1026;
    if (v29 < 0) {
      id v32 = v30;
    }
    BOOL v38 = v16;
    __int16 v39 = 1026;
    BOOL v40 = v18;
    __int16 v41 = 1026;
    BOOL v42 = v19;
    __int16 v43 = 1026;
    BOOL v44 = v9 > 0.0;
    __int16 v45 = 1026;
    BOOL v46 = v17 < a3;
    __int16 v47 = 1026;
    BOOL v48 = v28 <= 3000.0;
    __int16 v49 = 2081;
    unsigned int v50 = v32;
    __int16 v51 = 2050;
    uint64_t v52 = v31;
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTilesManagerUtility::isCurrentTile(const CLTileFile *, CFTimeInterval, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  return v20;
}

void sub_10125C024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10125C05C(uint64_t a1, double a2)
{
  return a2 - *(double *)(a1 + 76) <= 1800.0 && *(double *)(a1 + 20) > 0.0;
}

uint64_t sub_10125C084(int a1, unsigned int a2)
{
  if (a1) {
    return 1;
  }
  else {
    return a2;
  }
}

void sub_10125C090(int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
    case 7:
    case 8:
      operator new();
    case 9:
      operator new();
    case 10:
      operator new();
    case 11:
      operator new();
    case 12:
      operator new();
    case 13:
      sub_101AA9DD8();
      abort_report_np();
      __break(1u);
      goto LABEL_23;
    default:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A310);
      }
      long long v3 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        int v6 = a1;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "TileMgr, failed to allocate a tile for type, %{public}d, #CloneMe", buf, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
LABEL_23:
      }
        dispatch_once(&qword_1024193A0, &stru_10231A310);
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static std::unique_ptr<CLTileFile> CLTilesManagerUtility::allocateTile(CLTilesManager_Type::TileType, CLTileDownloadPolicy *)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
      return;
  }
}

void sub_10125C468(_Unwind_Exception *exception_object)
{
  void *v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10125C590(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486900, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486900))
  {
    sub_10105E66C("([0-9]{8})", (const void **)&unk_1024868A8, __p);
    sub_101032120((std::locale *)&unk_1024868C0, (uint64_t)__p, 0);
  }
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  char v41 = 0;
  uint64_t v42 = 0;
  *(_OWORD *)__p = 0u;
  memset(v34, 0, sizeof(v34));
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (sub_101037FEC(v3, v3 + v2, (uint64_t)__p, (uint64_t)&unk_1024868C0, 0))
  {
    int v4 = 0;
    int v5 = 1;
  }
  else
  {
    int v6 = sub_101066430();
    int v7 = *(char *)(a1 + 23);
    BOOL v8 = v7 < 0;
    if (v7 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    if (v8) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v11 = *((char *)v6 + 23);
    BOOL v12 = v11 < 0;
    if (v11 >= 0) {
      double v13 = v6;
    }
    else {
      double v13 = (void *)*v6;
    }
    uint64_t v14 = *((unsigned __int8 *)v6 + 23);
    if (v12) {
      uint64_t v14 = v6[1];
    }
    uint64_t v15 = v9 - 1;
    BOOL v16 = (char *)v13 - 1;
    while (v10 && v14)
    {
      int v17 = *(unsigned __int8 *)(v15 + v10);
      int v18 = v16[v14];
      --v10;
      --v14;
      if (v17 != v18) {
        goto LABEL_25;
      }
    }
    if (!v14)
    {
LABEL_42:
      int v5 = 0;
      int v4 = 0;
      goto LABEL_43;
    }
LABEL_25:
    BOOL v19 = sub_101048388();
    int v20 = *(char *)(a1 + 23);
    BOOL v21 = v20 < 0;
    if (v20 >= 0) {
      uint64_t v22 = a1;
    }
    else {
      uint64_t v22 = *(void *)a1;
    }
    uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
    if (v21) {
      uint64_t v23 = *(void *)(a1 + 8);
    }
    int v24 = *((char *)v19 + 23);
    BOOL v25 = v24 < 0;
    if (v24 >= 0) {
      char v26 = v19;
    }
    else {
      char v26 = (void *)*v19;
    }
    uint64_t v27 = *((unsigned __int8 *)v19 + 23);
    if (v25) {
      uint64_t v27 = v19[1];
    }
    uint64_t v28 = v22 - 1;
    int v29 = (char *)v26 - 1;
    while (v23 && v27)
    {
      int v30 = *(unsigned __int8 *)(v28 + v23);
      int v31 = v29[v27];
      --v23;
      --v27;
      if (v30 != v31) {
        goto LABEL_41;
      }
    }
    if (!v27) {
      goto LABEL_42;
    }
LABEL_41:
    int v5 = 0;
    int v4 = 1;
  }
LABEL_43:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v5 | (v4 << 8);
}

void sub_10125C79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_102486900);
  _Unwind_Resume(a1);
}

BOOL sub_10125C7E4(uint64_t a1, const void **a2)
{
  unsigned __int16 v4 = sub_10125C590(a1);
  if (v4 < 0x100u) {
    return v4 != 0;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  int v7 = &v15;
  sub_1001110E4((uint64_t)&v15, v6 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a1 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a1;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a1 + 8);
  }
  BOOL v12 = std::string::append(&v15, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v17 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  sub_1004BEB14((const char *)v14);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_10125C908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10125C938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v34 = *(_OWORD *)(a1 + 48);
  uint64_t v35 = *(void *)(a1 + 64);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v37 = *(void *)(a1 + 88);
  }
  size_t v6 = (uint64_t **)(a2 + 184);
  if (!sub_10013D858(a2 + 184, (unsigned int *)&v34)) {
    goto LABEL_39;
  }
  uint64_t v7 = sub_100144000(a2 + 184, (unsigned int *)&v34);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 31);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = *(unsigned __int8 *)(v7 + 31);
  }
  else {
    uint64_t v10 = *(void *)(v7 + 16);
  }
  uint64_t v11 = *(unsigned __int8 *)(a1 + 31);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if (v10 != v11) {
    goto LABEL_20;
  }
  long long v13 = (const void **)(v7 + 8);
  BOOL v16 = *(unsigned __int8 **)(a1 + 8);
  std::string v15 = (unsigned __int8 *)(a1 + 8);
  uint64_t v14 = v16;
  if (v12 >= 0) {
    int64_t v17 = v15;
  }
  else {
    int64_t v17 = v14;
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v17, *(void *)(v7 + 16)))
    {
LABEL_20:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A310);
      }
      int v18 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a2 + 31) >= 0) {
          uint64_t v19 = a2 + 8;
        }
        else {
          uint64_t v19 = *(void *)(a2 + 8);
        }
        double v20 = sub_10013DAC0((uint64_t)&v34);
        double v21 = sub_10013DA9C((uint64_t)&v34);
        uint64_t v22 = sub_10014D19C(a2 + 184);
        *(_DWORD *)buf = 136447235;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v50 = 2049;
        double v51 = v20;
        __int16 v52 = 2049;
        double v53 = v21;
        __int16 v54 = 2082;
        uint64_t v55 = a3;
        __int16 v56 = 2050;
        uint64_t v57 = v22;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "@TileList, %{public}s, duplicate, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A310);
        }
        uint64_t v27 = *(void *)(a2 + 8);
        uint64_t v26 = a2 + 8;
        uint64_t v25 = v27;
        if (*(char *)(v26 + 23) < 0) {
          uint64_t v26 = v25;
        }
        double v28 = sub_10013DAC0((uint64_t)&v34);
        double v29 = sub_10013DA9C((uint64_t)&v34);
        uint64_t v30 = sub_10014D19C((uint64_t)v6);
        *(_DWORD *)char v40 = 136447235;
        *(void *)&v40[4] = v26;
        __int16 v41 = 2049;
        double v42 = v28;
        __int16 v43 = 2049;
        double v44 = v29;
        __int16 v45 = 2082;
        uint64_t v46 = a3;
        __int16 v47 = 2050;
        uint64_t v48 = v30;
        int v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTilesManagerUtility::deleteIfDuplicate(CLTileFile *, CLTilesSet &, const char *)", "%s\n", v31);
        if (v31 != buf) {
          free(v31);
        }
      }
      sub_101048104(v8);
      goto LABEL_38;
    }
  }
  else if (*(unsigned char *)(v7 + 31))
  {
    while (*(unsigned __int8 *)v13 == *v17)
    {
      long long v13 = (const void **)((char *)v13 + 1);
      ++v17;
      if (!--v9) {
        goto LABEL_29;
      }
    }
    goto LABEL_20;
  }
LABEL_29:
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A310);
  }
  uint64_t v23 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(buf, v8);
    int v24 = v52 >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)char v40 = 136380675;
    *(void *)&v40[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe", v40, 0xCu);
    if (SHIBYTE(v52) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A310);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(v40, v8);
    if (v43 >= 0) {
      id v32 = v40;
    }
    else {
      id v32 = *(unsigned char **)v40;
    }
    int v38 = 136380675;
    uint64_t v39 = v32;
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v43) < 0) {
      operator delete(*(void **)v40);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "static void CLTilesManagerUtility::deleteIfDuplicate(CLTileFile *, CLTilesSet &, const char *)", "%s\n", v33);
    if (v33 != buf) {
      free(v33);
    }
  }
LABEL_38:
  sub_1008B3DC4(v6, (unsigned int *)&v34);
LABEL_39:
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)__p);
  }
}

void sub_10125CEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10125CEFC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10125CF2C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10125CF98()
{
  sub_100134750(qword_1024868A8, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024868A8, (void *)&_mh_execute_header);
}

uint64_t sub_10125CFF8()
{
  uint64_t result = sub_1009EC0A8();
  if (result)
  {
    uint64_t result = sub_100A08A84();
    if (result) {
      operator new();
    }
  }
  return result;
}

void sub_10125D098()
{
}

uint64_t sub_10125D0BC()
{
  if (qword_102486908 != -1) {
    dispatch_once(&qword_102486908, &stru_10231A350);
  }
  return qword_10248B3B0;
}

void *sub_10125D104(void *a1)
{
  *a1 = off_10231A380;
  uint64_t v2 = a1[10];
  a1[10] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_1009D1DE4(a1);
}

void sub_10125D188(void *a1)
{
  sub_10125D104(a1);

  operator delete();
}

float sub_10125D1C0(uint64_t a1, float32x2_t *a2)
{
  float32x2_t v2 = *a2;
  *(float64x2_t *)(a1 + 16) = vcvtq_f64_f32(a2[1]);
  float v3 = a2[2].f32[1];
  *(double *)(a1 + 32) = a2[2].f32[0];
  *(float32x2_t *)a1 = v2;
  *(double *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 40) = a2[3].i32[0];
  *(_DWORD *)(a1 + 44) = a2[3].i32[1];
  *(_DWORD *)(a1 + 48) = a2[4].i32[0];
  *(_DWORD *)(a1 + 52) = a2[4].i32[1];
  *(_DWORD *)(a1 + 56) = a2[5].i32[0];
  *(_DWORD *)(a1 + 60) = a2[5].i32[1];
  *(_DWORD *)(a1 + 64) = a2[6].i32[0];
  *(_DWORD *)(a1 + 68) = a2[6].i32[1];
  __int32 v4 = a2[7].i32[1];
  *(_DWORD *)(a1 + 72) = a2[7].i32[0];
  *(_WORD *)(a1 + 110) = 0;
  int v5 = a2[10].i8[0];
  if ((v5 + 1) >= 8) {
    int v5 = 0;
  }
  *(_DWORD *)(a1 + 76) = v5;
  __int16 v6 = a2[10].i16[1];
  *(unsigned char *)(a1 + 81) = (v6 & 0x10) != 0;
  *(unsigned char *)(a1 + 80) = (v6 & 8) != 0;
  *(unsigned char *)(a1 + 82) = HIBYTE(v6) & 1;
  *(_DWORD *)(a1 + 84) = v4;
  *(unsigned char *)(a1 + 88) = (v6 & 0x4000) != 0;
  *(unsigned char *)(a1 + 89) = (v6 & 0x40) != 0;
  float result = a2[8].f32[0];
  *(float *)(a1 + 96) = result;
  *(_DWORD *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 100) = a2[11].i8[0];
  *(_WORD *)(a1 + 110) = v6;
  *(unsigned char *)(a1 + 108) = a2[10].i8[1];
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_10125D298(int a1)
{
  if (a1 > 18)
  {
    if (a1 > 66)
    {
      if (a1 == 67) {
        return 10;
      }
      if (a1 == 143) {
        return 4;
      }
    }
    else
    {
      if (a1 == 19) {
        return 5;
      }
      if (a1 == 34) {
        return 9;
      }
    }
  }
  else if (a1 > 6)
  {
    if (a1 == 7) {
      return 2;
    }
    if (a1 == 15) {
      return 3;
    }
  }
  else
  {
    if (a1 == 2) {
      return 0;
    }
    if (a1 == 3) {
      return 1;
    }
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  float v3 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "No viable conversion for mode %{public}#x", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    __int32 v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static CLDeviceMotion::CLDeviceMotionNotification CLDeviceMotion::CLMotionTypeDeviceMotionModeToCLDeviceMotionNotification(const CLMotionTypeDeviceMotionMode)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 11;
}

uint64_t sub_10125D4E0(unsigned int a1)
{
  if (a1 < 0xB && ((0x63Fu >> a1) & 1) != 0) {
    return dword_101DAF378[a1];
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  float32x2_t v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    unsigned int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "No viable conversion for notification %{public}#x", buf, 8u);
  }
  BOOL v3 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static CLMotionTypeDeviceMotionMode CLDeviceMotion::CLDeviceMotionNotificationToCLMotionTypeDeviceMotionMode(const int)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10125D6B8(uint64_t a1, int *a2)
{
  int v3 = *a2;
  BOOL v4 = (*a2 - 7) > 0x3C || ((1 << (*a2 - 7)) & 0x1000000008001101) == 0;
  if (v4 && (v3 - 2) >= 2 && v3 != 143)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    int v12 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
    {
      int v13 = *a2;
      *(_DWORD *)buf = 67240192;
      int v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Returning.", buf, 8u);
    }
    BOOL v14 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v14) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419080 == -1)
    {
LABEL_34:
      std::string v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDeviceMotion::isModeValid(const CLMotionTypeDeviceMotionMode &) const", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return 0;
    }
LABEL_37:
    dispatch_once(&qword_102419080, &stru_10231A3C8);
    goto LABEL_34;
  }
  if ((v3 & 4) == 0) {
    goto LABEL_11;
  }
  if (!sub_100A68CE8())
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    uint64_t v9 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
    {
      int v10 = *a2;
      *(_DWORD *)buf = 67240192;
      int v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Compass not found. Returning.", buf, 8u);
    }
    BOOL v11 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419080 == -1) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  int v3 = *a2;
LABEL_11:
  if ((v3 & 2) != 0) {
    return 1;
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  int v5 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
  {
    int v6 = *a2;
    *(_DWORD *)buf = 67240192;
    int v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Couldn't do DeviceMotion without Gyro. Returning.", buf, 8u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 == -1) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  return result;
}

void sub_10125DACC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = sub_1000D3E78();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10125DB5C;
  v7[3] = &unk_1022B8680;
  v7[4] = a1;
  void v7[5] = a2;
  *(double *)&v7[6] = a3;
  sub_1009E8E94(v6, (uint64_t)v7);
}

uint64_t sub_10125DB5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  if (!v3) {
    sub_101AA9FA0(qword_102419080 == -1, v4, v5, v6, v7, v8, v9, v10, v17, v18, v19, v20, buf[0], *(void *)((char *)v22 + 4), *(void *)((char *)&v22[1] + 4), *(void *)((char *)&v22[2] + 4), *(void *)((char *)&v22[3] + 4), *(void *)((char *)&v22[4] + 4), *(void *)((char *)&v22[5] + 4),
  }
      *(void *)((char *)&v22[6] + 4),
      *(void *)((char *)&v22[7] + 4),
      *(void *)((char *)&v22[8] + 4),
      *(void *)((char *)&v22[9] + 4),
      *(void *)((char *)&v22[10] + 4),
      *(void *)((char *)&v22[11] + 4),
      *(void *)((char *)&v22[12] + 4),
      *(void *)((char *)&v22[13] + 4),
      *(void *)((char *)&v22[14] + 4));
  BOOL v11 = (void *)v3;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  int v12 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v22[0] = [[[v11 description] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    [objc_msgSend(v11, "description") UTF8String];
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotion::addDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  id v13 = [v11 mode];
  *(_DWORD *)buf = v13;
  uint64_t result = sub_10125D6B8((uint64_t)v13, (int *)buf);
  if (result)
  {
    int v15 = sub_10125D298((int)[v11 mode]);
    return sub_1009D1EC4(v2, v15, *(void *)(a1 + 40), *(double *)(a1 + 48));
  }
  return result;
}

void sub_10125DDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10125DE20;
  v5[3] = &unk_1022B8660;
  v5[4] = a1;
  v5[5] = a2;
  sub_1009E8E94(v4, (uint64_t)v5);
}

void sub_10125DE20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  if (!v3) {
    sub_101AAA118(qword_102419080 == -1, v4, v5, v6, v7, v8, v9, v10, v16, v17, v18, v19, buf[0], *(void *)((char *)v21 + 4), *(void *)((char *)&v21[1] + 4), *(void *)((char *)&v21[2] + 4), *(void *)((char *)&v21[3] + 4), *(void *)((char *)&v21[4] + 4), *(void *)((char *)&v21[5] + 4),
  }
      *(void *)((char *)&v21[6] + 4),
      *(void *)((char *)&v21[7] + 4),
      *(void *)((char *)&v21[8] + 4),
      *(void *)((char *)&v21[9] + 4),
      *(void *)((char *)&v21[10] + 4),
      *(void *)((char *)&v21[11] + 4),
      *(void *)((char *)&v21[12] + 4),
      *(void *)((char *)&v21[13] + 4),
      *(void *)((char *)&v21[14] + 4));
  BOOL v11 = (void *)v3;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  int v12 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v21[0] = [[[v11 description] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    [objc_msgSend(v11, "description") UTF8String];
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotion::removeDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *)_block_invoke", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  id v13 = [v11 mode];
  *(_DWORD *)buf = v13;
  if (sub_10125D6B8((uint64_t)v13, (int *)buf))
  {
    int v14 = sub_10125D298((int)[v11 mode]);
    sub_1009D26C4(v2, v14, *(void *)(a1 + 40));
  }
}

BOOL sub_10125E060(uint64_t a1, int *a2)
{
  BOOL result = 0;
  int v4 = *a2;
  if (*a2 > 18)
  {
    if (v4 <= 66)
    {
      if (v4 == 19)
      {
        uint64_t v5 = *(void *)(a1 + 32);
        if (!v5) {
          return 0;
        }
      }
      else
      {
        if (v4 != 34) {
          return result;
        }
        uint64_t v5 = *(void *)(a1 + 48);
        if (!v5) {
          return 0;
        }
      }
LABEL_30:
      BOOL v7 = *(void *)(v5 + 56) == 0;
      return !v7;
    }
    if (v4 == 67)
    {
LABEL_19:
      uint64_t v5 = *(void *)(a1 + 64);
      if (!v5) {
        return 0;
      }
      goto LABEL_30;
    }
    if (v4 != 143) {
      return result;
    }
LABEL_16:
    uint64_t v6 = *(void *)(a1 + 72);
    if (!v6 || !*(void *)(v6 + 56)) {
      return 0;
    }
    BOOL v7 = *(unsigned char *)(a1 + 28) == 0;
    return !v7;
  }
  if (v4 <= 6)
  {
    if (v4 == 2)
    {
      if ((sub_1000A16E8() & 0x80) != 0)
      {
        uint64_t v5 = *(void *)(a1 + 56);
        if (!v5) {
          return 0;
        }
      }
      else
      {
        uint64_t v5 = *(void *)(a1 + 40);
        if (!v5) {
          return 0;
        }
      }
      goto LABEL_30;
    }
    if (v4 != 3) {
      return result;
    }
    goto LABEL_19;
  }
  if (v4 == 7)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (v8 && *(void *)(v8 + 56)) {
      return *(unsigned char *)(a1 + 28) == 0;
    }
    return 0;
  }
  if (v4 == 15) {
    goto LABEL_16;
  }
  return result;
}

void sub_10125E178(void *a1, int a2, uint64_t *a3)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  uint64_t v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *a3;
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&buf[8] = 2050;
    *(void *)&buf[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLDeviceMotion::minimumUpdateIntervalChanged,notification,%{public}d,minimumUpdateInterval,%{public}f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    double v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  uint64_t v8 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    double v9 = sub_1009D3328((uint64_t)a1, 0);
    double v10 = sub_1009D3328((uint64_t)a1, 9);
    double v11 = sub_1009D3328((uint64_t)a1, 1);
    double v12 = sub_1009D3328((uint64_t)a1, 10);
    double v13 = sub_1009D3328((uint64_t)a1, 2);
    double v14 = sub_1009D3328((uint64_t)a1, 3);
    double v15 = sub_1009D3328((uint64_t)a1, 4);
    double v16 = sub_1009D3328((uint64_t)a1, 5);
    *(_DWORD *)buf = 134350848;
    *(double *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&unsigned char buf[14] = v10;
    __int16 v32 = 2050;
    double v33 = v11;
    __int16 v34 = 2050;
    double v35 = v12;
    __int16 v36 = 2050;
    double v37 = v13;
    __int16 v38 = 2050;
    double v39 = v14;
    __int16 v40 = 2050;
    double v41 = v15;
    __int16 v42 = 2050;
    double v43 = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "minimumUpdateInterval GyroOnly:%{public}f, 3AxisDynamicGyro:%{public}f, 6Axis:%{public}f, 6AxisThrottledGyro:%{public}f, 9Axis:%{public}f, 9AxisWithNorthReference:%{public}f, 9AxisWithTrueNorthReference:%{public}f, BuildGYTT:%{public}f", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    sub_1009D3328((uint64_t)a1, 0);
    sub_1009D3328((uint64_t)a1, 9);
    sub_1009D3328((uint64_t)a1, 1);
    sub_1009D3328((uint64_t)a1, 10);
    sub_1009D3328((uint64_t)a1, 2);
    sub_1009D3328((uint64_t)a1, 3);
    sub_1009D3328((uint64_t)a1, 4);
    sub_1009D3328((uint64_t)a1, 5);
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v30);
    if (v30 != buf) {
      free(v30);
    }
  }
  switch(a2)
  {
    case 0:
      uint64_t v27 = a1[7];
      if (v27)
      {
        *(void *)buf = sub_1009D3328((uint64_t)a1, 0);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v27 + 16))(v27, buf);
      }
      uint64_t v28 = a1[5];
      if (v28) {
        goto LABEL_47;
      }
      break;
    case 1:
    case 10:
      if (a1[8])
      {
        double v23 = sub_1009D3328((uint64_t)a1, 1);
        double v24 = sub_1009D3328((uint64_t)a1, 10);
        if (v23 <= 0.0) {
          double v25 = 1.79769313e308;
        }
        else {
          double v25 = v23;
        }
        if (v24 <= 0.0) {
          double v24 = 1.79769313e308;
        }
        if (v24 >= v25) {
          double v24 = v25;
        }
        if (v24 == 1.79769313e308) {
          double v24 = 0.0;
        }
        *(double *)buf = v24;
        uint64_t v22 = a1[8];
        goto LABEL_39;
      }
      break;
    case 2:
    case 3:
    case 4:
      if (a1[9])
      {
        double v17 = sub_1009D3328((uint64_t)a1, 2);
        double v18 = sub_1009D3328((uint64_t)a1, 3);
        if (v17 <= 0.0) {
          double v19 = 1.79769313e308;
        }
        else {
          double v19 = v17;
        }
        if (v18 <= 0.0) {
          double v18 = 1.79769313e308;
        }
        if (v18 >= v19) {
          double v20 = v19;
        }
        else {
          double v20 = v18;
        }
        double v21 = sub_1009D3328((uint64_t)a1, 4);
        if (v21 <= 0.0) {
          double v21 = 1.79769313e308;
        }
        if (v21 >= v20) {
          double v21 = v20;
        }
        if (v21 == 1.79769313e308) {
          double v21 = 0.0;
        }
        *(double *)buf = v21;
        uint64_t v22 = a1[9];
LABEL_39:
        uint64_t v26 = *(void (**)(void))(*(void *)v22 + 16);
        goto LABEL_48;
      }
      break;
    case 5:
      uint64_t v28 = a1[4];
      if (v28) {
        goto LABEL_47;
      }
      break;
    case 9:
      uint64_t v28 = a1[6];
      if (v28)
      {
LABEL_47:
        uint64_t v26 = *(void (**)(void))(*(void *)v28 + 16);
LABEL_48:
        v26();
      }
      break;
    default:
      return;
  }
}

void sub_10125E804(void *a1, unsigned int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = &qword_102419000;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  uint64_t v8 = &qword_102419000;
  double v9 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&buf[8] = 2050;
    *(void *)&buf[10] = a3;
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLDeviceMotion::numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    *(_DWORD *)double v44 = 67240704;
    *(_DWORD *)&v44[4] = a2;
    *(_WORD *)&v44[8] = 2050;
    *(void *)&v44[10] = a3;
    *(_WORD *)&v44[18] = 2050;
    *(void *)&v44[20] = a4;
    LODWORD(v39) = 28;
    double v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  double v10 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    uint64_t v42 = sub_1009D2F88((uint64_t)a1, 0);
    uint64_t v11 = sub_1009D2F88((uint64_t)a1, 9);
    uint64_t v12 = sub_1009D2F88((uint64_t)a1, 1);
    uint64_t v13 = sub_1009D2F88((uint64_t)a1, 10);
    uint64_t v14 = sub_1009D2F88((uint64_t)a1, 2);
    unint64_t v15 = a4;
    unsigned int v16 = a2;
    uint64_t v17 = sub_1009D2F88((uint64_t)a1, 3);
    uint64_t v18 = sub_1009D2F88((uint64_t)a1, 4);
    uint64_t v19 = sub_1009D2F88((uint64_t)a1, 5);
    *(_DWORD *)buf = 134350848;
    *(void *)&uint8_t buf[4] = v42;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v11;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(void *)&buf[24] = v12;
    __int16 v50 = 2050;
    uint64_t v51 = v13;
    __int16 v52 = 2050;
    uint64_t v53 = v14;
    uint64_t v8 = &qword_102419000;
    __int16 v54 = 2050;
    uint64_t v55 = v17;
    a2 = v16;
    a4 = v15;
    __int16 v56 = 2050;
    uint64_t v57 = v18;
    uint64_t v7 = &qword_102419000;
    __int16 v58 = 2050;
    uint64_t v59 = v19;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "numberOfClients GyroOnly:%{public}zd, 3AxisDynamicGyro:%{public}zd, 6Axis:%{public}zd, 6AxisThrottledGyro:%{public}zd, 9Axis:%{public}zd, 9AxisWithNorthReference:%{public}zd, 9AxisWithTrueNorthReference:%{public}zd, BuildGYTT:%{public}zd", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    HIDWORD(v41) = a2;
    uint64_t v40 = a4;
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    *(_DWORD *)double v44 = 134350848;
    *(void *)&v44[4] = sub_1009D2F88((uint64_t)a1, 0);
    *(_WORD *)&v44[12] = 2050;
    *(void *)&v44[14] = sub_1009D2F88((uint64_t)a1, 9);
    *(_WORD *)&v44[22] = 2050;
    *(void *)&v44[24] = sub_1009D2F88((uint64_t)a1, 1);
    *(_WORD *)__int16 v45 = 2050;
    *(void *)&v45[2] = sub_1009D2F88((uint64_t)a1, 10);
    *(_WORD *)&v45[10] = 2050;
    *(void *)&v45[12] = sub_1009D2F88((uint64_t)a1, 2);
    *(_WORD *)&v45[20] = 2050;
    *(void *)&v45[22] = sub_1009D2F88((uint64_t)a1, 3);
    *(_WORD *)&v45[30] = 2050;
    uint64_t v46 = sub_1009D2F88((uint64_t)a1, 4);
    LOWORD(v47) = 2050;
    *(void *)((char *)&v47 + 2) = sub_1009D2F88((uint64_t)a1, 5);
    LODWORD(v39) = 82;
    __int16 v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v36);
    if (v36 != buf) {
      free(v36);
    }
    uint64_t v7 = &qword_102419000;
    uint64_t v8 = &qword_102419000;
  }
  if (a2 == 10) {
    unsigned int v20 = 1;
  }
  else {
    unsigned int v20 = a2;
  }
  uint64_t v21 = sub_1009D2F88((uint64_t)a1, 2);
  uint64_t v22 = sub_1009D2F88((uint64_t)a1, 3);
  uint64_t v23 = sub_1009D2F88((uint64_t)a1, 4);
  uint64_t v24 = sub_1000A16E8();
  if (v20 > 9) {
    goto LABEL_34;
  }
  if (((1 << v20) & 0x223) == 0)
  {
    char v32 = v24;
    if (((1 << v20) & 0xC) != 0)
    {
LABEL_20:
      uint64_t v33 = v22 + v21 + v23;
      if (a3 < a4)
      {
        if (v33 == 1)
        {
          *(_DWORD *)buf = sub_10125D4E0(v20);
          sub_10125F384((uint64_t)a1, (int *)buf);
        }
        if (!*(void *)(a1[9] + 56)) {
          sub_101AAA290(v24, v25, v26, v27, v28, v29, v30, v31, v38, v39, v40, v41, v42, a3, *(uint64_t *)v44, *(uint64_t *)&v44[8], *(uint64_t *)&v44[16], *(uint64_t *)&v44[24], *(uint64_t *)v45,
        }
            *(uint64_t *)&v45[8],
            *(uint64_t *)&v45[16],
            *(uint64_t *)&v45[24],
            v46,
            v47,
            *((uint64_t *)&v47 + 1),
            v48,
            *(uint64_t *)buf,
            *(uint64_t *)&buf[8]);
        return;
      }
      if (v33 != ((v32 & 0x10) == 0)) {
        return;
      }
LABEL_33:
      *(_DWORD *)buf = sub_10125D4E0(v20);
      sub_10125FABC(a1, (int *)buf);
      return;
    }
    if (v20 == 4)
    {
      if (a3 || a4 != 1)
      {
        if (a3 == 1 && !a4) {
          sub_10125F1CC((uint64_t)a1);
        }
      }
      else
      {
        uint64_t v24 = (uint64_t)sub_10125EF8C((uint64_t)a1);
      }
      goto LABEL_20;
    }
LABEL_34:
    if (v7[16] != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    __int16 v34 = v8[17];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, can't process client change", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v7[16] != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
      double v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v37);
      if (v37 != buf) {
        free(v37);
      }
    }
    return;
  }
  if (!a3 && a4 == 1)
  {
    *(_DWORD *)buf = sub_10125D4E0(v20);
    sub_10125F384((uint64_t)a1, (int *)buf);
    return;
  }
  if (a3 == 1 && !a4) {
    goto LABEL_33;
  }
}

id sub_10125EF8C(uint64_t a1)
{
  if (!*(void *)(a1 + 80))
  {
    sub_1000D5BCC();
    sub_100DE37F4();
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  uint64_t v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Registering for geomagnetic model updates", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotion::registerForGeomagneticModelNotification()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(*(void *)(a1 + 80) + 16) register:*(void *)(*(void *)(a1 + 80) + 8) forNotification:0 registrationInfo:0];
}

double sub_10125F1CC(uint64_t a1)
{
  if (*(void *)(a1 + 80))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    uint64_t v2 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Unregistering for geomagnetic model updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotion::unregisterForGeomagneticModelNotification()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    [*(id *)(*(void *)(a1 + 80) + 16) unregister:*(void *)(*(void *)(a1 + 80) + 8) forNotification:0];
    double result = -1.0;
    *(_OWORD *)(a1 + 88) = xmmword_101D1C320;
  }
  return result;
}

void sub_10125F384(uint64_t a1, int *a2)
{
  int v4 = *a2;
  if ((*a2 & 4) != 0) {
    *(unsigned char *)(a1 + 28) = (*a2 & 8) != 0;
  }
  int v5 = v4 & 1;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  unsigned int v6 = v4 & 2;
  unsigned int v7 = v4 & 4;
  unsigned int v8 = v4 & 0x10;
  double v9 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *a2;
    int v11 = *(unsigned __int8 *)(a1 + 28);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = v10;
    LOWORD(v37) = 1026;
    *(_DWORD *)((char *)&v37 + 2) = v5;
    HIWORD(v37) = 1026;
    unsigned int v38 = v6 >> 1;
    __int16 v39 = 1026;
    unsigned int v40 = v7 >> 2;
    __int16 v41 = 1026;
    int v42 = v11;
    __int16 v43 = 1026;
    unsigned int v44 = v8 >> 4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Starting device motion, mode=%{public}#x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d", buf, 0x26u);
  }
  uint64_t v12 = sub_10013D1A0(115, 2);
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    int v22 = *a2;
    int v23 = *(unsigned __int8 *)(a1 + 28);
    v25[0] = 67241472;
    v25[1] = v22;
    __int16 v26 = 1026;
    int v27 = v5;
    __int16 v28 = 1026;
    unsigned int v29 = v6 >> 1;
    __int16 v30 = 1026;
    unsigned int v31 = v7 >> 2;
    __int16 v32 = 1026;
    int v33 = v23;
    __int16 v34 = 1026;
    unsigned int v35 = v8 >> 4;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    uint64_t v12 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotion::enableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if (!sub_10125D6B8(v12, a2)) {
    return;
  }
  LOBYTE(v25[0]) = 0;
  uint64_t v13 = sub_1000D3E78();
  sub_10006B564(v13, buf);
  char v14 = sub_1000D2988(*(uint64_t *)buf, "LogSensorFusion", (BOOL *)v25);
  if (v37) {
    sub_1000DB0A0(v37);
  }
  if ((v14 & 1) == 0) {
    LOBYTE(v25[0]) = 0;
  }
  int v15 = *a2;
  if (*a2 > 18)
  {
    if (v15 <= 66)
    {
      if (v15 == 19)
      {
        unsigned int v16 = *(void **)(a1 + 32);
        if (!v16) {
          operator new();
        }
      }
      else
      {
        if (v15 != 34) {
          return;
        }
        unsigned int v16 = *(void **)(a1 + 48);
        if (!v16) {
          operator new();
        }
        v16[9] = sub_10125FE98;
        v16[10] = a1;
      }
      goto LABEL_48;
    }
    if (v15 == 67) {
      goto LABEL_32;
    }
    if (v15 != 143) {
      return;
    }
LABEL_29:
    uint64_t v17 = *(void *)(a1 + 72);
    if (!v17)
    {
      if ((sub_1000A16E8() & 0x10) == 0) {
        operator new();
      }
      operator new();
    }
    (*(void (**)(uint64_t, void))(*(void *)v17 + 24))(v17, *(unsigned __int8 *)(a1 + 28));
    uint64_t v19 = *(void *)(a1 + 72);
    int v20 = sub_10125D298(*a2);
    *(void *)buf = sub_1009D3328(a1, v20);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v19 + 16))(v19, buf);
    unsigned int v16 = *(void **)(a1 + 72);
    goto LABEL_48;
  }
  if (v15 > 6)
  {
    if (v15 != 7 && v15 != 15) {
      return;
    }
    goto LABEL_29;
  }
  if (v15 != 2)
  {
    if (v15 != 3) {
      return;
    }
LABEL_32:
    uint64_t v18 = *(void *)(a1 + 64);
    if (!v18)
    {
      if ((sub_1000A16E8() & 8) == 0)
      {
        if ((sub_1000A16E8() & 0x10) == 0) {
          operator new();
        }
        operator new();
      }
      operator new();
    }
    int v21 = sub_10125D298(*a2);
    *(void *)buf = sub_1009D3328(a1, v21);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v18 + 16))(v18, buf);
    unsigned int v16 = *(void **)(a1 + 64);
LABEL_48:
    if ((void (*)(float32x2_t *, uint64_t, uint64_t))v16[7] != sub_10125FE84 || v16[8] != a1)
    {
      v16[7] = sub_10125FE84;
      v16[8] = a1;
      (*(void (**)(void *))(*v16 + 48))(v16);
    }
    return;
  }
  if ((sub_1000A16E8() & 0x80) != 0)
  {
    if (!*(void *)(a1 + 56)) {
      operator new();
    }
  }
  else if (!*(void *)(a1 + 40))
  {
    operator new();
  }
}

void sub_10125FA0C()
{
}

void sub_10125FABC(void *a1, int *a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_10231A3C8);
  }
  int v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    *(_DWORD *)buf = 67240192;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopping device motion, mode=%{public}#x", buf, 8u);
  }
  uint64_t v6 = sub_10013D1A0(115, 2);
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    uint64_t v6 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_10125D6B8(v6, a2))
  {
    int v7 = *a2;
    if (*a2 <= 18)
    {
      if (v7 <= 6)
      {
        if (v7 != 2)
        {
          if (v7 != 3) {
            goto LABEL_19;
          }
          goto LABEL_33;
        }
        sub_100103240();
        if ((sub_1000A16E8() & 0x80) != 0)
        {
          uint64_t v8 = a1[7];
          if (!v8) {
            return;
          }
        }
        else
        {
          uint64_t v8 = a1[5];
          if (!v8) {
            return;
          }
        }
LABEL_31:
        sub_10125FEAC(v8);
        return;
      }
      if (v7 != 7 && v7 != 15) {
        goto LABEL_19;
      }
LABEL_30:
      uint64_t v8 = a1[9];
      if (!v8) {
        return;
      }
      goto LABEL_31;
    }
    if (v7 > 66)
    {
      if (v7 == 67)
      {
LABEL_33:
        uint64_t v8 = a1[8];
        if (!v8) {
          return;
        }
        goto LABEL_31;
      }
      if (v7 == 143) {
        goto LABEL_30;
      }
    }
    else
    {
      if (v7 == 19)
      {
        uint64_t v8 = a1[4];
        if (!v8) {
          return;
        }
        goto LABEL_31;
      }
      if (v7 == 34)
      {
        uint64_t v8 = a1[6];
        if (!v8) {
          return;
        }
        goto LABEL_31;
      }
    }
LABEL_19:
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    double v9 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
    {
      int v10 = *a2;
      *(_DWORD *)buf = 67240192;
      int v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, unable to disable sensor fusion", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_10125FE84(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10125FE98(uint64_t a1, uint64_t a2)
{
  return sub_1000E01AC(a2, 6, a1, 8);
}

__n128 sub_10125FEAC(uint64_t a1)
{
  *(double *)v2.i64 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  float32x4_t v6 = 0uLL;
  unint64_t v5 = 0xBFF0000000000000;
  sub_100B9BEAC(&v6, v2);
  *(_DWORD *)double v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)&v9[4] = xmmword_101D1F280;
  *(void *)&v9[20] = 0x1FF00000000;
  *(_DWORD *)int v10 = 0;
  v10[4] = 0;
  *(void *)&v10[12] = 0;
  *(void *)(a1 + 96) = v5;
  if ((unint64_t *)(a1 + 96) != &v5) {
    *(float32x4_t *)(a1 + 104) = v6;
  }
  long long v3 = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 136) = v3;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 164) = *(_OWORD *)&v9[12];
  __n128 result = *(__n128 *)v10;
  *(_OWORD *)(a1 + 180) = *(_OWORD *)v10;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)&v10[16];
  return result;
}

void sub_10125FF9C(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  sub_10125D1C0((uint64_t)v9, a2);
  if (a3 <= 0xA)
  {
    if (((1 << a3) & 0x1C) != 0)
    {
      sub_1000E7BA0(a1, 2, (uint64_t)v9, 120);
      sub_1000E7BA0(a1, 3, (uint64_t)v9, 120);
      double v7 = *(double *)(a1 + 88);
      if (v7 >= 0.0)
      {
        float v8 = *(double *)(a1 + 96);
        sub_100A1D7C0((uint64_t)v10, v8, v7);
      }
      else
      {
        v10[22] = 1127481344;
      }
      uint64_t v5 = a1;
      uint64_t v6 = 4;
    }
    else if (((1 << a3) & 0x221) != 0)
    {
      uint64_t v5 = a1;
      uint64_t v6 = a3;
    }
    else
    {
      if (((1 << a3) & 0x402) == 0) {
        return;
      }
      sub_1000E7BA0(a1, 1, (uint64_t)v9, 120);
      uint64_t v5 = a1;
      uint64_t v6 = 10;
    }
    sub_1000E7BA0(v5, v6, (uint64_t)v9, 120);
  }
}

void sub_1012600BC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!*a2)
  {
    *(void *)(a4 + 96) = *(void *)(a3 + 40);
    *(void *)(a4 + 88) = *(void *)(a3 + 56);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_10231A3C8);
    }
    uint64_t v5 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a4 + 88);
      uint64_t v6 = *(void *)(a4 + 96);
      *(_DWORD *)buf = 134218240;
      uint64_t v10 = v6;
      __int16 v11 = 2048;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received geomagnetic model, declination,%f,timestamp,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_10231A3C8);
      }
      float v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLDeviceMotion::onGeomagneticModelNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &, void *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1012602A0(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_1012602D0(uint64_t a1, int a2)
{
  *(void *)sub_100475B50(a1, a2, 7, 1) = &off_10231A3F8;
  if ((sub_1000A16E8() & 0x80) != 0) {
    return a1;
  }
  sub_101AAA408();
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_10126035C(_Unwind_Exception *a1)
{
  sub_100475BA4(v1);
  _Unwind_Resume(a1);
}

void sub_101260378(void *a1)
{
  sub_100475BA4(a1);

  operator delete();
}

uint64_t sub_1012603B0(void *a1, int a2)
{
  sub_100103240();
  char v4 = sub_1007436AC();
  sub_100475B50((uint64_t)a1, a2, 5, v4);
  *a1 = &off_10231A460;
  if ((sub_1000A16E8() & 8) != 0) {
    return (uint64_t)a1;
  }
  sub_101AAA574();
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_101260450(_Unwind_Exception *a1)
{
  sub_100475BA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101260468(uint64_t a1, int a2)
{
  *(void *)sub_100475B50(a1, a2, 4, 1) = &off_10231A4C8;
  if ((sub_1000A16E8() & 0x10) != 0) {
    return a1;
  }
  sub_101AAA6E0();
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_1012604F4(_Unwind_Exception *a1)
{
  sub_100475BA4(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10126050C()
{
  uint64_t v1 = qword_102419088;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_101260540()
{
  uint64_t v1 = qword_102419088;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_101260560()
{
  float32x4_t v2 = *(NSObject **)(v0 + 136);
  return os_signpost_enabled(v2);
}

uint64_t sub_101260578(uint64_t a1)
{
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    if (*(char *)(a1 + i + 71) < 0) {
      operator delete(*(void **)(a1 + i + 48));
    }
  }
  return a1;
}

void sub_101260704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10069592C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101260720(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100134750(__p, "kCLConnectionMessageWorkoutEvent");
  char v6 = sub_10012E364(a1);
  char v7 = v6;
  if (SHIBYTE(v34) < 0)
  {
    operator delete(*(void **)__p);
    if ((v7 & 1) == 0) {
      return;
    }
  }
  else if ((v6 & 1) == 0)
  {
    return;
  }
  id v8 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v9 = a3[6];
  if (a3[7] != v9)
  {
    unint64_t v10 = a3[9];
    __int16 v11 = (void *)(v9 + 8 * (v10 / 0x11));
    uint64_t v12 = (double *)(*v11 + 232 * (v10 % 0x11));
    unint64_t v13 = *(void *)(v9 + 8 * ((a3[10] + v10) / 0x11)) + 232 * ((a3[10] + v10) % 0x11);
    while (v12 != (double *)v13)
    {
      id v14 = sub_101265CE8(v12, 1);
      [v8 addObject:v14];

      v12 += 29;
      if ((double *)((char *)v12 - *v11) == (double *)3944)
      {
        int v15 = (double *)v11[1];
        ++v11;
        uint64_t v12 = v15;
      }
    }
  }
  id v16 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a3];
  id v17 = [objc_alloc((Class)CMWorkoutOverview) initWithOverviewId:v16 workouts:v8];
  id v18 = sub_101265CE8((double *)a2, 0);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10231A600);
  }
  uint64_t v19 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a2 + 16);
    *(_DWORD *)long long __p = 134218498;
    *(void *)&__p[4] = v20;
    __int16 v32 = 2112;
    id v33 = v18;
    __int16 v34 = 2112;
    id v35 = v17;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "WorkoutSession, session update, event, %ld, workout, %@, overview, %@", __p, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v21 = *(void *)(a2 + 16);
    int v25 = 134218498;
    uint64_t v26 = v21;
    __int16 v27 = 2112;
    id v28 = v18;
    __int16 v29 = 2112;
    id v30 = v17;
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::onWorkoutSessionUpdate(CLMotionStateMediator_Type::WorkoutEvent, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v22);
    if (v22 != __p) {
      free(v22);
    }
  }
  v23[0] = CMReturnCode;
  v24[0] = +[NSNumber numberWithInteger:*(void *)(a2 + 16)];
  v24[1] = v17;
  v23[1] = CMWorkoutOverviewData;
  v23[2] = CMWorkoutAttributes;
  void v24[2] = v18;
  *(void *)long long __p = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:3];
  sub_101267124(a1);
}

void sub_101260AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101260B14(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  *uint64_t v5 = off_10231A530;
  v5[42] = 0;
  v5[43] = 0;
  v5[41] = 0;
  v5[7] = 0;
  v5[8] = 0;
  void v5[6] = 0;
  sub_1006A564C();
}

void sub_101260CF4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 351) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 56);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_101260D60(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A5E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWorkoutSubscription::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A5E0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      id v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWorkoutSubscription::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101266758(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101260F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101260F3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    [v4 clientName];
  }
  else
  {
    uint64_t v18 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v17 = 0u;
    *(_OWORD *)int v15 = 0u;
    long long v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)char v11 = 0u;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)id v8 = 0u;
  }
  sub_1000A84C8((uint64_t)v8);
  if (SHIBYTE(v14[3]) >= 0) {
    uint64_t v5 = (void *)HIBYTE(v14[3]);
  }
  else {
    uint64_t v5 = v14[2];
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14[3]) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0)
  {
    operator delete(v8[0]);
    if (v5) {
      goto LABEL_21;
    }
LABEL_24:
    if (objc_msgSend(*(id *)(a1 + 24), "executablePath", v8[0], v8[1], v9[0])) {
      uint64_t v7 = (char *)[[*(id *)(a1 + 24) executablePath] UTF8String];
    }
    else {
      uint64_t v7 = "";
    }
    sub_100134750((void *)a2, v7);
    return;
  }
  if (!v5) {
    goto LABEL_24;
  }
LABEL_21:
  char v6 = *(void **)(a1 + 24);
  if (v6)
  {
    [v6 clientName];
  }
  else
  {
    uint64_t v18 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v17 = 0u;
    *(_OWORD *)int v15 = 0u;
    long long v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)char v11 = 0u;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)id v8 = 0u;
  }
  sub_1000A84C8((uint64_t)v8);
  if (SHIBYTE(v14[3]) < 0)
  {
    sub_1000DC48C((unsigned char *)a2, v14[1], (unint64_t)v14[2]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v14[1];
    *(void **)(a2 + 16) = v14[3];
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14[3]) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0) {
    operator delete(v8[0]);
  }
}

void sub_101261148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101261164(uint64_t a1)
{
  *(void *)a1 = off_10231A530;
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (sub_1000A7C40((uint64_t)&unk_102486928, (uint64_t)&qword_102486970, (unsigned __int8 **)(a1 + 328))
     - (void)&unk_102486928 != 72)
  {
    [*(id *)(a1 + 80) updateWorkoutReminderMuteSetting:0 mute:0];
    [*(id *)(a1 + 80) updateWorkoutReminderMuteSetting:1 mute:0];
    [*(id *)(a1 + 80) updateWorkoutReminderMuteSetting:2 mute:0];
  }
  [*(id *)(a1 + 80) unregisterForWorkoutSessionUpdates:*(void *)(a1 + 72)];

  *(void *)(a1 + 80) = 0;
  [*(id *)(a1 + 72) setValid:0];

  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return sub_100029A7C(a1);
}

void sub_1012612C4(uint64_t a1)
{
  sub_101261164(a1);

  operator delete();
}

void *sub_1012612FC@<X0>(uint64_t a1@<X8>)
{
  v17[0] = off_10231A650;
  v17[1] = sub_101261978;
  v17[2] = 0;
  v17[3] = v17;
  sub_100134750(v18, "kCLConnectionMessageWorkoutEvent");
  sub_100BF60D4((uint64_t)&v19, (uint64_t)v17);
  __int16 v14 = off_10231A700;
  v15[0] = sub_101261C68;
  v15[1] = 0;
  __int16 v16 = &v14;
  sub_100134750(v20, "kCLConnectionMessageSetWorkoutTimeout");
  sub_100BF60D4((uint64_t)&v21, (uint64_t)&v14);
  v13[0] = off_10231A700;
  v13[1] = sub_10126211C;
  v13[2] = 0;
  v13[3] = v13;
  sub_100134750(v22, "kCLConnectionMessageUserDismissedWorkoutAlert");
  sub_100BF60D4((uint64_t)&v23, (uint64_t)v13);
  v12[0] = off_10231A700;
  v12[1] = sub_101262218;
  v12[2] = 0;
  v12[3] = v12;
  sub_100134750(v24, "kCLConnectionMessageWorkoutPrompts");
  sub_100BF60D4((uint64_t)&v25, (uint64_t)v12);
  v11[0] = off_10231A700;
  v11[1] = sub_10126240C;
  v11[2] = 0;
  v11[3] = v11;
  sub_100134750(v26, "kCLConnectionMessageTriggerWorkoutLocationEventForTesting");
  sub_100BF60D4((uint64_t)&v27, (uint64_t)v11);
  v10[0] = off_10231A700;
  v10[1] = sub_101262630;
  v10[2] = 0;
  v10[3] = v10;
  sub_100134750(v28, "kCLConnectionMessageBeginWorkoutSession");
  sub_100BF60D4((uint64_t)&v29, (uint64_t)v10);
  v9[0] = off_10231A700;
  v9[1] = sub_101263638;
  v9[2] = 0;
  v9[3] = v9;
  sub_100134750(v30, "kCLConnectionMessageEndWorkoutSession");
  sub_100BF60D4((uint64_t)&v31, (uint64_t)v9);
  v8[0] = off_10231A700;
  v8[1] = sub_101263C04;
  v8[2] = 0;
  v8[3] = v8;
  sub_100134750(v32, "kCLConnectionMessageSetCurrentWorkoutType");
  sub_100BF60D4((uint64_t)&v33, (uint64_t)v8);
  v7[0] = off_10231A700;
  v7[1] = sub_1012641D4;
  v7[2] = 0;
  v7[3] = v7;
  sub_100134750(v34, "kCLConnectionMessagePauseWorkout");
  sub_100BF60D4((uint64_t)&v35, (uint64_t)v7);
  v6[0] = off_10231A700;
  v6[1] = sub_101264784;
  v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v36, "kCLConnectionMessageResumeWorkout");
  sub_100BF60D4((uint64_t)&v37, (uint64_t)v6);
  v5[0] = off_10231A700;
  v5[1] = sub_101264D34;
  v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v38, "kCLConnectionMessageWorkoutSnapshot");
  sub_100BF60D4((uint64_t)&v39, (uint64_t)v5);
  v4[0] = off_10231A700;
  v4[1] = sub_101264E84;
  v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v40, "kCLConnectionMessageUpdateWorkoutReminderMuteSetting");
  sub_100BF60D4((uint64_t)&v41, (uint64_t)v4);
  sub_101267774(a1, (unsigned __int8 *)v18, 12);
  uint64_t v2 = 84;
  do
  {
    sub_100BF65F0(&v17[v2]);
    if (SHIBYTE((&v16)[v2]) < 0) {
      operator delete((void *)v15[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_100BF65F0(v4);
  sub_100BF65F0(v5);
  sub_100BF65F0(v6);
  sub_100BF65F0(v7);
  sub_100BF65F0(v8);
  sub_100BF65F0(v9);
  sub_100BF65F0(v10);
  sub_100BF65F0(v11);
  sub_100BF65F0(v12);
  sub_100BF65F0(v13);
  sub_100BF65F0(&v14);
  return sub_100BF65F0(v17);
}

void sub_101261830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  for (uint64_t i = 616; i != -56; i -= 56)
    sub_10126538C(v54 + i);
  sub_100BF65F0(&a10);
  sub_100BF65F0(&a14);
  sub_100BF65F0(&a18);
  sub_100BF65F0(&a22);
  sub_100BF65F0(&a26);
  sub_100BF65F0(&a30);
  sub_100BF65F0(&a34);
  sub_100BF65F0(&a38);
  sub_100BF65F0(&a42);
  sub_100BF65F0(&a46);
  sub_100BF65F0(&a50);
  sub_100BF65F0(&a54);
  _Unwind_Resume(a1);
}

void sub_101261914()
{
}

void sub_101261920()
{
}

void sub_10126192C()
{
}

void sub_101261938()
{
}

void sub_101261944()
{
}

void sub_101261950()
{
}

void sub_10126195C()
{
}

void sub_101261968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
}

void sub_101261978(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10231A600);
  }
  uint64_t v5 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v20 = 2112;
    uint64_t v21 = v6;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Workout, event subscription changed, %d, %@, %p", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    int v13 = 67109634;
    int v14 = a2;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    uint64_t v18 = a1;
    id v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleRequestWorkoutEvent(BOOL, const CLNameValuePair &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1010A4D14(a1))
  {
    sub_100103240();
    if ((sub_1000A16E8() & 0x100000000) != 0)
    {
      sub_10009C834(a1);
    }
    else
    {
      uint64_t v9 = CMErrorMessage;
      long long v10 = &off_1023943E8;
      *(void *)buf = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
      sub_1012653C8(a1);
    }
  }
  else
  {
    uint64_t v11 = CMErrorMessage;
    uint64_t v12 = &off_1023943D0;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    sub_1012653C8(a1);
  }
}

void sub_101261C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101261C68(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v14 = 0;
  if (sub_10126545C(a1, (int *)&v14))
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    uint64_t v6 = Dictionary;
    if (Dictionary && (uint64_t v7 = CMWorkoutTimeout, [Dictionary objectForKeyedSubscript:CMWorkoutTimeout]))
    {
      [objc_msgSend(v6, "objectForKeyedSubscript:", v7) doubleValue];
      if (*(void *)(a1 + 48))
      {
        double v9 = v8;
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        long long v10 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          double v22 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Workout, setting workout timeout %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          int v17 = 134217984;
          double v18 = v9;
          uint64_t v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageSetWorkoutTimeout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        [*(id *)(a1 + 80) setWorkoutSuggestedStopTimeout:v9];
        uint64_t v15 = CMReturnCode;
        uint64_t v16 = &__kCFBooleanTrue;
        +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      }
      else
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        uint64_t v11 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "No active workouts to set a timeout for!", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          LOWORD(v17) = 0;
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageSetWorkoutTimeout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        uint64_t v19 = CMErrorMessage;
        __int16 v20 = &off_102394418;
        +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      }
      CLConnectionMessage::sendReply();
    }
    else
    {
      uint64_t v23 = CMErrorMessage;
      uint64_t v24 = &off_102394400;
      +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v25 = CMErrorMessage;
    uint64_t v26 = +[NSNumber numberWithUnsignedInt:v14];
    +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1012620E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10126211C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1010A4D14(a1))
  {
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLMotionStateMediator"), "userDismissedWorkoutAlert");
  }
  else
  {
    uint64_t v3 = CMErrorMessage;
    id v4 = &off_1023943D0;
    +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
    sub_1012653C8(a1);
  }
}

void sub_1012621EC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101262218(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v5 = 103;
  if (sub_10126545C(a1, (int *)&v5))
  {
    uint64_t v3 = sub_10126551C(a1) ^ 1;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231A620);
    }
    id v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2049;
      uint64_t v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Calibration prompt\", \"needed\":%{private}ld}", buf, 0x1Cu);
    }
    uint64_t v6 = CMReturnCode;
    uint64_t v7 = +[NSNumber numberWithUnsignedInteger:v3];
    +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v14 = CMErrorMessage;
    uint64_t v15 = +[NSNumber numberWithUnsignedInt:v5];
    +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1012623E0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_10126240C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v11 = 0;
  if (sub_10126545C(a1, (int *)&v11))
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    uint64_t v6 = Dictionary;
    if (Dictionary
      && (uint64_t v7 = CMWorkoutTriggerWorkoutLocationEventForTesting,
          [Dictionary objectForKeyedSubscript:CMWorkoutTriggerWorkoutLocationEventForTesting]))
    {
      [objc_msgSend(v6, "objectForKeyedSubscript:", v7) integerValue];
      double v8 = *(void **)(*(void *)(a1 + 64) + 16);
      int v9 = *(std::__shared_weak_count **)(a2 + 8);
      __int16 v10 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v8 triggerWorkoutLocationEventForTesting:withReply:];
      if (v10) {
        sub_1000DB0A0(v10);
      }
    }
    else
    {
      uint64_t v12 = CMErrorMessage;
      uint64_t v13 = &off_102394400;
      +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v14 = CMErrorMessage;
    uint64_t v15 = +[NSNumber numberWithUnsignedInt:v11];
    +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_1012625EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }

  _Unwind_Resume(a1);
}

void sub_101262630(uint64_t a1, CLConnectionMessage **a2)
{
  void (**v25)(unsigned char *__return_ptr);
  long long v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  void *j;
  double v38;
  void *v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  unsigned int v53;
  id v54;
  id v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  unsigned int v64;
  uint64_t v65;
  _UNKNOWN **v66;
  uint64_t v67;
  _UNKNOWN **v68;
  long long v69[5];
  _OWORD v70[10];
  uint64_t v71;
  unsigned char v72[128];
  unsigned char out[80];
  uint64_t v74;
  uuid_t uu;
  uint64_t v76;
  _UNKNOWN **v77;
  uint64_t v78;
  _UNKNOWN **v79;
  unsigned char v80[128];
  uint64_t v81;
  _UNKNOWN **v82;
  unsigned char buf[24];
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  _UNKNOWN **v88;
  uint64_t v89;
  NSNumber *v90;

  uint64_t v55 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v64 = 0;
  if ((sub_10126545C(a1, (int *)&v64) & 1) == 0)
  {
    long long v89 = CMErrorMessage;
    long long v90 = +[NSNumber numberWithUnsignedInt:v64];
    +[NSDictionary dictionaryWithObjects:&v90 forKeys:&v89 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_15;
  }
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  double v8 = DictionaryOfClasses;
  if (!DictionaryOfClasses
    || (uint64_t v9 = CMWorkoutAttributes, ![DictionaryOfClasses objectForKeyedSubscript:CMWorkoutAttributes])
    || (uint64_t v10 = CMWorkoutOverviewData, ![v8 objectForKeyedSubscript:CMWorkoutOverviewData]))
  {
    long long v87 = CMErrorMessage;
    long long v88 = &off_102394400;
    +[NSDictionary dictionaryWithObjects:&v88 forKeys:&v87 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_15;
  }
  id v11 = [v8 objectForKeyedSubscript:v9];
  uint64_t v54 = [v8 objectForKeyedSubscript:v10];
  unsigned int v12 = [[objc_msgSend(v8, "objectForKeyedSubscript:", CMWorkoutEnableWorkoutChangeDetection) boolValue];
  if (v12 && (unint64_t)objc_msgSend(objc_msgSend(v54, "workouts"), "count") <= 1)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v13 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&unsigned char buf[14] = v54;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WorkoutSession, client requested detection but no priors exist, %@, %@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      *(_DWORD *)out = 138412546;
      *(void *)&out[4] = v11;
      *(_WORD *)&out[12] = 2112;
      *(void *)&out[14] = v54;
      uint64_t v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v46);
      if (v46 != buf) {
        free(v46);
      }
    }
    id v81 = CMErrorMessage;
    uint64_t v82 = &off_102394400;
    +[NSDictionary dictionaryWithObjects:&v82 forKeys:&v81 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_15;
  }
  BOOL v62 = 0u;
  __int16 v63 = 0u;
  BOOL v60 = 0u;
  __int16 v61 = 0u;
  id v14 = [v54 workouts];
  id v15 = [v14 countByEnumeratingWithState:&v60 objects:v80 count:16];
  uint64_t v53 = v12;
  char v16 = 0;
  if (v15)
  {
    uint64_t v17 = *(void *)v61;
    do
    {
      for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v61 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*((void *)&v60 + 1) + 8 * i);
        id v20 = [v19 type];
        if (v20 == [v11 type])
        {
          id v21 = [v19 locationType];
          v16 |= v21 == [v11 locationType];
        }
      }
      id v15 = [v14 countByEnumeratingWithState:&v60 objects:v80 count:16];
    }
    while (v15);
  }
  if (v53 && (v16 & 1) == 0)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    double v22 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&unsigned char buf[14] = v54;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "WorkoutSession, workout overview doesn't include the current workout, %@, %@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      *(_DWORD *)out = 138412546;
      *(void *)&out[4] = v11;
      *(_WORD *)&out[12] = 2112;
      *(void *)&out[14] = v54;
      __int16 v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v45);
      if (v45 != buf) {
        free(v45);
      }
    }
    uint64_t v78 = CMErrorMessage;
    uint64_t v79 = &off_102394400;
    +[NSDictionary dictionaryWithObjects:&v79 forKeys:&v78 count:1];
LABEL_40:
    CLConnectionMessage::sendReply();
    goto LABEL_15;
  }
  if (*(void *)(a1 + 48))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v23 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v24 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&unsigned char buf[14] = v24;
      *(_WORD *)&unsigned char buf[22] = 2048;
      v84 = a1;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "WorkoutSession, duplicate session begin, %@, %@, %p", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      long long v47 = *(void *)(a1 + 24);
      *(_DWORD *)out = 138412802;
      *(void *)&out[4] = v11;
      *(_WORD *)&out[12] = 2112;
      *(void *)&out[14] = v47;
      *(_WORD *)&out[22] = 2048;
      *(void *)&out[24] = a1;
      uint64_t v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v48);
      if (v48 != buf) {
        free(v48);
      }
    }
    v76 = CMErrorMessage;
    uint64_t v77 = &off_102394418;
    +[NSDictionary dictionaryWithObjects:&v77 forKeys:&v76 count:1];
    goto LABEL_40;
  }
  uint64_t v25 = (void (**)(unsigned char *__return_ptr))[*(id *)(*(void *)(a1 + 64) + 16) syncgetActivityOverride];
  if (v25)
  {
    v25[2](buf);
    uint64_t v26 = *(_OWORD *)buf;
  }
  else
  {
    uint64_t v26 = 0uLL;
  }
  *(void *)&uint8_t buf[8] = 0;
  *(void *)buf = 0;
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v26;
  if (v27)
  {
    sub_1000DB0A0(v27);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    id v28 = *(void *)(a1 + 48);
  }
  else
  {
    id v28 = v26;
  }
  if (v28)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v29 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      id v30 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 138413058;
      *(void *)&uint8_t buf[4] = v54;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&unsigned char buf[14] = v11;
      *(_WORD *)&unsigned char buf[22] = 2112;
      v84 = v30;
      long long v85 = 2048;
      unint64_t v86 = a1;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "WorkoutSession, beginning session, overview, %@, workout, %@, %@, %p", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      __int16 v49 = *(void *)(a1 + 24);
      *(_DWORD *)out = 138413058;
      *(void *)&out[4] = v54;
      *(_WORD *)&out[12] = 2112;
      *(void *)&out[14] = v11;
      *(_WORD *)&out[22] = 2112;
      *(void *)&out[24] = v49;
      *(_WORD *)&out[32] = 2048;
      *(void *)&out[34] = a1;
      __int16 v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v50);
      if (v50 != buf) {
        free(v50);
      }
    }
    if (!uuid_is_null((const unsigned __int8 *)(a1 + 168)))
    {
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a1 + 168), out);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      uint64_t v31 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = out;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "WorkoutSession, overviewId unitialized or already present when beginning a new session, clearing, prevOverviewId, %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        *(_DWORD *)uu = 136446210;
        *(void *)&uu[4] = out;
        __int16 v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v52);
        if (v52 != buf) {
          free(v52);
        }
      }
    }
    memset(uu, 0, sizeof(uu));
    if ([v54 overviewId]) {
      [objc_msgSend(v54, "overviewId") getUUIDBytes:uu];
    }
    else {
      uuid_clear(uu);
    }
    uint64_t v33 = a1 + 152;
    sub_101265F94(v11, uu, a1 + 152);
    uint64_t v74 = 0;
    memset(&out[16], 0, 64);
    if (uuid_is_null((const unsigned __int8 *)(a1 + 168)))
    {
      uuid_clear(out);
    }
    else
    {
      uuid_copy(out, (const unsigned __int8 *)(a1 + 168));
      if ([v11 appId])
      {
        sub_100134750(buf, (char *)[v11 appId]);
        if ((out[39] & 0x80000000) != 0) {
          operator delete(*(void **)&out[16]);
        }
        *(_OWORD *)&out[16] = *(_OWORD *)buf;
        *(void *)&out[32] = *(void *)&buf[16];
        goto LABEL_77;
      }
    }
    std::string::assign((std::string *)&out[16], "");
LABEL_77:
    __int16 v58 = 0u;
    uint64_t v59 = 0u;
    __int16 v56 = 0u;
    uint64_t v57 = 0u;
    __int16 v34 = [v54 workouts];
    uint64_t v35 = [v34 countByEnumeratingWithState:&v56 objects:v72 count:16];
    if (v35)
    {
      __int16 v36 = *(void *)v57;
      do
      {
        for (j = 0; j != v35; j = (char *)j + 1)
        {
          if (*(void *)v57 != v36) {
            objc_enumerationMutation(v34);
          }
          sub_101265F94(*(void **)(*((void *)&v56 + 1) + 8 * (void)j), (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
          *(void *)&unsigned int v38 = sub_1012665F0(&out[40], (long long *)buf).n128_u64[0];
        }
        uint64_t v35 = [v34 countByEnumeratingWithState:&v56 objects:v72 count:16];
      }
      while (v35);
    }
    *(void *)&uint8_t buf[8] = 0;
    *(void *)buf = 0;
    uuid_generate(buf);
    uuid_copy((unsigned __int8 *)(a1 + 184), buf);
    uint64_t v39 = *(void **)(a1 + 80);
    unsigned int v40 = *(_OWORD *)(v33 + 144);
    v70[8] = *(_OWORD *)(v33 + 128);
    v70[9] = v40;
    uint64_t v71 = *(void *)(v33 + 160);
    uint64_t v41 = *(_OWORD *)(v33 + 80);
    v70[4] = *(_OWORD *)(v33 + 64);
    v70[5] = v41;
    int v42 = *(_OWORD *)(v33 + 112);
    v70[6] = *(_OWORD *)(v33 + 96);
    v70[7] = v42;
    __int16 v43 = *(_OWORD *)(v33 + 16);
    v70[0] = *(_OWORD *)v33;
    v70[1] = v43;
    unsigned int v44 = *(_OWORD *)(v33 + 48);
    v70[2] = *(_OWORD *)(v33 + 32);
    v70[3] = v44;
    sub_1012666C8((uint64_t)v69, (uint64_t)out);
    [v39 beginWorkoutSession:v70 withOverview:sub_10069D150(v69) enableWorkoutChangeDetection:v53];
    sub_101A27420((uint64_t)v69);
    __int16 v67 = CMReturnCode;
    uint64_t v68 = &off_102394448;
    +[NSDictionary dictionaryWithObjects:&v68 forKeys:&v67 count:1];
    CLConnectionMessage::sendReply();
    sub_101A27420((uint64_t)out);
    goto LABEL_15;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10231A600);
  }
  __int16 v32 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "WorkoutSession, unable to begin session, another client has an active workout.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    *(_WORD *)out = 0;
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageBeginWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v51);
    if (v51 != buf) {
      free(v51);
    }
  }
  __int16 v65 = CMErrorMessage;
  BOOL v66 = &off_102394418;
  +[NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1];
  CLConnectionMessage::sendReply();
LABEL_15:
}

void sub_101263588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_101263638(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v21 = 0;
  if (sub_10126545C(a1, (int *)&v21))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
    double v8 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (uint64_t v9 = CMWorkoutAttributes, [DictionaryOfClasses objectForKeyedSubscript:CMWorkoutAttributes]))
    {
      id v10 = [v8 objectForKeyedSubscript:v9];
      if (*(void *)(a1 + 48))
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v11 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v12;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WorkoutSession, ending session, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v17 = *(void *)(a1 + 48);
          int v28 = 138412802;
          id v29 = v10;
          __int16 v30 = 2048;
          uint64_t v31 = v17;
          __int16 v32 = 2048;
          uint64_t v33 = a1;
          double v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageEndWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
          if (v18 != buf) {
            free(v18);
          }
        }
        sub_101265F94(v10, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        uint64_t v13 = *(void **)(a1 + 80);
        v24[7] = v40;
        v24[8] = v41;
        v24[9] = v42;
        uint64_t v25 = v43;
        v24[4] = v37;
        v24[5] = v38;
        v24[6] = v39;
        v24[0] = *(_OWORD *)buf;
        v24[1] = *(_OWORD *)&buf[16];
        void v24[2] = v35;
        void v24[3] = v36;
        [v13 endWorkoutSession:v24];
        id v14 = *(std::__shared_weak_count **)(a1 + 56);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        if (v14) {
          sub_1000DB0A0(v14);
        }
        uuid_clear((unsigned __int8 *)(a1 + 168));
        uint64_t v22 = CMReturnCode;
        uint64_t v23 = &off_102394448;
        +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v15 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v16 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v16;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to stop, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v19 = *(void *)(a1 + 48);
          int v28 = 138412802;
          id v29 = v10;
          __int16 v30 = 2048;
          uint64_t v31 = v19;
          __int16 v32 = 2048;
          uint64_t v33 = a1;
          id v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageEndWorkoutSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
          if (v20 != buf) {
            free(v20);
          }
        }
        uint64_t v26 = CMErrorMessage;
        uint64_t v27 = &off_102394418;
        +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      uint64_t v44 = CMErrorMessage;
      __int16 v45 = &off_102394400;
      +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v46 = CMErrorMessage;
    long long v47 = +[NSNumber numberWithUnsignedInt:v21];
    +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_101263BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101263C04(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v21 = 0;
  if (sub_10126545C(a1, (int *)&v21))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
    double v8 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (uint64_t v9 = CMWorkoutAttributes, [DictionaryOfClasses objectForKeyedSubscript:CMWorkoutAttributes]))
    {
      id v10 = [v8 objectForKeyedSubscript:v9];
      if (*(void *)(a1 + 48))
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v11 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v12;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WorkoutSession, setting current type, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v17 = *(void *)(a1 + 48);
          int v28 = 138412802;
          id v29 = v10;
          __int16 v30 = 2048;
          uint64_t v31 = v17;
          __int16 v32 = 2048;
          uint64_t v33 = a1;
          double v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageSetCurrentWorkoutType(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
          if (v18 != buf) {
            free(v18);
          }
        }
        sub_101265F94(v10, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        id v13 = [[objc_msgSend(v8, "objectForKeyedSubscript:", CMWorkoutIsManualTransition) BOOLValue];
        id v14 = *(void **)(a1 + 80);
        v24[7] = v40;
        v24[8] = v41;
        v24[9] = v42;
        uint64_t v25 = v43;
        v24[4] = v37;
        v24[5] = v38;
        v24[6] = v39;
        v24[0] = *(_OWORD *)buf;
        v24[1] = *(_OWORD *)&buf[16];
        void v24[2] = v35;
        void v24[3] = v36;
        [v14 setCurrentWorkoutType:v24 isManualTransition:v13];
        uint64_t v22 = CMReturnCode;
        uint64_t v23 = &off_102394448;
        +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v15 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v16 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v16;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to change, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v19 = *(void *)(a1 + 48);
          int v28 = 138412802;
          id v29 = v10;
          __int16 v30 = 2048;
          uint64_t v31 = v19;
          __int16 v32 = 2048;
          uint64_t v33 = a1;
          id v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageSetCurrentWorkoutType(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
          if (v20 != buf) {
            free(v20);
          }
        }
        uint64_t v26 = CMErrorMessage;
        uint64_t v27 = &off_102394418;
        +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      uint64_t v44 = CMErrorMessage;
      __int16 v45 = &off_102394400;
      +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v46 = CMErrorMessage;
    long long v47 = +[NSNumber numberWithUnsignedInt:v21];
    +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_101264190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1012641D4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v20 = 0;
  if (sub_10126545C(a1, (int *)&v20))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
    double v8 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (uint64_t v9 = CMWorkoutAttributes, [DictionaryOfClasses objectForKeyedSubscript:CMWorkoutAttributes]))
    {
      id v10 = [v8 objectForKeyedSubscript:v9];
      if (*(void *)(a1 + 48))
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v11 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v12;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WorkoutSession, pausing workout, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v16 = *(void *)(a1 + 48);
          int v27 = 138412802;
          id v28 = v10;
          __int16 v29 = 2048;
          uint64_t v30 = v16;
          __int16 v31 = 2048;
          uint64_t v32 = a1;
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessagePauseWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
          if (v17 != buf) {
            free(v17);
          }
        }
        sub_101265F94(v10, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        id v13 = *(void **)(a1 + 80);
        v23[7] = v39;
        v23[8] = v40;
        v23[9] = v41;
        uint64_t v24 = v42;
        v23[4] = v36;
        v23[5] = v37;
        v23[6] = v38;
        v23[0] = *(_OWORD *)buf;
        v23[1] = *(_OWORD *)&buf[16];
        v23[2] = v34;
        void v23[3] = v35;
        [v13 pauseWorkout:v23];
        uint64_t v21 = CMReturnCode;
        uint64_t v22 = &off_102394448;
        +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v14 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v15 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to pause, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v18 = *(void *)(a1 + 48);
          int v27 = 138412802;
          id v28 = v10;
          __int16 v29 = 2048;
          uint64_t v30 = v18;
          __int16 v31 = 2048;
          uint64_t v32 = a1;
          uint64_t v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessagePauseWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
          if (v19 != buf) {
            free(v19);
          }
        }
        uint64_t v25 = CMErrorMessage;
        uint64_t v26 = &off_102394418;
        +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      uint64_t v43 = CMErrorMessage;
      uint64_t v44 = &off_102394400;
      +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v45 = CMErrorMessage;
    uint64_t v46 = +[NSNumber numberWithUnsignedInt:v20];
    +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_101264744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101264784(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v20 = 0;
  if (sub_10126545C(a1, (int *)&v20))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
    double v8 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (uint64_t v9 = CMWorkoutAttributes, [DictionaryOfClasses objectForKeyedSubscript:CMWorkoutAttributes]))
    {
      id v10 = [v8 objectForKeyedSubscript:v9];
      if (*(void *)(a1 + 48))
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v11 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v12;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WorkoutSession, resuming workout, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v16 = *(void *)(a1 + 48);
          int v27 = 138412802;
          id v28 = v10;
          __int16 v29 = 2048;
          uint64_t v30 = v16;
          __int16 v31 = 2048;
          uint64_t v32 = a1;
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageResumeWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
          if (v17 != buf) {
            free(v17);
          }
        }
        sub_101265F94(v10, (const unsigned __int8 *)(a1 + 168), (uint64_t)buf);
        id v13 = *(void **)(a1 + 80);
        v23[7] = v39;
        v23[8] = v40;
        v23[9] = v41;
        uint64_t v24 = v42;
        v23[4] = v36;
        v23[5] = v37;
        v23[6] = v38;
        v23[0] = *(_OWORD *)buf;
        v23[1] = *(_OWORD *)&buf[16];
        v23[2] = v34;
        void v23[3] = v35;
        [v13 resumeWorkout:v23];
        uint64_t v21 = CMReturnCode;
        uint64_t v22 = &off_102394448;
        +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
        CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v14 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v15 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&buf[24] = a1;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "WorkoutSession, no active workouts to resume, requested, %@, %p, %p", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v18 = *(void *)(a1 + 48);
          int v27 = 138412802;
          id v28 = v10;
          __int16 v29 = 2048;
          uint64_t v30 = v18;
          __int16 v31 = 2048;
          uint64_t v32 = a1;
          uint64_t v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageResumeWorkout(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
          if (v19 != buf) {
            free(v19);
          }
        }
        uint64_t v25 = CMErrorMessage;
        uint64_t v26 = &off_102394418;
        +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      uint64_t v43 = CMErrorMessage;
      uint64_t v44 = &off_102394400;
      +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v45 = CMErrorMessage;
    uint64_t v46 = +[NSNumber numberWithUnsignedInt:v20];
    +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_101264CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101264D34(uint64_t a1, uint64_t *a2)
{
  unsigned int v9 = 0;
  if (sub_10126545C(a1, (int *)&v9))
  {
    id v4 = *(void **)(a1 + 80);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3321888768;
    v7[2] = sub_101265A68;
    v7[3] = &unk_10231A580;
    uint64_t v6 = *a2;
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    void v7[4] = a1;
    void v7[5] = v6;
    double v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v4 workoutSnapshotWithReply:v7];
    if (v8) {
      sub_1000DB0A0(v8);
    }
  }
  else
  {
    uint64_t v10 = CMErrorMessage;
    id v11 = +[NSNumber numberWithUnsignedInt:v9];
    +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_101264E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

id sub_101264E84(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10231A600);
  }
  id v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 328);
    if (*(char *)(a1 + 351) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v33 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Workout, reminder mute settings, client %s attempting to toggle mute reminder settings", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v16 = (void *)(a1 + 328);
    if (*(char *)(a1 + 351) < 0) {
      uint64_t v16 = (void *)*v16;
    }
    int v22 = 136315138;
    uint64_t v23 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageUpdateWorkoutReminderMuteSetting(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  unsigned int v19 = 0;
  if (sub_10126545C(a1, (int *)&v19))
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    uint64_t v7 = Dictionary;
    if (Dictionary
      && (uint64_t v8 = CMWorkoutReminderSettingType,
          [Dictionary objectForKeyedSubscript:CMWorkoutReminderSettingType])
      && (uint64_t v9 = CMWorkoutReminderMuteValue, [v7 objectForKeyedSubscript:CMWorkoutReminderMuteValue]))
    {
      id v10 = [[v7 objectForKeyedSubscript:v8] integerValue];
      id v11 = [[v7 objectForKeyedSubscript:v9] BOOLValue];
      uint64_t v12 = (void *)(a1 + 328);
      if (sub_1000A7C40((uint64_t)&unk_102486928, (uint64_t)&qword_102486970, (unsigned __int8 **)(a1 + 328))
         - (void)&unk_102486928 == 72)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        id v13 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
        {
          id v14 = (void *)(a1 + 328);
          if (*(char *)(a1 + 351) < 0) {
            id v14 = (void *)*v12;
          }
          *(_DWORD *)buf = 136315650;
          uint64_t v33 = v14;
          __int16 v34 = 2048;
          id v35 = v10;
          __int16 v36 = 1024;
          int v37 = (int)v11;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Workout, reminder mute settings, disallowed client %s attempting to toggle mute reminder for %ld to %d", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          if (*(char *)(a1 + 351) < 0) {
            uint64_t v12 = (void *)*v12;
          }
          int v22 = 136315650;
          uint64_t v23 = v12;
          __int16 v24 = 2048;
          id v25 = v10;
          __int16 v26 = 1024;
          int v27 = (int)v11;
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::handleMessageUpdateWorkoutReminderMuteSetting(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
        uint64_t v20 = CMErrorMessage;
        uint64_t v21 = &off_102394430;
        +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
        return (id)CLConnectionMessage::sendReply();
      }
      else
      {
        return [*(id *)(a1 + 80) updateWorkoutReminderMuteSetting:v10 mute:v11];
      }
    }
    else
    {
      uint64_t v28 = CMErrorMessage;
      __int16 v29 = &off_102394400;
      +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      return (id)CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v30 = CMErrorMessage;
    __int16 v31 = +[NSNumber numberWithUnsignedInt:v19];
    +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    return (id)CLConnectionMessage::sendReply();
  }
}

uint64_t sub_10126538C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1012653C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_10231A770, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_101265444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126545C(uint64_t a1, int *a2)
{
  sub_100134750(&__p, "com.apple.locationd.natalimetry");
  char v4 = sub_1010A4BAC(a1);
  char v5 = v4;
  if (v9 < 0)
  {
    operator delete(__p);
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_8;
  }
  if (!sub_101290CD0(*(void *)(a1 + 8)))
  {
    int v7 = 104;
    goto LABEL_10;
  }
  if (sub_1010A4D14(a1)) {
    return 1;
  }
LABEL_8:
  int v7 = 105;
LABEL_10:
  uint64_t result = 0;
  *a2 = v7;
  return result;
}

void sub_101265500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10126551C(uint64_t a1)
{
  id v1 = [objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLClientAuthorizationCache"];
  id v2 = [objc_msgSend(v1, "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle")) isAuthorizedForServiceTypeMask:16];
  if ((v2 & 1) == 0)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231A620);
    }
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231A620);
      }
      char v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutSubscription::isMotionCalibrationAuthorized()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }

  return v2;
}

uint64_t sub_101265700(uint64_t a1, uint64_t a2)
{
  if (a2 == 100)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 134217984;
      uint64_t v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Workout, LOCATION UPDATE FOR TESTING %zd.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      uint64_t v10 = *(void *)(a1 + 48);
      int v15 = 134217984;
      uint64_t v16 = v10;
      id v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageTriggerWorkoutLocationEventForTesting(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v13 = CMReturnCode;
    id v14 = &__kCFBooleanTrue;
    char v5 = (NSNumber **)&v14;
    uint64_t v6 = &v13;
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v8 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "No active workouts or defaults write not set to force location updates!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      LOWORD(v15) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageTriggerWorkoutLocationEventForTesting(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    uint64_t v17 = CMErrorMessage;
    uint64_t v18 = +[NSNumber numberWithUnsignedInt:a2];
    char v5 = &v18;
    uint64_t v6 = &v17;
  }
  +[NSDictionary dictionaryWithObjects:v5 forKeys:v6 count:1];
  return CLConnectionMessage::sendReply();
}

void sub_101265A68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)a2) {
    id v4 = sub_101265CE8((double *)(a2 + 8), 0);
  }
  else {
    id v4 = 0;
  }
  if (*(unsigned char *)(a2 + 248)) {
    char v5 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 240)];
  }
  else {
    char v5 = 0;
  }
  id v6 = [objc_alloc((Class)CMWorkoutSnapshot) initWithState:*(void *)a2 workout:v4 entryDate:v5];
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10231A600);
  }
  int v7 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(v3 + 24);
    *(_DWORD *)buf = 138412546;
    uint64_t v18 = v8;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[snapshot] sending snapshot to client %@, %@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v9 = *(void *)(v3 + 24);
    int v13 = 138412546;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    id v16 = v6;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::handleMessageWorkoutSnapshot(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v11 = CMWorkoutSnapshotData;
  id v12 = v6;
  +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  CLConnectionMessage::sendReply();
}

id sub_101265CE8(double *a1, int a2)
{
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a1 + 8];
  if (*a1 == 1.79769313e308) {
    char v5 = +[NSDate distantFuture];
  }
  else {
    char v5 = (NSDate *)[objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:*a1];
  }
  id v6 = v5;
  if (a1[1] == 1.79769313e308) {
    int v7 = +[NSDate distantFuture];
  }
  else {
    int v7 = (NSDate *)[objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a1[1]];
  }
  uint64_t v8 = v7;
  uint64_t v9 = v4;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10231A600);
  }
  uint64_t v10 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v11 = "overview event";
    }
    else {
      uint64_t v11 = "current event";
    }
    id v12 = v8;
    uint64_t v14 = *((void *)a1 + 2);
    uint64_t v13 = *((void *)a1 + 3);
    uint64_t v15 = *((void *)a1 + 14);
    uint64_t v16 = *((void *)a1 + 15);
    int v22 = v6;
    uint64_t v17 = *((void *)a1 + 28);
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *((void *)a1 + 1);
    *(_DWORD *)buf = 68291330;
    int v24 = 0;
    __int16 v25 = 2082;
    __int16 v26 = "";
    __int16 v27 = 2082;
    uint64_t v28 = v11;
    __int16 v29 = 2050;
    uint64_t v30 = v13;
    uint64_t v8 = v12;
    __int16 v31 = 2050;
    uint64_t v32 = v14;
    __int16 v33 = 2050;
    uint64_t v34 = v15;
    __int16 v35 = 2050;
    uint64_t v36 = v16;
    __int16 v37 = 2050;
    uint64_t v38 = v17;
    __int16 v39 = 2050;
    uint64_t v40 = v20;
    __int16 v41 = 2050;
    id v6 = v22;
    uint64_t v42 = v21;
    __int16 v43 = 2082;
    id v44 = [[[v9 UUIDString] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"WorkoutSession, event\", \"type\":%{public, location:escape_only}s, \"eventTime\":\"%{public}.6f\", \"eventType\":%{public}ld, \"workoutType\":%{public}ld, \"locationType\":%{public}ld, \"workoutMode\":%{public}ld, \"startTime\":\"%{public}.6f\", \"endTime\":\"%{public}.6f\", \"sessionID\":%{public, location:escape_only}s}", buf, 0x6Cu);
  }
  if (*((void *)a1 + 14) == 19 && (unint64_t)(*((void *)a1 + 15) - 1) <= 1)
  {
    id v18 = [objc_alloc((Class)CMSwimWorkout) initWithSessionId:v9 locationType:*((void *)a1 + 15) poolLength:v6 startDate:v8 endDate:a1[17]];
    [v18 setWorkoutMode:*((void *)a1 + 28)];
  }
  else
  {
    id v18 = [objc_alloc((Class)CMWorkout) initWithSessionId:v9 type:*((void *)a1 + 14) locationType:*((void *)a1 + 15) mode:*((void *)a1 + 28) startDate:v6 endDate:v8];
  }

  return v18;
}

char *sub_101265F94(void *a1, const unsigned __int8 *a2, uint64_t a3)
{
  id v6 = [a1 sessionId];
  if (v6) {
    [v6 getUUIDBytes:a3];
  }
  else {
    uuid_clear((unsigned __int8 *)a3);
  }
  int is_null = uuid_is_null(a2);
  uint64_t v8 = (unsigned __int8 *)(a3 + 16);
  if (is_null) {
    uuid_clear(v8);
  }
  else {
    uuid_copy(v8, a2);
  }
  *(void *)(a3 + 48) = [a1 type];
  *(void *)(a3 + 56) = [a1 locationType];
  *(void *)(a3 + 160) = [a1 mode];
  buf[0] = 0;
  sub_10006ACBC(v32, "ForceOneButtonWorkouts", buf, 0);
  if (v32[1]
    && ((+[CMWorkout workoutIsTypeWalking:](CMWorkout, "workoutIsTypeWalking:", *(void *)(a3 + 48)) & 1) != 0|| +[CMWorkout workoutIsTypeRunning:*(void *)(a3 + 48)]))
  {
    if (+[CMWorkout workoutIsTypeWalking:*(void *)(a3 + 48)])uint64_t v9 = 1; {
    else
    }
      uint64_t v9 = 2;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    uint64_t v10 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(const char **)(a3 + 48);
      uint64_t v12 = *(void *)(a3 + 56);
      *(_DWORD *)buf = 134218752;
      uint64_t v42 = v11;
      __int16 v43 = 2048;
      uint64_t v44 = v12;
      __int16 v45 = 2048;
      uint64_t v46 = v9;
      __int16 v47 = 2048;
      uint64_t v48 = 3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Forcing workout from workoutType: %zd, locationType: %zd, to workoutType: %zd, locationType: %zd", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      __int16 v25 = *(const char **)(a3 + 48);
      uint64_t v26 = *(void *)(a3 + 56);
      int v33 = 134218752;
      uint64_t v34 = v25;
      __int16 v35 = 2048;
      uint64_t v36 = v26;
      __int16 v37 = 2048;
      uint64_t v38 = v9;
      __int16 v39 = 2048;
      uint64_t v40 = 3;
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutSubscription::getWorkoutSettingsFromWorkoutObject(CMWorkout *, const uuid_t &, CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    *(void *)(a3 + 48) = v9;
    *(void *)(a3 + 56) = 3;
  }
  id v13 = +[CMSwimWorkout swimWorkoutInstance:a1];
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = [v13 location];
    [v14 poolLength];
    *(void *)(a3 + 64) = v15;
    *(void *)(a3 + 72) = v16;
  }
  id v17 = +[CMGenericWorkout genericWorkoutInstance:a1];
  if (v17)
  {
    id v18 = v17;
    uint64_t v31 = 0;
    if (sub_101014848((uint64_t)[v17 workoutLabel], &v31))
    {
      *(void *)(a3 + 64) = [v18 workoutLabel];
    }
    else
    {
      *(void *)(a3 + 64) = 3000;
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      __int16 v19 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v20 = (const char *)[v18 workoutLabel];
        *(_DWORD *)buf = 134217984;
        uint64_t v42 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Passed an invalid HKWorkoutActivityType of %lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        uint64_t v28 = (const char *)[v18 workoutLabel];
        int v33 = 134217984;
        uint64_t v34 = v28;
        __int16 v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLWorkoutSubscription::getWorkoutSettingsFromWorkoutObject(CMWorkout *, const uuid_t &, CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
    }
  }
  uint64_t result = (char *)+[CMFitnessPlusWorkout fitnessPlusWorkoutInstance:a1];
  *(unsigned char *)(a3 + 80) = 0;
  if (result)
  {
    int v22 = result;
    *(unsigned char *)(a3 + 80) = 1;
    *(void *)(a3 + 152) = [result mediaType];
    if ([v22 catalogWorkoutId]) {
      uint64_t v23 = (const char *)[v22 catalogWorkoutId];
    }
    else {
      uint64_t v23 = "Invalid";
    }
    if (strlen(v23) >= 0x40)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      int v24 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v42 = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "catalogWorkoutId string is too long, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        int v33 = 136315138;
        uint64_t v34 = v23;
        uint64_t v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLWorkoutSubscription::getWorkoutSettingsFromWorkoutObject(CMWorkout *, const uuid_t &, CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
    }
    return strncpy((char *)(a3 + 81), v23, 0x40uLL);
  }
  return result;
}

__n128 sub_1012665F0(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 24 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101267BBC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18);
  long long v9 = *a2;
  long long v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  long long v11 = a2[3];
  long long v12 = a2[4];
  long long v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  __n128 result = (__n128)a2[7];
  long long v15 = a2[8];
  long long v16 = a2[9];
  *(void *)(v8 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  *(__n128 *)(v8 + 112) = result;
  ++a1[5];
  return result;
}

uint64_t sub_1012666C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  sub_1006AC1AC(a1 + 40, (void *)(a2 + 40));
  return a1;
}

void sub_10126673C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101266758(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    long long v6 = *(_OWORD *)a4;
    long long v7 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 104) = v7;
    *(_OWORD *)(a1 + 88) = v6;
    long long v8 = *(_OWORD *)(a4 + 48);
    long long v9 = *(_OWORD *)(a4 + 64);
    long long v10 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a1 + 168) = v10;
    *(_OWORD *)(a1 + 152) = v9;
    *(_OWORD *)(a1 + 136) = v8;
    long long v11 = *(_OWORD *)(a4 + 112);
    long long v12 = *(_OWORD *)(a4 + 128);
    long long v13 = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a4 + 160);
    *(_OWORD *)(a1 + 232) = v13;
    *(_OWORD *)(a1 + 216) = v12;
    *(_OWORD *)(a1 + 200) = v11;
    long long v14 = *(_OWORD *)(a4 + 176);
    long long v15 = *(_OWORD *)(a4 + 192);
    long long v16 = *(_OWORD *)(a4 + 208);
    *(void *)(a1 + 312) = *(void *)(a4 + 224);
    *(_OWORD *)(a1 + 280) = v15;
    *(_OWORD *)(a1 + 296) = v16;
    *(_OWORD *)(a1 + 264) = v14;
    if (*(void *)(a4 + 16) == 15) {
      uuid_clear((unsigned __int8 *)(a1 + 168));
    }
    sub_101266C80(a1, (void *)a4);
    sub_100134750(__p, "kCLConnectionMessageWorkoutEvent");
    char v17 = sub_10012E364(a1);
    char v18 = v17;
    if (v34 < 0)
    {
      operator delete(*(void **)__p);
      if ((v18 & 1) == 0) {
        return;
      }
    }
    else if ((v17 & 1) == 0)
    {
      return;
    }
    if (!sub_1010143E0(a4) && (*(void *)(a4 + 16) & 0xFFFFFFFFFFFFFFFELL) != 0x14)
    {
      if (*(void *)(a4 + 112) == 4
        && (sub_100103240(), (sub_10010145C() & 1) == 0)
        && (unint64_t v24 = *(void *)(a4 + 16), v24 <= 0xB)
        && ((1 << v24) & 0xBCC) != 0)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        __int16 v25 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(void *)(a4 + 16);
          *(_DWORD *)long long __p = 134217984;
          *(void *)&__p[4] = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Suppressing workout event for cycling,%ld", __p, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          uint64_t v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v28);
          if (v28 != __p) {
            free(v28);
          }
        }
      }
      else
      {
        id v19 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:*(double *)(a4 + 24)];
        id v20 = sub_101265CE8((double *)a4, 0);
        uint64_t v21 = v20;
        if (v19 && v20 && [v20 sessionId])
        {
          v29[0] = CMReturnCode;
          v30[0] = +[NSNumber numberWithInteger:*(void *)(a4 + 16)];
          v30[1] = v19;
          v29[1] = CMWorkoutEventDate;
          v29[2] = CMWorkoutAttributes;
          v30[2] = v21;
          *(void *)long long __p = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:3];
          sub_1012670A0(a1);
        }
        else
        {
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_10231A600);
          }
          int v22 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
          {
            uint64_t v23 = *(void *)(a1 + 24);
            *(_DWORD *)long long __p = 138412546;
            *(void *)&__p[4] = v23;
            __int16 v32 = 2048;
            uint64_t v33 = a1;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Error delivering event, %@, %p", __p, 0x16u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_10231A600);
            }
            __int16 v27 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSubscription::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v27);
            if (v27 != __p) {
              free(v27);
            }
          }
        }
      }
    }
  }
}

void sub_101266C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101266C80(uint64_t a1, void *a2)
{
  if (sub_1010143F4((uint64_t)a2) == 1)
  {
    int v4 = 1;
  }
  else
  {
    if (sub_1010143F4((uint64_t)a2) != 2) {
      goto LABEL_6;
    }
    int v4 = 2;
  }
  *(_DWORD *)(a1 + 320) = v4;
LABEL_6:
  uint64_t v5 = a2[14];
  BOOL v7 = v5 == 23 || v5 == 37;
  uint64_t v8 = a2[2];
  BOOL v9 = v7 && v8 == 2;
  if (v9 || (uint64_t v10 = a2[28], v10 == 1) || (v11 = *(_DWORD *)(a1 + 320), v11 == 2))
  {
    uint64_t v13 = *(void *)(a1 + 48);
    long long v12 = (uint64_t *)(a1 + 48);
    if (!v13) {
      return;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231A600);
    }
    long long v14 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = a2[2];
      uint64_t v16 = a2[14];
      uint64_t v17 = a2[28];
      *(_DWORD *)buf = 134218496;
      uint64_t v27 = v15;
      __int16 v28 = 2048;
      uint64_t v29 = v16;
      __int16 v30 = 2048;
      uint64_t v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Workout, Releasing power assertion, event, %ld, type, %ld, mode, %ld", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      unint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::updateWorkoutStateAndPowerAssertion(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    int v18 = 0;
    goto LABEL_25;
  }
  if (v8 != 3) {
    LOBYTE(v7) = 0;
  }
  if (v7 || !v10 && v11 == 1)
  {
    uint64_t v19 = *(void *)(a1 + 48);
    long long v12 = (uint64_t *)(a1 + 48);
    if (v19)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231A600);
      }
      id v20 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = a2[2];
        uint64_t v22 = a2[14];
        uint64_t v23 = a2[28];
        *(_DWORD *)buf = 134218496;
        uint64_t v27 = v21;
        __int16 v28 = 2048;
        uint64_t v29 = v22;
        __int16 v30 = 2048;
        uint64_t v31 = v23;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Workout, Taking power assertion, event, %ld, type, %ld, mode, %ld", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_10231A600);
        }
        __int16 v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSubscription::updateWorkoutStateAndPowerAssertion(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      int v18 = 1;
LABEL_25:
      sub_100692850(*v12, v18);
    }
  }
}

void sub_1012670A0(uint64_t a1)
{
  sub_10048C758(&off_10231A770, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10126710C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101267124(uint64_t a1)
{
  sub_1000E9420(&off_10231A770, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_101267190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012671A8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012671D8(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_101267208(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

__n128 sub_101267238(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10231A650;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101267284(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10231A650;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1012672B4(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_1012672BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012672FC()
{
}

void sub_101267308(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_101267364(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_10126734C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101267364(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  long long v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231A6C0);
    }
    int v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231A6C0);
      }
    }
    long long v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_101267594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1012675B0(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1012675E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10231A700;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10126762C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10231A700;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10126765C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_101267664(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012676A4()
{
}

void sub_1012676B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  int v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  BOOL v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_101267750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101267774(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1012677F0(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1012677DC(_Unwind_Exception *a1)
{
  sub_100BF6674(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1012677F0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_101267A74(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_101267B64((uint64_t)v25, 0);
  return i;
}

void sub_101267A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101267B64((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_101267A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_101267AEC(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_101267AD4(_Unwind_Exception *a1)
{
  sub_101267B64(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_101267AEC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100BF5E2C((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101267B48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101267B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF66F4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_101267BBC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x18;
  unint64_t v4 = v2 - 24;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_101267E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101267ED4()
{
  sub_100134750(qword_102486910, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486910, (void *)&_mh_execute_header);
  uint64_t v0 = sub_100134750(qword_102486928, "com.apple.HealthKit");
  sub_100134750(v0 + 3, "com.apple.SessionTrackerApp");
  sub_100134750(qword_102486958, "/usr/local/bin/motmonObjc");

  return __cxa_atexit((void (*)(void *))sub_101260578, qword_102486928, (void *)&_mh_execute_header);
}

void sub_101267F98(_Unwind_Exception *a1)
{
  sub_101AAA84C(v1);
  _Unwind_Resume(a1);
}

void *sub_101267FAC(void *a1, void *a2)
{
  __n128 result = sub_10128519C(a1, a2);
  *__n128 result = off_10231A788;
  result[6] = 0;
  result[5] = 0;
  result[4] = result + 5;
  return result;
}

BOOL sub_101267FF0(uint64_t a1, uint64_t a2)
{
  double v21 = 0.0;
  unsigned int v3 = sub_1012852D0(a1, a2, &v21);
  unsigned int v4 = v3;
  unsigned __int16 v20 = v3;
  uint64_t v6 = a1 + 40;
  uint64_t v5 = *(void *)(a1 + 40);
  double v7 = 0.0;
  if (v5)
  {
    uint64_t v8 = a1 + 40;
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(v5 + 32);
      BOOL v10 = v9 >= v3;
      if (v9 >= v3) {
        uint64_t v11 = (uint64_t *)v5;
      }
      else {
        uint64_t v11 = (uint64_t *)(v5 + 8);
      }
      if (v10) {
        uint64_t v8 = v5;
      }
      uint64_t v5 = *v11;
    }
    while (*v11);
    if (v8 != v6 && v3 >= *(unsigned __int16 *)(v8 + 32)) {
      double v7 = *(double *)(v8 + 40);
    }
  }
  uint64_t v12 = (unsigned __int8 *)[*(id *)(a1 + 24) bytes];
  if ((unint64_t)[*(id *)(a1 + 24) length] <= (unint64_t)v4 >> 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = (v12[(unint64_t)v4 >> 1] >> (~(4 * v4) & 4)) & 0xF;
  }
  BOOL v14 = *(uint64_t **)&v21;
  double v15 = v21 - v7;
  double v16 = (double)v13;
  if (v21 - v7 >= (double)v13)
  {
    *(void *)buf = &v20;
    sub_1012683F0((uint64_t **)(v6 - 8), &v20, (uint64_t)&unk_101D0B290, (_WORD **)buf)[5] = v14;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231A7B8);
  }
  uint64_t v17 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v15 >= v16;
    __int16 v33 = 1024;
    int v34 = v20;
    __int16 v35 = 2048;
    double v36 = v7;
    __int16 v37 = 2048;
    double v38 = v21;
    __int16 v39 = 2048;
    unint64_t v40 = v13;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "shouldILog returned %d for tag %d, last %f now %f, threshold is %lu", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231A7B8);
    }
    int v22 = 67110144;
    BOOL v23 = v15 >= v16;
    __int16 v24 = 1024;
    int v25 = v20;
    __int16 v26 = 2048;
    double v27 = v7;
    __int16 v28 = 2048;
    double v29 = v21;
    __int16 v30 = 2048;
    unint64_t v31 = v13;
    unint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerRatePolicy::shouldILog(NSData *)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return v15 >= v16;
}

uint64_t sub_1012682FC(uint64_t a1)
{
  *(void *)a1 = off_10231A788;
  sub_1000F5BB0(a1 + 32, *(void **)(a1 + 40));

  return sub_101285220(a1);
}

void sub_101268354(uint64_t a1)
{
  *(void *)a1 = off_10231A788;
  sub_1000F5BB0(a1 + 32, *(void **)(a1 + 40));
  sub_101285220(a1);

  operator delete();
}

void sub_1012683C0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t **sub_1012683F0(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  double v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        double v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        double v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1012684B4(uint64_t a1)
{
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 200) = 117;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 256) = a1 + 264;
  *(void *)(a1 + 192) = off_10231A808;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 391) = 0;
  *(_DWORD *)(a1 + 396) = 1000;
  *(_OWORD *)(a1 + 528) = xmmword_101DAF830;
  *(_OWORD *)(a1 + 544) = unk_101DAF840;
  *(_OWORD *)(a1 + 560) = xmmword_101DAF850;
  *(_OWORD *)(a1 + 576) = unk_101DAF860;
  *(_OWORD *)(a1 + 464) = xmmword_101DAF7F0;
  *(_OWORD *)(a1 + 480) = unk_101DAF800;
  *(_OWORD *)(a1 + 496) = xmmword_101DAF810;
  *(_OWORD *)(a1 + 512) = unk_101DAF820;
  *(_OWORD *)(a1 + 400) = xmmword_101DAF7B0;
  *(_OWORD *)(a1 + 416) = unk_101DAF7C0;
  *(_OWORD *)(a1 + 432) = xmmword_101DAF7D0;
  *(_OWORD *)(a1 + 448) = unk_101DAF7E0;
  *(_DWORD *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_101D0BD20;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 644) = 0;
  *(void *)(a1 + 649) = 0;
  *(unsigned char *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 672) = xmmword_101DAF870;
  *(_OWORD *)(a1 + 688) = unk_101DAF880;
  *(_OWORD *)(a1 + 704) = xmmword_101DAF890;
  *(_OWORD *)(a1 + 720) = unk_101DAF8A0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  *(unsigned char *)(a1 + 732) = 1;
  unsigned __int8 v3 = 0;
  sub_10006ACBC(v4, "ElevationVerbose", &v3, 0);
  *(unsigned char *)(a1 + 392) = v4[1];
  return a1;
}

void sub_10126862C(_Unwind_Exception *a1)
{
  sub_10041F48C(v1 + 43);
  sub_10041F48C(v3);
  sub_100419F34(v2);
  sub_100507624(v1 + 18);
  sub_1006AAD08(v1 + 12);
  sub_100507624(v1 + 6);
  sub_1006AAD08(v1);
  _Unwind_Resume(a1);
}

void sub_101268680(uint64_t a1, uint64_t a2)
{
  ++*(void *)(a1 + 664);
  long long v4 = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 448) = v6;
  *(_OWORD *)(a1 + 400) = v4;
  *(_OWORD *)(a1 + 416) = v5;
  long long v7 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 512) = v9;
  *(_OWORD *)(a1 + 464) = v7;
  *(_OWORD *)(a1 + 480) = v8;
  long long v10 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 144);
  long long v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 576) = v12;
  *(_OWORD *)(a1 + 528) = v10;
  *(_OWORD *)(a1 + 544) = v11;
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a2 + 164);
  sub_101268758(a1, a2);
  if (*(uint64_t *)(a1 + 664) >= 21)
  {
    double v13 = *(double *)(a2 + 120);
    if (v13 > 0.0 && v13 <= 20.0)
    {
      unsigned int v14 = *(_DWORD *)(a1 + 592);
      if (v14 > 4 || ((1 << v14) & 0x19) == 0)
      {
        double v15 = *(double *)(a2 + 112);
        if (v15 < *(double *)(a1 + 608)) {
          *(double *)(a1 + 608) = v15;
        }
        if (v15 > *(double *)(a1 + 616)) {
          *(double *)(a1 + 616) = v15;
        }
      }
    }
  }
}

void sub_101268758(uint64_t a1, uint64_t a2)
{
  long long v4 = (void *)(a1 + 96);
  unint64_t v5 = *(void *)(a1 + 136);
  if (v5 >= 0x19)
  {
    unint64_t v6 = *(void *)(a1 + 128);
    double v7 = *(double *)(*(void *)(*(void *)(a1 + 104) + 8 * (v6 / 0x15)) + 192 * (v6 % 0x15) + 120);
    if (v7 > 0.0 && v7 <= 20.0) {
      --*(_DWORD *)(a1 + 600);
    }
    *(void *)(a1 + 128) = v6 + 1;
    *(void *)(a1 + 136) = v5 - 1;
    sub_100AD8A38(a1 + 96, 1);
  }
  sub_1006B5BA0(v4, (long long *)a2);
  double v9 = *(double *)(a2 + 120);
  if (v9 > 0.0 && v9 <= 20.0) {
    ++*(_DWORD *)(a1 + 600);
  }
}

double sub_101268834(uint64_t a1)
{
  return *(double *)(a1 + 608);
}

double sub_10126883C(uint64_t a1)
{
  return *(double *)(a1 + 616);
}

void sub_101268844(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(unsigned char *)(a1 + 640) = 1;
  unint64_t v6 = (void *)(a1 + 144);
  unint64_t v7 = *(void *)(a1 + 184);
  if (v7)
  {
    double v8 = *(double *)(a2 + 8);
    double v9 = *(double *)(*(void *)(*(void *)(a1 + 152) + (((v7 + *(void *)(a1 + 176) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                   + (((v7 + *(void *)(a1 + 176) - 1) & 0x3F) << 6)
                   + 8);
    if (v8 <= v9 || v8 - v9 > 20.0)
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      long long v11 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 152) + ((*(void *)(a1 + 176) >> 3) & 0x1FFFFFFFFFFFFFF8))
                        + ((*(void *)(a1 + 176) & 0x3FLL) << 6)
                        + 8);
        *(_DWORD *)buf = 134218240;
        uint64_t v16 = v12;
        __int16 v17 = 2048;
        uint64_t v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "WorkoutElevationFusion,phone source time rolled back, now %f, prev, %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10231A7D8);
        }
        unsigned int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLElevationChangeEntry CLWorkoutElevationFusion::feedPhoneBaroElevation(const CLElevationChangeEntry &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      sub_101268AFC(a1);
      unint64_t v7 = *(void *)(a1 + 184);
    }
    if (v7 >= 0xA)
    {
      ++*(void *)(a1 + 176);
      *(void *)(a1 + 184) = v7 - 1;
      sub_10017E0A8((uint64_t)v6, 1);
    }
  }
  sub_1000A01D4(v6, a2);
  sub_101268D80(a1, a3);
}

double sub_101268AFC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 10;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 21;
  }
  *(void *)(a1 + 32) = v6;
LABEL_8:
  unint64_t v7 = *(void ***)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 88) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 64);
      unint64_t v7 = (void **)(*(void *)(a1 + 56) + 8);
      *(void *)(a1 + 56) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 32;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 64;
  }
  *(void *)(a1 + 80) = v11;
LABEL_15:
  uint64_t v12 = *(void ***)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 112);
  *(void *)(a1 + 136) = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 112);
      uint64_t v12 = (void **)(*(void *)(a1 + 104) + 8);
      *(void *)(a1 + 104) = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 10;
  }
  else
  {
    if (v14 >> 3 != 2) {
      goto LABEL_22;
    }
    uint64_t v16 = 21;
  }
  *(void *)(a1 + 128) = v16;
LABEL_22:
  __int16 v17 = *(void ***)(a1 + 152);
  uint64_t v18 = *(void *)(a1 + 160);
  *(void *)(a1 + 184) = 0;
  unint64_t v19 = v18 - (void)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      uint64_t v20 = *(void *)(a1 + 160);
      __int16 v17 = (void **)(*(void *)(a1 + 152) + 8);
      *(void *)(a1 + 152) = v17;
      unint64_t v19 = v20 - (void)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    uint64_t v21 = 32;
  }
  else
  {
    if (v19 >> 3 != 2) {
      goto LABEL_29;
    }
    uint64_t v21 = 64;
  }
  *(void *)(a1 + 176) = v21;
LABEL_29:
  int v22 = *(void ***)(a1 + 304);
  uint64_t v23 = *(void *)(a1 + 312);
  *(void *)(a1 + 336) = 0;
  unint64_t v24 = v23 - (void)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      uint64_t v25 = *(void *)(a1 + 312);
      int v22 = (void **)(*(void *)(a1 + 304) + 8);
      *(void *)(a1 + 304) = v22;
      unint64_t v24 = v25 - (void)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    uint64_t v26 = 256;
  }
  else
  {
    if (v24 >> 3 != 2) {
      goto LABEL_36;
    }
    uint64_t v26 = 512;
  }
  *(void *)(a1 + 328) = v26;
LABEL_36:
  double v27 = *(void ***)(a1 + 352);
  uint64_t v28 = *(void *)(a1 + 360);
  *(void *)(a1 + 384) = 0;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 360);
      double v27 = (void **)(*(void *)(a1 + 352) + 8);
      *(void *)(a1 + 352) = v27;
      unint64_t v29 = v30 - (void)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 256;
    goto LABEL_42;
  }
  if (v29 >> 3 == 2)
  {
    uint64_t v31 = 512;
LABEL_42:
    *(void *)(a1 + 376) = v31;
  }
  sub_10041F400((void *)(a1 + 192));
  *(_DWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 393) = 0;
  *(_DWORD *)(a1 + 396) = 1000;
  double result = 0.0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 596) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_101D0BD20;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 664) = 0;
  return result;
}

void sub_101268D80(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v4 = sub_101269B5C(a1);
  int v5 = v4;
  double v6 = *(double *)(a1 + 680);
  if (v6 == 0.0) {
    goto LABEL_14;
  }
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (!v7) {
      goto LABEL_14;
    }
    unint64_t v8 = v7 + *(void *)(a1 + 80) - 1;
    uint64_t v9 = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 184);
    if (!v10) {
      goto LABEL_14;
    }
    unint64_t v8 = v10 + *(void *)(a1 + 176) - 1;
    uint64_t v9 = *(void *)(a1 + 152);
  }
  if (v6 <= *(double *)(*(void *)(v9 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v8 & 0x3F) << 6) + 8))
  {
LABEL_14:
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    sub_101269EC8(a1, v4, a2);
    int v16 = *(_DWORD *)(a1 + 396);
    if (v16 == v5) {
      return;
    }
    if (v5 != 2 || v16 != 1)
    {
      if (v5 == 1000)
      {
        switch(v16)
        {
          case 3:
            ++*(_DWORD *)(a1 + 816);
            break;
          case 2:
            ++*(_DWORD *)(a1 + 812);
            break;
          case 1:
            ++*(_DWORD *)(a1 + 808);
            break;
        }
        goto LABEL_18;
      }
      if (v5 == 3)
      {
        ++*(_DWORD *)(a1 + 804);
        goto LABEL_18;
      }
      if (v5 != 1 || v16 != 2) {
        goto LABEL_18;
      }
    }
    ++*(_DWORD *)(a1 + 800);
LABEL_18:
    *(_DWORD *)(a1 + 396) = v5;
    return;
  }
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231A7D8);
  }
  uint64_t v11 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 680);
    *(_DWORD *)buf = 134217984;
    uint64_t v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "WorkoutElevationFusion,unexpected timestamp on source switch,fElevationWatch.startTime,%f", buf, 0xCu);
  }
  uint64_t v13 = (_OWORD *)(a1 + 672);
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    }
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLElevationChangeEntry CLWorkoutElevationFusion::tick()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  long long v14 = v13[1];
  *a2 = *v13;
  a2[1] = v14;
  long long v15 = v13[3];
  a2[2] = v13[2];
  a2[3] = v15;
}

void sub_101269080(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double v6 = (void *)(a1 + 48);
  unint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    double v8 = *(double *)(a2 + 8);
    double v9 = *(double *)(*(void *)(*(void *)(a1 + 56) + (((v7 + *(void *)(a1 + 80) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                   + (((v7 + *(void *)(a1 + 80) - 1) & 0x3F) << 6)
                   + 8);
    if (v8 <= v9 || v8 - v9 > 20.0)
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      uint64_t v11 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + ((*(void *)(a1 + 80) >> 3) & 0x1FFFFFFFFFFFFFF8))
                        + ((*(void *)(a1 + 80) & 0x3FLL) << 6)
                        + 8);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "WorkoutElevationFusion,watch source time rolled back, now %f, prev, %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10231A7D8);
        }
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLElevationChangeEntry CLWorkoutElevationFusion::feedWatchBaroElevation(const CLElevationChangeEntry &)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
      sub_101268AFC(a1);
      unint64_t v7 = *(void *)(a1 + 88);
    }
    if (v7 >= 0xA)
    {
      unint64_t v14 = *(void *)(a1 + 80);
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v14 & 0x3F) << 6) + 52) == 3)
      {
        double v15 = *(double *)(*(void *)(*(void *)(a1 + 8) + 8 * (*(void *)(a1 + 32) / 0x15uLL))
                        + 192 * (*(void *)(a1 + 32) % 0x15uLL)
                        + 104);
        if (v15 <= 0.0 || v15 > 32.5) {
          --*(_DWORD *)(a1 + 624);
        }
      }
      *(void *)(a1 + 80) = v14 + 1;
      *(void *)(a1 + 88) = v7 - 1;
      sub_10017E0A8((uint64_t)v6, 1);
    }
  }
  sub_1000A01D4(v6, a2);
  unint64_t v16 = *(void *)(a1 + 40);
  if (v16 >= 0xA)
  {
    ++*(void *)(a1 + 32);
    *(void *)(a1 + 40) = v16 - 1;
    sub_100AD8A38(a1, 1);
  }
  if (*(double *)(a2 + 8) - *(double *)(a1 + 400) >= 2.56)
  {
    memset(&v25.u64[1], 0, 72);
    memset(&buf[8], 0, 88);
    *(void *)buf = 0xFFEFFFFFFFFFFFFFLL;
    int64x2_t v24 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v25 = v24;
    sub_1006B5BA0((void *)a1, (long long *)buf);
  }
  else
  {
    sub_1006B5BA0((void *)a1, (long long *)(a1 + 400));
  }
  sub_1012694A4(a1, *(double *)(a2 + 8));
  sub_101269584((void *)a1, v17, v18, v19);
  sub_101269690(a1);
  sub_10126997C((void *)a1, v20, v21);
  if (*(unsigned char *)(a2 + 52) == 3 && !*(unsigned char *)(a1 + 393)) {
    ++*(_DWORD *)(a1 + 624);
  }
  sub_101268D80(a1, a3);
}

uint64_t sub_1012694A4(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 136);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 96;
    do
    {
      unint64_t v6 = *(void *)(v4 + 128);
      uint64_t v7 = (v6 * (unsigned __int128)0x8618618618618619) >> 64;
      double v8 = (double *)(*(void *)(*(void *)(v4 + 104) + 8 * ((v7 + ((v6 - v7) >> 1)) >> 4))
                    + 192 * (v6 - 21 * ((v7 + ((v6 - v7) >> 1)) >> 4)));
      if (*v8 + 25.0 >= a2) {
        break;
      }
      double v9 = v8[15];
      if (v9 > 0.0 && v9 <= 20.0) {
        --*(_DWORD *)(v4 + 600);
      }
      *(void *)(v4 + 128) = v6 + 1;
      *(void *)(v4 + 136) = v2 - 1;
      double result = sub_100AD8A38(v5, 1);
      uint64_t v2 = *(void *)(v4 + 136);
    }
    while (v2);
  }
  return result;
}

void sub_101269584(void *a1, double a2, double a3, double a4)
{
  uint64_t v4 = a1[11];
  if (v4)
  {
    uint64_t v5 = a1[5];
    if (v5)
    {
      unint64_t v6 = *(void *)(a1[1] + 8 * ((v5 + a1[4] - 1) / 0x15uLL)) + 192 * ((v5 + a1[4] - 1) % 0x15uLL);
      double v7 = *(double *)(v6 + 104);
      if (v7 <= 0.0 || (HIDWORD(v8) = 1077952512, v7 > 32.5))
      {
        uint64_t v10 = (uint64_t)(a1 + 24);
        sub_10126AF48(v10, &dbl_101DAF8B0);
      }
      else
      {
        uint64_t v9 = *(void *)(a1[7] + (((unint64_t)(v4 + a1[10] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
           + (((v4 + a1[10] - 1) & 0x3F) << 6);
        LODWORD(v8) = *(_DWORD *)(v9 + 16);
        LODWORD(a4) = *(_DWORD *)(v9 + 20);
        double v11 = *(double *)(v6 + 96) + ((double)v8 - (double)*(unint64_t *)&a4) / -100.0;
        sub_10126AF48((uint64_t)(a1 + 24), &v11);
      }
    }
  }
}

void sub_101269690(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    unint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8 * ((v2 + *(void *)(a1 + 32) - 1) / 0x15uLL))
       + 192 * ((v2 + *(void *)(a1 + 32) - 1) % 0x15uLL);
    double v4 = *(double *)(v3 + 104);
    BOOL v5 = v4 > 0.0;
    if (v4 > 32.5) {
      BOOL v5 = 0;
    }
    *(unsigned char *)(a1 + 393) = v5;
    double v6 = *(double *)(v3 + 120);
    BOOL v7 = v6 <= 0.0 || v6 > 20.0;
    LOBYTE(v2) = !v7 && ((unsigned int v8 = *(_DWORD *)(a1 + 592), v8 > 4) || ((1 << v8) & 0x19) == 0);
  }
  else
  {
    *(unsigned char *)(a1 + 393) = 0;
  }
  *(unsigned char *)(a1 + 394) = v2;
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231A7D8);
  }
  uint64_t v9 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v10 = *(void *)(a1 + 88) + *(void *)(a1 + 80) - 1;
    LODWORD(v10) = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8))
                                      + ((v10 & 0x3F) << 6)
                                      + 52);
    int v11 = *(unsigned __int8 *)(a1 + 393);
    int v12 = *(unsigned __int8 *)(a1 + 394);
    *(_DWORD *)buf = 67109632;
    int v15 = v10;
    __int16 v16 = 1024;
    int v17 = v11;
    __int16 v18 = 1024;
    int v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,BaroQuality,%d,DEMSourceAvailable,%d,GPSSourceAvailable,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutElevationFusion::updateSourceAvailability()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

void sub_10126997C(void *a1, double a2, double a3)
{
  unint64_t v4 = a1[11];
  if (v4 >= 2)
  {
    unint64_t v5 = v4 + a1[10];
    uint64_t v6 = a1[7];
    uint64_t v7 = *(void *)(v6 + (((v5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v5 - 1) & 0x3F) << 6);
    uint64_t v8 = *(void *)(v6 + (((v5 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v5 - 2) & 0x3F) << 6);
    LODWORD(a2) = *(_DWORD *)(v7 + 16);
    LODWORD(a3) = *(_DWORD *)(v7 + 20);
    *(double *)&unint64_t v9 = (double)*(unint64_t *)&a2;
    *(double *)&unint64_t v10 = (double)*(unint64_t *)&a3;
    double v11 = *(double *)&v9 - *(double *)&v10;
    LODWORD(v9) = *(_DWORD *)(v8 + 16);
    LODWORD(v10) = *(_DWORD *)(v8 + 20);
    double v12 = (double)v9;
    double v13 = (double)v10;
    unint64_t v14 = a1[42];
    if (v14 >= 7)
    {
      ++a1[41];
      a1[42] = v14 - 1;
      sub_10007F07C((uint64_t)(a1 + 37), 1);
    }
    double v27 = (v11 + v13 - v12) / 100.0;
    sub_10017CCF0(a1 + 37, &v27);
  }
  unint64_t v15 = a1[5];
  if (v15 >= 2)
  {
    unint64_t v16 = v15 + a1[4];
    uint64_t v17 = a1[1];
    uint64_t v18 = ((v16 - 1) * (unsigned __int128)0x8618618618618619) >> 64;
    unint64_t v19 = (v18 + ((v16 - 1 - v18) >> 1)) >> 4;
    uint64_t v20 = *(void *)(v17 + 8 * v19) + 192 * (v16 - 1 - 21 * v19);
    double v21 = *(double *)(v20 + 96);
    double v22 = *(double *)(v20 + 104);
    unint64_t v23 = *(void *)(v17 + 8 * ((v16 - 2) / 0x15)) + 192 * ((v16 - 2) % 0x15);
    double v24 = *(double *)(v23 + 96);
    double v25 = *(double *)(v23 + 104);
    unint64_t v26 = a1[48];
    if (v26 >= 7)
    {
      ++a1[47];
      a1[48] = v26 - 1;
      sub_10007F07C((uint64_t)(a1 + 43), 1);
    }
    if (v22 <= 0.0 || v22 > 32.5 || v25 <= 0.0 || v25 > 32.5)
    {
      sub_10017CCF0(a1 + 43, &dbl_101DAF8B0);
    }
    else
    {
      double v27 = v21 - v24;
      sub_10017CCF0(a1 + 43, &v27);
    }
  }
}

uint64_t sub_101269B5C(uint64_t a1)
{
  uint64_t v1 = 0;
  *(unsigned char *)(a1 + 599) = 0;
  if (*(unsigned char *)(a1 + 640)) {
    return v1;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 400);
  BOOL v6 = v5 <= 0.0;
  double v7 = vabdd_f64(Current, v5);
  if (!v6 && v7 < 25.0)
  {
    if (*(_DWORD *)(a1 + 576) == 4)
    {
      double v11 = *(double *)(a1 + 584);
      BOOL v12 = v11 <= 1.0 && v11 >= 0.0;
    }
    else
    {
      BOOL v12 = 0;
    }
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    }
    unint64_t v15 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      int v16 = *(_DWORD *)(a1 + 576);
      uint64_t v17 = *(void *)(a1 + 584);
      *(_DWORD *)buf = 134218752;
      double v20 = Current;
      __int16 v21 = 1024;
      BOOL v22 = v12;
      __int16 v23 = 1024;
      int v24 = v16;
      __int16 v25 = 2048;
      uint64_t v26 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "WorkoutElevationFusion,timestamp,%.3f,onRunningTrack,%d,proximity,%u,distanceToTrackMeters,%.1f", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLElevationSource CLWorkoutElevationFusion::chooseSource()", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (v12) {
      return 4;
    }
  }
  if (!*(void *)(a1 + 88)) {
    return 1000;
  }
  if ((sub_1000A16E8() & 0x1000000000) == 0) {
    return 1;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 624);
  if (v9 < 8)
  {
    if (v9 > 2) {
      goto LABEL_22;
    }
    int v13 = *(_DWORD *)(a1 + 628);
    if (v13 <= 1) {
      int v13 = 1;
    }
    int v10 = v13 - 1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 600) < 0x14u) {
      goto LABEL_22;
    }
    int v10 = 75;
  }
  *(_DWORD *)(a1 + 628) = v10;
LABEL_22:
  if (*(_DWORD *)(a1 + 600) <= 0xCu) {
    *(_DWORD *)(a1 + 628) = 0;
  }
  unint64_t v14 = *(void *)(a1 + 88) + *(void *)(a1 + 80) - 1;
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8))
                          + ((v14 & 0x3F) << 6)
                          + 52);
  if (v1 != 1)
  {
    if (v1 == 3)
    {
      if (*(unsigned char *)(a1 + 393))
      {
        *(unsigned char *)(a1 + 599) = 1;
        return 2;
      }
      return 1000;
    }
    if (*(unsigned char *)(a1 + 393))
    {
      uint64_t v1 = 1;
      if (!sub_10126B038((unsigned char *)a1, a1 + 192))
      {
        if (sub_10126B424((void *)a1, (void *)(a1 + 344))) {
          return 1;
        }
        else {
          return 2;
        }
      }
    }
    else
    {
      uint64_t v1 = 1;
      *(unsigned char *)(a1 + 599) = 1;
    }
  }
  return v1;
}

void sub_101269EC8(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 88);
  double v7 = 0.0;
  if (v6 < 2)
  {
    int v11 = 0;
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    double v20 = -1.0;
    double v19 = 0.0;
    double v18 = -1.0;
    double v17 = 0.0;
    double v23 = -1.0;
    double v22 = 0.0;
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + (((v6 + *(void *)(a1 + 80) - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
       + (((v6 + *(void *)(a1 + 80) - 1) & 0x3F) << 6);
    unsigned int v9 = *(_DWORD *)(v8 + 16);
    unsigned int v10 = *(_DWORD *)(v8 + 20);
    int v11 = *(unsigned __int8 *)(v8 + 52);
    uint64_t v12 = *(void *)(a1 + 32) + *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = ((unint64_t)(v12 - 1) * (unsigned __int128)0x8618618618618619) >> 64;
    unint64_t v15 = (v14 + ((unint64_t)(v12 - 1 - v14) >> 1)) >> 4;
    int v16 = (double *)(*(void *)(v13 + 8 * v15) + 192 * (v12 - 1 - 21 * v15));
    double v17 = v16[12];
    double v18 = v16[13];
    double v19 = v16[14];
    double v20 = v16[15];
    unint64_t v21 = *(void *)(v13 + 8 * ((v12 - 2) / 0x15uLL)) + 192 * ((v12 - 2) % 0x15uLL);
    double v22 = *(double *)(v21 + 96);
    double v23 = *(double *)(v21 + 104);
  }
  switch(a2)
  {
    case 0:
      if (!*(_DWORD *)(a1 + 396))
      {
        unint64_t v24 = *(void *)(a1 + 184);
        if (v24 >= 2)
        {
          unint64_t v25 = v24 + *(void *)(a1 + 176);
          uint64_t v26 = *(void *)(a1 + 152);
          uint64_t v27 = *(void *)(v26 + (((v25 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v25 - 1) & 0x3F) << 6);
          uint64_t v28 = *(void *)(v26 + (((v25 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((v25 - 2) & 0x3F) << 6);
          LODWORD(v19) = *(_DWORD *)(v27 + 16);
          LODWORD(v17) = *(_DWORD *)(v27 + 20);
          *(double *)&unint64_t v29 = (double)*(unint64_t *)&v17;
          double v19 = (double)*(unint64_t *)&v19 - *(double *)&v29;
          LODWORD(v29) = *(_DWORD *)(v28 + 16);
          LODWORD(v22) = *(_DWORD *)(v28 + 20);
          double v17 = (double)*(unint64_t *)&v22 - (double)v29;
          double v7 = v19 + v17;
          ++*(_DWORD *)(a1 + 792);
        }
      }
      goto LABEL_46;
    case 1:
      if (v6 < 2) {
        goto LABEL_45;
      }
      uint64_t v30 = *(void *)(*(void *)(a1 + 56) + (((v6 + *(void *)(a1 + 80) - 2) >> 3) & 0x1FFFFFFFFFFFFFF8))
          + (((v6 + *(void *)(a1 + 80) - 2) & 0x3F) << 6);
      if (*(unsigned char *)(v30 + 52) == 3)
      {
        if (*(_DWORD *)(a1 + 396) != 2) {
          goto LABEL_45;
        }
        if (v18 <= 0.0) {
          goto LABEL_45;
        }
        HIDWORD(v19) = 1077952512;
        if (v18 > 32.5 || v23 <= 0.0 || v23 > 32.5) {
          goto LABEL_45;
        }
        double v19 = v17 - v22;
        HIDWORD(v17) = 1079574528;
        double v7 = v19 * 100.0;
        ++*(_DWORD *)(a1 + 760);
      }
      else
      {
        *(double *)&unint64_t v39 = (double)v10;
        double v19 = (double)v9 - (double)v10;
        LODWORD(v39) = *(_DWORD *)(v30 + 16);
        LODWORD(v22) = *(_DWORD *)(v30 + 20);
        double v17 = (double)*(unint64_t *)&v22 - (double)v39;
        double v7 = v19 + v17;
        if (v11 == 2)
        {
          if (*(unsigned char *)(a1 + 393))
          {
            if (*(unsigned char *)(a1 + 598)) {
              ++*(_DWORD *)(a1 + 744);
            }
            else {
              ++*(_DWORD *)(a1 + 752);
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 756);
          }
        }
        else if (v11 == 1)
        {
          ++*(_DWORD *)(a1 + 740);
        }
      }
      goto LABEL_46;
    case 2:
      int v31 = *(_DWORD *)(a1 + 396);
      if (v31 == 3)
      {
        double v17 = 20.0;
        if (v20 <= 0.0 || v20 > 20.0) {
          goto LABEL_45;
        }
        switch(v11)
        {
          case 3:
            ++*(_DWORD *)(a1 + 776);
            break;
          case 2:
            ++*(_DWORD *)(a1 + 772);
            break;
          case 1:
            ++*(_DWORD *)(a1 + 768);
            break;
        }
        double v19 = v19 - *(double *)(a1 + 632);
      }
      else
      {
        if (v31 != 2)
        {
          if (v31 != 1) {
            goto LABEL_45;
          }
          if (v23 <= 0.0) {
            goto LABEL_45;
          }
          HIDWORD(v19) = 1077952512;
          if (v23 > 32.5) {
            goto LABEL_45;
          }
        }
        if (v11 == 3) {
          ++*(_DWORD *)(a1 + 760);
        }
        else {
          ++*(_DWORD *)(a1 + 748);
        }
        double v19 = v17 - v22;
      }
      HIDWORD(v17) = 1079574528;
      double v7 = v19 * 100.0;
      goto LABEL_46;
    case 3:
      if (*(_DWORD *)(a1 + 396) == 3)
      {
        double v17 = 20.0;
        if (v20 > 0.0 && v20 <= 20.0)
        {
          switch(v11)
          {
            case 3:
              ++*(_DWORD *)(a1 + 776);
              break;
            case 2:
              ++*(_DWORD *)(a1 + 772);
              break;
            case 1:
              ++*(_DWORD *)(a1 + 768);
              break;
          }
          double v17 = v19 - *(double *)(a1 + 632);
          double v7 = v17 * 100.0;
          *(double *)(a1 + 632) = v19;
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v33 = *(void *)(a1 + 128);
        unint64_t v34 = v33 + *(void *)(a1 + 136);
        uint64_t v35 = *(void *)(a1 + 104);
        uint64_t v36 = *(void *)(a1 + 112);
        __int16 v37 = (void *)(v35 + 8 * (v34 / 0x15));
        if (v36 == v35) {
          unint64_t v38 = 0;
        }
        else {
          unint64_t v38 = *v37 + 192 * (v34 % 0x15);
        }
        unint64_t v46 = v33 / 0x15;
        unint64_t v47 = v33 % 0x15;
        double v19 = 20.0;
        while (1)
        {
          uint64_t v48 = v36 == v35 ? 0 : *(void *)(v35 + 8 * v46) + 192 * v47;
          if (v38 == v48) {
            break;
          }
          if (v38 == *v37)
          {
            uint64_t v49 = *--v37;
            double v17 = *(double *)(v49 + 3960);
            unint64_t v38 = v49 + 4032;
          }
          else
          {
            double v17 = *(double *)(v38 - 72);
          }
          if (v17 > 0.0 && v17 <= 20.0)
          {
            double v19 = *(double *)(v38 - 80);
            *(double *)(a1 + 632) = v19;
            break;
          }
          v38 -= 192;
        }
      }
      switch(v11)
      {
        case 3:
          ++*(_DWORD *)(a1 + 788);
          break;
        case 2:
          ++*(_DWORD *)(a1 + 784);
          break;
        case 1:
          ++*(_DWORD *)(a1 + 780);
          break;
      }
LABEL_46:
      ++*(_DWORD *)(a1 + 736);
      *(_DWORD *)(a1 + 712) = a2;
      if (*(unsigned char *)(a1 + 599) && (HIDWORD(v19) = 1081671680, v7 > 400.0))
      {
        double v7 = 400.0;
      }
      else if (v7 <= 0.0)
      {
        LODWORD(v17) = *(_DWORD *)(a1 + 692);
        *(_DWORD *)(a1 + 692) = (fabs(v7) + (double)*(unint64_t *)&v17);
        if (a2) {
          goto LABEL_51;
        }
        goto LABEL_53;
      }
      LODWORD(v19) = *(_DWORD *)(a1 + 688);
      *(_DWORD *)(a1 + 688) = (v7 + (double)*(unint64_t *)&v19);
      if (a2)
      {
LABEL_51:
        unint64_t v41 = v6 + *(void *)(a1 + 80) - 1;
        uint64_t v42 = (void *)(a1 + 56);
        goto LABEL_54;
      }
LABEL_53:
      unint64_t v41 = *(void *)(a1 + 184) + *(void *)(a1 + 176) - 1;
      uint64_t v42 = (void *)(a1 + 152);
LABEL_54:
      *(void *)(a1 + 680) = *(void *)(*(void *)(*v42 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8))
                                        + ((v41 & 0x3F) << 6)
                                        + 8);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      __int16 v43 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        int v53 = a2;
        __int16 v54 = 2048;
        double v55 = v7;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,source,%d,deltaH,%f", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10231A7D8);
        }
        uint64_t v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLElevationChangeEntry CLWorkoutElevationFusion::fuseElevation(CLElevationSource)", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
      long long v44 = *(_OWORD *)(a1 + 688);
      *a3 = *(_OWORD *)(a1 + 672);
      a3[1] = v44;
      long long v45 = *(_OWORD *)(a1 + 720);
      a3[2] = *(_OWORD *)(a1 + 704);
      a3[3] = v45;
      return;
    case 4:
      ++*(_DWORD *)(a1 + 796);
      goto LABEL_46;
    default:
      if (a2 == 1000) {
LABEL_45:
      }
        ++*(_DWORD *)(a1 + 764);
      goto LABEL_46;
  }
}

uint64_t sub_10126A694(uint64_t result)
{
  *(unsigned char *)(result + 656) = 0;
  return result;
}

double sub_10126A69C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 656))
  {
    sub_10113072C(&v41, 0);
    if (sub_101130FDC((uint64_t)&v41))
    {
      float v15 = v40;
      *(float *)(a1 + 644) = sub_1001C1F30(v15, 101320.0);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      int v16 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        double v28 = v39;
        __int16 v29 = 2048;
        double v30 = v40;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "updateWatchPressureWithPhoneElevationChange: timestamp,%f,pressure,%f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10231A7D8);
        }
        unint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      if (*(double *)(a2 + 8) >= v39)
      {
        *(void *)(a1 + 648) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 656) = 1;
        if (*(unsigned char *)(a1 + 392))
        {
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10231A7D8);
          }
          double v20 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
          {
            double v21 = *(float *)(a1 + 644);
            int v22 = *(_DWORD *)(a1 + 648);
            int v23 = *(_DWORD *)(a1 + 652);
            *(_DWORD *)buf = 134219008;
            double v28 = v39;
            __int16 v29 = 2048;
            double v30 = v40;
            __int16 v31 = 2048;
            double v32 = v21;
            __int16 v33 = 1024;
            int v34 = v22;
            __int16 v35 = 1024;
            int v36 = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "set baseline elevation changes,timestamp,%f,pressure,%f,elevation,%f,ascend,%d,descend,%d", buf, 0x2Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_10231A7D8);
            }
            uint64_t v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v26);
            if (v26 != (char *)buf) {
              free(v26);
            }
          }
        }
        sub_101130828(&v41);
        goto LABEL_2;
      }
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      double v17 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "updateWatchPressureWithPhoneElevationChange: phone startTime rolls back from the endTime of the most recent record", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_31:
        sub_101130828(&v41);
        return -1.0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 == -1)
      {
LABEL_41:
        unint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
        goto LABEL_31;
      }
    }
    else
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      double v18 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "updateWatchPressureWithPhoneElevationChange: cannot fetch the most recent query", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 == -1) {
        goto LABEL_41;
      }
    }
    dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    goto LABEL_41;
  }
LABEL_2:
  int v4 = *(_DWORD *)(a1 + 652) - *(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 648);
  float v5 = *(float *)(a1 + 644) + (float)((float)v4 / 100.0);
  double v6 = sub_1014BE58C(v5, 101320.0);
  if (*(unsigned char *)(a1 + 392))
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    }
    double v7 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *(double *)(a2 + 8);
      int v9 = *(_DWORD *)(a2 + 16);
      int v10 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)buf = 134219264;
      double v28 = v8;
      __int16 v29 = 2048;
      double v30 = v6;
      __int16 v31 = 2048;
      double v32 = v5;
      __int16 v33 = 1024;
      int v34 = v4;
      __int16 v35 = 1024;
      int v36 = v9;
      __int16 v37 = 1024;
      int v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "compensate watch pressure,timestamp,%f,pressure,%f,elevation,%f,cmHeightDelta,%d,phoneAscend,%d,phoneDescend,%d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      uint64_t v11 = *(void *)(a2 + 8);
      int v12 = *(_DWORD *)(a2 + 16);
      int v13 = *(_DWORD *)(a2 + 20);
      int v41 = 134219264;
      uint64_t v42 = v11;
      __int16 v43 = 2048;
      double v44 = v6;
      __int16 v45 = 2048;
      double v46 = v5;
      __int16 v47 = 1024;
      int v48 = v4;
      __int16 v49 = 1024;
      int v50 = v12;
      __int16 v51 = 1024;
      int v52 = v13;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  return v6;
}

void sub_10126AF1C(_Unwind_Exception *a1)
{
}

void sub_10126AF48(uint64_t a1, double *a2)
{
  if (*a2 != *(double *)(a1 + 96)) {
    ++*(_DWORD *)(a1 + 88);
  }
  float v5 = sub_10007EF64((uint64_t **)(a1 + 64), a2);
  sub_10007EFF4((void *)(a1 + 16), &v5);
  if (*(void *)(a1 + 56) > (unint64_t)*(unsigned int *)(a1 + 8))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 24) + ((*(void *)(a1 + 48) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(void *)(a1 + 48) & 0x1FFLL));
    if (*(double *)(v3 + 32) != *(double *)(a1 + 96))
    {
      int v4 = *(_DWORD *)(a1 + 88);
      if (v4 <= 1) {
        int v4 = 1;
      }
      *(_DWORD *)(a1 + 88) = v4 - 1;
    }
    sub_1000F0A30((uint64_t **)(a1 + 64), (uint64_t *)v3);
    operator delete((void *)v3);
    *(int64x2_t *)(a1 + 48) = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_101D0A740);
    sub_10007F07C(a1 + 16, 1);
  }
}

BOOL sub_10126B038(unsigned char *a1, uint64_t a2)
{
  unint64_t v38 = 0xFFEFFFFFFFFFFFFFLL;
  if (*(_DWORD *)(a2 + 80) < 0xBu) {
    return 0;
  }
  sub_10126C100((uint64_t)&v33, (void *)(a2 + 16));
  float v5 = (uint64_t *)(v34 + 8 * ((unint64_t)(v36 + v37) >> 9));
  uint64_t v6 = *v5;
  uint64_t v7 = (v36 + v37) & 0x1FF;
  uint64_t v8 = *v5 + 8 * v7;
  if (v35 == v34) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *v5 + 8 * v7;
  }
  uint64_t v10 = v9 - v6;
  uint64_t v11 = (v9 - v6) >> 3;
  if (v10 < 89) {
    uint64_t v12 = v5[-((unint64_t)(522 - v11) >> 9)] + 8 * (~(522 - (_WORD)v11) & 0x1FF);
  }
  else {
    uint64_t v12 = *(uint64_t *)((char *)v5 + (((unint64_t)(v11 - 11) >> 6) & 0x3FFFFFFFFFFFFF8))
  }
        + 8 * ((v11 - 11) & 0x1FF);
  if (v35 == v34) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v8;
  }
  if (v13 == v12)
  {
    unsigned int v14 = 0;
    double v23 = -INFINITY;
  }
  else
  {
    unsigned int v14 = 0;
    double v15 = -1.79769313e308;
    double v16 = 1.79769313e308;
    uint64_t v17 = *v5;
    uint64_t v18 = v13;
    double v19 = (uint64_t *)(v34 + 8 * ((unint64_t)(v36 + v37) >> 9));
    do
    {
      if (v18 == v17)
      {
        uint64_t v21 = *--v19;
        double v22 = *(double *)(*(void *)(v21 + 4088) + 32);
        if (v22 != -1.79769313e308)
        {
          if (v22 < v16) {
            double v16 = v22;
          }
          if (v15 < v22) {
            double v15 = v22;
          }
          ++v14;
        }
        uint64_t v17 = *v19;
        uint64_t v18 = *v19 + 4096;
      }
      else
      {
        double v20 = *(double *)(*(void *)(v18 - 8) + 32);
        if (v20 != -1.79769313e308)
        {
          if (v20 < v16) {
            double v16 = *(double *)(*(void *)(v18 - 8) + 32);
          }
          if (v15 < v20) {
            double v15 = *(double *)(*(void *)(v18 - 8) + 32);
          }
          ++v14;
        }
      }
      v18 -= 8;
    }
    while (v18 != v12);
    double v23 = v15 - v16;
  }
  double v24 = dbl_101DAF790[a1[596] == 0];
  a1[596] = v23 < v24;
  if (v13 == v6) {
    uint64_t v13 = *(v5 - 1) + 4096;
  }
  uint64_t v25 = *(void *)(*(void *)(v13 - 8) + 32);
  sub_10126C060(a2, &v38);
  a1[597] = 0;
  BOOL v27 = v23 < v24 && v14 > 2;
  a1[598] = v27;
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231A7D8);
  }
  double v28 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    int v29 = a1[598];
    *(_DWORD *)buf = 67109888;
    int v48 = v29;
    __int16 v49 = 2048;
    double v50 = v23;
    __int16 v51 = 2048;
    unint64_t v52 = v38;
    __int16 v53 = 2048;
    uint64_t v54 = v25;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,ResidualCheck,agree,%d,max-min,%f,median,%f,residual,%f", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    }
    int v31 = a1[598];
    int v39 = 67109888;
    int v40 = v31;
    __int16 v41 = 2048;
    double v42 = v23;
    __int16 v43 = 2048;
    unint64_t v44 = v38;
    __int16 v45 = 2048;
    uint64_t v46 = v25;
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutElevationFusion::baroAgreesWith(const T &) [T = CLFlexibleMedianFilter<double>]", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  BOOL v2 = a1[598] != 0;
  sub_10041F48C(&v33);
  return v2;
}

void sub_10126B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10041F48C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_10126B424(void *a1, void *a2)
{
  uint64_t v2 = a1[42];
  if (v2) {
    BOOL v3 = a2[5] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  unint64_t v5 = a2[4];
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = (double **)(v6 + 8 * (v5 >> 9));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = &(*v8)[a2[4] & 0x1FFLL];
  }
  unint64_t v10 = a1[41];
  uint64_t v11 = a1[38];
  uint64_t v12 = a1[39];
  uint64_t v13 = (void *)(v11 + 8 * (v10 >> 9));
  if (v12 == v11)
  {
    unint64_t v15 = v10 + v2;
    double v16 = (void *)(v11 + 8 * (v15 >> 9));
  }
  else
  {
    unsigned int v14 = (double *)(*v13 + 8 * (a1[41] & 0x1FFLL));
    unint64_t v15 = v10 + v2;
    double v16 = (void *)(v11 + 8 * (v15 >> 9));
    uint64_t v17 = *v16 + 8 * (v15 & 0x1FF);
    if (v14 != (double *)v17)
    {
      uint64_t v18 = *v8;
      double v19 = 0.0;
      double v20 = 0.0;
      double v21 = 0.0;
      uint64_t v22 = v6 + 8 * (v5 >> 9);
      double v23 = 0.0;
      double v24 = (void *)(v11 + 8 * (v10 >> 9));
      do
      {
        double v25 = *v9++;
        double v26 = v25;
        if (v25 == -1.79769313e308) {
          double v26 = -0.0;
        }
        else {
          double v23 = v23 + 1.0;
        }
        double v27 = *v14;
        if (*v14 == -1.79769313e308) {
          double v27 = -0.0;
        }
        else {
          double v21 = v21 + 1.0;
        }
        if ((char *)v9 - (char *)v18 == 4096)
        {
          double v28 = *(double **)(v22 + 8);
          v22 += 8;
          uint64_t v18 = v28;
          uint64_t v9 = v28;
        }
        if ((double *)((char *)++v14 - *v24) == (double *)4096)
        {
          int v29 = (double *)v24[1];
          ++v24;
          unsigned int v14 = v29;
        }
        double v20 = v20 + v26;
        double v19 = v19 + v27;
      }
      while (v14 != (double *)v17);
      double v30 = v19 / v21;
      double v31 = 0.0;
      if (v21 <= 0.0) {
        double v30 = 0.0;
      }
      if (v23 > 0.0) {
        double v31 = v20 / v23;
      }
      goto LABEL_30;
    }
  }
  double v30 = 0.0;
  double v31 = 0.0;
LABEL_30:
  if (v7 == v6) {
    double v32 = 0;
  }
  else {
    double v32 = &(*v8)[v5 & 0x1FF];
  }
  double v33 = 0.0;
  if (v12 == v11)
  {
    double v36 = 0.0;
  }
  else
  {
    uint64_t v34 = (double *)(*v13 + 8 * (v10 & 0x1FF));
    uint64_t v35 = *v16 + 8 * (v15 & 0x1FF);
    double v36 = 0.0;
    if (v34 != (double *)v35)
    {
      uint64_t v37 = *v8;
      do
      {
        double v38 = *v32++;
        double v39 = vabdd_f64(v38, v31);
        if (v38 == -1.79769313e308) {
          double v40 = -0.0;
        }
        else {
          double v40 = v39;
        }
        double v41 = vabdd_f64(*v34, v30);
        if (*v34 == -1.79769313e308) {
          double v42 = -0.0;
        }
        else {
          double v42 = v41;
        }
        if ((char *)v32 - (char *)v37 == 4096)
        {
          __int16 v43 = v8[1];
          ++v8;
          uint64_t v37 = v43;
          double v32 = v43;
        }
        if ((double *)((char *)++v34 - *v13) == (double *)4096)
        {
          unint64_t v44 = (double *)v13[1];
          ++v13;
          uint64_t v34 = v44;
        }
        double v36 = v36 + v40;
        double v33 = v33 + v42;
      }
      while (v34 != (double *)v35);
    }
  }
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231A7D8);
  }
  __int16 v45 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218240;
    double v48 = v33;
    __int16 v49 = 2048;
    double v50 = v36;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "WorkoutElevationFusion,VariabilityCheck,Baro,%f,Source,%f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    }
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutElevationFusion::baroLessVariable(const std::deque<double> &) const", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  return v33 < v36 + 1.5;
}

double sub_10126B80C(_DWORD *a1, int a2)
{
  BOOL v3 = a1 + 184;
  if (a1[184])
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231A7D8);
    }
    unint64_t v5 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      int v6 = a1[185];
      int v7 = a1[186];
      int v8 = a1[187];
      int v9 = a1[188];
      int v10 = a1[189];
      int v11 = a1[190];
      int v12 = a1[191];
      int v13 = a1[192];
      int v14 = a1[193];
      int v15 = a1[194];
      int v16 = a1[195];
      int v17 = a1[196];
      int v18 = a1[197];
      int v19 = a1[200];
      int v20 = a1[201];
      int v21 = a1[202];
      int v22 = a1[203];
      int v23 = a1[204];
      int v24 = a1[198];
      int v25 = a1[199];
      *(_DWORD *)buf = 67114240;
      int v111 = a2;
      __int16 v112 = 1024;
      int v113 = v6;
      __int16 v114 = 1024;
      int v115 = v7;
      __int16 v116 = 1024;
      int v117 = v8;
      __int16 v118 = 1024;
      int v119 = v9;
      __int16 v120 = 1024;
      int v121 = v10;
      __int16 v122 = 1024;
      int v123 = v11;
      __int16 v124 = 1024;
      int v125 = v12;
      __int16 v126 = 1024;
      int v127 = v13;
      __int16 v128 = 1024;
      int v129 = v14;
      __int16 v130 = 1024;
      int v131 = v15;
      __int16 v132 = 1024;
      int v133 = v16;
      __int16 v134 = 1024;
      int v135 = v17;
      __int16 v136 = 1024;
      int v137 = v18;
      __int16 v138 = 1024;
      int v139 = v19;
      __int16 v140 = 1024;
      int v141 = v20;
      __int16 v142 = 1024;
      int v143 = v21;
      __int16 v144 = 1024;
      int v145 = v22;
      __int16 v146 = 1024;
      int v147 = v23;
      __int16 v148 = 1024;
      int v149 = v24;
      __int16 v150 = 1024;
      int v151 = v25;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "WorkoutElevationFusion,WorkoutType,%d,BaroGood,%d,BaroUnkDEMAgree,%d,DEMBaroUnk,%d,BaroUnkDEMDisagree,%d,BaroUnkNoDEM,%d,DEMBaroBad,%d,None,%d,GPSBaroGood,%d,GPSBaroUnk,%d,GPSBaroBad,%d,GPSUnvailBaroGood,%d,GPSUnvailBaroUnk,%d,GPSUnvailBaroBad,%d,TransBaroDEM,%d,TransToGPS,%d,TransBaroToNone,%d,TransDEMToNone,%d,TransGPSToNone,%d,PhoneSource,%d,RunningTrackSource,%d", buf, 0x80u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231A7D8);
      }
      int v41 = a1[185];
      int v42 = a1[186];
      int v43 = a1[187];
      int v44 = a1[188];
      int v45 = a1[189];
      int v46 = a1[190];
      int v47 = a1[191];
      int v48 = a1[192];
      int v49 = a1[193];
      int v50 = a1[194];
      int v51 = a1[195];
      int v52 = a1[196];
      int v53 = a1[197];
      int v54 = a1[200];
      int v55 = a1[201];
      int v56 = a1[202];
      int v57 = a1[203];
      int v58 = a1[204];
      int v59 = a1[198];
      int v60 = a1[199];
      int v68 = 67114240;
      int v69 = a2;
      __int16 v70 = 1024;
      int v71 = v41;
      __int16 v72 = 1024;
      int v73 = v42;
      __int16 v74 = 1024;
      int v75 = v43;
      __int16 v76 = 1024;
      int v77 = v44;
      __int16 v78 = 1024;
      int v79 = v45;
      __int16 v80 = 1024;
      int v81 = v46;
      __int16 v82 = 1024;
      int v83 = v47;
      __int16 v84 = 1024;
      int v85 = v48;
      __int16 v86 = 1024;
      int v87 = v49;
      __int16 v88 = 1024;
      int v89 = v50;
      __int16 v90 = 1024;
      int v91 = v51;
      __int16 v92 = 1024;
      int v93 = v52;
      __int16 v94 = 1024;
      int v95 = v53;
      __int16 v96 = 1024;
      int v97 = v54;
      __int16 v98 = 1024;
      int v99 = v55;
      __int16 v100 = 1024;
      int v101 = v56;
      __int16 v102 = 1024;
      int v103 = v57;
      __int16 v104 = 1024;
      int v105 = v58;
      __int16 v106 = 1024;
      int v107 = v59;
      __int16 v108 = 1024;
      int v109 = v60;
      __int16 v61 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutElevationFusion::logAndClearStatistics(CLMotionActivity::Type)", "%s\n", v61);
      if (v61 != (char *)buf) {
        free(v61);
      }
    }
    unsigned int v26 = *v3;
    if (*v3 >= 0x2BDu)
    {
      long long v27 = *(_OWORD *)(a1 + 185);
      long long v28 = *(_OWORD *)(a1 + 189);
      v29.i64[0] = DWORD2(v27);
      v29.i64[1] = HIDWORD(v27);
      float64x2_t v30 = vcvtq_f64_u64(v29);
      v29.i64[0] = v27;
      v29.i64[1] = DWORD1(v27);
      float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x4085E00000000000uLL);
      float64x2_t v32 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v26), 0);
      int32x4_t v33 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))), (int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(v30, v31), v32))));
      v29.i64[0] = DWORD2(v28);
      v29.i64[1] = HIDWORD(v28);
      float64x2_t v34 = vcvtq_f64_u64(v29);
      v29.i64[0] = v28;
      v29.i64[1] = DWORD1(v28);
      *(int32x4_t *)(a1 + 185) = v33;
      *(int32x4_t *)(a1 + 189) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))), (int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(v34, v31), v32))));
      long long v35 = *(_OWORD *)(a1 + 193);
      v29.i64[0] = DWORD2(v35);
      v29.i64[1] = HIDWORD(v35);
      float64x2_t v36 = vcvtq_f64_u64(v29);
      v29.i64[0] = v35;
      v29.i64[1] = DWORD1(v35);
      *(int32x4_t *)(a1 + 193) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))), (int32x4_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(v36, v31), v32))));
      *(void *)&long long v35 = *(void *)(a1 + 197);
      v29.i64[0] = v35;
      v29.i64[1] = DWORD1(v35);
      *(int32x2_t *)&long long v35 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndpq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v29), v31), v32))));
      *(void *)(a1 + 197) = v35;
      LODWORD(v35) = a1[199];
      a1[199] = vcvtpd_u64_f64((double)(unint64_t)v35 * 700.0 / (double)v26);
    }
    __int16 v63 = _NSConcreteStackBlock;
    uint64_t v64 = 3221225472;
    __int16 v65 = sub_10126BD60;
    BOOL v66 = &unk_1022A6368;
    __int16 v67 = a1;
    AnalyticsSendEventLazy();
    uint64_t v37 = sub_1001A58C0();
    long long v38 = *((_OWORD *)v3 + 1);
    v62[0] = *(_OWORD *)v3;
    v62[1] = v38;
    long long v39 = *((_OWORD *)v3 + 3);
    v62[2] = *((_OWORD *)v3 + 2);
    v62[3] = v39;
    sub_101432CB0(v37, v62);
  }
  double result = 0.0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *(_OWORD *)BOOL v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)a1 + 50) = 0u;
  a1[204] = 0;
  return result;
}

NSDictionary *sub_10126BD60(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 32);
  v3[0] = @"numBaroBadDEMAvailDEMUsed";
  v4[0] = +[NSNumber numberWithUnsignedInt:v1[190]];
  v3[1] = @"numBaroGoodBaroUsed";
  v4[1] = +[NSNumber numberWithUnsignedInt:v1[185]];
  v3[2] = @"numBaroUnkBaroDEMAgreeBaroUsed";
  v4[2] = +[NSNumber numberWithUnsignedInt:v1[186]];
  v3[3] = @"numBaroUnkBaroDEMDisagreeBaroUsed";
  unsigned __int8 v4[3] = +[NSNumber numberWithUnsignedInt:v1[188]];
  v3[4] = @"numBaroUnkBaroDEMDisagreeDEMUsed";
  void v4[4] = +[NSNumber numberWithUnsignedInt:v1[187]];
  v3[5] = @"numBaroUnkDEMUnavailBaroUsed";
  v4[5] = +[NSNumber numberWithUnsignedInt:v1[189]];
  v3[6] = @"numEpochs";
  v4[6] = +[NSNumber numberWithUnsignedInt:v1[184]];
  v3[7] = @"numGPSSelectedGPSAvailGPSUsedBaroBad";
  v4[7] = +[NSNumber numberWithUnsignedInt:v1[194]];
  v3[8] = @"numGPSSelectedGPSAvailGPSUsedBaroGood";
  v4[8] = +[NSNumber numberWithUnsignedInt:v1[192]];
  v3[9] = @"numGPSSelectedGPSAvailGPSUsedBaroUnk";
  v4[9] = +[NSNumber numberWithUnsignedInt:v1[193]];
  v3[10] = @"numGPSSelectedGPSUnavailNoUpdateBaroBad";
  v4[10] = +[NSNumber numberWithUnsignedInt:v1[197]];
  v3[11] = @"numGPSSelectedGPSUnavailNoUpdateBaroGood";
  v4[11] = +[NSNumber numberWithUnsignedInt:v1[195]];
  v3[12] = @"numGPSSelectedGPSUnavailNoUpdateBaroUnk";
  v4[12] = +[NSNumber numberWithUnsignedInt:v1[196]];
  v3[13] = @"numNoSource";
  v4[13] = +[NSNumber numberWithUnsignedInt:v1[191]];
  v3[14] = @"numPhoneSourceUsed";
  v4[14] = +[NSNumber numberWithUnsignedInt:v1[198]];
  v3[15] = @"numRunningTrackUsed";
  v4[15] = +[NSNumber numberWithUnsignedInt:v1[199]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:16];
}

void sub_10126BF98(uint64_t a1)
{
  *(_DWORD *)(a1 + 88) = 0;
}

void sub_10126BFC0(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_10126BFF0(uint64_t a1)
{
  *(void *)a1 = off_1022B2000;
  sub_1000F5BB0(a1 + 64, *(void **)(a1 + 72));
  sub_10041F48C((void *)(a1 + 16));

  operator delete();
}

uint64_t sub_10126C060(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 80)) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 88);
  if (v2 < 2) {
    return 0;
  }
  float v4 = (double)v2 * 0.5;
  int v5 = vcvtms_s32_f32(v4);
  int v6 = *(double **)(a1 + 64);
  if (v5 < 1)
  {
    int v9 = *(double **)(a1 + 64);
  }
  else
  {
    int v7 = 0;
    do
    {
      if (v6[4] != *(double *)(a1 + 96)) {
        ++v7;
      }
      int v8 = (double *)*((void *)v6 + 1);
      if (v8)
      {
        do
        {
          int v9 = v8;
          int v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (double *)*((void *)v6 + 2);
          BOOL v10 = *(void *)v9 == (void)v6;
          int v6 = v9;
        }
        while (!v10);
      }
      int v6 = v9;
    }
    while (v7 < v5);
  }
  *a2 = *((void *)v9 + 4);
  return 1;
}

uint64_t sub_10126C100(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  int v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    int v8 = 0;
    int v11 = 0;
    BOOL v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    int v8 = (uint64_t *)(*(void *)v7 + 8 * (v4 & 0x1FF));
    unint64_t v9 = a2[5] + v4;
    BOOL v10 = (char *)(v5 + 8 * (v9 >> 9));
    int v11 = (uint64_t *)(*(void *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_10126C1AC((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10126C198(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_10126C1AC(void *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(void *)a2) >> 3);
  }
  return sub_10126C1E0(a1, a2, a3, v5);
}

void *sub_10126C1E0(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10126C314(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  int v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  double result = sub_100B83A3C((uint64_t)v23, a4);
  if (v14 != v16)
  {
    uint64_t v17 = a1[5];
    do
    {
      if (v13 == result) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4096;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        int v19 = (void *)v14;
        do
        {
          uint64_t v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            int v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }
        while (v19 != (void *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result) {
        break;
      }
      uint64_t v22 = v13[1];
      ++v13;
      uint64_t v14 = v22;
    }
    while (v22 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_10126C314(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64x2_t v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          float64x2_t v31 = &v29[8 * (v28 >> 2)];
          float64x2_t v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            long long v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)long long v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          int v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          long long v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        BOOL v66 = (char *)a1[2];
        do
        {
          __int16 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              int v81 = &v79[8 * (v78 >> 2)];
              __int16 v82 = (uint64_t *)a1[1];
              BOOL v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                BOOL v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                BOOL v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              int v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                BOOL v66 = (char *)a1[1];
              }
              int v77 = &v66[-8 * (v74 >> 1)];
              BOOL v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)BOOL v66 = v69;
          BOOL v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int v91 = a1 + 3;
      if (v13) {
        int v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        int v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        __int16 v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        long long v39 = (void *)a1[1];
        double v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              int v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              int v51 = (uint64_t *)__p[1];
              double v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                double v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                int v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)int v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                double v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                double v40 = (char *)__p[1];
              }
              int v47 = &v40[-8 * (v44 >> 1)];
              double v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)double v40 = *v39;
          double v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          long long v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      int v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      int v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_10126C82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10126C8A0(uint64_t a1, uint64_t a2)
{
  sub_100F109B0(a1, 2);
  void *v3 = off_10231A850;
  v3[8] = a2;
}

BOOL sub_10126C8F0(uint64_t a1)
{
  return *(double *)(a1 + 24) > 50.0;
}

uint64_t (***sub_10126C908(uint64_t a1, double a2))(void, double *)
{
  double v3 = a2;
  double result = *(uint64_t (****)(void, double *))(a1 + 64);
  if (result) {
    return (uint64_t (***)(void, double *))(**result)(result, &v3);
  }
  return result;
}

BOOL sub_10126C958(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24) > 50.0;
}

void *sub_10126C970(void *a1, unsigned __int8 a2)
{
  unsigned __int8 v7 = a2;
  sub_10126C9D4(&v7, &v5);
  double v3 = v6;
  *a1 = v5;
  a1[1] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v6) {
      sub_1000DB0A0(v6);
    }
  }
  return a1;
}

void *sub_10126C9D4@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1A0uLL);
  double result = sub_10126CA30(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10126CA1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10126CA30(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10231A898;
  sub_100D6CDDC(a1 + 3, *a2);
  return a1;
}

void sub_10126CA7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10126CA90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231A898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10126CAB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231A898;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10126CB04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

double sub_10126CBE4(uint64_t a1)
{
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double result = 2.84809589e-306;
  *(_OWORD *)(a1 + 100) = xmmword_101DAF940;
  return result;
}

uint64_t sub_10126CC08(uint64_t a1)
{
  unint64_t v6 = (void **)(a1 + 72);
  sub_1001DCABC(&v6);
  int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_10126CC78(uint64_t a1)
{
  return (-1030792151 * *(_DWORD *)(a1 + 96) + 85899345) <= 0xA3D70A2
      && *(void *)(a1 + 8) - *(void *)a1 == 6000;
}

unint64_t sub_10126CCC0(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = a2 + 16;
  unint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = *(float **)(a2 + 8);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = *(float **)a2;
    uint64_t v11 = ((uint64_t)v8 - *(void *)a2) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      int v15 = (char *)sub_10017EA34(v6, v14);
      uint64_t v10 = *(float **)a2;
      unint64_t v8 = *(float **)(a2 + 8);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v16 = (float *)&v15[4 * v11];
    uint64_t v17 = &v15[4 * v14];
    *uint64_t v16 = a3;
    unint64_t v9 = v16 + 1;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8-- - 1);
      *((_DWORD *)v16-- - 1) = v18;
    }
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *unint64_t v8 = a3;
    unint64_t v9 = v8 + 1;
  }
  *(void *)(a2 + 8) = v9;
  uint64_t v19 = *(float **)a2;
  unint64_t result = ((unint64_t)v9 - *(void *)a2) >> 2;
  if ((int)result >= 1501)
  {
    uint64_t v21 = &v19[(result - 1500)];
    size_t v22 = (char *)v9 - (char *)v21;
    if (v22) {
      memmove(*(void **)a2, v21, v22);
    }
    uint64_t v23 = *(float **)a2;
    *(void *)(a2 + 8) = (char *)v19 + v22;
    unint64_t result = (unint64_t)((char *)v19 + v22 - (char *)v23) >> 2;
  }
  *(_DWORD *)(a1 + 96) = (*(_DWORD *)(a1 + 96) + 1) % 25;
  return result;
}

double sub_10126CE24(uint64_t a1)
{
  *(void *)(a1 + 8) = *(void *)a1;
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  sub_1001DCB10((uint64_t *)(a1 + 72));
  *(_DWORD *)(a1 + 96) = 0;
  double result = 2.84809589e-306;
  *(_OWORD *)(a1 + 100) = xmmword_101DAF940;
  return result;
}

void sub_10126CE74(float **a1@<X1>, float **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)a1[1] - (char *)*a1;
  unint64_t v6 = v5 >> 2;
  if (v5)
  {
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v5 >> 2;
    }
    float v8 = 0.0;
    do
    {
      float v9 = *v4++;
      float v8 = v8 + fabsf(v9);
      --v7;
    }
    while (v7);
  }
  else
  {
    float v8 = 0.0;
  }
  float v10 = sub_100DA14A4((uint64_t)a1);
  float v11 = (float)v6;
  unint64_t v12 = *a1;
  uint64_t v13 = (char *)a1[1] - (char *)*a1;
  unint64_t v14 = v13 >> 2;
  if (v13)
  {
    if (v14 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v13 >> 2;
    }
    float v16 = 0.0;
    do
    {
      float v17 = *v12++;
      float v16 = (float)(v17 - v10) * (float)(v17 - v10) + v16;
      --v15;
    }
    while (v15);
  }
  else
  {
    float v16 = 0.0;
  }
  int v18 = a2[2];
  uint64_t v19 = a2[1];
  float v20 = v8 / v11;
  if (v19 >= v18)
  {
    size_t v22 = *a2;
    uint64_t v23 = v19 - *a2;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62) {
      goto LABEL_50;
    }
    uint64_t v25 = (char *)v18 - (char *)v22;
    if (v25 >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      long long v27 = (char *)sub_10017EA34((uint64_t)(a2 + 2), v26);
      size_t v22 = *a2;
      uint64_t v19 = a2[1];
    }
    else
    {
      long long v27 = 0;
    }
    unint64_t v28 = (float *)&v27[4 * v23];
    int v18 = (float *)&v27[4 * v26];
    *unint64_t v28 = v20;
    uint64_t v21 = v28 + 1;
    while (v19 != v22)
    {
      int v29 = *((_DWORD *)v19-- - 1);
      *((_DWORD *)v28-- - 1) = v29;
    }
    *a2 = v28;
    a2[1] = v21;
    a2[2] = v18;
    if (v22)
    {
      operator delete(v22);
      int v18 = a2[2];
    }
  }
  else
  {
    float *v19 = v20;
    uint64_t v21 = v19 + 1;
  }
  float v30 = v16 / (float)v14;
  a2[1] = v21;
  if (v21 < v18)
  {
    *uint64_t v21 = v30;
    float64x2_t v31 = v21 + 1;
    goto LABEL_49;
  }
  float64x2_t v32 = *a2;
  uint64_t v33 = v21 - *a2;
  unint64_t v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 62) {
LABEL_50:
  }
    sub_1001D7FD4();
  uint64_t v35 = (char *)v18 - (char *)v32;
  if (v35 >> 1 > v34) {
    unint64_t v34 = v35 >> 1;
  }
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v36 = v34;
  }
  if (v36)
  {
    uint64_t v37 = (char *)sub_10017EA34((uint64_t)(a2 + 2), v36);
    float64x2_t v32 = *a2;
    uint64_t v21 = a2[1];
  }
  else
  {
    uint64_t v37 = 0;
  }
  uint64_t v38 = (float *)&v37[4 * v33];
  long long v39 = (float *)&v37[4 * v36];
  *uint64_t v38 = v30;
  float64x2_t v31 = v38 + 1;
  while (v21 != v32)
  {
    int v40 = *((_DWORD *)v21-- - 1);
    *((_DWORD *)v38-- - 1) = v40;
  }
  *a2 = v38;
  a2[1] = v31;
  a2[2] = v39;
  if (v32) {
    operator delete(v32);
  }
LABEL_49:
  a2[1] = v31;
}

void sub_10126D0A4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10126D0C0(void *a1)
{
  float v2 = sub_100B8648C((uint64_t)a1);
  double v3 = (void **)(a1 + 3);
  uint64_t v4 = (float *)a1[4];
  for (uint64_t i = 1475; i != 1500; ++i)
  {
    float v6 = *(float *)(*a1 + 4 * i) - v2;
    unint64_t v7 = a1[5];
    if ((unint64_t)v4 >= v7)
    {
      float v8 = (float *)*v3;
      uint64_t v9 = ((char *)v4 - (unsigned char *)*v3) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        sub_1001D7FD4();
      }
      uint64_t v11 = v7 - (void)v8;
      if (v11 >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = (char *)sub_10017EA34((uint64_t)(a1 + 5), v12);
        float v8 = (float *)a1[3];
        uint64_t v4 = (float *)a1[4];
      }
      else
      {
        uint64_t v13 = 0;
      }
      unint64_t v14 = (float *)&v13[4 * v9];
      *unint64_t v14 = v6;
      uint64_t v15 = v14 + 1;
      while (v4 != v8)
      {
        int v16 = *((_DWORD *)v4-- - 1);
        *((_DWORD *)v14-- - 1) = v16;
      }
      a1[3] = v14;
      a1[4] = v15;
      a1[5] = &v13[4 * v12];
      if (v8) {
        operator delete(v8);
      }
      uint64_t v4 = v15;
    }
    else
    {
      *v4++ = v6;
    }
    a1[4] = v4;
  }
  float v17 = (char *)*v3;
  unint64_t v18 = (unint64_t)((char *)v4 - (unsigned char *)*v3) >> 2;
  if ((int)v18 < 501)
  {
    uint64_t v21 = (char *)*v3;
  }
  else
  {
    uint64_t v19 = (float *)&v17[4 * (v18 - 500)];
    int64_t v20 = (char *)v4 - (char *)v19;
    if (v4 != v19) {
      memmove(*v3, v19, (char *)v4 - (char *)v19);
    }
    uint64_t v21 = (char *)*v3;
    uint64_t v4 = (float *)&v17[v20];
    a1[4] = &v17[v20];
    float v17 = v21;
  }
  if ((char *)v4 - v21 == 2000)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    long long __p = 0;
    sub_10010F834(&__p, v17, (uint64_t)v4, 0x1F4uLL);
    sub_10126CE74((float **)&__p, (float **)v28);
    if (__p)
    {
      unint64_t v26 = __p;
      operator delete(__p);
    }
    size_t v22 = a1 + 9;
    unint64_t v23 = a1[10];
    if (v23 >= a1[11])
    {
      uint64_t v24 = sub_10126D348(v22, (uint64_t)v28);
    }
    else
    {
      sub_100ACDDA8((uint64_t)v22, (uint64_t)v28);
      uint64_t v24 = v23 + 24;
    }
    a1[10] = v24;
    if (v28[0])
    {
      v28[1] = v28[0];
      operator delete(v28[0]);
    }
  }
}

void sub_10126D2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
  {
    void *v12 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126D2F8(uint64_t result, float a2)
{
  float v2 = *(float *)(result + 108);
  if (v2 > a2) {
    float v2 = a2;
  }
  if (*(float *)(result + 112) >= a2) {
    a2 = *(float *)(result + 112);
  }
  *(float *)(result + 108) = v2;
  *(float *)(result + 112) = a2;
  return result;
}

uint64_t sub_10126D314(uint64_t result, float a2)
{
  float v2 = *(float *)(result + 100);
  if (v2 > a2) {
    float v2 = a2;
  }
  if (*(float *)(result + 104) >= a2) {
    a2 = *(float *)(result + 104);
  }
  *(float *)(result + 100) = v2;
  *(float *)(result + 104) = a2;
  return result;
}

float sub_10126D330(uint64_t a1)
{
  return *(float *)(a1 + 112) - *(float *)(a1 + 108);
}

float sub_10126D33C(uint64_t a1)
{
  return *(float *)(a1 + 104) - *(float *)(a1 + 100);
}

uint64_t sub_10126D348(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_10010F834(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_10126D460(a1, v14);
  uint64_t v12 = a1[1];
  sub_1001DD2D0((uint64_t)v14);
  return v12;
}

void sub_10126D44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001DD2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10126D460(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10126D4D8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10126D4D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_10126D57C((uint64_t)v11);
  return v9;
}

uint64_t sub_10126D57C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DD288(a1);
  }
  return a1;
}

double sub_10126D5B4(double **a1, char a2)
{
  float v2 = a1[1];
  if (*a1 == v2) {
    return 0.0;
  }
  double v3 = 0.0;
  double v4 = 0.0;
  uint64_t v5 = *a1;
  do
  {
    double v6 = *v5;
    double v7 = v5[1];
    v5 += 2;
    double v3 = v3 + v6 * v6;
    double v4 = v4 + v6 * v7;
  }
  while (v5 != v2);
  if ((a2 & 1) == 0)
  {
    double v9 = 0.0;
    double v10 = 0.0;
    uint64_t v11 = *a1;
    do
    {
      double v13 = *v11;
      double v12 = v11[1];
      v11 += 2;
      double v10 = v10 + v12;
      double v9 = v9 + v13;
    }
    while (v11 != v2);
    double v14 = (double)(unint64_t)(((char *)v2 - (char *)*a1) >> 4);
    double v15 = v14 * v3 - v9 * v9;
    if (v15 != 0.0) {
      return (v10 * -v9 + v14 * v4) / v15;
    }
    return 0.0;
  }
  double result = v4 / v3;
  if (v3 <= 0.0) {
    return 0.0;
  }
  return result;
}

float *sub_10126D660(float *result, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    float v3 = 0.0;
    do
      float v3 = v3 + result[v2++];
    while (a2 != v2);
    float v4 = v3 / (float)a2;
    do
    {
      *double result = *result - v4;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_10126D6A4(uint64_t result, float *a2, uint64_t a3, char a4)
{
  if (a3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a3;
    uint64_t v6 = result;
    do
    {
      if (v5)
      {
        uint64_t v7 = 0;
        float v8 = 0.0;
        do
        {
          float v8 = v8 + (float)(*(float *)(result + 4 * v7) * *(float *)(v6 + 4 * v7));
          ++v7;
        }
        while (v5 != v7);
      }
      else
      {
        float v8 = 0.0;
      }
      --v5;
      v6 += 4;
      a2[v4++] = v8;
    }
    while (v4 != a3);
    if (a4)
    {
      float v9 = *a2;
      do
      {
        *a2 = *a2 / v9;
        ++a2;
        --a3;
      }
      while (a3);
    }
  }
  return result;
}

float sub_10126D71C(uint64_t a1)
{
  return *(float *)a1;
}

float sub_10126D72C(float *a1)
{
  return (float)((float)(*a1 + a1[1]) + a1[2]) / 1.7321;
}

float sub_10126D75C(float *a1, float *a2, float *a3)
{
  uint64_t v3 = 0;
  float v4 = *a1;
  float v5 = a1[1];
  float v6 = a1[2];
  float v7 = *a2;
  float v8 = a2[1];
  float v9 = a2[2];
  float v33 = *a1 - *a2;
  float v34 = v5 - v8;
  float v35 = v6 - v9;
  float v10 = 0.0;
  do
  {
    float v10 = v10 + (float)(*(float *)((char *)&v33 + v3) * *(float *)((char *)&v33 + v3));
    v3 += 4;
  }
  while (v3 != 12);
  uint64_t v11 = 0;
  float v12 = *a3;
  float v13 = a3[1];
  float v14 = v8 - v13;
  float v15 = a3[2];
  float v33 = v7 - *a3;
  float v34 = v14;
  float v35 = v9 - v15;
  float v16 = 0.0;
  do
  {
    float v16 = v16 + (float)(*(float *)((char *)&v33 + v11) * *(float *)((char *)&v33 + v11));
    v11 += 4;
  }
  while (v11 != 12);
  uint64_t v17 = 0;
  float v33 = v4 - v12;
  float v34 = v5 - v13;
  float v35 = v6 - v15;
  float v18 = 0.0;
  float v19 = sqrtf(v10);
  do
  {
    float v18 = v18 + (float)(*(float *)((char *)&v33 + v17) * *(float *)((char *)&v33 + v17));
    v17 += 4;
  }
  while (v17 != 12);
  float v20 = sqrtf(v16);
  float v21 = sqrtf(v18);
  float v22 = v19 + v20;
  float v23 = log10f((float)(v19 + v20) - v21);
  float v24 = -6.0;
  if (v23 >= -3.0)
  {
    float v25 = v23;
    float v26 = log10f(v19);
    float v24 = 6.0;
    if (v26 >= -3.0)
    {
      float v27 = v26;
      float v28 = log10f(v20);
      if (v28 >= -3.0)
      {
        float v29 = v25 + log10f((float)(v19 - v20) + v21);
        float v30 = log10f((float)(v20 - v19) + v21) + v29;
        float v31 = (float)-(float)(v27 - (float)((float)(log10f(v22 + v21) + v30) * 0.5)) - v28;
        return v31 - log10f(v21);
      }
    }
  }
  return v24;
}

BOOL sub_10126D8FC(float *a1, float *a2, float a3)
{
  float v3 = a1[1] - a2[1];
  return (float)((float)((float)((float)(a1[2] - a2[2]) * (float)(a1[2] - a2[2])) + (float)(v3 * v3))
               + (float)((float)(*a1 - *a2) * (float)(*a1 - *a2))) > (float)(a3 * a3);
}

double sub_10126D934(double a1)
{
  double v1 = round(a1 * 0.5);
  return v1 + v1;
}

double sub_10126D948(unsigned int a1, double a2)
{
  return round(a2 / (double)a1) * (double)a1;
}

double sub_10126D95C(double a1, double a2, double a3, double a4, double a5)
{
  if (vabdd_f64(a2, a3) <= 0.001) {
    return 0.0;
  }
  else {
    return (a1 - a2) / (a3 - a2) * a5 + (1.0 - (a1 - a2) / (a3 - a2)) * a4;
  }
}

long double sub_10126D998(double a1, double a2, double a3)
{
  return 1.0 / a3 * 0.39894228 * exp(-((a1 - a2) * (a1 - a2)) / ((a3 + a3) * a3));
}

uint64_t sub_10126D9E4(unint64_t a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  int v3 = 63689;
  do
  {
    uint64_t v2 = v3 * v2 + (a1 >> v1);
    v3 *= 378551;
    v1 += 8;
  }
  while (v1 != 64);
  return v2;
}

double sub_10126DA1C(uint64_t a1, int a2)
{
  long long __p = 0;
  float64x2_t v32 = 0;
  uint64_t v33 = 0;
  sub_1001DD364(&__p, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  double v4 = (double)(int)((((*(void *)(a1 + 8) - *(void *)a1) >> 3) - 1) * a2) / 100.0;
  int v5 = (int)v4;
  if (v4 == (double)(int)v4)
  {
    float v6 = (double *)__p;
    float v7 = (double *)((char *)__p + 8 * v5);
    if (v7 != v32)
    {
      sub_10039BFC4((double *)__p, v7, v32, v4);
      float v6 = (double *)__p;
    }
    double v8 = v6[v5];
LABEL_26:
    float64x2_t v32 = v6;
    operator delete(v6);
    return v8;
  }
  if (a2 < 50)
  {
    signed int v21 = vcvtpd_s64_f64(v4);
    float v6 = (double *)__p;
    float v22 = (double *)((char *)__p + 8 * v21);
    if (v22 != v32)
    {
      sub_10039BFC4((double *)__p, v22, v32, v4);
      float v6 = (double *)__p;
    }
    float v23 = v6;
    if (v21 >= 2)
    {
      float v24 = v6 + 1;
      double v25 = *v6;
      uint64_t v26 = 8 * v21 - 8;
      float v23 = v6;
      float v27 = v6 + 1;
      do
      {
        double v28 = *v27++;
        double v29 = v28;
        if (v25 < v28)
        {
          double v25 = v29;
          float v23 = v24;
        }
        float v24 = v27;
        v26 -= 8;
      }
      while (v26);
    }
    double v20 = v6[v21];
    double v14 = *v23;
  }
  else
  {
    float v6 = (double *)__p;
    float v9 = (double *)((char *)__p + 8 * v5);
    if (v9 != v32)
    {
      sub_10039BFC4((double *)__p, v9, v32, v4);
      float v6 = (double *)__p;
      float v9 = v32;
    }
    float v10 = &v6[v5];
    uint64_t v11 = v10 + 1;
    double v13 = *v10;
    float v12 = v10 + 2;
    double v14 = v13;
    if (v11 != v9 && v12 != v9)
    {
      double v16 = *v11;
      uint64_t v17 = v12;
      do
      {
        double v18 = *v17++;
        double v19 = v18;
        if (v18 < v16)
        {
          double v16 = v19;
          uint64_t v11 = v12;
        }
        float v12 = v17;
      }
      while (v17 != v9);
    }
    double v20 = *v11;
  }
  double v8 = (v20 + v14) * 0.5;
  if (v6) {
    goto LABEL_26;
  }
  return v8;
}

void sub_10126DBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10126DBE0(uint64_t a1, int a2)
{
  int v3 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - *(void *)a1;
  if (v4 == *(void *)a1) {
    return -INFINITY;
  }
  long long __p = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  sub_1001DD364(&__p, v3, v4, v5 >> 3);
  double v7 = (double)(int)((((*(void *)(a1 + 8) - *(void *)a1) >> 3) - 1) * a2) / 100.0;
  int v8 = (int)v7;
  if (v7 == (double)(int)v7)
  {
    float v9 = (double *)__p;
    float v10 = (double *)((char *)__p + 8 * v8);
    if (v10 != v38)
    {
      sub_10039BFC4((double *)__p, v10, v38, (double)(int)v7);
      float v9 = (double *)__p;
    }
    double v11 = v9[v8];
LABEL_28:
    uint64_t v38 = v9;
    operator delete(v9);
    return v11;
  }
  double __y = 0.0;
  double v12 = modf(v7, &__y);
  double v13 = v12;
  if (a2 < 50)
  {
    signed int v26 = vcvtpd_s64_f64(v7);
    float v9 = (double *)__p;
    float v27 = (double *)((char *)__p + 8 * v26);
    if (v27 != v38)
    {
      sub_10039BFC4((double *)__p, v27, v38, v12);
      float v9 = (double *)__p;
    }
    double v28 = v9;
    if (v26 >= 2)
    {
      double v29 = v9 + 1;
      double v30 = *v9;
      uint64_t v31 = 8 * v26 - 8;
      double v28 = v9;
      float64x2_t v32 = v9 + 1;
      do
      {
        double v33 = *v32++;
        double v34 = v33;
        if (v30 < v33)
        {
          double v30 = v34;
          double v28 = v29;
        }
        double v29 = v32;
        v31 -= 8;
      }
      while (v31);
    }
    double v25 = v9[v26];
    double v19 = *v28;
  }
  else
  {
    float v9 = (double *)__p;
    double v14 = (double *)((char *)__p + 8 * v8);
    if (v14 != v38)
    {
      sub_10039BFC4((double *)__p, v14, v38, v12);
      float v9 = (double *)__p;
      double v14 = v38;
    }
    float v15 = &v9[v8];
    double v16 = v15 + 1;
    double v18 = *v15;
    uint64_t v17 = v15 + 2;
    double v19 = v18;
    if (v16 != v14 && v17 != v14)
    {
      double v21 = *v16;
      float v22 = v17;
      do
      {
        double v23 = *v22++;
        double v24 = v23;
        if (v23 < v21)
        {
          double v21 = v24;
          double v16 = v17;
        }
        uint64_t v17 = v22;
      }
      while (v22 != v14);
    }
    double v25 = *v16;
  }
  double v11 = v19 + (v25 - v19) * v13;
  if (v9) {
    goto LABEL_28;
  }
  return v11;
}

void sub_10126DDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10126DDC4(double a1)
{
  double v1 = a1 * 3.14159265;
  double v2 = -(a1 * 3.14159265);
  if (v1 <= 0.0) {
    double v3 = v2;
  }
  else {
    double v3 = v1;
  }
  if (v3 > 0.0001)
  {
    float v4 = v1;
    sinf(v4);
  }
}

void sub_10126DE1C(uint64_t a1, void *a2)
{
  *(void *)a1 = off_10231A8E8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  double v3 = (void **)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 4294967293;
  id v4 = [a2 newTimer];
  *(void *)(a1 + 16) = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10126E000;
  v8[3] = &unk_1022A3020;
  void v8[4] = a1;
  [v4 setHandler:v8];
  uint64_t v5 = *v3;
  sub_101A1F180(v6, "FallUserMetricsUploadIntervalSeconds", &qword_101DAF9A0, 0);
  [v5 setNextFireDelay:0.0 interval:v7];
  operator new();
}

void sub_10126DFC0()
{
}

uint64_t sub_10126E000(uint64_t a1)
{
  double v1 = *(unsigned char **)(a1 + 32);
  v1[25] = 1;
  return (*(uint64_t (**)(void))(*(void *)v1 + 16))();
}

id sub_10126E030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(v4 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10126E0A0;
  v6[3] = &unk_1022A56E0;
  void v6[4] = a2;
  v6[5] = v3;
  return [v2 async:v6];
}

void sub_10126E0A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  uint64_t v4 = *(_xpc_activity_s **)(a1 + 32);
  if (state)
  {
    if (xpc_activity_get_state(v4) == 2 && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 4))
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10231A978);
      }
      double v7 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t v8 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
        *(_DWORD *)buf = 134349056;
        *(void *)double v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10231A978);
        }
        xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
        float v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLFallUserInfoMetrics::CLFallUserInfoMetrics(CLSilo *)_block_invoke", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 32);
      sub_10126E3A8(v2, v5);
    }
  }
  else
  {
    xpc_object_t v6 = xpc_activity_copy_criteria(v4);
    if (!v6) {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    }
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 1);
    sub_101A1F180(buf, "WalkingSteadinessHKQueryIntervalSeconds", &qword_101DAF9D0, 0);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, (uint64_t)*(double *)&v11[4]);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_PREVENT_DEVICE_SLEEP, 1);
    xpc_activity_set_criteria(*(xpc_activity_t *)(a1 + 32), v6);
    xpc_release(v6);
  }
}

void sub_10126E3A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v5 = *(id **)(a1 + 48);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10126E60C;
    v6[3] = &unk_10231A940;
    void v6[4] = a2;
    v6[5] = a1;
    sub_101199FB8(v5, 1, 0, 1, (uint64_t)v6, Current + -5184000.0, Current);
  }
}

uint64_t sub_10126E454(uint64_t a1)
{
  *(void *)a1 = off_10231A8E8;
  [*(id *)(a1 + 16) invalidate];

  *(void *)(a1 + 16) = 0;
  sub_10126F2E8((uint64_t *)(a1 + 48), 0);
  return a1;
}

void sub_10126E4BC(uint64_t a1)
{
  sub_10126E454(a1);

  operator delete();
}

uint64_t sub_10126E4F4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t sub_10126E4FC(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 26) != a2)
  {
    *(unsigned char *)(result + 26) = a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E518(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 27) != a2)
  {
    *(unsigned char *)(result + 27) = a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E534(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 28) != a2)
  {
    *(unsigned char *)(result + 28) = a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E550(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 29) != a2)
  {
    *(unsigned char *)(result + 29) = a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E56C(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 30) != a2)
  {
    *(unsigned char *)(result + 30) = a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E588(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 31) != a2)
  {
    *(unsigned char *)(result + 31) = a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E5A4(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 32) != a2)
  {
    *(_DWORD *)(result + 32) = a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E5C0(uint64_t result, float a2)
{
  int v2 = (int)(float)(a2 * 100.0);
  if (*(_DWORD *)(result + 36) != v2)
  {
    *(_DWORD *)(result + 36) = v2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

uint64_t sub_10126E5EC(uint64_t result, float a2)
{
  if (*(_DWORD *)(result + 40) != (int)a2)
  {
    *(_DWORD *)(result + 40) = (int)a2;
    *(unsigned char *)(result + 25) = 1;
  }
  return result;
}

void sub_10126E60C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void **)(v4 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_10126E6EC;
  v6[3] = &unk_10231A908;
  int v10 = a2;
  v6[5] = v4;
  long long __p = 0;
  xpc_activity_state_t v8 = 0;
  uint64_t v9 = 0;
  sub_1001F703C(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  void v6[4] = *(void *)(a1 + 32);
  [v5 async:v6];
  if (__p)
  {
    xpc_activity_state_t v8 = __p;
    operator delete(__p);
  }
}

void sub_10126E6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126E6EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 72) != 100)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10231A978);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)buf = 67109120;
      LODWORD(v15) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error querying walking steadiness for CoreAnalytics, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10231A978);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallUserInfoMetrics::queryWalkingSteadinessHK(xpc_activity_t)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    double v4 = -2.0;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 != *(void *)(a1 + 48))
  {
    double v4 = *(double *)(v3 - 8);
LABEL_10:
    sub_10126EBB8((unsigned __int8 *)v2, v4);
    goto LABEL_11;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10231A978);
  }
  int v10 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Walking steadiness query returned empty for CoreAnalytics", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10231A978);
    }
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallUserInfoMetrics::queryWalkingSteadinessHK(xpc_activity_t)_block_invoke", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  *(void *)(v2 + 56) = 0xFFFFFFFFLL;
  *(unsigned char *)(v2 + 25) = 1;
LABEL_11:
  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) == 4
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10231A978);
    }
    double v7 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)buf = 134349056;
      xpc_activity_state_t v15 = state;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to mark activity as done. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10231A978);
      }
      xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallUserInfoMetrics::queryWalkingSteadinessHK(xpc_activity_t)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
}

unsigned __int8 *sub_10126EBB8(unsigned __int8 *result, double a2)
{
  uint64_t v3 = result;
  if (a2 == -1.0)
  {
    *((void *)result + 7) = 0xFFFFFFFFLL;
  }
  else
  {
    if (a2 >= 0.0)
    {
      *((_DWORD *)result + 15) = 0;
      int v6 = (int)(a2 * 100.0);
      if (*((_DWORD *)result + 14) == v6) {
        return result;
      }
    }
    else
    {
      int v4 = *((_DWORD *)result + 15) + 1;
      *((_DWORD *)result + 15) = v4;
      double v5 = (double)v4;
      uint64_t v7 = 0x403C000000000000;
      double result = sub_101A1F180(v8, "WalkingSteadinessHKMaxIgnoredQueryErrors", &v7, 0);
      if (v9 >= v5) {
        return result;
      }
      int v6 = (int)a2;
    }
    *((_DWORD *)v3 + 14) = v6;
  }
  v3[25] = 1;
  return result;
}

void *sub_10126EC7C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return sub_1001F703C(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
}

void sub_10126ECA4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_10126ECBC(uint64_t result)
{
  if (*(unsigned char *)(result + 25))
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 24))
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10231A978);
      }
      uint64_t v2 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sending UserInfo to CoreAnalytics", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10231A978);
        }
        __int16 v10 = 0;
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFallUserInfoMetrics::sendEventToCoreAnalytics() const", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      uint64_t v3 = v8;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      int v4 = sub_10126F130;
    }
    else
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10231A978);
      }
      double v5 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "UserInfo health not sent to CoreAnalytics because logging not enabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10231A978);
        }
        __int16 v10 = 0;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFallUserInfoMetrics::sendEventToCoreAnalytics() const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t v3 = v9;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      int v4 = sub_10126F018;
    }
    v3[2] = v4;
    v3[3] = &unk_1022A6368;
    v3[4] = v1;
    double result = AnalyticsSendEventLazy();
    *(unsigned char *)(v1 + 25) = 0;
  }
  return result;
}

NSDictionary *sub_10126F018(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  v3[0] = @"isFallDetectionAvailable";
  v4[0] = +[NSNumber numberWithBool:v1[26]];
  v3[1] = @"didEnableAnomalyDetection";
  v4[1] = +[NSNumber numberWithBool:v1[27]];
  v3[2] = @"didEnableWorkoutAnomalyDetection";
  v4[2] = +[NSNumber numberWithBool:v1[28]];
  v3[3] = @"didEnableBackgroundWorkoutAnomalyDetection";
  unsigned __int8 v4[3] = +[NSNumber numberWithBool:v1[29]];
  v3[4] = @"didEnableBackgroundAllDayAnomalyDetection";
  void v4[4] = +[NSNumber numberWithBool:v1[30]];
  v3[5] = @"isImproveHealthAndFitnessOptInEnabled";
  v4[5] = +[NSNumber numberWithBool:v1[31]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

NSDictionary *sub_10126F130(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = @"isFallDetectionAvailable";
  v4[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 26)];
  v3[1] = @"didEnableAnomalyDetection";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 27)];
  v3[2] = @"didEnableWorkoutAnomalyDetection";
  v4[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 28)];
  v3[3] = @"didEnableBackgroundWorkoutAnomalyDetection";
  unsigned __int8 v4[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 29)];
  v3[4] = @"didEnableBackgroundAllDayAnomalyDetection";
  void v4[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 30)];
  v3[5] = @"isImproveHealthAndFitnessOptInEnabled";
  v4[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 31)];
  void v3[6] = @"maxAccelNormThreshold";
  void v4[6] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 40)];
  v3[7] = @"userAgeBin";
  v4[7] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 32)];
  v3[8] = @"userMaxMets";
  v4[8] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 36)];
  v3[9] = @"userWalkingSteadiness";
  v4[9] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:10];
}

void sub_10126F2B8(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_10126F2E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1011993C8(result);
    operator delete();
  }
  return result;
}

void *sub_10126F338(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v12, a3);
  sub_10065AB34((uint64_t)v11, a4);
  sub_10065AC50((uint64_t)v10, a5);
  sub_100DD5888((uint64_t)a1, a2, @"GNSS", 1, 2, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10);
  sub_10065ACE8(v10);
  sub_10065ABCC(v11);
  sub_10065AAB0(v12);
  *a1 = off_10231A9A8;
  a1[17] = 0;
  sub_1000E9354(a1 + 18);
  return a1;
}

void sub_10126F430(_Unwind_Exception *a1)
{
  sub_100DD5960(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10126F480(void *a1)
{
  *a1 = off_10231A9A8;
  sub_10013F3C4(a1 + 18);

  return sub_100DD5960((uint64_t)a1);
}

void sub_10126F4D4(void *a1)
{
  *a1 = off_10231A9A8;
  sub_10013F3C4(a1 + 18);
  sub_100DD5960((uint64_t)a1);

  operator delete();
}

uint64_t sub_10126F53C(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10231AAC0);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)buf = 136446210;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    [*(id *)(a1 + 16) UTF8String];
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssConfigAsset::clearOutAssetData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000E9354(buf);
  sub_1004CE798(a1 + 144, (uint64_t)buf);
  return sub_10013F3C4(buf);
}

void sub_10126F718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10126F734(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10231AAC0);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    int v4 = sub_1007E72D8(*(void **)(a1 + 128));
    int v5 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationGnssSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    id v15 = [*(id *)(a1 + 16) UTF8String];
    int v16 = sub_1007E72D8(*(void **)(a1 + 128));
    int v17 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(v25.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(v25.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v16;
    WORD1(v25.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v25.__r_.__value_.__r.__words[2]) = v17;
    double v18 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssConfigAsset::sendNotifications()", "%s\n", (const char *)v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  sub_100134750(&v25, "#CLConfig,");
  int v6 = std::string::append(&v25, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(__p, ",kNotificationGnssSettings,");
  if ((v23 & 0x80u) == 0) {
    xpc_activity_state_t v8 = __p;
  }
  else {
    xpc_activity_state_t v8 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v9 = v23;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  __int16 v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  double v11 = (void *)v10->__r_.__value_.__r.__words[0];
  unint64_t size = v10->__r_.__value_.__l.__size_;
  v24[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(void *)&long long __dst = v11;
    *((void *)&__dst + 1) = size;
    *(_DWORD *)double v20 = v24[0];
    *(_DWORD *)&void v20[3] = *(_DWORD *)((char *)v24 + 3);
    char v21 = v13;
    goto LABEL_21;
  }
  sub_1000DC48C(&__dst, v11, size);
LABEL_21:
  double v14 = (void *)sub_1000E9358(a1 + 144);
  sub_1007E7320(&__dst, v14);
  if (v21 < 0) {
    operator delete((void *)__dst);
  }
  sub_100DD8718(a1, 2, a1 + 144);
  if (v13 < 0) {
    operator delete(v11);
  }
}

void sub_10126FA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10126FB0C(uint64_t a1)
{
  sub_100DD6DC0(a1, @"settings.plist", a1 + 144);
  if (sub_10126FB84(a1)) {
    sub_10126FEE8(a1);
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 120);

  return v2(a1);
}

uint64_t sub_10126FB84(uint64_t a1)
{
  if (objc_opt_class())
  {
    uint64_t result = (uint64_t)+[RDEstimate currentEstimates];
    if (result)
    {
      id v3 = (void *)result;
      uint64_t result = (uint64_t)[(id)result count];
      if (result)
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10231AAC0);
        }
        int v4 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138477827;
          id v9 = [[v3 objectAtIndexedSubscript:0] countryCode];
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLConfig,isCurrentCountryISOPresent,%{private}@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_10231AAC0);
          }
          [v3[0] countryCode];
          long long v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::isCurrentCountryISOPresent()", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
        *(void *)(a1 + 136) = [objc_alloc((Class)NSString) initWithString:[objc_msgSend(objc_msgSend(v3, "objectAtIndexedSubscript:", 0), "countryCode")];
        return 1;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    int v5 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLConfig,isCurrentCountryISOPresent,absent", buf, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::isCurrentCountryISOPresent()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  return result;
}

void sub_10126FEE8(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    uint64_t v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 16) UTF8String];
      id v4 = [[[*(id *)(a1 + 128) getLocalFileUrl] absoluteString] UTF8String];
      *(_DWORD *)buf = 136446467;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&unsigned char buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,reading country settings under %{private}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      id v37 = [*(id *)(a1 + 16) UTF8String];
      id v38 = [[[objc_msgSend(*(id *)(a1 + 128), "getLocalFileUrl") absoluteString] UTF8String];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446467;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v38;
      uint64_t v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v39);
      if (v39 != buf) {
        free(v39);
      }
    }
    sub_1000E9354(v43);
    if (!sub_100DD6DC0(a1, @"countryInfoMap.plist", (uint64_t)v43))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      double v18 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v19 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,failed to load country info map file", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10231AAC0);
        }
        id v20 = [*(id *)(a1 + 16) UTF8String];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        char v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      goto LABEL_82;
    }
    sub_1000E9354(v42);
    if (!sub_101270EC0(a1, (uint64_t)v43, (uint64_t)v42))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      float v22 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,readCountryConstellationDictionary retuned false", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10231AAC0);
        }
        id v24 = [*(id *)(a1 + 16) UTF8String];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        std::string v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v25);
        if (v25 != buf) {
          free(v25);
        }
      }
      goto LABEL_81;
    }
    memset(&__p, 0, sizeof(__p));
    if (!sub_1000A7CF8((uint64_t)v42, @"SettingsFile", &__p))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      signed int v26 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v27 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountryConstellationSettings,missing settings filename", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10231AAC0);
        }
        id v28 = [*(id *)(a1 + 16) UTF8String];
        int v44 = 136446210;
        id v45 = v28;
        double v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v29);
        if (v29 != buf) {
          free(v29);
        }
      }
      goto LABEL_79;
    }
    sub_1000E9354(v41);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (sub_100DD6DC0(a1, +[NSString stringWithUTF8String:p_p], (uint64_t)v41))
    {
      id v6 = [(id)sub_1000E9358((uint64_t)v41) valueForKey:@"GnssConstellationSettings"];
      id v7 = v6;
      if (v6 && [v6 count])
      {
        xpc_activity_state_t v8 = +[NSDictionary dictionaryWithObject:v7 forKey:@"GnssConstellationSettings"];
        uint64_t v9 = sub_1000E9358(a1 + 144);
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&buf[16] = sub_101271758;
        uint64_t v50 = &unk_10231AA88;
        uint64_t v51 = v9;
        uint64_t v52 = a1;
        [(NSDictionary *)v8 enumerateKeysAndObjectsUsingBlock:buf];
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10231AAC0);
        }
        __int16 v10 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
        {
          id v11 = [*(id *)(a1 + 16) UTF8String];
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&unsigned char buf[14] = v8;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,constellation setting is %@", buf, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_78;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_10231AAC0);
        }
        id v12 = [*(id *)(a1 + 16) UTF8String];
        int v44 = 136446466;
        id v45 = v12;
        __int16 v46 = 2112;
        int v47 = v8;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v13);
        if (v13 == buf) {
          goto LABEL_78;
        }
        goto LABEL_92;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      float v35 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v36 = [*(id *)(a1 + 16) UTF8String];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountrySettings,constellation key is absent", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_78;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      id v40 = [*(id *)(a1 + 16) UTF8String];
      int v44 = 136446210;
      id v45 = v40;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v13);
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      double v30 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v31 = [*(id *)(a1 + 16) UTF8String];
        float64x2_t v32 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          float64x2_t v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136446467;
        *(void *)&uint8_t buf[4] = v31;
        *(_WORD *)&unsigned char buf[12] = 2081;
        *(void *)&unsigned char buf[14] = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountryConstellationSettings,failed to load settings file,%{private}s", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_78;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      id v33 = [*(id *)(a1 + 16) UTF8String];
      double v34 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v44 = 136446467;
      id v45 = v33;
      __int16 v46 = 2081;
      int v47 = v34;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v13);
    }
    if (v13 == buf)
    {
LABEL_78:
      sub_10013F3C4(v41);
LABEL_79:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_81:
      sub_10013F3C4(v42);
LABEL_82:
      sub_10013F3C4(v43);
      return;
    }
LABEL_92:
    free(v13);
    goto LABEL_78;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10231AAC0);
  }
  double v14 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationSettings,asset unavailable,ignoring", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    id v16 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssConfigAsset::readCountryConstellationSettings()", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
}

void sub_101270BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a13);
  sub_10013F3C4(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_101270C88(void *a1, uint64_t a2)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10231AAC0);
  }
  id v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[17];
    *(_DWORD *)buf = 138478083;
    uint64_t v9 = v5;
    __int16 v10 = 2113;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLConfig,country changed from %{private}@ to %{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssConfigAsset::handleRegulatoryDomainChange(NSString *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a1[17]) {
    a1[17] = 0;
  }
  a1[17] = [objc_alloc((Class)NSString) initWithString:a2];
  sub_100DD6DC0((uint64_t)a1, @"settings.plist", (uint64_t)(a1 + 18));
  sub_10126FEE8((uint64_t)a1);
  return (*(uint64_t (**)(void *))(*a1 + 120))(a1);
}

BOOL sub_101270EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 128))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    id v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)buf = 136446210;
      id v40 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationDictionary,asset unavailable,ignoring", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    id v14 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(v34) = 136446210;
    *(void *)((char *)&v34 + 4) = v14;
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v15);
    goto LABEL_38;
  }
  sub_1000E9354(buf);
  sub_1004CE798(a3, (uint64_t)buf);
  sub_10013F3C4(buf);
  id v6 = [(id)sub_1000E9358(a2) valueForKey:@"CountryInfo"];
  if (!v6)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    id v16 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      id v17 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)buf = 136446210;
      id v40 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#CLConfig,%{public}s,readCountryConstellationDictionary,no country info array in dict", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    id v25 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(v34) = 136446210;
    *(void *)((char *)&v34 + 4) = v25;
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v15);
LABEL_38:
    if (v15 != (char *)buf) {
      free(v15);
    }
    return 0;
  }
  *(void *)&long long v34 = 0;
  *((void *)&v34 + 1) = &v34;
  uint64_t v35 = 0x3052000000;
  id v36 = sub_100177F50;
  id v37 = sub_1001776C4;
  uint64_t v38 = 0;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10127164C;
  void v29[3] = &unk_10231AA60;
  v29[4] = &v34;
  v29[5] = a1;
  [v6 enumerateObjectsUsingBlock:v29];
  uint64_t v7 = *(void *)(*((void *)&v34 + 1) + 40);
  BOOL v8 = v7 != 0;
  if (v7)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    uint64_t v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 16) UTF8String];
      uint64_t v11 = *(void *)(*((void *)&v34 + 1) + 40);
      *(_DWORD *)buf = 136446467;
      id v40 = v10;
      __int16 v41 = 2113;
      uint64_t v42 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationDictionary,countryInfo is %{private}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      id v22 = [*(id *)(a1 + 16) UTF8String];
      uint64_t v23 = *(void *)(*((void *)&v34 + 1) + 40);
      int v30 = 136446467;
      id v31 = v22;
      __int16 v32 = 2113;
      uint64_t v33 = v23;
      id v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    sub_1004CE540(buf, *(CFTypeRef *)(*((void *)&v34 + 1) + 40));
    sub_1004CE798(a3, (uint64_t)buf);
    sub_10013F3C4(buf);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231AAC0);
    }
    double v18 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = [*(id *)(a1 + 16) UTF8String];
      uint64_t v20 = *(void *)(a1 + 136);
      *(_DWORD *)buf = 136446467;
      id v40 = v19;
      __int16 v41 = 2113;
      uint64_t v42 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,readCountryConstellationDictionary,%{private}@ not present", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10231AAC0);
      }
      id v26 = [*(id *)(a1 + 16) UTF8String];
      uint64_t v27 = *(void *)(a1 + 136);
      int v30 = 136446467;
      id v31 = v26;
      __int16 v32 = 2113;
      uint64_t v33 = v27;
      id v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssConfigAsset::readCountryConstellationDictionary(const CLNameValuePair &, CLNameValuePair &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
  _Block_object_dispose(&v34, 8);
  return v8;
}

void sub_1012715F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10127164C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  id result = [a2 valueForKey:@"ISOCode"];
  if (result)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10127170C;
    v9[3] = &unk_10231AA38;
    void v9[5] = *(void *)(a1 + 32);
    v9[6] = v7;
    void v9[4] = a2;
    id result = [result enumerateObjectsUsingBlock:v9];
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
      *a4 = 1;
    }
  }
  return result;
}

id sub_10127170C(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1[6] + 136) isEqualToString:a2];
  if (result)
  {
    *(void *)(*(void *)(a1[5] + 8) + 40) = a1[4];
    *a4 = 1;
  }
  return result;
}

id sub_101271758(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [*(id *)(a1 + 32) objectForKey:a2];
    if (!v7 || (id v8 = v7, objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      id v8 = objc_alloc_init((Class)NSMutableDictionary);
      [*(id *)(a1 + 32) setObject:v8 forKey:a2];
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_101271758;
    v13[3] = &unk_10231AA88;
    void v13[4] = v8;
    v13[5] = v6;
    return [a3 enumerateKeysAndObjectsUsingBlock:v13];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, a3, 2uLL);
      uint64_t v11 = *(void **)(a1 + 32);
    }
    else
    {
      id v12 = *(void **)(a1 + 32);
      id v10 = [a3 copy];
      uint64_t v11 = v12;
    }
    return [v11 setObject:v10 forKey:a2];
  }
}

void sub_1012718E4(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_101271914(uint64_t a1, void *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 0;
  sub_101272398(a1 + 8, a3);
  *(void *)(a1 + 40) = a2;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231AAE0);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,initializing\"}", (uint8_t *)v7, 0x12u);
  }
  return a1;
}

void sub_101271A28(_Unwind_Exception *a1)
{
  sub_100856010(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101271A40(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  sub_101272430((void *)(a1 + 8));

  *(void *)(a1 + 40) = 0;
  sub_100856010(v2);
  return a1;
}

void sub_101271A90(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    float v5 = *(float *)(a2 + 44);
    if (v5 > 0.0 && v5 <= 0.02)
    {
      *(unsigned char *)(a1 + 48) = 1;
      *(void *)(a1 + 56) = *(void *)(a2 + 32);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231AAE0);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    int v9 = *(unsigned __int8 *)(a2 + 48);
    int v10 = *(unsigned __int8 *)(a1 + 64);
    double v11 = *(float *)(a2 + 44);
    v12[0] = 68290562;
    v12[1] = 0;
    __int16 v13 = 2082;
    id v14 = "";
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 1026;
    int v18 = v7;
    __int16 v19 = 2050;
    uint64_t v20 = v8;
    __int16 v21 = 1026;
    int v22 = v9;
    __int16 v23 = 1026;
    int v24 = v10;
    __int16 v25 = 2050;
    double v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,feedGnssEpochData\", \"previousMultibandMode\":%{public}hhd, \"fMultibandMode\":%{public}hhd, \"fMultibandModeFixMCT\":\"%{public}f\", \"IsPositionFixValid\":%{public}hhd, \"fIsGnssReceiverOn\":%{public}hhd, \"gpsTimeUncertaintyMilliseconds\":\"%{public}f\"}", (uint8_t *)v12, 0x3Eu);
  }
  sub_101271C10((int *)a1);
}

void sub_101271C10(int *a1)
{
  if (!*((unsigned char *)a1 + 64) && *a1)
  {
    *a1 = 0;
    if (*((void *)a1 + 4))
    {
      uint64_t v7 = (uint64_t)(a1 + 2);
      sub_101272314(v7, 0);
    }
    return;
  }
  unint64_t v2 = sub_1012720FC();
  if ((v2 & 0xFF00000000) != 0)
  {
    int v3 = v2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231AAE0);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 1026;
      int v20 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"L1Context,forcing L1 band use\", \"forcedBandUse\":%{public}d}", (uint8_t *)&v15, 0x18u);
    }
    if (*a1 != v3)
    {
      *a1 = v3;
      if (*((void *)a1 + 4))
      {
        uint64_t v5 = (uint64_t)(a1 + 2);
        int v6 = v3;
LABEL_29:
        sub_101272314(v5, v6);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231AAE0);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *((unsigned __int8 *)a1 + 48);
      int v15 = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 1026;
      int v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,tickL1Enablement\", \"fMultibandMode\":%{public}hhd}", (uint8_t *)&v15, 0x18u);
    }
    if (*((unsigned char *)a1 + 48)) {
      int v10 = 256;
    }
    else {
      int v10 = 512;
    }
    if (v10 != *a1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231AAE0);
      }
      double v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *a1;
        int v13 = *((unsigned __int8 *)a1 + 48);
        uint64_t v14 = *((void *)a1 + 7);
        int v15 = 68290050;
        __int16 v17 = 2082;
        int v16 = 0;
        int v18 = "";
        __int16 v19 = 1026;
        int v20 = v10;
        __int16 v21 = 1026;
        int v22 = v12;
        __int16 v23 = 1026;
        int v24 = v13;
        __int16 v25 = 2050;
        uint64_t v26 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"L1Context,tickL1Enablement\", \"requiredL1BandUseStatus\":%{public}d, \"currentL1BandUseStatus\":%{public}d, \"fMultibandMode\":%{public}hhd, \"fMultibandModeFixMCT\":\"%{public}f\"}", (uint8_t *)&v15, 0x2Eu);
      }
      *a1 = v10;
      if (*((void *)a1 + 4))
      {
        uint64_t v5 = (uint64_t)(a1 + 2);
        int v6 = v10;
        goto LABEL_29;
      }
    }
  }
}

void sub_101271F10(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231AAE0);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,stop\"}", (uint8_t *)v3, 0x12u);
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  if (*(unsigned char *)(a1 + 64))
  {
    *(unsigned char *)(a1 + 64) = 0;
    sub_101271C10((int *)a1);
  }
}

void sub_101272008(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231AAE0);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"L1Context,start\"}", (uint8_t *)v3, 0x12u);
  }
  if (!*(unsigned char *)(a1 + 64))
  {
    *(unsigned char *)(a1 + 64) = 1;
    sub_101271C10((int *)a1);
  }
}

unint64_t sub_1012720FC()
{
  unsigned int v6 = -1;
  sub_1000C7F88(buf);
  int v0 = sub_10006EF84(*(uint64_t *)buf, "GnssForceL1Desire", &v6);
  if (*(void *)v8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v8);
  }
  if (!v0) {
    goto LABEL_13;
  }
  if (v6 >= 5)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231AAE0);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v8 = 2082;
      *(void *)&v8[2] = "";
      __int16 v9 = 1026;
      unsigned int v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"L1Context,unhandled defaults\", \"setting\":%{public}d}", buf, 0x18u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231AAE0);
      }
    }
    __int16 v4 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v8 = 2082;
      *(void *)&v8[2] = "";
      __int16 v9 = 1026;
      unsigned int v10 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "L1Context,unhandled defaults", "{\"msg%{public}.0s\":\"L1Context,unhandled defaults\", \"setting\":%{public}d}", buf, 0x18u);
    }
LABEL_13:
    unint64_t v2 = 0;
    uint64_t v1 = 0;
    return v1 | (unint64_t)v2;
  }
  uint64_t v1 = qword_101DAFA30[v6];
  unint64_t v2 = &_mh_execute_header;
  return v1 | (unint64_t)v2;
}

void sub_1012722F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101272314(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_101272368(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_101272398(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101272430(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101272568(id a1)
{
  qword_102486988 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLWifiTilesManagerSilo"];
}

uint64_t sub_101272628(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012799DC;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102486998 != -1) {
    dispatch_once(&qword_102486998, block);
  }
  return qword_10248B3B8;
}

void sub_101272BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101272C34(uint64_t a1, void *a2, uint64_t *a3, void *a4, long long *a5, uint64_t *a6)
{
  uint64_t v11 = a1 + 268;
  uint64_t v12 = sub_10127380C(a1, "CLWifiTilesManager", a2);
  *(void *)uint64_t v12 = off_10231AB30;
  *(void *)(v12 + 112) = off_10231AC58;
  *(void *)(v12 + 136) = 0;
  *(void *)(v12 + 128) = v12 + 136;
  int v13 = (void *)(v12 + 128);
  *(void *)(v12 + 120) = &off_10231ACB8;
  *(void *)(v12 + 144) = 0;
  *(void *)(v12 + 152) = "";
  *(unsigned char *)(v12 + 160) = 0;
  *(void *)(v12 + 168) = 0;
  *(void *)(v12 + 176) = 0;
  *(void *)(v12 + 184) = "";
  *(unsigned char *)(v12 + 192) = 0;
  *(void *)(v12 + 200) = 0;
  *(void *)(v12 + 208) = 0;
  *(_WORD *)(v12 + 216) = 0;
  *(void *)(v12 + 224) = 0x40C5180000000000;
  *(_DWORD *)(v12 + 232) = 0xFFFF;
  *(void *)(v12 + 244) = 0;
  *(void *)(v12 + 236) = 0;
  *(_OWORD *)(v12 + 252) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)uint64_t v11 = _Q0;
  *(_OWORD *)(v11 + 16) = _Q0;
  *(_OWORD *)(v11 + 32) = _Q0;
  *(_DWORD *)(v12 + 316) = 0;
  *(_DWORD *)(v12 + 344) = 0;
  *(void *)(v12 + 320) = 0xBFF0000000000000;
  *(void *)(v12 + 328) = 0;
  *(void *)(v12 + 336) = 0;
  *(void *)(v11 + 80) = 0xBFF0000000000000;
  *(_DWORD *)(v12 + 356) = 0x7FFFFFFF;
  *(void *)(v12 + 368) = 0;
  *(void *)(v12 + 376) = 0;
  *(void *)(v12 + 360) = 0;
  *(unsigned char *)(v12 + 384) = 0;
  *(_DWORD *)(v12 + 408) = 0;
  *(void *)(v12 + 392) = 0;
  *(void *)(v12 + 400) = 0;
  *(unsigned char *)(v12 + 413) = 1;
  *(_DWORD *)(v12 + 416) = 400;
  *(unsigned char *)(v12 + 420) = 0;
  __int16 v19 = (std::string *)(v12 + 424);
  *(void *)(v12 + 432) = 0;
  *(void *)(v12 + 440) = 0;
  *(void *)(v12 + 424) = 0;
  uint64_t v20 = *a3;
  *a3 = 0;
  *(void *)(v12 + 448) = v20;
  sub_100FFB380((void *)(v12 + 456), *(void *)(a1 + 40));
  *(void *)(a1 + 480) = *a4;
  uint64_t v21 = a4[1];
  *(void *)(a1 + 488) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  sub_1013182A0(a1 + 512);
  sub_1012738B8();
  std::string::operator=(v19, (const std::string *)&qword_1024869A0);
  if (*((unsigned char *)a5 + 24))
  {
    sub_1013182A4((long long *)(a1 + 512), a5);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
    std::string::operator=(v19, (const std::string *)(v22 + 32));
    if (*((unsigned char *)a6 + 8))
    {
      uint64_t v23 = *a6;
      *a6 = 0;
      uint64_t v24 = *(void *)(a1 + 496);
      *(void *)(a1 + 496) = v23;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      *(unsigned char *)(a1 + 216) = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 24))(*(void *)(a1 + 448));
      sub_1000C7F88(buf);
      uint64_t v26 = (int *)(a1 + 416);
      sub_10006EF84(*(uint64_t *)&buf[0], "MaxDownloadListSize", (_DWORD *)(a1 + 416));
      if (*((void *)&buf[0] + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      uint64_t v27 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v28 = *v26;
        LODWORD(buf[0]) = 67109120;
        DWORD1(buf[0]) = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WIFITILE: fDefaultMaxDownloadListSize, %d", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        int v33 = *v26;
        v41[0] = 67109120;
        v41[1] = v33;
        long long v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiTilesManager::CLWifiTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, std::optional<CLTilesSetCollection>, std::optional<std::unique_ptr<CLITileSyncManager>>)", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      sub_1000C7F88(buf);
      sub_1000A699C(*(uint64_t *)&buf[0], "MTimeModificationPeriod", &qword_102477288);
      if (*((void *)&buf[0] + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      double v29 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134217984;
        *(void *)((char *)buf + 4) = qword_102477288;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WIFITILE: MTimeModificationPeriod, %.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        v41[0] = 134217984;
        *(void *)&v41[1] = qword_102477288;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiTilesManager::CLWifiTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, std::optional<CLTilesSetCollection>, std::optional<std::unique_ptr<CLITileSyncManager>>)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      int v30 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        int v31 = *(unsigned __int8 *)(a1 + 216);
        LODWORD(buf[0]) = 67109120;
        DWORD1(buf[0]) = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "@TileEvent, wifi, locked, %d", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        int v36 = *(unsigned __int8 *)(a1 + 216);
        v41[0] = 67109120;
        v41[1] = v36;
        id v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiTilesManager::CLWifiTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, std::optional<CLTilesSetCollection>, std::optional<std::unique_ptr<CLITileSyncManager>>)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      sub_1012740C8(a1);
      sub_1012743F8(v13, (uint64_t)v19, (uint64_t)v38);
      *(void *)&buf[0] = v38;
      sub_1000A7B4C((void ***)buf);
      if (!*(unsigned char *)(a1 + 216))
      {
        sub_10145319C(*(void *)(a1 + 480));
        (*(void (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
        sub_1012749B4(a1);
        double v32 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
        sub_101274BE0(a1, v32);
      }
      if (_os_feature_enabled_impl()) {
        operator new();
      }
      operator new();
    }
    uint64_t v25 = a4[1];
    uint64_t v39 = *a4;
    uint64_t v40 = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    sub_101139A7C();
  }
  sub_101273958(a1, (uint64_t)buf);
}

void sub_101273668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_100D1A044((void ***)va);
  uint64_t v15 = *(void *)(v11 + 496);
  *(void *)(v11 + 496) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  int v16 = *(std::__shared_weak_count **)(v11 + 488);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  uint64_t v17 = *(void *)(v11 + 448);
  *(void *)(v11 + 448) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (*(char *)(v11 + 447) < 0) {
    operator delete(*v13);
  }
  uint64_t v18 = *(void *)(v11 + 208);
  *(void *)(v11 + 208) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(v11 + 176);
  *(void *)(v11 + 176) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_1008B4894(v12, *(void **)(v11 + 136));
  sub_10127519C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10127380C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10231AE80;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10127389C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1012738B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024869B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024869B8))
  {
    qword_1024869A0 = 0;
    *(void *)algn_1024869A8 = 0;
    qword_1024869B0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024869A0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024869B8);
  }
  if (qword_1024869C0 != -1) {
    dispatch_once(&qword_1024869C0, &stru_10231AD20);
  }
  return &qword_1024869A0;
}

void sub_101273958(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_101275394();
  if (byte_1024869C8[23] < 0) {
    sub_1000DC48C(&__p, *(void **)byte_1024869C8, *(unint64_t *)&byte_1024869C8[8]);
  }
  else {
    std::string __p = *(std::string *)byte_1024869C8;
  }
  sub_1000C7F88(buf);
  BOOL v4 = sub_1004D1284(*(uint64_t *)buf, "WifiTilesServerUrl", &__p);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136380931;
    *(void *)&uint8_t buf[4] = p_p;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: defaultWifiTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v14 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v21[0] = 136380931;
    *(void *)&v21[1] = v14;
    __int16 v22 = 1026;
    BOOL v23 = v4;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()", "%s\n", v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  sub_1000C7F88(buf);
  uint64_t v7 = (uint64_t *)(a1 + 224);
  sub_1000A699C(*(uint64_t *)buf, "EncryptionGracePeriod", (void *)(a1 + 224));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *v7;
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WIFITILE: fDefaultEncryptionGracePeriod, %.1lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v16 = *v7;
    v21[0] = 134217984;
    *(void *)&v21[1] = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  sub_1000C7F88(buf);
  unsigned int v10 = (BOOL *)(a1 + 420);
  char v11 = sub_1000D2988(*(uint64_t *)buf, "DisableTilesWhileLocked", (BOOL *)(a1 + 420));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v11 & 1) == 0)
  {
    sub_100103240();
    BOOL *v10 = sub_10073D36C();
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v12 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    BOOL v13 = *v10;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WIFITILE: fDefaultDisableTilesWhileLocked, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    BOOL v18 = *v10;
    v21[0] = 67109120;
    v21[1] = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
  sub_1013182A0(a2);
  sub_1012738B8();
  operator new();
}

void sub_101273FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1012740C8(uint64_t a1)
{
  v18[0] = mach_absolute_time();
  v18[1] = (uint64_t)&stru_10231ACD0;
  sub_101279728((const char *)(a1 + 424), (uint64_t *)&v16);
  if (v16 != v17) {
    sub_10127E584();
  }
  sub_101279BFC((uint64_t)&v16, (uint64_t)v16, v17);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_10231AE30);
  }
  uint64_t v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"lock on-disk wifi #tiles\", \"numberOfOnDiskTiles\":%{public}ld}", buf, 0x1Cu);
  }
  uint64_t v3 = v16;
  for (i = v17; v3 != i; uint64_t v3 = (long long *)((char *)v3 + 24))
  {
    if (*(char *)(a1 + 447) >= 0) {
      size_t v5 = *(unsigned __int8 *)(a1 + 447);
    }
    else {
      size_t v5 = *(void *)(a1 + 432);
    }
    sub_1001110E4((uint64_t)&v15, v5 + 1);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v6 = &v15;
    }
    else {
      unsigned int v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*(char *)(a1 + 447) >= 0) {
        uint64_t v7 = (const void *)(a1 + 424);
      }
      else {
        uint64_t v7 = *(const void **)(a1 + 424);
      }
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
    int v8 = *((char *)v3 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)v3;
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)v3;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      std::string::size_type v10 = *((void *)v3 + 1);
    }
    char v11 = std::string::append(&v15, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&buf[16] = *((void *)&v11->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (buf[23] >= 0) {
      BOOL v13 = buf;
    }
    else {
      BOOL v13 = *(const char **)buf;
    }
    sub_10104CF04(v13);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  *(void *)buf = &v16;
  sub_1000A7B4C((void ***)buf);
  return sub_1000E0900(v18);
}

void sub_101274394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::string __p = &a16;
  sub_1000A7B4C((void ***)&__p);
  sub_1000E0900(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1012743F8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memset(v87, 0, sizeof(v87));
  int v88 = 1065353216;
  size_t v5 = a1 + 1;
  unsigned int v6 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      if (sub_100065F70(v6[10]))
      {
        sub_10026E398((char *)v6[10], (uint64_t)__p);
        sub_1012821E4((uint64_t)v87, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v86) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          unsigned int v6 = v8;
        }
        while (!v9);
      }
      unsigned int v6 = v8;
    }
    while (v8 != v5);
  }
  sub_101279728((const char *)a2, (uint64_t *)a3);
  if (*(void *)a3 != *(void *)(a3 + 8)) {
    sub_10127E584();
  }
  sub_101279BFC(a3, *(void *)a3, *(long long **)(a3 + 8));
  uint64_t v10 = *(void *)a3;
  uint64_t v11 = *(void *)(a3 + 8);
  if (*(void *)a3 == v11)
  {
LABEL_86:
    uint64_t v38 = v10;
    goto LABEL_87;
  }
LABEL_14:
  long long v12 = sub_101066430();
  int v13 = *(char *)(v10 + 23);
  BOOL v14 = v13 < 0;
  if (v13 >= 0) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = *(void *)v10;
  }
  uint64_t v16 = *(unsigned __int8 *)(v10 + 23);
  if (v14) {
    uint64_t v16 = *(void *)(v10 + 8);
  }
  int v17 = *((char *)v12 + 23);
  BOOL v18 = v17 < 0;
  if (v17 >= 0) {
    uint64_t v19 = v12;
  }
  else {
    uint64_t v19 = (void *)*v12;
  }
  uint64_t v20 = *((unsigned __int8 *)v12 + 23);
  if (v18) {
    uint64_t v20 = v12[1];
  }
  uint64_t v21 = v15 - 1;
  __int16 v22 = (char *)v19 - 1;
  while (v16 && v20)
  {
    int v23 = *(unsigned __int8 *)(v21 + v16);
    int v24 = v22[v20];
    --v16;
    --v20;
    if (v23 != v24)
    {
LABEL_30:
      uint64_t v25 = sub_101048388();
      int v26 = *(char *)(v10 + 23);
      BOOL v27 = v26 < 0;
      if (v26 >= 0) {
        uint64_t v28 = v10;
      }
      else {
        uint64_t v28 = *(void *)v10;
      }
      uint64_t v29 = *(unsigned __int8 *)(v10 + 23);
      if (v27) {
        uint64_t v29 = *(void *)(v10 + 8);
      }
      int v30 = *((char *)v25 + 23);
      BOOL v31 = v30 < 0;
      if (v30 >= 0) {
        double v32 = v25;
      }
      else {
        double v32 = (void *)*v25;
      }
      uint64_t v33 = *((unsigned __int8 *)v25 + 23);
      if (v31) {
        uint64_t v33 = v25[1];
      }
      uint64_t v34 = v28 - 1;
      uint64_t v35 = (char *)v32 - 1;
      while (v29 && v33)
      {
        int v36 = *(unsigned __int8 *)(v34 + v29);
        int v37 = v35[v33];
        --v29;
        --v33;
        if (v36 != v37) {
          goto LABEL_46;
        }
      }
      if (!v33) {
        goto LABEL_48;
      }
LABEL_46:
      v10 += 24;
      if (v10 == v11)
      {
        uint64_t v38 = v11;
        goto LABEL_87;
      }
      goto LABEL_14;
    }
  }
  if (v20) {
    goto LABEL_30;
  }
LABEL_48:
  if (v10 == v11) {
    goto LABEL_86;
  }
  uint64_t v39 = v10 + 24;
  if (v10 + 24 == v11) {
    goto LABEL_86;
  }
  uint64_t v38 = v10;
  do
  {
    uint64_t v40 = v10;
    uint64_t v10 = v39;
    __int16 v41 = sub_101066430();
    int v42 = *(char *)(v40 + 47);
    BOOL v43 = v42 < 0;
    if (v42 >= 0) {
      uint64_t v44 = v10;
    }
    else {
      uint64_t v44 = *(void *)v10;
    }
    uint64_t v45 = *(unsigned __int8 *)(v40 + 47);
    if (v43) {
      uint64_t v45 = *(void *)(v40 + 32);
    }
    int v46 = *((char *)v41 + 23);
    BOOL v47 = v46 < 0;
    unint64_t v48 = (void *)*v41;
    if (v46 >= 0) {
      unint64_t v48 = v41;
    }
    uint64_t v49 = *((unsigned __int8 *)v41 + 23);
    if (v47) {
      uint64_t v49 = v41[1];
    }
    uint64_t v50 = v44 - 1;
    uint64_t v51 = (char *)v48 - 1;
    while (v45 && v49)
    {
      int v52 = *(unsigned __int8 *)(v50 + v45);
      int v53 = v51[v49];
      --v45;
      --v49;
      if (v52 != v53) {
        goto LABEL_66;
      }
    }
    if (!v49) {
      goto LABEL_84;
    }
LABEL_66:
    int v54 = sub_101048388();
    int v55 = *(char *)(v40 + 47);
    BOOL v56 = v55 < 0;
    if (v55 >= 0) {
      uint64_t v57 = v10;
    }
    else {
      uint64_t v57 = *(void *)v10;
    }
    uint64_t v58 = *(unsigned __int8 *)(v40 + 47);
    if (v56) {
      uint64_t v58 = *(void *)(v40 + 32);
    }
    int v59 = *((char *)v54 + 23);
    BOOL v60 = v59 < 0;
    long long v61 = (void *)*v54;
    if (v59 >= 0) {
      long long v61 = v54;
    }
    uint64_t v62 = *((unsigned __int8 *)v54 + 23);
    if (v60) {
      uint64_t v62 = v54[1];
    }
    uint64_t v63 = v57 - 1;
    uint64_t v64 = (char *)v61 - 1;
    while (v58 && v62)
    {
      int v65 = *(unsigned __int8 *)(v63 + v58);
      int v66 = v64[v62];
      --v58;
      --v62;
      if (v65 != v66) {
        goto LABEL_81;
      }
    }
    if (!v62) {
      goto LABEL_84;
    }
LABEL_81:
    if (*(char *)(v38 + 23) < 0) {
      operator delete(*(void **)v38);
    }
    long long v67 = *(_OWORD *)v10;
    *(void *)(v38 + 16) = *(void *)(v10 + 16);
    *(_OWORD *)uint64_t v38 = v67;
    v38 += 24;
    *(unsigned char *)(v40 + 47) = 0;
    *(unsigned char *)uint64_t v10 = 0;
LABEL_84:
    uint64_t v39 = v10 + 24;
  }
  while (v10 + 24 != v11);
LABEL_87:
  sub_101279BFC(a3, v38, *(long long **)(a3 + 8));
  uint64_t v68 = *(void *)a3;
  uint64_t v69 = *(void *)(a3 + 8);
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
  if (v68 != v69)
  {
    while ((sub_101282468(&v84, (const std::string *)v68) & 1) == 0)
    {
      v68 += 24;
      if (v68 == v69)
      {
        uint64_t v68 = v69;
        goto LABEL_99;
      }
    }
    if (v68 != v69)
    {
      for (uint64_t i = v68 + 24; i != v69; i += 24)
      {
        if ((sub_101282468(&v84, (const std::string *)i) & 1) == 0)
        {
          if (*(char *)(v68 + 23) < 0) {
            operator delete(*(void **)v68);
          }
          long long v71 = *(_OWORD *)i;
          *(void *)(v68 + 16) = *(void *)(i + 16);
          *(_OWORD *)uint64_t v68 = v71;
          v68 += 24;
          *(unsigned char *)(i + 23) = 0;
          *(unsigned char *)uint64_t i = 0;
        }
      }
    }
  }
LABEL_99:
  sub_101279BFC(a3, v68, *(long long **)(a3 + 8));
  uint64_t v72 = *(void *)a3;
  uint64_t v73 = *(void *)(a3 + 8);
  if (*(void *)a3 != v73)
  {
    do
    {
      if (*(char *)(a2 + 23) >= 0) {
        size_t v74 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v74 = *(void *)(a2 + 8);
      }
      sub_1001110E4((uint64_t)&v84, v74 + 1);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v75 = &v84;
      }
      else {
        int v75 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if (v74)
      {
        if (*(char *)(a2 + 23) >= 0) {
          int64_t v76 = (const void *)a2;
        }
        else {
          int64_t v76 = *(const void **)a2;
        }
        memmove(v75, v76, v74);
      }
      *(_WORD *)((char *)&v75->__r_.__value_.__l.__data_ + v74) = 47;
      int v77 = *(char *)(v72 + 23);
      if (v77 >= 0) {
        unint64_t v78 = (const std::string::value_type *)v72;
      }
      else {
        unint64_t v78 = *(const std::string::value_type **)v72;
      }
      if (v77 >= 0) {
        std::string::size_type v79 = *(unsigned __int8 *)(v72 + 23);
      }
      else {
        std::string::size_type v79 = *(void *)(v72 + 8);
      }
      uint64_t v80 = std::string::append(&v84, v78, v79);
      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      int64_t v86 = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if (v86 >= 0) {
        __int16 v82 = __p;
      }
      else {
        __int16 v82 = (void **)__p[0];
      }
      sub_1004BEB14((const char *)v82);
      if (SHIBYTE(v86) < 0) {
        operator delete(__p[0]);
      }
      v72 += 24;
    }
    while (v72 != v73);
  }
  return sub_1002220F0((uint64_t)v87);
}

void sub_10127491C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
}

void sub_1012749B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 504))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    uint64_t v1 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Side loading already in progress.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      LOWORD(v6[0]) = 0;
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDelete(CFAbsoluteTime)", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 504) = 1;
    sub_101279728((const char *)(a1 + 424), (uint64_t *)buf);
    long long v4 = *(_OWORD *)buf;
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    memset(buf, 0, sizeof(buf));
    sub_10127DF28(a1, &v4);
    v6[0] = (void **)&v4;
    sub_1000A7B4C(v6);
    v6[0] = (void **)buf;
    sub_1000A7B4C(v6);
  }
}

void sub_101274BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, char a17)
{
  a15 = (void **)&a17;
  sub_1000A7B4C(&a15);
  _Unwind_Resume(a1);
}

void sub_101274BE0(uint64_t a1, double a2)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_10231AE30);
  }
  long long v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "wifi #tiles, populateTilesSet", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::populateTilesSet(CFAbsoluteTime)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (!*(unsigned char *)(a1 + 216) && !*(unsigned char *)(a1 + 217))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
    sub_101279A4C((uint64_t *)a1, a2);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    unsigned int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = sub_10014D19C(v5 + 184);
      *(_DWORD *)buf = 134349056;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@TileEvent, wifi, indexed, %{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      sub_10014D19C(v5 + 184);
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::populateTilesSet(CFAbsoluteTime)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    *(unsigned char *)(a1 + 217) = 1;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 232))(a1, a2);
    (*(void (**)(void))(**(void **)(a1 + 496) + 24))(*(void *)(a1 + 496));
  }
}

id sub_101274F84(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  unsigned int v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WIFITILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    int v12 = 67109120;
    int v13 = a2;
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v7 = *(void **)(a3 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10127D174;
  v10[3] = &unk_1022C7AC0;
  char v11 = a2;
  void v10[4] = a3;
  v10[5] = a1;
  v10[6] = a3;
  return [v7 async:v10];
}

uint64_t sub_10127519C(uint64_t a1)
{
  *(void *)a1 = off_10231AE80;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101275220()
{
}

void sub_10127531C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a10) {
    sub_101AAACD8(&a9);
  }
  if (a17)
  {
    *(void *)(v19 - 24) = &a12;
    sub_100D1A044((void ***)(v19 - 24));
  }
  if (a19) {
    sub_1000DB0A0(a19);
  }
  uint64_t v21 = *(void *)(v19 - 32);
  *(void *)(v19 - 32) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_101275394()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024869E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024869E0))
  {
    xmmword_1024869C8 = 0uLL;
    unk_1024869D8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1024869C8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024869E0);
  }
  if (qword_1024869E8 != -1) {
    dispatch_once(&qword_1024869E8, &stru_10231AD40);
  }
  return &xmmword_1024869C8;
}

uint64_t sub_101275434(uint64_t a1)
{
  *(void *)a1 = off_10231AB30;
  *(void *)(a1 + 112) = off_10231AC58;
  *(void *)(a1 + 120) = &off_10231ACB8;
  sub_10127DD24(a1);
  uint64_t v8 = (void **)(a1 + 512);
  sub_100D1A044(&v8);
  uint64_t v2 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 488);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  uint64_t v5 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1008B4894(a1 + 128, *(void **)(a1 + 136));
  return sub_10127519C(a1);
}

uint64_t sub_1012755C4(uint64_t a1)
{
  return sub_101275434(a1 - 112);
}

uint64_t sub_1012755CC(uint64_t a1)
{
  return sub_101275434(a1 - 120);
}

void sub_1012755D4(uint64_t a1)
{
  sub_101275434(a1);

  operator delete();
}

void sub_10127560C(uint64_t a1)
{
  sub_101275434(a1 - 112);

  operator delete();
}

void sub_101275648(uint64_t a1)
{
  sub_101275434(a1 - 120);

  operator delete();
}

void sub_101275684(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    v31[0] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WIFITILE: onDataProtectionNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    int v19 = *a3;
    int v27 = 134218240;
    *(void *)uint64_t v28 = a1;
    *(_WORD *)&v28[8] = 1024;
    v29[0] = v19;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v20);
    if (v20 != buf) {
      free(v20);
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
  if (!*a3)
  {
    double v10 = v9;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    char v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(unsigned __int8 *)(a1 + 216);
      int v13 = *a4;
      BOOL v14 = *a4 != 1;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      LOWORD(v31[0]) = 1024;
      *(_DWORD *)((char *)v31 + 2) = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WIFITILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      int v21 = *(unsigned __int8 *)(a1 + 216);
      int v22 = *a4;
      BOOL v23 = *a4 != 1;
      int v27 = 67109632;
      *(_DWORD *)uint64_t v28 = v21;
      *(_WORD *)&v28[4] = 1024;
      *(_DWORD *)&v28[6] = v23;
      LOWORD(v29[0]) = 1024;
      *(_DWORD *)((char *)v29 + 2) = v22;
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v24);
      if (v24 != buf) {
        free(v24);
      }
    }
    int v15 = *(unsigned __int8 *)(a1 + 216);
    int v16 = *a4;
    int v17 = *a4 != 1;
    *(unsigned char *)(a1 + 216) = v17;
    if (v16 == 1)
    {
      sub_10145319C(*(void *)(a1 + 480));
      sub_101274BE0(a1, v10);
      sub_1012743F8((void *)(a1 + 128), a1 + 424, (uint64_t)v26);
      *(void *)buf = v26;
      sub_1000A7B4C((void ***)buf);
      sub_1012749B4(a1);
    }
    if (v15 != v17)
    {
      sub_101275BE4(a1, v10);
      if (!*(unsigned char *)(a1 + 216))
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        BOOL v18 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WIFITILE: updateProtectionClass, skip on unlock", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231AE10);
          }
          LOWORD(v27) = 0;
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v25);
          if (v25 != buf) {
            free(v25);
          }
        }
        sub_1014530F0(*(void *)(a1 + 480), (uint64_t)"Unlock");
      }
      sub_1000209E0(a1, 0, v10);
    }
  }
}

void sub_101275BE4(uint64_t a1, double a2)
{
  if (qword_102419630 != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WIFITILE: cleanUpDownloadList, start, isLocked, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      int v26 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)uint64_t v33 = 67109120;
      *(_DWORD *)&v33[4] = v26;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
    if (*(void *)(a1 + 144) >= (unint64_t)*(int *)(a1 + 416))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      uint64_t v6 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 144);
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILES: cleanUpDownloadList, download list is too large, %lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        uint64_t v30 = *(void *)(a1 + 144);
        *(_DWORD *)uint64_t v33 = 134217984;
        *(void *)&v33[4] = v30;
        BOOL v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v31);
        if (v31 != buf) {
          free(v31);
        }
      }
      sub_101277090(a1);
    }
    int v32 = 0;
    if (*(unsigned char *)(a1 + 216)) {
      break;
    }
    int v8 = *(uint64_t **)(a1 + 128);
    if (v8 == (uint64_t *)(a1 + 136)) {
      break;
    }
    int v32 = 0;
    while (1)
    {
      double v9 = (uint64_t *)v8[1];
      double v10 = v8;
      if (v9)
      {
        do
        {
          char v11 = v9;
          double v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          char v11 = (uint64_t *)v10[2];
          BOOL v12 = *v11 == (void)v10;
          double v10 = v11;
        }
        while (!v12);
      }
      int v13 = (unsigned int *)v8[10];
      BOOL v14 = v13 + 12;
      if (v13[12]) {
        break;
      }
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
      int v16 = *(_DWORD *)(a1 + 408);
      BOOL v17 = sub_10013D858(v15 + 184, v14);
      if (v17)
      {
        uint64_t v18 = sub_100144000(v15 + 184, v14);
        BOOL v19 = sub_100065380(v18, v16 > 1, *(float *)(v15 + 128), a2);
      }
      else
      {
        BOOL v19 = 0;
      }
      if (!sub_100065F70((uint64_t)v13) && !v19 && (v17 & sub_10014548C((uint64_t)v13)) == 1)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        uint64_t v20 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v13 + 16))(buf, v13);
          int v21 = buf;
          if (v38 < 0) {
            int v21 = *(unsigned char **)buf;
          }
          *(_DWORD *)uint64_t v33 = 136315138;
          *(void *)&v33[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WIFITILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download", v33, 0xCu);
          if (v38 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231AE10);
          }
          (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v13 + 16))(v33, v13);
          int v22 = v33;
          if (v34 < 0) {
            int v22 = *(unsigned char **)v33;
          }
          int v35 = 136315138;
          int v36 = v22;
          BOOL v23 = (char *)_os_log_send_and_compose_impl();
          if (v34 < 0) {
            operator delete(*(void **)v33);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v23);
          if (v23 != buf) {
            free(v23);
          }
        }
        sub_1000F0A30((uint64_t **)(a1 + 128), v8);
        sub_1008B4638((uint64_t)(v8 + 4));
        operator delete(v8);
        ++v32;
      }
      if (!*(unsigned char *)(a1 + 216))
      {
        int v8 = v11;
        if (v11 != (uint64_t *)(a1 + 136)) {
          continue;
        }
      }
      goto LABEL_46;
    }
    sub_101AAAD14();
    __break(1u);
LABEL_53:
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
LABEL_46:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  int v24 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v25 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v25;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v32;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WIFITILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    int v28 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)uint64_t v33 = 67109376;
    *(_DWORD *)&v33[4] = v28;
    *(_WORD *)&v33[8] = 1024;
    *(_DWORD *)&v33[10] = v32;
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
}

void sub_1012763F0(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  double v7 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  int v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a3;
    *(_DWORD *)buf = 67109120;
    int v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "onCompanionNotification, notification, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*a3 == 5)
  {
    int v10 = *a4;
    *(unsigned char *)(a1 + 412) = v10;
    if (v10) {
      (*(void (**)(void))(**(void **)(a1 + 496) + 32))(*(void *)(a1 + 496));
    }
    sub_1000209E0(a1, 1u, v7);
  }
}

void sub_101276638(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
  if (!*(unsigned char *)(a1 + 216))
  {
    sub_10145319C(*(void *)(a1 + 480));
    sub_1012749B4(a1);
  }
  (*(void (**)(uint64_t, double))(*(void *)a1 + 232))(a1, v2);
  sub_1012743F8((void *)(a1 + 128), a1 + 424, (uint64_t)v3);
  uint64_t v4 = (void **)v3;
  sub_1000A7B4C(&v4);
  sub_101276720(a1);
  sub_1000209E0(a1, 0, v2);
}

void sub_101276720(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  double v3 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
  int v31 = *(_DWORD *)(a1 + 408);
  uint64_t v4 = (void *)sub_1000D8908(v2 + 184);
  uint64_t v5 = sub_1000B894C(v2 + 184);
  if (v4 != (void *)v5)
  {
    uint64_t v6 = (void *)v5;
    char v28 = 0;
    uint64_t v7 = a1;
    uint64_t v8 = a1 + 128;
    uint64_t v29 = v7;
    uint64_t v30 = (void *)(v7 + 136);
    do
    {
      uint64_t v9 = v4[10];
      BOOL v10 = sub_101045914(v9, v31 > 1, v3, *(float *)(v2 + 128));
      BOOL v11 = sub_100065380(v9, v31 > 1, *(float *)(v2 + 128), v3);
      BOOL v12 = sub_100144248(v8, v9 + 48);
      if (sub_10014548C(v9))
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        int v13 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(void ***__return_ptr, uint64_t))(*(void *)v9 + 16))(&v39, v9);
          BOOL v14 = (void **)&v39;
          if (SHIBYTE(v43) < 0) {
            BOOL v14 = v39;
          }
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v10;
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v11;
          HIWORD(buf) = 2080;
          int v36 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WIFITILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s", (uint8_t *)&buf, 0x18u);
          if (SHIBYTE(v43) < 0) {
            operator delete(v39);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231AE10);
          }
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 16))(__p, v9);
          BOOL v23 = __p;
          if (v34 < 0) {
            BOOL v23 = (void **)__p[0];
          }
          LODWORD(v39) = 67109634;
          HIDWORD(v39) = v10;
          __int16 v40 = 1024;
          BOOL v41 = v11;
          __int16 v42 = 2080;
          BOOL v43 = v23;
          int v24 = (char *)_os_log_send_and_compose_impl();
          if (v34 < 0) {
            operator delete(__p[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::refreshTilesDataIfNeeded()", "%s\n", v24);
          if (v24 != (char *)&buf) {
            free(v24);
          }
        }
        if (v30 == v12 && v10)
        {
          sub_10125C090(*(_DWORD *)(v2 + 4), &v39);
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          LOWORD(buf) = 0;
          BYTE2(buf) = 0;
          *((void *)&buf + 1) = 0xBFF0000000000000;
          CFAbsoluteTime v37 = Current;
          __int16 v38 = 1;
          LODWORD(v36) = 0;
          sub_101045C60((uint64_t)v39, v9);
          BOOL v17 = v39;
          uint64_t v39 = 0;
          uint64_t v32 = (uint64_t)v17;
          sub_10127A4D8(v29, &v32, v9 + 48, &buf);
          uint64_t v18 = v32;
          uint64_t v32 = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          BOOL v19 = v39;
          uint64_t v39 = 0;
          if (v19) {
            (*((void (**)(void **))*v19 + 1))(v19);
          }
          char v28 = 1;
        }
      }
      uint64_t v20 = (void *)v4[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          int v21 = (void *)v4[2];
          BOOL v22 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v22);
      }
      uint64_t v4 = v21;
    }
    while (v21 != v6);
    if (v28)
    {
      int v25 = (*(uint64_t (**)(void))(**(void **)(v29 + 448) + 80))(*(void *)(v29 + 448));
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      int v26 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67240192;
        DWORD1(buf) = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "@TileSched, wifi, set, %{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        LODWORD(v39) = 67240192;
        HIDWORD(v39) = v25;
        int v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::refreshTilesDataIfNeeded()", "%s\n", v27);
        if (v27 != (char *)&buf) {
          free(v27);
        }
      }
    }
  }
}

void sub_101276D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    sub_101A9D8B8();
  }
  uint64_t v21 = *(void *)(v19 - 144);
  *(void *)(v19 - 144) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(exception_object);
}

id *sub_101276DB4(uint64_t a1)
{
  sub_1000E1294((uint64_t *)v11, (uint64_t)"clearLocationInformationWifi", 0);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v15 = "clearLocationInformationWifi";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    int v12 = 136446210;
    int v13 = "clearLocationInformationWifi";
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::clearLocationInformation()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_101277090(a1);
  *(_DWORD *)(a1 + 232) = 0xFFFF;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 252) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 268) = _Q0;
  *(_OWORD *)(a1 + 284) = _Q0;
  *(_OWORD *)(a1 + 300) = _Q0;
  *(_DWORD *)(a1 + 316) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 348) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 356) = 0x7FFFFFFF;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  sub_100FFB390(a1 + 456);
  (*(void (**)(void))(**(void **)(a1 + 448) + 40))(*(void *)(a1 + 448));
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 208))(a1, 1, *(unsigned int *)(v8 + 4));
  return sub_1000E1098(v11);
}

void sub_10127706C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_101277090(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: cancelAllDownloads, planned, %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::cancelAllDownloads()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v4 = *(void *)(a1 + 208);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    *(unsigned char *)(a1 + 192) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    *(unsigned char *)(a1 + 160) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 128);
  uint64_t v7 = (void *)(a1 + 136);
  if (v6 != (void *)(a1 + 136))
  {
    do
    {
      sub_10104842C(v6[10]);
      uint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v7);
  }
  sub_1008B4894(a1 + 128, *(void **)(a1 + 136));
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = v7;
}

id *sub_101277310(uint64_t a1)
{
  return sub_101276DB4(a1 - 112);
}

void sub_101277318(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)long long buf = 134218240;
    uint64_t v20 = a1;
    __int16 v21 = 1024;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WIFITILE: onClientNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  int v9 = *a3;
  if (*a3 == 6)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    BOOL v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WIFITILE: #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      BOOL v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);
  }
  else if (v9 == 4)
  {
    *(unsigned char *)(a1 + 413) = *(_DWORD *)(a4 + 188) == 1;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    int v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(unsigned __int8 *)(a1 + 413);
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v20) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WIFITILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (*(unsigned char *)(a1 + 413))
    {
      uint64_t v14 = 1;
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);
      uint64_t v14 = *(unsigned __int8 *)(a1 + 413);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 496) + 16))(*(void *)(a1 + 496), v14);
  }
  else if (!v9)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    BOOL v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WIFITILE: kNotificationReset", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 496) + 16))(*(void *)(a1 + 496), 2);
    (*(void (**)(void))(**(void **)(a1 + 448) + 88))(*(void *)(a1 + 448));
  }
}

void sub_1012779D4(uint64_t a1, uint64_t a2, double a3)
{
  if (qword_102419630 != -1) {
    goto LABEL_58;
  }
  while (1)
  {
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedDownloadItems, start", buf, 2u);
    }
    uint64_t v7 = sub_10013D1A0(115, 2);
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
      LOWORD(v53) = 0;
      LODWORD(v43) = 2;
      __int16 v40 = (char *)_os_log_send_and_compose_impl();
      uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
    int v16 = *(uint64_t **)a2;
    if (*(void *)a2 == a2 + 8) {
      break;
    }
    int v17 = 0;
    *(void *)&long long v15 = 134349571;
    long long v47 = v15;
    *(void *)&long long v15 = 134284033;
    long long v46 = v15;
    while (1)
    {
      uint64_t v18 = v16[10];
      long long v53 = *((_OWORD *)v16 + 2);
      uint64_t v54 = v16[6];
      if (*((char *)v16 + 79) < 0)
      {
        uint64_t v7 = (uint64_t)sub_1000DC48C(&v55, (void *)v16[7], v16[8]);
      }
      else
      {
        long long v55 = *(_OWORD *)(v16 + 7);
        uint64_t v56 = v16[9];
      }
      if (*(_DWORD *)(v18 + 48)) {
        break;
      }
      uint64_t v19 = (uint64_t *)v16[1];
      uint64_t v20 = v16;
      if (v19)
      {
        do
        {
          __int16 v21 = v19;
          uint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          __int16 v21 = (uint64_t *)v20[2];
          BOOL v22 = *v21 == (void)v20;
          uint64_t v20 = v21;
        }
        while (!v22);
      }
      double v23 = *(double *)(v18 + 136);
      double v24 = *(double *)(*(void *)(a1 + 480) + 16);
      uint64_t v7 = sub_100065F70(v18);
      double v25 = vabdd_f64(a3, v23);
      if (v25 < v24) {
        char v26 = 1;
      }
      else {
        char v26 = v7;
      }
      if ((v26 & 1) == 0)
      {
        sub_1014526C8(*(void *)(a1 + 480), v18 + 48);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        int v27 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v18 + 16))(__p, v18);
          char v28 = __p;
          if (__p[23] < 0) {
            char v28 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = v47;
          double v58 = v25;
          __int16 v59 = 2050;
          double v60 = v24;
          __int16 v61 = 2081;
          uint64_t v62 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WifiTile, deleteAgedDownloadItems, delete, age, %{public}.1lf, %{public}.1lf, tile, %{private}s", buf, 0x20u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231ADF0);
          }
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v18 + 16))(v49, v18);
          uint64_t v33 = v49;
          if (v50 < 0) {
            uint64_t v33 = (void **)v49[0];
          }
          *(_DWORD *)std::string __p = v47;
          *(double *)&__p[4] = v25;
          *(_WORD *)&unsigned char __p[12] = 2050;
          *(double *)&__p[14] = v24;
          *(_WORD *)&__p[22] = 2081;
          uint64_t v52 = (uint64_t)v33;
          LODWORD(v43) = 32;
          char v34 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v50) < 0) {
            operator delete(v49[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        uint64_t v29 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          double v30 = sub_10013DAC0((uint64_t)&v53);
          double v31 = sub_10013DA9C((uint64_t)&v53);
          uint64_t v32 = *(void *)(a2 + 16) - 1;
          *(_DWORD *)long long buf = v46;
          double v58 = v30;
          __int16 v59 = 2049;
          double v60 = v31;
          __int16 v61 = 2050;
          uint64_t v62 = (unsigned char *)v32;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231ADF0);
          }
          double v35 = sub_10013DAC0((uint64_t)&v53);
          double v36 = sub_10013DA9C((uint64_t)&v53);
          uint64_t v37 = *(void *)(a2 + 16) - 1;
          *(_DWORD *)std::string __p = v46;
          *(double *)&__p[4] = v35;
          *(_WORD *)&unsigned char __p[12] = 2049;
          *(double *)&__p[14] = v36;
          *(_WORD *)&__p[22] = 2050;
          uint64_t v52 = v37;
          LODWORD(v43) = 32;
          __int16 v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        sub_1000F0A30((uint64_t **)a2, v16);
        sub_1008B4638((uint64_t)(v16 + 4));
        operator delete(v16);
        ++v17;
      }
      if (SHIBYTE(v56) < 0) {
        operator delete((void *)v55);
      }
      int v16 = v21;
      if (v21 == (uint64_t *)(a2 + 8)) {
        goto LABEL_51;
      }
    }
    sub_101AAB00C(v7, v8, v9, v10, v11, v12, v13, v14, (uint8_t)v42, v43, (uint64_t)v44, v45, v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, (uint64_t)v49[0], (uint64_t)v49[1],
      v50,
      *(uint64_t *)__p,
      *(uint64_t *)&__p[8],
      *(uint64_t *)&__p[16],
      v52);
    uint64_t v43 = 426;
    uint64_t v44 = "deleteAgedDownloadItems";
    __int16 v42 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm";
    abort_report_np();
    __break(1u);
LABEL_58:
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  int v17 = 0;
LABEL_51:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v39 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v58) = v17;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedDownloadItems, deleted, %u, done", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    LODWORD(v53) = 67109120;
    DWORD1(v53) = v17;
    BOOL v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
}

void sub_101278204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101278244(uint64_t a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v4 + 31) >= 0) {
      uint64_t v6 = v4 + 8;
    }
    else {
      uint64_t v6 = *(void *)(v4 + 8);
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v54 = v6;
    *(_WORD *)&v54[8] = 2048;
    uint64_t v55 = sub_10014D19C(v4 + 184);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedTiles, start, name, %s, size, %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    if (*(char *)(v4 + 31) >= 0) {
      unint64_t v30 = v4 + 8;
    }
    else {
      unint64_t v30 = *(void *)(v4 + 8);
    }
    unsigned int v46 = 136315394;
    unint64_t v47 = v30;
    __int16 v48 = 2048;
    uint64_t v49 = sub_10014D19C(v4 + 184);
    double v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
  }
  sub_1014540C4(*(void *)(a1 + 480), (uint64_t)&v39, a2);
  uint64_t v38 = v4;
  uint64_t v7 = (double *)v39;
  uint64_t v8 = v40;
  if (v39 != v40)
  {
    uint64_t v9 = (uint64_t **)(v4 + 184);
    do
    {
      sub_10014F62C(v7, (uint64_t)&v46);
      uint64_t v10 = sub_100144000((uint64_t)v9, &v46);
      if (v10)
      {
        if (!sub_10014548C(v10))
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_10231AE30);
          }
          uint64_t v11 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67174913;
            *(_DWORD *)uint64_t v54 = v47;
            *(_WORD *)&v54[4] = 1025;
            *(_DWORD *)&v54[6] = HIDWORD(v47);
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Deleted wifi #tile isFileExistsOnServer is false. x, %{private}d, y, %{private}d, #CloneMe", buf, 0xEu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_10231AE30);
            }
            int v41 = 67174913;
            *(_DWORD *)__int16 v42 = v47;
            *(_WORD *)&v42[4] = 1025;
            *(_DWORD *)&v42[6] = HIDWORD(v47);
            __int16 v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v21);
            if (v21 != (char *)buf) {
              free(v21);
            }
          }
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        uint64_t v12 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          double v13 = sub_10013DAC0((uint64_t)&v46);
          double v14 = sub_10013DA9C((uint64_t)&v46);
          uint64_t v15 = sub_10014D19C((uint64_t)v9);
          *(_DWORD *)long long buf = 134284033;
          *(double *)uint64_t v54 = v13;
          *(_WORD *)&v54[8] = 2049;
          uint64_t v55 = *(void *)&v14;
          __int16 v56 = 2050;
          uint64_t v57 = v15 - 1;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231ADF0);
          }
          double v17 = sub_10013DAC0((uint64_t)&v46);
          double v18 = sub_10013DA9C((uint64_t)&v46);
          uint64_t v19 = sub_10014D19C((uint64_t)v9);
          int v41 = 134284033;
          *(double *)__int16 v42 = v17;
          *(_WORD *)&v42[8] = 2049;
          double v43 = v18;
          __int16 v44 = 2050;
          uint64_t v45 = v19 - 1;
          uint64_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        sub_1008B3DC4(v9, &v46);
      }
      else if (*(unsigned char *)(a1 + 217))
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_10231AE30);
        }
        int v16 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67174913;
          *(_DWORD *)uint64_t v54 = v47;
          *(_WORD *)&v54[4] = 1025;
          *(_DWORD *)&v54[6] = HIDWORD(v47);
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Missing wifi #tile, x, %{private}d, y, %{private}d, #CloneMe", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_10231AE30);
          }
          int v41 = 67174913;
          *(_DWORD *)__int16 v42 = v47;
          *(_WORD *)&v42[4] = 1025;
          *(_DWORD *)&v42[6] = HIDWORD(v47);
          BOOL v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
      }
      if (v52 < 0) {
        operator delete(__p);
      }
      v7 += 18;
    }
    while (v7 != v8);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  double v23 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v25 = v39;
    double v24 = v40;
    uint64_t v26 = sub_10014D19C(v38 + 184);
    uint64_t v27 = v38 + 8;
    uint64_t v28 = *(void *)(v38 + 8);
    int v29 = *(char *)(v38 + 31);
    *(_DWORD *)long long buf = 134218498;
    if (v29 < 0) {
      uint64_t v27 = v28;
    }
    *(void *)uint64_t v54 = 0x8E38E38E38E38E39 * (((char *)v24 - v25) >> 4);
    *(_WORD *)&v54[8] = 2048;
    uint64_t v55 = v26;
    __int16 v56 = 2080;
    uint64_t v57 = v27;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedTiles, end, numOfDeletedTiles, %lu, remain, %lu, name, %s", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v33 = v39;
    uint64_t v32 = v40;
    uint64_t v34 = sub_10014D19C(v38 + 184);
    double v35 = *(void **)(v38 + 8);
    int v36 = *(char *)(v38 + 31);
    unsigned int v46 = 134218498;
    if (v36 >= 0) {
      double v35 = (void *)(v38 + 8);
    }
    unint64_t v47 = 0x8E38E38E38E38E39 * (((char *)v32 - v33) >> 4);
    __int16 v48 = 2048;
    uint64_t v49 = v34;
    __int16 v50 = 2080;
    std::string __p = v35;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  if (v39)
  {
    __int16 v40 = (double *)v39;
    operator delete(v39);
  }
}

void sub_101278B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101278BF4(uint64_t a1, uint64_t a2)
{
  return sub_100051B80(a1 - 112, a2);
}

void sub_101278BFC(uint64_t a1, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = v4 + 8;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v6 = *(void *)(v4 + 8);
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WIFITILE: dispatch, deleteAgedTiles, for, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::deleteAgedTiles(CFAbsoluteTime)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WIFITILE: deleteAgedTiles, fTilesToDownload", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::deleteAgedTiles(CFAbsoluteTime)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_1012779D4(a1, a1 + 128, a2);
  sub_101278244(a1, a2);
}

void sub_101278F44(uint64_t a1, double a2)
{
}

void sub_101278F4C(uint64_t a1, int a2, int a3)
{
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = v42 + 8;
    if (*(char *)(v42 + 31) < 0) {
      uint64_t v7 = *(void *)(v42 + 8);
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WIFITILE: removeAllTiles, cleaning map, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v35 = v42 + 8;
    if (*(char *)(v42 + 31) < 0) {
      uint64_t v35 = *(void *)(v42 + 8);
    }
    *(_DWORD *)std::string __p = 67109378;
    *(_DWORD *)&__p[4] = a3;
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = v35;
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v36);
    if (v36 != buf) {
      free(v36);
    }
  }
  uint64_t v8 = v42 + 184;
  uint64_t v9 = (void *)sub_1000D8908(v42 + 184);
  if (v9 != (void *)sub_1000B894C(v42 + 184))
  {
    do
    {
      if (a2)
      {
        uint64_t v10 = v9[10] + 48;
        sub_1014526C8(*(void *)(a1 + 480), v10);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        uint64_t v11 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          double v12 = sub_10013DAC0(v10);
          double v13 = sub_10013DA9C(v10);
          uint64_t v14 = sub_10014D19C(v8);
          *(_DWORD *)long long buf = 134284033;
          *(double *)&uint8_t buf[4] = v12;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)&unsigned char buf[14] = v13;
          __int16 v49 = 2050;
          uint64_t v50 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@TileList, wifi, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231ADF0);
          }
          *(_DWORD *)std::string __p = 134284033;
          *(void *)&__p[4] = sub_10013DAC0(v10);
          *(_WORD *)&unsigned char __p[12] = 2049;
          *(void *)&__p[14] = sub_10013DA9C(v10);
          *(_WORD *)&__p[22] = 2050;
          uint64_t v45 = sub_10014D19C(v8);
          double v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v18);
          if (v18 != buf) {
            free(v18);
          }
        }
      }
      uint64_t v15 = (void *)v9[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (void *)v9[2];
          BOOL v17 = *v16 == (void)v9;
          uint64_t v9 = v16;
        }
        while (!v17);
      }
      uint64_t v9 = v16;
    }
    while (v16 != (void *)sub_1000B894C(v8));
  }
  sub_1008B42E0(v8);
  sub_101454C1C(*(void **)(a1 + 480));
  if (a2)
  {
    sub_101279728((const char *)(a1 + 424), (uint64_t *)buf);
    uint64_t v19 = *(void *)buf;
    for (uint64_t i = *(void *)&buf[8]; v19 != i; v19 += 24)
    {
      if (*(char *)(a1 + 447) >= 0) {
        size_t v21 = *(unsigned __int8 *)(a1 + 447);
      }
      else {
        size_t v21 = *(void *)(a1 + 432);
      }
      sub_1001110E4((uint64_t)&v43, v21 + 1);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v22 = &v43;
      }
      else {
        BOOL v22 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if (v21)
      {
        if (*(char *)(a1 + 447) >= 0) {
          double v23 = (const void *)(a1 + 424);
        }
        else {
          double v23 = *(const void **)(a1 + 424);
        }
        memmove(v22, v23, v21);
      }
      *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 47;
      int v24 = *(char *)(v19 + 23);
      if (v24 >= 0) {
        double v25 = (const std::string::value_type *)v19;
      }
      else {
        double v25 = *(const std::string::value_type **)v19;
      }
      if (v24 >= 0) {
        std::string::size_type v26 = *(unsigned __int8 *)(v19 + 23);
      }
      else {
        std::string::size_type v26 = *(void *)(v19 + 8);
      }
      uint64_t v27 = std::string::append(&v43, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v27->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (__p[23] >= 0) {
        int v29 = __p;
      }
      else {
        int v29 = *(const char **)__p;
      }
      sub_1004BEB14(v29);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_10145391C(*(void *)(a1 + 480));
    *(void *)std::string __p = buf;
    sub_1000A7B4C((void ***)__p);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  unint64_t v30 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v42 + 31) >= 0) {
      uint64_t v31 = v42 + 8;
    }
    else {
      uint64_t v31 = *(void *)(v42 + 8);
    }
    uint64_t v32 = sub_10014D19C(v8);
    uint64_t v33 = sub_1008B42D8(v8);
    uint64_t v34 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = v31;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v32;
    __int16 v49 = 2048;
    uint64_t v50 = v33;
    __int16 v51 = 2048;
    uint64_t v52 = v34;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WIFITILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    if (*(char *)(v42 + 31) >= 0) {
      uint64_t v37 = v42 + 8;
    }
    else {
      uint64_t v37 = *(void *)(v42 + 8);
    }
    uint64_t v38 = sub_10014D19C(v8);
    uint64_t v39 = sub_1008B42D8(v8);
    uint64_t v40 = *(void *)(a1 + 144);
    *(_DWORD *)std::string __p = 136315906;
    *(void *)&__p[4] = v37;
    *(_WORD *)&unsigned char __p[12] = 2048;
    *(void *)&__p[14] = v38;
    *(_WORD *)&__p[22] = 2048;
    uint64_t v45 = v39;
    __int16 v46 = 2048;
    uint64_t v47 = v40;
    int v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v41);
    if (v41 != buf) {
      free(v41);
    }
  }
}

void sub_1012796D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::string __p = &a31;
  sub_1000A7B4C((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_101279728(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)a1;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v4 = opendir(a1);
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = readdir(v4);
      if (!v5) {
        break;
      }
      d_name = v5->d_name;
      if (strcmp(".", v5->d_name) && strcmp("..", d_name))
      {
        unint64_t v7 = a2[1];
        if (v7 >= a2[2])
        {
          uint64_t v8 = sub_10106991C(a2, d_name);
        }
        else
        {
          sub_100134750((void *)a2[1], d_name);
          uint64_t v8 = v7 + 24;
          a2[1] = v7 + 24;
        }
        a2[1] = v8;
      }
    }
    closedir(v4);
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    uint64_t v9 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v2 + 23) >= 0) {
        uint64_t v10 = v2;
      }
      else {
        uint64_t v10 = (uint64_t *)*v2;
      }
      *(_DWORD *)long long buf = 136380675;
      double v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning, failed to read directory, %{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::vector<std::string> CLWifiTilesManager::listFilesInDirectory(const std::string &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_1012799A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000A7B4C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1012799D4(uint64_t a1, int a2, int a3)
{
}

void sub_1012799DC()
{
}

void sub_101279A28()
{
}

uint64_t sub_101279A4C(uint64_t *a1, double a2)
{
  (*(void (**)(uint64_t *, void))(*a1 + 208))(a1, 0);
  sub_101279C84(a1, (uint64_t)v5, a2);
  sub_10014F400((uint64_t)v5, v6);
  return 1;
}

void sub_101279AC8(id a1, unint64_t a2, unint64_t a3)
{
  double v5 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10231AE50);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    v7[0] = 68290306;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = "elapsed";
    __int16 v12 = 2050;
    unint64_t v13 = a2;
    __int16 v14 = 2050;
    unint64_t v15 = a3;
    __int16 v16 = 2050;
    double v17 = v5;
    __int16 v18 = 2050;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLWifiTilesManager::lockAllOnDiskWifiTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v7, 0x44u);
  }
}

uint64_t sub_101279BFC(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_1019EFF10((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_101279C84(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (!*(unsigned char *)(a1[60] + 53))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "The WifiAccessPointLocationService schema is incorrect.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      LOWORD(v39) = 0;
      long long v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  sub_100181F80(a1[60], &v30);
  uint64_t v7 = (double *)v30;
  __int16 v8 = v31;
  if (v30 != v31)
  {
    do
    {
      uint64_t v29 = 0;
      char v9 = (*(uint64_t (**)(uint64_t *, double *, double))(*a1 + 256))(a1, v7, a3);
      uint64_t v29 = v10;
      sub_10014F62C(v7, (uint64_t)&v39);
      if (v9)
      {
        sub_101282018((uint64_t **)a2, (uint64_t)&v39, (uint64_t)&v39, &v29);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        uint64_t v11 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          double v12 = sub_10013DAC0((uint64_t)&v39);
          double v13 = sub_10013DA9C((uint64_t)&v39);
          uint64_t v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
          uint64_t v15 = sub_10014D19C(v14 + 184);
          *(_DWORD *)long long buf = 134284033;
          *(double *)&uint8_t buf[4] = v12;
          __int16 v46 = 2049;
          double v47 = v13;
          __int16 v48 = 2050;
          uint64_t v49 = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@TileList, wifi, add, llsw, %{private}.2lf, %{private}.2lf, database, size, %{public}lu", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_25;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        double v16 = sub_10013DAC0((uint64_t)&v39);
        double v17 = sub_10013DA9C((uint64_t)&v39);
        uint64_t v18 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
        uint64_t v19 = sub_10014D19C(v18 + 184);
        *(_DWORD *)uint64_t v32 = 134284033;
        *(double *)&v32[4] = v16;
        __int16 v33 = 2049;
        double v34 = v17;
        __int16 v35 = 2050;
        uint64_t v36 = v19;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v20);
      }
      else
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_10231AE30);
        }
        size_t v21 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
        {
          sub_100C094CC((uint64_t)&v39);
          BOOL v22 = buf;
          if (v48 < 0) {
            BOOL v22 = *(unsigned char **)buf;
          }
          *(_DWORD *)uint64_t v32 = 136380675;
          *(void *)&v32[4] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to create tile file object, %{private}s", v32, 0xCu);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_25;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_10231AE30);
        }
        sub_100C094CC((uint64_t)&v39);
        double v23 = v32;
        if (v35 < 0) {
          double v23 = *(unsigned char **)v32;
        }
        int v37 = 136380675;
        uint64_t v38 = v23;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v35) < 0) {
          operator delete(*(void **)v32);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v20);
      }
      if (v20 != buf) {
        free(v20);
      }
LABEL_25:
      if (v44 < 0) {
        operator delete(__p);
      }
      v7 += 18;
    }
    while (v7 != v8);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  int v24 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v25 = *(double *)(a2 + 16);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = 0x8E38E38E38E38E39 * (((char *)v31 - (unsigned char *)v30) >> 4);
    __int16 v46 = 2048;
    double v47 = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WIFITILE: db to map, %lu, %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v26 = *(void *)(a2 + 16);
    int v39 = 134218240;
    unint64_t v40 = 0x8E38E38E38E38E39 * (((char *)v31 - (unsigned char *)v30) >> 4);
    __int16 v41 = 2048;
    uint64_t v42 = v26;
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)", "%s\n", v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  if (v30)
  {
    uint64_t v31 = (double *)v30;
    operator delete(v30);
  }
}

void sub_10127A464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10014F400(v33, *(char **)(v33 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10127A4D8(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  std::string v32 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
  {
    sub_1000DC48C(&v33, *(void **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    long long v33 = *(_OWORD *)(a3 + 24);
    uint64_t v34 = *(void *)(a3 + 40);
  }
  sub_101063234(*a2, &v32);
  uint64_t v7 = *a2;
  long long v8 = *a4;
  long long v9 = a4[1];
  *(_WORD *)(v7 + 144) = *((_WORD *)a4 + 16);
  *(_OWORD *)(v7 + 112) = v8;
  *(_OWORD *)(v7 + 128) = v9;
  sub_1010474E4(*a2, (uint64_t)&qword_102486970);
  uint64_t v10 = (uint64_t **)(a1 + 128);
  if ((void *)(a1 + 136) != sub_100144248(a1 + 128, (uint64_t)&v32))
  {
    sub_101AAB2D4(qword_102419630 == -1, v11, v12, v13, v14, v15, v16, v17, v28, v29, v30, v31, (uint64_t)v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_, v32.__r_.__value_.__r.__words[2], v33, *((uint64_t *)&v33 + 1), v34, *(uint64_t *)buf,
      *(uint64_t *)&buf[8],
      *(uint64_t *)&buf[16],
      v36,
      *(uint64_t *)v37,
      *(uint64_t *)&v37[8]);
    abort_report_np();
    __break(1u);
    goto LABEL_19;
  }
  if (qword_102419630 != -1) {
LABEL_19:
  }
    dispatch_once(&qword_102419630, &stru_10231AE10);
  uint64_t v18 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 16))(__p);
    uint64_t v19 = v39 >= 0 ? __p : (void **)__p[0];
    uint64_t v20 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WIFITILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu", buf, 0x16u);
    if (v39 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 16))(buf);
    if (buf[23] >= 0) {
      double v25 = buf;
    }
    else {
      double v25 = *(unsigned char **)buf;
    }
    uint64_t v26 = *(void *)(a1 + 144);
    *(_DWORD *)int v37 = 136315394;
    *(void *)&v37[4] = v25;
    *(_WORD *)&v37[12] = 2048;
    *(void *)&v37[14] = v26;
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)", "%s\n", v27);
    if (v27 != (char *)__p) {
      free(v27);
    }
  }
  __p[0] = &v32;
  size_t v21 = sub_1008B48F0(v10, (uint64_t)&v32, (uint64_t)&unk_101D0B290, (_OWORD **)__p);
  uint64_t v22 = *a2;
  *a2 = 0;
  uint64_t v23 = v21[10];
  v21[10] = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  return 1;
}

void sub_10127A890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10127A8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  uint64_t v3 = (void *)(a1 + 136);
  if (v2 != (void *)(a1 + 136))
  {
    while (sub_1001BF5C0(v2[10]) != a2)
    {
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
      if (v6 == v3) {
        return v3;
      }
    }
  }
  return v2;
}

id *sub_10127A94C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000E1294((uint64_t *)v54, (uint64_t)"wifiTileDownloaded", 0);
  long long v9 = sub_10127A8C4(a1, a2);
  if ((void *)(a1 + 136) == v9)
  {
    HIDWORD(v53) = 0;
  }
  else
  {
    uint64_t v10 = (_DWORD *)v9[10];
    HIDWORD(v53) = 0;
    if (v10)
    {
      uint64_t v11 = *(void *)(sub_1001BF5C0((uint64_t)v10) + 96);
      double v12 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
      double v13 = v12;
      uint64_t v14 = a1 + 456;
      if ((a3 & 1) != 0 || v11 == -1100) {
        id v15 = sub_100FFB390(v14);
      }
      else {
        sub_100FFB3C0(v14, v12);
      }
      if (v10[12])
      {
        sub_101AAB00C((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v50, v51, v52, v53, (uint64_t)v54[0], (uint64_t)v54[1], *(uint64_t *)v55, *(uint64_t *)&v55[8], *(uint64_t *)&v55[16], v56, *((uint64_t *)&v56 + 1),
          v57,
          *(uint64_t *)__p,
          *(uint64_t *)&__p[8],
          *(uint64_t *)&__p[16],
          *(uint64_t *)v59);
        abort_report_np();
        __break(1u);
      }
      else
      {
        uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
        if (a3)
        {
          if (_os_feature_enabled_impl()) {
            int v5 = 1;
          }
          else {
            int v5 = (*(uint64_t (**)(_DWORD *, char *))(*(void *)v10 + 40))(v10, (char *)&v53 + 4);
          }
        }
        else
        {
          int v5 = 0;
        }
        uint64_t v4 = &qword_102419000;
        if (qword_102419630 == -1) {
          goto LABEL_24;
        }
      }
      dispatch_once(&qword_102419630, &stru_10231AE10);
LABEL_24:
      double v25 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v26 = v5;
        (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)v10 + 16))(__p, v10);
        int v27 = __p[23];
        uint8_t v28 = *(unsigned char **)__p;
        uint64_t v29 = *(void *)(sub_1001BF5C0((uint64_t)v10) + 96);
        int v30 = *(_DWORD *)(a1 + 408);
        uint64_t v31 = __p;
        if (v27 < 0) {
          uint64_t v31 = v28;
        }
        int v32 = *(unsigned __int8 *)(a1 + 216);
        *(_DWORD *)long long buf = 136316674;
        *(void *)&uint8_t buf[4] = v31;
        __int16 v61 = 1024;
        int v5 = v26;
        *(_DWORD *)uint64_t v62 = v26;
        *(_WORD *)&long long v62[4] = 1024;
        *(_DWORD *)&v62[6] = v29;
        *(_WORD *)uint64_t v63 = 1024;
        *(_DWORD *)&v63[2] = v11 == -1100;
        *(_WORD *)uint64_t v64 = 1024;
        *(_DWORD *)&v64[2] = v30;
        __int16 v65 = 1024;
        int v66 = v32;
        __int16 v67 = 1024;
        int v68 = HIDWORD(v53);
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d", buf, 0x30u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v4 = &qword_102419000;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v4[198] != -1) {
          dispatch_once(&qword_102419630, &stru_10231AE10);
        }
        (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)v10 + 16))(v55, v10);
        int v39 = v55[23];
        unint64_t v40 = *(unsigned char **)v55;
        uint64_t v41 = *(void *)(sub_1001BF5C0((uint64_t)v10) + 96);
        int v42 = *(_DWORD *)(a1 + 408);
        std::string v43 = v55;
        if (v39 < 0) {
          std::string v43 = v40;
        }
        int v44 = *(unsigned __int8 *)(a1 + 216);
        *(_DWORD *)std::string __p = 136316674;
        *(void *)&__p[4] = v43;
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = v5;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v41;
        *(_WORD *)__int16 v59 = 1024;
        *(_DWORD *)&v59[2] = v11 == -1100;
        *(_WORD *)&v59[6] = 1024;
        *(_DWORD *)&v59[8] = v42;
        *(_WORD *)&v59[12] = 1024;
        *(_DWORD *)&v59[14] = v44;
        *(_WORD *)&v59[18] = 1024;
        *(_DWORD *)&v59[20] = HIDWORD(v53);
        uint64_t v45 = (char *)_os_log_send_and_compose_impl();
        if ((v55[23] & 0x80000000) != 0) {
          operator delete(*(void **)v55);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v45);
        if (v45 != buf) {
          free(v45);
        }
      }
      *(_OWORD *)std::string __p = *((_OWORD *)v10 + 3);
      *(void *)&__p[16] = *((void *)v10 + 8);
      if (*((char *)v10 + 95) < 0)
      {
        sub_1000DC48C(v59, *((void **)v10 + 9), *((void *)v10 + 10));
      }
      else
      {
        *(_OWORD *)__int16 v59 = *(_OWORD *)(v10 + 18);
        *(void *)&v59[16] = *((void *)v10 + 11);
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      long long v33 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        double v34 = sub_10013DAC0((uint64_t)__p);
        double v35 = sub_10013DA9C((uint64_t)__p);
        uint64_t v36 = *(void *)(sub_1001BF5C0((uint64_t)v10) + 96);
        *(_DWORD *)long long buf = 134284289;
        *(double *)&uint8_t buf[4] = v34;
        __int16 v61 = 2049;
        *(double *)uint64_t v62 = v35;
        *(_WORD *)&v62[8] = 1026;
        *(_DWORD *)uint64_t v63 = v5;
        *(_WORD *)&v63[4] = 1026;
        *(_DWORD *)uint64_t v64 = v36;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x22u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231ADF0);
        }
        double v46 = sub_10013DAC0((uint64_t)__p);
        double v47 = sub_10013DA9C((uint64_t)__p);
        uint64_t v48 = *(void *)(sub_1001BF5C0((uint64_t)v10) + 96);
        *(_DWORD *)uint64_t v55 = 134284289;
        *(double *)&v55[4] = v46;
        *(_WORD *)&v55[12] = 2049;
        *(double *)&v55[14] = v47;
        *(_WORD *)&v55[22] = 1026;
        LODWORD(v56) = v5;
        WORD2(v56) = 1026;
        *(_DWORD *)((char *)&v56 + 6) = v48;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v49);
        if (v49 != buf) {
          free(v49);
        }
      }
      if (v5)
      {
        int v37 = HIDWORD(v53);
        (*(void (**)(uint64_t))(*(void *)(v3 + 232) + 16))(v3 + 232);
        *(_DWORD *)(v3 + 276) += v37;
        (*(void (**)(uint64_t))(*(void *)(v3 + 232) + 24))(v3 + 232);
        (*(void (**)(uint64_t))(*(void *)(v3 + 232) + 16))(v3 + 232);
        ++*(_DWORD *)(v3 + 284);
        (*(void (**)(uint64_t))(*(void *)(v3 + 232) + 24))(v3 + 232);
        sub_100134750(buf, "tileDownloadCompleted");
        sub_100D3B360(v3 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 408));
        if ((v62[9] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_10127B314(a1, a2, v5, v13);
      if ((v59[23] & 0x80000000) != 0) {
        operator delete(*(void **)v59);
      }
      return sub_1000E1098(v54);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  uint64_t v23 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "WifiTile, where did this download request come from?, download, %{public}p, #CloneMe", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    *(_DWORD *)std::string __p = 134349056;
    *(void *)&__p[4] = a2;
    int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  return sub_1000E1098(v54);
}

void sub_10127B25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_1000E1098(&a13);
  _Unwind_Resume(a1);
}

void sub_10127B314(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v10 = sub_10127A8C4(a1, a2);
  if ((uint64_t *)(a1 + 136) == v10)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "WifiTile, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      *(_DWORD *)std::string __p = 134349056;
      *(void *)&__p[4] = a2;
      id v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
  }
  else
  {
    uint64_t v11 = v10;
    uint64_t v12 = a1 + 128;
    uint64_t v13 = v10[10];
    if (v13)
    {
      if (*(_DWORD *)(v13 + 48))
      {
        sub_101AAB5B4();
      }
      else
      {
        __int16 v61 = (uint64_t **)(a1 + 128);
        uint64_t v62 = (uint64_t)(v10 + 4);
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
        if (*(void *)(a1 + 176) == a2)
        {
          unsigned int v63 = 0;
          uint64_t v64 = a1 + 152;
LABEL_23:
          uint64_t v5 = *(void *)(sub_1001BF5C0(v13) + 96);
          uint64_t v4 = &qword_102419000;
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231AE10);
          }
          uint64_t v18 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v13 + 16))(__p, v13);
            uint64_t v19 = v12;
            int v20 = SHIBYTE(v75);
            uint64_t v21 = *(unsigned char **)__p;
            uint64_t v22 = *(void *)(sub_1001BF5C0(v13) + 96);
            uint64_t v23 = __p;
            int v24 = *(_DWORD *)(a1 + 408);
            if (v20 < 0) {
              uint64_t v23 = v21;
            }
            *(_DWORD *)long long buf = 136316162;
            *(void *)&uint8_t buf[4] = v23;
            __int16 v84 = 1024;
            int v85 = a3;
            __int16 v86 = 1024;
            int v87 = v22;
            __int16 v88 = 1024;
            *(_DWORD *)int v89 = v5 == -1100;
            *(_WORD *)&v89[4] = 1024;
            *(_DWORD *)&v89[6] = v24;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d", buf, 0x24u);
            if (SHIBYTE(v75) < 0) {
              operator delete(*(void **)__p);
            }
            uint64_t v12 = v19;
            uint64_t v4 = &qword_102419000;
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_32;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419630 == -1)
          {
LABEL_74:
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v13 + 16))(v66, v13);
            uint64_t v60 = v12;
            int v41 = SHIBYTE(v67);
            int v42 = (void **)v66[0];
            uint64_t v43 = *(void *)(sub_1001BF5C0(v13) + 96);
            int v44 = v66;
            int v45 = *(_DWORD *)(a1 + 408);
            if (v41 < 0) {
              int v44 = v42;
            }
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = v44;
            __int16 v72 = 1024;
            int v73 = a3;
            __int16 v74 = 1024;
            int v75 = v43;
            __int16 v76 = 1024;
            *(_DWORD *)int v77 = v5 == -1100;
            *(_WORD *)&v77[4] = 1024;
            *(_DWORD *)&v77[6] = v45;
            double v46 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v67) < 0) {
              operator delete(v66[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v46);
            uint64_t v12 = v60;
            if (v46 != buf) {
              free(v46);
            }
LABEL_32:
            char v69 = 0;
            char v69 = sub_101048658(v13, a3, v5 == -1100, a4);
            (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
            *(unsigned char *)(v64 + 8) = 0;
            if (v4[198] != -1) {
              dispatch_once(&qword_102419630, &stru_10231AE10);
            }
            double v25 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v13 + 16))(__p, v13);
              int v26 = v75 >= 0 ? __p : *(unsigned char **)__p;
              int v27 = *(_DWORD *)(a1 + 408);
              int v28 = *(unsigned __int8 *)(a1 + 216);
              double v29 = a4 - *(double *)(v64 + 16);
              uint64_t v30 = *(void *)v64;
              int v31 = *(unsigned __int8 *)(a1 + 160);
              int v32 = *(unsigned __int8 *)(a1 + 192);
              *(_DWORD *)long long buf = 136316674;
              *(void *)&uint8_t buf[4] = v26;
              __int16 v84 = 1024;
              int v85 = v27;
              __int16 v86 = 1024;
              int v87 = v28;
              __int16 v88 = 2048;
              *(double *)int v89 = v29;
              *(_WORD *)&v89[8] = 2080;
              uint64_t v90 = v30;
              __int16 v91 = 1024;
              int v92 = v31;
              __int16 v93 = 1024;
              int v94 = v32;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d", buf, 0x38u);
              if (SHIBYTE(v75) < 0) {
                operator delete(*(void **)__p);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v4[198] != -1) {
                dispatch_once(&qword_102419630, &stru_10231AE10);
              }
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v13 + 16))(v66, v13);
              if (v67 >= 0) {
                double v47 = v66;
              }
              else {
                double v47 = (void **)v66[0];
              }
              int v48 = *(_DWORD *)(a1 + 408);
              int v49 = *(unsigned __int8 *)(a1 + 216);
              double v50 = a4 - *(double *)(v64 + 16);
              uint64_t v51 = *(void *)v64;
              int v52 = *(unsigned __int8 *)(a1 + 160);
              int v53 = *(unsigned __int8 *)(a1 + 192);
              *(_DWORD *)std::string __p = 136316674;
              *(void *)&__p[4] = v47;
              __int16 v72 = 1024;
              int v73 = v48;
              __int16 v74 = 1024;
              int v75 = v49;
              __int16 v76 = 2048;
              *(double *)int v77 = v50;
              *(_WORD *)&v77[8] = 2080;
              uint64_t v78 = v51;
              __int16 v79 = 1024;
              int v80 = v52;
              __int16 v81 = 1024;
              int v82 = v53;
              uint64_t v54 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v67) < 0) {
                operator delete(v66[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v54);
              if (v54 != buf) {
                free(v54);
              }
            }
            sub_10127C8CC(a1, v69, (_DWORD *)v13, v12);
            if (sub_1000FC450())
            {
              sub_1000E9354(buf);
              long long v33 = (char *)(v13 + 8);
              if (*(char *)(v13 + 31) < 0) {
                long long v33 = *(char **)v33;
              }
              sub_1004D34AC((uint64_t)buf, "gotTile", v33);
              sub_1000EA238((uint64_t)buf, "success", &v69);
              sub_1000EA238((uint64_t)buf, "protection", (unsigned char *)(a1 + 216));
              sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
              sub_10013F3C4(buf);
            }
            if (v69)
            {
              uint64_t v34 = v11[10];
              v11[10] = 0;
              *(_OWORD *)int v66 = *(_OWORD *)(v34 + 48);
              uint64_t v67 = *(void *)(v34 + 64);
              if (*(char *)(v34 + 95) < 0)
              {
                sub_1000DC48C(v68, *(void **)(v34 + 72), *(void *)(v34 + 80));
              }
              else
              {
                *(_OWORD *)int v68 = *(_OWORD *)(v34 + 72);
                v68[2] = *(void **)(v34 + 88);
              }
              sub_1000F0A30(v61, v11);
              sub_1008B4638(v62);
              operator delete(v11);
              double v35 = (uint64_t **)(v12 + 184);
              if (sub_10013D858(v12 + 184, (unsigned int *)v66))
              {
                uint64_t v36 = sub_100144000(v12 + 184, (unsigned int *)v66);
                if (v4[198] != -1) {
                  dispatch_once(&qword_102419630, &stru_10231AE10);
                }
                int v37 = qword_102419638;
                if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                {
                  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v36 + 16))(buf, v36);
                  uint64_t v38 = v87 >= 0 ? buf : *(unsigned char **)buf;
                  *(_DWORD *)std::string __p = 136315138;
                  *(void *)&__p[4] = v38;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, replacing from, %s", __p, 0xCu);
                  if (SHIBYTE(v87) < 0) {
                    operator delete(*(void **)buf);
                  }
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (v4[198] != -1) {
                    dispatch_once(&qword_102419630, &stru_10231AE10);
                  }
                  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v36 + 16))(__p, v36);
                  if (v75 >= 0) {
                    long long v56 = __p;
                  }
                  else {
                    long long v56 = *(unsigned char **)__p;
                  }
                  v70[0] = 136315138;
                  *(void *)&v70[1] = v56;
                  uint64_t v57 = (char *)_os_log_send_and_compose_impl();
                  if (SHIBYTE(v75) < 0) {
                    operator delete(*(void **)__p);
                  }
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v57);
                  if (v57 != buf) {
                    free(v57);
                  }
                }
                if (v4[198] != -1) {
                  dispatch_once(&qword_102419630, &stru_10231AE10);
                }
                int v39 = qword_102419638;
                if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                {
                  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v34 + 16))(buf, v34);
                  unint64_t v40 = v87 >= 0 ? buf : *(unsigned char **)buf;
                  *(_DWORD *)std::string __p = 136315138;
                  *(void *)&__p[4] = v40;
                  _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "WIFITILE: tileDecompressionCompleted, replacing to, %s", __p, 0xCu);
                  if (SHIBYTE(v87) < 0) {
                    operator delete(*(void **)buf);
                  }
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (v4[198] != -1) {
                    dispatch_once(&qword_102419630, &stru_10231AE10);
                  }
                  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v34 + 16))(__p, v34);
                  if (v75 >= 0) {
                    double v58 = __p;
                  }
                  else {
                    double v58 = *(unsigned char **)__p;
                  }
                  v70[0] = 136315138;
                  *(void *)&v70[1] = v58;
                  __int16 v59 = (char *)_os_log_send_and_compose_impl();
                  if (SHIBYTE(v75) < 0) {
                    operator delete(*(void **)__p);
                  }
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v59);
                  if (v59 != buf) {
                    free(v59);
                  }
                }
                sub_1014526C8(*(void *)(a1 + 480), v36 + 48);
                sub_1008B3DC4(v35, (unsigned int *)v66);
              }
              sub_101048050(v34, &v65);
              sub_10127CD44(*(void *)(a1 + 480), a4);
            }
            sub_1000209E0(a1, v63, a4);
            return;
          }
LABEL_115:
          dispatch_once(&qword_102419630, &stru_10231AE10);
          goto LABEL_74;
        }
        if (*(void *)(a1 + 208) == a2)
        {
          uint64_t v64 = a1 + 184;
          unsigned int v63 = 1;
          goto LABEL_23;
        }
        sub_101AAB444();
      }
      __break(1u);
      goto LABEL_115;
    }
    uint64_t v16 = (uint64_t)(v10 + 4);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    uint64_t v17 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Null pointer in fTilesToDownload", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      *(_WORD *)std::string __p = 0;
      uint64_t v55 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v55);
      if (v55 != buf) {
        free(v55);
      }
    }
    sub_1000F0A30((uint64_t **)(a1 + 128), v11);
    sub_1008B4638(v16);
    operator delete(v11);
    sub_1000209E0(a1, 1u, a4);
  }
}

void sub_10127C798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_10127C8CC(uint64_t a1, char a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t)(a3 + 12);
  int v6 = a3[12];
  memset(&v24, 0, sizeof(v24));
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)uint64_t v22 = 0u;
  v20[0] = a2;
  int v21 = v6;
  std::string::operator=((std::string *)v22, (const std::string *)(a4 + 56));
  sub_100C09A14(v7, &buf);
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  *(std::string *)&__p[1] = buf;
  sub_101048050((uint64_t)a3, &buf);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  std::string v24 = buf;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  long long v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)a3 + 16))(v25, a3);
    long long v9 = v29 >= 0 ? v25 : *(unsigned char **)v25;
    uint64_t v10 = SHIBYTE(__p[0]) >= 0 ? v22 : (void **)v22[0];
    uint64_t v11 = SHIBYTE(__p[3]) >= 0 ? &__p[1] : (void **)__p[1];
    uint64_t v12 = (v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v24
        : (std::string *)v24.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v20[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v21;
    __int16 v37 = 2080;
    uint64_t v38 = v10;
    __int16 v39 = 2080;
    unint64_t v40 = v11;
    __int16 v41 = 2080;
    int v42 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WIFITILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s", (uint8_t *)&buf, 0x36u);
    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)v25);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a3 + 16))(v18, a3);
    if (v19 >= 0) {
      uint64_t v13 = v18;
    }
    else {
      uint64_t v13 = (void **)v18[0];
    }
    if (SHIBYTE(__p[0]) >= 0) {
      uint64_t v14 = v22;
    }
    else {
      uint64_t v14 = (void **)v22[0];
    }
    if (SHIBYTE(__p[3]) >= 0) {
      id v15 = &__p[1];
    }
    else {
      id v15 = (void **)__p[1];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v24;
    }
    else {
      uint64_t v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)double v25 = 136316418;
    *(void *)&v25[4] = v13;
    __int16 v26 = 1024;
    int v27 = v20[0];
    __int16 v28 = 1024;
    int v29 = v21;
    __int16 v30 = 2080;
    int v31 = v14;
    __int16 v32 = 2080;
    long long v33 = v15;
    __int16 v34 = 2080;
    double v35 = v16;
    uint64_t v17 = (std::string *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &)", "%s\n", (const char *)v17);
    if (v17 != &buf) {
      free(v17);
    }
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &buf, v20, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v22[0]);
  }
}

void sub_10127CD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10127CD44(uint64_t a1, double a2)
{
}

BOOL sub_10127CE24(uint64_t a1, uint64_t *a2, unsigned int *a3, double a4)
{
  if (*(_DWORD *)(*a2 + 48))
  {
    sub_101AAB820();
    __break(1u);
LABEL_20:
    dispatch_once(&qword_1024193B0, &stru_10231AE30);
    goto LABEL_9;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  sub_10104A590(*a2, 0, a3, a4);
  uint64_t v10 = *a2;
  long long v19 = *(_OWORD *)(*a2 + 48);
  uint64_t v20 = *(void *)(v10 + 64);
  if (*(char *)(v10 + 95) < 0)
  {
    sub_1000DC48C(&v21, *(void **)(v10 + 72), *(void *)(v10 + 80));
  }
  else
  {
    long long v21 = *(_OWORD *)(v10 + 72);
    uint64_t v22 = *(void *)(v10 + 88);
  }
  BOOL v4 = sub_1001447B8((unsigned int *)&v19);
  if (v4)
  {
    uint64_t v11 = sub_1008B436C((uint64_t **)(v9 + 184), (unsigned int *)&v19);
    uint64_t v12 = *a2;
    *a2 = 0;
    uint64_t v13 = *v11;
    uint64_t *v11 = v12;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    goto LABEL_16;
  }
  uint64_t v5 = &qword_102419000;
  if (qword_1024193B0 != -1) {
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v14 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
  {
    sub_100C094CC((uint64_t)&v19);
    id v15 = v28 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136380675;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid tile ID in updateTileFileObject: %{private}s, #CloneMe", buf, 0xCu);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (v5[118] != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    sub_100C094CC((uint64_t)&v19);
    if (v24 >= 0) {
      uint64_t v17 = buf;
    }
    else {
      uint64_t v17 = *(unsigned char **)buf;
    }
    int v25 = 136380675;
    __int16 v26 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    if (v24 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiTilesManager::updateTileFileObject(std::unique_ptr<CLTileFile>, const CLWifiTileHeaderEntry &, CFAbsoluteTime)", "%s\n", v18);
    if (v18 != (char *)__p) {
      free(v18);
    }
  }
LABEL_16:
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
  return v4;
}

void sub_10127D144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id *sub_10127D174(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_10127A94C(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

void sub_10127D338(uint64_t a1, uint64_t a2, unsigned char *a3, double a4)
{
  *(_OWORD *)std::string buf = *(_OWORD *)(a2 + 48);
  *(void *)&uint8_t buf[16] = *(void *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C(&buf[24], *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)(a2 + 72);
    int v29 = *(const char **)(a2 + 88);
  }
  sub_101282160((uint64_t)v21, (uint64_t)buf, 1);
  if (SHIBYTE(v29) < 0) {
    operator delete(*(void **)&buf[24]);
  }
  sub_10014B230(*(void *)(a1 + 480), v21, (unint64_t)*(double *)&qword_102477288, &v19, a4);
  if (v20 - v19 != 56)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    uint64_t v14 = qword_102419638;
    uint64_t v10 = (uint64_t *)"assert";
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3);
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = "assert";
      *(_WORD *)&buf[38] = 2081;
      int v29 = "results.size() == 1";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expecting exactly one result from updateAccessTimestampsIfNecessary\", \"size\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
    }
    id v15 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      *(_DWORD *)std::string buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3);
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = "assert";
      *(_WORD *)&buf[38] = 2081;
      int v29 = "results.size() == 1";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Expecting exactly one result from updateAccessTimestampsIfNecessary", "{\"msg%{public}.0s\":\"Expecting exactly one result from updateAccessTimestampsIfNecessary\", \"size\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231AE10);
      }
    }
    uint64_t v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3);
      *(_WORD *)&unsigned char buf[28] = 2082;
      *(void *)&buf[30] = "assert";
      *(_WORD *)&buf[38] = 2081;
      int v29 = "results.size() == 1";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expecting exactly one result from updateAccessTimestampsIfNecessary\", \"size\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
    __break(1u);
LABEL_24:
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(v19 + 48);
  *a3 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = (a2 + 48);
  uint64_t v10 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    goto LABEL_24;
  }
LABEL_9:
  uint64_t v11 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    double v12 = sub_10013DAC0((uint64_t)v9);
    double v13 = sub_10013DA9C((uint64_t)v9);
    *(_DWORD *)std::string buf = 134284033;
    *(double *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)&unsigned char buf[14] = v13;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(double *)&unsigned char buf[24] = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@TileList, wifi, touch, llsw, %{private}.2lf, %{private}.2lf, time, %{public}.1f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v10[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    double v16 = sub_10013DAC0((uint64_t)v9);
    double v17 = sub_10013DA9C((uint64_t)v9);
    int v22 = 134284033;
    double v23 = v16;
    __int16 v24 = 2049;
    double v25 = v17;
    __int16 v26 = 2050;
    double v27 = a4;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::touchMTime(CFAbsoluteTime, CLTileFile *, BOOL *)", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
LABEL_12:
  *(void *)std::string buf = &v19;
  sub_10017C62C((void ***)buf);
  sub_10014F400((uint64_t)v21, (char *)v21[1]);
}

void sub_10127D89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a23 = &a13;
  sub_10017C62C((void ***)&a23);
  sub_10014F400((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_10127D8F8(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  (*(void (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
  if (*a3 == 6)
  {
    double v8 = v7;
    *(_DWORD *)(a1 + 408) = a4[1];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    uint64_t v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *a4;
      int v11 = a4[1];
      *(_DWORD *)std::string buf = 67109376;
      int v14 = v10;
      __int16 v15 = 1024;
      int v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WIFITILE: onStatusNotification, kNotificationReachability, from, %d, to, %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231ADF0);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (a4[1] >= 1) {
      sub_1000209E0(a1, 0, v8);
    }
  }
}

void sub_10127DB30(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231ADF0);
  }
  BOOL v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileSched, wifi, called, %{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231ADF0);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::onScheduledTileDownloadsCallback(CLTileDownloadReachabilityRequirement)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (a2 != 1)
  {
    double v5 = (*(double (**)(void))(**(void **)(a1 + 448) + 56))(*(void *)(a1 + 448));
    sub_1000209E0(a1, 1u, v5);
  }
}

void sub_10127DD1C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10127DD24(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231AE10);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WIFITILE: CLWifiTilesManager::shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231AE10);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTilesManager::shutdown()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_101277090(a1);
  uint64_t v3 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t sub_10127DF20(uint64_t a1)
{
  return sub_100052080(a1 - 112);
}

void sub_10127DF28(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 216))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    uint64_t v3 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#tiles, data protection enabled, ending side load.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_7;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1)
    {
LABEL_18:
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDeleteRecursive(CFAbsoluteTime, std::vector<std::string>)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      goto LABEL_7;
    }
LABEL_20:
    dispatch_once(&qword_1024193B0, &stru_10231AE30);
    goto LABEL_18;
  }
  if (a2[1] != *a2) {
    sub_10127E584();
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_10231AE30);
  }
  BOOL v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#tiles, finished side-loading raw wifi tiles from disk", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
LABEL_7:
  *(unsigned char *)(a1 + 504) = 0;
}

void sub_10127E534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10127E584()
{
  if (byte_102486987 >= 0) {
    size_t v0 = byte_102486987;
  }
  else {
    size_t v0 = qword_102486978;
  }
  uint64_t v1 = __p;
  sub_1001110E4((uint64_t)__p, v0 + 10);
  if (v4 < 0) {
    uint64_t v1 = (void **)__p[0];
  }
  if (v0)
  {
    if (byte_102486987 >= 0) {
      uint64_t v2 = &qword_102486970;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_102486970;
    }
    memmove(v1, v2, v0);
  }
  strcpy((char *)v1 + v0, "([0-9]{8})");
  sub_101032120(&v5, (uint64_t)__p, 0);
}

void sub_10127E6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1016F8C7C((std::locale *)(v14 - 104));
  _Unwind_Resume(a1);
}

void sub_10127E714(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = (const void **)sub_101048388();
  sub_1002F0A00((const void **)a2, v6, (uint64_t)v15);
  if (*(char *)(a2 + 23) >= 0) {
    double v7 = (const char *)a2;
  }
  else {
    double v7 = *(const char **)a2;
  }
  if (sub_10104CF0C(v7))
  {
    sub_10104DA2C((uint64_t)v15, (uint64_t)&v13);
    double v8 = v13;
    if (!v14) {
      double v8 = a3;
    }
    sub_10127CD44(*(void *)(a1 + 480), v8);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_10231AE30);
  }
  uint64_t v9 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v10 = (const void *)a2;
    }
    else {
      int v10 = *(const void **)a2;
    }
    *(_DWORD *)std::string buf = 136380675;
    uint64_t v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning, failed to unlock wifi tile, %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    if (*(char *)(a2 + 23) >= 0) {
      int v11 = (const void *)a2;
    }
    else {
      int v11 = *(const void **)a2;
    }
    int v17 = 136380675;
    uint64_t v18 = v11;
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiTilesManager::addWifiTileToDatabaseAndDelete(const std::string &, CFAbsoluteTime)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
}

void sub_10127EDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10127EE08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (*(double (**)(void))(**(void **)(v2 + 448) + 56))(*(void *)(v2 + 448));
  memset(v4, 0, sizeof(v4));
  sub_1001D857C((char *)v4, *(long long **)(a1 + 40), *(long long **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  sub_10127DF28(v2, v4, v3);
  std::locale v5 = (void **)v4;
  sub_1000A7B4C(&v5);
}

void sub_10127EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1000A7B4C(&a12);
  _Unwind_Resume(a1);
}

char *sub_10127EECC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = a1 + 40;
  *(void *)(v2 + 16) = 0;
  return sub_1001D857C((char *)v2, *(long long **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
}

void sub_10127EEF4(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1000A7B4C(&v1);
}

void sub_10127EF20(const void **a1)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v2 = (size_t)a1[1];
  }
  double v3 = __p;
  sub_1001110E4((uint64_t)__p, v2 + 6);
  if (v8 < 0) {
    double v3 = (void **)__p[0];
  }
  if (v2)
  {
    if (*((char *)a1 + 23) >= 0) {
      char v4 = a1;
    }
    else {
      char v4 = *a1;
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, ".plist");
  if (*((char *)a1 + 23) >= 0) {
    std::locale v5 = (const char *)a1;
  }
  else {
    std::locale v5 = (const char *)*a1;
  }
  sub_1004BB38C(v5);
  if (v8 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  sub_1004BEB14((const char *)v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10127F000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10127F01C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10125C090(*a1, &v5);
  sub_101063234((uint64_t)v5, (const std::string *)a1);
  sub_1010474E4((uint64_t)v5, (uint64_t)&qword_102486970);
  sub_10026E398(v5, a2);
  uint64_t result = v5;
  std::locale v5 = 0;
  if (result) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_10127F0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A9D8B8();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10127F0CC(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  sub_10125C090(0, &v21);
  sub_10104A590(v21, 0, a2, a3);
  long long v17 = *(_OWORD *)(v21 + 48);
  uint64_t v18 = *(void *)(v21 + 64);
  if (*(char *)(v21 + 95) < 0)
  {
    sub_1000DC48C(&v19, *(void **)(v21 + 72), *(void *)(v21 + 80));
  }
  else
  {
    long long v19 = *(_OWORD *)(v21 + 72);
    uint64_t v20 = *(void *)(v21 + 88);
  }
  if (sub_1001447B8((unsigned int *)&v17))
  {
    int v6 = (uint64_t **)(v5 + 184);
    double v7 = sub_1008B436C(v6, (unsigned int *)&v17);
    uint64_t v8 = v21;
    uint64_t v21 = 0;
    uint64_t v9 = *v7;
    *double v7 = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    sub_100144000((uint64_t)v6, (unsigned int *)&v17);
    uint64_t v10 = 1;
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10231AE30);
    }
    int v11 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      sub_100C094CC((uint64_t)&v17);
      double v12 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid tile ID in createWifiTileFileObject: %{private}s, #CloneMe", buf, 0xCu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10231AE30);
      }
      sub_100C094CC((uint64_t)&v17);
      if (v23 >= 0) {
        __int16 v15 = buf;
      }
      else {
        __int16 v15 = *(unsigned char **)buf;
      }
      int v24 = 136380675;
      double v25 = v15;
      char v16 = (char *)_os_log_send_and_compose_impl();
      if (v23 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual std::tuple<BOOL, CLTileFile *> CLWifiTilesManager::createWifiTileFileObject(const CLWifiTileHeaderEntry &, CFAbsoluteTime)", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
    uint64_t v10 = 0;
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  uint64_t v13 = v21;
  uint64_t v21 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return v10;
}

void sub_10127F438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10127F4A8(uint64_t a1, unsigned int *a2, double a3)
{
  return sub_10127F0CC(a1 - 112, a2, a3);
}

void sub_10127F4B0(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_1024869A0, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"tiles"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10127F534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10127F550(id a1)
{
}

void sub_10127F564(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231ADD0);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10231ADD0);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        __int16 v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::removeClient(int) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10127F7F4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10127F8A8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10127F8F0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10127F938(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10127F980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102477350);
}

BOOL sub_10127F9AC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          char v23 = (uint64_t *)v17;
        }
        else {
          char v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          char v28 = (uint64_t *)v24;
        }
        else {
          char v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)__int16 v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        buf[0] = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, buf) + 32) = v35;
        LOBYTE(buf[0]) = 0;
        *(_OWORD *)((char *)buf + 4) = 0u;
        memset((char *)&buf[2] + 4, 0, 32);
        memset((char *)&buf[6] + 4, 0, 28);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _DWORD **))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101282660();
        }
        if (SHIBYTE(buf[9]) < 0) {
          operator delete(buf[7]);
        }
        if (SHIBYTE(buf[6]) < 0) {
          operator delete(buf[4]);
        }
        if (SHIBYTE(buf[3]) < 0) {
          operator delete(buf[1]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)__int16 v41 = a1 + 64;
        char v29 = byte_102477351;
        int v38 = v16;
        buf[0] = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, buf) + 80) = v29;
        int v38 = *a3;
        buf[0] = &v38;
        __int16 v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, buf);
        int v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        buf[0] = &v38;
        long long v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, buf);
        buf[0] = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231ADD0);
  }
  char v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    __int16 v15 = (_DWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v15 = *(_DWORD **)v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(_DWORD **)((char *)buf + 4) = v15;
    WORD2(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 6) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231ADD0);
    }
    uint64_t v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v36 = (void *)*v36;
    }
    *(_DWORD *)__int16 v41 = 136446466;
    *(void *)&_DWORD v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = v40;
    __int16 v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_10127FE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10127FEBC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231ADD0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231ADD0);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101280140(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            uint64_t v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10231ADD0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  char v28 = __p;
                }
                else {
                  char v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10231ADD0);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  __int16 v30 = buf;
                }
                else {
                  __int16 v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101280514(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1012819D8(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1012805A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012805C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  memset(v6, 0, sizeof(v6));
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if ((v6[59] & 0x80000000) != 0) {
    operator delete(*(void **)&v6[36]);
  }
  if ((v6[35] & 0x80000000) != 0) {
    operator delete(*(void **)&v6[12]);
  }
  if ((v6[11] & 0x80000000) != 0) {
    operator delete(*(void **)((char *)v5 + 4));
  }
}

void sub_101280664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101280678(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231ADD0);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1012819D8(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_101281354();
  }
  os_activity_scope_leave(&state);
}

void sub_101280C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101280C94(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231ADD0);
    }
    size_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231ADD0);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231ADD0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231ADD0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10231ADD0);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10231ADD0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

uint64_t sub_101281244(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

uint64_t sub_10128124C(uint64_t a1)
{
  return a1 + 232;
}

uint64_t sub_101281254(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 105);
}

uint64_t sub_10128125C(uint64_t a1)
{
  return a1 + 120;
}

void sub_101281264(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101281294(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1012812C4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012812F4(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_101281324(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101281354()
{
}

void sub_101281498()
{
  if (*(char *)(v0 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  operator delete();
}

void sub_1012814EC(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        int v49 = v9;
        id v13 = sub_101281BC8(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_1012818E0(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              int v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10231ADD0);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10231ADD0);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                double v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1012818E0(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_101281BC8(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void *sub_1012819D8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x68uLL);
  BOOL result = sub_101281A34(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101281A20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101281A34(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10231AF60;
  sub_101069130((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_101281A90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101281AA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231AF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101281AC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231AF60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101281B18(uint64_t a1)
{
  sub_100C55D44((uint64_t)&v1, a1 + 24);
}

uint64_t sub_101281B44(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

id sub_101281BC8(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_101281C28(a1);
}

id sub_101281C28(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10231AFA0);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAFB31 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiTilesManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10231AFA0);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAFB31 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10231AFA0);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_101281FE8(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t *sub_101282018(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (uint64_t **)sub_10014F4E4((uint64_t)a1, &v10, a2);
  BOOL result = *v7;
  if (!*v7)
  {
    sub_1012820A0((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_1000EDF90(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

unsigned char *sub_1012820A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  id v8 = (char *)operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  BOOL result = v8 + 56;
  if (*(char *)(a2 + 47) < 0)
  {
    BOOL result = sub_1000DC48C(result, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)BOOL result = *(_OWORD *)(a2 + 24);
    *((void *)v8 + 9) = *(void *)(a2 + 40);
  }
  *((void *)v8 + 10) = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_101282144(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1008B4750(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_101282160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      sub_100060170((uint64_t **)a1, v4, a2, a2);
      a2 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1012821CC(_Unwind_Exception *a1)
{
  sub_10014F400(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_1012821E4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  BOOL v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *BOOL v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  *BOOL v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_10128244C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10022251C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_101282468(void **a1, const std::string *a2)
{
  char v4 = (void **)sub_10104A4EC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_1000DC48C(&__dst, *v4, (unint64_t)v4[1]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    char v29 = v4[2];
    long long __dst = v5;
  }
  uint64_t v6 = (const void **)sub_10104A4EC();
  uint64_t v7 = (const void **)sub_1010467A4();
  sub_1002F0A00(v6, v7, (uint64_t)v30);
  uint64_t v8 = 0;
  while (2)
  {
    unint64_t v9 = (char *)&__dst + 24 * v8;
    int v10 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v11 = v10 < 0;
    unint64_t v12 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if (v10 >= 0) {
      unint64_t v12 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v11) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    int v14 = v9[23];
    unint64_t v15 = *(char **)v9;
    uint64_t v16 = *((void *)v9 + 1);
    if (v14 >= 0) {
      unint64_t v15 = (char *)&__dst + 24 * v8;
    }
    uint64_t v17 = v9[23];
    if (v14 < 0) {
      uint64_t v17 = v16;
    }
    uint64_t v18 = (uint64_t)&v12[-1].__r_.__value_.__r.__words[2] + 7;
    BOOL v19 = v15 - 1;
    while (size && v17)
    {
      int v20 = *(unsigned __int8 *)(v18 + size);
      int v21 = v19[v17];
      --size;
      --v17;
      if (v20 != v21) {
        goto LABEL_22;
      }
    }
    if (!v17)
    {
      std::string::basic_string(&__p, a2, 0, 9uLL, (std::allocator<char> *)&v27);
      size_t v22 = sub_100103284(*a1, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v22)
      {
        uint64_t v23 = 1;
        goto LABEL_24;
      }
    }
LABEL_22:
    if (++v8 != 2) {
      continue;
    }
    break;
  }
  uint64_t v23 = 0;
LABEL_24:
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if ((char)v30[i + 23] < 0) {
      operator delete(*(void **)&v30[i]);
    }
  }
  return v23;
}

void sub_10128260C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_101282660()
{
}

void sub_1012827A4()
{
  if (*(char *)(v0 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  operator delete();
}

uint64_t sub_1012827F8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_10128287C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1012828FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10128298C(_Unwind_Exception *a1)
{
}

uint64_t sub_1012829A4()
{
  sub_100134750(&qword_102486970, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102486970, (void *)&_mh_execute_header);
}

void sub_101282A04()
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10231B0F0);
  }
  uint64_t v0 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "creating the BinaryLog instance", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10231B0F0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLBinaryLog::create()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  operator new();
}

void sub_101282D40()
{
}

uint64_t *sub_101282D6C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_101282D9C()
{
  if (qword_102486A00 != -1) {
    dispatch_once(&qword_102486A00, &stru_10231AFC0);
  }
  return qword_10248B3C0;
}

uint64_t sub_101282DE4(uint64_t a1)
{
  id v2 = sub_1012F9E8C((char *)a1);
  *(void *)id v2 = &off_10231AFF0;
  *((_DWORD *)v2 + 552) = 0;
  v2[2240] = 0;
  unint64_t v3 = v2 + 112;
  *(_OWORD *)(v2 + 2216) = 0u;
  std::string::assign((std::string *)(v2 + 112), ".bin");
  char v4 = (char *)sub_1000A6958();
  sub_1000A5670(v4, (uint64_t)&v23);
  long long v5 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)long long v5 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *(void *)(a1 + 80) = *((void *)&v23.__r_.__value_.__l + 2);
  std::string::assign((std::string *)(a1 + 88), "locationdSensors");
  sub_1002F0A00((const void **)(a1 + 64), (const void **)(a1 + 88), (uint64_t)&v23);
  int v6 = *(char *)(a1 + 135);
  if (v6 >= 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)(a1 + 112);
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 135);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 120);
  }
  unint64_t v9 = std::string::append(&v23, v7, v8);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
  v24[0] = v9->__r_.__value_.__l.__size_;
  *(void *)((char *)v24 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  unint64_t v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v12);
  }
  uint64_t v13 = v24[0];
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 144) = v13;
  *(void *)(a1 + 151) = *(void *)((char *)v24 + 7);
  *(unsigned char *)(a1 + 159) = v11;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10231B0F0);
  }
  int v14 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v15 = (void *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0) {
      unint64_t v15 = *v12;
    }
    LODWORD(v23.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Notice Logging binary sensor data to %{public}s", (uint8_t *)&v23, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v23, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10231B0F0);
    }
    if (*(char *)(a1 + 159) < 0) {
      unint64_t v12 = (void **)*v12;
    }
    LODWORD(v24[0]) = 136446210;
    *(void *)((char *)v24 + 4) = v12;
    size_t v22 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLBinaryLog::CLBinaryLog()", "%s\n", (const char *)v22);
    if (v22 != &v23) {
      free(v22);
    }
  }
  uint64_t v16 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v16 = (const char *)*v5;
  }
  if (!sub_1000A569C(v16))
  {
    if (*(char *)(a1 + 87) < 0) {
      long long v5 = (void **)*v5;
    }
    uid_t v17 = getuid();
    gid_t v18 = getgid();
    sub_1004BB250(v5, v17, v18);
  }
  BOOL v19 = dispatch_queue_create("com.apple.locationd.binlog.compression", 0);
  *(void *)(a1 + 2232) = v19;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v19, global_queue);
  return a1;
}

void sub_10128313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_1012FA00C(v16);
  _Unwind_Resume(a1);
}

void sub_101283178(void *a1)
{
  sub_1012FA00C(a1);

  operator delete();
}

void sub_1012831B0(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 2240) = a2;
  if ((a2 & 1) == 0)
  {
    unint64_t v3 = (const char *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0) {
      unint64_t v3 = *(const char **)v3;
    }
    sub_1004BEB14(v3);
  }
}

uint64_t sub_1012831D8(uint64_t a1)
{
  id v2 = (void *)(a1 + 48);
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  unint64_t v3 = (FILE *)v2[271];
  if (v3)
  {
    size_t v4 = *(int *)(a1 + 2208);
    if (v4) {
      fwrite((const void *)(a1 + 160), 1uLL, v4, v3);
    }
    *(_DWORD *)(a1 + 2208) = 0;
    sub_1012832A0(a1);
  }
  return (*(uint64_t (**)(void *))(*v2 + 24))(v2);
}

void sub_10128328C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012832A0(uint64_t a1)
{
  if (!sub_10014DB48(a1 + 48)) {
    sub_101AAB990();
  }
  uint64_t result = fclose(*(FILE **)(a1 + 2216));
  *(void *)(a1 + 2216) = 0;
  return result;
}

uint64_t sub_1012832DC(uint64_t a1)
{
  unint64_t v3 = (FILE **)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v61 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v62 = 256;
  uint64_t v4 = ftell(v3[271]);
  if (ferror(v3[271]))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10231B0F0);
    }
    long long v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v6 = *__error();
      uint64_t v7 = __error();
      std::string::size_type v8 = strerror(*v7);
      *(_DWORD *)std::string buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to determine if log rotation is needed. errno, %{public}d, %{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10231B0F0);
      }
      int v39 = *__error();
      int v40 = __error();
      BOOL v41 = strerror(*v40);
      int v63 = 67240450;
      *(_DWORD *)uint64_t v64 = v39;
      *(_WORD *)&v64[4] = 2082;
      *(void *)&unsigned char v64[6] = v41;
      char v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBinaryLog::rotateIfNeeded(const double &)", "%s\n", v42);
      if (v42 != buf) {
        free(v42);
      }
    }
    clearerr(*(FILE **)(a1 + 2216));
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a1 + 12);
    if ((int)v9 >= 1 && v4 > v9)
    {
      char v11 = sub_1012FB06C();
      if (*(char *)(a1 + 87) >= 0) {
        size_t v12 = *(unsigned __int8 *)(a1 + 87);
      }
      else {
        size_t v12 = *(void *)(a1 + 72);
      }
      uint64_t v13 = &v59;
      sub_1001110E4((uint64_t)&v59, v12 + 4);
      if (v60 < 0) {
        uint64_t v13 = (long long *)v59;
      }
      if (v12)
      {
        if (*(char *)(a1 + 87) >= 0) {
          int v14 = (const void *)(a1 + 64);
        }
        else {
          int v14 = *(const void **)(a1 + 64);
        }
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "logs");
      sub_1012FAC6C((const void **)&v59, a1 + 88, a1 + 112, (uint64_t)v11, &v58);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v58.__r_.__value_.__l.__size_;
      }
      uint64_t v16 = v56;
      sub_1001110E4((uint64_t)v56, size + 4);
      if (v57 < 0) {
        uint64_t v16 = (void **)v56[0];
      }
      if (size)
      {
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uid_t v17 = &v58;
        }
        else {
          uid_t v17 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        memmove(v16, v17, size);
      }
      strcpy((char *)v16 + size, ".bz2");
      if (v60 >= 0) {
        gid_t v18 = (const char *)&v59;
      }
      else {
        gid_t v18 = (const char *)v59;
      }
      if (!sub_1000A569C(v18))
      {
        if (v60 >= 0) {
          size_t v19 = HIBYTE(v60);
        }
        else {
          size_t v19 = *((void *)&v59 + 1);
        }
        int v20 = buf;
        sub_1001110E4((uint64_t)buf, v19 + 1);
        if (v68 < 0) {
          int v20 = *(unsigned char **)buf;
        }
        if (v19)
        {
          if (v60 >= 0) {
            int v21 = &v59;
          }
          else {
            int v21 = (long long *)v59;
          }
          memmove(v20, v21, v19);
        }
        *(_WORD *)&v20[v19] = 47;
        if (v68 >= 0) {
          size_t v22 = buf;
        }
        else {
          size_t v22 = *(unsigned char **)buf;
        }
        uid_t v23 = getuid();
        gid_t v24 = getgid();
        sub_1004BB250(v22, v23, v24);
        if (SHIBYTE(v68) < 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_1012832A0(a1);
      int v26 = (const std::__fs::filesystem::path **)(a1 + 136);
      char v27 = (const std::__fs::filesystem::path *)(a1 + 136);
      if (*(char *)(a1 + 159) < 0) {
        char v27 = *v26;
      }
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v28 = (const std::__fs::filesystem::path *)&v58;
      }
      else {
        int v28 = (const std::__fs::filesystem::path *)v58.__r_.__value_.__r.__words[0];
      }
      if (!sub_1004BB3CC(v27, v28, v25))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10231B0F0);
        }
        char v29 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          int v30 = (const std::__fs::filesystem::path *)(a1 + 136);
          if (*(char *)(a1 + 159) < 0) {
            int v30 = *v26;
          }
          int v31 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
          std::string::size_type v32 = v58.__r_.__value_.__r.__words[0];
          uint64_t v33 = __error();
          uint64_t v34 = &v58;
          int v35 = *v33;
          if (v31 < 0) {
            uint64_t v34 = (std::string *)v32;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v30;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v34;
          __int16 v68 = 1024;
          int v69 = v35;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning Failed to move aside log file %s to %s (%d)", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10231B0F0);
          }
          if (*(char *)(a1 + 159) < 0) {
            int v26 = (const std::__fs::filesystem::path **)*v26;
          }
          int v43 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
          std::string::size_type v44 = v58.__r_.__value_.__r.__words[0];
          int v45 = __error();
          int v46 = &v58;
          int v47 = *v45;
          if (v43 < 0) {
            int v46 = (std::string *)v44;
          }
          int v63 = 136315650;
          *(void *)uint64_t v64 = v26;
          *(_WORD *)&v64[8] = 2080;
          *(void *)&v64[10] = v46;
          __int16 v65 = 1024;
          int v66 = v47;
          int v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBinaryLog::rotateIfNeeded(const double &)", "%s\n", v48);
          if (v48 != buf) {
            free(v48);
          }
        }
      }
      sub_101283B68(a1);
      *(void *)(a1 + 2224) = 0;
      int v36 = *(_DWORD *)(a1 + 16);
      int v37 = *(NSObject **)(a1 + 2232);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3321888768;
      block[2] = sub_101283D68;
      block[3] = &unk_10231B048;
      block[4] = a1;
      int v55 = v36;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&v50, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
      }
      else {
        std::string v50 = v58;
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_1000DC48C(&v51, v56[0], (unint64_t)v56[1]);
      }
      else
      {
        long long v51 = *(_OWORD *)v56;
        uint64_t v52 = v57;
      }
      if (SHIBYTE(v60) < 0)
      {
        sub_1000DC48C(&__p, (void *)v59, *((unint64_t *)&v59 + 1));
      }
      else
      {
        long long __p = v59;
        uint64_t v54 = v60;
      }
      dispatch_async(v37, block);
      if (SHIBYTE(v54) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete((void *)v51);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57) < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete((void *)v59);
      }
    }
  }
  return ((uint64_t (*)(FILE **))(*v3)->_bf._base)(v3);
}

void sub_101283A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  sub_1019DB560((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_101283B58(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x101283B50);
}

void sub_101283B68(uint64_t a1)
{
  if (!sub_10014DB48(a1 + 48)) {
    sub_101AABB14();
  }
  uint64_t v2 = (const char **)(a1 + 136);
  unint64_t v3 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    unint64_t v3 = *v2;
  }
  uint64_t v4 = fopen(v3, "ab");
  *(void *)(a1 + 2216) = v4;
  if (!v4)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10231B0F0);
    }
    long long v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (const char *)(a1 + 136);
      if (*(char *)(a1 + 159) < 0) {
        int v6 = *v2;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unable to open %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10231B0F0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBinaryLog::open()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_101283D68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_DWORD *)(a1 + 112)) {
    goto LABEL_7;
  }
  unint64_t v3 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    unint64_t v3 = *(const char **)v3;
  }
  uint64_t v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v4 = *(const char **)v4;
  }
  if (sub_1004BD394(v3, v4))
  {
LABEL_7:
    long long v5 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      long long v5 = *(const char **)v5;
    }
    sub_1004BB38C(v5);
  }
  int v6 = *(_DWORD *)(a1 + 112);
  if (v6 >= 1)
  {
    v14[0] = 0;
    v14[1] = v14;
    int v14[2] = 0x2020000000;
    int v15 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 88);
    int v8 = *(char *)(a1 + 111);
    uint64_t v9 = a1 + 88;
    if (v8 < 0) {
      uint64_t v9 = *v7;
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3321888768;
    v10[2] = sub_101283EEC;
    v10[3] = &unk_10231B018;
    v10[5] = v2;
    if (v8 < 0)
    {
      sub_1000DC48C(&__p, *(void **)(a1 + 88), *(void *)(a1 + 96));
      int v6 = *(_DWORD *)(a1 + 112);
    }
    else
    {
      long long __p = *(_OWORD *)v7;
      uint64_t v12 = *(void *)(a1 + 104);
    }
    void v10[4] = v14;
    int v13 = v6;
    sub_100B04560(v9, (uint64_t)v10);
    if (SHIBYTE(v12) < 0) {
      operator delete((void *)__p);
    }
    _Block_object_dispose(v14, 8);
  }
}

void sub_101283EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Block_object_dispose((const void *)(v20 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101283EEC(uint64_t a1, std::string::value_type *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(char *)(a1 + 71) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v5 = *(void *)(a1 + 56);
  }
  int v6 = &v28;
  sub_1001110E4((uint64_t)&v28, v5 + 1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v6 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0) {
      uint64_t v7 = (const void *)(a1 + 48);
    }
    else {
      uint64_t v7 = *(const void **)(a1 + 48);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  int v8 = std::string::append(&v28, a2);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v30 = v8->__r_.__value_.__r.__words[2];
  long long v29 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v28, a2);
  if (*(char *)(v4 + 111) < 0) {
    sub_1000DC48C(&__dst, *(void **)(v4 + 88), *(void *)(v4 + 96));
  }
  else {
    std::string __dst = *(std::string *)(v4 + 88);
  }
  std::string::size_type v10 = std::string::append(&__dst, "_");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v27 = v10->__r_.__value_.__r.__words[2];
  long long v26 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (sub_1012FB078(v4, &v28.__r_.__value_.__l.__data_, (char *)&v26))
  {
    sub_100134750(v23, a2);
    if (*(char *)(v4 + 135) < 0) {
      sub_1000DC48C(&v20, *(void **)(v4 + 112), *(void *)(v4 + 120));
    }
    else {
      std::string v20 = *(std::string *)(v4 + 112);
    }
    int v13 = std::string::append(&v20, ".bz2");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v21 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (sub_1012FB150(v4, v23, (char *)v21))
    {
      int v12 = 1;
    }
    else
    {
      sub_100134750(__p, a2);
      int v12 = sub_1012FB150(v4, __p, (char *)(v4 + 112));
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
  else
  {
    int v12 = 0;
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (!v12) {
      goto LABEL_48;
    }
  }
  else if (!v12)
  {
    goto LABEL_48;
  }
  if (++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 72))
  {
    int v15 = v30 >= 0 ? (const char *)&v29 : (const char *)v29;
    if (!sub_1004BB38C(v15))
    {
      if (v30 >= 0) {
        uint64_t v16 = (const char *)&v29;
      }
      else {
        uint64_t v16 = (const char *)v29;
      }
      syslog(5, "%s,%s,Failed to delete log: %s", "NOTICE", "CLLog", v16);
    }
  }
LABEL_48:
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  return 1;
}

void sub_1012841F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (*(char *)(v42 - 81) < 0) {
    operator delete(*(void **)(v42 - 104));
  }
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_1012842C4()
{
  if (*(char *)(v0 - 81) < 0) {
    JUMPOUT(0x1012842B8);
  }
  JUMPOUT(0x1012842BCLL);
}

void *sub_1012842D8(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_101284308(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

uint64_t sub_10128431C(uint64_t a1, uint64_t a2)
{
  size_t v5 = (unsigned char *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v11 = a1 + 48;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 48);
  __int16 v12 = 256;
  if (v5[2192])
  {
    if (*(void *)(a1 + 2216) || (sub_101283B68(a1), *(void *)(a1 + 2216)))
    {
      int v10 = 0;
      int v6 = *(_DWORD *)(a1 + 2208);
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
      int v8 = *(_DWORD *)(a1 + 2208);
      if (v7 + v6 >= 2048)
      {
        fwrite((const void *)(a1 + 160), 1uLL, v8, *(FILE **)(a1 + 2216));
        sub_1012832DC(a1);
        int v8 = 0;
        *(_DWORD *)(a1 + 2208) = 0;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a2 + 16))(a2, a1 + v8 + 160, 2048, &v10))
      {
        *(_DWORD *)(a1 + 2208) += v10;
      }
    }
  }
  return (*(uint64_t (**)(unsigned char *))(*(void *)v5 + 24))(v5);
}

void sub_101284480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012844A0(uint64_t a1)
{
  sub_10014DB48(a1 + 48);
  sub_10006EF84(*(void *)(a1 + 24), "LogFileRotationSizeBinary", (_DWORD *)(a1 + 12));
  uint64_t v2 = *(void *)(a1 + 24);

  return sub_10006EF84(v2, "LogFileStorageCountBinary", (_DWORD *)(a1 + 16));
}

uint64_t sub_101284504(uint64_t a1)
{
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v25 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v26 = 256;
  uint64_t v4 = sub_1012FB06C();
  size_t v5 = *(FILE **)(a1 + 2216);
  if (v5)
  {
    size_t v6 = *(unsigned int *)(a1 + 2208);
    if ((int)v6 >= 1)
    {
      if (!fwrite((const void *)(a1 + 160), 1uLL, v6, v5)) {
        syslog(5, "%s,%s,Failed to write CLBinaryLog Buffer to disk\n", "NOTICE", "CLLog");
      }
      *(_DWORD *)(a1 + 2208) = 0;
    }
    sub_1012832A0(a1);
  }
  int v7 = (const char *)(a1 + 136);
  int v8 = (const char *)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    int v8 = *(const char **)v7;
  }
  if (sub_1000A569C(v8))
  {
    sub_1012FAEC8(a1, a1 + 88, (uint64_t)v4, &__p);
    int v10 = (const std::__fs::filesystem::path *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0) {
      int v10 = *(const std::__fs::filesystem::path **)v7;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = (const std::__fs::filesystem::path *)&__p;
    }
    else {
      p_p = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
    }
    if (!sub_1004BB3CC(v10, p_p, v9))
    {
      if (*(char *)(a1 + 159) < 0) {
        int v7 = *(const char **)v7;
      }
      int v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = __p.__r_.__value_.__r.__words[0];
      long long v14 = __error();
      int v15 = &__p;
      if (v12 < 0) {
        int v15 = (std::string *)v13;
      }
      syslog(5, "%s,%s,Failed to move file %s to %s (%d)\n", "NOTICE", "CLLog", v7, (const char *)v15, *v14);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  sub_101283B68(a1);
  *(void *)(a1 + 2224) = 0;
  if (*(char *)(a1 + 87) >= 0) {
    size_t v16 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    size_t v16 = *(void *)(a1 + 72);
  }
  uid_t v17 = &__p;
  sub_1001110E4((uint64_t)&__p, v16 + 4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uid_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (*(char *)(a1 + 87) >= 0) {
      gid_t v18 = (const void *)(a1 + 64);
    }
    else {
      gid_t v18 = *(const void **)(a1 + 64);
    }
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, "logs");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v19 = &__p;
  }
  else {
    char v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (sub_1000A569C((const char *)v19))
  {
    std::string v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3321888768;
    v22[2] = sub_101284854;
    void v22[3] = &unk_10231B078;
    v22[4] = a1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v23 = __p;
    }
    sub_100B04560((uint64_t)v20, (uint64_t)v22);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_101284800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_1019DB560(v30 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_101284854(uint64_t a1, std::string::value_type *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v5 = *(void *)(a1 + 48);
  }
  size_t v6 = &v43;
  sub_1001110E4((uint64_t)&v43, v5 + 1);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v6 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    long long v9 = *(char **)(a1 + 40);
    int v8 = (char *)(a1 + 40);
    int v7 = v9;
    if (v8[23] >= 0) {
      int v10 = v8;
    }
    else {
      int v10 = v7;
    }
    memmove(v6, v10, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  uint64_t v11 = std::string::append(&v43, a2);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v45 = v11->__r_.__value_.__r.__words[2];
  long long v44 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  sub_1012FA79C((uint64_t)&v41);
  std::string::size_type v13 = std::string::append(&v41, "/");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = std::string::append(&v42, a2);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v42, a2);
  if (*(char *)(v4 + 111) < 0) {
    sub_1000DC48C(&__dst, *(void **)(v4 + 88), *(void *)(v4 + 96));
  }
  else {
    std::string __dst = *(std::string *)(v4 + 88);
  }
  uid_t v17 = std::string::append(&__dst, "_");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (sub_1012FB078(v4, &v42.__r_.__value_.__l.__data_, (char *)&v41))
  {
    sub_100134750(v38, a2);
    if (*(char *)(v4 + 135) < 0) {
      sub_1000DC48C(&v35, *(void **)(v4 + 112), *(void *)(v4 + 120));
    }
    else {
      std::string v35 = *(std::string *)(v4 + 112);
    }
    int v21 = std::string::append(&v35, ".bz2");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v37 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v36 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (sub_1012FB150(v4, v38, (char *)v36))
    {
      int v20 = 1;
    }
    else
    {
      sub_100134750(__p, a2);
      int v20 = sub_1012FB150(v4, __p, (char *)(v4 + 112));
      if (v34 < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v36[0]);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (v39 < 0) {
      operator delete(v38[0]);
    }
  }
  else
  {
    int v20 = 0;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if (!v20) {
      goto LABEL_56;
    }
  }
  else if (!v20)
  {
    goto LABEL_56;
  }
  if (v45 >= 0) {
    std::string v23 = (const std::__fs::filesystem::path *)&v44;
  }
  else {
    std::string v23 = (const std::__fs::filesystem::path *)v44;
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v24 = (const std::__fs::filesystem::path *)&v43;
  }
  else {
    char v24 = (const std::__fs::filesystem::path *)v43.__r_.__value_.__r.__words[0];
  }
  if (!sub_1004BB3CC(v23, v24, v19))
  {
    int v25 = SHIBYTE(v45);
    __int16 v26 = (const char *)v44;
    int v27 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
    std::string::size_type v28 = v43.__r_.__value_.__r.__words[0];
    long long v29 = __error();
    uint64_t v30 = &v43;
    if (v27 < 0) {
      uint64_t v30 = (std::string *)v28;
    }
    if (v25 >= 0) {
      int v31 = (const char *)&v44;
    }
    else {
      int v31 = v26;
    }
    syslog(5, "%s,%s,Failed to move file %s to %s (%d)\n", "NOTICE", "CLLog", v31, (const char *)v30, *v29);
  }
LABEL_56:
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  return 1;
}

void sub_101284BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  if (*(char *)(v51 - 89) < 0) {
    operator delete(*(void **)(v51 - 112));
  }
  if (*(char *)(v51 - 57) < 0) {
    operator delete(*(void **)(v51 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_101284CF0()
{
}

void sub_101284CF8()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x101284CE4);
  }
  JUMPOUT(0x101284CE8);
}

void sub_101284D0C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101284D3C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

__n128 sub_101284D6C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_101284DA0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000E6DB4(a1);
  if (result)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 96);
    BOOL v6 = v5 > 0xB;
    int v7 = (1 << v5) & 0xC02;
    BOOL v8 = v6 || v7 == 0;
    if (v8 || *(double *)(a1 + 20) > 30.0)
    {
      return 0;
    }
    else
    {
      uint64_t result = sub_1000E6DB4(a2);
      if (result) {
        return vabdd_f64(*(double *)(a1 + 76), *(double *)(a2 + 76)) <= 1.25;
      }
    }
  }
  return result;
}

uint64_t sub_101284E28(uint64_t a1, uint64_t a2)
{
  return sub_1000A3D9C(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 4), *(double *)(a1 + 12));
}

__n128 sub_101284E3C@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 112);
  a2[6] = *(_OWORD *)(a1 + 96);
  a2[7] = v2;
  a2[8] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)((char *)a2 + 140) = *(_OWORD *)(a1 + 140);
  long long v3 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v4;
  __n128 result = *(__n128 *)a1;
  long long v6 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v6;
  return result;
}

uint64_t sub_101284E70()
{
  if (sub_10010145C()) {
    return 1;
  }
  else {
    return 2;
  }
}

float sub_101284E98(int a1)
{
  if (a1 > 2104)
  {
    if (a1 > 12149)
    {
      switch(a1)
      {
        case 17150:
          return 5.97;
        case 15110:
          return 6.95;
        case 12150:
          return 9.33;
      }
    }
    else
    {
      switch(a1)
      {
        case 2105:
          return 3.71;
        case 2150:
          return 4.6;
        case 3015:
          return 5.87;
      }
    }
  }
  else if (a1 > 2023)
  {
    switch(a1)
    {
      case 2024:
        return 5.13;
      case 2071:
        return 5.91;
      case 2101:
        return 6.07;
    }
  }
  else
  {
    switch(a1)
    {
      case 2010:
        return 6.35;
      case 2020:
        return 7.55;
      case 2022:
        return 5.38;
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B130);
  }
  long long v3 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unexpected activity type passed to lookup model, %d", buf, 8u);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  float result = 4.4021;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B130);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "float CLCalorieUtils::lookupMetsForActivity(const CLMotionActivity::Type)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 4.4021;
  }
  return result;
}

void sub_10128516C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_10128519C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10231B160;
  a1[3] = a2;
  return a1;
}

void sub_1012851E8(_Unwind_Exception *exception_object)
{
  void *v1 = &off_1022F3A30;
  long long v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101285220(uint64_t a1)
{
  *(void *)a1 = off_10231B160;

  *(void *)a1 = &off_1022F3A30;
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_101285298(uint64_t a1)
{
  sub_101285220(a1);

  operator delete();
}

uint64_t sub_1012852D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [*(id *)(a1 + 24) length];
  long long v6 = [objc_alloc((Class)PBDataReader) initWithData:a2];
  if (*(void *)&v6[OBJC_IVAR___PBDataReader__pos] < *(void *)&v6[OBJC_IVAR___PBDataReader__length]
    && !v6[OBJC_IVAR___PBDataReader__error])
  {
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *(void *)&v6[OBJC_IVAR___PBDataReader__pos];
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)&v6[OBJC_IVAR___PBDataReader__length]) {
        break;
      }
      char v21 = *(unsigned char *)(*(void *)&v6[OBJC_IVAR___PBDataReader__bytes] + v12);
      *(void *)&v6[OBJC_IVAR___PBDataReader__pos] = v13;
      v11 |= (unint64_t)(v21 & 0x7F) << v9;
      if ((v21 & 0x80) == 0) {
        goto LABEL_9;
      }
      v9 += 7;
      if (v10++ >= 9)
      {
        unint64_t v16 = 0;
        uint64_t v14 = OBJC_IVAR___PBDataReader__error;
        int v15 = v6[OBJC_IVAR___PBDataReader__error];
LABEL_12:
        if (v15) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v16 & 7) == 4;
        }
        if (v17) {
          return 0;
        }
        uint64_t v7 = (unsigned __int16)(v16 >> 3);
        if (8 * (uint64_t)v5 - 1 < (unint64_t)(unsigned __int16)(v16 >> 3) || v7 == 0) {
          return 1;
        }
        if (v7 != 1) {
          return v7;
        }
        unint64_t v19 = *(void *)&v6[OBJC_IVAR___PBDataReader__pos];
        if (v19 > 0xFFFFFFFFFFFFFFF7 || v19 + 8 > *(void *)&v6[OBJC_IVAR___PBDataReader__length])
        {
          v6[v14] = 1;
          uint64_t v20 = 0;
          if (!a3) {
            goto LABEL_25;
          }
LABEL_24:
          *a3 = v20;
          goto LABEL_25;
        }
        uint64_t v20 = *(void *)(*(void *)&v6[OBJC_IVAR___PBDataReader__bytes] + v19);
        *(void *)&v6[OBJC_IVAR___PBDataReader__pos] = v19 + 8;
        if (a3) {
          goto LABEL_24;
        }
LABEL_25:
        if (*(void *)&v6[OBJC_IVAR___PBDataReader__pos] >= *(void *)&v6[OBJC_IVAR___PBDataReader__length]) {
          return 1;
        }
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        if (v6[OBJC_IVAR___PBDataReader__error]) {
          return 1;
        }
      }
    }
    v6[OBJC_IVAR___PBDataReader__error] = 1;
LABEL_9:
    uint64_t v14 = OBJC_IVAR___PBDataReader__error;
    int v15 = v6[OBJC_IVAR___PBDataReader__error];
    if (v6[OBJC_IVAR___PBDataReader__error]) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = v11;
    }
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_1012854B4(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = sub_1012852D0(a1, a2, 0);
  uint64_t v4 = sub_101285698(a1, v3);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231B190);
  }
  id v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v9 = v4;
    __int16 v10 = 1024;
    unsigned int v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "tagEnabled returns %d for tag %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231B190);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerMsgPolicy::shouldILog(NSData *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v4;
}

uint64_t sub_101285698(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (unsigned __int8 *)[*(id *)(a1 + 24) bytes];
  id v5 = [*(id *)(a1 + 24) length];
  if (a2 == 1) {
    return 1;
  }
  if ((unint64_t)v5 <= (unint64_t)a2 >> 3) {
    return 0;
  }
  return (v4[(unint64_t)a2 >> 3] >> (~(_BYTE)a2 & 7)) & 1;
}

void sub_101285714(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_101285744(uint64_t a1)
{
  uint64_t v12 = a1 + 54460;
  uint64_t v11 = a1 + 53412;
  uint64_t v2 = a1 + 52352;
  uint64_t v3 = a1 + 51300;
  uint64_t v4 = a1 + 50252;
  uint64_t v5 = a1 + 49192;
  uint64_t v6 = a1 + 48140;
  uint64_t v7 = a1 + 47092;
  uint64_t v8 = a1 + 46032;
  *(_OWORD *)(a1 + 688) = xmmword_101DAFBD0;
  *(void *)(a1 + 3776) = 0x10000000000;
  *(void *)(a1 + 6856) = 0x10000000000;
  *(void *)(a1 + 9936) = 0x10000000000;
  *(void *)(a1 + 13016) = 0x10000000000;
  *(void *)(a1 + 16096) = 0x10000000000;
  *(void *)(a1 + 19176) = 0x8000000000;
  sub_100877858(a1 + 19696, &off_10231B1B0);
  sub_100877858(a1 + 19760, &off_10231B1B0);
  sub_100877858(a1 + 19824, &off_10231B1B0);
  sub_100877858(a1 + 19888, &off_10231B1C8);
  sub_100877858(a1 + 19952, &off_10231B1C8);
  sub_100877858(a1 + 20016, &off_10231B1C8);
  sub_100877858(a1 + 20080, &off_10231B1B0);
  sub_100877858(a1 + 20144, &off_10231B1B0);
  sub_100877858(a1 + 20208, &off_10231B1B0);
  sub_100877858(a1 + 20272, &off_10231B1B0);
  sub_100877858(a1 + 20336, &off_10231B1B0);
  sub_100877858(a1 + 20400, &off_10231B1B0);
  sub_100877858(a1 + 20464, &off_10231B1B0);
  sub_100877858(a1 + 20528, &off_10231B1B0);
  sub_100877858(a1 + 20592, &off_10231B1B0);
  sub_100877858(a1 + 20656, &off_10231B1B0);
  sub_100877858(a1 + 20720, &off_10231B1B0);
  sub_100877858(a1 + 20784, &off_10231B1B0);
  sub_100877858(a1 + 20848, &off_10231B1B0);
  sub_100877858(a1 + 20912, &off_10231B1B0);
  sub_100877858(a1 + 20976, &off_10231B1B0);
  sub_100877858(a1 + 21040, &off_10231B1E0);
  sub_100877858(a1 + 21104, &off_10231B1E0);
  sub_100877858(a1 + 21168, &off_10231B1E0);
  sub_100877858(a1 + 21232, &off_10231B1F8);
  sub_100877858(a1 + 21296, &off_10231B1F8);
  sub_100877858(a1 + 21360, &off_10231B1F8);
  *(void *)(a1 + 21424) = 0x20000000000;
  *(void *)(a1 + 27576) = 0x20000000000;
  *(void *)(a1 + 33728) = 0x20000000000;
  *(void *)(a1 + 39880) = 0x20000000000;
  *(void *)uint64_t v8 = 0;
  *(_DWORD *)(v8 + 8) = 100;
  *(unsigned char *)(v8 + 12) = 1;
  *(void *)(v8 + 28) = 0x10000000000;
  *(_DWORD *)(v8 + 24) = 1031798784;
  *(unsigned char *)uint64_t v7 = 1;
  *(void *)(v7 + 16) = 0x10000000000;
  *(_DWORD *)(v7 + 12) = 1031798784;
  *(unsigned char *)uint64_t v6 = 1;
  *(void *)(v6 + 16) = 0x10000000000;
  *(_DWORD *)(v6 + 12) = 1031798784;
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 8) = 50;
  *(unsigned char *)(v5 + 12) = 1;
  *(void *)(v5 + 28) = 0x10000000000;
  *(_DWORD *)(v5 + 24) = 1031798784;
  *(unsigned char *)uint64_t v4 = 1;
  *(void *)(v4 + 16) = 0x10000000000;
  *(_DWORD *)(v4 + 12) = 1031798784;
  *(unsigned char *)uint64_t v3 = 1;
  *(void *)(v3 + 16) = 0x10000000000;
  *(_DWORD *)(v3 + 12) = 1031798784;
  *(void *)uint64_t v2 = 0;
  *(_DWORD *)(v2 + 8) = 25;
  *(unsigned char *)(v2 + 12) = 1;
  *(void *)(v2 + 28) = 0x10000000000;
  *(_DWORD *)(v2 + 24) = 1031798784;
  *(unsigned char *)uint64_t v11 = 1;
  *(void *)(v11 + 16) = 0x10000000000;
  *(_DWORD *)(v11 + 12) = 1031798784;
  *(unsigned char *)uint64_t v12 = 1;
  *(void *)(v12 + 16) = 0x10000000000;
  *(_DWORD *)(v12 + 12) = 1031798784;
  nullsub_41(a1 + 61656, v9);
  *(_DWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 3776) = 0;
  *(_DWORD *)(a1 + 6856) = 0;
  *(_DWORD *)(a1 + 9936) = 0;
  *(_DWORD *)(a1 + 13016) = 0;
  *(_DWORD *)(a1 + 16096) = 0;
  *(_DWORD *)(a1 + 21424) = 0;
  *(_DWORD *)(a1 + 27576) = 0;
  *(void *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 33728) = 0;
  *(_DWORD *)(a1 + 39880) = 0;
  sub_101285B6C(a1);
  return a1;
}

float sub_101285AFC(uint64_t a1, float *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  sub_10087785C(a3, *a2);
  float v9 = v8;
  sub_10087785C(a4, a2[1]);
  sub_10087785C(a5, a2[2]);
  return v9;
}

uint64_t sub_101285B6C(uint64_t a1)
{
  sub_10087784C(a1 + 19696);
  sub_10087784C(a1 + 19760);
  sub_10087784C(a1 + 19824);
  sub_10087784C(a1 + 19888);
  sub_10087784C(a1 + 19952);
  sub_10087784C(a1 + 20016);
  sub_10087784C(a1 + 20080);
  sub_10087784C(a1 + 20144);
  sub_10087784C(a1 + 20208);
  sub_10087784C(a1 + 20272);
  sub_10087784C(a1 + 20336);
  sub_10087784C(a1 + 20400);
  sub_10087784C(a1 + 20464);
  sub_10087784C(a1 + 20528);
  sub_10087784C(a1 + 20592);
  sub_10087784C(a1 + 20656);
  sub_10087784C(a1 + 20720);
  sub_10087784C(a1 + 20784);
  sub_10087784C(a1 + 20848);
  sub_10087784C(a1 + 20912);
  sub_10087784C(a1 + 20976);
  uint64_t v2 = a1 + 21040;
  uint64_t v3 = 3;
  do
  {
    sub_10087784C(v2);
    uint64_t result = sub_10087784C(v2 + 192);
    v2 += 64;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t sub_101285CB0(uint64_t a1, float32x2_t *a2, float *a3, float32x2_t *a4, float *a5, float *a6, float *a7)
{
  sub_100659A48((unsigned __int16 *)(a1 + 21424), (uint64_t)a2);
  sub_100659A48((unsigned __int16 *)(a1 + 27576), (uint64_t)a3);
  sub_100659A48((unsigned __int16 *)(a1 + 33728), (uint64_t)a4);
  sub_100659A48((unsigned __int16 *)(a1 + 39880), (uint64_t)a5);
  float v14 = a2[1].f32[0] + a4[1].f32[0];
  float32x2_t v62 = vadd_f32(*a2, *a4);
  float v63 = v14;
  uint64_t v15 = sub_1010E93CC(a1 + 46032, &v62);
  v61[0] = sub_101285AFC(v15, (float *)a2, (unsigned __int16 *)(a1 + 19696), (unsigned __int16 *)(a1 + 19760), (unsigned __int16 *)(a1 + 19824));
  v61[1] = v16;
  v61[2] = v17;
  v60[0] = sub_101285AFC(v18, a3, (unsigned __int16 *)(a1 + 20272), (unsigned __int16 *)(a1 + 20336), (unsigned __int16 *)(a1 + 20400));
  v60[1] = v19;
  v60[2] = v20;
  v59[0] = sub_101285AFC(v21, (float *)a4, (unsigned __int16 *)(a1 + 20080), (unsigned __int16 *)(a1 + 20144), (unsigned __int16 *)(a1 + 20208));
  v59[1] = v22;
  v59[2] = v23;
  v58[0] = sub_101285AFC(v24, a5, (unsigned __int16 *)(a1 + 20464), (unsigned __int16 *)(a1 + 20528), (unsigned __int16 *)(a1 + 20592));
  v58[1] = v25;
  v58[2] = v26;
  v57[0] = sub_101285AFC(v27, a6, (unsigned __int16 *)(a1 + 20656), (unsigned __int16 *)(a1 + 20720), (unsigned __int16 *)(a1 + 20784));
  v57[1] = v28;
  v57[2] = v29;
  v56[0] = sub_101285AFC(v30, a7, (unsigned __int16 *)(a1 + 20848), (unsigned __int16 *)(a1 + 20912), (unsigned __int16 *)(a1 + 20976));
  v56[1] = v31;
  v56[2] = v32;
  v55[0] = sub_101285AFC(v33, (float *)&v62, (unsigned __int16 *)(a1 + 19888), (unsigned __int16 *)(a1 + 19952), (unsigned __int16 *)(a1 + 20016));
  v55[1] = v34;
  v55[2] = v35;
  int v36 = *(_DWORD *)(a1 + 688) + 1;
  *(_DWORD *)(a1 + 688) = v36;
  if (v36) {
    return 0;
  }
  std::string::size_type v37 = (unsigned __int16 *)(a1 + 16098);
  sub_100659A48((unsigned __int16 *)(a1 + 696), (uint64_t)v61);
  sub_100659A48((unsigned __int16 *)(a1 + 3776), (uint64_t)v60);
  sub_100659A48((unsigned __int16 *)(a1 + 6856), (uint64_t)v59);
  sub_100659A48((unsigned __int16 *)(a1 + 9936), (uint64_t)v58);
  sub_100659A48((unsigned __int16 *)(a1 + 13016), (uint64_t)v57);
  sub_100659A48((unsigned __int16 *)(a1 + 16096), (uint64_t)v56);
  sub_1010E93CC(a1 + 49192, v55);
  ++*(_DWORD *)(a1 + 692);
  if ((*(unsigned char *)(a1 + 688) & 3) == 0) {
    sub_1010E93CC(a1 + 52352, v55);
  }
  unint64_t v38 = *v37;
  if (*(_DWORD *)(a1 + 16100) != v38) {
    goto LABEL_27;
  }
  char v39 = (_WORD *)(a1 + 19176);
  unint64_t v40 = v38 >> 1;
  if ((v38 >> 1) >= v38)
  {
    float v49 = -INFINITY;
    goto LABEL_19;
  }
  float v41 = 0.0;
  float v42 = 3.4028e38;
  float v43 = -3.4028e38;
  float v44 = 0.0;
  do
  {
    float v45 = v44;
    int v46 = (float *)sub_100659D10((unsigned __int16 *)(a1 + 16096), v40);
    float v44 = atan2f(v46[1], *v46) * 57.296;
    float v47 = v44 - v45;
    if ((float)(v44 - v45) <= 180.0)
    {
      if (v47 >= -180.0) {
        goto LABEL_12;
      }
      float v48 = 360.0;
    }
    else
    {
      float v48 = -360.0;
    }
    float v47 = v47 + v48;
LABEL_12:
    float v41 = v41 + v47;
    if (v42 > v41) {
      float v42 = v41;
    }
    if (v43 < v41) {
      float v43 = v41;
    }
    ++v40;
  }
  while (v40 < *v37);
  float v49 = v43 - v42;
LABEL_19:
  uint64_t v50 = *(unsigned __int16 *)(a1 + 19178);
  unint64_t v51 = *(unsigned int *)(a1 + 19180);
  uint64_t v52 = (unsigned __int16)*v39;
  if (v52 + v50 >= v51) {
    uint64_t v53 = *(unsigned int *)(a1 + 19180);
  }
  else {
    uint64_t v53 = 0;
  }
  *(float *)(a1 + 4 * (v52 + v50 - v53) + 19184) = v49;
  if (v51 <= v50)
  {
    if (v52 + 1 < v51) {
      LOWORD(v51) = 0;
    }
    *char v39 = v52 + 1 - v51;
  }
  else
  {
    *(_WORD *)(a1 + 19178) = v50 + 1;
  }
LABEL_27:
  if (*(_DWORD *)(a1 + 700) == *(unsigned __int16 *)(a1 + 698) && *(int *)(a1 + 692) >= 128)
  {
    sub_1012860AC(a1);
    *(_DWORD *)(a1 + 692) = 0;
    return 1;
  }
  return 0;
}

float sub_1012860AC(uint64_t a1)
{
  uint64_t v2 = (unsigned __int16 *)(a1 + 19176);
  sub_101286248(a1);
  sub_101287EF4(a1);
  sub_1012887E4(a1);
  sub_101288ACC(a1);
  long long v17 = 0u;
  memset(v18, 0, 60);
  long long v16 = 0u;
  sub_100EA9FA8(a1 + 57048, a1 + 57560, a1 + 58072, a1 + 55512, a1 + 56024, a1 + 56536, (float *)&v16);
  long long v3 = v17;
  *(_OWORD *)(a1 + 84) = v16;
  *(_OWORD *)(a1 + 100) = v3;
  *(_DWORD *)(a1 + 116) = v18[0];
  *(void *)&long long v4 = *(void *)((char *)v18 + 4);
  *((void *)&v4 + 1) = *(void *)((char *)&v18[1] + 4);
  *(_OWORD *)(a1 + 120) = v4;
  *(void *)&long long v4 = *(void *)((char *)v18 + 12);
  *((void *)&v4 + 1) = *(void *)&v18[2];
  *(_DWORD *)(a1 + 136) = HIDWORD(v18[1]);
  *(_OWORD *)(a1 + 140) = v4;
  *(_OWORD *)(a1 + 156) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_DWORD *)(a1 + 172) = DWORD2(v18[3]);
  sub_101289748(a1);
  uint64_t v5 = v2[1];
  unint64_t v6 = *v2 + v5 - 1;
  unint64_t v7 = *((unsigned int *)v2 + 1);
  if (v6 < v7) {
    unint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 680) = *(_DWORD *)&v2[2 * (v6 - v7) + 4];
  if (!v5) {
    goto LABEL_8;
  }
  float v8 = 0.0;
  unint64_t v9 = -1;
  float v10 = 0.0;
  do
  {
    unint64_t v11 = v9++;
    uint64_t v12 = (float *)sub_1004182C4(v2, v9);
    float v13 = *v12 - v10;
    float v10 = v10 + (float)(v13 / (float)(v11 + 2));
    float v8 = v8 + (float)(v13 * (float)(*v12 - v10));
  }
  while (v11 + 2 < v2[1]);
  if (v9) {
    float v14 = v8 / (float)v9;
  }
  else {
LABEL_8:
  }
    float v14 = 0.0;
  float result = sqrtf(v14);
  *(float *)(a1 + 684) = result;
  return result;
}

void sub_101286248(uint64_t a1)
{
  __chkstk_darwin(a1);
  unint64_t v1 = 0;
  unint64_t v2 = 0;
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unsigned __int16 v347 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  v273 = (float32x4_t *)(v25 + 55512);
  *(void *)v406 = 0x10000000000;
  *(void *)v405 = 0x10000000000;
  *(void *)v404 = 0x10000000000;
  *(void *)v403 = 0x10000000000;
  *(void *)v402 = 0x10000000000;
  *(void *)v401 = 0x10000000000;
  *(void *)v400 = 0x10000000000;
  *(void *)v399 = 0x10000000000;
  *(void *)v398 = 0x10000000000;
  *(void *)v397 = 0x10000000000;
  *(void *)v396 = 0x10000000000;
  *(void *)v395 = 0x10000000000;
  v282 = (unsigned __int16 *)(v25 + 6856);
  v272 = (float *)(v25 + 412);
  v286 = (unsigned __int16 *)(v25 + 696);
  v284 = (unsigned __int16 *)(v25 + 3776);
  uint64_t v274 = v25;
  do
  {
    unint64_t v288 = v3;
    uint64_t v290 = v24;
    uint64_t v292 = v23;
    uint64_t v295 = v22;
    uint64_t v299 = v21;
    uint64_t v303 = v20;
    uint64_t v307 = v19;
    uint64_t v313 = v17;
    uint64_t v316 = v16;
    uint64_t v318 = v15;
    unint64_t v322 = v4;
    uint64_t v26 = v14;
    unint64_t v326 = v5;
    unint64_t v332 = v6;
    unint64_t v335 = v7;
    unint64_t v338 = v8;
    unint64_t v341 = v10;
    unint64_t v27 = v11;
    unint64_t v344 = v9;
    unint64_t v28 = v2;
    unint64_t v29 = v1;
    unint64_t v30 = v12;
    unint64_t v31 = v13;
    int v32 = (float *)sub_100659D10(v286, v13);
    uint64_t v33 = (float *)sub_100659D10(v282, v31);
    unint64_t v329 = v31;
    int v34 = (_DWORD *)sub_100659D10(v284, v31);
    unint64_t v12 = v30;
    float v35 = v32[1];
    float v36 = v32[2];
    float v37 = v33[1];
    float v38 = v33[2];
    unint64_t v39 = v30 + v347;
    if (v39 >= 0x100) {
      uint64_t v40 = -256;
    }
    else {
      uint64_t v40 = 0;
    }
    *(float *)&v406[2 * v40 + 4 + 2 * v39] = *v32 + *v33;
    if (v30 > 0xFF)
    {
      if (v347 >= 0xFFu) {
        __int16 v41 = -256;
      }
      else {
        __int16 v41 = 0;
      }
      v347 += v41 + 1;
      v406[0] = v347;
    }
    else
    {
      unint64_t v12 = v30 + 1;
      v406[1] = v30 + 1;
    }
    unint64_t v11 = v27;
    uint64_t v14 = v26;
    float v42 = v35 + v37;
    unint64_t v43 = v27 + (unsigned __int16)v26;
    if (v43 >= 0x100) {
      uint64_t v44 = -256;
    }
    else {
      uint64_t v44 = 0;
    }
    *(float *)&v405[2 * v44 + 4 + 2 * v43] = v42;
    BOOL v45 = v27 > 0xFF;
    unint64_t v1 = v29;
    unint64_t v2 = v28;
    unint64_t v3 = v288;
    unint64_t v4 = v322;
    unint64_t v5 = v326;
    unint64_t v6 = v332;
    unint64_t v7 = v335;
    unint64_t v8 = v338;
    unint64_t v10 = v341;
    unint64_t v9 = v344;
    uint64_t v17 = v313;
    uint64_t v16 = v316;
    uint64_t v19 = v307;
    uint64_t v20 = v303;
    if (v45)
    {
      if ((unsigned __int16)v14 >= 0xFFu) {
        int v46 = -256;
      }
      else {
        int v46 = 0;
      }
      int v47 = v14 + v46;
      uint64_t v14 = (v47 + 1);
      v405[0] = v47 + 1;
    }
    else
    {
      v405[1] = ++v11;
    }
    uint64_t v15 = v318;
    uint64_t v23 = v292;
    uint64_t v22 = v295;
    float v48 = v36 + v38;
    unint64_t v49 = v341 + (unsigned __int16)v318;
    if (v49 >= 0x100) {
      uint64_t v50 = -256;
    }
    else {
      uint64_t v50 = 0;
    }
    *(float *)&v404[2 * v50 + 4 + 2 * v49] = v48;
    if (v341 > 0xFF)
    {
      if ((unsigned __int16)v318 >= 0xFFu) {
        int v51 = -256;
      }
      else {
        int v51 = 0;
      }
      int v52 = v318 + v51;
      uint64_t v15 = (v52 + 1);
      v404[0] = v52 + 1;
    }
    else
    {
      unint64_t v10 = v341 + 1;
      v404[1] = v341 + 1;
    }
    unint64_t v53 = v344 + (unsigned __int16)v316;
    if (v53 >= 0x100) {
      uint64_t v54 = -256;
    }
    else {
      uint64_t v54 = 0;
    }
    *(_DWORD *)&v403[2 * v54 + 4 + 2 * v53] = *v34;
    if (v344 > 0xFF)
    {
      if ((unsigned __int16)v316 >= 0xFFu) {
        int v55 = -256;
      }
      else {
        int v55 = 0;
      }
      int v56 = v316 + v55;
      uint64_t v16 = (v56 + 1);
      v403[0] = v56 + 1;
    }
    else
    {
      unint64_t v9 = v344 + 1;
      v403[1] = v344 + 1;
    }
    unint64_t v57 = v338 + (unsigned __int16)v313;
    if (v57 >= 0x100) {
      uint64_t v58 = -256;
    }
    else {
      uint64_t v58 = 0;
    }
    *(_DWORD *)&v402[2 * v58 + 4 + 2 * v57] = v34[1];
    if (v338 > 0xFF)
    {
      if ((unsigned __int16)v313 >= 0xFFu) {
        int v59 = -256;
      }
      else {
        int v59 = 0;
      }
      int v60 = v313 + v59;
      uint64_t v17 = (v60 + 1);
      v402[0] = v60 + 1;
    }
    else
    {
      unint64_t v8 = v338 + 1;
      v402[1] = v338 + 1;
    }
    unint64_t v61 = v335 + (unsigned __int16)v18;
    if (v61 >= 0x100) {
      uint64_t v62 = -256;
    }
    else {
      uint64_t v62 = 0;
    }
    *(_DWORD *)&v401[2 * v62 + 4 + 2 * v61] = v34[2];
    if (v335 > 0xFF)
    {
      if ((unsigned __int16)v18 >= 0xFFu) {
        int v63 = -256;
      }
      else {
        int v63 = 0;
      }
      int v64 = v18 + v63;
      int v18 = v64 + 1;
      v401[0] = v64 + 1;
    }
    else
    {
      unint64_t v7 = v335 + 1;
      v401[1] = v335 + 1;
    }
    unint64_t v65 = v332 + (unsigned __int16)v307;
    if (v65 >= 0x100) {
      uint64_t v66 = -256;
    }
    else {
      uint64_t v66 = 0;
    }
    *(float *)&v400[2 * v66 + 4 + 2 * v65] = *v32;
    if (v332 > 0xFF)
    {
      if ((unsigned __int16)v307 >= 0xFFu) {
        int v67 = -256;
      }
      else {
        int v67 = 0;
      }
      int v68 = v307 + v67;
      uint64_t v19 = (v68 + 1);
      v400[0] = v68 + 1;
    }
    else
    {
      unint64_t v6 = v332 + 1;
      v400[1] = v332 + 1;
    }
    unint64_t v69 = v326 + (unsigned __int16)v303;
    if (v69 >= 0x100) {
      uint64_t v70 = -256;
    }
    else {
      uint64_t v70 = 0;
    }
    *(float *)&v399[2 * v70 + 4 + 2 * v69] = v32[1];
    if (v326 > 0xFF)
    {
      if ((unsigned __int16)v303 >= 0xFFu) {
        int v71 = -256;
      }
      else {
        int v71 = 0;
      }
      int v72 = v303 + v71;
      uint64_t v20 = (v72 + 1);
      v399[0] = v72 + 1;
    }
    else
    {
      unint64_t v5 = v326 + 1;
      v399[1] = v326 + 1;
    }
    int v73 = *((_DWORD *)v32 + 2);
    uint64_t v21 = v299;
    unint64_t v74 = v322 + (unsigned __int16)v299;
    if (v74 >= 0x100) {
      uint64_t v75 = -256;
    }
    else {
      uint64_t v75 = 0;
    }
    *(_DWORD *)&v398[2 * v75 + 4 + 2 * v74] = v73;
    if (v322 > 0xFF)
    {
      if ((unsigned __int16)v299 >= 0xFFu) {
        int v76 = -256;
      }
      else {
        int v76 = 0;
      }
      int v77 = v299 + v76;
      uint64_t v21 = (v77 + 1);
      v398[0] = v77 + 1;
    }
    else
    {
      unint64_t v4 = v322 + 1;
      v398[1] = v322 + 1;
    }
    unint64_t v78 = v288 + (unsigned __int16)v295;
    if (v78 >= 0x100) {
      uint64_t v79 = -256;
    }
    else {
      uint64_t v79 = 0;
    }
    *(float *)&v397[2 * v79 + 4 + 2 * v78] = *v33;
    if (v288 > 0xFF)
    {
      if ((unsigned __int16)v295 >= 0xFFu) {
        int v80 = -256;
      }
      else {
        int v80 = 0;
      }
      int v81 = v295 + v80;
      uint64_t v22 = (v81 + 1);
      v397[0] = v81 + 1;
    }
    else
    {
      unint64_t v3 = v288 + 1;
      v397[1] = v288 + 1;
    }
    unint64_t v82 = v2 + (unsigned __int16)v292;
    if (v82 >= 0x100) {
      uint64_t v83 = -256;
    }
    else {
      uint64_t v83 = 0;
    }
    *(float *)&v396[2 * v83 + 4 + 2 * v82] = v33[1];
    if (v2 > 0xFF)
    {
      if ((unsigned __int16)v292 >= 0xFFu) {
        int v84 = -256;
      }
      else {
        int v84 = 0;
      }
      int v85 = v292 + v84;
      uint64_t v23 = (v85 + 1);
      v396[0] = v85 + 1;
    }
    else
    {
      v396[1] = ++v2;
    }
    int v86 = *((_DWORD *)v33 + 2);
    uint64_t v24 = v290;
    unint64_t v87 = v1 + (unsigned __int16)v290;
    if (v87 >= 0x100) {
      uint64_t v88 = -256;
    }
    else {
      uint64_t v88 = 0;
    }
    *(_DWORD *)&v395[2 * v88 + 4 + 2 * v87] = v86;
    if (v1 > 0xFF)
    {
      if ((unsigned __int16)v290 >= 0xFFu) {
        int v89 = -256;
      }
      else {
        int v89 = 0;
      }
      int v90 = v290 + v89;
      uint64_t v24 = (v90 + 1);
      v395[0] = v90 + 1;
    }
    else
    {
      v395[1] = ++v1;
    }
    unint64_t v13 = v329 + 1;
  }
  while (v329 != 255);
  *(void *)v394 = 0x10000000000;
  *(void *)v393 = 0x10000000000;
  *(void *)v392 = 0x10000000000;
  *(void *)v391 = 0x10000000000;
  *(void *)v390 = 0x10000000000;
  *(void *)v389 = 0x10000000000;
  *(void *)v388 = 0x10000000000;
  *(void *)v387 = 0x10000000000;
  *(void *)v386 = 0x10000000000;
  sub_101289AD4(v397, v394);
  sub_101289AD4(v396, v393);
  sub_101289AD4(v395, v392);
  sub_101289AD4(v400, v391);
  sub_101289AD4(v399, v390);
  sub_101289AD4(v398, v389);
  sub_101289AD4(v403, v388);
  sub_101289AD4(v402, v387);
  sub_101289AD4(v401, v386);
  v369[1] = 0;
  v369[0] = 0;
  int v370 = 0;
  uint64_t v372 = 0;
  uint64_t v371 = 0;
  int v373 = 0;
  uint64_t v374 = 0;
  uint64_t v368 = 0;
  *((void *)&v91 + 1) = 0;
  memset(v367, 0, 44);
  uint64_t v366 = 0;
  memset(v365, 0, 44);
  uint64_t v364 = 0;
  memset(v363, 0, 44);
  v361 = 0;
  std::string __p = 0;
  v362 = 0;
  v358 = 0;
  v357 = 0;
  v359 = 0;
  v355 = 0;
  v354 = 0;
  v356 = 0;
  v352 = 0;
  v351 = 0;
  v353 = 0;
  uint64_t v92 = *(unsigned __int16 *)(v274 + 698);
  if (*(_WORD *)(v274 + 698))
  {
    unint64_t v93 = 0;
    *(void *)&long long v91 = 0x8000007F7FFFFFLL;
    long long v323 = v91;
    float v319 = 0.0;
    float v317 = 0.0;
    float v291 = 0.0;
    float v94 = 0.0;
    float v95 = 3.4028e38;
    float v304 = 0.0;
    float v96 = 1.1755e-38;
    float v97 = 0.0;
    float v300 = 0.0;
    float v98 = 0.0;
    float v296 = 0.0;
    float v99 = 0.0;
    float v333 = 3.4028e38;
    float v293 = 0.0;
    float v100 = 0.0;
    float v336 = 3.4028e38;
    float v330 = 3.4028e38;
    float v327 = 1.1755e-38;
    float v308 = 1.1755e-38;
    float v339 = 1.1755e-38;
    float v342 = 3.4028e38;
    float v348 = 1.1755e-38;
    float v345 = 3.4028e38;
    float v101 = 0.0;
    float v309 = 0.0;
    do
    {
      unint64_t v102 = v93;
      int v103 = (float *)sub_100659D10(v286, v93);
      float v314 = v94;
      __int16 v104 = (float *)sub_100659D10(v284, v93);
      uint64_t v105 = sub_100659D10(v282, v93);
      __int16 v106 = (float *)v105;
      float v107 = *(float *)(v105 + 8);
      if (v95 > v107) {
        float v95 = *(float *)(v105 + 8);
      }
      if (v96 < v107) {
        float v96 = *(float *)(v105 + 8);
      }
      float v108 = *v104;
      sub_10082BF38((uint64_t)v367, fabsf(*v103), fabsf(v104[1]));
      sub_10082BF38((uint64_t)v365, *v103, v103[1]);
      sub_10082BF38((uint64_t)v363, *v103, v104[2]);
      uint64_t v109 = 0;
      float v309 = v309 + (float)(v108 * v108);
      ++v93;
      float v110 = 0.0;
      do
      {
        float v110 = v110 + (float)(v104[v109] * v104[v109]);
        ++v109;
      }
      while (v109 != 3);
      sub_101220A24((float *)v369, fabsf(*v103), fabsf(v104[1]), sqrtf(v110));
      float v111 = v104[2];
      float v112 = v345;
      if (v345 > v111) {
        float v112 = v104[2];
      }
      float v345 = v112;
      float v113 = v348;
      if (v348 < v111) {
        float v113 = v104[2];
      }
      float v348 = v113;
      float v114 = v106[2];
      float v115 = v342;
      if (v342 > v114) {
        float v115 = v106[2];
      }
      float v342 = v115;
      float v116 = v339;
      if (v339 < v114) {
        float v116 = v106[2];
      }
      float v339 = v116;
      float v117 = v106[1];
      float v118 = fabsf(*v106);
      float v119 = v308;
      if (v308 < v118) {
        float v119 = v118;
      }
      float v308 = v119;
      float v120 = v330;
      if (v330 > v117) {
        float v120 = v106[1];
      }
      float v330 = v120;
      float v121 = v327;
      if (v327 < v117) {
        float v121 = v106[1];
      }
      float v327 = v121;
      int v122 = *((_DWORD *)v103 + 1);
      float v123 = v336;
      if (v336 > *v103) {
        float v123 = *v103;
      }
      float v336 = v123;
      int8x8_t v289 = *(int8x8_t *)v104;
      float v124 = v333;
      if (v333 > *v106) {
        float v124 = *v106;
      }
      float v333 = v124;
      int v125 = v361;
      if (v361 >= v362)
      {
        int v127 = (char *)__p;
        uint64_t v128 = (v361 - (unsigned char *)__p) >> 2;
        unint64_t v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v130 = v362 - (unsigned char *)__p;
        if ((v362 - (unsigned char *)__p) >> 1 > v129) {
          unint64_t v129 = v130 >> 1;
        }
        if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v131 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v129;
        }
        if (v131)
        {
          __int16 v132 = (char *)sub_10017EA34((uint64_t)&v362, v131);
          int v125 = v361;
          int v127 = (char *)__p;
        }
        else
        {
          __int16 v132 = 0;
        }
        int v133 = &v132[4 * v128];
        *(_DWORD *)int v133 = v122;
        __int16 v126 = v133 + 4;
        while (v125 != v127)
        {
          int v134 = *((_DWORD *)v125 - 1);
          v125 -= 4;
          *((_DWORD *)v133 - 1) = v134;
          v133 -= 4;
        }
        std::string __p = v133;
        v361 = v126;
        v362 = &v132[4 * v131];
        if (v127) {
          operator delete(v127);
        }
      }
      else
      {
        *(_DWORD *)v361 = v122;
        __int16 v126 = v125 + 4;
      }
      v361 = v126;
      int v135 = *((_DWORD *)v104 + 2);
      __int16 v136 = v358;
      if (v358 >= v359)
      {
        __int16 v138 = (char *)v357;
        uint64_t v139 = (v358 - (unsigned char *)v357) >> 2;
        unint64_t v140 = v139 + 1;
        if ((unint64_t)(v139 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v141 = v359 - (unsigned char *)v357;
        if ((v359 - (unsigned char *)v357) >> 1 > v140) {
          unint64_t v140 = v141 >> 1;
        }
        if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v142 = v140;
        }
        if (v142)
        {
          int v143 = (char *)sub_10017EA34((uint64_t)&v359, v142);
          __int16 v136 = v358;
          __int16 v138 = (char *)v357;
        }
        else
        {
          int v143 = 0;
        }
        __int16 v144 = &v143[4 * v139];
        *(_DWORD *)__int16 v144 = v135;
        int v137 = v144 + 4;
        while (v136 != v138)
        {
          int v145 = *((_DWORD *)v136 - 1);
          v136 -= 4;
          *((_DWORD *)v144 - 1) = v145;
          v144 -= 4;
        }
        v357 = v144;
        v358 = v137;
        v359 = &v143[4 * v142];
        if (v138) {
          operator delete(v138);
        }
      }
      else
      {
        *(_DWORD *)v358 = v135;
        int v137 = v136 + 4;
      }
      v358 = v137;
      int v146 = *((_DWORD *)v106 + 2);
      int v147 = v355;
      if (v355 >= v356)
      {
        int v149 = (char *)v354;
        uint64_t v150 = (v355 - (unsigned char *)v354) >> 2;
        unint64_t v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v152 = v356 - (unsigned char *)v354;
        if ((v356 - (unsigned char *)v354) >> 1 > v151) {
          unint64_t v151 = v152 >> 1;
        }
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v153 = v151;
        }
        if (v153)
        {
          v154 = (char *)sub_10017EA34((uint64_t)&v356, v153);
          int v147 = v355;
          int v149 = (char *)v354;
        }
        else
        {
          v154 = 0;
        }
        v155 = &v154[4 * v150];
        *(_DWORD *)v155 = v146;
        __int16 v148 = v155 + 4;
        while (v147 != v149)
        {
          int v156 = *((_DWORD *)v147 - 1);
          v147 -= 4;
          *((_DWORD *)v155 - 1) = v156;
          v155 -= 4;
        }
        v354 = v155;
        v355 = v148;
        v356 = &v154[4 * v153];
        if (v149) {
          operator delete(v149);
        }
      }
      else
      {
        *(_DWORD *)v355 = v146;
        __int16 v148 = v147 + 4;
      }
      v355 = v148;
      v157 = (_DWORD *)sub_1004182C4(v388, v102);
      v158 = v157;
      v159 = v352;
      if (v352 >= v353)
      {
        v162 = (char *)v351;
        uint64_t v163 = (v352 - (unsigned char *)v351) >> 2;
        unint64_t v164 = v163 + 1;
        if ((unint64_t)(v163 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v165 = v353 - (unsigned char *)v351;
        if ((v353 - (unsigned char *)v351) >> 1 > v164) {
          unint64_t v164 = v165 >> 1;
        }
        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v166 = v164;
        }
        if (v166)
        {
          v167 = (char *)sub_10017EA34((uint64_t)&v353, v166);
          v159 = v352;
          v162 = (char *)v351;
        }
        else
        {
          v167 = 0;
        }
        v168 = &v167[4 * v163];
        *(_DWORD *)v168 = *v158;
        v160 = v168 + 4;
        if (v159 == v162)
        {
          float v161 = v314;
        }
        else
        {
          float v161 = v314;
          do
          {
            int v169 = *((_DWORD *)v159 - 1);
            v159 -= 4;
            *((_DWORD *)v168 - 1) = v169;
            v168 -= 4;
          }
          while (v159 != v162);
        }
        v351 = v168;
        v352 = v160;
        v353 = &v167[4 * v166];
        if (v162) {
          operator delete(v162);
        }
      }
      else
      {
        *(_DWORD *)v352 = *v157;
        v160 = v159 + 4;
        float v161 = v314;
      }
      *((void *)&v170 + 1) = *((void *)&v323 + 1);
      *(int8x8_t *)&long long v170 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v289.u32[1], v323), (float32x2_t)__PAIR64__(DWORD1(v323), v289.u32[0])), v289, *(int8x8_t *)&v323);
      long long v323 = v170;
      float v101 = v101 + *(float *)v289.i32;
      v352 = v160;
      float v171 = v104[2];
      float v172 = v171 - v100;
      float v100 = v100 + (float)((float)(v171 - v100) / (float)v93);
      float v293 = v293 + (float)(v172 * (float)(v171 - v100));
      float v319 = v319 + (float)((float)(v171 * v171) + (float)((float)(*v104 * *v104) + (float)(v104[1] * v104[1])));
      float v173 = *v106 * *v106;
      float v174 = v106[2] * v106[2];
      float v317 = v317 + (float)((float)(v173 + (float)(v106[1] * v106[1])) + v174);
      float v291 = v291 + v174;
      float v94 = v161 + v173;
      float v175 = v103[1];
      float v176 = *v103 - v99;
      float v99 = v99 + (float)(v176 / (float)v93);
      float v296 = v296 + (float)(v176 * (float)(*v103 - v99));
      float v177 = v175 - v98;
      float v98 = v98 + (float)((float)(v175 - v98) / (float)v93);
      float v300 = v300 + (float)(v177 * (float)(v175 - v98));
      float v178 = v103[2];
      float v179 = v178 - v97;
      float v97 = v97 + (float)((float)(v178 - v97) / (float)v93);
      float v304 = v304 + (float)(v179 * (float)(v178 - v97));
    }
    while (v93 != v92);
  }
  else
  {
    *(void *)&long long v323 = 0x8000007F7FFFFFLL;
    float v309 = 0.0;
    float v96 = 1.1755e-38;
    float v95 = 3.4028e38;
    float v101 = 0.0;
    float v342 = 3.4028e38;
    float v339 = 1.1755e-38;
    float v308 = 1.1755e-38;
    float v293 = 0.0;
    float v296 = 0.0;
    float v327 = 1.1755e-38;
    float v330 = 3.4028e38;
    float v336 = 3.4028e38;
    float v333 = 3.4028e38;
    float v300 = 0.0;
    float v304 = 0.0;
    float v345 = 3.4028e38;
    float v348 = 1.1755e-38;
    float v94 = 0.0;
    float v291 = 0.0;
    float v317 = 0.0;
    float v319 = 0.0;
  }
  v180 = v273;
  *(float *)uint64_t v274 = sub_101220AAC((uint64_t)v369);
  *(float *)(v274 + 4) = sub_10082C168((uint64_t)v367);
  if (v92)
  {
    *(float *)(v274 + 20) = sqrtf(v309 / (float)v92);
    *(float *)(v274 + 8) = v96 - v95;
    *(void *)(v274 + 12) = v323;
    float v181 = v101 / (float)v92;
  }
  else
  {
    *(_DWORD *)(v274 + 20) = 0;
    *(float *)(v274 + 8) = v96 - v95;
    *(void *)(v274 + 12) = v323;
    float v181 = 0.0;
  }
  *(float *)(v274 + 24) = v181;
  sub_101289BC0((float **)&__p, 0);
  *(_DWORD *)(v274 + 328) = v182;
  *(float *)(v274 + 348) = v348 - v345;
  float v183 = sub_100AD3568((uint64_t)&v351, 50);
  *(float *)(v274 + 176) = (float)(int)sub_101289C50(v388, v183);
  *(float *)(v274 + 352) = v339 - v342;
  *(float *)(v274 + 356) = v336;
  sub_101289CEC((uint64_t)v401);
  *(_DWORD *)(v274 + 228) = v184;
  sub_101289CEC((uint64_t)v394);
  *(_DWORD *)(v274 + 188) = v185;
  sub_101289DC4((uint64_t)v400);
  *(_DWORD *)(v274 + 252) = v186;
  *(float *)(v274 + 180) = (float)(int)sub_101289C50(v387, 0.0);
  *(float *)(v274 + 248) = sub_100AD3568((uint64_t)&v357, 10);
  *(float *)(v274 + 244) = sub_100AD3568((uint64_t)&v354, 90);
  float v187 = sub_100AD3568((uint64_t)&v357, 90);
  *(float *)(v274 + 236) = v348 - v345;
  *(float *)(v274 + 240) = v187;
  *(float *)(v274 + 232) = v327 - v330;
  float v188 = 0.0;
  if (v92 >= 2) {
    float v188 = v293 / (float)v92;
  }
  *(float *)(v274 + 256) = sqrtf(v188);
  *(float *)(v274 + 332) = v333;
  *(float *)(v274 + 336) = sub_100AD3568((uint64_t)&v354, 50);
  *(float *)(v274 + 340) = v319;
  *(float *)(v274 + 392) = sub_10082C168((uint64_t)v365);
  *(float *)(v274 + 396) = sub_10082C168((uint64_t)v363);
  if (v92 < 2)
  {
    float v189 = 0.0;
    float v190 = 1.1755e-38;
LABEL_218:
    if (v190 == v189) {
      float v193 = 1.0;
    }
    else {
      float v193 = 2.0;
    }
    goto LABEL_221;
  }
  float v191 = v296 / (float)v92;
  float v192 = fmaxf(v191, 1.1755e-38);
  float v189 = v300 / (float)v92;
  if (v192 < v189) {
    float v192 = v300 / (float)v92;
  }
  float v190 = v304 / (float)v92;
  if (v192 >= v190) {
    float v190 = v192;
  }
  float v193 = 0.0;
  if (v190 != v191) {
    goto LABEL_218;
  }
LABEL_221:
  *(float *)(v274 + 372) = v193;
  sub_1014F0838(v350);
  sub_1014F083C((uint64_t)v350, v273, v406);
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 56024), v405);
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 56536), v404);
  v194 = v273 + 96;
  sub_1014F083C((uint64_t)v350, (float32x4_t *)v273[96].i32, v403);
  uint64_t v349 = v274 + 57560;
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 57560), v402);
  uint64_t v195 = v274 + 58072;
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 58072), v401);
  uint64_t v196 = (uint64_t)&v273[192];
  sub_1014F083C((uint64_t)v350, (float32x4_t *)v273[192].i32, v400);
  uint64_t v197 = v274 + 59096;
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 59096), v399);
  uint64_t v346 = v274 + 59608;
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 59608), v398);
  uint64_t v198 = (uint64_t)&v273[288];
  sub_1014F083C((uint64_t)v350, (float32x4_t *)v273[288].i32, v397);
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 60632), v396);
  sub_1014F083C((uint64_t)v350, (_DWORD *)(v274 + 61144), v395);
  sub_1014F083C((uint64_t)v350, v385, v394);
  sub_1014F083C((uint64_t)v350, v384, v393);
  sub_1014F083C((uint64_t)v350, v383, v392);
  sub_1014F083C((uint64_t)v350, v382, v391);
  sub_1014F083C((uint64_t)v350, v381, v390);
  sub_1014F083C((uint64_t)v350, v380, v389);
  sub_1014F083C((uint64_t)v350, v379, v388);
  sub_1014F083C((uint64_t)v350, v378, v387);
  sub_1014F083C((uint64_t)v350, v377, v386);
  for (uint64_t i = 0; i != 128; i += 4)
  {
    *(float32x4_t *)&v376[i + 128] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v180, *v180), vmulq_f32(v180[32], v180[32])), vmulq_f32(v180[64], v180[64])));
    ++v180;
  }
  uint64_t v200 = 0;
  v201 = v273 + 192;
  do
  {
    *(float32x4_t *)&v376[v200] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v201, *v201), vmulq_f32(v201[32], v201[32])), vmulq_f32(v201[64], v201[64])));
    ++v201;
    v200 += 4;
  }
  while (v200 != 128);
  uint64_t v202 = 0;
  v203 = v273 + 288;
  do
  {
    *(float32x4_t *)&v375[v202 + 128] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v203, *v203), vmulq_f32(v203[32], v203[32])), vmulq_f32(v203[64], v203[64])));
    ++v203;
    v202 += 4;
  }
  while (v202 != 128);
  for (uint64_t j = 0; j != 128; j += 4)
  {
    *(float32x4_t *)&v375[j] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*v194, *v194), vmulq_f32(v194[32], v194[32])), vmulq_f32(v194[64], v194[64])));
    ++v194;
  }
  uint64_t v205 = 0;
  float v206 = 0.0;
  int v207 = -1;
  float v208 = 0.0;
  do
  {
    float v209 = v376[v205 + 128];
    float v208 = v208 + v209;
    if (v209 > v206)
    {
      float v206 = v376[v205 + 128];
      int v207 = v205;
    }
    ++v205;
  }
  while (v205 != 128);
  float v337 = v208;
  uint64_t v210 = 0;
  float v211 = 0.0;
  int v212 = -1;
  do
  {
    if (*(float *)(v196 + 4 * v210) > v211)
    {
      float v211 = *(float *)(v196 + 4 * v210);
      int v212 = v210;
    }
    ++v210;
  }
  while (v210 != 128);
  float v287 = v211;
  unsigned int v294 = v92;
  uint64_t v213 = 0;
  float v214 = 0.0;
  int v215 = -1;
  do
  {
    if (*(float *)(v197 + 4 * v213) > v214)
    {
      float v214 = *(float *)(v197 + 4 * v213);
      int v215 = v213;
    }
    ++v213;
  }
  while (v213 != 128);
  uint64_t v343 = v274 + 59096;
  float v315 = v94;
  uint64_t v216 = 0;
  float v217 = 0.0;
  int v218 = -1;
  do
  {
    if (*(float *)(v346 + 4 * v216) > v217)
    {
      float v217 = *(float *)(v346 + 4 * v216);
      int v218 = v216;
    }
    ++v216;
  }
  while (v216 != 128);
  uint64_t v219 = 0;
  float v220 = 0.0;
  int v221 = -1;
  do
  {
    if (*(float *)&v385[v219] > v220)
    {
      float v220 = *(float *)&v385[v219];
      int v221 = v219;
    }
    ++v219;
  }
  while (v219 != 128);
  uint64_t v222 = 0;
  float v223 = 0.0;
  do
  {
    if (*(float *)&v382[v222] > v223) {
      float v223 = *(float *)&v382[v222];
    }
    ++v222;
  }
  while (v222 != 128);
  uint64_t v224 = 0;
  float v225 = 0.0;
  do
  {
    if (*(float *)&v381[v224] > v225) {
      float v225 = *(float *)&v381[v224];
    }
    ++v224;
  }
  while (v224 != 128);
  uint64_t v226 = 0;
  float v227 = 0.0;
  do
  {
    if (*(float *)&v380[v226] > v227) {
      float v227 = *(float *)&v380[v226];
    }
    ++v226;
  }
  while (v226 != 128);
  uint64_t v228 = 0;
  float v229 = 0.0;
  do
  {
    if (*(float *)&v379[v228] > v229) {
      float v229 = *(float *)&v379[v228];
    }
    ++v228;
  }
  while (v228 != 128);
  uint64_t v230 = 0;
  float v231 = 0.0;
  do
  {
    if (*(float *)&v378[v230] > v231) {
      float v231 = *(float *)&v378[v230];
    }
    ++v230;
  }
  while (v230 != 128);
  uint64_t v232 = 0;
  float v233 = 0.0;
  do
  {
    if (*(float *)&v377[v232] > v233) {
      float v233 = *(float *)&v377[v232];
    }
    ++v232;
  }
  while (v232 != 128);
  int v334 = sub_101289F9C((uint64_t)v381, 2.0, 0.25);
  unint64_t v234 = sub_101289F9C((uint64_t)v378, 6.0, 2.0);
  unint64_t v324 = sub_101289F9C((uint64_t)v377, 6.0, 1.0);
  uint64_t v235 = 0;
  float v236 = 0.0;
  int v237 = -1;
  do
  {
    if (v375[v235 + 128] > v236)
    {
      float v236 = v375[v235 + 128];
      int v237 = v235;
    }
    ++v235;
  }
  while (v235 != 128);
  unint64_t v331 = HIDWORD(v234);
  unint64_t v328 = sub_101289F9C(v195, 2.0, 0.25);
  unint64_t v310 = sub_101289F9C(v198, 2.0, 0.25);
  unint64_t v320 = sub_101289F9C(v274 + 60632, 2.0, 0.5);
  uint64_t v238 = 0;
  float v239 = 0.0;
  int v240 = -1;
  do
  {
    if (*(float *)(v198 + 4 * v238) > v239)
    {
      float v239 = *(float *)(v198 + 4 * v238);
      int v240 = v238;
    }
    ++v238;
  }
  while (v238 != 128);
  unint64_t v340 = HIDWORD(v310);
  unint64_t v325 = HIDWORD(v324);
  int v285 = sub_101289F9C(v196, 2.0, 0.25);
  unint64_t v305 = sub_101289F9C(v343, 4.0, 1.0);
  unint64_t v283 = sub_101289F9C(v343, 6.0, 1.0);
  unint64_t v301 = sub_101289F9C(v196, 6.0, 1.0);
  unint64_t v311 = sub_101289F9C(v349, 2.0, 0.25);
  unint64_t v297 = sub_101289F9C(v349, 6.0, 2.0);
  unint64_t v281 = sub_101289F9C(v195, 6.0, 2.0);
  uint64_t v241 = 0;
  float v242 = 0.0;
  int v243 = -1;
  do
  {
    if (*(float *)(v195 + 4 * v241) > v242)
    {
      float v242 = *(float *)(v195 + 4 * v241);
      int v243 = v241;
    }
    ++v241;
  }
  while (v241 != 128);
  uint64_t v244 = 0;
  unint64_t v298 = HIDWORD(v297);
  unint64_t v302 = HIDWORD(v301);
  float v245 = 0.0;
  unint64_t v306 = HIDWORD(v305);
  int v246 = -1;
  unint64_t v321 = HIDWORD(v320);
  do
  {
    if (v376[v244] > v245)
    {
      float v245 = v376[v244];
      int v246 = v244;
    }
    ++v244;
  }
  while (v244 != 128);
  unint64_t v312 = HIDWORD(v311);
  unint64_t v278 = sub_101289F9C((uint64_t)v376, 4.0, 2.0);
  int v280 = sub_101289F9C((uint64_t)v376, 4.0, 1.0);
  int v279 = sub_101289F9C((uint64_t)v376, 6.0, 1.0);
  unint64_t v277 = sub_101289F9C((uint64_t)v375, 2.0, 0.25);
  unint64_t v276 = sub_101289F9C((uint64_t)v375, 2.0, 0.5);
  unint64_t v275 = sub_101289F9C((uint64_t)v375, 6.0, 2.0);
  uint64_t v247 = 0;
  float v248 = 0.0;
  int v249 = -1;
  do
  {
    if (*(float *)(v349 + 4 * v247) > v248)
    {
      float v248 = *(float *)(v349 + 4 * v247);
      int v249 = v247;
    }
    ++v247;
  }
  while (v247 != 128);
  float v250 = *(float *)&dword_102486A08 * (float)v207;
  *(float *)(v274 + 28) = v206;
  *(float *)(v274 + 32) = v250;
  *(float *)(v274 + 36) = v337 * 0.0078125;
  *(float *)(v274 + 184) = v220;
  if (v223 <= v225) {
    float v251 = v225;
  }
  else {
    float v251 = v223;
  }
  if (v251 <= v227) {
    float v251 = v227;
  }
  *(float *)(v274 + 192) = v251;
  *(_DWORD *)(v274 + 196) = v334;
  *(float *)(v274 + 200) = (float)(int)v331;
  *(float *)(v274 + 204) = (float)(int)v325;
  *(float *)(v274 + 208) = (float)v237;
  *(float *)(v274 + 216) = (float)SHIDWORD(v328);
  *(float *)(v274 + 220) = (float)(int)v340;
  float v252 = sub_100D6A9FC(50, 0x80uLL, 0.4);
  float v253 = sub_100D6A9FC(50, 0x80uLL, 4.3);
  int v254 = (int)v252;
  int v255 = (int)v253;
  float v256 = 0.0;
  float v257 = 0.0;
  if ((int)v252 < v255)
  {
    uint64_t v258 = v255 - (uint64_t)v254;
    v259 = (float *)(v274 + 4 * v254 + 60120);
    do
    {
      float v257 = (float)((float)(v257 + *v259) + v259[128]) + v259[256];
      ++v259;
      --v258;
    }
    while (v258);
  }
  *(float *)(v274 + 212) = v257;
  *(float *)(v274 + 224) = (float)(int)v321;
  *(float *)(v274 + 260) = (float)v212;
  *(float *)(v274 + 264) = v287;
  *(_DWORD *)(v274 + 268) = v285;
  *(float *)(v274 + 272) = (float)(int)v306;
  *(float *)(v274 + 276) = (float)SHIDWORD(v283);
  *(float *)(v274 + 280) = (float)(int)v312;
  *(float *)(v274 + 284) = (float)v243;
  *(float *)(v274 + 288) = (float)v246;
  *(float *)(v274 + 292) = (float)SHIDWORD(v278);
  *(_DWORD *)(v274 + 296) = v280;
  *(float *)(v274 + 304) = (float)SHIDWORD(v277);
  *(float *)(v274 + 308) = (float)SHIDWORD(v276);
  *(_DWORD *)(v274 + 300) = v279;
  *(float *)(v274 + 312) = (float)v249;
  *(float *)(v274 + 316) = (float)v221;
  *(float *)(v274 + 320) = (float)(v223 + v225) + v227;
  *(float *)(v274 + 324) = (float)(v229 + v231) + v233;
  *(float *)(v274 + 344) = (float)(int)v302;
  float v260 = (float)v215;
  *(float *)(v274 + 360) = (float)v215;
  *(float *)(v274 + 364) = (float)(int)v298;
  *(float *)(v274 + 368) = (float)SHIDWORD(v281);
  *(float *)(v274 + 384) = (float)SHIDWORD(v275);
  *(float *)(v274 + 388) = (float)v240;
  float v261 = (float)(v375[0] + 0.0) + v375[1];
  uint64_t v262 = 2;
  *(float *)(v274 + 400) = v261;
  do
    float v256 = v256 + v375[v262++];
  while (v262 != 15);
  *(float *)(v274 + 404) = v256;
  float v263 = 0.0;
  for (uint64_t k = 46; k != 128; ++k)
    float v263 = v263 + v375[k];
  float v265 = fabsf(v263);
  float v266 = v261 / v263;
  if (v265 <= 0.0000011921) {
    float v266 = -1.0;
  }
  *(float *)(v274 + 408) = v266;
  float v267 = *(float *)(v274 + 372);
  if (v267 != 1.0) {
    float v260 = (float)v218;
  }
  uint64_t v268 = v274 + 59608;
  if (v267 == 1.0) {
    uint64_t v268 = v274 + 59096;
  }
  BOOL v269 = v267 == 0.0;
  if (v267 == 0.0) {
    float v270 = (float)v212;
  }
  else {
    float v270 = v260;
  }
  if (v269) {
    uint64_t v271 = (uint64_t)&v273[192];
  }
  else {
    uint64_t v271 = v268;
  }
  *(float *)(v274 + 376) = v270;
  *(float *)(v274 + 380) = (float)(int)(sub_101289F9C(v271, 4.0, 2.0) >> 32);
  *(void *)v272 = 0;
  if (fabsf(v317) > 0.0000011921) {
    float *v272 = v291 / v317;
  }
  if (v294 && fabsf(v315) > 0.0000011921) {
    *(float *)(v274 + 416) = v308 / sqrtf(v315 / (float)v294);
  }
  if (v351)
  {
    v352 = (char *)v351;
    operator delete(v351);
  }
  if (v354)
  {
    v355 = (char *)v354;
    operator delete(v354);
  }
  if (v357)
  {
    v358 = (char *)v357;
    operator delete(v357);
  }
  if (__p)
  {
    v361 = (char *)__p;
    operator delete(__p);
  }
}

void sub_101287E6C(_Unwind_Exception *a1)
{
  unint64_t v2 = (void *)STACK[0x9E0];
  if (STACK[0x9E0])
  {
    STACK[0x9E8] = (unint64_t)v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)STACK[0x9F8];
  if (STACK[0x9F8])
  {
    STACK[0xA00] = (unint64_t)v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0xA10];
  if (STACK[0xA10])
  {
    STACK[0xA18] = (unint64_t)v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)STACK[0xA28];
  if (STACK[0xA28])
  {
    STACK[0xA30] = (unint64_t)v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_101287EF4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v75 = v1;
  sub_1014F0838(v92);
  unint64_t v2 = 0;
  int v80 = (_WORD *)(v75 + 13018);
  v108[0] = 0x10000000000;
  v107[0] = 0x10000000000;
  v106[0] = 0x10000000000;
  do
  {
    unint64_t v3 = (_DWORD *)sub_100659D10((unsigned __int16 *)(v75 + 696), v2);
    unsigned int v4 = WORD1(v108[0]);
    unint64_t v5 = HIDWORD(v108[0]);
    uint64_t v6 = LOWORD(v108[0]);
    if (LOWORD(v108[0]) + (unint64_t)WORD1(v108[0]) >= HIDWORD(v108[0])) {
      uint64_t v7 = HIDWORD(v108[0]);
    }
    else {
      uint64_t v7 = 0;
    }
    *((_DWORD *)&v108[1] + LOWORD(v108[0]) + (unint64_t)WORD1(v108[0]) - v7) = *v3;
    if (v5 <= v4)
    {
      if (v6 + 1 < v5) {
        LOWORD(v5) = 0;
      }
      LOWORD(v108[0]) = v6 + 1 - v5;
    }
    else
    {
      WORD1(v108[0]) = v4 + 1;
    }
    unsigned int v8 = WORD1(v107[0]);
    unint64_t v9 = HIDWORD(v107[0]);
    uint64_t v10 = LOWORD(v107[0]);
    if (LOWORD(v107[0]) + (unint64_t)WORD1(v107[0]) >= HIDWORD(v107[0])) {
      uint64_t v11 = HIDWORD(v107[0]);
    }
    else {
      uint64_t v11 = 0;
    }
    *((_DWORD *)&v107[1] + LOWORD(v107[0]) + (unint64_t)WORD1(v107[0]) - v11) = v3[1];
    if (v9 <= v8)
    {
      if (v10 + 1 < v9) {
        LOWORD(v9) = 0;
      }
      LOWORD(v107[0]) = v10 + 1 - v9;
    }
    else
    {
      WORD1(v107[0]) = v8 + 1;
    }
    unsigned int v12 = WORD1(v106[0]);
    unint64_t v13 = HIDWORD(v106[0]);
    uint64_t v14 = LOWORD(v106[0]);
    if (LOWORD(v106[0]) + (unint64_t)WORD1(v106[0]) >= HIDWORD(v106[0])) {
      uint64_t v15 = HIDWORD(v106[0]);
    }
    else {
      uint64_t v15 = 0;
    }
    *((_DWORD *)&v106[1] + LOWORD(v106[0]) + (unint64_t)WORD1(v106[0]) - v15) = v3[2];
    if (v13 <= v12)
    {
      if (v14 + 1 < v13) {
        LOWORD(v13) = 0;
      }
      LOWORD(v106[0]) = v14 + 1 - v13;
    }
    else
    {
      WORD1(v106[0]) = v12 + 1;
    }
    ++v2;
  }
  while (v2 != 256);
  sub_101289E94(v105, (uint64_t)v92, (unsigned __int16 *)v108, 1);
  sub_101289E94(v104, (uint64_t)v92, (unsigned __int16 *)v107, 1);
  sub_101289E94(v103, (uint64_t)v92, (unsigned __int16 *)v106, 1);
  for (uint64_t i = 0; i != 128; i += 4)
    *(float32x4_t *)&v102[i * 4] = vaddq_f32(vaddq_f32(*(float32x4_t *)&v105[i], *(float32x4_t *)&v104[i]), *(float32x4_t *)&v103[i]);
  if (!*(_WORD *)(v75 + 16098))
  {
    float v38 = (float *)v75;
    *(void *)(v75 + 40) = 0xFF7FFFFFBF800000;
    float v39 = 0.0;
    float v40 = NAN;
    goto LABEL_57;
  }
  unint64_t v17 = 0;
  int v18 = 0;
  float v19 = 0.0;
  float v20 = 3.4028e38;
  float v21 = 1.1755e-38;
  float v79 = 3.4028e38;
  float v22 = 0.0;
  float v76 = 0.0;
  float v77 = 0.0;
  float v78 = 1.1755e-38;
  float v23 = 0.0;
  do
  {
    uint64_t v24 = sub_100659D10((unsigned __int16 *)(v75 + 16096), v17);
    float v25 = *(float *)v24;
    float v26 = *(float *)(v24 + 4);
    float v27 = asinf(*(float *)(v24 + 8)) * 57.296;
    float v28 = v27 - v22;
    if ((float)(v27 - v22) <= 180.0)
    {
      if (v28 >= -180.0) {
        goto LABEL_36;
      }
      float v29 = 360.0;
    }
    else
    {
      float v29 = -360.0;
    }
    float v28 = v28 + v29;
LABEL_36:
    float v19 = v19 + v28;
    if (v20 > v19) {
      float v20 = v19;
    }
    if (v21 < v19) {
      float v21 = v19;
    }
    if (fabsf(v27) < 60.0)
    {
      float v30 = atan2f(v26, v25) * 57.296;
      float v31 = v30 - v76;
      if ((float)(v30 - v76) > 180.0)
      {
        float v32 = -360.0;
        goto LABEL_45;
      }
      if (v31 < -180.0)
      {
        float v32 = 360.0;
LABEL_45:
        float v31 = v31 + v32;
      }
      float v33 = v77 + v31;
      if (v79 <= (float)(v77 + v31)) {
        float v34 = v79;
      }
      else {
        float v34 = v77 + v31;
      }
      float v35 = v78;
      float v76 = v30;
      float v77 = v33;
      if (v78 < v33) {
        float v35 = v33;
      }
      float v78 = v35;
      float v79 = v34;
      ++v18;
    }
    float v23 = v23 + v27;
    ++v17;
    unint64_t v36 = *(unsigned __int16 *)(v75 + 16098);
    float v22 = v27;
  }
  while (v17 < v36);
  float v37 = v78 - v79;
  if (v18 <= 0) {
    float v37 = -1.0;
  }
  float v38 = (float *)v75;
  *(float *)(v75 + 40) = v37;
  *(float *)(v75 + 44) = v21 - v20;
  float v39 = v23 / (float)v17;
  float v40 = (float)v18 / (float)v36;
LABEL_57:
  v38[12] = v39;
  v38[13] = 1.0 - v40;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  sub_10128A008((float *)&v90, (float *)&v91, v38 + 14, (uint64_t)v105);
  sub_10128A008((float *)&v91 + 1, (float *)&v91, (float *)&v90 + 1, (uint64_t)v104);
  sub_10128A008((float *)&v91 + 1, (float *)&v91, (float *)&v90 + 1, (uint64_t)v103);
  float v89 = 0.0;
  *(float *)&double v41 = sub_10128A008(&v89, (float *)&v91, (float *)&v90 + 1, (uint64_t)v102);
  sub_10128A0D0((unsigned __int16 *)(v75 + 9936), v41);
  float v46 = v45;
  *(void *)float v101 = 0x10000000000;
  *(void *)float v100 = 0x10000000000;
  *(void *)float v99 = 0x10000000000;
  *(void *)float v98 = 0x10000000000;
  if (*v80)
  {
    float v47 = v42;
    float v48 = v43;
    float v49 = v44;
    int v50 = 0;
    unint64_t v51 = 0;
    int v52 = 0;
    unint64_t v53 = 0;
    unint64_t v54 = 0;
    int v55 = (unsigned __int16 *)(v75 + 13016);
    do
    {
      int v56 = (float *)sub_100659D10(v55, v54);
      unint64_t v57 = v53 + (unsigned __int16)v52;
      if (v57 >= 0x100) {
        uint64_t v58 = -256;
      }
      else {
        uint64_t v58 = 0;
      }
      *(float *)&v101[2 * v58 + 4 + 2 * v57] = (float)((float)(v56[2] * 0.0) + (float)(v47 * v56[1]))
                                             + (float)(v46 * *v56);
      if (v53 > 0xFF)
      {
        if ((unsigned __int16)v52 >= 0xFFu) {
          int v59 = -256;
        }
        else {
          int v59 = 0;
        }
        int v60 = v52 + v59;
        int v52 = v60 + 1;
        v101[0] = v60 + 1;
      }
      else
      {
        v101[1] = ++v53;
      }
      unint64_t v61 = (float *)sub_100659D10(v55, v54);
      unint64_t v62 = v51 + (unsigned __int16)v50;
      if (v62 >= 0x100) {
        uint64_t v63 = -256;
      }
      else {
        uint64_t v63 = 0;
      }
      *(float *)&v100[2 * v63 + 4 + 2 * v62] = (float)((float)(v61[2] * 0.0) + (float)(v49 * v61[1]))
                                             + (float)(v48 * *v61);
      if (v51 > 0xFF)
      {
        if ((unsigned __int16)v50 >= 0xFFu) {
          int v64 = -256;
        }
        else {
          int v64 = 0;
        }
        int v65 = v50 + v64;
        int v50 = v65 + 1;
        v100[0] = v65 + 1;
      }
      else
      {
        v100[1] = ++v51;
      }
      uint64_t v66 = sub_100659D10(v55, v54);
      sub_100877A00(v99, (_DWORD *)(v66 + 8));
      uint64_t v67 = sub_100659D10((unsigned __int16 *)(v75 + 9936), v54);
      sub_100877A00(v98, (_DWORD *)(v67 + 8));
      ++v54;
    }
    while (v54 < (unsigned __int16)*v80);
  }
  sub_101289E94(v97, (uint64_t)v92, v101, 1);
  sub_101289E94(v96, (uint64_t)v92, v100, 1);
  sub_101289E94(v95, (uint64_t)v92, v99, 1);
  sub_101289E94(v94, (uint64_t)v92, v98, 1);
  sub_10128A008((float *)&v91 + 1, (float *)&v91, (float *)&v90 + 1, (uint64_t)v97);
  float v88 = 0.0;
  uint64_t v87 = 0;
  sub_10128A008(&v88, (float *)&v87 + 1, (float *)&v87, (uint64_t)v96);
  uint64_t v86 = 0;
  int v85 = 0;
  sub_10128A008((float *)&v86 + 1, (float *)&v86, (float *)&v85, (uint64_t)v97);
  float v84 = 0.0;
  uint64_t v83 = 0;
  sub_10128A008(&v84, (float *)&v83 + 1, (float *)&v83, (uint64_t)v95);
  sub_10128A008((float *)&v91 + 1, (float *)&v91, (float *)&v90 + 1, (uint64_t)v95);
  float v82 = 0.0;
  sub_10128A008(&v82, (float *)&v91, (float *)&v90 + 1, (uint64_t)v94);
  for (uint64_t j = 0; j != 128; j += 4)
    *(float32x4_t *)&v93[j * 4] = vaddq_f32(vaddq_f32(*(float32x4_t *)&v97[j], *(float32x4_t *)&v96[j]), *(float32x4_t *)&v95[j]);
  float v81 = 0.0;
  sub_10128A008(&v81, (float *)&v91, (float *)&v90 + 1, (uint64_t)v93);
  *(void *)(v75 + 468) = 0;
  *(void *)(v75 + 500) = 0;
  *(_DWORD *)(v75 + 508) = 0;
  *(void *)(v75 + 60) = 0;
  *(void *)(v75 + 76) = 0;
  *(void *)(v75 + 68) = 0;
  float v69 = v81;
  float v71 = *((float *)&v87 + 1);
  float v70 = v88;
  if (fabsf(v81) > 0.0000011921)
  {
    *(float *)(v75 + 60) = v89 / v81;
    *(float *)(v75 + 72) = v71 / v69;
    *(float *)(v75 + 468) = *((float *)&v83 + 1) / v69;
    *(float *)(v75 + 472) = *(float *)&v86 / v69;
    *(float *)(v75 + 504) = v70 / v69;
    *(float *)(v75 + 508) = v84 / v69;
    *(float *)(v75 + 500) = *((float *)&v86 + 1) / v69;
  }
  *(float *)(v75 + 452) = v69;
  if (fabsf(v70) > 0.0000011921)
  {
    *(float *)(v75 + 64) = *(float *)&v90 / v70;
    *(float *)(v75 + 68) = v71 / v70;
  }
  *(float *)(v75 + 456) = v70;
  *(float *)(v75 + 460) = v71;
  int v73 = HIDWORD(v86);
  float v72 = *(float *)&v87;
  *(_DWORD *)(v75 + 464) = v87;
  *(_DWORD *)(v75 + 476) = v73;
  *(_DWORD *)(v75 + 480) = v86;
  *(_DWORD *)(v75 + 484) = v85;
  *(float *)(v75 + 488) = v84;
  *(_DWORD *)(v75 + 492) = HIDWORD(v83);
  float v74 = *(float *)(v75 + 56);
  *(_DWORD *)(v75 + 496) = v83;
  if (fabsf(v74) > 0.0000011921) {
    *(float *)(v75 + 76) = v72 / v74;
  }
  if (fabsf(v89) > 0.0000011921) {
    *(float *)(v75 + 80) = v82 / v89;
  }
}

uint64_t sub_1012887E4(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  double v41 = (_DWORD *)v2;
  unint64_t v3 = (unsigned __int16 *)(v2 + 39880);
  sub_10128A0D0((unsigned __int16 *)(v2 + 39880), v1);
  float v5 = v4;
  float v7 = v6;
  float v9 = v8;
  float v11 = v10;
  v47[0] = 0x20000000000;
  v46[0] = 0x20000000000;
  v45[0] = 0x20000000000;
  sub_100877858(v44, &off_10231B210);
  sub_100877858(v43, &off_10231B210);
  sub_100877858(v42, &off_10231B210);
  int v12 = 0;
  unint64_t v13 = 0;
  int v14 = 0;
  unint64_t v15 = 0;
  int v16 = 0;
  unint64_t v17 = 0;
  for (unint64_t i = 0; i != 512; ++i)
  {
    float v19 = (float *)sub_100659D10(v3, i);
    sub_10087785C(v44, (float)((float)(v19[2] * 0.0) + (float)(v7 * v19[1])) + (float)(v5 * *v19));
    unint64_t v21 = v17 + (unsigned __int16)v16;
    if (v21 >= 0x200) {
      uint64_t v22 = 0x7FFFFFFFFFFFFF00;
    }
    else {
      uint64_t v22 = 0;
    }
    *((_DWORD *)&v47[v22 + 1] + v21) = v20;
    if (v17 > 0x1FF)
    {
      if ((unsigned __int16)v16 >= 0x1FFu) {
        int v23 = -512;
      }
      else {
        int v23 = 0;
      }
      int v24 = v16 + v23;
      int v16 = v24 + 1;
      LOWORD(v47[0]) = v24 + 1;
    }
    else
    {
      WORD1(v47[0]) = ++v17;
    }
    float v25 = (float *)sub_100659D10(v3, i);
    sub_10087785C(v43, (float)((float)(v25[2] * 0.0) + (float)(v11 * v25[1])) + (float)(v9 * *v25));
    unint64_t v27 = v15 + (unsigned __int16)v14;
    if (v27 >= 0x200) {
      uint64_t v28 = 0x7FFFFFFFFFFFFF00;
    }
    else {
      uint64_t v28 = 0;
    }
    *((_DWORD *)&v46[v28 + 1] + v27) = v26;
    if (v15 > 0x1FF)
    {
      if ((unsigned __int16)v14 >= 0x1FFu) {
        int v29 = -512;
      }
      else {
        int v29 = 0;
      }
      int v30 = v14 + v29;
      int v14 = v30 + 1;
      LOWORD(v46[0]) = v30 + 1;
    }
    else
    {
      WORD1(v46[0]) = ++v15;
    }
    uint64_t v31 = sub_100659D10(v3, i);
    sub_10087785C(v42, *(float *)(v31 + 8));
    unint64_t v33 = v13 + (unsigned __int16)v12;
    if (v33 >= 0x200) {
      uint64_t v34 = 0x7FFFFFFFFFFFFF00;
    }
    else {
      uint64_t v34 = 0;
    }
    *((_DWORD *)&v45[v34 + 1] + v33) = v32;
    if (v13 > 0x1FF)
    {
      if ((unsigned __int16)v12 >= 0x1FFu) {
        int v35 = -512;
      }
      else {
        int v35 = 0;
      }
      int v36 = v12 + v35;
      int v12 = v36 + 1;
      LOWORD(v45[0]) = v36 + 1;
    }
    else
    {
      WORD1(v45[0]) = ++v13;
    }
  }
  sub_10128A228((uint64_t)v47, 0, 0.0);
  v41[105] = v37;
  sub_10128A228((uint64_t)v46, 0, 0.0);
  v41[106] = v38;
  uint64_t result = sub_10128A228((uint64_t)v45, 0, 0.0);
  v41[107] = v40;
  return result;
}

void sub_101288ACC(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  unint64_t v3 = (char *)operator new(8uLL);
  *(void *)unint64_t v3 = v2 + 21424;
  v172[0] = v3 + 8;
  std::string __p = v3;
  float v171 = v3 + 8;
  float v5 = (char *)sub_1000DA54C((uint64_t)v172, 2uLL);
  *((void *)v5 + 1) = v2 + 27576;
  float v6 = v5 + 8;
  float v7 = &v5[8 * v4];
  float v8 = v5 + 16;
  float v9 = (char *)__p;
  float v10 = v171;
  if (v171 != __p)
  {
    do
    {
      uint64_t v11 = *((void *)v10 - 1);
      v10 -= 8;
      *((void *)v6 - 1) = v11;
      v6 -= 8;
    }
    while (v10 != v9);
    float v9 = (char *)__p;
  }
  std::string __p = v6;
  float v171 = v5 + 16;
  v172[0] = &v5[8 * v4];
  if (v9)
  {
    operator delete(v9);
    float v7 = (char *)v172[0];
  }
  uint64_t v12 = v2 + 33728;
  float v171 = v5 + 16;
  if (v8 >= v7)
  {
    uint64_t v14 = (v8 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v7 - (unsigned char *)__p;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      int v18 = (char *)sub_1000DA54C((uint64_t)v172, v17);
    }
    else {
      int v18 = 0;
    }
    float v19 = &v18[8 * v14];
    int v20 = &v18[8 * v17];
    *(void *)float v19 = v12;
    unint64_t v13 = v19 + 8;
    unint64_t v21 = v171;
    uint64_t v22 = (char *)__p;
    if (v171 != __p)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      unint64_t v21 = (char *)__p;
    }
    std::string __p = v19;
    float v171 = v13;
    v172[0] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *((void *)v5 + 2) = v12;
    unint64_t v13 = v5 + 24;
  }
  uint64_t v144 = v2;
  float v171 = v13;
  bzero(v165, 0x800uLL);
  if (v13 == __p)
  {
    float v35 = 0.0;
  }
  else
  {
    unint64_t v24 = 0;
    unint64_t v13 = (char *)__p;
    do
    {
      unint64_t v25 = 0;
      int v26 = *(unsigned __int16 **)&v13[8 * v24];
      do
      {
        unint64_t v27 = 0;
        double v28 = 0.0;
        do
        {
          uint64_t v29 = sub_100659D10(v26, v27);
          float v30 = sub_1004E30E4(v29, v25);
          *((float *)v174 + v27) = v30;
          double v28 = v28 + v30;
          ++v27;
        }
        while (v27 != 512);
        uint64_t v31 = 0;
        double v32 = v28 * 0.001953125;
        *(float *)&double v32 = v28 * 0.001953125;
        float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 0);
        do
        {
          *(float32x4_t *)&v174[v31] = vsubq_f32(*(float32x4_t *)&v174[v31], v33);
          v31 += 2;
        }
        while (v31 != 256);
        sub_10126D6A4((uint64_t)v174, (float *)v173, 512, 1);
        for (unint64_t i = 0; i != 2048; i += 16)
          *(float32x4_t *)&v165[i / 2] = vaddq_f32(*(float32x4_t *)&v173[i / 8], *(float32x4_t *)&v165[i / 2]);
        ++v25;
      }
      while (v25 != 3);
      ++v24;
      unint64_t v13 = (char *)__p;
    }
    while (v24 < (v171 - (unsigned char *)__p) >> 3);
    float v35 = v166;
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  float v38 = 1.1755e-38;
  do
  {
    float v39 = v35;
    int v40 = (float *)&v165[2 * v36];
    float v35 = v40[25];
    if (v35 > v39 && v35 >= v40[26] && v35 > v38)
    {
      unint64_t v37 = v36 + 25;
      float v38 = v40[25];
    }
    ++v36;
  }
  while (v36 != 486);
  float v41 = v38 / 9.0;
  if (v13)
  {
    float v171 = v13;
    operator delete(v13);
  }
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(v144 + 432) = _D0;
  *(_DWORD *)(v144 + 440) = -1082130432;
  *(float *)(v144 + 444) = v41;
  *(float *)(v144 + 448) = (float)v37 / 100.0;
  if (v37 && v41 > 0.1)
  {
    float v47 = (unsigned __int16 *)(v144 + 39880);
    unint64_t v48 = *(unsigned __int16 *)(v144 + 39882);
    float v161 = 0;
    v162 = 0;
    uint64_t v163 = 0;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v155 = 0;
    int v156 = 0;
    v157 = 0;
    unint64_t v49 = v48 / v37 * v37;
    if (v49)
    {
      unint64_t v50 = 0;
      float v51 = 0.0;
      float v52 = 0.0;
      float v53 = 0.0;
      do
      {
        float v54 = *(float *)sub_100659D10(v47, v50);
        float v55 = *(float *)(sub_100659D10(v47, v50) + 4);
        uint64_t v56 = sub_100659D10(v47, v50);
        float v53 = v53 + v54;
        ++v50;
        float v52 = v52 + v55;
        float v51 = v51 + *(float *)(v56 + 8);
      }
      while (v49 != v50);
    }
    else
    {
      float v53 = 0.0;
      float v52 = 0.0;
      float v51 = 0.0;
    }
    if (v37 <= v48)
    {
      uint64_t v57 = 0;
      float v58 = v52 / (float)v49;
      float v59 = (float)(v37 - 1);
      float v60 = 0.01 * v59;
      if (v49) {
        float v61 = v53 / (float)v49;
      }
      else {
        float v61 = 0.0;
      }
      if (v49) {
        float v62 = v58;
      }
      else {
        float v62 = 0.0;
      }
      if (v49) {
        float v63 = v51 / (float)v49;
      }
      else {
        float v63 = 0.0;
      }
      if (v48 / v37 <= 1) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = v48 / v37;
      }
      float v148 = v61;
      float v149 = 0.01 * v59;
      float v146 = v63;
      float v147 = v62;
      uint64_t v145 = v64;
      do
      {
        *(void *)uint64_t v165 = 0x20000000000;
        v174[0] = 0x20000000000;
        v173[0] = 0x20000000000;
        std::string __p = (void *)0x20000000000;
        unint64_t v65 = v37 * v57++;
        if (v65 >= v37 * v57)
        {
          unsigned __int16 v71 = 0;
          unsigned __int16 v70 = 0;
          unsigned __int16 v69 = 0;
        }
        else
        {
          uint64_t v154 = v57;
          unint64_t v66 = 0;
          unint64_t v67 = 0;
          unint64_t v68 = 0;
          unsigned __int16 v69 = 0;
          unsigned __int16 v70 = 0;
          unsigned __int16 v71 = 0;
          unint64_t v72 = v37;
          do
          {
            float v73 = *(float *)sub_100659D10(v47, v65) - v61;
            unint64_t v74 = v68 + v69;
            uint64_t v75 = 0x7FFFFFFFFFFFFF00;
            if (v74 < 0x200) {
              uint64_t v75 = 0;
            }
            *((float *)&v174[v75 + 1] + v74) = v73;
            if (v68 > 0x1FF)
            {
              if (v69 >= 0x1FFu) {
                __int16 v76 = -512;
              }
              else {
                __int16 v76 = 0;
              }
              v69 += v76 + 1;
            }
            else
            {
              ++v68;
            }
            float v77 = *(float *)(sub_100659D10(v47, v65) + 4) - v62;
            unint64_t v78 = v67 + v70;
            uint64_t v79 = 0x7FFFFFFFFFFFFF00;
            if (v78 < 0x200) {
              uint64_t v79 = 0;
            }
            *((float *)&v173[v79 + 1] + v78) = v77;
            if (v67 > 0x1FF)
            {
              if (v70 >= 0x1FFu) {
                __int16 v80 = -512;
              }
              else {
                __int16 v80 = 0;
              }
              v70 += v80 + 1;
            }
            else
            {
              ++v67;
            }
            float v81 = *(float *)(sub_100659D10(v47, v65) + 8) - v63;
            unint64_t v82 = v66 + v71;
            uint64_t v83 = 0x7FFFFFFFFFFFFF00;
            if (v82 < 0x200) {
              uint64_t v83 = 0;
            }
            *((float *)&v172[v83 - 1] + v82) = v81;
            if (v66 > 0x1FF)
            {
              if (v71 >= 0x1FFu) {
                __int16 v84 = -512;
              }
              else {
                __int16 v84 = 0;
              }
              v71 += v84 + 1;
            }
            else
            {
              ++v66;
            }
            ++v65;
            --v72;
          }
          while (v72);
          WORD1(v174[0]) = v68;
          WORD1(v173[0]) = v67;
          WORD1(__p) = v66;
          uint64_t v57 = v154;
          uint64_t v64 = v145;
        }
        LOWORD(v174[0]) = v69;
        LOWORD(v173[0]) = v70;
        LOWORD(__p) = v71;
        v169[0] = 0x20000000000;
        v168[0] = 0x20000000000;
        v167[0] = 0x20000000000;
        sub_10128A228((uint64_t)v174, (unsigned __int16 *)v169, 0.0);
        unint64_t v85 = LOWORD(v169[0]) + (unint64_t)WORD1(v169[0]) - 1;
        uint64_t v86 = HIDWORD(v169[0]);
        if (v85 < HIDWORD(v169[0])) {
          uint64_t v86 = 0;
        }
        sub_10128A228((uint64_t)v174, (unsigned __int16 *)v169, (float)-*((float *)&v169[1] + v85 - v86) / v60);
        sub_10128A228((uint64_t)v173, (unsigned __int16 *)v168, 0.0);
        unint64_t v87 = LOWORD(v168[0]) + (unint64_t)WORD1(v168[0]) - 1;
        uint64_t v88 = HIDWORD(v168[0]);
        if (v87 < HIDWORD(v168[0])) {
          uint64_t v88 = 0;
        }
        sub_10128A228((uint64_t)v173, (unsigned __int16 *)v168, (float)-*((float *)&v168[1] + v87 - v88) / v60);
        sub_10128A228((uint64_t)&__p, (unsigned __int16 *)v167, 0.0);
        unint64_t v89 = LOWORD(v167[0]) + (unint64_t)WORD1(v167[0]) - 1;
        uint64_t v90 = HIDWORD(v167[0]);
        if (v89 < HIDWORD(v167[0])) {
          uint64_t v90 = 0;
        }
        sub_10128A228((uint64_t)&__p, 0, (float)-*((float *)&v167[1] + v89 - v90) / v60);
        int v92 = v91;
        unint64_t v93 = v156;
        if (v156 >= v157)
        {
          float v95 = (char *)v155;
          uint64_t v96 = (v156 - (unsigned char *)v155) >> 2;
          unint64_t v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v98 = v157 - (unsigned char *)v155;
          if ((v157 - (unsigned char *)v155) >> 1 > v97) {
            unint64_t v97 = v98 >> 1;
          }
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v99 = v97;
          }
          if (v99)
          {
            float v100 = (char *)sub_10017EA34((uint64_t)&v157, v99);
            float v95 = (char *)v155;
            unint64_t v93 = v156;
          }
          else
          {
            float v100 = 0;
          }
          float v101 = &v100[4 * v96];
          *(_DWORD *)float v101 = v92;
          float v94 = v101 + 4;
          while (v93 != v95)
          {
            int v102 = *((_DWORD *)v93 - 1);
            v93 -= 4;
            *((_DWORD *)v101 - 1) = v102;
            v101 -= 4;
          }
          v155 = v101;
          int v156 = v94;
          v157 = &v100[4 * v99];
          if (v95) {
            operator delete(v95);
          }
        }
        else
        {
          *(_DWORD *)int v156 = v91;
          float v94 = v93 + 4;
        }
        unint64_t v103 = 0;
        int v156 = v94;
        do
        {
          int v104 = *(_DWORD *)sub_1004182C4((unsigned __int16 *)v169, v103);
          int v105 = *(_DWORD *)sub_1004182C4((unsigned __int16 *)v168, v103);
          v164[0] = v104;
          v164[1] = v105;
          v164[2] = 0;
          sub_100659A48(v165, (uint64_t)v164);
          ++v103;
        }
        while (v37 != v103);
        double v106 = 0.0;
        float v107 = 0.0;
        float v108 = 3.4028e38;
        float v109 = 0.0;
        do
        {
          double v150 = v106;
          float v151 = v107;
          float v152 = v108;
          __float2 v110 = __sincosf_stret(v109);
          unint64_t v111 = 0;
          float v153 = -v110.__sinval;
          float v112 = 3.4028e38;
          float v113 = 1.1755e-38;
          float v114 = 1.1755e-38;
          float v115 = 3.4028e38;
          do
          {
            float v116 = (float *)sub_100659D10(v165, v111);
            float v118 = *v116;
            float v117 = v116[1];
            float v119 = v116[2];
            float v120 = (float *)sub_100659D10(v165, v111);
            float v121 = (float)((float)(v119 * 0.0) + (float)(v153 * v117)) + (float)(v110.__cosval * v118);
            if (v113 < v121) {
              float v113 = (float)((float)(v119 * 0.0) + (float)(v153 * v117)) + (float)(v110.__cosval * v118);
            }
            if (v112 > v121) {
              float v112 = (float)((float)(v119 * 0.0) + (float)(v153 * v117)) + (float)(v110.__cosval * v118);
            }
            float v122 = (float)(v120[2] * 0.0) + (float)(v110.__cosval * v120[1]);
            float v123 = v122 + (float)(v110.__sinval * *v120);
            if (v115 > v123) {
              float v115 = v122 + (float)(v110.__sinval * *v120);
            }
            if (v114 < v123) {
              float v114 = v122 + (float)(v110.__sinval * *v120);
            }
            ++v111;
          }
          while (v37 != v111);
          float v107 = v151;
          float v108 = v152;
          if ((float)(v114 - v115) < v152)
          {
            float v107 = v113 - v112;
            float v108 = v114 - v115;
          }
          float v109 = v150 + 0.0523598776;
          double v106 = v109;
        }
        while (v109 < 3.14159265);
        float v124 = v162;
        if (v162 >= (float *)v163)
        {
          __int16 v126 = (float *)v161;
          uint64_t v127 = ((char *)v162 - (unsigned char *)v161) >> 2;
          unint64_t v128 = v127 + 1;
          float v61 = v148;
          float v60 = v149;
          float v63 = v146;
          float v62 = v147;
          if ((unint64_t)(v127 + 1) >> 62) {
            goto LABEL_171;
          }
          uint64_t v129 = v163 - (unsigned char *)v161;
          if ((v163 - (unsigned char *)v161) >> 1 > v128) {
            unint64_t v128 = v129 >> 1;
          }
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v130 = v128;
          }
          if (v130)
          {
            unint64_t v131 = (char *)sub_10017EA34((uint64_t)&v163, v130);
            __int16 v126 = (float *)v161;
            float v124 = v162;
          }
          else
          {
            unint64_t v131 = 0;
          }
          __int16 v132 = (float *)&v131[4 * v127];
          *__int16 v132 = v107;
          int v125 = v132 + 1;
          while (v124 != v126)
          {
            int v133 = *((_DWORD *)v124-- - 1);
            *((_DWORD *)v132-- - 1) = v133;
          }
          float v161 = v132;
          v162 = v125;
          uint64_t v163 = &v131[4 * v130];
          if (v126) {
            operator delete(v126);
          }
        }
        else
        {
          float *v162 = v107;
          int v125 = v124 + 1;
          float v61 = v148;
          float v60 = v149;
          float v63 = v146;
          float v62 = v147;
        }
        v162 = v125;
        int v134 = v159;
        if (v159 >= v160)
        {
          __int16 v136 = (float *)v158;
          uint64_t v137 = ((char *)v159 - (unsigned char *)v158) >> 2;
          unint64_t v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 62) {
LABEL_171:
          }
            sub_1001D7FD4();
          uint64_t v139 = (char *)v160 - (unsigned char *)v158;
          if (((char *)v160 - (unsigned char *)v158) >> 1 > v138) {
            unint64_t v138 = v139 >> 1;
          }
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v140 = v138;
          }
          if (v140)
          {
            uint64_t v141 = (char *)sub_10017EA34((uint64_t)&v160, v140);
            __int16 v136 = (float *)v158;
            int v134 = v159;
          }
          else
          {
            uint64_t v141 = 0;
          }
          unint64_t v142 = (float *)&v141[4 * v137];
          *unint64_t v142 = v108;
          int v135 = v142 + 1;
          while (v134 != v136)
          {
            int v143 = *((_DWORD *)v134-- - 1);
            *((_DWORD *)v142-- - 1) = v143;
          }
          v158 = v142;
          v159 = v135;
          v160 = (float *)&v141[4 * v140];
          if (v136) {
            operator delete(v136);
          }
        }
        else
        {
          float *v159 = v108;
          int v135 = v134 + 1;
        }
        v159 = v135;
      }
      while (v57 != v64);
    }
    *(float *)(v144 + 432) = sub_10128A39C((uint64_t)&v161);
    *(float *)(v144 + 436) = sub_10128A39C((uint64_t)&v158);
    *(float *)(v144 + 440) = sub_10128A39C((uint64_t)&v155);
    if (v155)
    {
      int v156 = (char *)v155;
      operator delete(v155);
    }
    if (v158)
    {
      v159 = (float *)v158;
      operator delete(v158);
    }
    if (v161)
    {
      v162 = (float *)v161;
      operator delete(v161);
    }
  }
}

void sub_1012896C4(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x3118];
  if (STACK[0x3118])
  {
    STACK[0x3120] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_101289748(uint64_t a1)
{
  uint64_t v2 = a1 + 48140;
  uint64_t v3 = a1 + 47092;
  uint64_t v4 = a1 + 46044;
  uint64_t v5 = a1 + 564;
  long long v33 = 0uLL;
  int v35 = 0;
  uint64_t v34 = 0;
  uint64_t v6 = a1 + 46032;
  sub_1011BF8D0(a1 + 46032, 1, (uint64_t)&v33);
  sub_1011BFF40((unsigned __int16 *)(a1 + 49192), &v25, (uint64_t)v24, (uint64_t)&v21);
  sub_1014F0838(v20);
  sub_1014F083C((uint64_t)v20, v38, (unsigned __int16 *)(a1 + 46060));
  sub_1014F083C((uint64_t)v20, v37, (unsigned __int16 *)(a1 + 47108));
  sub_1014F083C((uint64_t)v20, v36, (unsigned __int16 *)(a1 + 48156));
  float v7 = sub_100D6AC4C(1, 11, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36);
  float v8 = sub_100D6AC4C(49, 127, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36);
  *(void *)(a1 + 512) = v25;
  int v9 = HIDWORD(v25);
  *(float *)(a1 + 520) = (float)SDWORD2(v25);
  *(_DWORD *)(a1 + 524) = v9;
  int v10 = v27;
  *(float *)(a1 + 528) = (float)v26;
  int v11 = v29;
  *(_DWORD *)(a1 + 532) = v31;
  *(_DWORD *)(a1 + 536) = v10;
  *(_DWORD *)(a1 + 540) = v32;
  *(_OWORD *)(a1 + 544) = v28;
  *(_DWORD *)(a1 + 560) = v11;
  *(void *)&long long v12 = v30;
  *((void *)&v12 + 1) = v24[0];
  *(_OWORD *)uint64_t v5 = v12;
  *(_DWORD *)(a1 + 580) = v24[1];
  *(void *)&long long v12 = *(void *)((char *)&v24[1] + 4);
  int v13 = v21;
  *((void *)&v12 + 1) = v21;
  *(_OWORD *)(v5 + 20) = v12;
  *(_DWORD *)(a1 + 600) = v22;
  *(void *)&long long v12 = v23;
  *((void *)&v12 + 1) = v33;
  *(_OWORD *)(v5 + 40) = v12;
  *(void *)(v5 + 56) = *((void *)&v33 + 1);
  int v14 = HIDWORD(v34);
  *(_DWORD *)(a1 + 628) = v34;
  *(float *)(a1 + 632) = v7;
  *(float *)(a1 + 636) = v8;
  *(_DWORD *)(a1 + 640) = v13;
  *(_DWORD *)(a1 + 644) = v35;
  *(_DWORD *)(a1 + 648) = v11;
  *(_DWORD *)(a1 + 652) = v14;
  *(float *)(a1 + 656) = sub_1012899D4(a1);
  if (*(unsigned char *)v4) {
    sub_1004184F0(v4);
  }
  float v15 = *(float *)(v4 + 4);
  if (*(unsigned char *)v3) {
    sub_1004184F0(v3);
  }
  float v16 = *(float *)(v3 + 4);
  if (*(unsigned char *)v2) {
    sub_1004184F0(v2);
  }
  *(float *)(a1 + 660) = -atan2f(v15, sqrtf((float)(v16 * v16) + (float)(*(float *)(v2 + 4) * *(float *)(v2 + 4))));
  *(float *)(a1 + 664) = sub_1012CFF5C(v6);
  *(_DWORD *)(a1 + 668) = v17;
  *(_DWORD *)(a1 + 672) = v18;
  *(_DWORD *)(a1 + 676) = v19;
}

float sub_1012899D4(uint64_t a1)
{
  uint64_t v1 = (unsigned __int16 *)(a1 + 52352);
  uint64_t v2 = a1 + 21040;
  float v3 = 0.0;
  for (unint64_t i = 192; i != 256; ++i)
  {
    unint64_t v5 = 0;
    uint64_t v6 = v2;
    do
    {
      v16[0] = sub_1011C0860(v1, i);
      v16[1] = v7;
      v16[2] = v8;
      int v9 = (float *)sub_1004E4930((uint64_t)v16, v5);
      sub_10087785C((unsigned __int16 *)v6, *v9);
      sub_10087785C((unsigned __int16 *)(v6 + 192), v10);
      int v11 = *(_DWORD *)(v6 + 200);
      *(_DWORD *)sub_1004E4930((uint64_t)v17, v5++) = v11;
      v6 += 64;
    }
    while (v5 != 3);
    uint64_t v12 = 0;
    float v13 = 0.0;
    do
    {
      float v13 = v13 + (float)(*(float *)&v17[v12] * *(float *)&v17[v12]);
      v12 += 4;
    }
    while (v12 != 12);
    float v14 = sqrtf(v13);
    float v3 = v3 + (float)(v14 * v14);
  }
  return v3;
}

unsigned __int16 *sub_101289AD4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  *(_DWORD *)a2 = 0;
  uint64_t v4 = a2 + 4;
  for (unint64_t i = 1; i != 256; unint64_t i = v7 + 2)
  {
    float v6 = *(float *)sub_1004182C4(a1, i);
    unint64_t v7 = i - 1;
    float v8 = v6 - *(float *)sub_1004182C4(a1, v7);
    uint64_t v9 = a2[1];
    unint64_t v10 = *((unsigned int *)a2 + 1);
    uint64_t v11 = *a2;
    if (v11 + v9 >= v10) {
      uint64_t v12 = *((unsigned int *)a2 + 1);
    }
    else {
      uint64_t v12 = 0;
    }
    *(float *)&v4[2 * (v11 + v9 - v12)] = v8;
    if (v10 <= v9)
    {
      if (++v11 >= v10) {
        __int16 v13 = v10;
      }
      else {
        __int16 v13 = 0;
      }
      LOWORD(v11) = v11 - v13;
      *a2 = v11;
    }
    else
    {
      LOWORD(v9) = v9 + 1;
      a2[1] = v9;
    }
  }
  unint64_t v14 = (unsigned __int16)v11 + (unint64_t)(unsigned __int16)v9 - 1;
  if (v14 < v10) {
    unint64_t v10 = 0;
  }

  return sub_100877A00(a2, &v4[2 * (v14 - v10)]);
}

void sub_101289BC0(float **a1, int a2)
{
  uint64_t v2 = *a1;
  float v3 = a1[1];
  if (v3 != *a1)
  {
    if (a2)
    {
      float v4 = 0.0;
      unint64_t v5 = *a1;
      do
      {
        float v6 = *v5++;
        float v4 = v4 + v6;
      }
      while (v5 != v3);
      float v7 = v4 / (float)(unint64_t)(v3 - *a1);
    }
    else
    {
      float v7 = sub_100B8648C((uint64_t)a1);
      uint64_t v2 = *a1;
      float v3 = a1[1];
    }
    float v9 = 0.0;
    while (v2 != v3)
    {
      float v10 = *v2++;
      float v9 = v9 + vabds_f32(v7, v10);
    }
  }
}

uint64_t sub_101289C50(unsigned __int16 *a1, float a2)
{
  if (a1[1] < 2u) {
    return 0;
  }
  LODWORD(v4) = 0;
  unint64_t v5 = 1;
  do
  {
    BOOL v6 = *(float *)sub_1004182C4(a1, v5 - 1) <= a2;
    uint64_t v4 = v4 + (v6 ^ (*(float *)sub_1004182C4(a1, v5++) <= a2));
  }
  while (v5 < a1[1]);
  return v4;
}

uint64_t sub_101289CEC(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 2);
  if (*(_WORD *)(result + 2))
  {
    uint64_t v2 = (unsigned __int16 *)result;
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
      float v4 = v4 + *(float *)sub_1004182C4(v2, v3++);
    while (v1 != v3);
    unint64_t v5 = 0;
    float v6 = v4 / (float)v1;
    float v7 = 0.0;
    float v8 = 0.0;
    do
    {
      uint64_t result = sub_1004182C4(v2, v5);
      float v9 = (float)(*(float *)result - v6) * (float)(*(float *)result - v6);
      float v7 = v7 + v9;
      float v8 = v8 + (float)(v9 * v9);
      ++v5;
    }
    while (v1 != v5);
  }
  return result;
}

uint64_t sub_101289DC4(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 2);
  if (*(_WORD *)(result + 2))
  {
    uint64_t v2 = (unsigned __int16 *)result;
    unint64_t v3 = 0;
    float v4 = 0.0;
    do
      float v4 = v4 + *(float *)sub_1004182C4(v2, v3++);
    while (v1 != v3);
    unint64_t v5 = 0;
    float v6 = v4 / (float)v1;
    float v7 = 0.0;
    float v8 = 0.0;
    do
    {
      uint64_t result = sub_1004182C4(v2, v5);
      float v9 = *(float *)result - v6;
      float v7 = v7 + (float)(v9 * v9);
      float v8 = v8 + (float)((float)(v9 * v9) * v9);
      ++v5;
    }
    while (v1 != v5);
  }
  return result;
}

void sub_101289E94(_DWORD *a1, uint64_t a2, unsigned __int16 *a3, int a4)
{
  if (a4)
  {
    sub_10126D6A4((uint64_t)(a3 + 4), v8, 256, 0);
    uint64_t v6 = 0;
    *(void *)float v7 = 0x10000000000;
    do
      sub_100877A00(v7, &v8[v6++]);
    while (v6 != 256);
    sub_1014F083C(a2, a1, v7);
  }
  else
  {
    sub_1014F083C(a2, a1, a3);
  }
}

unint64_t sub_101289F9C(uint64_t a1, float a2, float a3)
{
  uint64_t v3 = 0;
  float v4 = 0.0;
  float v5 = 0.0;
  int v6 = -1;
  do
  {
    float v7 = *(float *)(a1 + 4 * v3);
    float v5 = v5 + v7;
    if (v7 > v4)
    {
      float v4 = *(float *)(a1 + 4 * v3);
      int v6 = v3;
    }
    ++v3;
  }
  while (v3 != 128);
  float v8 = v5 * 0.0078125;
  float v9 = v4 / v8;
  BOOL v10 = v8 == 0.0;
  float v11 = 0.0;
  if (!v10) {
    float v11 = v9;
  }
  BOOL v12 = v4 <= a3 || v11 <= a2;
  unint64_t v13 = LODWORD(v4) | ((unint64_t)(int)(float)v6 << 32);
  if (v12) {
    return 0xFFFFFFFF00000000;
  }
  else {
    return v13;
  }
}

float sub_10128A008(float *a1, float *a2, float *a3, uint64_t a4)
{
  *a1 = 0.0;
  *a2 = 0.0;
  float v8 = sub_100D6A9FC(50, 0x80uLL, 0.25);
  unsigned int v9 = sub_100D6A824(v8);
  float v10 = sub_100D6A9FC(50, 0x80uLL, 10.0);
  unsigned int v11 = sub_100D6A824(v10);
  if (v9 < v11)
  {
    unint64_t v12 = (int)v9;
    do
    {
      float v13 = *(float *)(a4 + 4 * v12);
      *a1 = v13 + *a1;
      if (v13 > *a2)
      {
        *a3 = (float)v12;
        *a2 = v13;
      }
      ++v12;
    }
    while (v12 < (int)v11);
  }
  float result = *(float *)&dword_102486A08 * *a3;
  *a3 = result;
  return result;
}

float *sub_10128A0D0(unsigned __int16 *a1, double a2)
{
  uint64_t v3 = a1[1];
  if (a1[1])
  {
    unint64_t v4 = 0;
    float32x2_t v5 = 0;
    do
    {
      a2 = *(double *)sub_100659D10(a1, v4);
      float32x2_t v5 = vadd_f32(v5, *(float32x2_t *)&a2);
      ++v4;
    }
    while (v3 != v4);
  }
  else
  {
    float32x2_t v5 = 0;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v3)
  {
    unint64_t v6 = 0;
    *(float *)&a2 = (float)v3;
    float32x2_t v7 = vdiv_f32(v5, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
    do
    {
      float32x2_t v20 = vsub_f32(*(float32x2_t *)sub_100659D10(a1, v6), v7);
      unint64_t v8 = 0;
      LODWORD(v17) = sub_10128A448((uint64_t)&v20);
      HIDWORD(v17) = v9;
      int v18 = v10;
      int v19 = v11;
      do
      {
        *((float *)&v21 + v8) = sub_100730DD0((uint64_t)&v17, v8) + *((float *)&v21 + v8);
        ++v8;
      }
      while (v8 != 4);
      ++v6;
    }
    while (v6 != v3);
    float v13 = *((float *)&v21 + 1);
    float v12 = *(float *)&v21;
    float v15 = *((float *)&v22 + 1);
    float v14 = *(float *)&v22;
  }
  else
  {
    float v15 = 0.0;
    float v14 = 0.0;
    float v13 = 0.0;
    float v12 = 0.0;
  }
  return sub_10128A54C(&v17, v12, v13, v14, v15);
}

uint64_t sub_10128A228(uint64_t result, unsigned __int16 *a2, float a3)
{
  unint64_t v4 = (unsigned __int16 *)result;
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    int v5 = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 2) = 0;
    if (v5) {
      a2[1] = 1;
    }
    else {
      *a2 = 1;
    }
  }
  if (*(unsigned __int16 *)(result + 2) >= 2u)
  {
    float v6 = 0.0;
    float v7 = 1.1755e-38;
    float v8 = 3.4028e38;
    unint64_t v9 = 1;
    do
    {
      float v10 = a3;
      float v11 = *(float *)sub_1004182C4(v4, v9 - 1);
      float result = sub_1004182C4(v4, v9);
      a3 = v10 + (float)((float)((float)(0.01 * 9.81) * 0.5) * (float)(v11 + *(float *)result));
      float v6 = v6 + (float)((float)(0.01 * 0.5) * (float)(v10 + a3));
      if (v8 > v6) {
        float v8 = v6;
      }
      if (v7 < v6) {
        float v7 = v6;
      }
      if (a2)
      {
        uint64_t v12 = a2[1];
        unint64_t v13 = *((unsigned int *)a2 + 1);
        uint64_t v14 = *a2;
        if (v14 + v12 >= v13) {
          uint64_t v15 = *((unsigned int *)a2 + 1);
        }
        else {
          uint64_t v15 = 0;
        }
        *(float *)&a2[2 * (v14 + v12 - v15) + 4] = v6;
        if (v13 <= v12)
        {
          if (v14 + 1 < v13) {
            LOWORD(v13) = 0;
          }
          *a2 = v14 + 1 - v13;
        }
        else
        {
          a2[1] = v12 + 1;
        }
      }
      ++v9;
    }
    while (v9 < v4[1]);
  }
  return result;
}

float sub_10128A39C(uint64_t a1)
{
  unint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  sub_10010F834(&v4, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  std::__sort<std::__less<float,float> &,float *>();
  unint64_t v1 = (unint64_t)(v5 - v4) >> 1;
  if (((v5 - v4) & 4) != 0) {
    float v2 = v4[v1];
  }
  else {
    float v2 = (float)(v4[v1 - 1] + v4[v1]) * 0.5;
  }
  int v5 = v4;
  operator delete(v4);
  return v2;
}

void sub_10128A42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_10128A448(uint64_t a1)
{
  float v2 = sub_10073002C(a1, 0);
  float v3 = v2 * sub_10073002C(a1, 0);
  *(float *)sub_1007288D0((uint64_t)&v11, 0, 0) = v3;
  float v4 = sub_10073002C(a1, 0);
  float v5 = v4 * sub_10073002C(a1, 1uLL);
  *(float *)sub_1007288D0((uint64_t)&v11, 0, 1uLL) = v5;
  float v6 = sub_10073002C(a1, 1uLL);
  float v7 = v6 * sub_10073002C(a1, 0);
  *(float *)sub_1007288D0((uint64_t)&v11, 1uLL, 0) = v7;
  float v8 = sub_10073002C(a1, 1uLL);
  float v9 = v8 * sub_10073002C(a1, 1uLL);
  *(float *)sub_1007288D0((uint64_t)&v11, 1uLL, 1uLL) = v9;
  return v11;
}

float *sub_10128A54C(void *a1, float a2, float a3, float a4, float a5)
{
  unint64_t v6 = 0;
  *(float *)int v40 = a2;
  *(float *)&v40[1] = a3;
  float v41 = a4;
  float v42 = a5;
  char v7 = 1;
  *a1 = 0;
  a1[1] = 0;
  do
  {
    char v8 = v7;
    *(_DWORD *)sub_1007288D0((uint64_t)a1, v6, v6) = 1065353216;
    int v9 = *(_DWORD *)sub_1007288D0((uint64_t)v40, v6, v6);
    *(_DWORD *)sub_1007286F4((uint64_t)&v43, v6) = v9;
    int v10 = *(_DWORD *)sub_1007288D0((uint64_t)v40, v6, v6);
    *(_DWORD *)sub_1007286F4((uint64_t)&v39, v6) = v10;
    float result = (float *)sub_1007286F4((uint64_t)&v38, v6);
    char v7 = 0;
    *float result = 0.0;
    unint64_t v6 = 1;
  }
  while ((v8 & 1) != 0);
  unint64_t v12 = 0;
  float v13 = 0.0;
  do
  {
    float v14 = -v41;
    if (v41 >= 0.0) {
      float v14 = v41;
    }
    if ((float)(v14 + 0.0) == 0.0) {
      break;
    }
    if (v12 < 3) {
      float v13 = (float)((float)(v14 + 0.0) * 0.2) * 0.25;
    }
    float v15 = v14 * 100.0;
    if (v12 < 4) {
      goto LABEL_38;
    }
    float v16 = v43.f32[0];
    float v17 = v15 + v43.f32[0];
    if ((float)(v15 + v43.f32[0]) < 0.0) {
      float v17 = -(float)(v15 + v43.f32[0]);
    }
    if (v43.f32[0] < 0.0) {
      float v16 = -v43.f32[0];
    }
    if (v17 != v16) {
      goto LABEL_38;
    }
    float v18 = v43.f32[1];
    float v19 = v15 + v43.f32[1];
    if ((float)(v15 + v43.f32[1]) < 0.0) {
      float v19 = -(float)(v15 + v43.f32[1]);
    }
    if (v43.f32[1] < 0.0) {
      float v18 = -v43.f32[1];
    }
    if (v19 == v18)
    {
      float v41 = 0.0;
    }
    else
    {
LABEL_38:
      if (v14 > v13)
      {
        unint64_t v20 = 0;
        float v21 = v43.f32[1] - v43.f32[0];
        float v22 = v15 + (float)(v43.f32[1] - v43.f32[0]);
        if (v22 < 0.0) {
          float v22 = -v22;
        }
        float v23 = -v21;
        if (v21 >= 0.0) {
          float v23 = v43.f32[1] - v43.f32[0];
        }
        float v24 = (float)(v21 * 0.5) / v41;
        float v25 = -v24;
        BOOL v26 = v24 < 0.0;
        if (v24 >= 0.0) {
          float v25 = (float)(v21 * 0.5) / v41;
        }
        float v27 = 1.0 / (float)(v25 + sqrtf((float)(v24 * v24) + 1.0));
        if (v26) {
          float v27 = -v27;
        }
        float v28 = v41 / v21;
        if (v22 == v23) {
          float v29 = v28;
        }
        else {
          float v29 = v27;
        }
        float v30 = 1.0 / sqrtf((float)(v29 * v29) + 1.0);
        float v31 = v29 * v30;
        float v32 = (float)(v29 * v30) / (float)(v30 + 1.0);
        v38.f32[0] = v38.f32[0] - (float)(v41 * v29);
        v38.f32[1] = (float)(v41 * v29) + v38.f32[1];
        v43.f32[0] = v43.f32[0] - (float)(v41 * v29);
        v43.f32[1] = v43.f32[1] + (float)(v41 * v29);
        float v41 = 0.0;
        float v33 = -(float)(v29 * v30);
        char v34 = 1;
        do
        {
          char v35 = v34;
          float v36 = *(float *)sub_1007288D0((uint64_t)a1, v20, 0);
          float v37 = *(float *)sub_1007288D0((uint64_t)a1, v20, 1uLL);
          *(float *)sub_1007288D0((uint64_t)a1, v20, 0) = v36 + (float)(v33 * (float)(v37 + (float)(v36 * v32)));
          float result = (float *)sub_1007288D0((uint64_t)a1, v20, 1uLL);
          char v34 = 0;
          *float result = v37 + (float)(v31 * (float)(v36 - (float)(v37 * v32)));
          unint64_t v20 = 1;
        }
        while ((v35 & 1) != 0);
      }
    }
    ++v12;
    float32x2_t v39 = vadd_f32(v38, v39);
    float32x2_t v43 = v39;
    float32x2_t v38 = 0;
    float v13 = 0.0;
  }
  while (v12 != 10);
  return result;
}

void sub_10128A838()
{
  dword_102486A08 = sub_100D6AA2C(50, 0x80uLL);
}

uint64_t sub_10128A860(uint64_t a1, void *a2)
{
  *sub_10103F874(a1, a2) = &off_10231B238;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231B320);
  }
  float v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "PAUSE: Autopause not suppored on this platform, constructing CLAutopauseProviderDummy", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231B320);
    }
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAutopauseProviderDummy::CLAutopauseProviderDummy(id<CLIntersiloUniverse>)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return a1;
}

void sub_10128AA18(_Unwind_Exception *a1)
{
  sub_10103F960(v1);
  _Unwind_Resume(a1);
}

void sub_10128AA38(uint64_t a1)
{
  sub_10103F960(a1);

  operator delete();
}

uint64_t sub_10128AA70(uint64_t a1, uint64_t a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231B320);
  }
  float v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 160))(__p, a1, a2);
    float v5 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PAUSE: Client registered for %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231B320);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 160))(buf, a1, a2);
    if (v10 >= 0) {
      char v7 = buf;
    }
    else {
      char v7 = *(unsigned char **)buf;
    }
    int v11 = 136315138;
    unint64_t v12 = v7;
    char v8 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLAutopauseProviderDummy::registerForNotificationInternal(const CLAutopauseProvider_Type::Notification &)", "%s\n", v8);
    if (v8 != (char *)__p) {
      free(v8);
    }
  }
  return 1;
}

uint64_t sub_10128ACDC(uint64_t a1, uint64_t a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231B320);
  }
  float v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 160))(__p, a1, a2);
    float v5 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PAUSE: Client unregistered for %s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231B320);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 160))(buf, a1, a2);
    if (v10 >= 0) {
      char v7 = buf;
    }
    else {
      char v7 = *(unsigned char **)buf;
    }
    int v11 = 136315138;
    unint64_t v12 = v7;
    char v8 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLAutopauseProviderDummy::unregisterForNotificationInternal(const CLAutopauseProvider_Type::Notification &)", "%s\n", v8);
    if (v8 != (char *)__p) {
      free(v8);
    }
  }
  return 1;
}

void sub_10128AF48(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10128AF78()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DAFCAC;
      v0[3] = unk_101DAFCBC;
      v0[4] = xmmword_101DAFCCC;
      v0[0] = xmmword_101DAFC8C;
      v0[1] = unk_101DAFC9C;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10128B058(_Unwind_Exception *a1)
{
}

uint64_t sub_10128B070(uint64_t result)
{
  uint64_t v1 = 0;
  *(_OWORD *)float result = xmmword_101DAFD50;
  *(_OWORD *)(result + 16) = unk_101DAFD60;
  *(_OWORD *)(result + 32) = xmmword_101DAFD70;
  *(_OWORD *)(result + 48) = xmmword_101DAFD20;
  *(_OWORD *)(result + 64) = unk_101DAFD30;
  *(_OWORD *)(result + 80) = xmmword_101DAFD40;
  __asm { FMOV            V4.2D, #1.0 }
  *(_OWORD *)(result + 96) = xmmword_101DAFD00;
  *(_OWORD *)(result + 112) = _Q4;
  uint64_t v7 = result + 128;
  *(_OWORD *)(result + 128) = xmmword_101DAFD50;
  *(_OWORD *)(result + 144) = unk_101DAFD60;
  *(_OWORD *)(result + 192) = xmmword_101DAFD90;
  *(_OWORD *)(result + 208) = unk_101DAFDA0;
  *(_OWORD *)(result + 160) = xmmword_101DAFD70;
  *(_OWORD *)(result + 176) = xmmword_101DAFD80;
  *(_OWORD *)(result + 224) = xmmword_101DAFD10;
  *(_OWORD *)(result + 240) = _Q4;
  *(_DWORD *)(result + 288) = 0;
  *(void *)(result + 256) = result + 128;
  *(void *)(result + 264) = 0;
  *(void *)(result + 272) = 0;
  *(void *)(result + 280) = 0;
  *(void *)(result + 296) = result + 128;
  *(void *)(result + 304) = 0;
  *(_DWORD *)(result + 328) = 0;
  *(void *)(result + 312) = 0;
  *(void *)(result + 320) = 0;
  *(void *)(result + 336) = result + 128;
  *(void *)(result + 344) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(void *)(result + 352) = 0;
  *(void *)(result + 360) = 0;
  do
  {
    uint64_t v8 = result + v1;
    *(void *)(v8 + 376) = off_1022C3DA0;
    int v9 = (_OWORD *)(result + v1 + 392);
    *int v9 = 0uLL;
    v9[1] = 0uLL;
    v9[2] = 0uLL;
    *(void *)(v8 + 448) = 0;
    *(void *)(v8 + 456) = 0;
    *(void *)(v8 + 440) = result + v1 + 448;
    *(_DWORD *)(v8 + 384) = 0;
    v1 += 88;
  }
  while (v1 != 264);
  uint64_t v10 = 0;
  *(void *)(result + 640) = result;
  *(void *)(result + 648) = 0;
  *(void *)(result + 664) = 0;
  *(void *)(result + 656) = 0;
  *(_DWORD *)(result + 672) = 0;
  *(void *)(result + 680) = result;
  *(void *)(result + 688) = 0;
  *(void *)(result + 704) = 0;
  *(void *)(result + 696) = 0;
  *(_DWORD *)(result + 712) = 0;
  *(void *)(result + 720) = result;
  *(void *)(result + 728) = 0;
  *(void *)(result + 744) = 0;
  *(void *)(result + 736) = 0;
  *(_DWORD *)(result + 752) = 0;
  *(void *)(result + 760) = v7;
  *(void *)(result + 776) = 0;
  *(void *)(result + 768) = 0;
  *(_DWORD *)(result + 792) = 0;
  *(void *)(result + 784) = 0;
  *(void *)(result + 800) = v7;
  *(void *)(result + 816) = 0;
  *(void *)(result + 808) = 0;
  *(_DWORD *)(result + 832) = 0;
  *(void *)(result + 824) = 0;
  *(void *)(result + 840) = result;
  *(void *)(result + 856) = 0;
  *(void *)(result + 848) = 0;
  *(_DWORD *)(result + 872) = 0;
  *(void *)(result + 864) = 0;
  *(void *)(result + 880) = result;
  *(void *)(result + 896) = 0;
  *(void *)(result + 888) = 0;
  *(_DWORD *)(result + 912) = 0;
  *(void *)(result + 904) = 0;
  do
  {
    uint64_t v11 = result + v10;
    *(void *)(v11 + 920) = off_1022C3DA0;
    unint64_t v12 = (_OWORD *)(result + v10 + 936);
    _OWORD *v12 = 0uLL;
    v12[1] = 0uLL;
    _DWORD v12[2] = 0uLL;
    *(_OWORD *)(v11 + 992) = 0uLL;
    *(void *)(v11 + 984) = result + v10 + 992;
    *(_DWORD *)(v11 + 928) = 0;
    v10 += 88;
  }
  while (v10 != 176);
  uint64_t v13 = 0;
  *(void *)(result + 1096) = v7;
  *(void *)(result + 1104) = 0;
  *(void *)(result + 1120) = 0;
  *(void *)(result + 1112) = 0;
  *(_DWORD *)(result + 1128) = 0;
  *(void *)(result + 1136) = v7;
  *(void *)(result + 1144) = 0;
  *(void *)(result + 1160) = 0;
  *(void *)(result + 1152) = 0;
  *(_DWORD *)(result + 1168) = 0;
  *(void *)(result + 1176) = result;
  *(void *)(result + 1184) = 0;
  *(void *)(result + 1200) = 0;
  *(void *)(result + 1192) = 0;
  *(_DWORD *)(result + 1208) = 0;
  *(void *)(result + 1216) = result;
  *(void *)(result + 1232) = 0;
  *(void *)(result + 1224) = 0;
  *(_DWORD *)(result + 1248) = 0;
  *(void *)(result + 1240) = 0;
  do
  {
    uint64_t v14 = result + v13;
    *(void *)(v14 + 1256) = off_1022C3DA0;
    float v15 = (_OWORD *)(result + v13 + 1272);
    *float v15 = 0uLL;
    v15[1] = 0uLL;
    void v15[2] = 0uLL;
    *(_OWORD *)(v14 + 1328) = 0uLL;
    *(void *)(v14 + 1320) = result + v13 + 1328;
    *(_DWORD *)(v14 + 1264) = 0;
    v13 += 88;
  }
  while (v13 != 176);
  *(void *)(result + 1432) = 0;
  *(void *)(result + 1440) = 0x80000000800000;
  *(_DWORD *)(result + 1448) = -8388609;
  *(unsigned char *)(result + 1452) = 1;
  *(void *)(result + 1472) = 0;
  *(void *)(result + 1464) = 0;
  *(void *)(result + 1480) = 0xA00000000;
  *(void *)(result + 1528) = 0x500000000;
  *(void *)(result + 1596) = 0x500000000;
  *(void *)(result + 1644) = 0x500000000;
  *(void *)(result + 1692) = 0;
  *(_DWORD *)(result + 1700) = 0;
  *(unsigned char *)(result + 1704) = 1;
  *(void *)(result + 1716) = 0;
  *(void *)(result + 1724) = 0;
  *(void *)(result + 1732) = 0xA00000000;
  *(void *)(result + 1780) = 0;
  *(_DWORD *)(result + 1788) = 0;
  *(unsigned char *)(result + 1792) = 1;
  *(void *)(result + 1820) = 0xA00000000;
  uint64_t v16 = 928;
  *(void *)(result + 1804) = 0;
  *(void *)(result + 1812) = 0;
  do
  {
    *(_DWORD *)(result + v16) = 10;
    v16 += 88;
  }
  while (v16 != 1104);
  for (uint64_t i = 1264; i != 1440; i += 88)
    *(_DWORD *)(result + i) = 10;
  for (uint64_t j = 384; j != 648; j += 88)
    *(_DWORD *)(result + j) = 10;
  return result;
}

uint64_t sub_10128B3C0(uint64_t a1, float *a2, uint64_t a3)
{
  uint64_t result = sub_10128B668(a1, a2, (uint64_t)v35, &v37, &v36);
  if (result)
  {
    uint64_t result = sub_10128BB24(a1, (float *)&v37, (float *)&v36, v35);
    if (result)
    {
      uint64_t v6 = a1 + 1740;
      uint64_t v7 = *(unsigned __int16 *)(a1 + 1732);
      unint64_t v8 = *(unsigned __int16 *)(a1 + 1734);
      unint64_t v9 = v7 + v8 - 1;
      unint64_t v10 = *(unsigned int *)(a1 + 1736);
      if (v9 < v10) {
        unint64_t v10 = 0;
      }
      float v11 = *(float *)(v6 + 4 * (v9 - v10));
      float v12 = *(float *)(v6 + 4 * v7);
      uint64_t v13 = a1 + 1828;
      uint64_t v14 = *(unsigned __int16 *)(a1 + 1820);
      uint64_t v15 = *(unsigned __int16 *)(a1 + 1822);
      unint64_t v16 = v14 + v15 - 1;
      unint64_t v17 = *(unsigned int *)(a1 + 1824);
      if (v16 < v17) {
        unint64_t v17 = 0;
      }
      float v18 = *(float *)(v13 + 4 * (v16 - v17));
      float v19 = *(float *)(v13 + 4 * v14);
      float v20 = 0.0;
      float v21 = 0.0;
      if (v8 >= 2)
      {
        unint64_t v22 = 1;
        do
        {
          float v23 = *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 1732), v22);
          float v21 = v21 + vabds_f32(v23, *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 1732), v22++ - 1));
        }
        while (v22 < *(unsigned __int16 *)(a1 + 1734));
        LODWORD(v15) = *(unsigned __int16 *)(a1 + 1822);
      }
      if (v15 >= 2)
      {
        float v20 = 0.0;
        unint64_t v24 = 1;
        do
        {
          float v25 = *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 1820), v24);
          float v20 = v20 + vabds_f32(v25, *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 1820), v24++ - 1));
        }
        while (v24 < *(unsigned __int16 *)(a1 + 1822));
      }
      float v26 = vabds_f32(v11, v12);
      if (*(unsigned char *)(a1 + 1704)) {
        sub_10128C0E8(a1 + 1704);
      }
      float v27 = *(float *)(a1 + 1712);
      float v28 = 0.0;
      if (v27 < 0.0) {
        float v27 = 0.0;
      }
      *(float *)(a3 + 8) = sqrtf(v27);
      float v29 = vabds_f32(v18, v19);
      *(float *)(a3 + 16) = v26;
      *(float *)(a3 + 20) = v21;
      *(_DWORD *)(a3 + 12) = *(_DWORD *)sub_1004182C4((unsigned __int16 *)(a1 + 1732), 5uLL);
      uint64_t v30 = a1 + 1596 + 8 * *(unsigned __int16 *)(a1 + 1596);
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v30 + 8);
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(v30 + 12);
      if (*(unsigned char *)(a1 + 1792)) {
        sub_10128C0E8(a1 + 1792);
      }
      float v31 = *(float *)(a1 + 1800);
      if (v31 < 0.0) {
        float v31 = 0.0;
      }
      *(float *)(a3 + 32) = sqrtf(v31);
      *(float *)(a3 + 40) = v29;
      *(float *)(a3 + 44) = v20;
      *(_DWORD *)(a3 + 36) = *(_DWORD *)sub_1004182C4((unsigned __int16 *)(a1 + 1820), 5uLL);
      uint64_t v32 = a1 + 1644 + 8 * *(unsigned __int16 *)(a1 + 1644);
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(v32 + 8);
      *(_DWORD *)(a3 + 52) = *(_DWORD *)(v32 + 12);
      unint64_t v33 = 0;
      *(CFAbsoluteTime *)a3 = CFAbsoluteTimeGetCurrent() + -10.0;
      do
        float v28 = v28 + *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 1480), v33++);
      while (v33 != 10);
      *(float *)(a3 + 56) = v28;
      char v34 = (_DWORD *)(a1 + 1528 + 12 * *(unsigned __int16 *)(a1 + 1528));
      *(_DWORD *)(a3 + 60) = v34[2];
      *(_DWORD *)(a3 + 64) = v34[3];
      *(_DWORD *)(a3 + 68) = v34[4];
      return 1;
    }
  }
  return result;
}

uint64_t sub_10128B668(uint64_t a1, float *a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  sub_100B9BD60(a2, v54);
  unint64_t v53 = __PAIR64__(LODWORD(v54[3]), LODWORD(v54[0]));
  unint64_t v52 = __PAIR64__(LODWORD(v54[5]), LODWORD(v54[2]));
  LODWORD(v50) = sub_100B9BC00(a2);
  HIDWORD(v50) = v10;
  int v51 = v11;
  float v12 = (float *)sub_1007286F4((uint64_t)&v53, 0);
  float v13 = sub_100B2DAFC((void *)(a1 + 840), 0, *v12);
  *(float *)(a1 + 848) = v13;
  *(float *)(a1 + 848) = sub_100B2DAFC((void *)(a1 + 840), 1, v13);
  uint64_t v14 = (float *)sub_1007286F4((uint64_t)&v53, 1uLL);
  float v15 = sub_100B2DAFC((void *)(a1 + 880), 0, *v14);
  *(float *)(a1 + 888) = v15;
  *(float *)(a1 + 888) = sub_100B2DAFC((void *)(a1 + 880), 1, v15);
  unint64_t v16 = (float *)sub_1007286F4((uint64_t)&v52, 0);
  float v17 = sub_100B2DAFC((void *)(a1 + 1176), 0, *v16);
  *(float *)(a1 + 1184) = v17;
  *(float *)(a1 + 1184) = sub_100B2DAFC((void *)(a1 + 1176), 1, v17);
  float v18 = (float *)sub_1007286F4((uint64_t)&v52, 1uLL);
  float v19 = sub_100B2DAFC((void *)(a1 + 1216), 0, *v18);
  *(float *)(a1 + 1224) = v19;
  unint64_t v20 = 0;
  *(float *)(a1 + 1224) = sub_100B2DAFC((void *)(a1 + 1216), 1, v19);
  uint64_t v21 = a1 + 640;
  do
  {
    unint64_t v22 = (float *)sub_1004E4930((uint64_t)&v50, v20);
    float v23 = sub_100B2DAFC((void *)v21, 0, *v22);
    *(float *)(v21 + 8) = v23;
    *(float *)(v21 + 8) = sub_100B2DAFC((void *)v21, 1, v23);
    ++v20;
    v21 += 40;
  }
  while (v20 != 3);
  int v24 = *(_DWORD *)(a1 + 1432);
  *(_DWORD *)(a1 + 1432) = v24 + 1;
  if (v24 <= 9) {
    return 0;
  }
  *(_DWORD *)(a1 + 1432) = 0;
  float v25 = sub_100B2DAFC((void *)(a1 + 760), 0, *(float *)(a1 + 848));
  *(float *)(a1 + 768) = v25;
  *(float *)(a1 + 768) = sub_100B2DAFC((void *)(a1 + 760), 1, v25);
  float v26 = sub_100B2DAFC((void *)(a1 + 800), 0, *(float *)(a1 + 888));
  *(float *)(a1 + 808) = v26;
  *(float *)(a1 + 808) = sub_100B2DAFC((void *)(a1 + 800), 1, v26);
  float v27 = sub_100B2DAFC((void *)(a1 + 1096), 0, *(float *)(a1 + 1184));
  *(float *)(a1 + 1104) = v27;
  *(float *)(a1 + 1104) = sub_100B2DAFC((void *)(a1 + 1096), 1, v27);
  float v28 = sub_100B2DAFC((void *)(a1 + 1136), 0, *(float *)(a1 + 1224));
  *(float *)(a1 + 1144) = v28;
  *(float *)(a1 + 1144) = sub_100B2DAFC((void *)(a1 + 1136), 1, v28);
  for (uint64_t i = 264; i != 384; i += 40)
  {
    uint64_t v30 = (float *)(a1 + i);
    float v31 = sub_100B2DAFC((void *)(a1 + i - 8), 0, *(float *)(a1 + i + 384));
    *uint64_t v30 = v31;
    *uint64_t v30 = sub_100B2DAFC((void *)(a1 + i - 8), 1, v31);
  }
  int v32 = *(_DWORD *)(a1 + 1436);
  *(_DWORD *)(a1 + 1436) = v32 + 1;
  if (v32 <= 9) {
    return 0;
  }
  uint64_t v33 = 0;
  *(_DWORD *)(a1 + 1436) = 0;
  char v34 = 1;
  do
  {
    char v35 = v34;
    int v49 = *(_DWORD *)(a1 + 760 + 40 * v33 + 8);
    (*(void (**)(uint64_t, int *))(*(void *)(a1 + 920 + 88 * v33) + 24))(a1 + 920 + 88 * v33, &v49);
    char v34 = 0;
    uint64_t v33 = 1;
  }
  while ((v35 & 1) != 0);
  uint64_t v36 = 0;
  char v37 = 1;
  do
  {
    char v38 = v37;
    int v49 = *(_DWORD *)(a1 + 1096 + 40 * v36 + 8);
    (*(void (**)(uint64_t, int *))(*(void *)(a1 + 1256 + 88 * v36) + 24))(a1 + 1256 + 88 * v36, &v49);
    char v37 = 0;
    uint64_t v36 = 1;
  }
  while ((v38 & 1) != 0);
  float32x2_t v39 = (void *)(a1 + 376);
  uint64_t v40 = 264;
  uint64_t v41 = 376;
  do
  {
    int v49 = *(_DWORD *)(a1 + v40);
    (*(void (**)(uint64_t, int *))(*(void *)(a1 + v41) + 24))(a1 + v41, &v49);
    v40 += 40;
    v41 += 88;
  }
  while (v40 != 384);
  if (*(void *)(a1 + 1000) != *(_DWORD *)(a1 + 928)) {
    return 0;
  }
  float v42 = (_DWORD *)sub_1007286F4((uint64_t)&v53, 0);
  sub_100A6E134((void *)(a1 + 920), 2, v42);
  float32x2_t v43 = (_DWORD *)sub_1007286F4((uint64_t)&v53, 1uLL);
  sub_100A6E134((void *)(a1 + 1008), 2, v43);
  float v44 = (_DWORD *)sub_1007286F4((uint64_t)&v52, 0);
  sub_100A6E134((void *)(a1 + 1256), 2, v44);
  float v45 = (_DWORD *)sub_1007286F4((uint64_t)&v52, 1uLL);
  sub_100A6E134((void *)(a1 + 1344), 2, v45);
  for (unint64_t j = 0; j != 3; ++j)
  {
    float v47 = (_DWORD *)sub_1004E4930((uint64_t)&v50, j);
    sub_100A6E134(v39, 2, v47);
    v39 += 11;
  }
  *(void *)a3 = v50;
  *(_DWORD *)(a3 + 8) = v51;
  *a4 = v53;
  *a5 = v52;
  sub_100659A48((unsigned __int16 *)(a1 + 1528), a3);
  sub_10128BFCC((unsigned __int16 *)(a1 + 1596), a4);
  sub_10128BFCC((unsigned __int16 *)(a1 + 1644), a5);
  return 1;
}

BOOL sub_10128BB24(uint64_t a1, float *a2, float *a3, float *a4)
{
  uint64_t v8 = 0;
  float v10 = *a4;
  float v9 = a4[1];
  float v11 = a4[2];
  *(float *)std::string buf = *a4;
  unint64_t v71 = __PAIR64__(LODWORD(v11), LODWORD(v9));
  float v12 = 0.0;
  do
  {
    float v12 = v12 + (float)(*(float *)&buf[v8] * *(float *)&buf[v8]);
    v8 += 4;
  }
  while (v8 != 12);
  if (sqrtf(v12) > 0.00000011921)
  {
    uint64_t v13 = 0;
    float v14 = 0.0;
    do
    {
      float v14 = v14 + (float)(*(float *)&buf[v13] * *(float *)&buf[v13]);
      v13 += 4;
    }
    while (v13 != 12);
    float v15 = sqrtf(v14);
    float v10 = v10 / v15;
    float v9 = v9 / v15;
    float v11 = v11 / v15;
  }
  float v16 = *a2;
  float v17 = a2[1];
  float v18 = sqrtf((float)(v16 * v16) + (float)(v17 * v17));
  if (v18 > 0.00000011921)
  {
    float v16 = v16 / v18;
    float v17 = v17 / v18;
  }
  float v19 = *a3;
  float v20 = a3[1];
  float v21 = sqrtf((float)(v19 * v19) + (float)(v20 * v20));
  if (v21 > 0.00000011921)
  {
    float v19 = v19 / v21;
    float v20 = v20 / v21;
  }
  float v22 = *(float *)(a1 + 1440);
  if (v22 == -3.4028e38)
  {
    BOOL result = 0;
    *(float *)(a1 + 1440) = v10;
    *(float *)(a1 + 1444) = v9;
    *(float *)(a1 + 1448) = v11;
  }
  else
  {
    v50[0] = acosf(fmaxf(fminf((float)((float)(v11 * *(float *)(a1 + 1448)) + (float)(*(float *)(a1 + 1444) * v9))+ (float)(v22 * v10), 1.0), -1.0));
    sub_100B2DA24(a1 + 1452, v50);
    *(float *)(a1 + 1440) = v10;
    *(float *)(a1 + 1444) = v9;
    *(float *)(a1 + 1448) = v11;
    int v24 = (float *)(a1 + 1692);
    *(float *)(a1 + 1692) = atan2f(v17, v16);
    float v25 = (float *)(a1 + 1780);
    *(float *)(a1 + 1780) = atan2f(v20, v19);
    float v27 = sub_10128C02C(v26, a1 + 1692);
    sub_10128C02C((uint64_t)v27, a1 + 1780);
    unint64_t v28 = 0;
    float v29 = 0.0;
    do
      float v29 = v29 + *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 1480), v28++);
    while (v28 != 10);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231B340);
    }
    uint64_t v30 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(double *)&unint64_t v31 = *v24;
      double v32 = *v25;
      double v33 = *a2;
      double v34 = a2[1];
      double v35 = *a3;
      double v36 = a3[1];
      double v37 = *a4;
      double v38 = a4[1];
      double v39 = a4[2];
      *(_DWORD *)std::string buf = 134220288;
      unint64_t v71 = v31;
      __int16 v72 = 2048;
      double v73 = v32;
      __int16 v74 = 2048;
      double v75 = v29;
      __int16 v76 = 2048;
      double v77 = v33;
      __int16 v78 = 2048;
      double v79 = v34;
      __int16 v80 = 2048;
      double v81 = v35;
      __int16 v82 = 2048;
      double v83 = v36;
      __int16 v84 = 2048;
      double v85 = v37;
      __int16 v86 = 2048;
      double v87 = v38;
      __int16 v88 = 2048;
      double v89 = v39;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "headingCrown,%f,headingFace,%f,bodySum,%f,cx,%f,cy,%f,fx,%f,fy,%f,gx,%f,gy,%f,gz,%f", buf, 0x66u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231B340);
      }
      double v40 = *v24;
      double v41 = *v25;
      double v42 = *a2;
      double v43 = a2[1];
      double v44 = *a3;
      double v45 = a3[1];
      double v46 = *a4;
      double v47 = a4[1];
      double v48 = a4[2];
      v50[1] = 3.853e-34;
      double v51 = v40;
      __int16 v52 = 2048;
      double v53 = v41;
      __int16 v54 = 2048;
      double v55 = v29;
      __int16 v56 = 2048;
      double v57 = v42;
      __int16 v58 = 2048;
      double v59 = v43;
      __int16 v60 = 2048;
      double v61 = v44;
      __int16 v62 = 2048;
      double v63 = v45;
      __int16 v64 = 2048;
      double v65 = v46;
      __int16 v66 = 2048;
      double v67 = v47;
      __int16 v68 = 2048;
      double v69 = v48;
      int v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTurnDetector::accumulateAngleDeltas(const CMVector<float, 2> &, const CMVector<float, 2> &, const CMVector<float, 3> &)", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
    return *(_DWORD *)(a1 + 1736) == *(unsigned __int16 *)(a1 + 1734);
  }
  return result;
}

unsigned __int16 *sub_10128BFCC(unsigned __int16 *result, void *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  *(void *)&result[4 * (v3 - v2) + 4] = *a2;
  unsigned int v4 = result[1];
  unint64_t v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    unint64_t v6 = *result + 1;
    if (v6 < v5) {
      LOWORD(v5) = 0;
    }
    *BOOL result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

unsigned __int16 *sub_10128C02C(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a2;
  float v3 = *(float *)(a2 + 4);
  float v8 = v3;
  if (*(unsigned __int16 *)(a2 + 42) >= 2u)
  {
    if (vabds_f32(v2, v3) <= 3.1416)
    {
      int v5 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      int v4 = *(_DWORD *)(a2 + 8);
      if (v2 < v3) {
        int v5 = v4 + 1;
      }
      else {
        int v5 = v4 - 1;
      }
      *(_DWORD *)(a2 + 8) = v5;
    }
    float v6 = v2 + (double)v5 * 6.28318531;
    float v8 = v6;
  }
  *(float *)(a2 + 4) = v2;
  return sub_100B2DA24(a2 + 12, &v8);
}

void sub_10128C0B8(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_10128C0E8(uint64_t result)
{
  unsigned int v1 = *(unsigned __int16 *)(result + 30);
  if (v1 > 1)
  {
    float v4 = *(float *)(result + 12);
    float v2 = v4 / (float)v1;
    float v3 = (float)(*(float *)(result + 20) - (float)(v4 * v2)) / (float)v1;
  }
  else
  {
    float v2 = *(float *)(result + 12);
    float v3 = 0.0;
  }
  *(float *)(result + 4) = v2;
  *(float *)(result + 8) = v3;
  *(unsigned char *)BOOL result = 0;
  return result;
}

uint64_t sub_10128C124(uint64_t a1, uint64_t a2)
{
  sub_1000A699C(a2, "maximumTimeOffsetThreshold", (void *)(a1 + 8));
  sub_1000A699C(a2, "maximumTimeOffsetThresholdNotMoving", (void *)(a1 + 16));
  sub_1000A699C(a2, "maximumWaitTimeForActiveBestLocationRequest", (void *)(a1 + 24));
  sub_1000A699C(a2, "maximumWaitTimeForActiveFineLocationRequest", (void *)(a1 + 32));
  sub_1004D0870(a2, "maximumNumberOfAdvertisementsInCache", (_DWORD *)(a1 + 40));
  sub_1004D0870(a2, "maximumBestRequestsPerDay", (_DWORD *)(a1 + 44));
  sub_1004D0870(a2, "maximumFineRequestsPerDay", (_DWORD *)(a1 + 48));
  sub_1000A699C(a2, "analyticsHoldoffInterval", (void *)(a1 + 56));
  sub_1000D2988(a2, "crossValidationEnabled", (BOOL *)(a1 + 64));
  sub_1004D0870(a2, "maximumCrossvalidationRequests", (_DWORD *)(a1 + 68));
  sub_1000A699C(a2, "crossValidationRequestLimitShortResetInterval", (void *)(a1 + 72));
  sub_1000A699C(a2, "crossValidationRequestLimitLongResetInterval", (void *)(a1 + 80));
  sub_1000A699C(a2, "crossValidationDurationInterval", (void *)(a1 + 88));
  sub_1000A699C(a2, "crossValidationQueryBAInterval", (void *)(a1 + 96));
  sub_1000A699C(a2, "crossValidationFinalQueryInterval", (void *)(a1 + 104));
  sub_1000D2988(a2, "crossValidationAllowedToRunWithoutVisit", (BOOL *)(a1 + 112));
  sub_1000A699C(a2, "crossValidationRequestInterval", (void *)(a1 + 120));
  sub_1000A699C(a2, "enabledAnalyticsHoldoffInterval", (void *)(a1 + 128));
  sub_1004D0870(a2, "maximumDataCollectionRequests", (_DWORD *)(a1 + 136));
  sub_1000A699C(a2, "dataCollectionRequestResetInterval", (void *)(a1 + 144));
  sub_1000A699C(a2, "dataCollectionRequestInterval", (void *)(a1 + 144));
  sub_1000A699C(a2, "dataCollectionRequestWaitInterval", (void *)(a1 + 160));
  sub_1000A699C(a2, "activityBasedSpeedDriving", (void *)(a1 + 168));
  sub_1000A699C(a2, "activityBasedSpeedCycling", (void *)(a1 + 176));
  sub_1000A699C(a2, "activityBasedSpeedRunning", (void *)(a1 + 184));
  sub_1000A699C(a2, "activityBasedSpeedWalking", (void *)(a1 + 192));

  return sub_1000A699C(a2, "saveBeaconPayloadCacheInterval", (void *)(a1 + 200));
}

void sub_10128C3E8(uint64_t a1)
{
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerMaximumTimeOffsetThreshold", (void *)(a1 + 8));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerMaximumTimeOffsetThresholdNotMoving", (void *)(a1 + 16));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerMaximumWaitTimeForActiveBestLocationRequest", (void *)(a1 + 24));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerMaximumWaitTimeForActiveFineLocationRequest", (void *)(a1 + 32));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1004D0870(v2, "HarvestAvengerMaximumNumberOfAdvertisementsInCache", (_DWORD *)(a1 + 40));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1004D0870(v2, "HarvestAvengerMaximumBestRequestsPerDay", (_DWORD *)(a1 + 44));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1004D0870(v2, "HarvestAvengerMaximumFineRequestsPerDay", (_DWORD *)(a1 + 48));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerAnalyticsHoldoffInterval", (void *)(a1 + 56));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000D2988(v2, "HarvestAvengerCrossValidationEnabled", (BOOL *)(a1 + 64));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1004D0870(v2, "HarvestAvengerMaximumCrossvalidationRequests", (_DWORD *)(a1 + 68));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerCrossValidationRequestLimitShortResetInterval", (void *)(a1 + 72));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerCrossValidationRequestLimitLongResetInterval", (void *)(a1 + 80));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerCrossValidationDurationInterval", (void *)(a1 + 88));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerCrossValidationQueryBAInterval", (void *)(a1 + 96));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerCrossValidationFinalQueryInterval", (void *)(a1 + 104));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000D2988(v2, "HarvestAvengerCrossValidationAllowedToRunWithoutVisit", (BOOL *)(a1 + 112));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerCrossValidationRequestInterval", (void *)(a1 + 120));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerEnabledAnalyticsHoldoffInterval", (void *)(a1 + 128));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1004D0870(v2, "HarvestAvengerMaximumDataCollectionRequests", (_DWORD *)(a1 + 136));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerDataCollectionRequestResetInterval", (void *)(a1 + 144));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerDataCollectionRequestInterval", (void *)(a1 + 152));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerDataCollectionRequestWaitInterval", (void *)(a1 + 160));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerActivityBasedSpeedDriving", (void *)(a1 + 168));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerActivityBasedSpeedCycling", (void *)(a1 + 176));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerActivityBasedSpeedRunning", (void *)(a1 + 184));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerActivityBasedSpeedWalking", (void *)(a1 + 192));
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(&v2);
  sub_1000A699C(v2, "HarvestAvengerSaveBeaconPayloadCacheInterval", (void *)(a1 + 200));
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10128C8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10128C934()
{
}

double sub_10128C948(uint64_t a1)
{
  sub_100103240();
  if (sub_10073B56C() && (sub_100103240(), sub_10073B56C() != 2)) {
    uint64_t v2 = a1 + 80;
  }
  else {
    uint64_t v2 = a1 + 72;
  }
  return *(double *)v2;
}

double sub_10128C994(uint64_t a1)
{
  return *(double *)(a1 + 88);
}

uint64_t sub_10128C99C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

double sub_10128C9A4(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

double sub_10128C9AC(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

uint64_t sub_10128C9B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

double sub_10128C9BC(uint64_t a1)
{
  return *(double *)(a1 + 144);
}

double sub_10128C9C4(uint64_t a1)
{
  return *(double *)(a1 + 152);
}

double sub_10128C9CC(uint64_t a1)
{
  return *(double *)(a1 + 168);
}

double sub_10128C9D4(uint64_t a1)
{
  return *(double *)(a1 + 176);
}

double sub_10128C9DC(uint64_t a1)
{
  return *(double *)(a1 + 184);
}

double sub_10128C9E4(uint64_t a1)
{
  return *(double *)(a1 + 192);
}

double sub_10128C9EC(uint64_t a1)
{
  return *(double *)(a1 + 200);
}

double sub_10128C9F4(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double sub_10128C9FC(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

double sub_10128CA04(uint64_t a1)
{
  return *(double *)(a1 + 232);
}

double sub_10128CA0C(uint64_t a1)
{
  return *(double *)(a1 + 240);
}

double sub_10128CA14(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

void sub_10128CDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000DB0A0(v10);
  _Unwind_Resume(a1);
}

void sub_10128CEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000DB0A0(v10);
  _Unwind_Resume(a1);
}

void sub_10128D4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10128D668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, char a13)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10128E254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000DB0A0(v10);
  _Unwind_Resume(a1);
}

void sub_10128E334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000DB0A0(v10);
  _Unwind_Resume(a1);
}

void sub_10128E454(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_10128E484(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231B4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10128E4A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231B4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10128E4F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231B538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10128E518(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231B538;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10128E56C()
{
  sub_100134750(qword_102486A10, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486A10, (void *)&_mh_execute_header);
}

void sub_10128E67C(id a1)
{
  qword_102486A80 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLNatalimetryNotifierSilo"];
}

uint64_t sub_10128E73C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101290C60;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102486AA0 != -1) {
    dispatch_once(&qword_102486AA0, block);
  }
  return qword_10248B3C8;
}

uint64_t sub_10128E994(uint64_t a1, float a2)
{
  uint64_t v11 = CMNatalimeterSetUserPal;
  float v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1], 1, 0);
  v6[1] = 2146435071;
  uint64_t v7 = 0;
  unint64_t v8 = 0xBFF0000000000000;
  uint64_t v9 = 0;
  v10[0] = 0;
  *(void *)((char *)v10 + 5) = 0;
  memset(&v10[2], 0, 24);
  *(float *)float v6 = a2;
  int v5 = 3;
  return (*(uint64_t (**)(uint64_t, int *, _DWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v5, v6, 1, 0xFFFFFFFFLL, 0);
}

void sub_10128EB74(uint64_t a1)
{
}

void sub_10128F3C0(uint64_t a1, char a2)
{
  uint64_t v2 = (unsigned char *)(a1 + 392);
  *(unsigned char *)(a1 + 392) = a2;
  uint64_t v3 = sub_1000A6958();
  sub_1000EA52C(v3, @"ActiveJacksonCalibration", v2);
  uint64_t v4 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v4 + 944))();
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  int v5 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *v2;
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "fActiveVo2maxOverride has been set to %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::setActiveVo2maxOverride(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

id sub_10128F5F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 416)) {
    return &__NSDictionary0__struct;
  }
  uint64_t v1 = *(void *)(a1 + 2752);
  id v2 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:6];
  if (*(unsigned char *)(v1 + 1409))
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 1360);
    uint64_t v4 = +[NSNumber numberWithFloat:v3];
    [v2 setObject:v4 forKeyedSubscript:CMNatalimeterSetUserHeightMeter];
  }
  if (*(unsigned char *)(v1 + 1410))
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 1364);
    int v5 = +[NSNumber numberWithFloat:v3];
    [v2 setObject:v5 forKeyedSubscript:CMNatalimeterSetUserWeightKG];
  }
  if (*(unsigned char *)(v1 + 1408))
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 1372);
    int v6 = +[NSNumber numberWithFloat:v3];
    [v2 setObject:v6 forKeyedSubscript:CMNatalimeterSetUserAgeYr];
  }
  uint64_t v7 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 1356)];
  [v2 setObject:v7 forKeyedSubscript:CMNatalimeterSetUserBiologicalSex];
  unint64_t v8 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 1392)];
  [v2 setObject:v8 forKeyedSubscript:CMNatalimeterSetUserCondition];
  int v9 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 1400)];
  [v2 setObject:v9 forKeyedSubscript:CMNatalimeterSetUserBetaBlockerUse];
  id v10 = [v2 copy];

  return v10;
}

id sub_10128F778(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 416)) {
    return &__NSDictionary0__struct;
  }
  id v2 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:11];
  uint64_t v4 = *(void *)(a1 + 2752);
  if (*(unsigned char *)(v4 + 1409))
  {
    LODWORD(v3) = *(_DWORD *)(v4 + 1360);
    int v5 = +[NSNumber numberWithFloat:v3];
    [v2 setObject:v5 forKeyedSubscript:CMNatalimeterSetUserHeightMeter];
  }
  if (*(unsigned char *)(v4 + 1410))
  {
    LODWORD(v3) = *(_DWORD *)(v4 + 1364);
    int v6 = +[NSNumber numberWithFloat:v3];
    [v2 setObject:v6 forKeyedSubscript:CMNatalimeterSetUserWeightKG];
  }
  if (*(unsigned char *)(v4 + 1408))
  {
    LODWORD(v3) = *(_DWORD *)(v4 + 1372);
    uint64_t v7 = +[NSNumber numberWithFloat:v3];
    [v2 setObject:v7 forKeyedSubscript:CMNatalimeterSetUserAgeYr];
  }
  unint64_t v8 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v4 + 1356)];
  [v2 setObject:v8 forKeyedSubscript:CMNatalimeterSetUserBiologicalSex];
  int v9 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v4 + 1392)];
  [v2 setObject:v9 forKeyedSubscript:CMNatalimeterSetUserCondition];
  id v10 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v4 + 1400)];
  [v2 setObject:v10 forKeyedSubscript:CMNatalimeterSetUserBetaBlockerUse];
  LODWORD(v11) = *(_DWORD *)(v4 + 1376);
  float v12 = +[NSNumber numberWithFloat:v11];
  [v2 setObject:v12 forKeyedSubscript:CMNatalimeterSetUserHrmin];
  LODWORD(v13) = *(_DWORD *)(v4 + 1384);
  float v14 = +[NSNumber numberWithFloat:v13];
  [v2 setObject:v14 forKeyedSubscript:CMNatalimeterSetUserHronset];
  LODWORD(v15) = *(_DWORD *)(v4 + 1368);
  float v16 = +[NSNumber numberWithFloat:v15];
  [v2 setObject:v16 forKeyedSubscript:CMNatalimeterSetUserVo2max];
  LODWORD(v17) = *(_DWORD *)(v4 + 1396);
  float v18 = +[NSNumber numberWithFloat:v17];
  [v2 setObject:v18 forKeyedSubscript:CMNatalimeterSetUserRunVo2max];
  LODWORD(v19) = *(_DWORD *)(v4 + 1404);
  float v20 = +[NSNumber numberWithFloat:v19];
  [v2 setObject:v20 forKeyedSubscript:CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold];
  LODWORD(v21) = *(_DWORD *)(v4 + 1388);
  float v22 = +[NSNumber numberWithFloat:v21];
  [v2 setObject:v22 forKeyedSubscript:CMNatalimeterSetUserPal];
  id v23 = [v2 copy];

  return v23;
}

void sub_10128F9EC(uint64_t a1, void *a2)
{
  v16[0] = CMNatalimeterSetUserBiologicalSex;
  v16[1] = CMNatalimeterSetUserAgeYr;
  v16[2] = CMNatalimeterSetUserWeightKG;
  _DWORD v16[3] = CMNatalimeterSetUserHeightMeter;
  v16[4] = CMNatalimeterSetUserCondition;
  v16[5] = CMNatalimeterSetUserBetaBlockerUse;
  uint64_t v4 = +[NSArray arrayWithObjects:v16 count:6];
  id v5 = +[NSMutableArray array];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v6 = [(NSArray *)v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        if (![a2 objectForKeyedSubscript:v10]) {
          [v5 addObject:v10];
        }
      }
      id v7 = [(NSArray *)v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }
  sub_101297350(a1, a2, 1, v5);
}

void sub_10128FC08(uint64_t a1, void *a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412290;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "UserProfile, Resetting to defaults for keys, %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v27 = 138412290;
    unint64_t v28 = a2;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::resetUserProfileForKeys(NSArray<NSString *> *)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  v25[0] = CMNatalimeterSetUserBiologicalSex;
  v25[1] = CMNatalimeterSetUserPal;
  v26[0] = &off_102394490;
  v26[1] = &off_102398268;
  uint64_t v5 = CMNatalimeterSetUserVo2max;
  _DWORD v25[2] = CMNatalimeterSetUserHrmin;
  void v25[3] = CMNatalimeterSetUserVo2max;
  v26[2] = &off_102398278;
  void v26[3] = &off_102398288;
  v25[4] = CMNatalimeterSetUserRunVo2max;
  v25[5] = CMNatalimeterSetUserHronset;
  v26[4] = &off_102398288;
  v26[5] = &off_102398278;
  v25[6] = CMNatalimeterSetUserCondition;
  v25[7] = CMNatalimeterSetUserBetaBlockerUse;
  v26[6] = &off_102394490;
  v26[7] = &__kCFBooleanFalse;
  v25[8] = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  v26[8] = &off_102398298;
  id v6 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:9];
  id v7 = +[NSMutableDictionary dictionary];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v8 = [a2 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v21;
    do
    {
      long long v11 = 0;
      do
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(a2);
        }
        long long v12 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v11);
        [v7 setObject:v6 forKeyedSubscript:v12];
        if ([v12 isEqualToString:v5])
        {
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_10231B970);
          }
          long long v13 = qword_102418FF8;
          if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "UserProfile, Resetting ActiveVo2Calibration, NumActiveCalibrations, and TimeFirstPAL.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FF0 != -1) {
              dispatch_once(&qword_102418FF0, &stru_10231B970);
            }
            LOWORD(v27) = 0;
            double v17 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::resetUserProfileForKeys(NSArray<NSString *> *)", "%s\n", v17);
            if (v17 != (char *)buf) {
              free(v17);
            }
          }
          sub_10128F3C0(a1, 0);
          uint64_t v14 = sub_1000A6958();
          *(_DWORD *)std::string buf = 0;
          sub_1000EA2A4(v14, @"NumActiveCalibrations", buf);
          uint64_t v15 = sub_1000A6958();
          *(void *)std::string buf = 0xFFEFFFFFFFFFFFFFLL;
          sub_100163398(v15, @"TimeFirstPAL", buf);
          uint64_t v16 = *(void *)sub_1000A6958();
          (*(void (**)(void))(v16 + 944))();
        }
        long long v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v18 = [a2 countByEnumeratingWithState:&v20 objects:v24 count:16];
      id v9 = v18;
    }
    while (v18);
  }
  sub_101297350(a1, v7, 0, 0);
}

void sub_1012902D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012902FC(uint64_t a1, uint64_t a2, double a3)
{
  std::string __p = 0;
  id v8 = 0;
  uint64_t v9 = 0;
  uint64_t v5 = sub_10146EC64(*(void *)(a1 + 128));
  if (v5 == 100) {
    sub_1004A6018((double **)&__p, a2, a3);
  }
  if (__p)
  {
    id v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_10129037C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012907A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101290804(uint64_t a1, xpc_activity_t activity)
{
  if (!activity)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v7 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid xpc activity.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 == -1)
    {
LABEL_28:
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::onCalorieAggregationActivity(xpc_activity_t)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return;
    }
LABEL_30:
    dispatch_once(&qword_102418FF0, &stru_10231B970);
    goto LABEL_28;
  }
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 4 || (xpc_activity_state_t v5 = state, state == 2))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Running aggregation for calorie-related tables", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onCalorieAggregationActivity(xpc_activity_t)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_101294870(a1, activity);
    return;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  id v8 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134217984;
    xpc_activity_state_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unexpected activity state: %ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 == -1) {
      goto LABEL_28;
    }
    goto LABEL_30;
  }
}

void sub_101290C2C(id a1)
{
  if (sub_10016CCBC())
  {
    if (sub_100C60EC0()) {
      byte_102486A90 = 1;
    }
  }
}

void sub_101290C60()
{
}

void sub_101290CAC()
{
}

uint64_t sub_101290CD0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101290D60;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102486AB0 != -1) {
    dispatch_once(&qword_102486AB0, block);
  }
  return byte_102486AA8;
}

id sub_101290D60(uint64_t a1)
{
  id result = [[objc_msgSend(*(id *)(a1 + 32), "vendor") isServiceEnabled:@"CLNatalimetryNotifier"];
  byte_102486AA8 = (char)result;
  return result;
}

unsigned __int8 *sub_101290D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result = sub_101A1F180(v6, "MotionLoggerPostWorkoutLoggingInterval", &qword_101DAFF58, 0);
  if (v6[0]
    || (id result = (unsigned __int8 *)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", @"CLWorkoutRecorder"), result))
  {
    *(unsigned char *)a2 = 1;
    uint64_t v5 = v7;
    *(void *)(a2 + 8) = v7;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0x403E000000000000;
    uint64_t v5 = v7;
  }
  *(void *)(a2 + 16) = v5;
  return result;
}

void sub_101290E20(uint64_t a1, void *a2)
{
  id v2 = (void *)sub_1012923A0(a1, "CLNatalimetryNotifier", a2);
  *id v2 = off_10231B5C8;
  v2[14] = off_10231B6D8;
  v2[15] = off_10231B710;
  operator new();
}

void sub_101291E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v37 = v30[680];
  v30[680] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  sub_1012A3A50(v34);
  sub_1000D80C4(a16);
  uint64_t v38 = v30[635];
  v30[635] = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = v30[634];
  v30[634] = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = v30[633];
  v30[633] = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = v30[632];
  v30[632] = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = v30[631];
  v30[631] = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *v33;
  *double v33 = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  sub_100D279D0(a17);
  double v44 = (std::__shared_weak_count *)v30[609];
  if (v44) {
    sub_1000DB0A0(v44);
  }
  sub_100538B1C(a18);
  double v45 = (std::__shared_weak_count *)v30[394];
  if (v45) {
    sub_1000DB0A0(v45);
  }
  sub_1011FC5A4(a25);
  uint64_t v46 = v30[347];
  v30[347] = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 48))(v46);
  }
  uint64_t v47 = *v32;
  uint64_t *v32 = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 48))(v47);
  }
  double v48 = (std::__shared_weak_count *)v30[345];
  if (v48) {
    sub_1000DB0A0(v48);
  }
  sub_1012A3B4C(a19);
  sub_1012A96AC(a20);
  sub_1012A9610(a21);
  sub_100D3EC0C(v31);
  sub_1012A9574(a26);
  sub_101293A10(v35);
  sub_1012A94D8(a27);
  sub_1012A943C(a28);
  sub_1012A937C(a29);
  sub_1012A92E0(a30);
  uint64_t v49 = v30[46];
  v30[46] = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  uint64_t v50 = (std::__shared_weak_count *)v30[43];
  if (v50) {
    sub_1000DB0A0(v50);
  }
  double v51 = (std::__shared_weak_count *)v30[41];
  if (v51) {
    sub_1000DB0A0(v51);
  }
  sub_1003B278C(a22);
  __int16 v52 = (std::__shared_weak_count *)v30[33];
  if (v52) {
    sub_1000DB0A0(v52);
  }
  sub_1003B278C(a23);
  double v53 = (std::__shared_weak_count *)v30[25];
  if (v53) {
    sub_1000DB0A0(v53);
  }
  sub_1003B278C(a24);
  __int16 v54 = (std::__shared_weak_count *)v30[17];
  if (v54) {
    sub_1000DB0A0(v54);
  }
  sub_101293A70((uint64_t)v30);
  _Unwind_Resume(a1);
}

uint64_t sub_1012923A0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10231C2C8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101292430(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10129244C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onCatherineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onCatherineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10129A1F0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101292608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101292628(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10129AA68(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012927E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101292804(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    id v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (*a2 == 6) {
    sub_1011FC698((id *)(a4 + 2936), *(unsigned __int8 *)(a3 + 1));
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012929C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012929E8(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10129AF1C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101292BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101292BC4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10129B0FC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101292D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101292DA0(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onStoredUserInfo", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      char v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onStoredUserInfo\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10129AD38(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101292F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101292F74(id *a1)
{
  sub_101294114(a1 + 18, 86400.0);
  sub_1012943CC(a1 + 26, 604800.0);
  int v8 = 7200;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, &v6);
  sub_10006EF84(v6, "CalorieAggregationTimeInterval", &v8);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, v8);
  xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  id v4 = [objc_msgSend(a1[4], "vendor") proxyForService:@"CLNatalimetryNotifier"];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_101294684;
  v5[3] = &unk_1022B9CD0;
  void v5[4] = v4;
  xpc_activity_register("com.apple.locationd.Calorimetry.CalorieAggregation", v3, v5);
  xpc_release(v3);
}

void sub_1012930C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012930DC(void *a1)
{
  uint64_t v2 = a1[16];
  xpc_object_t v3 = (void *)a1[5];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101296AC8;
  v7[3] = &unk_10231B738;
  void v7[4] = a1;
  sub_10146D0B4(v2, v3, v7);
  uint64_t v4 = a1[24];
  uint64_t v5 = (void *)a1[5];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_101297098;
  v6[3] = &unk_10231B758;
  void v6[4] = a1;
  sub_100A2257C(v4, v5, v6);
}

void sub_1012931B4(uint64_t a1, long long *a2)
{
  sub_10061F1FC(*(void *)(a1 + 2752), a2);
  uint64_t v4 = (long long *)(*(void *)(a1 + 128) + 460);
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[2];
  *(long long *)((char *)v4 + 44) = *(long long *)((char *)a2 + 44);
  v4[1] = v6;
  v4[2] = v7;
  long long *v4 = v5;
  (*(void (**)(void, long long *))(**(void **)(a1 + 2768) + 16))(*(void *)(a1 + 2768), a2);
  sub_100F971B0(a1 + 5096, (uint64_t)a2);
  sub_1013E3A44(a1 + 5192, (uint64_t)a2);
  bzero(&v15, 0x554uLL);
  long long v8 = a2[1];
  v13[0] = *a2;
  v13[1] = v8;
  *(_OWORD *)__int16 v14 = a2[2];
  *(_OWORD *)&v14[12] = *(long long *)((char *)a2 + 44);
  int v12 = 2;
  (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v12, v13, 1, 0xFFFFFFFFLL, 0);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  *(_OWORD *)(a1 + 3004) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 2992) = v11;
  *(_OWORD *)(a1 + 2976) = v10;
  *(_OWORD *)(a1 + 2960) = v9;
  sub_1010B8144(a1 + 3168, (uint64_t)a2);
  sub_10082CE84((_OWORD *)(a1 + 4864), a2);
}

void sub_101293330(uint64_t a1)
{
  uint64_t v2 = (long long *)(*(void *)(a1 + 2752) + 1352);
  long long v3 = *(_OWORD *)(*(void *)(a1 + 2752) + 1368);
  long long v11 = *v2;
  long long v12 = v3;
  *(_OWORD *)int v13 = v2[2];
  *(_OWORD *)&v13[12] = *(long long *)((char *)v2 + 44);
  if (sub_101298C64(a1))
  {
    *(unsigned char *)(a1 + 416) = 1;
    v10[0] = *(_DWORD *)&v13[8];
    uint64_t v4 = sub_1000D3E78();
    sub_10006B564(v4, buf);
    int v5 = sub_10006EF84(*(uint64_t *)buf, "UserCondition", v10);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v5) {
      *(_DWORD *)&v13[8] = v10[0];
    }
    float v6 = sub_100E88130(a1 + 2929, (uint64_t)&v11);
    *((float *)&v12 + 3) = v6;
    *(_DWORD *)&v13[20] = sub_100E95B4C(a1 + 5168, (float *)&v11);
    long long v15 = 0u;
    memset(v16, 0, sizeof(v16));
    *(_OWORD *)std::string buf = 0u;
    sub_101297D48(a1, *(void **)(a1 + 384), (uint64_t)&v11, 1, (uint64_t)buf);
    sub_1012931B4(a1, (long long *)buf);
    uint64_t v7 = sub_1000D2E34(0);
    (*(void (**)(void))(*(void *)(v7 + 56) + 32))();
    sub_1012985A0();
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    long long v8 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "UserProfile, Unable to read from disk!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      LOWORD(v10[0]) = 0;
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::readUserProfile()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_1012935D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012935F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    long long v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    long long v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      long long v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = nullsub_1445;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  void v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10129380C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10129382C(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNatalimetryNotifier::onDeviceMotionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNatalimetryNotifier::onDeviceMotionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10129B7D4(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012939E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101293A10(uint64_t a1)
{
  *(void *)a1 = off_10231C1E0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));
  return a1;
}

uint64_t sub_101293A70(uint64_t a1)
{
  *(void *)a1 = off_10231C2C8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101293AF4(uint64_t a1)
{
  *(void *)a1 = off_10231B5C8;
  *(void *)(a1 + 112) = off_10231B6D8;
  *(void *)(a1 + 120) = off_10231B710;

  *(void *)(a1 + 384) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v2 = *(void *)(a1 + 5440);
  *(void *)(a1 + 5440) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1012A3A50(a1 + 5192);
  sub_1000D80C4((void *)(a1 + 5112));
  uint64_t v3 = *(void *)(a1 + 5080);
  *(void *)(a1 + 5080) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 5072);
  *(void *)(a1 + 5072) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 5064);
  *(void *)(a1 + 5064) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 5056);
  *(void *)(a1 + 5056) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 5048);
  *(void *)(a1 + 5048) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 5040);
  *(void *)(a1 + 5040) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 5024);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  __int16 v10 = *(std::__shared_weak_count **)(a1 + 5008);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = *(std::__shared_weak_count **)(a1 + 4992);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  __int16 v12 = *(std::__shared_weak_count **)(a1 + 4872);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  sub_100538B1C((void *)(a1 + 3168));
  int v13 = *(std::__shared_weak_count **)(a1 + 3152);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  sub_1011FC5A4(a1 + 2936);
  uint64_t v14 = *(void *)(a1 + 2776);
  *(void *)(a1 + 2776) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 2768);
  *(void *)(a1 + 2768) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 48))(v15);
  }
  __int16 v16 = *(std::__shared_weak_count **)(a1 + 2760);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  sub_1012A3B4C(a1 + 1968);
  sub_1012A96AC(a1 + 1824);
  sub_1012A9610(a1 + 1680);
  *(void *)(a1 + 1552) = off_1022F3BD0;
  free(*(void **)(a1 + 1560));
  sub_100663B8C((void *)(a1 + 1576));
  sub_1012A9574(a1 + 1408);
  *(void *)(a1 + 1280) = off_10231C1E0;
  free(*(void **)(a1 + 1288));
  sub_1002CDF4C((void *)(a1 + 1304));
  sub_1012A94D8(a1 + 1136);
  sub_1012A943C(a1 + 992);
  sub_1012A937C(a1 + 592);
  sub_1012A92E0(a1 + 448);
  uint64_t v17 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  __int16 v18 = *(std::__shared_weak_count **)(a1 + 344);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 328);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  sub_1003B278C(a1 + 272);
  __int16 v20 = *(std::__shared_weak_count **)(a1 + 264);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  sub_1003B278C(a1 + 208);
  long long v21 = *(std::__shared_weak_count **)(a1 + 200);
  if (v21) {
    sub_1000DB0A0(v21);
  }
  sub_1003B278C(a1 + 144);
  __int16 v22 = *(std::__shared_weak_count **)(a1 + 136);
  if (v22) {
    sub_1000DB0A0(v22);
  }

  return sub_101293A70(a1);
}

uint64_t sub_101293F04(uint64_t a1)
{
  return sub_101293AF4(a1 - 112);
}

uint64_t sub_101293F0C(uint64_t a1)
{
  return sub_101293AF4(a1 - 120);
}

void sub_101293F14(uint64_t a1)
{
  sub_101293AF4(a1);

  operator delete();
}

void sub_101293F4C(uint64_t a1)
{
  sub_101293AF4(a1 - 112);

  operator delete();
}

void sub_101293F88(uint64_t a1)
{
  sub_101293AF4(a1 - 120);

  operator delete();
}

void sub_101293FC4(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 360);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 360));
    *(void *)(a1 + 360) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 5040);
  *(void *)(a1 + 5040) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 5056);
  *(void *)(a1 + 5056) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 5048);
  *(void *)(a1 + 5048) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 5432));
  uint64_t v6 = sub_1000D2E34(0);
  sub_1009D26C4(v6, 4, *(void *)(a1 + 408));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, @"NanolifestyleSessionTrackerAppForegroundedNotification", 0);
  uint64_t v8 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v8, (const void *)a1, @"NanolifestyleSessionTrackerAppForegroundedForMachinePairingNotification", 0);
  (*(void (**)(uint64_t))(*(void *)a1 + 248))(a1);

  *(void *)(a1 + 2784) = 0;
  *(unsigned char *)(a1 + 108) = 1;
}

void sub_101294114(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    uint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      __int16 v16 = &v15[24 * v11];
      uint64_t v17 = &v15[24 * v14];
      *(double *)__int16 v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      __int16 v10 = v16 + 24;
      uint64_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      __int16 v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLNatalieData>::setExpirationRule(CFTimeInterval) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1012943CC(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    uint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      __int16 v16 = &v15[24 * v11];
      uint64_t v17 = &v15[24 * v14];
      *(double *)__int16 v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      __int16 v10 = v16 + 24;
      uint64_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      __int16 v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLExerciseMinuteData>::setExpirationRule(CFTimeInterval) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_101294684(uint64_t a1, _xpc_activity_s *a2)
{
  [*(id *)(a1 + 32) onCalorieAggregationActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      xpc_activity_get_state(a2);
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::setUpAggregationOnTimer()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_101294870(uint64_t a1, _xpc_activity_s *a2)
{
  if (*(_DWORD *)(a1 + 5032) == 1)
  {
    uint64_t v33 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    *(float *)&double v4 = sub_100E95B4C(a1 + 5168, (float *)(*(void *)(a1 + 2752) + 1352));
    uint64_t v34 = +[NSNumber numberWithFloat:v4];
    sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1], 0, 0);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Estimating MaxMets", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      float v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    CFAbsoluteTimeGetCurrent();
    int v6 = nullsub_41(a1 + 4984, 7);
    if (!sub_101295688(v6, a2))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v7 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating CalorieHistory", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v26);
        if (v26 != buf) {
          free(v26);
        }
      }
      sub_1012959A0(a1 + 144);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v8 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating ftp data history", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
      }
      sub_1013E4C84(a1 + 5192);
      int v9 = sub_101284E70();
      if (v9 == 2)
      {
        double Current = CFAbsoluteTimeGetCurrent();
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 2776) + 32))(*(void *)(a1 + 2776), 1))
        {
          double v11 = vabdd_f64(Current, *(double *)(a1 + 2824)) + 2.56;
          double v12 = vabdd_f64(Current, *(double *)(a1 + 2832));
          double v13 = v12 + 2.56;
          if (v11 >= v12 + 2.56) {
            double v14 = v11;
          }
          else {
            double v14 = v12 + 2.56;
          }
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_10231B970);
          }
          uint64_t v15 = qword_102418FF8;
          if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134349312;
            *(double *)&uint8_t buf[4] = v11;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v13;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Secondary CalorieHistory aggregation with activeDelay, %{public}f, basalDelay, %{public}f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FF0 != -1) {
              dispatch_once(&qword_102418FF0, &stru_10231B970);
            }
            __int16 v16 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v16);
            if (v16 != buf) {
              free(v16);
            }
          }
        }
        else
        {
          double v14 = 3600.0;
        }
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v17 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134349056;
          *(double *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Secondary CalorieHistory aggregation for %{public}f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_10231B970);
          }
          unint64_t v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v28);
          if (v28 != buf) {
            free(v28);
          }
        }
        __int16 v18 = operator new(0x18uLL);
        *(void *)std::string buf = v18;
        *(void *)&uint8_t buf[16] = v18 + 3;
        *(double *)__int16 v18 = v14;
        v18[1] = 0x7FEFFFFFFFFFFFFFLL;
        *((unsigned char *)v18 + 16) = 0;
        *(void *)&uint8_t buf[8] = v18 + 3;
        (*(void (**)(void, unsigned char *))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), buf);
        int v9 = *(_DWORD *)buf;
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
      }
      if (!sub_101295688(v9, a2))
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v19 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating MaxMetsHistory", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_10231B970);
          }
          float v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v29);
          if (v29 != buf) {
            free(v29);
          }
        }
        int v20 = sub_101295F58(a1 + 272);
        if (!sub_101295688(v20, a2))
        {
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_10231B970);
          }
          long long v21 = qword_102418FF8;
          if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating ExerciseMinuteHistory", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FF0 != -1) {
              dispatch_once(&qword_102418FF0, &stru_10231B970);
            }
            uint64_t v30 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v30);
            if (v30 != buf) {
              free(v30);
            }
          }
          int v22 = sub_101296510(a1 + 208);
          if (!sub_101295688(v22, a2))
          {
            if (qword_102418FF0 != -1) {
              dispatch_once(&qword_102418FF0, &stru_10231B970);
            }
            uint64_t v23 = qword_102418FF8;
            if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CalorieAggregation: Aggregating VO2Max data", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FF0 != -1) {
                dispatch_once(&qword_102418FF0, &stru_10231B970);
              }
              uint64_t v31 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::runCalorieAggregation(xpc_activity_t)", "%s\n", v31);
              if (v31 != buf) {
                free(v31);
              }
            }
            sub_1010B784C(a1 + 3168);
            sub_1012954B8(v24, a2);
          }
        }
      }
    }
  }
  else
  {
    sub_1012954B8(a1, a2);
  }
}

void sub_101295494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012954B8(int a1, xpc_activity_t activity)
{
  if (!xpc_activity_set_state(activity, 5))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      xpc_activity_state_t state = xpc_activity_get_state(activity);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark CalorieAggregation activity as done. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      xpc_activity_get_state(activity);
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::markXpcActivityDone(xpc_activity_t)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

BOOL sub_101295688(int a1, xpc_activity_t activity)
{
  BOOL result = xpc_activity_should_defer(activity);
  if (result)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    double v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to defer CalorieAggregation activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::deferXpcActivityIfNecessary(xpc_activity_t)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (xpc_activity_set_state(activity, 3))
    {
      return 1;
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t state = xpc_activity_get_state(activity);
        *(_DWORD *)std::string buf = 134349056;
        xpc_activity_state_t v11 = state;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark CalorieAggregation activity as deferred. Current state is %{public}ld", buf, 0xCu);
      }
      BOOL v7 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        xpc_activity_get_state(activity);
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::deferXpcActivityIfNecessary(xpc_activity_t)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1012959A0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)long long v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      sub_1000D3E50();
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLNatalieData>::aggregateRecords() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    int v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)long long v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      sub_1000D3E50();
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLNatalieData>::aggregateRecords() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1012A9748(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      xpc_activity_state_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1012A9748(v12, (double **)a1);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)long long v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231C590);
        }
        sub_1012A9748(*(void *)(a1 + 24), (double **)a1);
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLNatalieData>::aggregateRecords() [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    __int16 v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_101295F58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)long long v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      sub_1000D3E50();
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    int v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)long long v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      sub_1000D3E50();
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1012A9948(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      xpc_activity_state_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1012A9948(v12, (double **)a1);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)long long v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231C590);
        }
        sub_1012A9948(*(void *)(a1 + 24), (double **)a1);
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    __int16 v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_101296510(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)long long v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      sub_1000D3E50();
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLExerciseMinuteData>::aggregateRecords() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    int v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)long long v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      sub_1000D3E50();
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLExerciseMinuteData>::aggregateRecords() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1012A9B48(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231C590);
      }
      xpc_activity_state_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1012A9B48(v12, (double **)a1);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)long long v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231C590);
        }
        sub_1012A9B48(*(void *)(a1 + 24), (double **)a1);
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLExerciseMinuteData>::aggregateRecords() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    __int16 v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_101296AC8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v11 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v11 + 2776) + 32))(*(void *)(v11 + 2776), 1))
  {
    if (a3 >= 1)
    {
      uint64_t v12 = (void *)sub_101296E98(a3, a2[2], a2[8]);
      int v13 = *(void **)(v11 + 2800);
      uint64_t v50 = v12;
      sub_101296F80((id)v11, a5, v13, +[NSArray arrayWithObjects:&v50 count:1]);
    }
    int v14 = (void *)sub_101296E98(a4, a2[2], a2[8]);
    uint64_t v15 = *(void **)(v11 + 2808);
    uint64_t v49 = v14;
    sub_101296F80((id)v11, a6, v15, +[NSArray arrayWithObjects:&v49 count:1]);
  }
  bzero(&v48, 0x538uLL);
  long long v16 = *((_OWORD *)a2 + 3);
  v46[2] = *((_OWORD *)a2 + 2);
  v46[3] = v16;
  v46[4] = *((_OWORD *)a2 + 4);
  uint64_t v47 = *((void *)a2 + 10);
  long long v17 = *((_OWORD *)a2 + 1);
  v46[0] = *(_OWORD *)a2;
  v46[1] = v17;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  __int16 v18 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    int v19 = *(_DWORD *)a2;
    uint64_t v20 = *((void *)a2 + 2);
    uint64_t v22 = *((void *)a2 + 7);
    uint64_t v21 = *((void *)a2 + 8);
    int v23 = *((_DWORD *)a2 + 6);
    uint64_t v24 = *((void *)a2 + 4);
    uint64_t v25 = *((void *)a2 + 6);
    *(_DWORD *)std::string buf = 67111168;
    int v29 = v19;
    __int16 v30 = 2048;
    uint64_t v31 = v20;
    __int16 v32 = 2048;
    uint64_t v33 = v21;
    __int16 v34 = 1024;
    int v35 = v23;
    __int16 v36 = 2048;
    uint64_t v37 = v24;
    __int16 v38 = 2048;
    uint64_t v39 = v25;
    __int16 v40 = 2048;
    uint64_t v41 = v22;
    __int16 v42 = 2048;
    uint64_t v43 = a3;
    __int16 v44 = 2048;
    uint64_t v45 = a4;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "CalorieHistory,recordId,%d,startTime,%.3f,duration,%f,activityType,%d,userMets,%lf,calories,%lld,basalCalories,%lld,incrementalActiveCalories,%lld,incrementalBasalCalories,%lld", buf, 0x54u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  *(_DWORD *)std::string buf = 0;
  return (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v11 + 152))(v11, buf, v46, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_101296E98(uint64_t a1, double a2, double a3)
{
  uint64_t result = objc_opt_class();
  if (result)
  {
    id v7 = [objc_alloc((Class)NSDateInterval) initWithStartDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2 - a3) duration:a3];
    id v8 = [objc_alloc((Class)HKQuantityDatum) initWithIdentifier:v7 dateInterval:v7 quantity:[HKQuantity quantityWithUnit:v7 doubleValue:a1] resumeContext:0];

    return (uint64_t)v8;
  }
  return result;
}

id sub_101296F80(id result, int a2, void *a3, void *a4)
{
  if (a2)
  {
    id v6 = result;
    uint64_t result = (id)objc_opt_class();
    if (result)
    {
      unsigned __int8 v7 = [objc_msgSend(a3, "quantityType") isEqual:+[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierActiveEnergyBurned)];
      [objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(a4, "lastObject"), "dateInterval"), "startDate"), "timeIntervalSinceReferenceDate"]
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1012A0298;
      v9[3] = &unk_10231B858;
      void v9[4] = v6;
      void v9[5] = v8;
      unsigned __int8 v10 = v7;
      return [a3 insertDatums:a4 device:[+[HKDevice localDevice](HKDevice, "localDevice")] metadata:0 completion:v9];
    }
  }
  return result;
}

uint64_t sub_101297098(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  bzero(&v15, 0x578uLL);
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  int v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    *(_DWORD *)std::string buf = 67240448;
    int v10 = v5;
    __int16 v11 = 2050;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ExerciseMinuteHistory,recordId,%{public}d,startTime,%{public}.3f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)std::string buf = 4;
  return (*(uint64_t (**)(uint64_t, uint8_t *, long long *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, buf, &v13, 1, 0xFFFFFFFFLL, 0);
}

void *sub_1012972D4@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void sub_101297350(uint64_t a1, void *a2, int a3, void *a4)
{
  [*(id *)(a1 + 384) addEntriesFromDictionary:a2];
  id v8 = [a4 mutableCopy];
  sub_101297624(a1, v8);
  uint64_t v9 = (_OWORD *)(*(void *)(a1 + 2752) + 1352);
  long long v10 = *(_OWORD *)(*(void *)(a1 + 2752) + 1368);
  v44[0] = *v9;
  v44[1] = v10;
  v45[0] = v9[2];
  *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)((char *)v9 + 44);
  if (v8) {
    sub_1012979FC((uint64_t)[*(id *)(a1 + 384) removeObjectsForKeys:v8], v8, (uint64_t)v44);
  }

  long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  long long v41 = 0u;
  sub_101297D48(a1, *(void **)(a1 + 384), (uint64_t)v44, a3, (uint64_t)&v41);
  if (*(int *)(a1 + 396) >= 1)
  {
    if ([a2 objectForKey:CMNatalimeterSetUserPal])
    {
      uint64_t v11 = sub_1000A6958();
      if ((sub_1000A6A10(v11, @"TimeFirstPAL", (void *)(a1 + 2848)) & 1) == 0)
      {
        uint64_t v12 = sub_1000A6958();
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        sub_100163398(v12, @"TimeFirstPAL", &Current);
      }
    }
  }
  sub_1012931B4(a1, &v41);
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserHeightMeter]) {
    sub_1012985A0();
  }
  if (*(unsigned char *)(a1 + 416))
  {
    uint64_t v13 = sub_1000D2E34(0);
    (*(void (**)(void))(*(void *)(v13 + 56) + 32))();
  }
  if (!*(unsigned char *)(a1 + 376) && sub_101298614(a1)) {
    [*(id *)(a1 + 384) removeAllObjects];
  }
  uint64_t v15 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v15 setTimestamp:CFAbsoluteTimeGetCurrent()];
  [(ALActivityLog *)v15 setBodyMetrics:objc_alloc_init(ALCLBodyMetrics)];
  [(ALCLBodyMetrics *)[(ALActivityLog *)v15 bodyMetrics] setGender:v41];
  int v16 = DWORD2(v41);
  long long v17 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v18) = v16;
  [(ALCLBodyMetrics *)v17 setHeightM:v18];
  int v19 = HIDWORD(v41);
  uint64_t v20 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v21) = v19;
  [(ALCLBodyMetrics *)v20 setWeightKG:v21];
  int v22 = v42;
  int v23 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v24) = v22;
  [(ALCLBodyMetrics *)v23 setVo2max:v24];
  int v25 = DWORD1(v42);
  uint64_t v26 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v27) = v25;
  [(ALCLBodyMetrics *)v26 setAge:v27];
  int v28 = DWORD2(v42);
  int v29 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v30) = v28;
  [(ALCLBodyMetrics *)v29 setHrmin:v30];
  int v31 = HIDWORD(v42);
  __int16 v32 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v33) = v31;
  [(ALCLBodyMetrics *)v32 setHrmax:v33];
  int v34 = v43[0];
  int v35 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v36) = v34;
  [(ALCLBodyMetrics *)v35 setHronset:v36];
  int v37 = v43[1];
  __int16 v38 = [(ALActivityLog *)v15 bodyMetrics];
  LODWORD(v39) = v37;
  [(ALCLBodyMetrics *)v38 setPal:v39];
  [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v15;
}

void sub_101297624(uint64_t a1, void *a2)
{
  uint64_t v4 = CMNatalimeterSetUserHeightMeter;
  if ([*(id *)(a1 + 384) objectForKeyedSubscript:CMNatalimeterSetUserHeightMeter])
  {
    [objc_msgSend(*(id *)(a1 + 384), "objectForKeyedSubscript:", v4) floatValue];
    float v6 = v5;
    if (v5 < 0.54 || v5 > 2.73)
    {
      [*(id *)(a1 + 384) removeObjectForKey:v4];
      [a2 addObject:v4];
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      unsigned __int8 v7 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "UserProfile, Error in user info,heightM,%f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::sanitizeUserProfile(NSMutableArray<NSString *> *)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
  uint64_t v8 = CMNatalimeterSetUserAgeYr;
  if ([*(id *)(a1 + 384) objectForKeyedSubscript:CMNatalimeterSetUserAgeYr])
  {
    [objc_msgSend(*(id *)(a1 + 384), "objectForKeyedSubscript:", v8) floatValue];
    float v10 = v9;
    if (v9 < 5.0 || v9 > 150.0)
    {
      [*(id *)(a1 + 384) removeObjectForKey:v8];
      [a2 addObject:v8];
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v12 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "UserProfile, Error in user info,ageYr,%f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::sanitizeUserProfile(NSMutableArray<NSString *> *)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
  }
}

id sub_1012979FC(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [a2 count];
  if (result)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    float v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138477827;
      float v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "UserProfile, resetting CLBodyMetrics for keys: %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      unsigned __int8 v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::resetBodyMetricFieldsForKeys(NSArray<NSString *> *, CLBodyMetrics &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if ([a2 containsObject:CMNatalimeterSetUserBiologicalSex]) {
      *(void *)a3 = 1;
    }
    if ([a2 containsObject:CMNatalimeterSetUserHeightMeter])
    {
      *(unsigned char *)(a3 + 57) = 0;
      *(_DWORD *)(a3 + 8) = 1071225242;
    }
    if ([a2 containsObject:CMNatalimeterSetUserWeightKG])
    {
      *(unsigned char *)(a3 + 58) = 0;
      *(_DWORD *)(a3 + 12) = 1116213084;
    }
    if ([a2 containsObject:CMNatalimeterSetUserAgeYr])
    {
      *(unsigned char *)(a3 + 56) = 0;
      *(_DWORD *)(a3 + 20) = 1106247680;
    }
    if ([a2 containsObject:CMNatalimeterSetUserPal]) {
      *(_DWORD *)(a3 + 36) = 1082130432;
    }
    if ([a2 containsObject:CMNatalimeterSetUserHrmin]) {
      *(_DWORD *)(a3 + 24) = 1115815936;
    }
    if ([a2 containsObject:CMNatalimeterSetUserVo2max]) {
      *(_DWORD *)(a3 + 16) = 1092616192;
    }
    if ([a2 containsObject:CMNatalimeterSetUserRunVo2max]) {
      *(_DWORD *)(a3 + 44) = 1092616192;
    }
    if ([a2 containsObject:CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold]) {
      *(_DWORD *)(a3 + 52) = -1082130432;
    }
    if ([a2 containsObject:CMNatalimeterSetUserHronset]) {
      *(_DWORD *)(a3 + 32) = 1115815936;
    }
    if ([a2 containsObject:CMNatalimeterSetUserCondition]) {
      *(_DWORD *)(a3 + 40) = 0;
    }
    id result = [a2 containsObject:CMNatalimeterSetUserBetaBlockerUse];
    if (result) {
      *(unsigned char *)(a3 + 48) = 0;
    }
  }
  return result;
}

void sub_101297D48(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a3;
  *(_OWORD *)(a5 + 16) = v9;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a5 + 44) = *(_OWORD *)(a3 + 44);
  uint64_t v10 = CMNatalimeterSetUserBiologicalSex;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserBiologicalSex])
  {
    int v11 = sub_10061E244([[objc_msgSend(a2, "objectForKeyedSubscript:", v10) intValue];
    *(_DWORD *)a5 = v11 != 2;
    *(_DWORD *)(a5 + 4) = v11;
  }
  uint64_t v12 = CMNatalimeterSetUserHeightMeter;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserHeightMeter])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v12) floatValue];
    *(unsigned char *)(a5 + 57) = 1;
    *(_DWORD *)(a5 + 8) = v13;
  }
  uint64_t v14 = CMNatalimeterSetUserWeightKG;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserWeightKG])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v14) floatValue];
    *(unsigned char *)(a5 + 58) = 1;
    *(_DWORD *)(a5 + 12) = v15;
  }
  uint64_t v16 = CMNatalimeterSetUserAgeYr;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserAgeYr])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v16) floatValue];
    *(unsigned char *)(a5 + 56) = 1;
    *(_DWORD *)(a5 + 20) = v17;
  }
  uint64_t v18 = CMNatalimeterSetUserPal;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserPal])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v18) floatValue];
    *(float *)(a5 + 36) = v19;
    *(_DWORD *)(a1 + 400) = (int)(float)(*(float *)(a3 + 36) - v19);
  }
  uint64_t v20 = CMNatalimeterSetUserHronset;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserHronset])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v20) floatValue];
    *(_DWORD *)(a5 + 32) = v21;
  }
  uint64_t v22 = CMNatalimeterSetUserCondition;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserCondition]) {
    *(_DWORD *)(a5 + 40) = [[objc_msgSend(a2, "objectForKeyedSubscript:", v22) intValue];
  }
  uint64_t v23 = CMNatalimeterSetUserBetaBlockerUse;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserBetaBlockerUse]) {
    *(unsigned char *)(a5 + 48) = [[a2 objectForKeyedSubscript:v23] boolValue];
  }
  uint64_t v24 = CMNatalimeterSetUserRunVo2max;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserRunVo2max])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v24) floatValue];
    *(_DWORD *)(a5 + 44) = v25;
  }
  uint64_t v26 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v26) floatValue];
    *(_DWORD *)(a5 + 52) = v27;
  }
  uint64_t v28 = CMNatalimeterSetUserVo2max;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserVo2max])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v28) floatValue];
    *(_DWORD *)(a5 + 16) = v29;
  }
  uint64_t v30 = CMNatalimeterSetUserHrmax;
  if ([a2 objectForKeyedSubscript:CMNatalimeterSetUserHrmax])
  {
    [objc_msgSend(a2, "objectForKeyedSubscript:", v30) floatValue];
    *(_DWORD *)(a5 + 28) = v31;
  }
  sub_10061EFFC(a5);
  *(_DWORD *)(a5 + 24) = v32;
  int v33 = *(unsigned __int8 *)(a3 + 48);
  int v34 = *(unsigned __int8 *)(a5 + 48);
  if (a4)
  {
    id v35 = [a2 objectForKeyedSubscript:v24];
    uint64_t v36 = CMNatalimeterSetUserOnsetVo2max;
    id v37 = [a2 objectForKeyedSubscript:CMNatalimeterSetUserOnsetVo2max];
    id v38 = [a2 objectForKeyedSubscript:v18];
    long long v39 = *(_OWORD *)(a5 + 16);
    v67[0] = *(_OWORD *)a5;
    v67[1] = v39;
    v68[0] = *(_OWORD *)(a5 + 32);
    *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)(a5 + 44);
    sub_10061E40C((uint64_t)v67);
    float v41 = v40;
    float v42 = 7.0;
    if (v37)
    {
      [objc_msgSend(a2, "objectForKeyedSubscript:", v36) floatValue];
      float v42 = v43;
    }
    float v44 = *(float *)(a5 + 44);
    if (!*(unsigned char *)(a1 + 392)) {
      float v44 = 7.0;
    }
    float v45 = fmaxf(fmaxf(v44, v41), v42);
    float v46 = v45;
    if (v33 == v34) {
      float v46 = sub_1012989E0(a1, v45, *(float *)(a3 + 16));
    }
    BOOL v64 = v37 != 0;
    BOOL v65 = v38 != 0;
    BOOL v47 = v35 != 0;
    *(float *)(a5 + 16) = fmaxf(v46, 7.0);
    double v48 = v41;
    double v49 = v45;
  }
  else
  {
    BOOL v64 = 0;
    BOOL v65 = 0;
    BOOL v47 = 0;
    float v46 = 7.0;
    double v49 = 7.0;
    float v42 = 7.0;
    double v48 = 7.0;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  uint64_t v50 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    double v51 = *(float *)(a5 + 44);
    int v52 = *(unsigned __int8 *)(a1 + 392);
    double v53 = *(float *)(a3 + 16);
    double v54 = *(float *)(a5 + 16);
    double v55 = *(float *)(a5 + 52);
    *(_DWORD *)std::string buf = 134221312;
    double v98 = v51;
    __int16 v99 = 1024;
    int v100 = v52;
    __int16 v101 = 1024;
    BOOL v102 = v47;
    __int16 v103 = 2048;
    double v104 = v42;
    __int16 v105 = 1024;
    BOOL v106 = v64;
    __int16 v107 = 2048;
    double v108 = v48;
    __int16 v109 = 1024;
    BOOL v110 = v65;
    __int16 v111 = 2048;
    double v112 = v53;
    __int16 v113 = 2048;
    double v114 = v49;
    __int16 v115 = 2048;
    double v116 = v46;
    __int16 v117 = 2048;
    double v118 = v54;
    __int16 v119 = 1024;
    int v120 = a4;
    __int16 v121 = 1024;
    BOOL v122 = v33 != v34;
    __int16 v123 = 2048;
    double v124 = v55;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "UserProfile,runVo2maxVal,%f,runVo2maxFlag,%d,runVo2maxUpdatedFlag,%d,hronsetVo2max,%f,hronsetVo2maxFlag,%d,derivedVo2max,%f,derivedVo2maxFlag,%d,oldVo2max,%f,estimatedVo2max,%f,mergedVo2max,%f,boundedVo2max,%f,doMerge,%d,betaBlockerUseChanged,%d,adaptiveEmThresh,%f", buf, 0x76u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    double v57 = *(float *)(a5 + 44);
    int v58 = *(unsigned __int8 *)(a1 + 392);
    double v59 = *(float *)(a3 + 16);
    double v60 = *(float *)(a5 + 16);
    double v61 = *(float *)(a5 + 52);
    int v69 = 134221312;
    double v70 = v57;
    __int16 v71 = 1024;
    int v72 = v58;
    __int16 v73 = 1024;
    BOOL v74 = v47;
    __int16 v75 = 2048;
    double v76 = v42;
    __int16 v77 = 1024;
    BOOL v78 = v64;
    __int16 v79 = 2048;
    double v80 = v48;
    __int16 v81 = 1024;
    BOOL v82 = v65;
    __int16 v83 = 2048;
    double v84 = v59;
    __int16 v85 = 2048;
    double v86 = v49;
    __int16 v87 = 2048;
    double v88 = v46;
    __int16 v89 = 2048;
    double v90 = v60;
    __int16 v91 = 1024;
    int v92 = a4;
    __int16 v93 = 1024;
    BOOL v94 = v33 != v34;
    __int16 v95 = 2048;
    double v96 = v61;
    __int16 v62 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLBodyMetrics CLNatalimetryNotifier::setUserProfileToBodyMetrics(NSDictionary *, const CLBodyMetrics &, BOOL) const", "%s\n", v62);
    if (v62 != (char *)buf) {
      free(v62);
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  __int16 v56 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138477827;
    double v98 = *(double *)&a2;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "UserProfile, update completed with result, %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v69 = 138477827;
    double v70 = *(double *)&a2;
    double v63 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLBodyMetrics CLNatalimetryNotifier::setUserProfileToBodyMetrics(NSDictionary *, const CLBodyMetrics &, BOOL) const", "%s\n", v63);
    if (v63 != (char *)buf) {
      free(v63);
    }
  }
}

uint64_t sub_1012985A0()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)(sub_1000D2E34(0) + 56) + 16);

  return v0();
}

uint64_t sub_101298614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 368);
  if (v2)
  {
    uint64_t v3 = (_OWORD *)(*(void *)(a1 + 2752) + 1352);
    *(_OWORD *)&v22[12] = *(_OWORD *)(*(void *)(a1 + 2752) + 1396);
    long long v4 = v3[1];
    *(_OWORD *)std::string buf = *v3;
    long long v21 = v4;
    *(_OWORD *)uint64_t v22 = v3[2];
    if (v22[25])
    {
      v19[0] = *(float *)&buf[8];
      sub_100163398(v2, CMNatalimeterSetUserHeightMeter, v19);
    }
    else
    {
      sub_1004CF870(v2);
    }
    uint64_t v9 = *(void *)(a1 + 368);
    if (v22[26])
    {
      v19[0] = *(float *)&buf[12];
      sub_100163398(v9, CMNatalimeterSetUserWeightKG, v19);
    }
    else
    {
      sub_1004CF870(v9);
    }
    uint64_t v10 = *(void *)(a1 + 368);
    if (v22[24])
    {
      v19[0] = *((float *)&v21 + 1);
      sub_100163398(v10, CMNatalimeterSetUserAgeYr, v19);
    }
    else
    {
      sub_1004CF870(v10);
    }
    uint64_t v11 = *(void *)(a1 + 368);
    LODWORD(v19[0]) = *(_DWORD *)buf;
    sub_1000EA2A4(v11, CMNatalimeterSetUserBiologicalSex, v19);
    uint64_t v12 = *(void *)(a1 + 368);
    LODWORD(v19[0]) = *(_DWORD *)&buf[4];
    sub_1000EA2A4(v12, @"HKBiologicalSex", v19);
    uint64_t v13 = *(void *)(a1 + 368);
    v19[0] = *(float *)&v22[4];
    sub_100163398(v13, CMNatalimeterSetUserPal, v19);
    uint64_t v14 = *(void *)(a1 + 368);
    v19[0] = *((float *)&v21 + 2);
    sub_100163398(v14, CMNatalimeterSetUserHrmin, v19);
    uint64_t v15 = *(void *)(a1 + 368);
    v19[0] = *(float *)&v21;
    sub_100163398(v15, CMNatalimeterSetUserVo2max, v19);
    uint64_t v16 = *(void *)(a1 + 368);
    v19[0] = *(float *)&v22[12];
    sub_100163398(v16, CMNatalimeterSetUserRunVo2max, v19);
    uint64_t v17 = *(void *)(a1 + 368);
    v19[0] = *(float *)&v22[20];
    sub_100163398(v17, CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold, v19);
    uint64_t v18 = *(void *)(a1 + 368);
    LODWORD(v19[0]) = *(_DWORD *)&v22[8];
    sub_1000EA2A4(v18, CMNatalimeterSetUserCondition, v19);
    sub_1000EA52C(*(void *)(a1 + 368), CMNatalimeterSetUserBetaBlockerUse, &v22[16]);
    return (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 944))();
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    float v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "UserProfile, Persistent store not yet initialized ", buf, 2u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      LOWORD(v19[0]) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::persistCachedValues()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
  }
  return result;
}

float sub_1012989E0(uint64_t a1, float a2, float a3)
{
  v19[0] = 0;
  uint64_t v18 = 0x10000000000000;
  uint64_t v6 = sub_1000A6958();
  sub_10013E418(v6, @"NumActiveCalibrations", v19);
  uint64_t v7 = sub_1000A6958();
  sub_1000A6A10(v7, @"TimeFirstPAL", &v18);
  float v8 = a2 - a3;
  float v9 = (float)(v8 * 100.0) / a3;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  uint64_t v10 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(_DWORD *)(a1 + 2840);
    uint64_t v12 = *(void *)(a1 + 2848);
    *(_DWORD *)std::string buf = 67109632;
    int v25 = v11;
    __int16 v26 = 2048;
    uint64_t v27 = v12;
    __int16 v28 = 2048;
    double v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "UserProfile, Number of active vo2max calibrations, %d, first PAL estimate at, %.3f, VO2max delta, %f", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v15 = *(_DWORD *)(a1 + 2840);
    uint64_t v16 = *(void *)(a1 + 2848);
    v19[1] = 67109632;
    double v19[2] = v15;
    __int16 v20 = 2048;
    uint64_t v21 = v16;
    __int16 v22 = 2048;
    double v23 = v9;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLNatalimetryNotifier::mergeVo2max(float, float) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  double v13 = -2.0;
  if (v9 > 0.0) {
    double v13 = 20.0;
  }
  return v13 * fabsf(v8) / 100.0 + a3;
}

BOOL sub_101298C64(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 376);
  if (!*(unsigned char *)(a1 + 376)) {
    operator new();
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  uint64_t v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "UserProfile, read before device unlock", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::readFromDisk(CLBodyMetrics &)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v1 == 0;
}

void sub_10129907C()
{
}

uint64_t sub_1012990A8(void *a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (sub_10129948C(a1 + 56, v9) && vabdd_f64(v9[0], Current) < 10.0)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218752;
      double v20 = Current;
      __int16 v21 = 2048;
      double v22 = v9[0];
      __int16 v23 = 2048;
      uint64_t v24 = v10;
      __int16 v25 = 1024;
      int v26 = 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GPS availability at time %lf, companion time, %lf, GPS timestamp, %lf, %d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v11 = 134218752;
      double v12 = Current;
      __int16 v13 = 2048;
      double v14 = v9[0];
      __int16 v15 = 2048;
      uint64_t v16 = v10;
      __int16 v17 = 1024;
      int v18 = 1;
      float v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::checkAndNotifyGpsAvailability()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint8_t v4 = 1;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    float v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      double v20 = Current;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "GPS not available at time %lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v11 = 134217984;
      double v12 = Current;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::checkAndNotifyGpsAvailability()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    uint8_t v4 = 0;
  }
  bzero(buf, 0x590uLL);
  buf[0] = v4;
  int v11 = 1;
  return (*(uint64_t (**)(void *, int *, uint8_t *, uint64_t, uint64_t, void))(*a1 + 152))(a1, &v11, buf, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_10129948C(void *a1, _OWORD *a2)
{
  uint64_t v2 = a1[4];
  if (a1[5] == v2) {
    return 0;
  }
  unint64_t v3 = a1[7];
  unint64_t v4 = v3 + a1[8];
  unint64_t v5 = v4 / 0x15;
  unint64_t v6 = v4 % 0x15;
  uint64_t v7 = *(void *)(v2 + 8 * (v4 / 0x15)) + 192 * (v4 % 0x15);
  if (v7 == *(void *)(v2 + 8 * (v3 / 0x15)) + 192 * (v3 % 0x15)) {
    return 0;
  }
  if (!v6) {
    uint64_t v7 = *(void *)(v2 + 8 * v5 - 8) + 4032;
  }
  long long v8 = *(_OWORD *)(v7 - 192);
  long long v9 = *(_OWORD *)(v7 - 176);
  long long v10 = *(_OWORD *)(v7 - 144);
  a2[2] = *(_OWORD *)(v7 - 160);
  a2[3] = v10;
  *a2 = v8;
  a2[1] = v9;
  long long v11 = *(_OWORD *)(v7 - 128);
  long long v12 = *(_OWORD *)(v7 - 112);
  long long v13 = *(_OWORD *)(v7 - 80);
  a2[6] = *(_OWORD *)(v7 - 96);
  a2[7] = v13;
  a2[4] = v11;
  a2[5] = v12;
  long long v14 = *(_OWORD *)(v7 - 64);
  long long v15 = *(_OWORD *)(v7 - 48);
  long long v16 = *(_OWORD *)(v7 - 16);
  a2[10] = *(_OWORD *)(v7 - 32);
  a2[11] = v16;
  a2[8] = v14;
  a2[9] = v15;
  return 1;
}

void sub_101299548(uint64_t a1, uint64_t a2)
{
  if (objc_opt_class())
  {
    id v4 = +[HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierVO2Max];
    unint64_t v5 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)a2];
    unint64_t v6 = +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:@"ml/(kg*min)"], round(*(double *)(a2 + 16) * 100.0) / 100.0);
    if (uuid_is_null((const unsigned __int8 *)(a2 + 28))) {
      id v7 = 0;
    }
    else {
      id v7 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 28];
    }
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    [v8 setObject:&off_1023944A8 forKeyedSubscript:HKMetadataKeyVO2MaxTestType];
    if (*(unsigned char *)(a2 + 25)) {
      long long v9 = &__kCFBooleanTrue;
    }
    else {
      long long v9 = &__kCFBooleanFalse;
    }
    [v8 setObject:v9 forKeyedSubscript:_HKPrivateMetadataKeyUserOnBetaBlocker];
    if (v7)
    {
      [v8 setObject:objc_msgSend(v7, "UUIDString") forKeyedSubscript:HKMetadataKeySyncIdentifier];
      [v8 setObject:&off_1023944C0 forKeyedSubscript:HKMetadataKeySyncVersion];
    }
    long long v10 = +[HKQuantitySample quantitySampleWithType:v4 quantity:v6 startDate:v5 endDate:v5 metadata:v8];
    long long v11 = *(void **)(a1 + 2784);
    long long v12 = v10;
    [v11 saveObjects:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1)] withCompletion:&stru_10231B818];
  }
}

uint64_t sub_101299764()
{
  BOOL v4 = 0;
  uint64_t v0 = sub_1000D3E78();
  sub_10006B564(v0, &v2);
  sub_1000D2988(v2, "ForceTriggerVO2MaxAlert", &v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_100103240();
  LODWORD(result) = sub_10073E30C();
  if (v4) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_1012997D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

id sub_1012997E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id result = (id)sub_101299870(v1);
  if (result)
  {
    unint64_t v3 = *(void **)(v1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_101299BF4;
    void v4[3] = &unk_1022A3020;
    unsigned char v4[4] = v1;
    return [v3 async:v4];
  }
  return result;
}

BOOL sub_101299870(uint64_t a1)
{
  id v1 = [objc_alloc((Class)HKHRCardioFitnessFeatureStatusManager) initWithHealthStore:*(void *)(a1 + 2784)];
  long long v14 = 0;
  id v2 = [v1 notificationStatusWithError:&v14];
  if (v14)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    unint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138543362;
      id v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error retrieving cardio fitness notification status, %{public}@", buf, 0xCu);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v15 = 138543362;
      id v16 = v14;
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::isVO2MaxAlertEnabled() const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  else
  {
    id v7 = v2;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v8 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [v7 state];
      id v10 = [v7 notificationUnavailableReasons];
      *(_DWORD *)std::string buf = 134349312;
      id v20 = v9;
      __int16 v21 = 2050;
      id v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Cardio fitness, notificationState, %{public}ld, notificationUnavailableReasons, %{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      id v11 = [v7 state];
      id v12 = [v7 notificationUnavailableReasons];
      int v15 = 134349312;
      id v16 = v11;
      __int16 v17 = 2050;
      id v18 = v12;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::isVO2MaxAlertEnabled() const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return [v7 state] == (id)1;
  }
  return result;
}

void sub_101299BF4(uint64_t a1)
{
}

void sub_101299C00(uint64_t a1, int a2)
{
  *(double *)&uint64_t v30 = 15.0;
  uint64_t v4 = sub_1000D3E78();
  sub_10006B564(v4, buf);
  sub_1000A699C(*(uint64_t *)buf, "FakeCardioFitnessVO2Max", &v30);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_100D378AC(v29);
  uint64_t v5 = *(void *)(a1 + 2752);
  char v6 = *(unsigned char *)(v5 + 1400);
  double v28 = sub_100D37CBC(v29, *(_DWORD *)(v5 + 1356), (int)*(float *)(v5 + 1372));
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000A699C(*(uint64_t *)buf, "FakeCardioFitnessThreshold", &v28);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v8 = sub_1000D3E78();
  sub_10006B564(v8, buf);
  sub_1000A699C(*(uint64_t *)buf, "FakeCardioFitnessEndTime", &Current);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  double v26 = Current + -5184000.0;
  uint64_t v9 = sub_1000D3E78();
  sub_10006B564(v9, buf);
  sub_1000A699C(*(uint64_t *)buf, "FakeCardioFitnessStartTime", &v26);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  BOOL v25 = 0;
  uint64_t v10 = sub_1000D3E78();
  sub_10006B564(v10, buf);
  sub_1000D2988(*(uint64_t *)buf, "FakeCardioFitnessIsRepeatAlert", &v25);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  double v11 = *(double *)&v30;
  double v13 = Current;
  double v12 = v28;
  double v14 = v26;
  BOOL v15 = v25;
  if (a2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v16 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134283777;
      *(double *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Forcing a fake VO2Max sample: vo2Max, %{private}.2f, startTime, %{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v31 = 134283777;
      double v32 = v11;
      __int16 v33 = 2050;
      double v34 = v13;
      float v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeFakeCardioFitnessEventToHealthKit(BOOL) const", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    *(double *)std::string buf = v13;
    *(void *)&uint8_t buf[8] = 0;
    *(double *)&uint8_t buf[16] = v11;
    v42[0] = 0;
    v42[1] = v6 & 1;
    *(void *)float v43 = 0;
    *(void *)&v42[2] = 0;
    *(_DWORD *)&_DWORD v43[7] = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v44 = 0;
    uuid_clear(&v42[4]);
    sub_101299548(a1, (uint64_t)buf);
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  __int16 v17 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134284545;
    *(double *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)&unsigned char buf[14] = v12;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(double *)float v42 = v14;
    *(_WORD *)&v42[8] = 2050;
    *(double *)float v43 = v13;
    *(_WORD *)&v43[8] = 1025;
    *(_DWORD *)&v43[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Forcing a fake Cardio Fitness Event: latestVO2Max, %{private}.2f, lowClassificationThreshold, %{private}.2f, alertPeriodStartTime, %{public}f, alertPeriodEndTime, %{public}f, isRepeatAlert, %{private}d", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v31 = 134284545;
    double v32 = v11;
    __int16 v33 = 2049;
    double v34 = v12;
    __int16 v35 = 2050;
    double v36 = v14;
    __int16 v37 = 2050;
    double v38 = v13;
    __int16 v39 = 1025;
    BOOL v40 = v15;
    id v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeFakeCardioFitnessEventToHealthKit(BOOL) const", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  LOBYTE(v20[0]) = 1;
  *(_DWORD *)((char *)v20 + 1) = *(_DWORD *)v24;
  HIDWORD(v20[0]) = *(_DWORD *)&v24[3];
  v20[1] = v11;
  v20[2] = v12;
  void v20[3] = v14;
  unsigned char v20[4] = v13;
  BOOL v21 = v15;
  v22[0] = *(_DWORD *)v23;
  *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)&v23[3];
  sub_10129F05C(a1, v20);
  *(void *)std::string buf = v29;
  sub_1001DCABC((void ***)buf);
}

void sub_10129A174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a23;
  sub_1001DCABC(&a33);
  _Unwind_Resume(a1);
}

void sub_10129A1F0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  switch(*a3)
  {
    case 2:
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v7 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a4 + 8);
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received Onset notification from CatherineNotifier (%f bpm)!", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v46 = *(void *)(a4 + 8);
        LODWORD(v58) = 134217984;
        *(void *)((char *)&v58 + 4) = v46;
        BOOL v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v47);
        if (v47 != (char *)&buf) {
          free(v47);
        }
      }
      uint64_t v65 = CMNatalimeterSetUserHronset;
      __int16 v66 = +[NSNumber numberWithDouble:*(double *)(a4 + 8)];
      sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1], 0, 0);
      if ((*(_DWORD *)a4 - 3) <= 1)
      {
        long long v9 = *(_OWORD *)a4;
        long long v10 = *(_OWORD *)(a4 + 16);
        long long v11 = *(_OWORD *)(a4 + 48);
        *(_OWORD *)(a1 + 2888) = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a1 + 2904) = v11;
        *(_OWORD *)(a1 + 2856) = v9;
        *(_OWORD *)(a1 + 2872) = v10;
        *(unsigned char *)(a1 + 2928) = 1;
      }
      double Current = CFAbsoluteTimeGetCurrent();
      if (*(unsigned char *)(a1 + 353))
      {
        double v13 = Current;
        *(void *)&long long v58 = off_1022E6F00;
        *((double *)&v58 + 1) = Current;
        uint64_t v59 = *(void *)a4;
        long long v60 = *(_OWORD *)(a4 + 8);
        char v61 = *(unsigned char *)(a4 + 24);
        long long v62 = *(_OWORD *)(a4 + 32);
        uint64_t v63 = *(void *)(a4 + 48);
        BOOL v64 = *(_DWORD *)(a4 + 56) == 5;
        uint64_t v14 = sub_101282D9C();
        sub_10128431C(v14, (uint64_t)&v58);
        sub_10170140C(&buf);
        sub_1017276C8((uint64_t)&buf);
        v57 |= 1u;
        double v55 = v13;
        uint64_t v15 = v56;
        int v16 = *(_DWORD *)a4;
        *(_WORD *)(v56 + 68) |= 0x40u;
        *(_DWORD *)(v15 + 52) = v16;
        uint64_t v17 = v56;
        int v18 = *(_DWORD *)(a4 + 4);
        *(_WORD *)(v56 + 68) |= 0x80u;
        *(_DWORD *)(v17 + 56) = v18;
        uint64_t v19 = v56;
        uint64_t v20 = *(void *)(a4 + 8);
        *(_WORD *)(v56 + 68) |= 2u;
        *(void *)(v19 + 16) = v20;
        uint64_t v21 = v56;
        uint64_t v22 = *(void *)(a4 + 16);
        *(_WORD *)(v56 + 68) |= 1u;
        *(void *)(v21 + 8) = v22;
        uint64_t v23 = v56;
        LOBYTE(v18) = *(unsigned char *)(a4 + 24);
        *(_WORD *)(v56 + 68) |= 0x200u;
        *(unsigned char *)(v23 + 64) = v18;
        uint64_t v24 = v56;
        uint64_t v25 = *(void *)(a4 + 32);
        *(_WORD *)(v56 + 68) |= 0x10u;
        *(void *)(v24 + 40) = v25;
        uint64_t v26 = v56;
        uint64_t v27 = *(void *)(a4 + 40);
        *(_WORD *)(v56 + 68) |= 8u;
        *(void *)(v26 + 32) = v27;
        uint64_t v28 = v56;
        uint64_t v29 = *(void *)(a4 + 48);
        *(_WORD *)(v56 + 68) |= 4u;
        *(void *)(v28 + 24) = v29;
        uint64_t v30 = v56;
        int v31 = *(_DWORD *)(a4 + 56);
        *(_WORD *)(v56 + 68) |= 0x20u;
        *(_DWORD *)(v30 + 48) = v31;
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_10231C278);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)&buf);
        }
        sub_101706914((PB::Base *)&buf);
      }
      break;
    case 3:
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      double v32 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = *(void *)(a4 + 8);
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Updating min. HR, %f", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v48 = *(void *)(a4 + 8);
        LODWORD(v58) = 134217984;
        *(void *)((char *)&v58 + 4) = v48;
        double v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v49);
        if (v49 != (char *)&buf) {
          free(v49);
        }
      }
      uint64_t v50 = CMNatalimeterSetUserHrmin;
      double v51 = +[NSNumber numberWithDouble:*(double *)(a4 + 8)];
      sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v51 forKeys:&v50 count:1], 0, 0);
      break;
    case 5:
      sub_1010B81D0(a1 + 3168, (int *)a4);
      sub_100F96F8C((void *)(a1 + 5096), a4);
      uint64_t v38 = *(void *)(a4 + 8);
      double v39 = *(double *)(a4 + 16);
      *(void *)&long long buf = *(void *)(a4 + 40);
      *((void *)&buf + 1) = v38;
      BOOL v54 = *(_DWORD *)a4 == 4;
      double v40 = 1.0;
      if (!v54) {
        double v40 = v39;
      }
      double v53 = v40;
      sub_1012AA5F0((void *)(a1 + 1304), (uint64_t)&buf);
      break;
    case 6:
      if (*(_DWORD *)(a4 + 24) == 2)
      {
        double v41 = *(double *)(a4 + 16);
        uint64_t v42 = a1 + 3168;
        sub_1010B82CC(v42, v41);
      }
      break;
    case 7:
      uint64_t v43 = a1 + 3168;
      float v44 = *(double *)(a4 + 16);
      float v45 = *(double *)(a4 + 24);
      sub_1010B8254(v43, v44, v45);
      break;
    default:
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      double v34 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
      {
        int v35 = *a3;
        LODWORD(buf) = 67240192;
        DWORD1(buf) = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Natalimetry Notifier received unexpected catherine type: %{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v36 = *a3;
        LODWORD(v58) = 67240192;
        DWORD1(v58) = v36;
        __int16 v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v37);
        if (v37 != (char *)&buf) {
          free(v37);
        }
      }
      break;
  }
}

void sub_10129AA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

double sub_10129AA60(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_1012AA5F0((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

void sub_10129AA68(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a3 == 1)
  {
    *(unsigned char *)(a1 + 377) = *((unsigned char *)a4 + 4);
  }
  else if (!*a3)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    char v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(unsigned __int8 *)(a1 + 376);
      int v8 = *a4;
      BOOL v9 = *a4 != 1;
      *(_DWORD *)long long buf = 67109632;
      int v25 = v7;
      __int16 v26 = 1024;
      BOOL v27 = v9;
      __int16 v28 = 1024;
      int v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "UserProfile, Encrypted data availability, was, %d, now, %d, availability, %d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v12 = *(unsigned __int8 *)(a1 + 376);
      int v13 = *a4;
      BOOL v14 = *a4 != 1;
      int v18 = 67109632;
      int v19 = v12;
      __int16 v20 = 1024;
      BOOL v21 = v14;
      __int16 v22 = 1024;
      int v23 = v13;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    BOOL v10 = *a4 == 1;
    *(unsigned char *)(a1 + 376) = *a4 != 1;
    if (v10)
    {
      if (!*(unsigned char *)(a1 + 416)) {
        sub_101293330(a1);
      }
      uint64_t v16 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
      *(float *)&double v11 = sub_100E95B4C(a1 + 5168, (float *)(*(void *)(a1 + 2752) + 1352));
      uint64_t v17 = +[NSNumber numberWithFloat:v11];
      sub_101297350(a1, +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1], 0, 0);
      if ([*(id *)(a1 + 384) count])
      {
        if (sub_101298614(a1)) {
          [*(id *)(a1 + 384) removeAllObjects];
        }
      }
    }
    sub_1011FC690(a1 + 2936, *(unsigned char *)(a1 + 376) == 0);
  }
}

void sub_10129AD38(uint64_t a1, uint64_t a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 376);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "UserProfile, Received from SPU, data protection enabled %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onStoredUserInfo(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (!*(unsigned char *)(a1 + 416))
  {
    sub_101297D48(a1, *(void **)(a1 + 384), a2, 1, (uint64_t)buf);
    sub_1012931B4(a1, (long long *)buf);
  }
}

void sub_10129AF1C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    char v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a4;
      int v7 = a4[1];
      *(_DWORD *)long long buf = 67240448;
      int v11 = v7;
      __int16 v12 = 1026;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    *(void *)(a1 + 2704) = *(void *)a4;
  }
}

uint64_t sub_10129B0FC(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v4 = result;
  int v5 = *a3;
  if (!*a3)
  {
    uint64_t v7 = *(void *)(result + 2752);
    if (*(unsigned char *)(a4 + 3)) {
      sub_10061EBA8(v7);
    }
    else {
      sub_10061E744(v7);
    }
    char v6 = *(uint64_t (**)(void))(**(void **)(v4 + 2776) + 8);
    return v6();
  }
  if (v5 == 5)
  {
    char v6 = *(uint64_t (**)(void))(**(void **)(result + 2776) + 16);
    return v6();
  }
  if (v5 == 4)
  {
    *(_DWORD *)(result + 5032) = *(_DWORD *)a4;
    char v6 = ***(uint64_t (****)(void))(result + 2776);
    return v6();
  }
  return result;
}

void sub_10129B240(uint64_t a1, unint64_t *a2)
{
  v7.n128_u64[0] = 0;
  v7.n128_u64[1] = *a2;
  uint64_t v8 = 0;
  sub_10129B410(a1 + 208, &v7);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  unint64_t v3 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v4 = *a2;
    *(_DWORD *)long long buf = 134349056;
    unint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ExerciseMinute, startTime, %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    unint64_t v5 = *a2;
    int v9 = 134349056;
    unint64_t v10 = v5;
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::onExerciseMinuteUpdate(const ExerciseMinuteUpdate &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

uint64_t sub_10129B410(uint64_t a1, __n128 *a2)
{
  uint64_t result = sub_1012AA998(*(void *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 41))
  {
    uint64_t result = sub_100082064(*(void *)(a1 + 24) + 72);
    if (result)
    {
      *(unsigned char *)(a1 + 41) = 1;
      return sub_101296510(a1);
    }
  }
  return result;
}

void sub_10129B478(uint64_t a1, unint64_t *a2)
{
}

uint64_t sub_10129B480(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1012AAF38(*(void *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 41))
  {
    uint64_t result = sub_100082064(*(void *)(a1 + 24) + 72);
    if (result)
    {
      *(unsigned char *)(a1 + 41) = 1;
      return sub_1012959A0(a1);
    }
  }
  return result;
}

void sub_10129B4E8(uint64_t a1, int a2)
{
  if (sub_10125D0BC())
  {
    if (a2)
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      unint64_t v4 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enabled device motion for calorimetry", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startStopDeviceMotion(BOOL)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      uint64_t v5 = sub_10125D0BC();
      sub_10125DACC(v5, *(void *)(a1 + 5440), 0.01);
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      char v6 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disabled device motion for calorimetry", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startStopDeviceMotion(BOOL)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      uint64_t v7 = sub_10125D0BC();
      sub_10125DDA0(v7, *(void *)(a1 + 5440));
    }
  }
}

uint64_t sub_10129B7D4(uint64_t a1, uint64_t *a2)
{
  int8x16_t v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 1)), *(float64x2_t *)(a2 + 3));
  int8x16_t v13 = vextq_s8(v4, v4, 4uLL);
  float32x4_t v8 = *(float32x4_t *)(a2 + 5);
  uint64_t v5 = a2[7];
  sub_100B9BEAC((float32x4_t *)&v13, v8);
  v9[0] = v13;
  v9[1] = v8;
  uint64_t v6 = *a2;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  return sub_10088179C(a1 + 2640, (uint64_t)v9);
}

void sub_10129B85C(uint64_t a1, double *a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  int8x16_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)long long buf = 134349056;
    uint64_t v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MoveMinute, startTime, %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v10 = *(void *)a2;
    int v14 = 134349056;
    uint64_t v15 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::onMoveMinuteUpdate(const MoveMinuteUpdate &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (objc_opt_class())
  {
    uint64_t v6 = *(void *)a2;
    id v7 = [objc_alloc((Class)NSDateInterval) initWithStartDate:[NSDate dateWithTimeIntervalSinceReferenceDate:a2] duration:60.0];
    id v8 = [objc_alloc((Class)HKQuantityDatum) initWithIdentifier:v7 dateInterval:v7 quantity:[HKQuantity quantityWithUnit:v7 doubleValue:60.0] resumeContext:0];
    int v9 = *(void **)(a1 + 2792);
    id v13 = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _DWORD v12[2] = sub_10129BB5C;
    v12[3] = &unk_10231B778;
    void v12[4] = v6;
    [v9 insertDatums:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1) device:[+[HKDevice localDevice](HKDevice, "localDevice")] metadata:0 completion:v12];
  }
}

void sub_10129BB5C(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10231C298);
    }
    int8x16_t v4 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134349056;
      uint64_t v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector successfully pushed move minute update with startTime, %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10231C298);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::onMoveMinuteUpdate(const MoveMinuteUpdate &)_block_invoke", "%s\n");
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10231C298);
    }
    id v8 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134349314;
      uint64_t v11 = v9;
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKDataCollector, insertDatums failed to insert a move minute with startTime, %{public}f, error, %{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10231C298);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNatalimetryNotifier::onMoveMinuteUpdate(const MoveMinuteUpdate &)_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10129BE64(uint64_t a1, double *a2)
{
}

uint64_t sub_10129BE6C(uint64_t a1, int a2)
{
  uint64_t result = objc_opt_class();
  if (result)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2776) + 32))(*(void *)(a1 + 2776), 1);
      *(_DWORD *)long long buf = 67240192;
      int v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to start calorie collectors, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 2776) + 32))(*(void *)(a1 + 2776), 1);
      int v17 = 67240192;
      int v18 = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (!*(void *)(a1 + 2800))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      id v7 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        int v20 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting active energy collector, handleHistorical, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v17 = 67240192;
        int v18 = a2;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      id v8 = [objc_alloc((Class)HKDataCollector) initWithHealthStore:*(void *)(a1 + 2784) bundleIdentifier:@"com.apple.locationd" quantityType:[HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierActiveEnergyBurned]];
      *(void *)(a1 + 2800) = v8;
      if (a2)
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_10129C4B8;
        _DWORD v16[3] = &unk_10231B798;
        v16[4] = a1;
        [v8 resumeWithCompletion:v16];
      }
      else
      {
        *(unsigned char *)(*(void *)(a1 + 128) + 456) = 1;
      }
    }
    if (!*(void *)(a1 + 2808))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v9 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        int v20 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting basal energy collector, handleHistorical, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v17 = 67240192;
        int v18 = a2;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      id v10 = [objc_alloc((Class)HKDataCollector) initWithHealthStore:*(void *)(a1 + 2784) bundleIdentifier:@"com.apple.locationd" quantityType:[HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierBasalEnergyBurned]];
      *(void *)(a1 + 2808) = v10;
      if (a2)
      {
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        void v15[2] = sub_10129CFB8;
        v15[3] = &unk_10231B798;
        v15[4] = a1;
        [v10 resumeWithCompletion:v15];
      }
      else
      {
        *(unsigned char *)(*(void *)(a1 + 128) + 457) = 1;
      }
    }
    int v17 = 10;
    bzero(buf, 0x590uLL);
    buf[0] = 1;
    return (*(uint64_t (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v17, buf, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10129C4B8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a3)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get last active energy sample with error %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_10129C688(*(void *)(a1 + 32), *(void **)(v4 + 2800), a2);
  }
  *(unsigned char *)(*(void *)(v4 + 128) + 456) = 1;
}

void sub_10129C688(uint64_t a1, void *a2, void *a3)
{
  if (!objc_opt_class()) {
    return;
  }
  if (objc_msgSend(objc_msgSend(a2, "quantityType"), "isEqual:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierActiveEnergyBurned)))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, handling last persisted value for active energy", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      LOWORD(v25) = 0;
LABEL_67:
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if (objc_msgSend(objc_msgSend(a2, "quantityType"), "isEqual:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierBasalEnergyBurned)))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v7 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HKDataCollector, handling last persisted value for basal energy", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      LOWORD(v25) = 0;
      goto LABEL_67;
    }
LABEL_17:
    double v22 = 0.0;
    if (a3)
    {
      [objc_msgSend(objc_msgSend(objc_msgSend(a3, "dateInterval"), "endDate"), "timeIntervalSinceReferenceDate");
      double v9 = v8;
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      id v10 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134349056;
        double v29 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "HKDataCollector, sent last persisted with time %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v25 = 134349056;
        double v26 = v9;
LABEL_62:
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    else
    {
      sub_10146FB64(*(void *)(a1 + 128), (uint64_t)&v25);
      double v9 = v27;
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v11 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134349056;
        double v29 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "HKDataCollector, sent nil last persisted so grabbing earliest record with time %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        int v23 = 134349056;
        double v24 = v9;
        goto LABEL_62;
      }
    }
    sub_10129F534(a1);
    int v12 = 0;
    do
    {
      double v22 = v9 + 3610.0;
      int v13 = sub_10129FAF0(a1, v9, (uint64_t)a2, &v22);
      double v14 = v22;
      if (v9 == v22)
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v15 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134349056;
          double v29 = v9;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "HKDataCollector, query range didn't change with last entry %{public}f, setting new", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_10231B970);
          }
          int v25 = 134349056;
          double v26 = v9;
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        double v14 = v14 + 1.0;
      }
      ++v12;
      double v9 = v14;
    }
    while (!v13);
    sub_10129F81C(a1);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v17 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v29) = v12;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "HKDataCollector, completed query with %{public}d iterations", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v25 = 67240192;
      LODWORD(v26) = v12;
      int v18 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n");
LABEL_72:
      if (v18 != buf) {
        free(v18);
      }
      return;
    }
    return;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  int v19 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "HKDataCollector, unknown collector passed!", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    LOWORD(v25) = 0;
    int v18 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::handleLastPersistedCalorieDatum(HKDataCollector *, HKQuantityDatum *)", "%s\n");
    goto LABEL_72;
  }
}

void sub_10129CFB8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a3)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get last basal energy sample with error %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::startCalorieCollectors(BOOL)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_10129C688(*(void *)(a1 + 32), *(void **)(v4 + 2808), a2);
  }
  *(unsigned char *)(*(void *)(v4 + 128) + 457) = 1;
}

uint64_t sub_10129D188(id *a1)
{
  uint64_t result = objc_opt_class();
  if (result)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    unint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to stop initialized calorie collectors", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      LOWORD(v9[0]) = 0;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (a1[350])
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v4 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping active energy collector", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        LOWORD(v9[0]) = 0;
        id v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      [a1[350] finishWithCompletion:&stru_10231B7B8];

      a1[350] = 0;
    }
    if (a1[351])
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping basal energy collector", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        LOWORD(v9[0]) = 0;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      [a1[351] finishWithCompletion:&stru_10231B7D8];

      a1[351] = 0;
    }
    v9[0] = 10;
    bzero(buf, 0x590uLL);
    return (*((uint64_t (**)(id *, int *, uint8_t *, uint64_t, uint64_t, void))*a1 + 19))(a1, v9, buf, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10129D614(id a1, BOOL a2, NSError *a3)
{
  if (!a3 || a2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, successfully finished with completion for active energy", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n");
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to finish with completion for active energy, error, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n");
LABEL_20:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
}

void sub_10129D8DC(id a1, BOOL a2, NSError *a3)
{
  if (!a3 || a2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, successfully finished with completion for basal energy", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n");
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to finish with completion for basal energy, error, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::stopCalorieCollectors()_block_invoke", "%s\n");
LABEL_20:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
}

void sub_10129DBA4(uint64_t a1)
{
  if (objc_opt_class() && objc_opt_class())
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v2 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to start move minute collector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startMoveMinuteCollector()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    if (!*(void *)(a1 + 2792))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      unint64_t v3 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting move minute collector", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::startMoveMinuteCollector()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      *(void *)(a1 + 2792) = [objc_alloc((Class)HKDataCollector) initWithHealthStore:*(void *)(a1 + 2784) bundleIdentifier:@"com.apple.locationd" quantityType:[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleMoveTime)];
    }
  }
}

void sub_10129DECC(uint64_t a1)
{
  if (objc_opt_class())
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v2 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HKDataCollector, attempting to stop initialized move minute collector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopMoveMinuteCollector()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    if (*(void *)(a1 + 2792))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      unint64_t v3 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping move minute collector", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10231B970);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopMoveMinuteCollector()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      [*(id *)(a1 + 2792) finishWithCompletion:&stru_10231B7F8];

      *(void *)(a1 + 2792) = 0;
    }
  }
}

void sub_10129E1BC(id a1, BOOL a2, NSError *a3)
{
  if (!a3 || a2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    int v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, successfully finished with completion for move minutes", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::stopMoveMinuteCollector()_block_invoke", "%s\n");
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to finish with completion for move minutes, error, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::stopMoveMinuteCollector()_block_invoke", "%s\n");
LABEL_20:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
}

void sub_10129E484(uint64_t a1, int a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "ActiveEnergy";
    if (a2 == 2) {
      uint64_t v5 = "MoveMinutes";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, setting fitness controller to type %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::setFitnessController(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v6 = *(void *)(a1 + 2768);
  *(void *)(a1 + 2768) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  int v7 = *(_DWORD *)(a1 + 5032);
  uint64_t v8 = *(void *)(a1 + 2760);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1008750EC(v7 == 2);
}

void sub_10129E740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_10129E760(uint64_t a1, int a2)
{
}

void sub_10129E768(uint64_t a1, int a2, int a3)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  uint64_t v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = "ActiveEnergy";
    if (a2 == 2) {
      int v7 = "MoveMinutes";
    }
    *(_DWORD *)long long buf = 136446466;
    int v12 = v7;
    __int16 v13 = 1026;
    int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HKDataCollector, starting HK collector for type %{public}s, handleHistorical, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::startHealthKitCollector(CLFitnessTrackingNotifier_Type::ActivityMoveMode, BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a2)
  {
    if (a2 == 2)
    {
      sub_10129DBA4(a1);
    }
    else if (a2 == 1)
    {
      sub_10129BE6C(a1, a3);
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v8 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKDataCollector, attempting to start collector in unknown move mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNatalimetryNotifier::startHealthKitCollector(CLFitnessTrackingNotifier_Type::ActivityMoveMode, BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_10129EAC0(uint64_t a1, int a2, int a3)
{
}

void sub_10129EAC8(id *a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  id v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HKDataCollector, stopping HK collectors", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    unint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalimetryNotifier::stopHealthKitCollector()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10129D188(a1);
  sub_10129DECC((uint64_t)a1);
}

void sub_10129EC6C(uint64_t a1)
{
}

void sub_10129EC74(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    unint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "VO2Max successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::storeVO2maxToHealthKit(const VO2MaxResult &) const_block_invoke", "%s\n");
LABEL_19:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "HKHealthStore, VO2Max, saveObjects failed on, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::storeVO2maxToHealthKit(const VO2MaxResult &) const_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

id sub_10129EF38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = (id)sub_101299870(v2);
  if (result)
  {
    uint64_t v4 = *(void **)(v2 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10129EFCC;
    v5[3] = &unk_1022B8660;
    void v5[4] = v2;
    void v5[5] = *(void *)(a1 + 40);
    return [v4 async:v5];
  }
  return result;
}

void sub_10129EFCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10082D090(v1 + 4864, (uint64_t)v3, *(double *)(a1 + 40), (double)[+[NSTimeZone localTimeZone] secondsFromGMT]);
  if (LOBYTE(v3[0]))
  {
    v2[0] = v3[0];
    v2[1] = v3[1];
    v2[2] = v3[2];
    sub_10129F05C(v1, (double *)v2);
  }
  else if (sub_101299764())
  {
    sub_101299C00(v1, 0);
  }
}

void sub_10129F05C(uint64_t a1, double *a2)
{
  id v4 = [objc_alloc((Class)HKHRCardioFitnessStore) initWithHealthStore:*(void *)(a1 + 2784)];
  uint64_t v5 = +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:@"ml/(kg*min)"], a2[1]);
  uint64_t v6 = +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:@"ml/(kg*min)"], a2[2]);
  id v7 = [objc_alloc((Class)NSDateInterval) initWithStartDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2[3]) endDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2[4])];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  long long v9 = *((_OWORD *)a2 + 1);
  long long v11 = *(_OWORD *)a2;
  long long v12 = v9;
  v10[2] = sub_10129F1C8;
  v10[3] = &unk_10231B838;
  _DWORD v10[4] = a1;
  long long v13 = *((_OWORD *)a2 + 2);
  [v4 saveCardioFitnessEventWithValue:v5 threshold:v6 dateInterval:v7 options:v8 completion:v10];
}

void sub_10129F1C8(void *a1, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a1[4];
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[8];
      uint64_t v7 = a1[9];
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CardioFitnessEvent successfully pushed to HKHRCardioFitnessStore, startTime, %{public}f, endTime, %{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeCardioFitnessEventToHealthKit(VO2MaxAlertResult) const_block_invoke", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = a1[9];
    sub_1009F8E68(*(void *)(v4 + 336), (uint64_t)buf);
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    long long v9 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = a1[8];
      uint64_t v11 = a1[9];
      *(_DWORD *)long long buf = 134349570;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v11;
      __int16 v15 = 2114;
      uint64_t v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CardioFitnessEvent failed to push to HKHRCardioFitnessStore, startTime, %{public}f, endTime, %{public}f, error, %{public}@", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::writeCardioFitnessEventToHealthKit(VO2MaxAlertResult) const_block_invoke", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
  }
}

CLOSTransaction *sub_10129F534(uint64_t a1)
{
  if (*(void *)(a1 + 2816))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v2 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "HKDataCollector, attempting to create HistoricalPush transaction before releasing previous one", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::createPushTransaction()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_10129F81C(a1);
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231B970);
  }
  unint64_t v3 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKDataCollector, creating HistoricalPush transaction", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::createPushTransaction()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id result = [[CLOSTransaction alloc] initWithDescription:"CLNatalimetryNotifier.HistoricalPush"];
  *(void *)(a1 + 2816) = result;
  return result;
}

void sub_10129F81C(uint64_t a1)
{
  if (*(void *)(a1 + 2816))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v2 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HKDataCollector, releasing HistoricalPush transaction", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::releasePushTransaction()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }

    *(void *)(a1 + 2816) = 0;
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    unint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HKDataCollector, attempting to release HistoricalPush transaction after it was released", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::releasePushTransaction()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_10129FAF0(uint64_t a1, double a2, uint64_t a3, double *a4)
{
  if (objc_opt_class())
  {
    int v7 = sub_10146EC64(*(void *)(a1 + 128));
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v8 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      CFAbsoluteTime v9 = *a4;
      *(_DWORD *)long long buf = 134349824;
      double v15 = a2;
      __int16 v16 = 2050;
      CFAbsoluteTime v17 = v9;
      __int16 v18 = 2050;
      uint64_t v19 = 0;
      __int16 v20 = 1026;
      int v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKDataCollector, query from %{public}f to %{public}f returned %{public}lu records with result %{public}d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNatalimetryNotifier::queryCalorimetryDatabase(HKDataCollector *, CFAbsoluteTime, CFAbsoluteTime &) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v10 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      double v15 = 0.0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "HKDataCollector, unable to perform incremental calculation since only %{public}lu entries in db", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNatalimetryNotifier::queryCalorimetryDatabase(HKDataCollector *, CFAbsoluteTime, CFAbsoluteTime &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *a4 = CFAbsoluteTimeGetCurrent();
  }
  else
  {
    *a4 = CFAbsoluteTimeGetCurrent();
  }
  return 1;
}

void sub_1012A0260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012A0298(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "HKDataCollector, successfully pushed energy sample", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      CFAbsoluteTime v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalimetryNotifier::writeDatumsToDataCollector(BOOL, HKDataCollector *, NSArray<HKQuantityDatum *> *) const_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v6 = 2824;
    if (!*(unsigned char *)(a1 + 48)) {
      uint64_t v6 = 2832;
    }
    *(void *)(v4 + v6) = *(void *)(a1 + 40);
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v8 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to insert energy sample, error, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNatalimetryNotifier::writeDatumsToDataCollector(BOOL, HKDataCollector *, NSArray<HKQuantityDatum *> *) const_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_1012A0598()
{
}

void sub_1012A0654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1012A0690(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_10231CF88;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1012A0774(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        CFAbsoluteTime v9 = (uint64_t *)v4;
      }
      else {
        CFAbsoluteTime v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231B950);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10231B950);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        double v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1012A0A04(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1012A0AB8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1012A0B00(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1012A0B48(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1012A0B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024773B8);
}

uint64_t sub_1012A0BBC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        bzero(v46, 0x578uLL);
        *(void *)long long buf = 0x7FEFFFFFFFFFFFFFLL;
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&uint8_t buf[16] = 0xBFF0000000000000;
        int v49 = 0;
        v46[0] = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1012AB95C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024773B9;
        int v39 = v17;
        *(void *)long long buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        int v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        double v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231B950);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    double v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    __int16 v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1012A1088(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      double v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231B950);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1012A130C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10231B950);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10231B950);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1012A16E0(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(const void **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  memcpy(__dst, v11, 0x590uLL);
  return 1;
}

uint64_t sub_1012A1754(uint64_t a1, int *a2, const void *a3)
{
  int v6 = (uint64_t *)operator new(0x5A8uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  uint64_t *v6 = (uint64_t)off_10231CEF8;
  memcpy(v6 + 3, a3, 0x590uLL);
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_1012A1818(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A182C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  bzero(v10, 0x578uLL);
  v9[0] = 0x7FEFFFFFFFFFFFFFLL;
  v9[1] = 0;
  _OWORD v9[2] = 0xBFF0000000000000;
  int v13 = 0;
  v10[0] = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v9, a3, a4, 0);
}

void sub_1012A1904(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231B950);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231B950);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10231B950);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10231B950);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10231B950);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1012A1EB4(uint64_t a1)
{
  sub_1012AB8EC(a1);

  operator delete();
}

id sub_1012A1EEC(uint64_t a1, int a2, void *a3)
{
  id result = sub_1012AA378(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1012A1F3C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012A1F6C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1012A1F9C(uint64_t a1, uint64_t a2)
{
  int v8 = off_10231B9A0;
  uint64_t v9 = sub_10065AB34(a1, a2);
  int v10 = &v8;
  sub_1012A249C(v9 + 32, (uint64_t)&v8, "Dance", 0, 10.0, 10.0, 30.0);
  sub_1006ADD54(&v8);
  v7[0] = off_10231BB78;
  v7[1] = a1;
  v7[3] = v7;
  sub_1012A2A04(a1 + 192, (uint64_t)v7, "FST", 0, 10.0, 10.0, 30.0);
  sub_1006ADD54(v7);
  v6[0] = off_10231BD50;
  v6[1] = a1;
  v6[3] = v6;
  sub_1012A2F24(a1 + 352, (uint64_t)v6, "Rowing", 0, 10.0, 10.0, 30.0);
  sub_1006ADD54(v6);
  v5[0] = off_10231BF28;
  v5[1] = a1;
  v5[3] = v5;
  sub_1012A3444(a1 + 512, (uint64_t)v5, "Kickboxing", 0, 10.0, 10.0, 30.0);
  sub_1006ADD54(v5);
  v4[0] = off_10231C100;
  v4[1] = a1;
  void v4[3] = v4;
  sub_1008813E4((_OWORD *)(a1 + 672), (uint64_t)v4);
  sub_1012A3998(v4);
  return a1;
}

void sub_1012A2190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1012A3998(va);
  sub_1012A220C(v6);
  sub_1012A227C(v5);
  sub_1012A22EC(v4);
  sub_1012A235C(v3);
  sub_10065ABCC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A220C(uint64_t a1)
{
  *(void *)a1 = off_10231BFA8;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231C0C8;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A227C(uint64_t a1)
{
  *(void *)a1 = off_10231BDD0;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231BEF0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A22EC(uint64_t a1)
{
  *(void *)a1 = off_10231BBF8;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231BD18;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A235C(uint64_t a1)
{
  *(void *)a1 = off_10231BA20;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231BB40;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));
  return a1;
}

void *sub_1012A23CC(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_10231B9A0;
  result[1] = v3;
  return result;
}

uint64_t sub_1012A2414(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231B9A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1012A2440(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100FF4E40(*(void *)(a1 + 8), *a2, 0);
}

uint64_t sub_1012A2450(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10231BA00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012A2490()
{
  return &off_10231BA00;
}

uint64_t sub_1012A249C(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  uint64_t v9 = (void *)sub_1012A2508(a1, a3, a4, a5, a6, a7);
  *uint64_t v9 = off_10231BA20;
  sub_1006ADA50((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1012A24F4(_Unwind_Exception *a1)
{
  sub_1012A25E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A2508(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231BB40;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  int v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231BAD0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A25E4(uint64_t a1)
{
  *(void *)a1 = off_10231BB40;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));
  return a1;
}

void sub_1012A2634(uint64_t a1)
{
  *(void *)a1 = off_10231BA20;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231BB40;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));

  operator delete();
}

double sub_1012A26C4(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = sub_100FF4F04((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1012A26CC(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v4 + *(void *)(a1 + 56) - 1) / 0xAAuLL))
  }
                   + 24 * ((v4 + *(void *)(a1 + 56) - 1) % 0xAAuLL));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_1001855A4(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    uint64_t v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_1012A281C(uint64_t a1)
{
  if (*(void *)(a1 + 152)) {
    return sub_1006A81F8(a1 + 128, 1);
  }
  else {
    return 1;
  }
}

uint64_t sub_1012A2838(uint64_t a1)
{
  if (*(void *)(a1 + 152)) {
    return sub_1006A81F8(a1 + 128, 0);
  }
  else {
    return 1;
  }
}

void sub_1012A2854(uint64_t a1)
{
  *(void *)a1 = off_10231BB40;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A28C4(uint64_t a1)
{
  *(void *)a1 = off_10231BB40;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));

  operator delete();
}

void *sub_1012A2934(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_10231BB78;
  result[1] = v3;
  return result;
}

uint64_t sub_1012A297C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231BB78;
  a2[1] = v2;
  return result;
}

uint64_t sub_1012A29A8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100FF4E40(*(void *)(a1 + 8), *a2, 2);
}

uint64_t sub_1012A29B8(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10231BBD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012A29F8()
{
  return &off_10231BBD8;
}

uint64_t sub_1012A2A04(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  uint64_t v9 = (void *)sub_1012A2A70(a1, a3, a4, a5, a6, a7);
  *uint64_t v9 = off_10231BBF8;
  sub_1006ADA50((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1012A2A5C(_Unwind_Exception *a1)
{
  sub_1012A2B4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A2A70(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231BD18;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  int v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231BCA8;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A2B4C(uint64_t a1)
{
  *(void *)a1 = off_10231BD18;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));
  return a1;
}

void sub_1012A2B9C(uint64_t a1)
{
  *(void *)a1 = off_10231BBF8;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231BD18;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));

  operator delete();
}

double sub_1012A2C2C(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = sub_100FF5674((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1012A2C34(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32)
  }
                               + (((unint64_t)(v4 + *(void *)(a1 + 56) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v4 + *(unsigned char *)(a1 + 56) - 1));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_1001850BC(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    uint64_t v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_1012A2D74(uint64_t a1)
{
  *(void *)a1 = off_10231BD18;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));

  operator delete();
}

void sub_1012A2DE4(uint64_t a1)
{
  *(void *)a1 = off_10231BD18;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));

  operator delete();
}

void *sub_1012A2E54(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_10231BD50;
  result[1] = v3;
  return result;
}

uint64_t sub_1012A2E9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231BD50;
  a2[1] = v2;
  return result;
}

uint64_t sub_1012A2EC8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100FF4E40(*(void *)(a1 + 8), *a2, 1);
}

uint64_t sub_1012A2ED8(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10231BDB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012A2F18()
{
  return &off_10231BDB0;
}

uint64_t sub_1012A2F24(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  uint64_t v9 = (void *)sub_1012A2F90(a1, a3, a4, a5, a6, a7);
  *uint64_t v9 = off_10231BDD0;
  sub_1006ADA50((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1012A2F7C(_Unwind_Exception *a1)
{
  sub_1012A306C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A2F90(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231BEF0;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  int v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231BE80;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A306C(uint64_t a1)
{
  *(void *)a1 = off_10231BEF0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));
  return a1;
}

void sub_1012A30BC(uint64_t a1)
{
  *(void *)a1 = off_10231BDD0;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231BEF0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));

  operator delete();
}

double sub_1012A314C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_100FF52CC((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1012A3154(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32)
  }
                               + (((unint64_t)(v4 + *(void *)(a1 + 56) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                   + 32 * ((v4 + *(void *)(a1 + 56) - 1) & 0x7F));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_10018532C(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    uint64_t v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_1012A3294(uint64_t a1)
{
  *(void *)a1 = off_10231BEF0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A3304(uint64_t a1)
{
  *(void *)a1 = off_10231BEF0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));

  operator delete();
}

void *sub_1012A3374(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_10231BF28;
  result[1] = v3;
  return result;
}

uint64_t sub_1012A33BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231BF28;
  a2[1] = v2;
  return result;
}

uint64_t sub_1012A33E8(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100FF4E40(*(void *)(a1 + 8), *a2, 3);
}

uint64_t sub_1012A33F8(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10231BF88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012A3438()
{
  return &off_10231BF88;
}

uint64_t sub_1012A3444(uint64_t a1, uint64_t a2, const char *a3, int a4, double a5, double a6, double a7)
{
  uint64_t v9 = (void *)sub_1012A34B0(a1, a3, a4, a5, a6, a7);
  *uint64_t v9 = off_10231BFA8;
  sub_1006ADA50((uint64_t)(v9 + 16), a2);
  return a1;
}

void sub_1012A349C(_Unwind_Exception *a1)
{
  sub_1012A358C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A34B0(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231C0C8;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  int v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231C058;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A358C(uint64_t a1)
{
  *(void *)a1 = off_10231C0C8;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));
  return a1;
}

void sub_1012A35DC(uint64_t a1)
{
  *(void *)a1 = off_10231BFA8;
  sub_1006ADD54((void *)(a1 + 128));
  *(void *)a1 = off_10231C0C8;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));

  operator delete();
}

double sub_1012A366C(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = sub_100FF5A18((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1012A3674(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v4 + *(void *)(a1 + 56) - 1) / 0xAAuLL))
  }
                   + 24 * ((v4 + *(void *)(a1 + 56) - 1) % 0xAAuLL));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_1001855A4(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    uint64_t v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_1012A37C4(uint64_t a1)
{
  *(void *)a1 = off_10231C0C8;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A3834(uint64_t a1)
{
  *(void *)a1 = off_10231C0C8;
  free(*(void **)(a1 + 8));
  sub_1000D816C((void *)(a1 + 24));

  operator delete();
}

void *sub_1012A38A4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_10231C100;
  result[1] = v3;
  return result;
}

uint64_t sub_1012A38EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231C100;
  a2[1] = v2;
  return result;
}

double sub_1012A3918(uint64_t a1, int *a2, __n128 *a3)
{
  int v3 = *a2;
  __n128 v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_100FF4E94(*(void **)(a1 + 8), v3, v6);
}

uint64_t sub_1012A394C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10231C170)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012A398C()
{
  return &off_10231C170;
}

void *sub_1012A3998(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1012A3A1C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1012A3A50(uint64_t a1)
{
  *(void *)a1 = off_10231C1B0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  __n128 v4 = *(std::__shared_weak_count **)(a1 + 136);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  double v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  int v12 = (void **)(a1 + 72);
  sub_1000C5954(&v12);
  double v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  double v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  return a1;
}

void sub_1012A3B14(uint64_t a1)
{
  sub_1012A3A50(a1);

  operator delete();
}

void *sub_1012A3B4C(uint64_t a1)
{
  sub_1012A3998((void *)(a1 + 704));
  uint64_t v2 = *(void *)(a1 + 696);
  *(void *)(a1 + 696) = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 688);
  *(void *)(a1 + 688) = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 680);
  *(void *)(a1 + 680) = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *(void *)(a1 + 672);
  *(void *)(a1 + 672) = 0;
  if (v5) {
    operator delete();
  }
  *(void *)(a1 + 512) = off_10231BFA8;
  sub_1006ADD54((void *)(a1 + 640));
  *(void *)(a1 + 512) = off_10231C0C8;
  free(*(void **)(a1 + 520));
  sub_1000D816C((void *)(a1 + 536));
  *(void *)(a1 + 352) = off_10231BDD0;
  sub_1006ADD54((void *)(a1 + 480));
  *(void *)(a1 + 352) = off_10231BEF0;
  free(*(void **)(a1 + 360));
  sub_1002CDF4C((void *)(a1 + 376));
  *(void *)(a1 + 192) = off_10231BBF8;
  sub_1006ADD54((void *)(a1 + 320));
  *(void *)(a1 + 192) = off_10231BD18;
  free(*(void **)(a1 + 200));
  sub_1000D80C4((void *)(a1 + 216));
  *(void *)(a1 + 32) = off_10231BA20;
  sub_1006ADD54((void *)(a1 + 160));
  *(void *)(a1 + 32) = off_10231BB40;
  free(*(void **)(a1 + 40));
  sub_1000D816C((void *)(a1 + 56));

  return sub_10065ABCC((void *)a1);
}

void sub_1012A3D58(uint64_t a1)
{
  *(void *)a1 = off_10231C1E0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A3DC8(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1012A3DF8(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1012A3E28(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_1012A3E5C(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1012A3E8C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1012A3EF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012A3F0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1012A3F3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_1012A3F80@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x178uLL);
  uint64_t result = sub_1012A3FDC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1012A3FC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1012A3FDC(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10231C420;
  sub_1014C5BC8(a1 + 3, *a2);
  return a1;
}

void sub_1012A4028(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012A403C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231C420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012A405C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231C420;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1012A40B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1012A40D8@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1A0uLL);
  uint64_t result = sub_1012A4134(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1012A4120(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1012A4134(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10231C470;
  sub_100EA46FC(a1 + 3, *a2);
  return a1;
}

void sub_1012A4180(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012A4194(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231C470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012A41B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231C470;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1012A4208(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1012A4230@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x158uLL);
  uint64_t result = sub_1012A428C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1012A4278(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1012A428C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10231C4C0;
  sub_1009F8920(a1 + 3, *a2);
  return a1;
}

void sub_1012A42D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012A42EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231C4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012A430C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231C4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1012A4360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1012A4388(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(void *)sub_1012A44E8(a1, a2, a4, a5, a6, a7) = off_10231C510;
  *(void *)(a1 + 128) = [a3 silo];
  *(void *)(a1 + 136) = 0;
  sub_1004A1714();
}

void sub_1012A4498(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_100B9B42C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A44E8(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = &off_1022E9360;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  int v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_1022E92C8;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A45C4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  [a4[16] assertInside];
  double v8 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t))*((void *)*a4 + 12);

  return v8(a4, a1, a2, a3);
}

void sub_1012A4640(uint64_t a1)
{
  sub_1012A92E0(a1);

  operator delete();
}

uint64_t sub_1012A4678(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLOdometerEntry>::startActive() [Data_T = CLOdometerEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:2 registrationInfo:0];
  return 1;
}

uint64_t sub_1012A4844(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLOdometerEntry>::stopActive() [Data_T = CLOdometerEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:2];
  return 1;
}

id sub_1012A4A0C(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLOdometerEntry>::startSpectator() [Data_T = CLOdometerEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:4 registrationInfo:0];
}

id sub_1012A4BD4(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLOdometerEntry>::stopSpectator() [Data_T = CLOdometerEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:4];
}

uint64_t sub_1012A4D98(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4 || *a3 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
  }
  return result;
}

void sub_1012A4DD4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012A4E04(uint64_t a1, const char *a2, void *a3, char a4, double a5, double a6, double a7)
{
  *(void *)sub_101449F2C(a1, a2, a4, a5, a6, a7) = off_10231C5C0;
  *(void *)(a1 + 384) = [a3 silo];
  *(void *)(a1 + 392) = 0;
  sub_1004A1714();
}

void sub_1012A4F14(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 392);
  *(void *)(v1 + 392) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1012A4F64(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A4F64(uint64_t a1)
{
  *(void *)a1 = off_102326690;
  sub_1006ABD84((void *)(a1 + 128));
  *(void *)a1 = off_10231C650;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));
  return a1;
}

void sub_1012A4FD4(uint64_t a1)
{
  sub_1012A937C(a1);

  operator delete();
}

uint64_t sub_1012A500C(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startActive() [Data_T = CLElevationChangeEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 392) + 16) register:*(void *)(*(void *)(a1 + 392) + 8) forNotification:3 registrationInfo:0];
  return 1;
}

uint64_t sub_1012A51D8(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLElevationChangeEntry>::stopActive() [Data_T = CLElevationChangeEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 392) + 16) unregister:*(void *)(*(void *)(a1 + 392) + 8) forNotification:3];
  return 1;
}

id sub_1012A53A0(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startSpectator() [Data_T = CLElevationChangeEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 392) + 16) register:*(void *)(*(void *)(a1 + 392) + 8) forNotification:7 registrationInfo:0];
}

id sub_1012A5568(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLElevationChangeEntry>::stopSpectator() [Data_T = CLElevationChangeEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 392) + 16) unregister:*(void *)(*(void *)(a1 + 392) + 8) forNotification:7];
}

uint64_t sub_1012A572C(uint64_t a1)
{
  *(void *)a1 = off_10231C650;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));
  return a1;
}

void sub_1012A577C(uint64_t a1)
{
  *(void *)a1 = off_10231C650;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));

  operator delete();
}

double sub_1012A57EC(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_1000A01D4((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

void sub_1012A57F4(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(void *)sub_1012A5954(a1, a2, a4, a5, a6, a7) = off_10231C698;
  *(void *)(a1 + 128) = [a3 silo];
  *(void *)(a1 + 136) = 0;
  sub_1004A1714();
}

void sub_1012A5904(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1012A5AB0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A5954(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231C7C0;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  int v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231C750;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(_WORD *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 122) = a3;
  *(unsigned char *)(a1 + 123) = 0;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A5A34(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  [a4[16] assertInside];
  double v8 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t))*((void *)*a4 + 12);

  return v8(a4, a1, a2, a3);
}

uint64_t sub_1012A5AB0(uint64_t a1)
{
  *(void *)a1 = off_10231C7C0;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));
  return a1;
}

void sub_1012A5B00(uint64_t a1)
{
  sub_1012A943C(a1);

  operator delete();
}

double sub_1012A5B38(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = sub_1012A5FE8((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

id sub_1012A5B40(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>::startSpectator() [Data_T = CLCoarseElevationChangeEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:5 registrationInfo:0];
}

id sub_1012A5D08(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>::stopSpectator() [Data_T = CLCoarseElevationChangeEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:5];
}

uint64_t sub_1012A5ECC(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 5 || *a3 == -1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
  }
  return result;
}

void sub_1012A5F08(uint64_t a1)
{
  *(void *)a1 = off_10231C7C0;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));

  operator delete();
}

void sub_1012A5F78(uint64_t a1)
{
  *(void *)a1 = off_10231C7C0;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));

  operator delete();
}

__n128 sub_1012A5FE8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1012A6074(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1012A6074(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1012A6340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1012A638C(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(void *)sub_1012A64EC(a1, a2, a4, a5, a6, a7) = off_10231C7F8;
  *(void *)(a1 + 128) = [a3 silo];
  *(void *)(a1 + 136) = 0;
  sub_100A1F244();
}

void sub_1012A649C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1012A6644(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A64EC(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231C920;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  uint64_t v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231C8B0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A65C8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  [a4[16] assertInside];
  double v8 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t))*((void *)*a4 + 12);

  return v8(a4, a1, a2, a3);
}

uint64_t sub_1012A6644(uint64_t a1)
{
  *(void *)a1 = off_10231C920;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));
  return a1;
}

void sub_1012A6694(uint64_t a1)
{
  sub_1012A94D8(a1);

  operator delete();
}

uint64_t sub_1012A66CC(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLCatherineData>::startActive() [Data_T = CLCatherineData]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:1 registrationInfo:0];
  return 1;
}

uint64_t sub_1012A6898(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLCatherineData>::stopActive() [Data_T = CLCatherineData]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:1];
  return 1;
}

id sub_1012A6A60(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCatherineData>::startSpectator() [Data_T = CLCatherineData]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0 registrationInfo:0];
}

id sub_1012A6C28(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLCatherineData>::stopSpectator() [Data_T = CLCatherineData]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
}

uint64_t sub_1012A6DEC(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 <= 1u) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
  }
  return result;
}

void sub_1012A6E24(uint64_t a1)
{
  *(void *)a1 = off_10231C920;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));

  operator delete();
}

void sub_1012A6E94(uint64_t a1)
{
  *(void *)a1 = off_10231C920;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));

  operator delete();
}

void sub_1012A6F04(uint64_t a1)
{
  *(void *)a1 = off_10231C1E0;
  free(*(void **)(a1 + 8));
  sub_1002CDF4C((void *)(a1 + 24));

  operator delete();
}

void *sub_1012A6F74(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  BOOL v5 = a2 > 0.0;
  if (v4 <= a2) {
    BOOL v5 = 0;
  }
  *(unsigned char *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231B970);
    }
    uint64_t v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = *(double *)(a1 + 104);
      int v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)long long buf = 134218752;
      double v22 = v7 - v4;
      __int16 v23 = 2048;
      double v24 = v4;
      __int16 v25 = 2048;
      double v26 = v7;
      __int16 v27 = 1024;
      int v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10231B970);
      }
      int64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieInput<CLRawHR>::update(CFAbsoluteTime) [Data_T = CLRawHR]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  if (*(unsigned char *)(a1 + 80)
    && !*(unsigned char *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(unsigned char *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1))
  {
    *(unsigned char *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = (char *)(v10 + 8 * (v9 >> 7));
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)v12 + 32 * (*(void *)(a1 + 56) & 0x7FLL);
  }
  uint64_t v14 = v10 + 8 * (v9 >> 7);
LABEL_15:
  uint64_t v15 = (double *)v13;
  while (1)
  {
    uint64_t v16 = v11 == v10
        ? 0
        : *(void *)(v10 + (((*(void *)(a1 + 64) + v9) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(void *)(a1 + 64) + v9) & 0x7F);
    if (v15 == (double *)v16 || vabdd_f64(*(double *)(a1 + 104), *v15) <= 1200.0) {
      break;
    }
    v15 += 4;
    v13 += 32;
    if (*(void *)v14 + 4096 == v13)
    {
      uint64_t v17 = *(void *)(v14 + 8);
      v14 += 8;
      uint64_t v13 = v17;
      goto LABEL_15;
    }
  }
  if (v11 == v10) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *(void *)v12 + 32 * (*(void *)(a1 + 56) & 0x7FLL);
  }
  return sub_100173080((void *)(a1 + 24), v12, v18, (char *)v14, v13);
}

BOOL sub_1012A72CC(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32)
  }
                               + (((unint64_t)(v4 + *(void *)(a1 + 56) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                   + 32 * ((v4 + *(void *)(a1 + 56) - 1) & 0x7F));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_10018532C(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    uint64_t v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_1012A740C(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(void *)sub_1012A756C(a1, a2, a4, a5, a6, a7) = off_10231C9E0;
  *(void *)(a1 + 128) = [a3 silo];
  *(void *)(a1 + 136) = 0;
  sub_101589B60();
}

void sub_1012A751C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1012A76C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A756C(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231CB08;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "NatalieInputSrc";
  }
  uint64_t v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231CA98;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A7648(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  [a4[16] assertInside];
  double v8 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t))*((void *)*a4 + 12);

  return v8(a4, a1, a2, a3);
}

uint64_t sub_1012A76C4(uint64_t a1)
{
  *(void *)a1 = off_10231CB08;
  free(*(void **)(a1 + 8));
  sub_1006AA34C((void *)(a1 + 24));
  return a1;
}

void sub_1012A7714(uint64_t a1)
{
  sub_1012A9574(a1);

  operator delete();
}

uint64_t sub_1012A774C(uint64_t a1, _OWORD *a2)
{
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)a1 + 16))(a1, &v15, &v13);
  if (result)
  {
    uint64_t v4 = *((void *)&v16 + 1);
    if (*((void *)&v16 + 1) == *((void *)&v14 + 1))
    {
      return 0;
    }
    else
    {
      if (*(void *)v16 == *((void *)&v16 + 1)) {
        uint64_t v4 = *(void *)(v16 - 8) + 4048;
      }
      long long v5 = *(_OWORD *)(v4 - 176);
      long long v6 = *(_OWORD *)(v4 - 144);
      a2[1] = *(_OWORD *)(v4 - 160);
      a2[2] = v6;
      *a2 = v5;
      long long v7 = *(_OWORD *)(v4 - 128);
      long long v8 = *(_OWORD *)(v4 - 112);
      long long v9 = *(_OWORD *)(v4 - 80);
      a2[5] = *(_OWORD *)(v4 - 96);
      a2[6] = v9;
      a2[3] = v7;
      a2[4] = v8;
      long long v10 = *(_OWORD *)(v4 - 64);
      long long v11 = *(_OWORD *)(v4 - 48);
      long long v12 = *(_OWORD *)(v4 - 16);
      a2[9] = *(_OWORD *)(v4 - 32);
      a2[10] = v12;
      a2[7] = v10;
      a2[8] = v11;
      return 1;
    }
  }
  return result;
}

double sub_1012A782C(uint64_t a1, long long *a2)
{
  *(void *)&double result = sub_1006AA720((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

id sub_1012A7834(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLStepCountEntry>::startSpectator() [Data_T = CLStepCountEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0 registrationInfo:0];
}

id sub_1012A79FC(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop spectator for src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNatalieSourceFromNotifier<CLStepCountEntry>::stopSpectator() [Data_T = CLStepCountEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
}

uint64_t sub_1012A7BC0(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 + 1) <= 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
  }
  return result;
}

void sub_1012A7BFC(uint64_t a1)
{
  *(void *)a1 = off_10231CB08;
  free(*(void **)(a1 + 8));
  sub_1006AA34C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A7C6C(uint64_t a1)
{
  *(void *)a1 = off_10231CB08;
  free(*(void **)(a1 + 8));
  sub_1006AA34C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A7CDC(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(void *)sub_1012A7E3C(a1, a2, a4, a5, a6, a7) = off_10231CB40;
  *(void *)(a1 + 128) = [a3 silo];
  *(void *)(a1 + 136) = 0;
  sub_101594980();
}

void sub_1012A7DEC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1012A7F94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A7E3C(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231CC68;
  if (a2) {
    long long v11 = a2;
  }
  else {
    long long v11 = "NatalieInputSrc";
  }
  long long v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231CBF8;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A7F18(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  [a4[16] assertInside];
  long long v8 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t))*((void *)*a4 + 12);

  return v8(a4, a1, a2, a3);
}

uint64_t sub_1012A7F94(uint64_t a1)
{
  *(void *)a1 = off_10231CC68;
  free(*(void **)(a1 + 8));
  sub_1000D801C((void *)(a1 + 24));
  return a1;
}

void sub_1012A7FE4(uint64_t a1)
{
  sub_1012A9610(a1);

  operator delete();
}

double sub_1012A801C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_10041EF18((void *)(a1 + 24), a2).n128_u64[0];
  return result;
}

BOOL sub_1012A8024(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v4 + *(void *)(a1 + 56) - 1) / 0x1AuLL))
  }
                   + 152 * ((v4 + *(void *)(a1 + 56) - 1) % 0x1AuLL)
                   + 40);
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_100185E7C(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    long long v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  long long v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_1012A817C(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLSwimEntry>::startActive() [Data_T = CLSwimEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0 registrationInfo:0];
  return 1;
}

uint64_t sub_1012A8348(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<CLSwimEntry>::stopActive() [Data_T = CLSwimEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
  return 1;
}

uint64_t sub_1012A8510(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 + 1) <= 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
  }
  return result;
}

void sub_1012A854C(uint64_t a1)
{
  *(void *)a1 = off_10231CC68;
  free(*(void **)(a1 + 8));
  sub_1000D801C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A85BC(uint64_t a1)
{
  *(void *)a1 = off_10231CC68;
  free(*(void **)(a1 + 8));
  sub_1000D801C((void *)(a1 + 24));

  operator delete();
}

void sub_1012A862C(uint64_t a1, const char *a2, void *a3, int a4, double a5, double a6, double a7)
{
  *(void *)sub_1012A878C(a1, a2, a4, a5, a6, a7) = off_10231CCA0;
  *(void *)(a1 + 128) = [a3 silo];
  *(void *)(a1 + 136) = 0;
  sub_10117E410();
}

void sub_1012A873C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1012A88E4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012A878C(uint64_t a1, const char *a2, int a3, double a4, double a5, double a6)
{
  *(void *)a1 = off_10231CDC8;
  if (a2) {
    long long v11 = a2;
  }
  else {
    long long v11 = "NatalieInputSrc";
  }
  long long v12 = strdup(v11);
  *(double *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = off_10231CD58;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  *(double *)(a1 + 112) = a6;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 121) = a3;
  if (a3)
  {
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 1;
    *(void *)(a1 + 88) = 0x7FEFFFFFFFFFFFFFLL;
  }
  return a1;
}

uint64_t sub_1012A8868(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  [a4[16] assertInside];
  double v8 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t))*((void *)*a4 + 12);

  return v8(a4, a1, a2, a3);
}

uint64_t sub_1012A88E4(uint64_t a1)
{
  *(void *)a1 = off_10231CDC8;
  free(*(void **)(a1 + 8));
  sub_1004F6960((void *)(a1 + 24));
  return a1;
}

void sub_1012A8934(uint64_t a1)
{
  sub_1012A96AC(a1);

  operator delete();
}

BOOL sub_1012A896C(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * ((v4 + *(void *)(a1 + 56) - 1) / 0x18uLL))
  }
                   + 168 * ((v4 + *(void *)(a1 + 56) - 1) % 0x18uLL));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_100185AEC(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    long long v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  long long v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

uint64_t sub_1012A8ABC(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<_CLFitnessMachineData>::startActive() [Data_T = _CLFitnessMachineData]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) register:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0 registrationInfo:0];
  return 1;
}

uint64_t sub_1012A8C88(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231C590);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inactivate src %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231C590);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLNatalieSourceFromNotifier<_CLFitnessMachineData>::stopActive() [Data_T = _CLFitnessMachineData]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
  return 1;
}

uint64_t sub_1012A8E50(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 + 1) <= 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
  }
  return result;
}

void sub_1012A8E8C(uint64_t a1)
{
  *(void *)a1 = off_10231CDC8;
  free(*(void **)(a1 + 8));
  sub_1004F6960((void *)(a1 + 24));

  operator delete();
}

void sub_1012A8EFC(uint64_t a1)
{
  *(void *)a1 = off_10231CDC8;
  free(*(void **)(a1 + 8));
  sub_1004F6960((void *)(a1 + 24));

  operator delete();
}

__n128 sub_1012A8F6C@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    int v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    long long v16 = a6;
  }
  else
  {
    long long v13 = a3 - 1;
    long long v12 = *a3;
    long long v14 = a4;
    long long v15 = a5;
    long long v16 = a6;
    while (1)
    {
      sub_1012A903C(v12, v14, v15, v16, &v21);
      long long v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      long long v12 = v17;
      long long v14 = v17 + 4032;
    }
    uint64_t v18 = *a1 + 4032;
    int v19 = a2;
  }
  sub_1012A903C(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1012A903C@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  long long v6 = a3;
  if (a1 == a2)
  {
    long long v9 = a1;
  }
  else
  {
    long long v9 = a2;
    uint64_t v10 = *a3;
    long long v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCF3CF3CF3CF3CF3DLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xCF3CF3CF3CF3CF3DLL * ((v11 - a1) >> 3);
      }
      v11 -= 168 * v12;
      a4 -= 168 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 168 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      long long v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void sub_1012A9120(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1012A9188(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012A91B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1012A91D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_1012A9214(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10231CE78;
  result[1] = v3;
  return result;
}

uint64_t sub_1012A925C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10231CE78;
  a2[1] = v2;
  return result;
}

void sub_1012A9288(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_1012A9294(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_10231CED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012A92D4()
{
  return &off_10231CED8;
}

uint64_t sub_1012A92E0(uint64_t a1)
{
  *(void *)a1 = off_10231C510;
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)a1 = &off_1022E9360;
  free(*(void **)(a1 + 8));
  sub_1006AAD08((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A937C(uint64_t a1)
{
  *(void *)a1 = off_10231C5C0;
  uint64_t v2 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)a1 = off_102326690;
  sub_1006ABD84((void *)(a1 + 128));
  *(void *)a1 = off_10231C650;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A943C(uint64_t a1)
{
  *(void *)a1 = off_10231C698;
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)a1 = off_10231C7C0;
  free(*(void **)(a1 + 8));
  sub_1000D80C4((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A94D8(uint64_t a1)
{
  *(void *)a1 = off_10231C7F8;
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)a1 = off_10231C920;
  free(*(void **)(a1 + 8));
  sub_100507624((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A9574(uint64_t a1)
{
  *(void *)a1 = off_10231C9E0;
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)a1 = off_10231CB08;
  free(*(void **)(a1 + 8));
  sub_1006AA34C((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A9610(uint64_t a1)
{
  *(void *)a1 = off_10231CB40;
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)a1 = off_10231CC68;
  free(*(void **)(a1 + 8));
  sub_1000D801C((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A96AC(uint64_t a1)
{
  *(void *)a1 = off_10231CCA0;
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)a1 = off_10231CDC8;
  free(*(void **)(a1 + 8));
  sub_1004F6960((void *)(a1 + 24));
  return a1;
}

uint64_t sub_1012A9748(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  long long v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231C180);
    }
    long long v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231C180);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLNatalieData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_1012A9948(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  long long v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231C180);
    }
    long long v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231C180);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<MaxMets, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = MaxMets, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_1012A9B48(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  long long v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231C180);
    }
    long long v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231C180);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLExerciseMinuteData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_1012A9D48()
{
}

void sub_1012A9DFC(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    double v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      double v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int64_t v12 = (uint64_t *)v4;
        }
        else {
          int64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          double v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1012AA378(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          long long v15 = a1 + 11;
          long long v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                __n128 v22 = (uint64_t *)v17;
              }
              else {
                __n128 v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_1012AA1EC(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              double v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  long long v32 = (uint64_t *)v27;
                }
                else {
                  long long v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  double v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    uint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    uint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      uint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      uint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10231B950);
              }
              double v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10231B950);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1012AA1EC(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1012AA378(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_1012AA2E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10231CEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012AA304(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10231CEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1012AA358(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1012AA378(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1012AA3D8(a1);
}

id sub_1012AA3D8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10231CF38);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101DB1001 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10231CF38);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101DB1001 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

void sub_1012AA5C0(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

__n128 sub_1012AA5F0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1012AA680(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  int v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *int v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_1012AA680(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    id v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      id v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    id v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1012AA94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1012AA998(uint64_t a1, __n128 *a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = a2->n128_f64[1];
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, __n128 *, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      uint64_t v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 248))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_10041FD7C(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10231C180);
        }
        BOOL v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_10231C180);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLExerciseMinuteData>::addSuspectRecord(const T &) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10231CF58);
      }
      uint64_t v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10231CF58);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLExerciseMinuteData>::addSuspectRecord(const T &) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_1006B5F98(v12, a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231C180);
    }
    int v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      id v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        id v9 = (void *)*v9;
      }
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231C180);
      }
    }
    uint64_t v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      uint64_t v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_1012AAEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012AAF08(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1012AAF38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *(double *)(a2 + 16);
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      uint64_t v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 312))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_1012AB574(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10231C180);
        }
        BOOL v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_10231C180);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLNatalieData>::addSuspectRecord(const T &) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10231CF58);
      }
      uint64_t v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10231CF58);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLNatalieData>::addSuspectRecord(const T &) [T = CLNatalieData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_1012AB4A8(v12, a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231C180);
    }
    int v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      id v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        id v9 = (void *)*v9;
      }
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231C180);
      }
    }
    uint64_t v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      uint64_t v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_1012AB47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1012AB4A8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 46 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1012AB5D4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2E)) + 88 * (v7 % 0x2E);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 64);
  *(void *)(v8 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  *(__n128 *)(v8 + 32) = result;
  ++a1[5];
  return result;
}

uint64_t sub_1012AB574(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x2E) {
    a2 = 1;
  }
  if (v2 < 0x5C) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 46;
  }
  return v4 ^ 1u;
}

void sub_1012AB5D4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2E;
  unint64_t v4 = v2 - 46;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFD0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFD0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFD0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1012AB8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1012AB8EC(uint64_t a1)
{
  *(void *)a1 = off_10231CF88;
  unint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *unint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1012AB95C()
{
}

uint64_t sub_1012ABA10(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1012ABA30()
{
  sub_100134750(qword_102486A28, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486A28, (void *)&_mh_execute_header);
  sub_100134750(qword_102486A40, "Acc800Fp");
  dword_102486A58 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102486A40, (void *)&_mh_execute_header);
  sub_100134750(qword_102486A60, "DmFp");
  dword_102486A78 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_102486A60, (void *)&_mh_execute_header);
}

double sub_1012ABB0C(uint64_t a1)
{
  *(void *)a1 = off_10231CFB0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void *sub_1012ABB4C(void *a1)
{
  *a1 = off_10231CFB0;
  unint64_t v2 = a1 + 3;
  sub_1003A7340(a1 + 9);
  sub_1003A7340(v2);
  return a1;
}

void sub_1012ABBA0(void *a1)
{
  *a1 = off_10231CFB0;
  uint64_t v1 = a1 + 3;
  sub_1003A7340(a1 + 9);
  sub_1003A7340(v1);

  operator delete();
}

void sub_1012ABC14(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_1012ABC44(double *a1, double *a2)
{
  double v2 = *a1;
  if (*a1 >= 51.1 && v2 <= 61.1 && *a2 >= -13.2 && *a2 <= 1.87) {
    return 1;
  }
  if (v2 >= 49.866 && v2 <= 61.1 && *a2 >= -6.48 && *a2 <= 0.15) {
    return 1;
  }
  if (v2 >= 50.688 && v2 <= 61.1 && *a2 >= 0.15 && *a2 <= 1.43) {
    return 1;
  }
  if (v2 >= 29.32 && v2 <= 35.8 && *a2 >= 130.0 && *a2 <= 141.0) {
    return 1;
  }
  if (v2 >= 35.8 && v2 <= 41.3 && *a2 >= 135.8 && *a2 <= 142.95) {
    return 1;
  }
  if (v2 >= 41.3 && v2 <= 45.7 && *a2 >= 139.5 && *a2 <= 145.8) {
    return 1;
  }
  if (v2 >= 25.7 && v2 <= 34.756 && *a2 >= 128.837 && *a2 <= 130.0) {
    return 1;
  }
  if (v2 >= 23.861 && v2 <= 27.891 && *a2 >= 122.927 && *a2 <= 131.426) {
    return 1;
  }
  if (v2 >= -45.0 && v2 <= 4.3 && *a2 >= 104.0 && *a2 <= 156.25) {
    return 1;
  }
  if (v2 >= 0.0 && v2 <= 7.408 && *a2 >= 108.75 && *a2 <= 119.215) {
    return 1;
  }
  if (v2 >= -14.25 && v2 <= 8.35 && *a2 >= 88.9289 && *a2 <= 108.75) {
    return 1;
  }
  if (v2 >= -56.4 && v2 <= -28.0)
  {
    double v3 = *a2;
    if (*a2 >= 155.0 && v3 <= 180.1) {
      return 1;
    }
    if (v3 >= -180.1 && v3 <= -175.74) {
      return 1;
    }
  }
  if (v2 >= -9.0 && v2 <= 27.3 && *a2 >= 67.0 && *a2 <= 92.17) {
    return 1;
  }
  if (v2 >= 27.3 && v2 <= 35.44 && *a2 >= 71.746 && *a2 <= 77.876) {
    return 1;
  }
  if (v2 >= 26.29 && v2 <= 27.8959 && *a2 >= 79.734 && *a2 <= 88.251) {
    return 1;
  }
  if (v2 >= 27.3 && v2 <= 29.15 && *a2 >= 77.83 && *a2 <= 84.154) {
    return 1;
  }
  if (v2 >= 27.3 && v2 <= 30.0 && *a2 >= 77.83 && *a2 <= 82.4) {
    return 1;
  }
  if (v2 >= 24.18 && v2 <= 29.338 && *a2 >= 63.36 && *a2 <= 71.746) {
    return 1;
  }
  if (v2 >= 29.338 && v2 <= 30.917 && *a2 >= 66.437 && *a2 <= 71.746) {
    return 1;
  }
  if (v2 >= 30.917 && v2 <= 33.0 && *a2 >= 69.584 && *a2 <= 71.746) {
    return 1;
  }
  if (v2 >= -36.08 && v2 <= -18.04 && *a2 >= 11.32 && *a2 <= 37.9) {
    return 1;
  }
  if (v2 >= -18.5 && v2 <= -13.45 && *a2 >= 23.5008 && *a2 <= 41.892382) {
    return 1;
  }
  if (v2 >= -13.45 && v2 <= 1.68 && *a2 >= 30.905 && *a2 <= 40.987) {
    return 1;
  }
  if (v2 >= 1.68 && v2 <= 3.388 && *a2 >= 31.324836 && *a2 <= 40.987) {
    return 1;
  }
  if (v2 >= -13.8 && v2 <= -12.44 && *a2 >= 24.07 && *a2 <= 28.33) {
    return 1;
  }
  if (v2 >= 11.671 && v2 <= 14.258 && *a2 >= -62.322 && *a2 <= -59.263) {
    return 1;
  }
  if (v2 >= 22.950919 && v2 <= 27.567702 && *a2 >= -79.487787 && *a2 <= -72.604668) {
    return 1;
  }
  if (v2 >= 21.74346 && v2 <= 27.567702 && *a2 >= -76.173118 && *a2 <= -72.604668) {
    return 1;
  }
  if (v2 >= 20.668412 && v2 <= 27.567702 && *a2 >= -73.949372 && *a2 <= -72.604668) {
    return 1;
  }
  if (v2 >= 8.3 && v2 <= 17.45 && *a2 >= 99.675 && *a2 <= 102.316) {
    return 1;
  }
  if (v2 >= 14.481 && v2 <= 17.51 && *a2 >= 102.286 && *a2 <= 104.683) {
    return 1;
  }
  if (v2 >= 17.45 && v2 <= 19.45 && *a2 >= 98.1 && *a2 <= 100.94) {
    return 1;
  }
  if (v2 >= 18.142198 && v2 <= 18.315026 && *a2 >= -63.184398 && *a2 <= -62.912807) {
    return 1;
  }
  if (v2 >= 16.914842 && v2 <= 17.240077 && *a2 >= -61.964541 && *a2 <= -61.607641) {
    return 1;
  }
  if (v2 >= 21.497173 && v2 <= 26.635702 && *a2 >= 88.025462 && *a2 <= 92.577511) {
    return 1;
  }
  if (v2 >= 32.166353 && v2 <= 32.577428 && *a2 >= -65.0 && *a2 <= -64.50204) {
    return 1;
  }
  if (v2 >= 26.902547 && v2 <= 27.854393 && *a2 >= 89.351473 && *a2 <= 91.521758) {
    return 1;
  }
  if (v2 >= 19.103 && v2 <= 20.058 && *a2 >= -81.654 && *a2 <= -79.5) {
    return 1;
  }
  if (v2 >= -23.5 && v2 <= -8.32 && *a2 >= -166.288 && *a2 <= -155.88) {
    return 1;
  }
  if (v2 >= 34.3297 && v2 <= 35.757 && *a2 >= 32.09 && *a2 <= 34.6509) {
    return 1;
  }
  if (v2 >= 15.06 && v2 <= 15.816 && *a2 >= -61.61 && *a2 <= -60.984) {
    return 1;
  }
  if (v2 >= -53.02 && v2 <= -50.229 && *a2 >= -61.937 && *a2 <= -56.853) {
    return 1;
  }
  if (v2 >= -21.1769 && v2 <= -12.1 && *a2 >= 176.19 && *a2 <= 180.1) {
    return 1;
  }
  if (v2 >= -21.1769 && v2 <= -15.057 && *a2 >= -180.1 && *a2 <= -178.097) {
    return 1;
  }
  BOOL v4 = v2 > 49.589 || v2 < 49.07;
  if (!v4 && *a2 >= -2.82 && *a2 <= -1.96) {
    return 1;
  }
  BOOL v5 = v2 < 2.6019;
  if (v2 > 8.469) {
    BOOL v5 = 1;
  }
  return !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= 22.178 && v2 <= 22.4435 && *a2 >= 113.828 && *a2 <= 114.4585
      || v2 >= 22.4435 && v2 <= 22.502 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 17.366 && v2 <= 18.926 && *a2 >= -78.498 && *a2 <= -75.908
      || !v4 && *a2 >= -2.82 && *a2 <= -1.96
      || v2 >= 22.175 && v2 <= 22.203 && *a2 >= 113.53 && *a2 <= 113.6
      || v2 >= 22.107 && v2 <= 22.175 && *a2 >= 113.548 && *a2 <= 113.6
      || v2 >= 35.656 && v2 <= 36.201 && *a2 >= 14.04 && *a2 <= 14.713
      || v2 >= -20.76 && v2 <= -19.6 && *a2 >= 56.9 && *a2 <= 58.4
      || v2 >= 16.61 && v2 <= 16.91 && *a2 >= -62.3 && *a2 <= -62.06
      || v2 >= -0.6 && v2 <= -0.42 && *a2 >= 166.866 && *a2 <= 167.028
      || v2 >= -19.3 && v2 <= -18.67 && *a2 >= -170.126 && *a2 <= -169.6
      || v2 >= -25.858 && v2 <= -23.42 && *a2 >= -131.33 && *a2 <= -123.664
      || v2 >= -14.457 && v2 <= -12.864 && *a2 >= -173.081 && *a2 <= -171.117
      || v2 >= -16.4 && v2 <= -15.4 && *a2 >= -6.2 && *a2 <= -5.0
      || v2 >= 16.986 && v2 <= 17.508 && *a2 >= -62.918 && *a2 <= -62.478
      || v2 >= -5.4 && v2 <= -3.15 && *a2 >= 54.5 && *a2 <= 56.8
      || v2 >= -12.139 && v2 <= -6.353 && *a2 >= 156.267 && *a2 <= 167.87
      || !v5 && *a2 >= -59.5 && *a2 <= -54.489
      || v2 >= -9.8 && v2 <= -8.01 && *a2 >= -172.9 && *a2 <= -170.9
      || v2 >= -22.115 && v2 <= -14.7 && *a2 >= -176.47 && *a2 <= -172.98
      || v2 >= 10.0 && v2 <= 11.585 && *a2 >= -61.8316 && *a2 <= -60.32
      || v2 >= 20.8 && v2 <= 22.35 && *a2 >= -72.56 && *a2 <= -70.81
      || v2 >= 17.555 && v2 <= 18.9639 && *a2 >= -65.11 && *a2 <= -64.14;
}

BOOL sub_1012ACE30(double *a1, double *a2)
{
  double v2 = *a1;
  return *a1 >= 22.4434 && v2 <= 22.62 && *a2 >= 113.952 && *a2 <= 114.4585
      || v2 >= 22.088 && v2 <= 22.244 && *a2 >= 113.511 && *a2 <= 113.621
      || v2 >= 20.439 && v2 <= 29.709 && *a2 >= 92.078 && *a2 <= 97.72
      || v2 >= 26.211 && v2 <= 30.6 && *a2 >= 77.862 && *a2 <= 97.72
      || v2 >= 8.42 && v2 <= 20.553 && *a2 >= 97.2 && *a2 <= 105.72
      || v2 >= 30.6 && v2 <= 37.23 && *a2 >= 69.13 && *a2 <= 80.725
      || v2 >= 24.09 && v2 <= 31.9 && *a2 >= 60.726 && *a2 <= 69.13
      || v2 >= -18.347 && v2 <= -16.74 && *a2 >= 11.05 && *a2 <= 23.74
      || v2 >= -17.067 && v2 <= -10.64 && *a2 >= 21.69 && *a2 <= 24.313
      || v2 >= -13.672 && v2 <= -10.44 && *a2 >= 23.327 && *a2 <= 31.131
      || v2 >= -10.65 && v2 <= 4.07 && *a2 >= 28.115 && *a2 <= 31.96
      || v2 >= -3.03 && v2 <= 5.2 && *a2 >= 31.65 && *a2 <= 42.51
      || v2 >= 0.96 && v2 <= 8.6 && *a2 >= -61.6 && *a2 <= -53.7;
}

BOOL sub_1012AD1B4(double *a1, double *a2)
{
  double v2 = *a1;
  BOOL result = 1;
  if ((*a1 < 27.6 || v2 > 90.0 || *a2 < -180.0 || *a2 > -65.0) && (v2 < 37.1 || v2 > 90.0 || *a2 < 2.75 || *a2 > 129.7))
  {
    if (v2 < -49.0 || v2 > 0.0 || (*a2 >= -93.0 ? (BOOL v3 = *a2 > -30.0) : (BOOL v3 = 1), v3))
    {
      if ((v2 < 22.7 || v2 > 90.0 || *a2 < 97.7 || *a2 > 122.7)
        && (v2 < 5.24 || v2 > 33.0 || *a2 < -29.8 || *a2 > 54.475)
        && (v2 < 31.75 || v2 > 49.0 || *a2 < -13.0 || *a2 > 3.0))
      {
        BOOL v4 = v2 < -1.0 || v2 > 28.0;
        if ((v4 || *a2 < -120.0 || *a2 > -81.67) && (v2 < 14.3 || v2 > 25.4 || *a2 < -163.4 || *a2 > -150.8)) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1012AD3B8(double a1, double a2)
{
  double v3 = a2;
  double v4 = a1;
  if (sub_1012AD1B4(&v4, &v3)) {
    return 2;
  }
  if (sub_1012ABC44(&v4, &v3)) {
    return 1;
  }
  if (sub_1012ACE30(&v4, &v3)) {
    return 0;
  }
  return 2;
}

uint64_t sub_1012AD420()
{
  if (qword_102486AB8 != -1) {
    dispatch_once(&qword_102486AB8, &stru_10231D010);
  }
  return qword_10248B3D0;
}

void sub_1012AD464(id a1)
{
}

void sub_1012AD4C8()
{
}

void sub_1012AD4EC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_10231D040;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = off_1022AD070;
  *(void *)(a1 + 48) = 60;
  *(void *)(a1 + 56) = off_1022AD0A0;
  *(void *)(a1 + 64) = 60;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = off_1022AD0A0;
  *(void *)(a1 + 136) = 60;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = off_1022AD0A0;
  *(void *)(a1 + 208) = 60;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = off_1022AD070;
  *(void *)(a1 + 280) = 30;
  *(void *)(a1 + 288) = off_1022AD0A0;
  *(void *)(a1 + 296) = 30;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = off_1022AD0A0;
  *(void *)(a1 + 368) = 30;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = off_1022AD0A0;
  *(void *)(a1 + 440) = 30;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = off_1022AD0A0;
  *(void *)(a1 + 512) = 30;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = off_1022AD070;
  *(void *)(a1 + 584) = 256;
  *(void *)(a1 + 592) = off_1022AD0A0;
  *(void *)(a1 + 600) = 256;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = off_1022AD0A0;
  *(void *)(a1 + 672) = 256;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(void *)(a1 + 736) = off_1022AD0A0;
  *(void *)(a1 + 744) = 256;
  *(void *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(void *)(a1 + 808) = off_1022AD0A0;
  *(void *)(a1 + 816) = 256;
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 904) = 0;
  *(unsigned char *)(a1 + 912) = 1;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 928) = 0x41E000007F7FFFFFLL;
  *(void *)(a1 + 936) = off_1022AD5D0;
  *(void *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 952) = 0;
  *(void *)(a1 + 960) = off_1022AD5D0;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(void *)(a1 + 984) = off_1022AD5D0;
  *(void *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_WORD *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 0;
  if ((sub_1000A16E8() & 0x40000) != 0)
  {
    sub_100103240();
    char v3 = sub_10073E258() ^ 1;
  }
  else
  {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 1024) = v3;
  *(unsigned char *)(a1 + 1025) = 0;
  *(_WORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(void *)(a1 + 1072) = a1 + 1072;
  *(void *)(a1 + 1080) = a1 + 1072;
  *(void *)(a1 + 1088) = 0;
  operator new();
}

void sub_1012ADCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_1003B2350(v18);
  uint64_t v20 = *v16;
  *uint64_t v16 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v13[115];
  v13[115] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  v13[101] = a11;
  sub_1003A7340(v13 + 104);
  sub_1003A73E8(v17);
  v13[63] = a12;
  sub_1003A7340(v13 + 66);
  sub_1003A73E8(v15);
  sub_1003A73E8(a13);
  uint64_t v22 = v13[4];
  void v13[4] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v13[3];
  v13[3] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *v14;
  *BOOL v14 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1012ADE48(uint64_t a1)
{
  return sub_1012ADE50(*(void *)(a1 + 32));
}

uint64_t sub_1012ADE50(uint64_t result)
{
  if (!*(unsigned char *)(result + 1065))
  {
    if (!*(unsigned char *)(result + 1024)) {
      sub_101AABE2C();
    }
    if (!*(void *)(result + 1032)) {
      operator new();
    }
  }
  return result;
}

void sub_1012ADF88(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1012B35F4((uint64_t *)va);
  sub_1012B3304((uint64_t *)va1);
  operator delete();
}

unsigned char *sub_1012ADFC4(unsigned char *result)
{
  if (!result[1008])
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 2);
    *((void *)v1 + 2) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    BOOL result = (unsigned char *)*((void *)v1 + 4);
    *((void *)v1 + 4) = 0;
    if (result) {
      BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
    }
    if (v1[1065])
    {
      BOOL result = (unsigned char *)*((void *)v1 + 129);
      *((void *)v1 + 129) = 0;
      if (result)
      {
        uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
        return (unsigned char *)v4();
      }
    }
  }
  return result;
}

uint64_t sub_1012AE0CC(uint64_t a1)
{
  *(void *)a1 = off_10231D040;
  dispatch_release(*(dispatch_object_t *)(a1 + 1016));
  sub_1003B2350((void *)(a1 + 1072));
  uint64_t v2 = *(void *)(a1 + 1032);
  *(void *)(a1 + 1032) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 920);
  *(void *)(a1 + 920) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)(a1 + 808) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 832));
  sub_1003A73E8((void *)(a1 + 576));
  *(void *)(a1 + 504) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 528));
  sub_1003A73E8((void *)(a1 + 272));
  sub_1003A73E8((void *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_1012AE278(uint64_t a1)
{
  sub_1012AE0CC(a1);

  operator delete();
}

void sub_1012AE2B0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_1000D3E78();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _OWORD v9[2] = sub_1012AE348;
  void v9[3] = &unk_1022EE750;
  void v9[5] = a1;
  void v9[6] = a2;
  char v10 = a3;
  int v9[4] = a4;
  sub_1009E8E94(v8, (uint64_t)v9);
}

void sub_1012AE348(uint64_t a1)
{
}

void sub_1012AE35C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  if (*(unsigned char *)(a1 + 1065)) {
    return;
  }
  char v8 = sub_1012AE610((void *)a1, a2);
  if (!a4 && (v8 & 1) == 0)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    long long v9 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[CLGBE] Client instance %{public}p already unregistered", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::setHandlerForInstanceInternal(const void *, const BOOL, Handler)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return;
  }
  if (a4) {
    sub_1012AE82C(a1, a2, a3, a4);
  }
  uint64_t v10 = a1 + 1072;
  uint64_t v11 = *(void *)(a1 + 1080);
  if (v11 == a1 + 1072)
  {
    *(unsigned char *)(a1 + 1008) = 0;
    uint64_t v11 = a1 + 1072;
    if (!*(unsigned char *)(a1 + 1024)) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 1080);
    while (!*(unsigned char *)(v12 + 32))
    {
      uint64_t v12 = *(void *)(v12 + 8);
      if (v12 == v10)
      {
        *(unsigned char *)(a1 + 1008) = 0;
        goto LABEL_21;
      }
    }
    *(unsigned char *)(a1 + 1008) = v12 != v10;
    if (v12 != v10) {
      *(_DWORD *)(a1 + 932) = 1105199104;
    }
LABEL_21:
    if (!*(unsigned char *)(a1 + 1024)) {
      goto LABEL_26;
    }
    while (*(unsigned char *)(v11 + 32))
    {
      uint64_t v11 = *(void *)(v11 + 8);
      if (v11 == v10)
      {
        uint64_t v11 = a1 + 1072;
        break;
      }
    }
  }
  *(unsigned char *)(a1 + 1025) = v11 != v10;
LABEL_26:

  sub_1012AEC90(a1);
}

uint64_t sub_1012AE610(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)a1[135];
  if (v2 == a1 + 134) {
    return 0;
  }
  while (v2[2] != a2)
  {
    uint64_t v2 = (uint64_t *)v2[1];
    if (v2 == a1 + 134) {
      return 0;
    }
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  uint64_t v6 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134349056;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[CLGBE] Removing client %{public}p", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    char v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGyroBiasEstimator::removeClientInternal(const void *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  _Block_release((const void *)v2[3]);
  uint64_t v7 = *v2;
  *(void *)(v7 + 8) = v2[1];
  *(void *)v2[1] = v7;
  --a1[136];
  operator delete(v2);
  return 1;
}

void sub_1012AE82C(uint64_t a1, uint64_t a2, char a3, void *aBlock)
{
  char v8 = _Block_copy(aBlock);
  long long v9 = (char *)operator new(0x28uLL);
  *((void *)v9 + 2) = a2;
  *((void *)v9 + 3) = v8;
  v9[32] = a3;
  *(_DWORD *)(v9 + 33) = 0;
  *((_DWORD *)v9 + 9) = 0;
  uint64_t v10 = *(void *)(a1 + 1072);
  *(void *)(v10 + 8) = v9;
  *(void *)(a1 + 1072) = v9;
  *(void *)long long v9 = v10;
  *((void *)v9 + 1) = a1 + 1072;
  ++*(void *)(a1 + 1088);
  if (*(unsigned char *)(a1 + 1064))
  {
    char v11 = *(unsigned char *)(a1 + 912);
    if (v11) {
      char v11 = *(_DWORD *)(a1 + 908) != 0;
    }
    uint64_t v27 = *(void *)(a1 + 1040);
    int v28 = *(_DWORD *)(a1 + 1048);
    int v30 = *(_DWORD *)(a1 + 1060);
    int v31 = 0;
    uint64_t v29 = *(void *)(a1 + 1052);
    LOBYTE(v31) = v11;
    (*((void (**)(void *, uint64_t *))aBlock + 2))(aBlock, &v27);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    uint64_t v12 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      double v13 = *(float *)(a1 + 1040);
      double v14 = *(float *)(a1 + 1044);
      double v15 = *(float *)(a1 + 1048);
      double v16 = *(float *)(a1 + 1052);
      double v17 = *(float *)(a1 + 1056);
      double v18 = *(float *)(a1 + 1060);
      *(_DWORD *)long long buf = 134350592;
      uint64_t v47 = a2;
      __int16 v48 = 2050;
      double v49 = v13;
      __int16 v50 = 2050;
      double v51 = v14;
      __int16 v52 = 2050;
      double v53 = v15;
      __int16 v54 = 2050;
      double v55 = v16;
      __int16 v56 = 2050;
      double v57 = v17;
      __int16 v58 = 2050;
      double v59 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[CLGBE] Adding client %{public}p, sending out cached gyro bias,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      double v19 = *(float *)(a1 + 1040);
      double v20 = *(float *)(a1 + 1044);
      double v21 = *(float *)(a1 + 1048);
      double v22 = *(float *)(a1 + 1052);
      double v23 = *(float *)(a1 + 1056);
      double v24 = *(float *)(a1 + 1060);
      int v32 = 134350592;
      uint64_t v33 = a2;
      __int16 v34 = 2050;
      double v35 = v19;
      __int16 v36 = 2050;
      double v37 = v20;
      __int16 v38 = 2050;
      double v39 = v21;
      __int16 v40 = 2050;
      double v41 = v22;
      __int16 v42 = 2050;
      double v43 = v23;
      __int16 v44 = 2050;
      double v45 = v24;
      unint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::addClientInternal(const void *, const BOOL, CLGyroBiasEstimator::Handler)", "%s\n", v25);
LABEL_21:
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    uint64_t v26 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v47 = a2;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "[CLGBE] Adding client %{public}p, no cached gyro bias available", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      int v32 = 134349056;
      uint64_t v33 = a2;
      unint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::addClientInternal(const void *, const BOOL, CLGyroBiasEstimator::Handler)", "%s\n", v25);
      goto LABEL_21;
    }
  }
}

void sub_1012AEC90(uint64_t a1)
{
  if (sub_1000EB1B0())
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    uint64_t v2 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(unsigned __int8 *)(a1 + 1025);
      int v4 = *(unsigned __int8 *)(a1 + 1008);
      uint64_t v5 = *(void *)(a1 + 1088);
      *(_DWORD *)long long buf = 67240704;
      int v24 = v3;
      __int16 v25 = 1026;
      int v26 = v4;
      __int16 v27 = 2050;
      uint64_t v28 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLGBE] SPUEnabled,%{public}d,BuildingGYTT,%{public}d,NumClients,%{public}lu", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      int v12 = *(unsigned __int8 *)(a1 + 1025);
      int v13 = *(unsigned __int8 *)(a1 + 1008);
      uint64_t v14 = *(void *)(a1 + 1088);
      int v17 = 67240704;
      int v18 = v12;
      __int16 v19 = 1026;
      int v20 = v13;
      __int16 v21 = 2050;
      uint64_t v22 = v14;
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::refreshDispatchersIfNecessaryInternal()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    if (*(void *)(a1 + 1088))
    {
      if (*(unsigned char *)(a1 + 1025))
      {
        sub_1012ADE50(a1);
        uint64_t v6 = sub_1000D2E34(0);
        (*(void (**)(void))(*(void *)(v6 + 136) + 16))();
      }
      if (*(unsigned char *)(a1 + 1008) || !*(unsigned char *)(a1 + 1024)) {
        sub_1012AF0D4(a1);
      }
    }
    if (*(unsigned char *)(a1 + 1024))
    {
      if (*(unsigned char *)(a1 + 1025)
        || (uint64_t v9 = sub_1000D2E34(0), (*(void (**)(void))(*(void *)(v9 + 136) + 16))(), *(unsigned char *)(a1 + 1024)))
      {
        if (*(unsigned char *)(a1 + 1008)) {
          return;
        }
        goto LABEL_26;
      }
    }
    if (!*(void *)(a1 + 1088))
    {
LABEL_26:
      dispatch_time_t v10 = dispatch_time(0, 2000000000);
      char v11 = *(NSObject **)(a1 + 1016);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1012AF4CC;
      block[3] = &unk_1022A3020;
      block[4] = a1;
      dispatch_after(v10, v11, block);
    }
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    uint64_t v7 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLGBE] Gyro not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      LOWORD(v17) = 0;
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::refreshDispatchersIfNecessaryInternal()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_1012AF0D4(uint64_t result)
{
  if (!*(unsigned char *)(result + 1065))
  {
    uint64_t v1 = result;
    if (!*(void *)(result + 920) && !*(unsigned char *)(result + 1024))
    {
      sub_1000D5BCC();
      sub_1005D791C();
    }
    if (!*(void *)(result + 16))
    {
      BOOL result = sub_1000EB1B0();
      if (result) {
        operator new();
      }
    }
    if (!*(void *)(v1 + 24))
    {
      BOOL result = sub_1000EB1B0();
      if (result) {
        operator new();
      }
    }
    if (!*(void *)(v1 + 32))
    {
      BOOL result = sub_100B0AEA8();
      if (result) {
        operator new();
      }
    }
  }
  return result;
}

void sub_1012AF460(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1012B2BEC((uint64_t *)va);
  sub_1012B2900(va1);
  operator delete();
}

void sub_1012AF4CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1012AF548;
  _OWORD v3[3] = &unk_1022A3020;
  v3[4] = v1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

unsigned char *sub_1012AF548(uint64_t a1)
{
  return sub_1012ADFC4(*(unsigned char **)(a1 + 32));
}

void sub_1012AF550(int a1, _DWORD *a2, void *__src, uint64_t a4)
{
  if (!*a2)
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_1012B0E84(a4, (uint64_t)__dst);
  }
}

float32_t sub_1012AF5C8(uint64_t a1, uint64_t a2, float32_t a3)
{
  return sub_1012AF5F8(a2, a1, a3);
}

void sub_1012AF5D8(uint64_t a1, float32x2_t *a2)
{
}

void sub_1012AF5E8(_DWORD *a1, uint64_t a2)
{
}

float32_t sub_1012AF5F8(uint64_t a1, uint64_t a2, float32_t result)
{
  if (!*(unsigned char *)(a1 + 1009))
  {
    double v23 = off_1022AD5D0;
    int v5 = *(_DWORD *)(a2 + 12);
    int v24 = *(_DWORD *)(a2 + 8);
    int v25 = v5;
    int v26 = *(_DWORD *)(a2 + 16);
    uint64_t v6 = *(float32x2_t **)(a1 + 880);
    __int16 v19 = off_1022AD5D0;
    int v20 = v24;
    int v21 = v5;
    int v22 = v26;
    sub_1012AFCD8(v6, (float32x2_t *)&v19);
    uint64_t v7 = *(void *)(a1 + 880);
    double v16 = off_1022AD5D0;
    uint64_t v17 = *(void *)(v7 + 16);
    int v18 = *(_DWORD *)(v7 + 24);
    sub_1001A44F4(a1 + 288, (float *)&v17);
    sub_1001A44F4(a1 + 360, (float *)&v17 + 1);
    sub_1001A44F4(a1 + 432, (float *)&v18);
    sub_1001A44F4(a1 + 504, (float *)(a1 + 928));
    if (*(unsigned char *)(a1 + 912) || *(unsigned char *)(a1 + 1008))
    {
      int v8 = 0;
      int v9 = 0;
      if (*(void *)(a1 + 352)) {
        int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 320) + ((*(void *)(a1 + 344) >> 7) & 0x1FFFFFFFFFFFFF8))
      }
                       + 4 * (*(void *)(a1 + 344) & 0x3FFLL));
      if (*(void *)(a1 + 424)) {
        int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 392) + ((*(void *)(a1 + 416) >> 7) & 0x1FFFFFFFFFFFFF8))
      }
                       + 4 * (*(void *)(a1 + 416) & 0x3FFLL));
      float v10 = 0.0;
      int v11 = 0;
      if (*(void *)(a1 + 496)) {
        int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 464) + ((*(void *)(a1 + 488) >> 7) & 0x1FFFFFFFFFFFFF8))
      }
                        + 4 * (*(void *)(a1 + 488) & 0x3FFLL));
      int v12 = off_1022AD5D0;
      int v13 = v9;
      int v14 = v8;
      int v15 = v11;
      if (*(void *)(a1 + 568)) {
        float v10 = *(float *)(*(void *)(*(void *)(a1 + 536) + ((*(void *)(a1 + 560) >> 7) & 0x1FFFFFFFFFFFFF8))
      }
                       + 4 * (*(void *)(a1 + 560) & 0x3FFLL));
      sub_1012AFD90((float32x2_t *)a1, (float32x2_t *)&v12, v10, *(double *)a2);
    }
    else
    {
      return sub_1012AFEEC(*(float32x2_t **)(a1 + 896));
    }
  }
  return result;
}

void sub_1012AF7F8(float32x2_t *a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 8);
  a1[116].f32[0] = v2;
  float32_t v3 = (float)(v2 * a1[119].f32[0]) + a1[122].f32[0];
  a1[124] = vadd_f32(vmul_n_f32(a1[118], v2), a1[121]);
  a1[125].f32[0] = v3;
  if (!a1[113].i32[1])
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    uint64_t v6 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      double v7 = a1[116].f32[0];
      *(_DWORD *)long long buf = 134349056;
      double v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[CLGBE] Notifying clients on temperature update,temperature,%{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::feedGyroTemperature(const CLGyro::Temperature *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_1012AFF30((uint64_t)a1, *(double *)a2);
  }
}

void sub_1012AFA00(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 1008)) {
    goto LABEL_2;
  }
  int v25 = off_1022AD5D0;
  int v3 = a2[3];
  int v26 = a2[2];
  int v27 = v3;
  int v28 = a2[4];
  uint64_t v4 = *(float32x2_t **)(a1 + 888);
  int v21 = off_1022AD5D0;
  int v22 = v26;
  int v23 = v3;
  int v24 = v28;
  sub_1012AFCD8(v4, (float32x2_t *)&v21);
  uint64_t v5 = *(void *)(a1 + 888);
  int v18 = off_1022AD5D0;
  uint64_t v19 = *(void *)(v5 + 16);
  float v20 = *(float *)(v5 + 24);
  sub_1001A44F4(a1 + 56, (float *)&v19);
  sub_1001A44F4(a1 + 128, (float *)&v19 + 1);
  sub_1001A44F4(a1 + 200, &v20);
  sub_100D32778(a1 + 40, (float32x2_t *)&v18);
  uint64_t v6 = *(void *)(a1 + 120);
  float v7 = 0.0;
  float v8 = 0.0;
  if (v6) {
    float v8 = *(float *)(*(void *)(*(void *)(a1 + 88)
  }
                              + (((unint64_t)(v6 + *(void *)(a1 + 112) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((v6 + *(void *)(a1 + 112) - 1) & 0x3FF));
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9) {
    float v7 = *(float *)(*(void *)(*(void *)(a1 + 160)
  }
                              + (((unint64_t)(v9 + *(void *)(a1 + 184) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((v9 + *(void *)(a1 + 184) - 1) & 0x3FF));
  uint64_t v10 = *(void *)(a1 + 264);
  float v11 = 0.0;
  float v12 = 0.0;
  if (v10) {
    float v12 = *(float *)(*(void *)(*(void *)(a1 + 232)
  }
                               + (((unint64_t)(v10 + *(void *)(a1 + 256) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v10 + *(void *)(a1 + 256) - 1) & 0x3FF));
  if (v6) {
    float v11 = *(float *)(*(void *)(*(void *)(a1 + 88) + ((*(void *)(a1 + 112) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * (*(void *)(a1 + 112) & 0x3FFLL));
  float v13 = 0.0;
  float v14 = 0.0;
  if (v9) {
    float v14 = *(float *)(*(void *)(*(void *)(a1 + 160) + ((*(void *)(a1 + 184) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * (*(void *)(a1 + 184) & 0x3FFLL));
  float v15 = (float)(*(float *)&v19 + *((float *)&v19 + 1)) + v20;
  if (v10) {
    float v13 = *(float *)(*(void *)(*(void *)(a1 + 232) + ((*(void *)(a1 + 256) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * (*(void *)(a1 + 256) & 0x3FFLL));
  int v18 = off_1022AD5D0;
  *(float *)&uint64_t v19 = v8 - v11;
  *((float *)&v19 + 1) = v7 - v14;
  float v20 = v12 - v13;
  double v16 = (unsigned int *)(a1 + 904);
  if (v15
     + (float)((float)((float)(*((float *)&v19 + 1) * *((float *)&v19 + 1)) + (float)(*(float *)&v19 * *(float *)&v19))
             + (float)(v20 * v20))
     * 0.2 <= 0.5)
  {
    unsigned int v17 = *v16 + 1;
    *double v16 = v17;
    if (v17 >= 5) {
LABEL_2:
    }
      *(unsigned char *)(a1 + 912) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 912) = 0;
    *(void *)double v16 = 0;
    sub_1012B0B98((void *)a1);
  }
}

float32x2_t sub_1012AFCD8(float32x2_t *a1, float32x2_t *a2)
{
  if (&a1[4] != a2)
  {
    float32x2_t result = a2[1];
    a1[5] = result;
    a1[6].i32[0] = a2[2].i32[0];
  }
  int v3 = a1->i32[0];
  int v4 = a1->i32[0] + 1;
  a1->i32[0] = v4;
  if (v3 > 2)
  {
    float v6 = a1->f32[1];
    float32_t v7 = (float)((float)(1.0 - v6) * a1[3].f32[0]) + (float)(v6 * a2[2].f32[0]);
    float32x2_t result = vadd_f32(vmul_n_f32(a1[2], 1.0 - v6), vmul_n_f32(a2[1], v6));
    a1[2] = result;
    a1[3].f32[0] = v7;
  }
  else
  {
    float v5 = 1.0 / (double)v4;
    result.f32[0] = (float)((float)(a1[3].f32[0] * (float)v3) + a2[2].f32[0]) * v5;
    a1[2] = vmul_n_f32(vadd_f32(vmul_n_f32(a1[2], (float)v3), a2[1]), v5);
    a1[3].i32[0] = result.i32[0];
  }
  return result;
}

void sub_1012AFD90(float32x2_t *a1, float32x2_t *a2, float a3, double a4)
{
  if (a3 != 3.4028e38)
  {
    float v8 = a1[125].f32[0];
    float32x2_t v9 = vsub_f32(a2[1], a1[124]);
    float v10 = a2[2].f32[0];
    float v11 = v10 - v8;
    int v22 = off_1022AD5D0;
    float32x2_t v23 = v9;
    float v24 = v10 - v8;
    float v12 = a1[116].f32[1];
    float v13 = fabsf(v9.f32[1]);
    float v14 = vabds_f32(v10, v8);
    if (fabsf(v9.f32[0]) <= v12 && v13 <= v12 && v14 <= v12)
    {
      ++a1[113].i32[1];
      unsigned int v17 = (float32x2_t *)a1[112];
      v20[0] = (float32x2_t)off_1022AD5D0;
      v20[1] = v9;
      float v21 = v11;
      sub_1012AFCD8(v17, v20);
      if ((a1[113].i32[1] & 7) == 1) {
        sub_1012AFF30((uint64_t)a1, a4);
      }
      v18[0] = off_1022AD5D0;
      v18[1] = a2[1];
      __int32 v19 = a2[2].i32[0];
      sub_1012B04A8((uint64_t)a1, (float *)v18, a3);
    }
    else
    {
      a1[113].i32[1] = 0;
      sub_1012B0B98(a1);
    }
  }
}

float32_t sub_1012AFEEC(float32x2_t *a1)
{
  ++a1->i32[0];
  float v1 = a1->f32[1] * -0.2 + 1.0;
  float32_t result = a1[3].f32[0] * v1;
  a1[2] = vmul_n_f32(a1[2], v1);
  a1[3].f32[0] = result;
  return result;
}

void sub_1012AFF30(uint64_t a1, double a2)
{
  int v4 = *(float32x2_t **)(a1 + 896);
  float32x2_t v5 = (float32x2_t)vdup_n_s32(0x3C8EFA35u);
  float32x2_t v15 = vmul_f32(vadd_f32(v4[2], *(float32x2_t *)(a1 + 992)), v5);
  float v16 = (float)(v4[3].f32[0] + *(float *)(a1 + 1000)) * 0.017453;
  sub_100D32778(a1 + 576, (float32x2_t *)buf);
  float v6 = (float)(*(float *)&v21[12] * 0.017453) * 0.017453;
  float32x2_t v13 = vmul_f32(vmul_f32(*(float32x2_t *)&v21[4], v5), v5);
  float v14 = v6;
  *(float32x2_t *)(a1 + 1040) = v15;
  *(float *)(a1 + 1048) = v16;
  *(float32x2_t *)(a1 + 1052) = v13;
  *(float *)(a1 + 1060) = v6;
  *(unsigned char *)(a1 + 1064) = 1;
  for (uint64_t i = *(void *)(a1 + 1080); i != a1 + 1072; uint64_t i = *(void *)(i + 8))
  {
    if (*(unsigned char *)(i + 32) || !*(unsigned char *)(a1 + 1024))
    {
      (*(void (**)(void))(*(void *)(i + 24) + 16))();
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      float v8 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
      {
        double v9 = *(float *)(a1 + 928);
        float v10 = *(float **)(a1 + 896);
        float v17 = v10[4];
        float v18 = v10[5];
        float v19 = v10[6];
        uint64_t v11 = *(void *)(i + 16);
        *(_DWORD *)long long buf = 134351872;
        *(double *)float v21 = a2;
        *(_WORD *)&v21[8] = 2050;
        *(double *)&unsigned char v21[10] = v9;
        __int16 v22 = 2050;
        double v23 = v15.f32[0];
        __int16 v24 = 2050;
        double v25 = v15.f32[1];
        __int16 v26 = 2050;
        double v27 = v16;
        __int16 v28 = 2050;
        double v29 = v17;
        __int16 v30 = 2050;
        double v31 = v18;
        __int16 v32 = 2050;
        double v33 = v19;
        __int16 v34 = 2050;
        double v35 = v13.f32[0];
        __int16 v36 = 2050;
        double v37 = v13.f32[1];
        __int16 v38 = 2050;
        double v39 = v14;
        __int16 v40 = 2050;
        uint64_t v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLGBE] GyroBias,time,%{public}f,temperature,%{public}f,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,dbias.x,%{public}f,dbias.y,%{public}f,dbias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f,client,%{public}p", buf, 0x7Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_10231D0A0);
        }
        float v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::notifyClients(CFTimeInterval)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
  }
}

void sub_1012B04A8(uint64_t a1, float *a2, float a3)
{
  float v40 = a3;
  float32x2_t v5 = (void *)(a1 + 808);
  sub_1001A44F4(a1 + 808, &v40);
  float v6 = sub_1012B0A50(v5);
  float v7 = sub_1012B0AF4(v5);
  if ((float)(v6 - v7) > 2.0)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    float v8 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349312;
      *(double *)&uint8_t buf[4] = v6;
      *(_WORD *)__int16 v48 = 2050;
      *(double *)&v48[2] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CLGBE] #Warning Temperature is changing too quickly, clearing GYTT buffers,max,%{public}f,min,%{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      int v41 = 134349312;
      double v42 = v6;
      __int16 v43 = 2050;
      double v44 = v7;
      __int16 v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)", "%s\n", v24);
      if (v24 != buf) {
        free(v24);
      }
    }
    sub_1012B0B98((void *)a1);
    sub_1001A44F4((uint64_t)v5, &v40);
  }
  sub_1001A44F4(a1 + 592, a2 + 2);
  sub_1001A44F4(a1 + 664, a2 + 3);
  sub_1001A44F4(a1 + 736, a2 + 4);
  sub_100D32778(a1 + 576, &v36);
  if (*(void *)(a1 + 584) < 0x21uLL || (float)((float)(v37 + v38) + v39) <= 0.012)
  {
    unint64_t v11 = *(void *)(a1 + 656);
    if (v11 < *(void *)(a1 + 600)) {
      return;
    }
    float v12 = 0.0;
    float v13 = 0.0;
    if (v11) {
      float v13 = *(float *)(a1 + 608) / (float)v11;
    }
    unint64_t v14 = *(void *)(a1 + 728);
    if (v14) {
      float v12 = *(float *)(a1 + 680) / (float)v14;
    }
    unint64_t v15 = *(void *)(a1 + 800);
    if (v15) {
      float v16 = *(float *)(a1 + 752) / (float)v15;
    }
    else {
      float v16 = 0.0;
    }
    *(void *)long long buf = off_1022AD5D0;
    *(float *)&uint8_t buf[8] = v13;
    *(float *)__int16 v48 = v12;
    *(float *)&v48[4] = v16;
    sub_100D32778(a1 + 576, (float32x2_t *)&v41);
    int v17 = HIDWORD(v42);
    sub_100D32778(a1 + 576, &v34);
    int v18 = v35;
    sub_100D32778(a1 + 576, v32);
    unint64_t v19 = *(void *)(a1 + 872);
    if (v19) {
      double v20 = (float)(*(float *)(a1 + 824) / (float)v19);
    }
    else {
      double v20 = 0.0;
    }
    int v21 = v33;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    id v23 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLGyroCalibrationDatabase"];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    _DWORD v25[2] = sub_1012B0BE4;
    void v25[3] = &unk_10231D050;
    float v26 = v13;
    float v27 = v12;
    float v28 = v16;
    int v29 = v17;
    int v30 = v18;
    int v31 = v21;
    *(double *)&v25[4] = v20;
    *(CFAbsoluteTime *)&v25[5] = Current;
    [v23 doAsync:v25];
  }
  else if (*(unsigned char *)(a1 + 1008))
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v9 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349568;
      *(double *)&uint8_t buf[4] = v37;
      *(_WORD *)__int16 v48 = 2050;
      *(double *)&v48[2] = v38;
      __int16 v49 = 2050;
      double v50 = v39;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[CLGBE] #Warning Could not insert GYTT because bump was detected,variance.x,%{public}f,y,%{public}f,z,%{public}f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      int v41 = 134349568;
      double v42 = v37;
      __int16 v43 = 2050;
      double v44 = v38;
      __int16 v45 = 2050;
      double v46 = v39;
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
  }
  sub_1012B0B98((void *)a1);
}

float sub_1012B0A50(void *a1)
{
  uint64_t v1 = a1[4];
  if (a1[5] == v1) {
    goto LABEL_12;
  }
  unint64_t v2 = a1[7];
  int v3 = (float **)(v1 + 8 * (v2 >> 10));
  int v4 = *v3;
  uint64_t v5 = (uint64_t)&(*v3)[v2 & 0x3FF];
  unint64_t v6 = a1[8] + v2;
  unint64_t v7 = v6 >> 10;
  uint64_t v8 = *(void *)(v1 + 8 * (v6 >> 10));
  uint64_t v9 = v6 & 0x3FF;
  float v10 = (float *)(v8 + 4 * v9);
  if ((float *)v5 != v10)
  {
    unint64_t v11 = &(*v3)[a1[7] & 0x3FFLL];
    while (1)
    {
      if ((char *)++v11 - (char *)v4 == 4096)
      {
        float v12 = v3[1];
        ++v3;
        int v4 = v12;
        unint64_t v11 = v12;
      }
      if (v11 == v10) {
        break;
      }
      if (*(float *)v5 < *v11) {
        uint64_t v5 = (uint64_t)v11;
      }
    }
  }
  if (v5 == *(void *)(v1 + 8 * v7) + 4 * v9) {
LABEL_12:
  }
    sub_101AABFC8();
  return *(float *)v5;
}

float sub_1012B0AF4(void *a1)
{
  uint64_t v1 = a1[4];
  if (a1[5] == v1) {
    goto LABEL_12;
  }
  unint64_t v2 = a1[7];
  int v3 = (float **)(v1 + 8 * (v2 >> 10));
  int v4 = *v3;
  uint64_t v5 = (uint64_t)&(*v3)[v2 & 0x3FF];
  unint64_t v6 = a1[8] + v2;
  unint64_t v7 = v6 >> 10;
  uint64_t v8 = *(void *)(v1 + 8 * (v6 >> 10));
  uint64_t v9 = v6 & 0x3FF;
  float v10 = (float *)(v8 + 4 * v9);
  if (v10 != (float *)v5)
  {
    unint64_t v11 = &(*v3)[a1[7] & 0x3FFLL];
    while (1)
    {
      if ((char *)++v11 - (char *)v4 == 4096)
      {
        float v12 = v3[1];
        ++v3;
        int v4 = v12;
        unint64_t v11 = v12;
      }
      if (v11 == v10) {
        break;
      }
      if (*v11 < *(float *)v5) {
        uint64_t v5 = (uint64_t)v11;
      }
    }
  }
  if (v5 == *(void *)(v1 + 8 * v7) + 4 * v9) {
LABEL_12:
  }
    sub_101AAC14C();
  return *(float *)v5;
}

void sub_1012B0B98(void *a1)
{
  sub_1003A7544(a1 + 74);
  sub_1003A7544(a1 + 83);
  sub_1003A7544(a1 + 92);

  sub_1003A7544(a1 + 101);
}

void sub_1012B0BE4(uint64_t a1, uint64_t a2)
{
  float v3 = *(double *)(a1 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, float, double))(*(void *)a2 + 208))(a2, a1 + 48, a1 + 60, v3, *(double *)(a1 + 40));
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  int v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(float *)(a1 + 48);
    double v6 = *(float *)(a1 + 52);
    double v7 = *(float *)(a1 + 56);
    double v8 = *(float *)(a1 + 60);
    double v9 = *(float *)(a1 + 64);
    double v10 = *(float *)(a1 + 68);
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134350592;
    double v14 = v5;
    __int16 v15 = 2050;
    double v16 = v6;
    __int16 v17 = 2050;
    double v18 = v7;
    __int16 v19 = 2050;
    double v20 = v8;
    __int16 v21 = 2050;
    double v22 = v9;
    __int16 v23 = 2050;
    double v24 = v10;
    __int16 v25 = 2050;
    uint64_t v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CLGBE] Bias estimate inserted: bias,%{public}f,%{public}f,%{public}f,variance,%{public}f,%{public}f,%{public}f,temperature,%{public}f", buf, 0x48u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    float v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)_block_invoke", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1012B0E84(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 1)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    int v4 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
    {
      double v5 = *(float *)(a2 + 32);
      double v6 = *(float *)(a2 + 36);
      double v7 = *(float *)(a2 + 40);
      double v8 = *(float *)(a2 + 44);
      double v9 = *(float *)(a2 + 48);
      double v10 = *(float *)(a2 + 52);
      uint64_t v11 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134350592;
      double v16 = v5;
      __int16 v17 = 2050;
      double v18 = v6;
      __int16 v19 = 2050;
      double v20 = v7;
      __int16 v21 = 2050;
      double v22 = v8;
      __int16 v23 = 2050;
      double v24 = v9;
      __int16 v25 = 2050;
      double v26 = v10;
      __int16 v27 = 2050;
      uint64_t v28 = v11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLGBE] GyroBiasFit,slope.x,%{public}f,slope.y,%{public}f,slope.z,%{public}f,intercept.x,%{public}f,intercept.y,%{public}f,intercept.z,%{public}f,lastMiniCal,%{public}f", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      float v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroBiasEstimator::feedGyroBiasFit(CLMotionTypeGyroBiasFit)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    if (!*(unsigned char *)(a1 + 1008)) {
      *(_DWORD *)(a1 + 932) = 1080033280;
    }
    *(void *)(a1 + 944) = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 952) = *(_DWORD *)(a2 + 40);
    *(void *)(a1 + 968) = *(void *)(a2 + 44);
    *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 52);
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    float v12 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[CLGBE] Expected linear fit.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10231D0A0);
      }
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroBiasEstimator::feedGyroBiasFit(CLMotionTypeGyroBiasFit)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1012B125C(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1012B1290()
{
}

void *sub_1012B12A4()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D0D0;
  return result;
}

void sub_1012B12DC(uint64_t a1, void *a2)
{
  *a2 = off_10231D0D0;
}

uint64_t sub_1012B1304(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  float v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for gyro notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Sample>]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v4 = sub_100A08A84();
  return sub_1009D1EC4(v4, 0, v2, 0.02);
}

uint64_t sub_1012B14B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012B14F0()
{
}

void *sub_1012B14FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1012B1584()
{
}

void *sub_1012B1598()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D160;
  return result;
}

void sub_1012B15D0(uint64_t a1, void *a2)
{
  *a2 = off_10231D160;
}

void sub_1012B15F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  float v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Unregistering for gyro notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Sample>]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v4 = sub_100A08A84();
  sub_1009D26C4(v4, 0, v2);
}

uint64_t sub_1012B179C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012B17DC()
{
}

void *sub_1012B17E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1012B186C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  a1[1] = 0;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_10231D1F0;
  double v7 = a1 + 4;
  a1[7] = 0;
  if (sub_1012B1994(a2, (uint64_t)a1)) {
    sub_1012B1A24((uint64_t)v9, a3);
  }
  else {
    void v9[3] = 0;
  }
  sub_1012B1ABC(v7, (uint64_t)v9);
  sub_1012B17E8(v9);
  return a1;
}

void sub_1012B1968(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012B1994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B19EC(void *a1)
{
  sub_1012B1BC8(a1);

  operator delete();
}

uint64_t sub_1012B1A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1012B1ABC(void *a1, uint64_t a2)
{
  sub_1012B1B40(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1012B1B40(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1012B1BC8(void *a1)
{
  *a1 = off_10231D1F0;
  uint64_t v2 = a1 + 4;
  if (a1[7]) {
    sub_1012B1C3C((uint64_t)(a1 + 4), (uint64_t)a1);
  }
  sub_1012B17E8(v2);

  return sub_1019D78CC((uint64_t)a1);
}

uint64_t sub_1012B1C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B1C94()
{
}

void *sub_1012B1CA8()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D240;
  return result;
}

void sub_1012B1CE0(uint64_t a1, void *a2)
{
  *a2 = off_10231D240;
}

uint64_t sub_1012B1D08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  uint64_t v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for gyro temperature notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Temperature>]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v4 = sub_100A08A84();
  return sub_1009D1EC4(v4, 1, v2, 1.0);
}

uint64_t sub_1012B1EB0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012B1EF0()
{
}

void *sub_1012B1EFC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1012B1F84()
{
}

void *sub_1012B1F98()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D2D0;
  return result;
}

void sub_1012B1FD0(uint64_t a1, void *a2)
{
  *a2 = off_10231D2D0;
}

void sub_1012B1FF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  uint64_t v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Unregistering for gyro temperature notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLGyro::Temperature>]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v4 = sub_100A08A84();
  sub_1009D26C4(v4, 1, v2);
}

uint64_t sub_1012B219C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012B21DC()
{
}

void *sub_1012B21E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1012B226C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  a1[1] = 0;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_10231D360;
  double v7 = a1 + 4;
  a1[7] = 0;
  if (sub_1012B2394(a2, (uint64_t)a1)) {
    sub_1012B2424((uint64_t)v9, a3);
  }
  else {
    void v9[3] = 0;
  }
  sub_1012B24BC(v7, (uint64_t)v9);
  sub_1012B21E8(v9);
  return a1;
}

void sub_1012B2368(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012B2394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B23EC(void *a1)
{
  sub_1012B25C8(a1);

  operator delete();
}

uint64_t sub_1012B2424(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1012B24BC(void *a1, uint64_t a2)
{
  sub_1012B2540(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1012B2540(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1012B25C8(void *a1)
{
  *a1 = off_10231D360;
  uint64_t v2 = a1 + 4;
  if (a1[7]) {
    sub_1012B263C((uint64_t)(a1 + 4), (uint64_t)a1);
  }
  sub_1012B21E8(v2);

  return sub_1019D78CC((uint64_t)a1);
}

uint64_t sub_1012B263C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B2694()
{
}

void *sub_1012B26A8()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D3B0;
  return result;
}

void sub_1012B26E0(uint64_t a1, void *a2)
{
  *a2 = off_10231D3B0;
}

uint64_t sub_1012B2708(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  uint64_t v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for magnetometer notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMagnetometer::Sample>]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v4 = sub_100B0AEC4();
  return sub_1009D1EC4(v4, 0, v2, 0.025);
}

uint64_t sub_1012B28B4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012B28F4()
{
}

void *sub_1012B2900(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1012B2988()
{
}

void *sub_1012B299C()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D440;
  return result;
}

void sub_1012B29D4(uint64_t a1, void *a2)
{
  *a2 = off_10231D440;
}

void sub_1012B29FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  uint64_t v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Unregistering for magnetometer notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::registerInputNotificationsInternal()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMagnetometer::Sample>]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v4 = sub_100B0AEC4();
  sub_1009D26C4(v4, 0, v2);
}

uint64_t sub_1012B2BA0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1012B2BE0()
{
}

void *sub_1012B2BEC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1012B2C70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  a1[1] = 0;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_10231D4D0;
  double v7 = a1 + 4;
  a1[7] = 0;
  if (sub_1012B2D98(a2, (uint64_t)a1)) {
    sub_1012B2E28((uint64_t)v9, a3);
  }
  else {
    void v9[3] = 0;
  }
  sub_1012B2EC0(v7, (uint64_t)v9);
  sub_1012B2BEC(v9);
  return a1;
}

void sub_1012B2D6C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012B2D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B2DF0(void *a1)
{
  sub_1012B2FCC(a1);

  operator delete();
}

uint64_t sub_1012B2E28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1012B2EC0(void *a1, uint64_t a2)
{
  sub_1012B2F44(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1012B2F44(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1012B2FCC(void *a1)
{
  *a1 = off_10231D4D0;
  uint64_t v2 = a1 + 4;
  if (a1[7]) {
    sub_1012B3040((uint64_t)(a1 + 4), (uint64_t)a1);
  }
  sub_1012B2BEC(v2);

  return sub_1019D78CC((uint64_t)a1);
}

uint64_t sub_1012B3040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B3098()
{
}

void *sub_1012B30AC()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D520;
  return result;
}

void sub_1012B30E4(uint64_t a1, void *a2)
{
  *a2 = off_10231D520;
}

uint64_t sub_1012B310C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  uint64_t v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Registering for SPU Gyro Bias And Variance", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::prepareSPUGyroBiasAndVarianceDispatcher()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMotionCoprocessorInterface::GyroBiasAndVariance>]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v4 = sub_10058D9A0(0);
  return sub_1009D1EC4(v4, 8, v2, -1.0);
}

uint64_t sub_1012B32B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012B32F8()
{
}

void *sub_1012B3304(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1012B338C()
{
}

void *sub_1012B33A0()
{
  float32_t result = operator new(0x10uLL);
  *float32_t result = off_10231D5B0;
  return result;
}

void sub_1012B33D8(uint64_t a1, void *a2)
{
  *a2 = off_10231D5B0;
}

void sub_1012B3400(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10231D0A0);
  }
  uint64_t v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLGBE] Removing SPU Gyro Bias And Variance dispatcher", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10231D0A0);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGyroBiasEstimator::prepareSPUGyroBiasAndVarianceDispatcher()::(anonymous class)::operator()(auto *) const [dispatcher:auto = CLMotionNotifier::CallbackDispatcher<CLMotionCoprocessorInterface::GyroBiasAndVariance>]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v4 = sub_10058D9A0(0);
  sub_1009D26C4(v4, 8, v2);
}

uint64_t sub_1012B35A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012B35E8()
{
}

void *sub_1012B35F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1012B3678(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  a1[1] = 0;
  a1[2] = a4;
  a1[3] = a5;
  *a1 = off_10231D640;
  double v7 = a1 + 4;
  a1[7] = 0;
  if (sub_1012B37A0(a2, (uint64_t)a1)) {
    sub_1012B3830((uint64_t)v9, a3);
  }
  else {
    void v9[3] = 0;
  }
  sub_1012B38C8(v7, (uint64_t)v9);
  sub_1012B35F4(v9);
  return a1;
}

void sub_1012B3774(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012B37A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B37F8(void *a1)
{
  sub_1012B39D4(a1);

  operator delete();
}

uint64_t sub_1012B3830(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1012B38C8(void *a1, uint64_t a2)
{
  sub_1012B394C(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_1012B394C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1012B39D4(void *a1)
{
  *a1 = off_10231D640;
  uint64_t v2 = a1 + 4;
  if (a1[7]) {
    sub_1012B3A48((uint64_t)(a1 + 4), (uint64_t)a1);
  }
  sub_1012B35F4(v2);

  return sub_1019D78CC((uint64_t)a1);
}

uint64_t sub_1012B3A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1012B3A9C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_1012B3ACC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  sub_1012B3B28();
  return a1;
}

void sub_1012B3B10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012B3B28()
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  uint64_t result = sub_1001BEA14();
  if (Current != (CFRunLoopRef)result) {
    sub_101AAC2D0();
  }
  return result;
}

void *sub_1012B3B64(void *a1)
{
  sub_1012B3B9C(a1);
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_1012B3B9C(void *a1)
{
  sub_1012B3B28();
  if (!*a1) {
    return;
  }
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_10231D6B8);
  }
  uint64_t v2 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Close hid driver interface", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::closeHIDDriverInterface()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v3 = (IOCFPlugInInterface **)a1[2];
  uint64_t v4 = a1[3];
  double v5 = a1 + 2;
  if (v4)
  {
    (*(void (**)(void, void))(*(void *)v4 + 72))(a1[3], 0);
    if (!v3) {
      goto LABEL_12;
    }
  }
  else if (!v3)
  {
    *(void *)(*a1 + 8) = 0;
    *double v5 = 0;
    a1[3] = 0;
    return;
  }
  ((void (*)(IOCFPlugInInterface **))(*v3)->Release)(v3);
  IODestroyPlugInInterface(v3);
LABEL_12:
  *(void *)(*a1 + 8) = 0;
  *double v5 = 0;
  a1[3] = 0;
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_10231D6B8);
  }
  double v6 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = a1[3];
    *(_DWORD *)long long buf = 134218752;
    float v12 = v3;
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    uint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLSPUHIDDriverInterface] Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::closeHIDDriverInterface()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_1012B3F28(uint64_t *a1)
{
  sub_1012B3B28();
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_10231D6B8);
  }
  uint64_t v2 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Open hid driver interface", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    LOWORD(v47) = 0;
    int v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return;
  }
  theInterface = 0;
  uint64_t valuePtr = 0;
  uint64_t v44 = 0;
  uint64_t v4 = (__IOHIDServiceClient *)sub_100A291D0(v3);
  if (!v4)
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    __int16 v17 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[CLSPUHIDDriverInterface] IoHidDevice is not ready", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    LOWORD(v47) = 0;
    uint64_t v16 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n");
LABEL_35:
    if (v16 == buf) {
      return;
    }
    goto LABEL_36;
  }
  double v5 = v4;
  CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v4);
  CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
  CFDictionaryRef v7 = IORegistryEntryIDMatching(valuePtr);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v7);
  if (!MatchingService)
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    uint64_t v18 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Service doesn't exist", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    LOWORD(v47) = 0;
    uint64_t v16 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n");
    goto LABEL_35;
  }
  io_service_t v9 = MatchingService;
  SInt32 theScore = 0;
  CFUUIDRef v10 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
  CFUUIDRef v11 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  mach_error_t v12 = IOCreatePlugInInterfaceForService(v9, v10, v11, &theInterface, &theScore);
  IOObjectRelease(v9);
  if (v12)
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    __int16 v13 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v14 = mach_error_string(v12);
      *(_DWORD *)long long buf = 67240706;
      *(_DWORD *)__int16 v54 = v12;
      *(_WORD *)&v54[4] = 2082;
      *(void *)&v54[6] = v14;
      *(_WORD *)&v54[14] = 2114;
      *(void *)&v54[16] = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to create plugin interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    __int16 v15 = mach_error_string(v12);
    int v47 = 67240706;
    *(_DWORD *)__int16 v48 = v12;
    *(_WORD *)&v48[4] = 2082;
    *(void *)&v48[6] = v15;
    *(_WORD *)&v48[14] = 2114;
    *(void *)&v48[16] = v5;
    uint64_t v16 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", (const char *)v16);
    if (v16 == buf) {
      return;
    }
LABEL_36:
    free(v16);
    return;
  }
  __int16 v19 = theInterface;
  QueryInterface = (*theInterface)->QueryInterface;
  CFUUIDRef v21 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
  CFUUIDBytes v22 = CFUUIDGetUUIDBytes(v21);
  mach_error_t v23 = ((uint64_t (*)(IOCFPlugInInterface **, void, void, uint64_t *))QueryInterface)(v19, *(void *)&v22.byte0, *(void *)&v22.byte8, &v44);
  if (v23)
  {
    mach_error_t v24 = v23;
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    __int16 v25 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      double v26 = mach_error_string(v24);
      *(_DWORD *)long long buf = 67240706;
      *(_DWORD *)__int16 v54 = v24;
      *(_WORD *)&v54[4] = 2082;
      *(void *)&v54[6] = v26;
      *(_WORD *)&v54[14] = 2114;
      *(void *)&v54[16] = v5;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to set up query interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_10231D6B8);
      }
      float32x2_t v36 = mach_error_string(v24);
      int v47 = 67240706;
      *(_DWORD *)__int16 v48 = v24;
      *(_WORD *)&v48[4] = 2082;
      *(void *)&v48[6] = v36;
      *(_WORD *)&v48[14] = 2114;
      *(void *)&v48[16] = v5;
      float v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
LABEL_43:
    if (theInterface)
    {
      ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
      IODestroyPlugInInterface(theInterface);
    }
    return;
  }
  mach_error_t v27 = (*(uint64_t (**)(uint64_t, void))(*(void *)v44 + 64))(v44, 0);
  if (v27)
  {
    mach_error_t v28 = v27;
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    int v29 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      int v30 = mach_error_string(v28);
      *(_DWORD *)long long buf = 67240706;
      *(_DWORD *)__int16 v54 = v28;
      *(_WORD *)&v54[4] = 2082;
      *(void *)&v54[6] = v30;
      *(_WORD *)&v54[14] = 2114;
      *(void *)&v54[16] = v5;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to open hid driver interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_10231D6B8);
      }
      float v38 = mach_error_string(v28);
      int v47 = 67240706;
      *(_DWORD *)__int16 v48 = v28;
      *(_WORD *)&v48[4] = 2082;
      *(void *)&v48[6] = v38;
      *(_WORD *)&v48[14] = 2114;
      *(void *)&v48[16] = v5;
      float v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    if (v44) {
      (*(void (**)(uint64_t, void))(*(void *)v44 + 72))(v44, 0);
    }
    goto LABEL_43;
  }
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_10231D6B8);
  }
  int v31 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = a1[2];
    uint64_t v33 = a1[3];
    *(_DWORD *)long long buf = 134219008;
    *(void *)__int16 v54 = valuePtr;
    *(_WORD *)&v54[8] = 2048;
    *(void *)&unsigned char v54[10] = v32;
    *(_WORD *)&v54[18] = 2048;
    *(void *)&v54[20] = v33;
    __int16 v55 = 2048;
    __int16 v56 = theInterface;
    __int16 v57 = 2048;
    uint64_t v58 = v44;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[CLSPUHIDDriverInterface] Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    uint64_t v40 = a1[2];
    uint64_t v41 = a1[3];
    int v47 = 134219008;
    *(void *)__int16 v48 = valuePtr;
    *(_WORD *)&v48[8] = 2048;
    *(void *)&unsigned char v48[10] = v40;
    *(_WORD *)&v48[18] = 2048;
    *(void *)&v48[20] = v41;
    __int16 v49 = 2048;
    double v50 = theInterface;
    __int16 v51 = 2048;
    uint64_t v52 = v44;
    double v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  *(void *)(*a1 + 8) = valuePtr;
  uint64_t v34 = v44;
  a1[2] = (uint64_t)theInterface;
  a1[3] = v34;
}

uint64_t sub_1012B4B18(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_10231D6B8);
  }
  CFUUIDRef v10 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    double v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Attempting to send command with reply to SPU,length,%zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v11 + 80))(v11, a2, a3, a4, a5);
    if (v12)
    {
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_10231D6B8);
      }
      __int16 v13 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = mach_error_string(v12);
        *(_DWORD *)long long buf = 136446466;
        double v20 = v14;
        __int16 v21 = 1026;
        int v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] sendCommand() = %{public}s (0x%{public}x)", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_10231D6B8);
        }
        mach_error_string(v12);
        __int16 v15 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "%s\n");
LABEL_29:
        if (v15 != buf) {
          free(v15);
        }
      }
    }
  }
  else
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10231D6B8);
    }
    uint64_t v16 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[CLSPUHIDDriverInterface] hidDriverInterface NULL, unable to send command", buf, 2u);
    }
    uint64_t v12 = 3758097084;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_10231D6B8);
      }
      __int16 v15 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "%s\n");
      goto LABEL_29;
    }
  }
  return v12;
}

void sub_1012B4F9C(id a1)
{
  qword_102418FE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_1012B4FCC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100C67674(a1, a2);
  *(void *)uint64_t v3 = off_10231D6E8;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 100;
  *(unsigned char *)(v3 + 148) = 1;
  *(void *)(v3 + 164) = 0x10000000000;
  *(_DWORD *)(v3 + 160) = 1031798784;
  *(unsigned char *)(v3 + 1196) = 1;
  *(_DWORD *)(v3 + 1216) = 256;
  *(void *)(v3 + 1208) = 1031798784;
  *(unsigned char *)(v3 + 2244) = 1;
  *(_DWORD *)(v3 + 2264) = 256;
  *(void *)(v3 + 2256) = 1031798784;
  sub_10156BE08(v3 + 3296, v3 + 136);
  sub_10087BB14((void *)(a1 + 17216));
  uint64_t v4 = (float *)(a1 + 17512);
  *(_DWORD *)(a1 + 17512) = 1067030938;
  *(_WORD *)(a1 + 17516) = 0;
  *(_DWORD *)(a1 + 17520) = 3;
  *(void *)(a1 + 17528) = 0;
  *(_WORD *)(a1 + 17536) = 0;
  double v5 = (unsigned char *)(a1 + 17536);
  memset(v17, 0, 77);
  sub_100EB7F88(v17);
  sub_10087BB18(a1 + 17216, (uint64_t)v17);
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_10231D7E8);
  }
  double v6 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *v4;
    LODWORD(buf[0]) = 134217984;
    *(double *)((char *)buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "configuration: wake threshold = %f", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10231D7E8);
    }
    double v14 = *v4;
    int v18 = 134217984;
    double v19 = v14;
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLOnBodyNotifier6::CLOnBodyNotifier6(id<CLIntersiloUniverse>)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_10087BDF8(a1 + 17216);
  uint64_t v8 = sub_1000D3E78();
  sub_10006B564(v8, buf);
  char v9 = sub_1000D2988(*(uint64_t *)&buf[0], "EnablePmOnBodyDetection", (BOOL *)(a1 + 17536));
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v9)
  {
    if (*v5)
    {
      sub_1012B55B0(a1, 1);
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10231D7E8);
      }
      CFUUIDRef v10 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Registering with daemon status", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_10231D7E8);
        }
        LOWORD(v18) = 0;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLOnBodyNotifier6::CLOnBodyNotifier6(id<CLIntersiloUniverse>)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_10060F068();
    }
  }
  else
  {
    *double v5 = 0;
  }
  uint64_t v11 = sub_1000D3E78();
  sub_10006B564(v11, buf);
  char v12 = sub_1000D2988(*(uint64_t *)&buf[0], "ForceNoThrottlingOnBody", (BOOL *)(a1 + 17537));
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if ((v12 & 1) == 0) {
    *(unsigned char *)(a1 + 17537) = 0;
  }
  return a1;
}

void sub_1012B54E8(_Unwind_Exception *a1)
{
  void *v3 = off_1022CE028;
  sub_100D6A628(v3);
  *uint64_t v2 = off_1022C86D0;
  uint64_t v5 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_100C67870(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012B55B0(uint64_t result, int a2)
{
  uint64_t v2 = result + 17516;
  if (*(unsigned char *)(result + 17536)) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
    uint64_t v4 = result;
    if (sub_1009EC0A8() && !*(void *)(v4 + 112))
    {
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10231D7E8);
      }
      uint64_t v5 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Registering with CLAccelerometer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_10231D7E8);
        }
        double v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::startOnBodyDetectionHelper(BOOL)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      operator new();
    }
    if (!*(unsigned char *)(v2 + 21) && sub_1009EC0A8() && !*(void *)(v4 + 120))
    {
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10231D7E8);
      }
      double v6 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Registering throttledDispatcher with CLAccelerometer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_10231D7E8);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::startOnBodyDetectionHelper(BOOL)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      operator new();
    }
    *(_WORD *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 4) = 3;
    return sub_10087C534(v4 + 17216);
  }
  return result;
}

void sub_1012B596C()
{
}

void sub_1012B59B4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231D808);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    double v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier6::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231D808);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      double v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier6::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_1012B7138((unsigned char *)a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012B5B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012B5B8C(void *a1)
{
  *a1 = off_10231D6E8;
  a1[2152] = off_1022CE028;
  sub_100D6A628(a1 + 2152);
  a1[412] = off_1022C86D0;
  uint64_t v2 = a1[16];
  a1[16] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_100C67870((uint64_t)a1);
}

void sub_1012B5C58(void *a1)
{
  sub_1012B5B8C(a1);

  operator delete();
}

void sub_1012B5C90(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 17512;
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5) {
    sub_1012B5EDC((unsigned char *)a1, 1);
  }
  memset(v10, 0, 77);
  sub_100EB8364(a2, 0, (uint64_t)v10);
  *(_DWORD *)uint64_t v4 = DWORD1(v10[3]);
  sub_10087BB18(a1 + 17216, (uint64_t)v10);
  *(_WORD *)(v4 + 4) = 0;
  *(_DWORD *)(v4 + 8) = 3;
  sub_10087C534(a1 + 17216);
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_10231D7E8);
  }
  uint64_t v6 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *(float *)v4;
    *(_DWORD *)long long buf = 134217984;
    double v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "configuration: wake threshold = %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10231D7E8);
    }
    double v8 = *(float *)v4;
    int v11 = 134217984;
    double v12 = v8;
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOnBodyNotifier6::feedParams(NSDictionary *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10087BDF8(a1 + 17216);
  if (v5) {
    sub_1012B55B0(a1, 1);
  }
}

unsigned char *sub_1012B5EDC(unsigned char *result, int a2)
{
  uint64_t v2 = result + 17536;
  if (result[17536]) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
    uint64_t v4 = result;
    uint64_t result = (unsigned char *)sub_1009EC0A8();
    if (result && *((void *)v4 + 14))
    {
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10231D7E8);
      }
      uint64_t v5 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Unregistering with CLAccelerometer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_10231D7E8);
        }
        char v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::stopOnBodyDetectionHelper(BOOL)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      uint64_t v6 = sub_1009EC0A8();
      sub_1009D26C4(v6, 0, *((void *)v4 + 14));
      uint64_t result = (unsigned char *)*((void *)v4 + 14);
      if (result) {
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
      }
      *((void *)v4 + 14) = 0;
    }
    if (!v2[1])
    {
      uint64_t result = (unsigned char *)sub_1009EC0A8();
      if (result)
      {
        if (*((void *)v4 + 15))
        {
          if (qword_102419250 != -1) {
            dispatch_once(&qword_102419250, &stru_10231D7E8);
          }
          double v7 = qword_102419258;
          if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Unregistering throttleDispatcher with CLAccelerometer", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419250 != -1) {
              dispatch_once(&qword_102419250, &stru_10231D7E8);
            }
            char v10 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::stopOnBodyDetectionHelper(BOOL)", "%s\n", v10);
            if (v10 != (char *)buf) {
              free(v10);
            }
          }
          uint64_t v8 = sub_1009EC0A8();
          sub_1009D26C4(v8, 0, *((void *)v4 + 15));
          uint64_t result = (unsigned char *)*((void *)v4 + 15);
          if (result) {
            uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 8))(result);
          }
          *((void *)v4 + 15) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1012B6264(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 17536);
  if (*(unsigned char *)(a1 + 17536))
  {
    uint64_t v3 = *(void *)(a1 + 128);
    *(void *)(a1 + 128) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *uint64_t v2 = 0;
  }

  return sub_100C6787C((unsigned char *)a1);
}

uint64_t sub_1012B62DC(uint64_t a1)
{
  return sub_1012B55B0(a1, 0);
}

void sub_1012B62E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231D808);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier6::onAccelerometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231D808);
    }
    double v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      __int16 v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier6::onAccelerometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_1012B669C(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012B64A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012B64C0(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231D808);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier6::onThrottledAccelerometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231D808);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier6::onThrottledAccelerometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_1012B6C7C((uint64_t *)a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012B6674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1012B6694(unsigned char *a1)
{
  return sub_1012B5EDC(a1, 0);
}

void sub_1012B669C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a1 + 17308;
  if (a3)
  {
    unint64_t v5 = *(unsigned int *)(a1 + 168);
    unint64_t v6 = *(unsigned int *)(a1 + 1216);
    unint64_t v7 = *(unsigned int *)(a1 + 2264);
    unsigned __int16 v8 = *(_WORD *)(a1 + 166);
    uint64_t v9 = *(unsigned __int16 *)(a1 + 164);
    unsigned __int16 v10 = *(_WORD *)(a1 + 1214);
    uint64_t v11 = *(unsigned __int16 *)(a1 + 1212);
    uint64_t v12 = 24 * (a3 - 1);
    uint64_t v13 = a3;
    __int16 v14 = (float *)(a2 + 16);
    unsigned __int16 v15 = *(_WORD *)(a1 + 2262);
    uint64_t v16 = *(unsigned __int16 *)(a1 + 2260);
    do
    {
      float v17 = fminf(fmaxf(*(v14 - 2), -4.0), 4.0);
      unint64_t v18 = v9 + v8;
      if (v18 >= v5) {
        unint64_t v19 = v5;
      }
      else {
        unint64_t v19 = 0;
      }
      *(float *)(a1 + 172 + 4 * (v18 - v19)) = v17;
      if (v5 <= v8)
      {
        unint64_t v20 = v9 + 1;
        if (v20 >= v5) {
          __int16 v21 = v5;
        }
        else {
          __int16 v21 = 0;
        }
        unsigned __int16 v22 = v20 - v21;
        uint64_t v9 = v22;
        *(_WORD *)(a1 + 164) = v22;
      }
      else
      {
        *(_WORD *)(a1 + 166) = ++v8;
      }
      float v23 = fminf(fmaxf(*(v14 - 1), -4.0), 4.0);
      unint64_t v24 = v11 + v10;
      if (v24 >= v6) {
        unint64_t v25 = v6;
      }
      else {
        unint64_t v25 = 0;
      }
      *(float *)(a1 + 1220 + 4 * (v24 - v25)) = v23;
      if (v6 <= v10)
      {
        unint64_t v26 = v11 + 1;
        if (v26 >= v6) {
          __int16 v27 = v6;
        }
        else {
          __int16 v27 = 0;
        }
        unsigned __int16 v28 = v26 - v27;
        uint64_t v11 = v28;
        *(_WORD *)(a1 + 1212) = v28;
      }
      else
      {
        *(_WORD *)(a1 + 1214) = ++v10;
      }
      float v29 = fminf(fmaxf(*v14, -4.0), 4.0);
      unint64_t v30 = v16 + v15;
      if (v30 >= v7) {
        unint64_t v31 = v7;
      }
      else {
        unint64_t v31 = 0;
      }
      *(float *)(a1 + 2268 + 4 * (v30 - v31)) = v29;
      if (v7 <= v15)
      {
        unint64_t v32 = v16 + 1;
        if (v32 >= v7) {
          __int16 v33 = v7;
        }
        else {
          __int16 v33 = 0;
        }
        unsigned __int16 v34 = v32 - v33;
        uint64_t v16 = v34;
        *(_WORD *)(a1 + 2260) = v34;
      }
      else
      {
        *(_WORD *)(a1 + 2262) = ++v15;
      }
      v14 += 6;
      --v13;
    }
    while (v13);
    double v35 = *(double *)(a2 + v12);
    *(unsigned char *)(a1 + 148) = 1;
    *(unsigned char *)(a1 + 1196) = 1;
    *(unsigned char *)(a1 + 2244) = 1;
  }
  else
  {
    double v35 = 0.0;
  }
  *(void *)(a1 + 136) = (unint64_t)(v35 * 1000000.0);
  sub_101539C90((void *)(a1 + 3296));
  unint64_t v36 = sub_10087C610(a1 + 17216);
  int v37 = v36;
  unint64_t v38 = HIDWORD(v36);
  float v40 = *(float *)(v4 + 4);
  float v39 = *(float *)(v4 + 8);
  if (v36) {
    float v41 = *(float *)v4;
  }
  else {
    float v41 = 1.0 - *(float *)v4;
  }
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_10231D7E8);
  }
  double v42 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v43 = *(void *)(a1 + 136);
    *(_DWORD *)long long buf = 134219264;
    uint64_t v62 = v43;
    __int16 v63 = 2048;
    double v64 = v40;
    __int16 v65 = 2048;
    double v66 = v39;
    __int16 v67 = 1024;
    int v68 = v37;
    __int16 v69 = 1024;
    int v70 = v38;
    __int16 v71 = 2048;
    double v72 = v41;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "detection @ %llu : low %f high %f status %d confidence %d odds %.2f", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10231D7E8);
    }
    uint64_t v49 = *(void *)(a1 + 136);
    int v51 = 134219264;
    *(void *)uint64_t v52 = v49;
    *(_WORD *)&v52[8] = 2048;
    *(double *)&v52[10] = v40;
    __int16 v53 = 2048;
    double v54 = v39;
    __int16 v55 = 1024;
    int v56 = v37;
    __int16 v57 = 1024;
    int v58 = v38;
    __int16 v59 = 2048;
    double v60 = v41;
    double v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v50);
    if (v50 != (char *)buf) {
      free(v50);
    }
  }
  int v51 = v37;
  *(_DWORD *)uint64_t v52 = v38;
  *(double *)&v52[4] = v35;
  *(_DWORD *)long long buf = 0;
  (*(void (**)(uint64_t, uint8_t *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v51, 1, 0xFFFFFFFFLL, 0);
  if (!*(unsigned char *)(v4 + 229))
  {
    if (*(_DWORD *)(v4 + 212) == v37)
    {
      unsigned int v44 = (unsigned __int16)++*(_WORD *)(v4 + 208);
      *(void *)(a1 + 17528) = *(void *)(a1 + 136);
      if (v44 >= 8)
      {
        *(_WORD *)(v4 + 208) = 0;
        uint64_t v45 = sub_1009EC0A8();
        if (sub_1009D1EC4(v45, 0, *(void *)(a1 + 120), 0.2))
        {
          uint64_t v46 = sub_1009EC0A8();
          sub_1009D26C4(v46, 0, *(void *)(a1 + 112));
        }
        else
        {
          if (qword_102419250 != -1) {
            dispatch_once(&qword_102419250, &stru_10231D7E8);
          }
          int v47 = qword_102419258;
          if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Failed to add throttled dispatcher", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419250 != -1) {
              dispatch_once(&qword_102419250, &stru_10231D7E8);
            }
            __int16 v48 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v48);
            if (v48 != (char *)buf) {
              free(v48);
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v4 + 212) = v37;
      *(_WORD *)(v4 + 208) = 0;
      *(void *)(a1 + 17528) = *(void *)(a1 + 136);
    }
  }
}

void sub_1012B6C7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2189;
  float v5 = fminf(fmaxf(*(float *)(a2 + 8), -4.0), 4.0);
  float v6 = fminf(fmaxf(*(float *)(a2 + 12), -4.0), 4.0);
  unint64_t v7 = (unint64_t)(*(double *)a2 * 1000000.0);
  float v8 = fminf(fmaxf(*(float *)(a2 + 16), -4.0), 4.0);
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_10231D7E8);
  }
  float v9 = (float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v8 * v8);
  unsigned __int16 v10 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    float v11 = *(float *)v4;
    *(_DWORD *)long long buf = 134219264;
    *(void *)double v35 = v7;
    *(_WORD *)&v35[8] = 2048;
    *(double *)&v35[10] = v5;
    __int16 v36 = 2048;
    double v37 = v6;
    __int16 v38 = 2048;
    double v39 = v8;
    __int16 v40 = 2048;
    double v41 = v9;
    __int16 v42 = 2048;
    double v43 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "throttled @ %llu: accel = [%.2f %.2f %.2f] = %.2f ? %.2f", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10231D7E8);
    }
    double v19 = *(float *)v4;
    int v22 = 134219264;
    unint64_t v23 = v7;
    __int16 v24 = 2048;
    double v25 = v5;
    __int16 v26 = 2048;
    double v27 = v6;
    __int16 v28 = 2048;
    double v29 = v8;
    __int16 v30 = 2048;
    double v31 = v9;
    __int16 v32 = 2048;
    double v33 = v19;
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onThrottledAccelerometerData(const CLAccelerometer::Sample *)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  uint64_t v12 = a1[2191];
  a1[2191] = v7;
  unint64_t v13 = v12 + 400000;
  if (v9 <= *(float *)v4 && v13 >= v7)
  {
    __int16 v17 = (unsigned __int16)(*((_WORD *)v4 + 2) + 1) % 0xDu;
    *((_WORD *)v4 + 2) = v17;
    if (!v17)
    {
      *(_DWORD *)long long buf = *((_DWORD *)v4 + 2);
      *(_DWORD *)double v35 = 1;
      *(void *)&v35[4] = *(void *)a2;
      int v22 = 0;
      (*(void (**)(uint64_t *, int *, uint8_t *, uint64_t, uint64_t, void))(*a1 + 152))(a1, &v22, buf, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else
  {
    *((_WORD *)v4 + 2) = 0;
    *((_DWORD *)v4 + 2) = 3;
    sub_10087C534((uint64_t)(a1 + 2152));
    uint64_t v15 = sub_1009EC0A8();
    if (sub_1009D1EC4(v15, 0, a1[14], 0.01))
    {
      uint64_t v16 = sub_1009EC0A8();
      sub_1009D26C4(v16, 0, a1[15]);
    }
    else
    {
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10231D7E8);
      }
      unint64_t v18 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Failed to add dispatcher", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_10231D7E8);
        }
        LOWORD(v22) = 0;
        __int16 v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onThrottledAccelerometerData(const CLAccelerometer::Sample *)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
  }
}

unsigned char *sub_1012B7138(unsigned char *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = result;
  if (*a3 == 3)
  {
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10231D7E8);
    }
    float v5 = qword_102419258;
    if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "kNotificationWake. Turning on on body detector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10231D7E8);
      }
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return (unsigned char *)sub_1012B55B0((uint64_t)v3, 1);
  }
  else if (*a3 == 2)
  {
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10231D7E8);
    }
    uint64_t v4 = qword_102419258;
    if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "kNotificationSleep. Turning off on body detector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10231D7E8);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier6::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return sub_1012B5EDC(v3, 1);
  }
  return result;
}

void sub_1012B742C(id a1)
{
  qword_102419258 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_1012B745C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1012B748C(uint64_t result, char a2, int a3, int a4, char a5, double a6, double a7, double a8)
{
  *(unsigned char *)uint64_t result = a2;
  *(double *)(result + 8) = a6;
  *(double *)(result + 16) = a7;
  *(double *)(result + 24) = a8;
  *(_DWORD *)(result + 32) = a3;
  *(_DWORD *)(result + 36) = a4;
  *(unsigned char *)(result + 40) = a5;
  return result;
}

uint64_t sub_1012B74A4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 16;
  if (!*(unsigned char *)(a2 + 9)) {
    uint64_t v2 = 24;
  }
  if (*(double *)(result + v2) == -1.0)
  {
    uint64_t v3 = sub_101AAC4A0();
    return sub_1012B74E0(v3, v4);
  }
  return result;
}

uint64_t sub_1012B74E0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 1000)
  {
    a1 = sub_101AAC608();
    goto LABEL_8;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 36);
  if (v3 == 1000)
  {
LABEL_8:
    uint64_t v5 = sub_101AAC770(a1);
    return sub_1012B7520(v5);
  }
  if (*(unsigned char *)(a2 + 9)) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t sub_1012B7520()
{
  sub_10010F274((uint64_t)v14);
  uint64_t v0 = sub_100132EFC(v15, (uint64_t)"HarvestRule(", 12);
  sub_100132EFC(v0, (uint64_t)"harvesterEnabled,", 17);
  uint64_t v1 = (void *)std::ostream::operator<<();
  unsigned int v2 = sub_100132EFC(v1, (uint64_t)", ", 2);
  sub_100132EFC(v2, (uint64_t)"harvestInterval,", 16);
  unsigned int v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)", ", 2);
  sub_100132EFC(v4, (uint64_t)"uploadInterval,", 15);
  uint64_t v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)"/", 1);
  float v6 = (void *)std::ostream::operator<<();
  unint64_t v7 = sub_100132EFC(v6, (uint64_t)", ", 2);
  sub_100132EFC(v7, (uint64_t)"uploadReachability,", 19);
  float v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)"/", 1);
  float v9 = (void *)std::ostream::operator<<();
  unsigned __int16 v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
  sub_100132EFC(v10, (uint64_t)"skipDataUploadIfZeroHarvestPoint,", 33);
  float v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v14
  v15[0] = v12;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1012B7794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_1012B77A8(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_1012B77B0(uint64_t result)
{
  if (*(double *)(result + 8) == -1.0)
  {
    uint64_t v1 = sub_101AAC8D8();
    return sub_1012B77D8(v1, v2);
  }
  return result;
}

uint64_t sub_1012B77D8(uint64_t a1, uint64_t a2)
{
  sub_1000D2988(a2, "HarvesterEnabled", (BOOL *)a1);
  sub_1000A699C(a2, "HarvestInterval", (void *)(a1 + 8));
  sub_1000A699C(a2, "UploadInterval", (void *)(a1 + 16));
  if ((sub_1000A699C(a2, "UnpoweredUploadInterval", (void *)(a1 + 24)) & 1) == 0) {
    *(void *)(a1 + 24) = *(void *)(a1 + 16);
  }
  int v7 = 0;
  if (sub_10006EF84(a2, "UploadReachability", &v7)) {
    *(_DWORD *)(a1 + 32) = v7;
  }
  int v4 = sub_10006EF84(a2, "UnpoweredUploadReachability", &v7);
  uint64_t v5 = (int *)(a1 + 32);
  if (v4) {
    uint64_t v5 = &v7;
  }
  *(_DWORD *)(a1 + 36) = *v5;
  return sub_1000D2988(a2, "SkipDataUploadIfZeroHarvestPoint", (BOOL *)(a1 + 40));
}

void sub_1012B78F0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

int64_t sub_1012B7E90(id a1, id a2, id a3)
{
  id v4 = [objc_msgSend(a2, "advertisement") scanDate];
  id v5 = [objc_msgSend(a3, "advertisement") scanDate];

  return (int64_t)[v4 compare:v5];
}

void sub_1012B855C(uint64_t a1, uint64_t a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10231D8A8);
  }
  id v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    v7[0] = 68289539;
    v7[1] = 0;
    __int16 v8 = 2082;
    float v9 = "";
    __int16 v10 = 2113;
    uint64_t v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"regeotagBeaconPayloads: fetch estimated location at scan time\", \"scan date\":%{private, location:escape_only}@, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v7, 0x26u);
  }
  id v6 = [*(id *)(a1 + 40) createActivityRefreshBeaconPayloadIfNeededWithLocation:a2 payload:*(void *)(a1 + 48)];
  if (v6) {
    [*(id *)(a1 + 56) addObject:v6];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1012B8688(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  [*(id *)(*(void *)(a1 + 40) + 312) addObjectsFromArray:*(void *)(a1 + 48)];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10231D8A8);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [*(id *)(a1 + 48) count];
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2049;
    id v9 = v3;
    __int16 v10 = 2050;
    uint64_t v11 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"regeotagBeaconPayloads:\", \"refreshed beaconPayloads count\":%{private}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v5, 0x26u);
  }

  return [*(id *)(a1 + 40) uploadBeaconPayloadsIfAllowed];
}

id sub_1012B92FC(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1012B9380;
  v5[3] = &unk_10229FED8;
  void v5[4] = a2;
  return [v3 async:v5];
}

void sub_1012B9380(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10231D8A8);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      id v3 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v6 = 68289538;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      __int16 v10 = 2082;
      id v11 = v3;
      __int16 v12 = 2050;
      uint64_t v13 = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WARN: uploadBeaconPayloadsIfAllowed: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231D8A8);
      }
    }
    id v4 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      id v5 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v6 = 68289538;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      __int16 v10 = 2082;
      id v11 = v5;
      __int16 v12 = 2050;
      uint64_t v13 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WARN: uploadBeaconPayloadsIfAllowed: saveBeaconPayloads error received", "{\"msg%{public}.0s\":\"WARN: uploadBeaconPayloadsIfAllowed: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
    }
  }
}

void sub_1012B98D8(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1012B9908(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_1012B99EC(a1, "VO2MaxSummaryHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10231D8D8;
  *(void *)(a1 + 72) = off_10231D990;
  *(unsigned char *)(a1 + 488) = 0;
  sub_1012BBCB4(a1);
  return a1;
}

void sub_1012B99C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1012B9EC0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1012B99EC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = off_1022ADB08;
  *(void *)a1 = off_10231DDB0;
  *(void *)(a1 + 72) = off_10231DE58;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_10231DDB0;
  *(void *)(a1 + 72) = off_10231DE58;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 264) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 12000;
  *(void *)(a1 + 416) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 424));
  *(void *)(a1 + 424) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1012B9E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *double v27 = v30;
  sub_1003BE1F8(v31);
  sub_100D5C434(v29);
  sub_1011F8AE0(v28);
  *double v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1012B9EB8()
{
}

void *sub_1012B9EC0(void *a1)
{
  *a1 = off_10231DDB0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_10231DE58;
  a1[52] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 53);
  sub_100D5C434(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1012B9F84(uint64_t a1)
{
  return sub_1012B9EC0((void *)(a1 - 72));
}

void sub_1012B9F8C(void *a1)
{
  sub_1012B9EC0(a1);

  operator delete();
}

void sub_1012B9FC4(uint64_t a1)
{
  sub_1012B9EC0((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1012BA000(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    if (!*(unsigned char *)(a1 + 488)) {
      (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxSummaryHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1012BA17C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BA194(uint64_t a1, uint64_t a2)
{
  return sub_1012BA000(a1 - 72, a2);
}

uint64_t sub_1012BA19C(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxSummaryHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1012BA4B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BA500(uint64_t *a1, uint64_t a2)
{
  id v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  int v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  __int16 v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 16) = sqlite3_column_int(v8, 2);
  id v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  __int16 v10 = sqlite3_column_text(v9, 3);
  uuid_parse((const char *)v10, (unsigned __int8 *)(a2 + 24));
  id v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 4);
  __int16 v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 48) = sqlite3_column_int(v12, 5);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v13, 6);
  __int16 v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v14, 7);
  uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v15, 8);
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v16, 9);
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 104) = sqlite3_column_double(v17, 10);
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v18, 11);
  double v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v19, 12);
  unint64_t v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v20, 13);
  __int16 v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v21, 14);
  int v22 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 176) = sqlite3_column_int(v22, 15);
  unint64_t v23 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v24 = sqlite3_column_int(v23, 16);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 180) = v24;
  return result;
}

uint64_t sub_1012BA6BC(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM VO2MaxSummaryHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_1012BA778(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BA7B4(uint64_t a1)
{
  return sub_1012BA6BC(a1 - 72);
}

uint64_t sub_1012BA7BC(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxSummaryHistory WHERE pointCount > 0 AND startTime > ? ORDER BY startTime DESC");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10231DA20);
  }
  id v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10231DA20);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::querySince(const CFAbsoluteTime, std::vector<VO2MaxSummary> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_1012BABF4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1012BAC38(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_100082064(a1 + 72))
  {
    a3[1] = *a3;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT vsh.* FROM VO2MaxSummaryHistory vsh INNER JOIN VO2MaxSessionAttributesHistory vsah ON vsh.sessionId = vsah.sessionId WHERE vsah.betaBlockerUse = ? AND vsh.pointCount > 0 AND vsh.startTime > ? ORDER BY vsh.startTime DESC");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10231DA20);
  }
  int v5 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10231DA20);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::querySinceAndFilterByBetaBlockerUse(const CFAbsoluteTime, BOOL, std::vector<VO2MaxSummary> &) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return 109;
}

void sub_1012BB08C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1012BB0D0(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxSummaryHistory WHERE pointCount > 0 AND startTime > ? and startTime < ? ORDER BY startTime DESC");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10231DA20);
  }
  id v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10231DA20);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::queryInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<VO2MaxSummary> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_1012BB524(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1012BB568(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  if (sub_100082064(a1 + 72))
  {
    a3[1] = *a3;
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxSummaryHistory WHERE sessionId = ?");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10231DA20);
  }
  char v6 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10231DA20);
    }
    *(_WORD *)out = 0;
    __int16 v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxSummaryRecorderDb::queryBySessionId(unsigned char *, std::vector<VO2MaxSummary> &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return 109;
}

void sub_1012BB9BC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1012BBA00(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxSummaryHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_1012BBC50(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1012BBC94@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxSummaryHistory");
}

void *sub_1012BBCA4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxSummaryHistory");
}

uint64_t sub_1012BBCB4(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1012BBD14(a1);
    uint64_t result = sub_1005F7B0C(*(void *)(a1 + 80), "VO2MaxSummaryHistory", (const char **)&off_10231DA40, (const std::string::value_type **)&off_1024773C0, 0);
    *(unsigned char *)(a1 + 488) = 1;
  }
  return result;
}

uint64_t sub_1012BBD14(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxSummaryHistory");
  if (result)
  {
    id v3 = "meanCadence";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxSummaryHistory", (uint64_t)"meanCadence", (uint64_t)&v3);
  }
  return result;
}

void sub_1012BC280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_1012BC328(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxSummaryHistory");
  }
  return result;
}

void sub_1012BC3D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BC3F0(uint64_t a1)
{
  return sub_1012BC328(a1 - 72);
}

uint64_t sub_1012BC3F8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM VO2MaxSummaryHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1012BC4F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BC50C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE VO2MaxSummaryHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_1012BC5C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BC5D8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxSummaryHistory (startTime, workoutType, sessionId, durationInSeconds, pointCount, hrMax, hrMin, meanHr, meanVo2, meanSpeed, meanGrade, meanHrConfidence, meanHrCadenceAgreement, meanCadence, vo2MaxModelSource, sessionType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_1012BC838(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BC858()
{
  return 0;
}

uint64_t sub_1012BC860(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxSummaryHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_1012BC8FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BC914(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231DE98);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231DE98);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      unint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__int16 v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    id v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      id v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        __int16 v10 = __p;
      }
      else {
        __int16 v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      id v11 = v21;
    }
    else {
      id v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    __int16 v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      __int16 v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1012BDB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_1012BDEA0(uint64_t a1)
{
  sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name = 'VO2MaxSummaryHistorySessionIdIndex'");
}

void sub_1012BE348(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012BE3CC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AACA40(v2);
    __break(1u);
  }
  id v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    id v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    long long v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = __p;
    }
    else {
      size_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1012BE920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1012BE9A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1012C0A54(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10231DE98);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231DE98);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231DE98);
      }
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1012BF128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1012BF15C(uint64_t a1, long long *a2, char a3)
{
  v36[0] = (id)os_transaction_create();
  v36[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v36);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v45 = 0;
  double v46 = 1.79769313e308;
  uint64_t v47 = 0;
  uint64_t v48 = 0x7FEFFFFFFFFFFFFFLL;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  int v57 = 1;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v45);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231DE98);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10231DE98);
        }
        LOWORD(v37) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v46;
    double v9 = v7 - v46;
    if (v7 - v46 < 0.0) {
      double v9 = -(v7 - v46);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231DE98);
      }
      __int16 v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)long long buf = 134349312;
        double v42 = v46;
        __int16 v43 = 2050;
        uint64_t v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10231DE98);
        }
        uint64_t v30 = *((void *)a2 + 1);
        int v37 = 134349312;
        double v38 = v46;
        __int16 v39 = 2050;
        uint64_t v40 = v30;
        double v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v46;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10231DE98);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)long long buf = 134217984;
          double v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_10231DE98);
          }
          double v32 = *((double *)a2 + 1);
          int v37 = 134217984;
          double v38 = v32;
          double v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v33);
          if (v33 != (char *)buf) {
            free(v33);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v35 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_10231DE98);
        double v17 = v35;
      }
      double v18 = v16 - v17;
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v42 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10231DE98);
        }
        int v37 = 134217984;
        double v38 = v18;
        unsigned __int16 v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, long long *))(*(void *)a1 + 144))(a1, &v45, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  long long v22 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
  long long v23 = a2[4];
  long long v24 = a2[5];
  long long v25 = a2[7];
  *(_OWORD *)(a1 + 320) = a2[6];
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 304) = v24;
  long long v26 = a2[8];
  long long v27 = a2[9];
  long long v28 = a2[10];
  *(void *)(a1 + 400) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 384) = v28;
  *(_OWORD *)(a1 + 352) = v26;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v36);
}

void sub_1012BF9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012BF9F8(uint64_t a1)
{
  return sub_1012BE9A8(a1 - 72);
}

void sub_1012BFA00(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_1012BFA30(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AACBB0(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1012BFF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  sub_101A129A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1012BFFD0(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AACD20(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1012C0344(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AACE90(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1012C0670(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AAD000(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1012C0994(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1012C09C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_1012C0A54(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1012C0AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012C0AF0(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1012C0B20()
{
  if (qword_10248B3D8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B3D8 + 8))(qword_10248B3D8);
  }
  if (qword_10248B3E0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B3E0 + 8))(qword_10248B3E0);
  }
  if (qword_10248B3E8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B3E8 + 8))(qword_10248B3E8);
  }
  if (qword_10248B3F0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B3F0 + 8))(qword_10248B3F0);
  }
  if (qword_10248B3F8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B3F8 + 8))(qword_10248B3F8);
  }
  if (qword_10248B400) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B400 + 8))(qword_10248B400);
  }
  if (qword_10248B408) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B408 + 8))(qword_10248B408);
  }
  if (qword_10248B410) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B410 + 8))(qword_10248B410);
  }
  if (qword_10248B418) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B418 + 8))(qword_10248B418);
  }
  if (qword_10248B420) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B420 + 8))(qword_10248B420);
  }
  if (qword_10248B428) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B428 + 8))(qword_10248B428);
  }
  uint64_t result = qword_10248B430;
  if (qword_10248B430)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248B430 + 8);
    return v1();
  }
  return result;
}

void sub_1012C0D88(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102486AC0 & 1) == 0)
  {
    byte_102486AC0 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPOutdoorEstimatorLogEntry.pb.cc", a4);
    operator new();
  }
}

double sub_1012C1318(uint64_t a1)
{
  *(void *)a1 = off_10231DEE8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

double sub_1012C1350(uint64_t a1)
{
  *(void *)a1 = off_10231DF60;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_1012C137C(uint64_t a1)
{
  *(void *)a1 = off_10231DFD8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t sub_1012C13AC(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = qword_10248B3E8;
  if (!qword_10248B3E8)
  {
    double result = sub_1012C0D88();
    uint64_t v2 = qword_10248B3E8;
  }
  v1[1] = v2;
  uint64_t v3 = qword_10248B3F0;
  if (!qword_10248B3F0)
  {
    double result = sub_1012C0D88();
    uint64_t v3 = qword_10248B3F0;
  }
  v1[2] = v3;
  uint64_t v4 = qword_10248B3F8;
  if (!qword_10248B3F8)
  {
    double result = sub_1012C0D88();
    uint64_t v4 = qword_10248B3F8;
  }
  v1[3] = v4;
  uint64_t v5 = qword_10248B400;
  if (!qword_10248B400)
  {
    double result = sub_1012C0D88();
    uint64_t v5 = qword_10248B400;
  }
  v1[4] = v5;
  uint64_t v6 = qword_10248B410;
  if (!qword_10248B410)
  {
    double result = sub_1012C0D88();
    uint64_t v6 = qword_10248B410;
  }
  v1[5] = v6;
  uint64_t v7 = qword_10248B418;
  if (!qword_10248B418)
  {
    double result = sub_1012C0D88();
    uint64_t v7 = qword_10248B418;
  }
  v1[6] = v7;
  uint64_t v8 = qword_10248B420;
  if (!qword_10248B420)
  {
    double result = sub_1012C0D88();
    uint64_t v8 = qword_10248B420;
  }
  v1[7] = v8;
  uint64_t v9 = qword_10248B428;
  if (!qword_10248B428)
  {
    double result = sub_1012C0D88();
    uint64_t v9 = qword_10248B428;
  }
  v1[8] = v9;
  uint64_t v10 = qword_10248B430;
  if (!qword_10248B430)
  {
    double result = sub_1012C0D88();
    uint64_t v10 = qword_10248B430;
  }
  v1[9] = v10;
  return result;
}

double sub_1012C14A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }
  int v5 = *(_DWORD *)(a2 + 84);
  if (!(_BYTE)v5) {
    goto LABEL_12;
  }
  if (v5)
  {
    *(_DWORD *)(a1 + 84) |= 1u;
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      operator new();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248B3D8 + 8);
    }
    double result = sub_1012C3044(v6, v7);
    int v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 84) |= 2u;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    operator new();
  }
  uint64_t v9 = *(void *)(a2 + 16);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248B3D8 + 16);
  }
  sub_1012C325C(v8, v9);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_24:
  *(_DWORD *)(a1 + 84) |= 4u;
  uint64_t v10 = *(void *)(a1 + 24);
  if (!v10) {
    operator new();
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248B3D8 + 24);
  }
  double result = sub_1012C3388(v10, v11);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_29:
  *(_DWORD *)(a1 + 84) |= 8u;
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    operator new();
  }
  uint64_t v13 = *(void *)(a2 + 32);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248B3D8 + 32);
  }
  double result = sub_1012C34F8(v12, v13);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_34:
  *(_DWORD *)(a1 + 84) |= 0x10u;
  uint64_t v14 = *(void *)(a1 + 40);
  if (!v14) {
    operator new();
  }
  uint64_t v15 = *(void *)(a2 + 40);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_10248B3D8 + 40);
  }
  sub_1012C3A68(v14, v15);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_39:
  *(_DWORD *)(a1 + 84) |= 0x20u;
  uint64_t v16 = *(void *)(a1 + 48);
  if (!v16) {
    operator new();
  }
  uint64_t v17 = *(void *)(a2 + 48);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248B3D8 + 48);
  }
  sub_1012C3C94(v16, v17);
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x40) != 0)
  {
LABEL_44:
    *(_DWORD *)(a1 + 84) |= 0x40u;
    uint64_t v18 = *(void *)(a1 + 56);
    if (!v18) {
      operator new();
    }
    uint64_t v19 = *(void *)(a2 + 56);
    if (!v19) {
      uint64_t v19 = *(void *)(qword_10248B3D8 + 56);
    }
    double result = sub_1012C3DC0(v18, v19);
    int v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x80) != 0) {
      goto LABEL_49;
    }
LABEL_12:
    if ((v5 & 0x100) == 0) {
      return result;
    }
    goto LABEL_54;
  }
LABEL_11:
  if ((v5 & 0x80) == 0) {
    goto LABEL_12;
  }
LABEL_49:
  *(_DWORD *)(a1 + 84) |= 0x80u;
  uint64_t v20 = *(void *)(a1 + 64);
  if (!v20) {
    operator new();
  }
  uint64_t v21 = *(void *)(a2 + 64);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_10248B3D8 + 64);
  }
  double result = sub_1012C3EE0(v20, v21);
  if ((*(_DWORD *)(a2 + 84) & 0x100) != 0)
  {
LABEL_54:
    *(_DWORD *)(a1 + 84) |= 0x100u;
    uint64_t v22 = *(void *)(a1 + 72);
    if (!v22) {
      operator new();
    }
    uint64_t v23 = *(void *)(a2 + 72);
    if (!v23) {
      uint64_t v23 = *(void *)(qword_10248B3D8 + 72);
    }
    return sub_1012C4000(v22, v23);
  }
  return result;
}

void sub_1012C197C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1012C1994(void *result)
{
  if ((void *)qword_10248B3D8 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[5];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[6];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v1[7];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = v1[8];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    double result = (void *)v1[9];
    if (result)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v10();
    }
  }
  return result;
}

void sub_1012C1B68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231DEE8;
  sub_1012C1994(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1012C1BBC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231DEE8;
  sub_1012C1994(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_1012C1C24(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248B3D8;
  if (!qword_10248B3D8)
  {
    sub_1012C0D88(0, a2, a3, a4);
    return qword_10248B3D8;
  }
  return result;
}

void sub_1012C1C54()
{
}

uint64_t sub_1012C1CB4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 84);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1012C1D94(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_1012C1DF0(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(v1 + 24);
      if (result)
      {
        uint64_t result = sub_1012C1E24(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(v1 + 32);
      if (result)
      {
        uint64_t result = sub_1012C1E58(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t result = *(void *)(v1 + 40);
      if (result)
      {
        uint64_t result = sub_1012C1EC8(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      uint64_t result = *(void *)(v1 + 48);
      if (result)
      {
        uint64_t result = sub_1012C1F14(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      uint64_t result = *(void *)(v1 + 56);
      if (result)
      {
        uint64_t result = sub_1012C1F48(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 64);
      if (result)
      {
        uint64_t result = sub_1012C1F7C(result);
        int v2 = *(_DWORD *)(v1 + 84);
      }
    }
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t result = *(void *)(v1 + 72);
    if (result) {
      uint64_t result = sub_1012C1FB0(result);
    }
  }
  *(_DWORD *)(v1 + 84) = 0;
  return result;
}

uint64_t sub_1012C1D94(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 52);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(result + 52))
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 36))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
          *(void *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        int v1 = *(_DWORD *)(result + 52);
      }
    }
    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_1012C1DF0(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    if (*(unsigned char *)(result + 24))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 36))
        {
          *(void *)(v1 + 8) = 0;
          *(void *)(v1 + 16) = 0;
          *(void *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1012C1E24(uint64_t result)
{
  if (*(unsigned char *)(result + 36))
  {
    if (*(unsigned char *)(result + 36))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 36))
        {
          *(void *)(v1 + 8) = 0;
          *(void *)(v1 + 16) = 0;
          *(void *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1012C1E58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 140))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      if (*(unsigned char *)(v2 + 36))
      {
        *(void *)(v2 + 8) = 0;
        *(void *)(v2 + 16) = 0;
        *(void *)(v2 + 24) = 0;
      }
      *(_DWORD *)(v2 + 36) = 0;
    }
  }
  sub_10026DEDC(a1 + 16);
  sub_10026DEDC(a1 + 40);
  sub_10026DEDC(a1 + 64);
  sub_10026DEDC(a1 + 88);
  uint64_t result = sub_10026DEDC(a1 + 112);
  *(_DWORD *)(a1 + 140) = 0;
  return result;
}

uint64_t sub_1012C1EC8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 32);
  if ((_BYTE)v1)
  {
    if (v1)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 36))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
          *(void *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        int v1 = *(_DWORD *)(result + 32);
      }
    }
    *(_DWORD *)(result + 19) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  if ((v1 & 0xFF00) != 0) {
    *(_WORD *)(result + 23) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1012C1F14(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    if (*(unsigned char *)(result + 24))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 36))
        {
          *(void *)(v1 + 8) = 0;
          *(void *)(v1 + 16) = 0;
          *(void *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1012C1F48(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 36))
        {
          *(void *)(v1 + 8) = 0;
          *(void *)(v1 + 16) = 0;
          *(void *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1012C1F7C(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 36))
        {
          *(void *)(v1 + 8) = 0;
          *(void *)(v1 + 16) = 0;
          *(void *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1012C1FB0(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 36))
        {
          *(void *)(v1 + 8) = 0;
          *(void *)(v1 + 16) = 0;
          *(void *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1012C1FE4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallbacuint64_t k = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 84) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v90 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C47E4(v8, this, v13) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        uint64_t v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 != 18) {
          continue;
        }
        *((void *)this + 1) = v17 + 1;
        goto LABEL_41;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
LABEL_41:
        *(_DWORD *)(a1 + 84) |= 2u;
        uint64_t v18 = *(void *)(a1 + 16);
        if (!v18) {
          operator new();
        }
        unsigned int v90 = 0;
        uint64_t v19 = (char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v19;
          *((void *)this + 1) = v19 + 1;
        }
        int v20 = *((_DWORD *)this + 14);
        int v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21) {
          return 0;
        }
        int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C50EC(v18, this, v23) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        int v24 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v24, 1);
        int v25 = v24 - 1;
        if (v25 < 0 == v15) {
          *((_DWORD *)this + 14) = v25;
        }
        long long v26 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v26 >= *((void *)this + 2) || *v26 != 26) {
          continue;
        }
        *((void *)this + 1) = v26 + 1;
LABEL_55:
        *(_DWORD *)(a1 + 84) |= 4u;
        uint64_t v27 = *(void *)(a1 + 24);
        if (!v27) {
          operator new();
        }
        unsigned int v90 = 0;
        long long v28 = (char *)*((void *)this + 1);
        if ((unint64_t)v28 >= *((void *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v28;
          *((void *)this + 1) = v28 + 1;
        }
        int v29 = *((_DWORD *)this + 14);
        int v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30) {
          return 0;
        }
        int v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C564C(v27, this, v32) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        int v33 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v33, 1);
        int v34 = v33 - 1;
        if (v34 < 0 == v15) {
          *((_DWORD *)this + 14) = v34;
        }
        double v35 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v35 >= *((void *)this + 2) || *v35 != 34) {
          continue;
        }
        *((void *)this + 1) = v35 + 1;
LABEL_69:
        *(_DWORD *)(a1 + 84) |= 8u;
        uint64_t v36 = *(void *)(a1 + 32);
        if (!v36) {
          operator new();
        }
        unsigned int v90 = 0;
        int v37 = (char *)*((void *)this + 1);
        if ((unint64_t)v37 >= *((void *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v37;
          *((void *)this + 1) = v37 + 1;
        }
        int v38 = *((_DWORD *)this + 14);
        int v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 >= v39) {
          return 0;
        }
        int v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C6278(v36, this, v41) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
        int v42 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v42, 1);
        int v43 = v42 - 1;
        if (v43 < 0 == v15) {
          *((_DWORD *)this + 14) = v43;
        }
        uint64_t v44 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v44 >= *((void *)this + 2) || *v44 != 42) {
          continue;
        }
        *((void *)this + 1) = v44 + 1;
LABEL_83:
        *(_DWORD *)(a1 + 84) |= 0x10u;
        uint64_t v45 = *(void *)(a1 + 40);
        if (!v45) {
          operator new();
        }
        unsigned int v90 = 0;
        double v46 = (char *)*((void *)this + 1);
        if ((unint64_t)v46 >= *((void *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v46;
          *((void *)this + 1) = v46 + 1;
        }
        int v47 = *((_DWORD *)this + 14);
        int v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48) {
          return 0;
        }
        int v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C7114(v45, this, v50) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        int v51 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v51, 1);
        int v52 = v51 - 1;
        if (v52 < 0 == v15) {
          *((_DWORD *)this + 14) = v52;
        }
        uint64_t v53 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v53 >= *((void *)this + 2) || *v53 != 50) {
          continue;
        }
        *((void *)this + 1) = v53 + 1;
LABEL_97:
        *(_DWORD *)(a1 + 84) |= 0x20u;
        uint64_t v54 = *(void *)(a1 + 48);
        if (!v54) {
          operator new();
        }
        unsigned int v90 = 0;
        long long v55 = (char *)*((void *)this + 1);
        if ((unint64_t)v55 >= *((void *)this + 2) || *v55 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v55;
          *((void *)this + 1) = v55 + 1;
        }
        int v56 = *((_DWORD *)this + 14);
        int v57 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v56 + 1;
        if (v56 >= v57) {
          return 0;
        }
        int v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C7BC0(v54, this, v59) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v58);
        int v60 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v60, 1);
        int v61 = v60 - 1;
        if (v61 < 0 == v15) {
          *((_DWORD *)this + 14) = v61;
        }
        uint64_t v62 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v62 >= *((void *)this + 2) || *v62 != 58) {
          continue;
        }
        *((void *)this + 1) = v62 + 1;
LABEL_111:
        *(_DWORD *)(a1 + 84) |= 0x40u;
        uint64_t v63 = *(void *)(a1 + 56);
        if (!v63) {
          operator new();
        }
        unsigned int v90 = 0;
        double v64 = (char *)*((void *)this + 1);
        if ((unint64_t)v64 >= *((void *)this + 2) || *v64 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v64;
          *((void *)this + 1) = v64 + 1;
        }
        int v65 = *((_DWORD *)this + 14);
        int v66 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v65 + 1;
        if (v65 >= v66) {
          return 0;
        }
        int v67 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C8118(v63, this, v68) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v67);
        int v69 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v69, 1);
        int v70 = v69 - 1;
        if (v70 < 0 == v15) {
          *((_DWORD *)this + 14) = v70;
        }
        __int16 v71 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v71 >= *((void *)this + 2) || *v71 != 66) {
          continue;
        }
        *((void *)this + 1) = v71 + 1;
LABEL_125:
        *(_DWORD *)(a1 + 84) |= 0x80u;
        uint64_t v72 = *(void *)(a1 + 64);
        if (!v72) {
          operator new();
        }
        unsigned int v90 = 0;
        __int16 v73 = (char *)*((void *)this + 1);
        if ((unint64_t)v73 >= *((void *)this + 2) || *v73 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v73;
          *((void *)this + 1) = v73 + 1;
        }
        int v74 = *((_DWORD *)this + 14);
        int v75 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v74 + 1;
        if (v74 >= v75) {
          return 0;
        }
        int v76 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C85FC(v72, this, v77) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v76);
        int v78 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v78, 1);
        int v79 = v78 - 1;
        if (v79 < 0 == v15) {
          *((_DWORD *)this + 14) = v79;
        }
        double v80 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v80 >= *((void *)this + 2) || *v80 != 74) {
          continue;
        }
        *((void *)this + 1) = v80 + 1;
LABEL_139:
        *(_DWORD *)(a1 + 84) |= 0x100u;
        uint64_t v81 = *(void *)(a1 + 72);
        if (!v81) {
          operator new();
        }
        unsigned int v90 = 0;
        BOOL v82 = (char *)*((void *)this + 1);
        if ((unint64_t)v82 >= *((void *)this + 2) || *v82 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v90))return 0; {
        }
          }
        else
        {
          unsigned int v90 = *v82;
          *((void *)this + 1) = v82 + 1;
        }
        int v83 = *((_DWORD *)this + 14);
        int v84 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v83 + 1;
        if (v83 >= v84) {
          return 0;
        }
        int v85 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v90);
        if (!sub_1012C8AE0(v81, this, v86) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v85);
        int v87 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v87, 1);
        int v88 = v87 - 1;
        if (v88 < 0 == v15) {
          *((_DWORD *)this + 14) = v88;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_55;
        }
        goto LABEL_29;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_69;
        }
        goto LABEL_29;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_83;
        }
        goto LABEL_29;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_97;
        }
        goto LABEL_29;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_111;
        }
        goto LABEL_29;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_125;
        }
        goto LABEL_29;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
        goto LABEL_139;
      default:
        int v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1012C2B08(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 84);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248B3D8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 84);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248B3D8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248B3D8 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248B3D8 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248B3D8 + 40);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_10248B3D8 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v13 = *(void *)(v5 + 56);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248B3D8 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      return result;
    }
    goto LABEL_35;
  }
LABEL_32:
  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_10248B3D8 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v14, a2, a4);
  if ((*(_DWORD *)(v5 + 84) & 0x100) != 0)
  {
LABEL_35:
    uint64_t v15 = *(void *)(v5 + 72);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_10248B3D8 + 72);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v15, a2, a4);
  }
  return result;
}

uint64_t sub_1012C2CCC(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 84);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    if ((v3 & 0x100) == 0) {
      goto LABEL_69;
    }
    goto LABEL_63;
  }
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248B3D8 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C4DC8(v5, a2);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  }
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 2) != 0)
  {
LABEL_13:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248B3D8 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C53CC(v9, a2);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    int v3 = *(_DWORD *)(a1 + 84);
  }
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_10248B3D8 + 24);
    }
    uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C5A68(v13, a2);
    int v15 = (int)v14;
    if (v14 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    }
    else {
      int v16 = 1;
    }
    uint64_t v4 = (v4 + v15 + v16 + 1);
    int v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 8) == 0)
    {
LABEL_21:
      if ((v3 & 0x10) == 0) {
        goto LABEL_22;
      }
      goto LABEL_39;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248B3D8 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C6D24(v17);
  int v19 = (int)v18;
  if (v18 >= 0x80) {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  }
  else {
    int v20 = 1;
  }
  uint64_t v4 = (v4 + v19 + v20 + 1);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x10) == 0)
  {
LABEL_22:
    if ((v3 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_39:
  uint64_t v21 = *(void *)(a1 + 40);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_10248B3D8 + 40);
  }
  int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C791C(v21);
  int v23 = (int)v22;
  if (v22 >= 0x80) {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  }
  else {
    int v24 = 1;
  }
  uint64_t v4 = (v4 + v23 + v24 + 1);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x20) == 0)
  {
LABEL_23:
    if ((v3 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_45:
  uint64_t v25 = *(void *)(a1 + 48);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_10248B3D8 + 48);
  }
  long long v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C7EA0(v25, a2);
  int v28 = (int)v26;
  if (v26 >= 0x80) {
    int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, v27);
  }
  else {
    int v29 = 1;
  }
  uint64_t v4 = (v4 + v28 + v29 + 1);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x40) == 0)
  {
LABEL_24:
    if ((v3 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_51:
  uint64_t v30 = *(void *)(a1 + 56);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_10248B3D8 + 56);
  }
  int v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C83D0(v30);
  int v33 = (int)v31;
  if (v31 >= 0x80) {
    int v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, v32);
  }
  else {
    int v34 = 1;
  }
  uint64_t v4 = (v4 + v33 + v34 + 1);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x80) == 0)
  {
LABEL_25:
    if ((v3 & 0x100) == 0) {
      goto LABEL_69;
    }
    goto LABEL_63;
  }
LABEL_57:
  uint64_t v35 = *(void *)(a1 + 64);
  if (!v35) {
    uint64_t v35 = *(void *)(qword_10248B3D8 + 64);
  }
  uint64_t v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C88B4(v35);
  int v38 = (int)v36;
  if (v36 >= 0x80) {
    int v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, v37);
  }
  else {
    int v39 = 1;
  }
  uint64_t v4 = (v4 + v38 + v39 + 1);
  if ((*(_DWORD *)(a1 + 84) & 0x100) != 0)
  {
LABEL_63:
    uint64_t v40 = *(void *)(a1 + 72);
    if (!v40) {
      uint64_t v40 = *(void *)(qword_10248B3D8 + 72);
    }
    unsigned int v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1012C8D98(v40);
    int v43 = (int)v41;
    if (v41 >= 0x80) {
      int v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41, v42);
    }
    else {
      int v44 = 1;
    }
    uint64_t v4 = (v4 + v43 + v44 + 1);
  }
LABEL_69:
  *(_DWORD *)(a1 + 80) = v4;
  return v4;
}

double sub_1012C2FBC(uint64_t a1, void *lpsrc)
{
  return sub_1012C14A4(a1, (uint64_t)lpsrc);
}

double sub_1012C3044(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 52);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 52))
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248B3E8 + 8);
      }
      double result = sub_1012C4138(v6, v7);
      int v5 = *(_DWORD *)(a2 + 52);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_23;
      }
    }
    else if ((*(unsigned char *)(a2 + 52) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 52) |= 2u;
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248B3E8 + 16);
    }
    double result = sub_1012C4138(v8, v9);
    int v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_25;
    }
LABEL_23:
    unsigned int v10 = *(_DWORD *)(a2 + 24);
    if (v10 >= 3) {
      sub_101AAD19C();
    }
    *(_DWORD *)(a1 + 52) |= 4u;
    *(_DWORD *)(a1 + 24) = v10;
    int v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_25:
    unsigned int v11 = *(_DWORD *)(a2 + 28);
    if (v11 >= 4) {
      sub_101AAD170();
    }
    *(_DWORD *)(a1 + 52) |= 8u;
    *(_DWORD *)(a1 + 28) = v11;
    int v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(double *)(a1 + 32) = result;
    int v5 = *(_DWORD *)(a2 + 52);
LABEL_10:
    if ((v5 & 0x20) != 0)
    {
      double result = *(double *)(a2 + 40);
      *(_DWORD *)(a1 + 52) |= 0x20u;
      *(double *)(a1 + 40) = result;
    }
  }
  return result;
}

void sub_1012C3244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1012C325C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248B3F0 + 8);
      }
      sub_1012C4138(v5, v6);
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 16);
      if (v7 >= 6) {
        sub_101AAD1C8();
      }
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
}

void sub_1012C3370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1012C3388(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248B3F8 + 8);
      }
      double result = sub_1012C4138(v6, v7);
      int v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= 3) {
        sub_101AAD220();
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 16) = v8;
      int v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 4) != 0)
    {
      unsigned int v9 = *(_DWORD *)(a2 + 20);
      if (v9 >= 4) {
        sub_101AAD1F4();
      }
      *(_DWORD *)(a1 + 36) |= 4u;
      *(_DWORD *)(a1 + 20) = v9;
      int v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 8) != 0)
    {
      double result = *(double *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 8u;
      *(double *)(a1 + 24) = result;
    }
  }
  return result;
}

void sub_1012C34E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1012C34F8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v32);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), *(_DWORD *)(a2 + 24) + *(_DWORD *)(a1 + 24));
  if (*(int *)(a2 + 24) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 28);
      uint64_t v7 = *(int *)(a1 + 24);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v7 + 1;
      sub_1012C5C0C(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 24));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40), *(_DWORD *)(a2 + 48) + *(_DWORD *)(a1 + 48));
  if (*(int *)(a2 + 48) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 40) + 8 * v9);
      int v11 = *(_DWORD *)(a1 + 52);
      uint64_t v12 = *(int *)(a1 + 48);
      if ((int)v12 >= v11)
      {
        if (v11 == *(_DWORD *)(a1 + 56))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40), v11 + 1);
          int v11 = *(_DWORD *)(a1 + 52);
        }
        *(_DWORD *)(a1 + 52) = v11 + 1;
        operator new();
      }
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)(a1 + 48) = v12 + 1;
      sub_1012C5C0C(*(void *)(v13 + 8 * v12), v10);
      ++v9;
    }
    while (v9 < *(int *)(a2 + 48));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 64), *(_DWORD *)(a2 + 72) + *(_DWORD *)(a1 + 72));
  if (*(int *)(a2 + 72) >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(a2 + 64) + 8 * v14);
      int v16 = *(_DWORD *)(a1 + 76);
      uint64_t v17 = *(int *)(a1 + 72);
      if ((int)v17 >= v16)
      {
        if (v16 == *(_DWORD *)(a1 + 80))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 64), v16 + 1);
          int v16 = *(_DWORD *)(a1 + 76);
        }
        *(_DWORD *)(a1 + 76) = v16 + 1;
        operator new();
      }
      uint64_t v18 = *(void *)(a1 + 64);
      *(_DWORD *)(a1 + 72) = v17 + 1;
      sub_1012C5C0C(*(void *)(v18 + 8 * v17), v15);
      ++v14;
    }
    while (v14 < *(int *)(a2 + 72));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), *(_DWORD *)(a2 + 96) + *(_DWORD *)(a1 + 96));
  if (*(int *)(a2 + 96) >= 1)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = *(void *)(*(void *)(a2 + 88) + 8 * v19);
      int v21 = *(_DWORD *)(a1 + 100);
      uint64_t v22 = *(int *)(a1 + 96);
      if ((int)v22 >= v21)
      {
        if (v21 == *(_DWORD *)(a1 + 104))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88), v21 + 1);
          int v21 = *(_DWORD *)(a1 + 100);
        }
        *(_DWORD *)(a1 + 100) = v21 + 1;
        operator new();
      }
      uint64_t v23 = *(void *)(a1 + 88);
      *(_DWORD *)(a1 + 96) = v22 + 1;
      sub_1012C5C0C(*(void *)(v23 + 8 * v22), v20);
      ++v19;
    }
    while (v19 < *(int *)(a2 + 96));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), *(_DWORD *)(a2 + 120) + *(_DWORD *)(a1 + 120));
  if (*(int *)(a2 + 120) >= 1)
  {
    uint64_t v25 = 0;
    do
    {
      uint64_t v26 = *(void *)(*(void *)(a2 + 112) + 8 * v25);
      int v27 = *(_DWORD *)(a1 + 124);
      uint64_t v28 = *(int *)(a1 + 120);
      if ((int)v28 >= v27)
      {
        if (v27 == *(_DWORD *)(a1 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112), v27 + 1);
          int v27 = *(_DWORD *)(a1 + 124);
        }
        *(_DWORD *)(a1 + 124) = v27 + 1;
        operator new();
      }
      uint64_t v29 = *(void *)(a1 + 112);
      *(_DWORD *)(a1 + 120) = v28 + 1;
      *(float *)&double result = sub_1012C5C0C(*(void *)(v29 + 8 * v28), v26);
      ++v25;
    }
    while (v25 < *(int *)(a2 + 120));
  }
  if (*(unsigned char *)(a2 + 140))
  {
    *(_DWORD *)(a1 + 140) |= 1u;
    uint64_t v30 = *(void *)(a1 + 8);
    if (!v30) {
      operator new();
    }
    uint64_t v31 = *(void *)(a2 + 8);
    if (!v31) {
      uint64_t v31 = *(void *)(qword_10248B400 + 8);
    }
    return sub_1012C4138(v30, v31);
  }
  return result;
}

void sub_1012C3A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1012C3A68(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  int v4 = *(_DWORD *)(a2 + 32);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 32) |= 1u;
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = *(void *)(a2 + 8);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248B410 + 8);
    }
    sub_1012C4138(v8, v9);
    int v4 = *(_DWORD *)(a2 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  char v10 = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 32) |= 2u;
  *(unsigned char *)(a1 + 16) = v10;
  int v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v11 = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 32) |= 4u;
  *(unsigned char *)(a1 + 17) = v11;
  int v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v12 = *(unsigned char *)(a2 + 18);
  *(_DWORD *)(a1 + 32) |= 8u;
  *(unsigned char *)(a1 + 18) = v12;
  int v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    char v14 = *(unsigned char *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 0x20u;
    *(unsigned char *)(a1 + 20) = v14;
    int v4 = *(_DWORD *)(a2 + 32);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_27:
  char v13 = *(unsigned char *)(a2 + 19);
  *(_DWORD *)(a1 + 32) |= 0x10u;
  *(unsigned char *)(a1 + 19) = v13;
  int v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 0x20) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_29:
  char v15 = *(unsigned char *)(a2 + 21);
  *(_DWORD *)(a1 + 32) |= 0x40u;
  *(unsigned char *)(a1 + 21) = v15;
  int v4 = *(_DWORD *)(a2 + 32);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    char v5 = *(unsigned char *)(a2 + 22);
    *(_DWORD *)(a1 + 32) |= 0x80u;
    *(unsigned char *)(a1 + 22) = v5;
    int v4 = *(_DWORD *)(a2 + 32);
  }
LABEL_13:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      char v6 = *(unsigned char *)(a2 + 23);
      *(_DWORD *)(a1 + 32) |= 0x100u;
      *(unsigned char *)(a1 + 23) = v6;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 0x200) != 0)
    {
      char v7 = *(unsigned char *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 0x200u;
      *(unsigned char *)(a1 + 24) = v7;
    }
  }
}

void sub_1012C3C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1012C3C94(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      *(_DWORD *)(a1 + 24) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248B418 + 8);
      }
      sub_1012C4138(v5, v6);
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 16);
      if (v7 >= 0x1C) {
        sub_101AAD24C();
      }
      *(_DWORD *)(a1 + 24) |= 2u;
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
}

void sub_1012C3DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1012C3DC0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248B420 + 8);
      }
      double result = sub_1012C4138(v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_1012C3EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1012C3EE0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248B428 + 8);
      }
      double result = sub_1012C4138(v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_1012C3FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

double sub_1012C4000(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248B430 + 8);
      }
      double result = sub_1012C4138(v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_1012C4108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012C4120()
{
  return 1;
}

void *sub_1012C4128@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.LogEntry");
}

double sub_1012C4138(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_1012C420C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1012C4224(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231DF60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1012C4244(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231DF60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1012C4298()
{
}

uint64_t sub_1012C42EC(uint64_t result)
{
  if (*(unsigned char *)(result + 36))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_1012C4304(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          TagFallbacuint64_t k = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 17)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          unint64_t v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0;
          }
          *(void *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          char v10 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 25)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }
      int v8 = TagFallback & 7;
      if (v8 == 1) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unint64_t v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_1012C44CC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_1012C4558(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_1012C4590(uint64_t a1, void *lpsrc)
{
  return sub_1012C4138(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C4618()
{
  return 1;
}

void *sub_1012C4620@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.Timestamp");
}

void *sub_1012C4630(void *result)
{
  if ((void *)qword_10248B3E8 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_1012C46D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231DFD8;
  sub_1012C4630(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1012C4724(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231DFD8;
  sub_1012C4630(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1012C478C()
{
}

uint64_t sub_1012C47E4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_23;
        }
        *(_DWORD *)(a1 + 52) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        v37[0] = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37))return 0; {
        }
          }
        else
        {
          v37[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37[0]);
        if (!sub_1012C4304(v8, this, v17) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        int v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 18) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
        goto LABEL_35;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_23;
        }
LABEL_35:
        *(_DWORD *)(a1 + 52) |= 2u;
        uint64_t v22 = *(void *)(a1 + 16);
        if (!v22) {
          operator new();
        }
        v37[0] = 0;
        uint64_t v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37))return 0; {
        }
          }
        else
        {
          v37[0] = *v23;
          *((void *)this + 1) = v23 + 1;
        }
        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25) {
          return 0;
        }
        int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37[0]);
        if (!sub_1012C4304(v22, this, v27) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        int v28 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v28, 1);
        int v29 = v28 - 1;
        if (v29 < 0 == v19) {
          *((_DWORD *)this + 14) = v29;
        }
        uint64_t v30 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v30 >= v10 || *v30 != 24) {
          continue;
        }
        char v11 = v30 + 1;
        *((void *)this + 1) = v11;
LABEL_49:
        v37[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37);
          if (!result) {
            return result;
          }
          unsigned int v31 = v37[0];
        }
        else
        {
          unsigned int v31 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v31 <= 2)
        {
          *(_DWORD *)(a1 + 52) |= 4u;
          *(_DWORD *)(a1 + 24) = v31;
        }
        int v33 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v33 >= v12 || *v33 != 32) {
          continue;
        }
        char v13 = v33 + 1;
        *((void *)this + 1) = v13;
LABEL_59:
        v37[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v37);
          if (!result) {
            return result;
          }
          unsigned int v34 = v37[0];
        }
        else
        {
          unsigned int v34 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v34 <= 3)
        {
          *(_DWORD *)(a1 + 52) |= 8u;
          *(_DWORD *)(a1 + 28) = v34;
        }
        uint64_t v35 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v35 >= *((void *)this + 2) || *v35 != 41) {
          continue;
        }
        *((void *)this + 1) = v35 + 1;
LABEL_69:
        *(void *)unsigned int v37 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v37) & 1) == 0)return 0; {
        *(void *)(a1 + 32) = *(void *)v37;
        }
        *(_DWORD *)(a1 + 52) |= 0x10u;
        uint64_t v36 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v36 >= *((void *)this + 2) || *v36 != 49) {
          continue;
        }
        *((void *)this + 1) = v36 + 1;
LABEL_73:
        *(void *)unsigned int v37 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v37))
        {
          *(void *)(a1 + 40) = *(void *)v37;
          *(_DWORD *)(a1 + 52) |= 0x20u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_49;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        char v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_59;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_69;
        }
        goto LABEL_23;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_23;
        }
        goto LABEL_73;
      default:
        int v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1012C4CC8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 52);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248B3E8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248B3E8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 24), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_16:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (int)a2, *(double *)(v5 + 32), a3);
    if ((*(_DWORD *)(v5 + 52) & 0x20) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 28), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_17:
  double v9 = *(double *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (int)a2, v9, a3);
}

uint64_t sub_1012C4DC8(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_44;
  }
  if ((*(unsigned char *)(a1 + 52) & 1) == 0)
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248B3E8 + 8);
  }
  int v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(unsigned char *)(v6 + 36))
  {
    int v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0) {
      v8 += 9;
    }
    if ((v7 & 4) != 0) {
      int v7 = v8 + 9;
    }
    else {
      int v7 = v8;
    }
  }
  *(_DWORD *)(v6 + 32) = v7;
  int v4 = v7 + 2;
  int v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248B3E8 + 16);
    }
    int v10 = *(unsigned __int8 *)(v9 + 36);
    if (*(unsigned char *)(v9 + 36))
    {
      int v11 = (v10 << 31 >> 31) & 9;
      if ((v10 & 2) != 0) {
        v11 += 9;
      }
      if ((v10 & 4) != 0) {
        int v10 = v11 + 9;
      }
      else {
        int v10 = v11;
      }
    }
    *(_DWORD *)(v9 + 32) = v10;
    v4 += v10 + 2;
    int v3 = *(_DWORD *)(a1 + 52);
  }
LABEL_24:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }
  unint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v12 & 0x80000000) != 0)
  {
    int v13 = 11;
  }
  else if (v12 >= 0x80)
  {
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 52);
  }
  else
  {
    int v13 = 2;
  }
  v4 += v13;
  if ((v3 & 8) != 0)
  {
LABEL_33:
    int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 11;
    }
    else if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 52);
    }
    else
    {
      int v15 = 2;
    }
    v4 += v15;
  }
LABEL_39:
  unsigned int v16 = v4 + 9;
  if ((v3 & 0x10) == 0) {
    unsigned int v16 = v4;
  }
  if ((v3 & 0x20) != 0) {
    uint64_t result = v16 + 9;
  }
  else {
    uint64_t result = v16;
  }
LABEL_44:
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

double sub_1012C4F34(uint64_t a1, void *lpsrc)
{
  return sub_1012C3044(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C4FBC()
{
  return 1;
}

void *sub_1012C4FC4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.CLIndoorOutdoorUpdate");
}

void sub_1012C4FD4(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10231E050;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248B3F0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1012C5064(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1012C4FD4(a1);

  operator delete();
}

void sub_1012C509C()
{
}

uint64_t sub_1012C50EC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        TagFallbacuint64_t k = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 == 2)
      {
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          uint64_t v9 = (char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
          goto LABEL_29;
        }
      }
      else
      {
        int v7 = TagFallback & 7;
      }
LABEL_17:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    uint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      operator new();
    }
    unsigned int v23 = 0;
    int v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23)) {
        return 0;
      }
    }
    else
    {
      unsigned int v23 = *v11;
      *((void *)this + 1) = v11 + 1;
    }
    int v12 = *((_DWORD *)this + 14);
    int v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13) {
      return 0;
    }
    int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    if (!sub_1012C4304(v10, this, v15) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    int v16 = *((_DWORD *)this + 14);
    BOOL v17 = __OFSUB__(v16, 1);
    int v18 = v16 - 1;
    if (v18 < 0 == v17) {
      *((_DWORD *)this + 14) = v18;
    }
    BOOL v19 = (unsigned char *)*((void *)this + 1);
    unint64_t v8 = *((void *)this + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      uint64_t v9 = v19 + 1;
      *((void *)this + 1) = v9;
LABEL_29:
      unsigned int v22 = 0;
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!result) {
          return result;
        }
        unsigned int v20 = v22;
      }
      else
      {
        unsigned int v20 = *v9;
        *((void *)this + 1) = v9 + 1;
      }
      if (v20 <= 5)
      {
        *(_DWORD *)(a1 + 24) |= 2u;
        *(_DWORD *)(a1 + 16) = v20;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_1012C534C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248B3F0 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
  {
LABEL_7:
    int v8 = *(_DWORD *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, (int)a2, a4);
  }
  return result;
}

uint64_t sub_1012C53CC(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = 0;
    goto LABEL_21;
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248B3F0 + 8);
  }
  int v5 = *(unsigned __int8 *)(v4 + 36);
  if (*(unsigned char *)(v4 + 36))
  {
    int v6 = (v5 << 31 >> 31) & 9;
    if ((v5 & 2) != 0) {
      v6 += 9;
    }
    if ((v5 & 4) != 0) {
      int v5 = v6 + 9;
    }
    else {
      int v5 = v6;
    }
  }
  *(_DWORD *)(v4 + 32) = v5;
  uint64_t v3 = (v5 + 2);
  if ((*(_DWORD *)(a1 + 24) & 2) != 0)
  {
LABEL_15:
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      int v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    }
    else
    {
      int v8 = 2;
    }
    uint64_t v3 = (v8 + v3);
  }
LABEL_21:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_1012C5490(uint64_t a1, void *lpsrc)
{
  sub_1012C325C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C5518()
{
  return 1;
}

void *sub_1012C5520@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.SignalEnvironment");
}

void sub_1012C5530(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10231E0C8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248B3F8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1012C55C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1012C5530(a1);

  operator delete();
}

void sub_1012C55F8()
{
}

uint64_t sub_1012C564C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        *(_DWORD *)(a1 + 36) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        v27[0] = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27))return 0; {
        }
          }
        else
        {
          v27[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27[0]);
        if (!sub_1012C4304(v8, this, v17) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        int v21 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v21 >= v10 || *v21 != 16) {
          continue;
        }
        int v11 = v21 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_31;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_31:
        v27[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27);
          if (!result) {
            return result;
          }
          unsigned int v22 = v27[0];
        }
        else
        {
          unsigned int v22 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v22 <= 2)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 16) = v22;
        }
        int v24 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v24 >= v12 || *v24 != 24) {
          continue;
        }
        int v13 = v24 + 1;
        *((void *)this + 1) = v13;
LABEL_41:
        v27[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27);
          if (!result) {
            return result;
          }
          unsigned int v25 = v27[0];
        }
        else
        {
          unsigned int v25 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v25 <= 3)
        {
          *(_DWORD *)(a1 + 36) |= 4u;
          *(_DWORD *)(a1 + 20) = v25;
        }
        int v26 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v26 >= *((void *)this + 2) || *v26 != 33) {
          continue;
        }
        *((void *)this + 1) = v26 + 1;
LABEL_51:
        *(void *)unsigned int v27 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27))
        {
          *(void *)(a1 + 24) = *(void *)v27;
          *(_DWORD *)(a1 + 36) |= 8u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_41;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_19;
        }
        goto LABEL_51;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_1012C59B0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248B3F8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_11:
  double v8 = *(double *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (int)a2, v8, a3);
}

uint64_t sub_1012C5A68(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248B3F8 + 8);
    }
    int v7 = *(unsigned __int8 *)(v6 + 36);
    if (*(unsigned char *)(v6 + 36))
    {
      int v8 = (v7 << 31 >> 31) & 9;
      if ((v7 & 2) != 0) {
        v8 += 9;
      }
      if ((v7 & 4) != 0) {
        int v7 = v8 + 9;
      }
      else {
        int v7 = v8;
      }
    }
    *(_DWORD *)(v6 + 32) = v7;
    unsigned int v4 = v7 + 2;
    int v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  unsigned int v4 = 0;
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
LABEL_15:
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      int v10 = 2;
    }
    v4 += v10;
  }
LABEL_21:
  if ((v3 & 4) != 0)
  {
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v11 & 0x80000000) != 0)
    {
      int v12 = 11;
    }
    else if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      int v12 = 2;
    }
    v4 += v12;
  }
  if ((v3 & 8) != 0) {
    uint64_t result = v4 + 9;
  }
  else {
    uint64_t result = v4;
  }
LABEL_31:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

double sub_1012C5B6C(uint64_t a1, void *lpsrc)
{
  return sub_1012C3388(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C5BF4()
{
  return 1;
}

void *sub_1012C5BFC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.GnssAvailabilityPredictorData");
}

float sub_1012C5C0C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      float result = *(float *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(float *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *(float *)(a2 + 12);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(float *)(a1 + 12) = result;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0) {
      return result;
    }
LABEL_7:
    float result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 24) |= 4u;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

void sub_1012C5CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1012C5CF8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231E140;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1012C5D18(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10231E140;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1012C5D6C()
{
}

uint64_t sub_1012C5DBC(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1012C5DD4(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          TagFallbacuint64_t k = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_27;
        }
        unsigned int v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        a1[2] = v14;
        a1[6] |= 1u;
        uint64_t v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 21)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          unsigned int v13 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0) {
            return 0;
          }
          a1[3] = v13;
          a1[6] |= 2u;
          int v10 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 29)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }
      int v8 = TagFallback & 7;
      if (v8 == 5) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unsigned int v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    a1[4] = v12;
    a1[6] |= 4u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_1012C5F9C(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 24);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v4 + 12), a3);
    if ((*(_DWORD *)(v4 + 24) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(float *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 24);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  float v6 = *(float *)(v4 + 16);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_1012C6028(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0) {
      v2 += 5;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 5;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

float sub_1012C6060(uint64_t a1, void *lpsrc)
{
  return sub_1012C5C0C(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C60E8()
{
  return 1;
}

void *sub_1012C60F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.GnssLeechLocationData.SatelliteInfo");
}

void sub_1012C6100(uint64_t *a1)
{
  *a1 = (uint64_t)off_10231E1B8;
  if ((uint64_t *)qword_10248B400 != a1)
  {
    uint64_t v2 = a1[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  sub_10016B2E8(a1 + 14);
  sub_10016B2E8(a1 + 11);
  sub_10016B2E8(a1 + 8);
  sub_10016B2E8(a1 + 5);
  sub_10016B2E8(a1 + 2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_1012C61CC(uint64_t *a1)
{
  sub_1012C6100(a1);

  operator delete();
}

void sub_1012C6204()
{
}

uint64_t sub_1012C6278(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  float v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40);
  unsigned int v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 64);
  int v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 88);
  uint64_t v9 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112);
LABEL_2:
  while (2)
  {
    int v10 = (char *)*((void *)this + 1);
    if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v10;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_24;
        }
        *(_DWORD *)(a1 + 140) |= 1u;
        uint64_t v13 = *(void *)(a1 + 8);
        if (!v13) {
          operator new();
        }
        unsigned int v84 = 0;
        unsigned int v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0; {
        }
          }
        else
        {
          unsigned int v84 = *v14;
          *((void *)this + 1) = v14 + 1;
        }
        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
        if (!sub_1012C4304(v13, this, v18) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        unsigned int v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 != 18) {
          continue;
        }
        goto LABEL_35;
      case 2u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_24;
        }
        break;
      case 3u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_54;
        }
        goto LABEL_24;
      case 4u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_72;
        }
        goto LABEL_24;
      case 5u:
        int v12 = TagFallback & 7;
        if (v12 == 2) {
          goto LABEL_90;
        }
        goto LABEL_24;
      case 6u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_24;
        }
        goto LABEL_108;
      default:
        int v12 = TagFallback & 7;
LABEL_24:
        if (v12 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
    break;
  }
  while (1)
  {
    int v23 = *(_DWORD *)(a1 + 28);
    uint64_t v24 = *(int *)(a1 + 24);
    if ((int)v24 >= v23)
    {
      if (v23 == *(_DWORD *)(a1 + 32))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v23 + 1);
        int v23 = *(_DWORD *)(a1 + 28);
      }
      *(_DWORD *)(a1 + 28) = v23 + 1;
      operator new();
    }
    uint64_t v25 = *(void *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v24 + 1;
    int v26 = *(_DWORD **)(v25 + 8 * v24);
    unsigned int v84 = 0;
    unsigned int v27 = (char *)*((void *)this + 1);
    if ((unint64_t)v27 >= *((void *)this + 2) || *v27 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84)) {
        return 0;
      }
    }
    else
    {
      unsigned int v84 = *v27;
      *((void *)this + 1) = v27 + 1;
    }
    int v28 = *((_DWORD *)this + 14);
    int v29 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v28 + 1;
    if (v28 >= v29) {
      return 0;
    }
    int v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
    if (!sub_1012C5DD4(v26, this, v31) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
    int v32 = *((_DWORD *)this + 14);
    BOOL v20 = __OFSUB__(v32, 1);
    int v33 = v32 - 1;
    if (v33 < 0 == v20) {
      *((_DWORD *)this + 14) = v33;
    }
    unsigned int v22 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v22 >= *((void *)this + 2)) {
      goto LABEL_2;
    }
    int v34 = *v22;
    if (v34 != 18)
    {
      if (v34 != 26) {
        goto LABEL_2;
      }
      while (1)
      {
        *((void *)this + 1) = v22 + 1;
LABEL_54:
        int v35 = *(_DWORD *)(a1 + 52);
        uint64_t v36 = *(int *)(a1 + 48);
        if ((int)v36 >= v35)
        {
          if (v35 == *(_DWORD *)(a1 + 56))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v35 + 1);
            int v35 = *(_DWORD *)(a1 + 52);
          }
          *(_DWORD *)(a1 + 52) = v35 + 1;
          operator new();
        }
        uint64_t v37 = *(void *)(a1 + 40);
        *(_DWORD *)(a1 + 48) = v36 + 1;
        int v38 = *(_DWORD **)(v37 + 8 * v36);
        unsigned int v84 = 0;
        int v39 = (char *)*((void *)this + 1);
        if ((unint64_t)v39 >= *((void *)this + 2) || *v39 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0; {
        }
          }
        else
        {
          unsigned int v84 = *v39;
          *((void *)this + 1) = v39 + 1;
        }
        int v40 = *((_DWORD *)this + 14);
        int v41 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v40 + 1;
        if (v40 >= v41) {
          return 0;
        }
        int v42 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
        if (!sub_1012C5DD4(v38, this, v43) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v42);
        int v44 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v44, 1);
        int v45 = v44 - 1;
        if (v45 < 0 == v20) {
          *((_DWORD *)this + 14) = v45;
        }
        unsigned int v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2)) {
          goto LABEL_2;
        }
        int v46 = *v22;
        if (v46 != 26)
        {
          if (v46 != 34) {
            goto LABEL_2;
          }
          while (1)
          {
            *((void *)this + 1) = v22 + 1;
LABEL_72:
            int v47 = *(_DWORD *)(a1 + 76);
            uint64_t v48 = *(int *)(a1 + 72);
            if ((int)v48 >= v47)
            {
              if (v47 == *(_DWORD *)(a1 + 80))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v47 + 1);
                int v47 = *(_DWORD *)(a1 + 76);
              }
              *(_DWORD *)(a1 + 76) = v47 + 1;
              operator new();
            }
            uint64_t v49 = *(void *)(a1 + 64);
            *(_DWORD *)(a1 + 72) = v48 + 1;
            unsigned int v50 = *(_DWORD **)(v49 + 8 * v48);
            unsigned int v84 = 0;
            int v51 = (char *)*((void *)this + 1);
            if ((unint64_t)v51 >= *((void *)this + 2) || *v51 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0; {
            }
              }
            else
            {
              unsigned int v84 = *v51;
              *((void *)this + 1) = v51 + 1;
            }
            int v52 = *((_DWORD *)this + 14);
            int v53 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v52 + 1;
            if (v52 >= v53) {
              return 0;
            }
            int v54 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
            if (!sub_1012C5DD4(v50, this, v55) || !*((unsigned char *)this + 36)) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v54);
            int v56 = *((_DWORD *)this + 14);
            BOOL v20 = __OFSUB__(v56, 1);
            int v57 = v56 - 1;
            if (v57 < 0 == v20) {
              *((_DWORD *)this + 14) = v57;
            }
            unsigned int v22 = (unsigned char *)*((void *)this + 1);
            if ((unint64_t)v22 >= *((void *)this + 2)) {
              goto LABEL_2;
            }
            int v58 = *v22;
            if (v58 != 34)
            {
              if (v58 != 42) {
                goto LABEL_2;
              }
              while (1)
              {
                *((void *)this + 1) = v22 + 1;
LABEL_90:
                int v59 = *(_DWORD *)(a1 + 100);
                uint64_t v60 = *(int *)(a1 + 96);
                if ((int)v60 >= v59)
                {
                  if (v59 == *(_DWORD *)(a1 + 104))
                  {
                    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v59 + 1);
                    int v59 = *(_DWORD *)(a1 + 100);
                  }
                  *(_DWORD *)(a1 + 100) = v59 + 1;
                  operator new();
                }
                uint64_t v61 = *(void *)(a1 + 88);
                *(_DWORD *)(a1 + 96) = v60 + 1;
                uint64_t v62 = *(_DWORD **)(v61 + 8 * v60);
                unsigned int v84 = 0;
                uint64_t v63 = (char *)*((void *)this + 1);
                if ((unint64_t)v63 >= *((void *)this + 2) || *v63 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0; {
                }
                  }
                else
                {
                  unsigned int v84 = *v63;
                  *((void *)this + 1) = v63 + 1;
                }
                int v64 = *((_DWORD *)this + 14);
                int v65 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v64 + 1;
                if (v64 >= v65) {
                  return 0;
                }
                int v66 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
                if (!sub_1012C5DD4(v62, this, v67) || !*((unsigned char *)this + 36)) {
                  return 0;
                }
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v66);
                int v68 = *((_DWORD *)this + 14);
                BOOL v20 = __OFSUB__(v68, 1);
                int v69 = v68 - 1;
                if (v69 < 0 == v20) {
                  *((_DWORD *)this + 14) = v69;
                }
                unsigned int v22 = (unsigned char *)*((void *)this + 1);
                if ((unint64_t)v22 >= *((void *)this + 2)) {
                  goto LABEL_2;
                }
                int v70 = *v22;
                if (v70 != 42)
                {
                  if (v70 != 50) {
                    goto LABEL_2;
                  }
                  while (1)
                  {
                    *((void *)this + 1) = v22 + 1;
LABEL_108:
                    int v71 = *(_DWORD *)(a1 + 124);
                    uint64_t v72 = *(int *)(a1 + 120);
                    if ((int)v72 >= v71)
                    {
                      if (v71 == *(_DWORD *)(a1 + 128))
                      {
                        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v71 + 1);
                        int v71 = *(_DWORD *)(a1 + 124);
                      }
                      *(_DWORD *)(a1 + 124) = v71 + 1;
                      operator new();
                    }
                    uint64_t v73 = *(void *)(a1 + 112);
                    *(_DWORD *)(a1 + 120) = v72 + 1;
                    int v74 = *(_DWORD **)(v73 + 8 * v72);
                    unsigned int v84 = 0;
                    int v75 = (char *)*((void *)this + 1);
                    if ((unint64_t)v75 >= *((void *)this + 2) || *v75 < 0)
                    {
                      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v84))return 0; {
                    }
                      }
                    else
                    {
                      unsigned int v84 = *v75;
                      *((void *)this + 1) = v75 + 1;
                    }
                    int v76 = *((_DWORD *)this + 14);
                    int v77 = *((_DWORD *)this + 15);
                    *((_DWORD *)this + 14) = v76 + 1;
                    if (v76 >= v77) {
                      return 0;
                    }
                    int v78 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v84);
                    if (!sub_1012C5DD4(v74, this, v79) || !*((unsigned char *)this + 36)) {
                      return 0;
                    }
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v78);
                    int v80 = *((_DWORD *)this + 14);
                    BOOL v20 = __OFSUB__(v80, 1);
                    int v81 = v80 - 1;
                    if (v81 < 0 == v20) {
                      *((_DWORD *)this + 14) = v81;
                    }
                    unsigned int v22 = (unsigned char *)*((void *)this + 1);
                    BOOL v82 = (unsigned char *)*((void *)this + 2);
                    if (v22 >= v82 || *v22 != 50)
                    {
                      if (v22 == v82 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + 8) = 0;
                        uint64_t result = 1;
                        *((unsigned char *)this + 36) = 1;
                        return result;
                      }
                      goto LABEL_2;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_35:
    *((void *)this + 1) = v22 + 1;
  }
}

uint64_t sub_1012C6BCC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 140))
  {
    uint64_t v6 = *(void *)(result + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248B400 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  if (*(int *)(v5 + 48) >= 1)
  {
    uint64_t v8 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 40) + 8 * v8++), a2, a4);
    while (v8 < *(int *)(v5 + 48));
  }
  if (*(int *)(v5 + 72) >= 1)
  {
    uint64_t v9 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 64) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 72));
  }
  if (*(int *)(v5 + 96) >= 1)
  {
    uint64_t v10 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(*(void *)(v5 + 88) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 96));
  }
  if (*(int *)(v5 + 120) >= 1)
  {
    uint64_t v11 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(void *)(*(void *)(v5 + 112) + 8 * v11++), a2, a4);
    while (v11 < *(int *)(v5 + 120));
  }
  return result;
}

uint64_t sub_1012C6D24(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 140))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (!v2) {
      uint64_t v2 = *(void *)(qword_10248B400 + 8);
    }
    int v3 = *(unsigned __int8 *)(v2 + 36);
    int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if (*(unsigned char *)(v2 + 36)) {
      int v5 = v4;
    }
    else {
      int v5 = 0;
    }
    *(_DWORD *)(v2 + 32) = v5;
    int v1 = v5 + 2;
  }
  else
  {
    int v1 = 0;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  int v7 = v6 + v1;
  if ((int)v6 >= 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    do
    {
      int v9 = *(unsigned __int8 *)(*(void *)v8 + 24);
      if (*(unsigned char *)(*(void *)v8 + 24))
      {
        int v10 = (v9 << 31 >> 31) & 5;
        if ((v9 & 2) != 0) {
          v10 += 5;
        }
        if ((v9 & 4) != 0) {
          int v9 = v10 + 5;
        }
        else {
          int v9 = v10;
        }
      }
      *(_DWORD *)(*(void *)v8 + 20) = v9;
      v7 += v9 + 1;
      v8 += 8;
      --v6;
    }
    while (v6);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 48);
  int v12 = v11 + v7;
  if ((int)v11 >= 1)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    do
    {
      int v14 = *(unsigned __int8 *)(*(void *)v13 + 24);
      if (*(unsigned char *)(*(void *)v13 + 24))
      {
        int v15 = (v14 << 31 >> 31) & 5;
        if ((v14 & 2) != 0) {
          v15 += 5;
        }
        if ((v14 & 4) != 0) {
          int v14 = v15 + 5;
        }
        else {
          int v14 = v15;
        }
      }
      *(_DWORD *)(*(void *)v13 + 20) = v14;
      v12 += v14 + 1;
      v13 += 8;
      --v11;
    }
    while (v11);
  }
  uint64_t v16 = *(unsigned int *)(a1 + 72);
  int v17 = v16 + v12;
  if ((int)v16 >= 1)
  {
    uint64_t v18 = *(void *)(a1 + 64);
    do
    {
      int v19 = *(unsigned __int8 *)(*(void *)v18 + 24);
      if (*(unsigned char *)(*(void *)v18 + 24))
      {
        int v20 = (v19 << 31 >> 31) & 5;
        if ((v19 & 2) != 0) {
          v20 += 5;
        }
        if ((v19 & 4) != 0) {
          int v19 = v20 + 5;
        }
        else {
          int v19 = v20;
        }
      }
      *(_DWORD *)(*(void *)v18 + 20) = v19;
      v17 += v19 + 1;
      v18 += 8;
      --v16;
    }
    while (v16);
  }
  uint64_t v21 = *(unsigned int *)(a1 + 96);
  int v22 = v21 + v17;
  if ((int)v21 >= 1)
  {
    uint64_t v23 = *(void *)(a1 + 88);
    do
    {
      int v24 = *(unsigned __int8 *)(*(void *)v23 + 24);
      if (*(unsigned char *)(*(void *)v23 + 24))
      {
        int v25 = (v24 << 31 >> 31) & 5;
        if ((v24 & 2) != 0) {
          v25 += 5;
        }
        if ((v24 & 4) != 0) {
          int v24 = v25 + 5;
        }
        else {
          int v24 = v25;
        }
      }
      *(_DWORD *)(*(void *)v23 + 20) = v24;
      v22 += v24 + 1;
      v23 += 8;
      --v21;
    }
    while (v21);
  }
  uint64_t v26 = *(unsigned int *)(a1 + 120);
  uint64_t v27 = (v26 + v22);
  if ((int)v26 >= 1)
  {
    uint64_t v28 = *(void *)(a1 + 112);
    do
    {
      int v29 = *(unsigned __int8 *)(*(void *)v28 + 24);
      if (*(unsigned char *)(*(void *)v28 + 24))
      {
        int v30 = (v29 << 31 >> 31) & 5;
        if ((v29 & 2) != 0) {
          v30 += 5;
        }
        if ((v29 & 4) != 0) {
          int v29 = v30 + 5;
        }
        else {
          int v29 = v30;
        }
      }
      *(_DWORD *)(*(void *)v28 + 20) = v29;
      uint64_t v27 = (v27 + v29 + 1);
      v28 += 8;
      --v26;
    }
    while (v26);
  }
  *(_DWORD *)(a1 + 136) = v27;
  return v27;
}

double sub_1012C6F58(uint64_t a1, void *lpsrc)
{
  return sub_1012C34F8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C6FE0()
{
  return 1;
}

void *sub_1012C6FE8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.GnssLeechLocationData");
}

void sub_1012C6FF8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10231E230;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248B410 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1012C7088(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1012C6FF8(a1);

  operator delete();
}

void sub_1012C70C0()
{
}

uint64_t sub_1012C7114(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      TagFallbacuint64_t k = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_31;
        }
        *(_DWORD *)(a1 + 32) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v47 = 0;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47))return 0; {
        }
          }
        else
        {
          unsigned int v47 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v20 = *((_DWORD *)this + 14);
        int v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21) {
          return 0;
        }
        int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v47);
        if (!sub_1012C4304(v8, this, v23) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        int v24 = *((_DWORD *)this + 14);
        BOOL v25 = __OFSUB__(v24, 1);
        int v26 = v24 - 1;
        if (v26 < 0 == v25) {
          *((_DWORD *)this + 14) = v26;
        }
        uint64_t v27 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v27 >= v10 || *v27 != 16) {
          continue;
        }
        uint64_t v11 = v27 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_44;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_44:
        unsigned int v47 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v28 = v47;
          int v29 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v28 = *v11;
          int v29 = v11 + 1;
          *((void *)this + 1) = v29;
        }
        *(unsigned char *)(a1 + 16) = v28 != 0;
        *(_DWORD *)(a1 + 32) |= 2u;
        if ((unint64_t)v29 >= v10 || *v29 != 24) {
          continue;
        }
        int v12 = v29 + 1;
        *((void *)this + 1) = v12;
LABEL_52:
        unsigned int v47 = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v31 = v47;
          int v32 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v31 = *v12;
          int v32 = v12 + 1;
          *((void *)this + 1) = v32;
        }
        *(unsigned char *)(a1 + 17) = v31 != 0;
        *(_DWORD *)(a1 + 32) |= 4u;
        if ((unint64_t)v32 >= v10 || *v32 != 32) {
          continue;
        }
        uint64_t v13 = v32 + 1;
        *((void *)this + 1) = v13;
LABEL_60:
        unsigned int v47 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v33 = v47;
          int v34 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v33 = *v13;
          int v34 = v13 + 1;
          *((void *)this + 1) = v34;
        }
        *(unsigned char *)(a1 + 18) = v33 != 0;
        *(_DWORD *)(a1 + 32) |= 8u;
        if ((unint64_t)v34 >= v10 || *v34 != 40) {
          continue;
        }
        int v14 = v34 + 1;
        *((void *)this + 1) = v14;
LABEL_68:
        unsigned int v47 = 0;
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v35 = v47;
          uint64_t v36 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v35 = *v14;
          uint64_t v36 = v14 + 1;
          *((void *)this + 1) = v36;
        }
        *(unsigned char *)(a1 + 19) = v35 != 0;
        *(_DWORD *)(a1 + 32) |= 0x10u;
        if ((unint64_t)v36 >= v10 || *v36 != 48) {
          continue;
        }
        int v15 = v36 + 1;
        *((void *)this + 1) = v15;
LABEL_76:
        unsigned int v47 = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v37 = v47;
          int v38 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v37 = *v15;
          int v38 = v15 + 1;
          *((void *)this + 1) = v38;
        }
        *(unsigned char *)(a1 + 20) = v37 != 0;
        *(_DWORD *)(a1 + 32) |= 0x20u;
        if ((unint64_t)v38 >= v10 || *v38 != 56) {
          continue;
        }
        uint64_t v16 = v38 + 1;
        *((void *)this + 1) = v16;
LABEL_84:
        unsigned int v47 = 0;
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v39 = v47;
          int v40 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v39 = *v16;
          int v40 = v16 + 1;
          *((void *)this + 1) = v40;
        }
        *(unsigned char *)(a1 + 21) = v39 != 0;
        *(_DWORD *)(a1 + 32) |= 0x40u;
        if ((unint64_t)v40 >= v10 || *v40 != 64) {
          continue;
        }
        int v17 = v40 + 1;
        *((void *)this + 1) = v17;
LABEL_92:
        unsigned int v47 = 0;
        if ((unint64_t)v17 >= v10 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v41 = v47;
          int v42 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v41 = *v17;
          int v42 = v17 + 1;
          *((void *)this + 1) = v42;
        }
        *(unsigned char *)(a1 + 22) = v41 != 0;
        *(_DWORD *)(a1 + 32) |= 0x80u;
        if ((unint64_t)v42 >= v10 || *v42 != 72) {
          continue;
        }
        uint64_t v18 = v42 + 1;
        *((void *)this + 1) = v18;
LABEL_100:
        unsigned int v47 = 0;
        if ((unint64_t)v18 >= v10 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v43 = v47;
          int v44 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v43 = *v18;
          int v44 = v18 + 1;
          *((void *)this + 1) = v44;
        }
        *(unsigned char *)(a1 + 23) = v43 != 0;
        *(_DWORD *)(a1 + 32) |= 0x100u;
        if ((unint64_t)v44 >= v10 || *v44 != 80) {
          continue;
        }
        int v19 = v44 + 1;
        *((void *)this + 1) = v19;
LABEL_108:
        unsigned int v47 = 0;
        if ((unint64_t)v19 >= v10 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v47);
          if (!result) {
            return result;
          }
          unsigned int v45 = v47;
          int v46 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v45 = *v19;
          int v46 = (unsigned __int8 *)(v19 + 1);
          *((void *)this + 1) = v46;
        }
        *(unsigned char *)(a1 + 24) = v45 != 0;
        *(_DWORD *)(a1 + 32) |= 0x200u;
        if (v46 != (unsigned __int8 *)v10 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        int v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_52;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_60;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_68;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        int v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_76;
      case 7u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        uint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_84;
      case 8u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        int v17 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_92;
      case 9u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        uint64_t v18 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_100;
      case 0xAu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        int v19 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_108;
      default:
        int v7 = TagFallback & 7;
LABEL_31:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_1012C77BC(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248B410 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 16), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 17), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 18), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 19), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 20), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 21), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_22:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 23), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 32) & 0x200) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 22), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_10:
  if ((v6 & 0x200) == 0) {
    return result;
  }
LABEL_23:
  int v8 = *(unsigned __int8 *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v8, (BOOL)a2, a4);
}

uint64_t sub_1012C791C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if ((_BYTE)v1)
  {
    if (v1)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (!v3) {
        uint64_t v3 = *(void *)(qword_10248B410 + 8);
      }
      int v4 = *(unsigned __int8 *)(v3 + 36);
      if (*(unsigned char *)(v3 + 36))
      {
        int v5 = (v4 << 31 >> 31) & 9;
        if ((v4 & 2) != 0) {
          v5 += 9;
        }
        if ((v4 & 4) != 0) {
          int v4 = v5 + 9;
        }
        else {
          int v4 = v5;
        }
      }
      *(_DWORD *)(v3 + 32) = v4;
      unsigned int v2 = v4 + 2;
      int v1 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      unsigned int v2 = 0;
    }
    if ((v1 & 2) != 0) {
      v2 += 2;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x10) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x20) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x40) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x80) != 0) {
      v2 += 2;
    }
  }
  else
  {
    unsigned int v2 = 0;
  }
  unsigned int v6 = v2 + 2;
  if ((v1 & 0x100) == 0) {
    unsigned int v6 = v2;
  }
  if ((v1 & 0x200) != 0) {
    v6 += 2;
  }
  if ((v1 & 0xFF00) != 0) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v2;
  }
  *(_DWORD *)(a1 + 28) = v7;
  return v7;
}

void sub_1012C7A08(uint64_t a1, void *lpsrc)
{
  sub_1012C3A68(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C7A90()
{
  return 1;
}

void *sub_1012C7A98@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.MapsRouteHintData");
}

void sub_1012C7AA8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10231E2A8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248B418 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1012C7B38(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1012C7AA8(a1);

  operator delete();
}

void sub_1012C7B70()
{
}

uint64_t sub_1012C7BC0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        TagFallbacuint64_t k = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 == 2)
      {
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          int v9 = (char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
          goto LABEL_29;
        }
      }
      else
      {
        int v7 = TagFallback & 7;
      }
LABEL_17:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    uint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      operator new();
    }
    unsigned int v23 = 0;
    uint64_t v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23)) {
        return 0;
      }
    }
    else
    {
      unsigned int v23 = *v11;
      *((void *)this + 1) = v11 + 1;
    }
    int v12 = *((_DWORD *)this + 14);
    int v13 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v12 + 1;
    if (v12 >= v13) {
      return 0;
    }
    int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
    if (!sub_1012C4304(v10, this, v15) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
    int v16 = *((_DWORD *)this + 14);
    BOOL v17 = __OFSUB__(v16, 1);
    int v18 = v16 - 1;
    if (v18 < 0 == v17) {
      *((_DWORD *)this + 14) = v18;
    }
    int v19 = (unsigned char *)*((void *)this + 1);
    unint64_t v8 = *((void *)this + 2);
    if ((unint64_t)v19 < v8 && *v19 == 16)
    {
      int v9 = v19 + 1;
      *((void *)this + 1) = v9;
LABEL_29:
      unsigned int v22 = 0;
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
        if (!result) {
          return result;
        }
        unsigned int v20 = v22;
      }
      else
      {
        unsigned int v20 = *v9;
        *((void *)this + 1) = v9 + 1;
      }
      if (v20 <= 0x1B)
      {
        *(_DWORD *)(a1 + 24) |= 2u;
        *(_DWORD *)(a1 + 16) = v20;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t sub_1012C7E20(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248B418 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
  {
LABEL_7:
    int v8 = *(_DWORD *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, (int)a2, a4);
  }
  return result;
}

uint64_t sub_1012C7EA0(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = 0;
    goto LABEL_21;
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248B418 + 8);
  }
  int v5 = *(unsigned __int8 *)(v4 + 36);
  if (*(unsigned char *)(v4 + 36))
  {
    int v6 = (v5 << 31 >> 31) & 9;
    if ((v5 & 2) != 0) {
      v6 += 9;
    }
    if ((v5 & 4) != 0) {
      int v5 = v6 + 9;
    }
    else {
      int v5 = v6;
    }
  }
  *(_DWORD *)(v4 + 32) = v5;
  uint64_t v3 = (v5 + 2);
  if ((*(_DWORD *)(a1 + 24) & 2) != 0)
  {
LABEL_15:
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      int v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
    }
    else
    {
      int v8 = 2;
    }
    uint64_t v3 = (v8 + v3);
  }
LABEL_21:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_1012C7F64(uint64_t a1, void *lpsrc)
{
  sub_1012C3C94(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C7FEC()
{
  return 1;
}

void *sub_1012C7FF4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.MotionActivityType");
}

void sub_1012C8004(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10231E320;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248B420 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1012C8094(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1012C8004(a1);

  operator delete();
}

void sub_1012C80CC()
{
}

uint64_t sub_1012C8118(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        TagFallbacuint64_t k = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_17;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        unint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
      }
        }
    }
    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 28) |= 1u;
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      operator new();
    }
    unsigned int v20 = 0;
    int v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20)) {
        return 0;
      }
    }
    else
    {
      unsigned int v20 = *v9;
      *((void *)this + 1) = v9 + 1;
    }
    int v10 = *((_DWORD *)this + 14);
    int v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11) {
      return 0;
    }
    int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_1012C4304(v8, this, v13) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    int v14 = *((_DWORD *)this + 14);
    BOOL v15 = __OFSUB__(v14, 1);
    int v16 = v14 - 1;
    if (v16 < 0 == v15) {
      *((_DWORD *)this + 14) = v16;
    }
    BOOL v17 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
    {
      *((void *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1012C8350(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248B420 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    double v8 = *(double *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, v8, a3);
  }
  return result;
}

uint64_t sub_1012C83D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    if (v1)
    {
      uint64_t v1 = *(void *)(a1 + 8);
      if (!v1) {
        uint64_t v1 = *(void *)(qword_10248B420 + 8);
      }
      int v3 = *(unsigned __int8 *)(v1 + 36);
      if (*(unsigned char *)(v1 + 36))
      {
        int v4 = (v3 << 31 >> 31) & 9;
        if ((v3 & 2) != 0) {
          v4 += 9;
        }
        if ((v3 & 4) != 0) {
          int v3 = v4 + 9;
        }
        else {
          int v3 = v4;
        }
      }
      *(_DWORD *)(v1 + 32) = v3;
      unsigned int v2 = v3 + 2;
      LODWORD(v1) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      unsigned int v2 = 0;
    }
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_1012C8448(uint64_t a1, void *lpsrc)
{
  return sub_1012C3DC0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C84D0()
{
  return 1;
}

void *sub_1012C84D8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.CMGpsModelOutput");
}

void sub_1012C84E8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10231E398;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248B428 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1012C8578(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1012C84E8(a1);

  operator delete();
}

void sub_1012C85B0()
{
}

uint64_t sub_1012C85FC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        TagFallbacuint64_t k = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_17;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        unint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
      }
        }
    }
    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 28) |= 1u;
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      operator new();
    }
    unsigned int v20 = 0;
    int v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20)) {
        return 0;
      }
    }
    else
    {
      unsigned int v20 = *v9;
      *((void *)this + 1) = v9 + 1;
    }
    int v10 = *((_DWORD *)this + 14);
    int v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11) {
      return 0;
    }
    int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_1012C4304(v8, this, v13) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    int v14 = *((_DWORD *)this + 14);
    BOOL v15 = __OFSUB__(v14, 1);
    int v16 = v14 - 1;
    if (v16 < 0 == v15) {
      *((_DWORD *)this + 14) = v16;
    }
    BOOL v17 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
    {
      *((void *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1012C8834(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248B428 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    double v8 = *(double *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, v8, a3);
  }
  return result;
}

uint64_t sub_1012C88B4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    if (v1)
    {
      uint64_t v1 = *(void *)(a1 + 8);
      if (!v1) {
        uint64_t v1 = *(void *)(qword_10248B428 + 8);
      }
      int v3 = *(unsigned __int8 *)(v1 + 36);
      if (*(unsigned char *)(v1 + 36))
      {
        int v4 = (v3 << 31 >> 31) & 9;
        if ((v3 & 2) != 0) {
          v4 += 9;
        }
        if ((v3 & 4) != 0) {
          int v3 = v4 + 9;
        }
        else {
          int v3 = v4;
        }
      }
      *(_DWORD *)(v1 + 32) = v3;
      unsigned int v2 = v3 + 2;
      LODWORD(v1) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      unsigned int v2 = 0;
    }
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_1012C892C(uint64_t a1, void *lpsrc)
{
  return sub_1012C3EE0(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C89B4()
{
  return 1;
}

void *sub_1012C89BC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.CMWiFiModelOutput");
}

void sub_1012C89CC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10231E410;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248B430 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1012C8A5C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1012C89CC(a1);

  operator delete();
}

void sub_1012C8A94()
{
}

uint64_t sub_1012C8AE0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallbacuint64_t k = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        TagFallbacuint64_t k = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_17;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        unint64_t v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
      else
      {
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
      }
        }
    }
    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 28) |= 1u;
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      operator new();
    }
    unsigned int v20 = 0;
    int v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20)) {
        return 0;
      }
    }
    else
    {
      unsigned int v20 = *v9;
      *((void *)this + 1) = v9 + 1;
    }
    int v10 = *((_DWORD *)this + 14);
    int v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11) {
      return 0;
    }
    int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    if (!sub_1012C4304(v8, this, v13) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    int v14 = *((_DWORD *)this + 14);
    BOOL v15 = __OFSUB__(v14, 1);
    int v16 = v14 - 1;
    if (v16 < 0 == v15) {
      *((_DWORD *)this + 14) = v16;
    }
    BOOL v17 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
    {
      *((void *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1012C8D18(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248B430 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    double v8 = *(double *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, v8, a3);
  }
  return result;
}

uint64_t sub_1012C8D98(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    if (v1)
    {
      uint64_t v1 = *(void *)(a1 + 8);
      if (!v1) {
        uint64_t v1 = *(void *)(qword_10248B430 + 8);
      }
      int v3 = *(unsigned __int8 *)(v1 + 36);
      if (*(unsigned char *)(v1 + 36))
      {
        int v4 = (v3 << 31 >> 31) & 9;
        if ((v3 & 2) != 0) {
          v4 += 9;
        }
        if ((v3 & 4) != 0) {
          int v3 = v4 + 9;
        }
        else {
          int v3 = v4;
        }
      }
      *(_DWORD *)(v1 + 32) = v3;
      unsigned int v2 = v3 + 2;
      LODWORD(v1) = *(_DWORD *)(a1 + 28);
    }
    else
    {
      unsigned int v2 = 0;
    }
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_1012C8E10(uint64_t a1, void *lpsrc)
{
  return sub_1012C4000(a1, (uint64_t)lpsrc);
}

uint64_t sub_1012C8E98()
{
  return 1;
}

void *sub_1012C8EA0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.OutdoorEstimator.CMALSModelOutput");
}

uint64_t sub_1012C8EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_101124848();
  sub_100D58AB4(v4 + 496, a2);
  sub_100D621D4(a1 + 984, a2);
  sub_10150219C(a1 + 1320, a2);
  return a1;
}

void sub_1012C8F14(_Unwind_Exception *a1)
{
  sub_100D621D8(v3);
  sub_100D58AB8(v2);
  sub_10112484C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012C8F4C(void *a1, uint64_t a2)
{
  return sub_1012C8F54(a1, a2, 0);
}

uint64_t sub_1012C8F54(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1012C9020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012C9038(uint64_t a1, uint64_t a2)
{
  return sub_1012C9044((void *)(a1 + 496), a2, 0);
}

uint64_t sub_1012C9044(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1012C9110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012C9124(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100D58CC4(a1 + 496, a2);
}

uint64_t sub_1012C912C(uint64_t a1, void *a2)
{
  if (!sub_100082064(a1 + 568)) {
    return 109;
  }
  sub_100D58F58(a1 + 496, a2);
  return 100;
}

uint64_t sub_1012C9174(uint64_t a1, void *a2)
{
  return sub_100D5941C(a1 + 496, a2);
}

uint64_t sub_1012C9180(uint64_t a1, uint64_t *a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 109;
  }

  return sub_10112757C(a1, a2);
}

uint64_t sub_1012C91F0(uint64_t a1)
{
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10231E598);
  }
  uint64_t v2 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning aggregation for VO2Max staging data", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10231E598);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxStagingOutputStore::aggregateRecords()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486AE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486AE0))
  {
    uint64_t v6 = 0;
    *(_OWORD *)long long buf = xmmword_101DB2A88;
    sub_1011C4B34(qword_102486AC8, buf, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1011C4BC0, qword_102486AC8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102486AE0);
  }
  sub_1011248CC(a1, (uint64_t)qword_102486AC8);
  sub_100D58B58(a1 + 496, (uint64_t)qword_102486AC8);
  return sub_100D622D8(a1 + 984, (uint64_t)qword_102486AC8);
}

void sub_1012C9430(_Unwind_Exception *a1)
{
}

uint64_t sub_1012C9450(void *a1)
{
  sub_1011F9E28(a1 + 9);
  sub_1011F9E28(a1 + 71);

  return sub_1011F9E28(a1 + 132);
}

uint64_t sub_1012C9494(uint64_t a1, uint64_t a2)
{
  return sub_1012C94A0((void *)(a1 + 984), a2, 0);
}

uint64_t sub_1012C94A0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1012C956C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012C9580(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100D6276C(a1 + 984, a2);
}

uint64_t sub_1012C9588(uint64_t a1, void *a2)
{
  if (!sub_100082064(a1 + 1056)) {
    return 109;
  }
  sub_100D62444(a1 + 984, a2);
  return 100;
}

void sub_1012C95D0(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_1012C9600(unsigned __int16 *a1, uint64_t a2, float a3)
{
  if (*(unsigned char *)(a2 + 40))
  {
    float v4 = -999.0;
  }
  else
  {
    double v5 = *(double *)(a2 + 8);
    double v6 = -999.0;
    if (v5 != -999.0)
    {
      double v7 = *(double *)(a2 + 16);
      double v8 = v7 - v5;
      if (v7 == -999.0) {
        double v6 = -999.0;
      }
      else {
        double v6 = v8;
      }
    }
    float v4 = v6;
  }
  uint64_t v9 = a1[1];
  unint64_t v10 = *((unsigned int *)a1 + 1);
  uint64_t v11 = *a1;
  if (v11 + v9 >= v10) {
    uint64_t v12 = *((unsigned int *)a1 + 1);
  }
  else {
    uint64_t v12 = 0;
  }
  *(float *)&a1[2 * (v11 + v9 - v12) + 4] = v4;
  if (v10 <= v9)
  {
    unint64_t v13 = v11 + 1;
    if (v13 >= v10) {
      __int16 v14 = v10;
    }
    else {
      __int16 v14 = 0;
    }
    *a1 = v13 - v14;
  }
  else
  {
    LOWORD(v9) = v9 + 1;
    a1[1] = v9;
  }
  int v16 = a1 + 124;
  uint64_t v15 = a1[124];
  uint64_t v17 = a1[125];
  unint64_t v18 = *((unsigned int *)a1 + 63);
  if (v15 + v17 >= v18) {
    uint64_t v19 = *((unsigned int *)a1 + 63);
  }
  else {
    uint64_t v19 = 0;
  }
  *(float *)&v16[2 * (v15 + v17 - v19) + 4] = a3;
  if (v18 <= v17)
  {
    unint64_t v20 = v15 + 1;
    if (v20 < v18) {
      LOWORD(v18) = 0;
    }
    *int v16 = v20 - v18;
  }
  else
  {
    LOWORD(v17) = v17 + 1;
    a1[125] = v17;
  }
  if (v10 != (unsigned __int16)v9) {
    return 0;
  }
  float v21 = 0.0;
  if ((_WORD)v17)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    float v24 = 0.0;
    do
    {
      if (*(float *)sub_1004182C4(a1, v22) != -999.0)
      {
        float v24 = v24 + *(float *)sub_1004182C4(a1, v22);
        ++v23;
      }
      ++v22;
    }
    while (v22 < a1[125]);
    LOWORD(v9) = a1[1];
  }
  else
  {
    unint64_t v23 = 0;
    float v24 = 0.0;
  }
  float v26 = (float)v23 / (float)(unsigned __int16)v9;
  float v27 = sub_1007504E8(a1 + 124, (unsigned int (*)(float, float))sub_100CF8208, 0);
  float v28 = v27 - sub_1007504E8(a1 + 124, (unsigned int (*)(float, float))sub_1007506E8, 0);
  if (!v23
    || ((float v21 = v24 / (float)v23, v26 > 0.75) ? (v29 = v21 < -20.0) : (v29 = 0),
        v29 ? (BOOL v30 = v28 <= 180.0) : (BOOL v30 = 1),
        v30))
  {
    uint64_t v25 = 0;
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231E5B8);
    }
    unsigned int v31 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349312;
      double v37 = v28;
      __int16 v38 = 2050;
      double v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "HRHBS StopDetected,%{public}f,%{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10231E5B8);
      }
      unsigned int v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLExerciseMachineHeadingHRBackstop::update(float, const CLWorkoutStopModelHR::Statistics &, int)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    uint64_t v25 = 1;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10231E5B8);
  }
  int v32 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134218496;
    double v37 = v26;
    __int16 v38 = 2048;
    double v39 = v21;
    __int16 v40 = 2048;
    double v41 = v28;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "HRHBS,good,%f,eDiff,%f,degree,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10231E5B8);
    }
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLExerciseMachineHeadingHRBackstop::update(float, const CLWorkoutStopModelHR::Statistics &, int)", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  return v25;
}

void sub_1012C9B4C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

id *sub_1012C9C18(uint64_t a1, uint64_t a2)
{
  sub_1000E1294((uint64_t *)v26, (uint64_t)"CLBatchedSensor.onAccelerometerData", 0);
  sub_100134750(v24, "kCLConnectionMessageBatchedAccelerometer");
  if (byte_102486AFF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_102486AE8, *((unint64_t *)&xmmword_102486AE8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_102486AE8;
    uint64_t v22 = unk_102486AF8;
  }
  int v23 = dword_102486B00;
  char v4 = sub_1012CCD78(a1, (uint64_t)v24, (uint64_t *)__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if ((v4 & 1) == 0) {
      return sub_1000E1098(v26);
    }
  }
  else if ((v4 & 1) == 0)
  {
    return sub_1000E1098(v26);
  }
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    double v5 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      if (byte_102486AFF >= 0) {
        double v6 = &xmmword_102486AE8;
      }
      else {
        double v6 = (long long *)xmmword_102486AE8;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[subscription-%{public}s] data buffer is empty", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_1000E1098(v26);
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    if (byte_102486AFF >= 0) {
      double v7 = &xmmword_102486AE8;
    }
    else {
      double v7 = (long long *)xmmword_102486AE8;
    }
    int v27 = 136446210;
    float v28 = v7;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::onBatchedAccelerometerData(const CLBatchedAccelerometerClient::Buffer &)", "%s\n", v8);
LABEL_49:
    if (v8 != buf) {
      free(v8);
    }
    return sub_1000E1098(v26);
  }
  if (byte_102486AFF < 0)
  {
    sub_1000DC48C(__dst, (void *)xmmword_102486AE8, *((unint64_t *)&xmmword_102486AE8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = xmmword_102486AE8;
    uint64_t v19 = unk_102486AF8;
  }
  int v20 = dword_102486B00;
  xpc_object_t v9 = sub_1012CD028((long long **)a2, (uint64_t *)__dst);
  unint64_t v10 = v9;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst[0]);
    if (v10) {
      goto LABEL_30;
    }
  }
  else if (v9)
  {
LABEL_30:
    sub_100134750(v16, "kCLConnectionMessageBatchedAccelerometer");
    xpc_object_t v11 = sub_1012CD2B0((const char *)v16, v10);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *(void *)long long buf = v11;
    sub_1012CD350(a1);
    xpc_release(v10);
    xpc_release(*(xpc_object_t *)buf);
    return sub_1000E1098(v26);
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  uint64_t v12 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
  {
    if (byte_102486AFF >= 0) {
      unint64_t v13 = &xmmword_102486AE8;
    }
    else {
      unint64_t v13 = (long long *)xmmword_102486AE8;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[subscription-%{public}s] could not create payload", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    if (byte_102486AFF >= 0) {
      uint64_t v15 = &xmmword_102486AE8;
    }
    else {
      uint64_t v15 = (long long *)xmmword_102486AE8;
    }
    int v27 = 136446210;
    float v28 = v15;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLBatchedSensorSubscription::onBatchedAccelerometerData(const CLBatchedAccelerometerClient::Buffer &)", "%s\n", v8);
    goto LABEL_49;
  }
  return sub_1000E1098(v26);
}

void sub_1012CA0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,id a39)
{
}

id *sub_1012CA180(uint64_t a1, uint64_t a2)
{
  sub_1000E1294((uint64_t *)v26, (uint64_t)"CLBatchedSensor.onDeviceMotionData", 0);
  sub_100134750(v24, "kCLConnectionMessageBatchedDeviceMotion");
  if (byte_102486B1F < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_102486B08, *((unint64_t *)&xmmword_102486B08 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_102486B08;
    uint64_t v22 = unk_102486B18;
  }
  int v23 = dword_102486B20;
  char v4 = sub_1012CCD78(a1, (uint64_t)v24, (uint64_t *)__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if ((v4 & 1) == 0) {
      return sub_1000E1098(v26);
    }
  }
  else if ((v4 & 1) == 0)
  {
    return sub_1000E1098(v26);
  }
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    double v5 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      if (byte_102486B1F >= 0) {
        double v6 = &xmmword_102486B08;
      }
      else {
        double v6 = (long long *)xmmword_102486B08;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[subscription-%{public}s] data buffer is empty", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_1000E1098(v26);
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    if (byte_102486B1F >= 0) {
      double v7 = &xmmword_102486B08;
    }
    else {
      double v7 = (long long *)xmmword_102486B08;
    }
    int v27 = 136446210;
    float v28 = v7;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::onBatchedDeviceMotionData(const CLBatchedDeviceMotionClient::Buffer &)", "%s\n", v8);
LABEL_49:
    if (v8 != buf) {
      free(v8);
    }
    return sub_1000E1098(v26);
  }
  if (byte_102486B1F < 0)
  {
    sub_1000DC48C(__dst, (void *)xmmword_102486B08, *((unint64_t *)&xmmword_102486B08 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = xmmword_102486B08;
    uint64_t v19 = unk_102486B18;
  }
  int v20 = dword_102486B20;
  xpc_object_t v9 = sub_1012CD3C8((long long **)a2, (uint64_t *)__dst);
  unint64_t v10 = v9;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst[0]);
    if (v10) {
      goto LABEL_30;
    }
  }
  else if (v9)
  {
LABEL_30:
    sub_100134750(v16, "kCLConnectionMessageBatchedDeviceMotion");
    xpc_object_t v11 = sub_1012CD2B0((const char *)v16, v10);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *(void *)long long buf = v11;
    sub_1012CD350(a1);
    xpc_release(v10);
    xpc_release(*(xpc_object_t *)buf);
    return sub_1000E1098(v26);
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  uint64_t v12 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
  {
    if (byte_102486B1F >= 0) {
      unint64_t v13 = &xmmword_102486B08;
    }
    else {
      unint64_t v13 = (long long *)xmmword_102486B08;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[subscription-%{public}s] could not create payload", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    if (byte_102486B1F >= 0) {
      uint64_t v15 = &xmmword_102486B08;
    }
    else {
      uint64_t v15 = (long long *)xmmword_102486B08;
    }
    int v27 = 136446210;
    float v28 = v15;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLBatchedSensorSubscription::onBatchedDeviceMotionData(const CLBatchedDeviceMotionClient::Buffer &)", "%s\n", v8);
    goto LABEL_49;
  }
  return sub_1000E1098(v26);
}

void sub_1012CA61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,id a39)
{
}

void sub_1012CA798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10069592C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012CA7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_1010143F4(a2);
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  double v7 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 224);
    uint64_t v10 = a3 + 16;
    int v11 = *(_DWORD *)(a1 + 96);
    if (*(char *)(a3 + 39) < 0) {
      uint64_t v10 = *(void *)(a3 + 16);
    }
    *(_DWORD *)long long buf = 67241218;
    int v48 = v8;
    __int16 v49 = 1026;
    int v50 = v9;
    __int16 v51 = 1026;
    int v52 = v11;
    __int16 v53 = 1026;
    int v54 = v6;
    __int16 v55 = 2082;
    uint64_t v56 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[subscription] received workout event %{public}d, mode %{public}d, previous active state %{public}d, current active state %{public}d, appId %{public}s", buf, 0x24u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    uint64_t v22 = *(void *)(a2 + 16);
    uint64_t v23 = *(void *)(a2 + 224);
    uint64_t v24 = a3 + 16;
    int v25 = *(_DWORD *)(a1 + 96);
    if (*(char *)(a3 + 39) < 0) {
      uint64_t v24 = *(void *)(a3 + 16);
    }
    int v37 = 67241218;
    int v38 = v22;
    __int16 v39 = 1026;
    int v40 = v23;
    __int16 v41 = 1026;
    int v42 = v25;
    __int16 v43 = 1026;
    int v44 = v6;
    __int16 v45 = 2082;
    uint64_t v46 = v24;
    float v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::onWorkoutSessionUpdate(CLMotionStateMediator_Type::WorkoutEvent, const CLMotionStateMediator_Type::WorkoutSessionOverview &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 104) = v12;
  long long v14 = *(_OWORD *)(a2 + 112);
  long long v15 = *(_OWORD *)(a2 + 128);
  long long v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  long long v17 = *(_OWORD *)(a2 + 176);
  long long v18 = *(_OWORD *)(a2 + 192);
  long long v19 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 264) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 248) = v19;
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v17;
  std::string::operator=((std::string *)(a1 + 280), (const std::string *)(a3 + 16));
  BOOL v20 = sub_1012CD658(a1);
  if (sub_1010143F4(a2) == 1)
  {
    *(_DWORD *)(a1 + 96) = 1;
    sub_100134750(v35, "kCLConnectionMessageBatchedAccelerometer");
    if (byte_102486AFF < 0)
    {
      sub_1000DC48C(__p, (void *)xmmword_102486AE8, *((unint64_t *)&xmmword_102486AE8 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = xmmword_102486AE8;
      uint64_t v33 = unk_102486AF8;
    }
    int v34 = dword_102486B00;
    sub_1012CD758(a1, (uint64_t)v35, __p, *(void **)(a1 + 56));
    if (SHIBYTE(v33) < 0) {
      operator delete(__p[0]);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    sub_100134750(v30, "kCLConnectionMessageBatchedDeviceMotion");
    if (byte_102486B1F < 0)
    {
      sub_1000DC48C(__dst, (void *)xmmword_102486B08, *((unint64_t *)&xmmword_102486B08 + 1));
    }
    else
    {
      *(_OWORD *)std::string __dst = xmmword_102486B08;
      uint64_t v28 = unk_102486B18;
    }
    int v29 = dword_102486B20;
    sub_1012CD758(a1, (uint64_t)v30, __dst, *(void **)(a1 + 64));
    if (SHIBYTE(v28) < 0) {
      operator delete(__dst[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }
  else if (sub_1010143F4(a2) == 2)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    *(_DWORD *)(a1 + 96) = 2;
    [*(id *)(a1 + 56) unregisterForData:v21];
    [*(id *)(a1 + 64) unregisterForData:*(void *)(a1 + 48)];
  }
  sub_1012CDBFC(a1, v20);
}

void sub_1012CABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1012CAC7C(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v7 = sub_100054C14((uint64_t)a1, a2, a3, a4, a5);
  *(void *)uint64_t v7 = off_10231E5E8;
  *(_OWORD *)(v7 + 48) = 0u;
  uint64_t v8 = (CLBatchedSensorSubscriptionAdapter **)(v7 + 48);
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_DWORD *)(v7 + 96) = 2;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 257) = 0u;
  sub_100134750((void *)(v7 + 280), "");
  a1[38] = off_1022B6DB8;
  uint64_t v9 = operator new(0x20uLL);
  v9[1] = 0;
  _OWORD v9[2] = 0;
  *uint64_t v9 = off_1022B6DF0;
  *((_DWORD *)v9 + 6) = 31337;
  a1[39] = v9 + 3;
  a1[40] = v9;
  uint64_t v10 = [[CLBatchedSensorSubscriptionAdapter alloc] initWithBatchedSensorSubscription:a1];
  *uint64_t v8 = v10;
  [(CLBatchedSensorSubscriptionAdapter *)v10 setValid:1];
  id v11 = [[[a3 vendor] proxyForService:@"CLBatchedAccelerometerService"];
  a1[7] = v11;
  [v11 registerDelegate:a1[6] inSilo:objc_msgSend(a3, "silo")];
  id v12 = [[[a3 vendor] proxyForService:@"CLBatchedDeviceMotionService"]
  a1[8] = v12;
  [v12 registerDelegate:a1[6] inSilo:[a3 silo]];
  id v13 = [[objc_msgSend(a3, "vendor") proxyForService:@"CLMotionStateMediator"];
  a1[9] = v13;
  [v13 registerDelegate:a1[6] inSilo:[a3 silo]];
  long long v14 = (void *)a1[9];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1012CAEF4;
  _DWORD v16[3] = &unk_10231E608;
  v16[4] = a1;
  [v14 currentWorkoutActiveStateWithReply:v16];
  return a1;
}

void sub_1012CAEB8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 303) < 0) {
    operator delete(*v2);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_1012CAEF4(uint64_t a1, int a2, long long *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a4 + 16))(&v22, a4);
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  uint64_t v7 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = &v23;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 67240450;
    int v19 = a2;
    __int16 v20 = 2082;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[subscription] received initial workout state of %{public}d, id %{public}s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLBatchedSensorSubscription::CLBatchedSensorSubscription(Delegate *, id<CLIntersiloUniverse>, CLClientManagerAuthorizationContext *, CLClientKeyPath *)_block_invoke", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  *(unsigned char *)(v6 + 272) = 1;
  *(_DWORD *)(v6 + 96) = a2;
  long long v9 = *a3;
  long long v10 = a3[1];
  *(_OWORD *)(v6 + 136) = a3[2];
  *(_OWORD *)(v6 + 120) = v10;
  *(_OWORD *)(v6 + 104) = v9;
  long long v11 = a3[3];
  long long v12 = a3[4];
  long long v13 = a3[5];
  *(_OWORD *)(v6 + 200) = a3[6];
  *(_OWORD *)(v6 + 184) = v13;
  *(_OWORD *)(v6 + 168) = v12;
  *(_OWORD *)(v6 + 152) = v11;
  long long v14 = a3[7];
  long long v15 = a3[8];
  long long v16 = a3[9];
  *(void *)(v6 + 264) = *((void *)a3 + 20);
  *(_OWORD *)(v6 + 248) = v16;
  *(_OWORD *)(v6 + 232) = v15;
  *(_OWORD *)(v6 + 216) = v14;
  std::string::operator=((std::string *)(v6 + 280), &v23);
  sub_1012CB1C0(v6);
  [*(id *)(v6 + 72) registerForWorkoutSessionUpdates:*(void *)(v6 + 48)];
  sub_100663B8C(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1012CB1A0(_Unwind_Exception *a1)
{
  sub_10069592C(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1012CB1C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 272))
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    uint64_t v2 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = (void *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      sub_1012CC59C(a1, (uint64_t)__p);
      if (v29 >= 0) {
        char v4 = __p;
      }
      else {
        char v4 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v3;
      __int16 v21 = 2082;
      uint64_t v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[subscription] handling first workout with workout app id %{public}s, client id %{public}s", buf, 0x16u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10231E710);
      }
      uint64_t v7 = (void *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      sub_1012CC59C(a1, (uint64_t)buf);
      if (v23 >= 0) {
        uint64_t v8 = buf;
      }
      else {
        uint64_t v8 = *(unsigned char **)buf;
      }
      int v24 = 136446466;
      int v25 = v7;
      __int16 v26 = 2082;
      int v27 = v8;
      long long v9 = (char *)_os_log_send_and_compose_impl();
      if (v23 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleFirstWorkoutNotification()", "%s\n", v9);
      if (v9 != (char *)__p) {
        free(v9);
      }
    }
    sub_100134750(v18, "kCLConnectionMessageBatchedAccelerometer");
    if (byte_102486AFF < 0)
    {
      sub_1000DC48C(__dst, (void *)xmmword_102486AE8, *((unint64_t *)&xmmword_102486AE8 + 1));
    }
    else
    {
      *(_OWORD *)std::string __dst = xmmword_102486AE8;
      uint64_t v16 = unk_102486AF8;
    }
    int v17 = dword_102486B00;
    sub_1012CD758(a1, (uint64_t)v18, __dst, *(void **)(a1 + 56));
    if (SHIBYTE(v16) < 0) {
      operator delete(__dst[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_100134750(v13, "kCLConnectionMessageBatchedDeviceMotion");
    if (byte_102486B1F < 0)
    {
      sub_1000DC48C(v10, (void *)xmmword_102486B08, *((unint64_t *)&xmmword_102486B08 + 1));
    }
    else
    {
      *(_OWORD *)long long v10 = xmmword_102486B08;
      uint64_t v11 = unk_102486B18;
    }
    int v12 = dword_102486B20;
    sub_1012CD758(a1, (uint64_t)v13, v10, *(void **)(a1 + 64));
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    double v5 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[subscription] we should know workout state here", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10231E710);
      }
      *(_WORD *)long long buf = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBatchedSensorSubscription::handleFirstWorkoutNotification()", "%s\n", v6);
      if (v6 != (char *)__p) {
        free(v6);
      }
    }
  }
}

void sub_1012CB65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012CB6CC(uint64_t a1)
{
  *(void *)a1 = off_10231E5E8;
  [*(id *)(a1 + 56) unregisterForData:*(void *)(a1 + 48)];

  *(void *)(a1 + 56) = 0;
  [*(id *)(a1 + 64) unregisterForData:*(void *)(a1 + 48)];

  *(void *)(a1 + 64) = 0;
  [*(id *)(a1 + 72) unregisterForWorkoutSessionUpdates:*(void *)(a1 + 48)];

  *(void *)(a1 + 72) = 0;
  if (objc_opt_class())
  {

    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 80) = 0;
  }
  [*(id *)(a1 + 48) setValid:0];

  *(void *)(a1 + 48) = 0;
  sub_10012E38C((void *)(a1 + 304));
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }

  return sub_100029A7C(a1);
}

void sub_1012CB7C4(uint64_t a1)
{
  sub_1012CB6CC(a1);

  operator delete();
}

void *sub_1012CB7FC@<X0>(uint64_t a1@<X8>)
{
  v6[0] = off_10231E740;
  v6[1] = sub_1012CBA4C;
  __n128 v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v7, "kCLConnectionMessageBatchedSensorAvailabilityUpdate");
  sub_100BFD1D0((uint64_t)&v8, (uint64_t)v6);
  v5[0] = off_10231E740;
  v5[1] = sub_1012CBCB0;
  _DWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v9, "kCLConnectionMessageBatchedAccelerometer");
  sub_100BFD1D0((uint64_t)&v10, (uint64_t)v5);
  v4[0] = off_10231E740;
  v4[1] = sub_1012CC104;
  v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v11, "kCLConnectionMessageBatchedDeviceMotion");
  sub_100BFD1D0((uint64_t)v12, (uint64_t)v4);
  sub_1012CEE54(a1, (unsigned __int8 *)v7, 3);
  for (uint64_t i = 0; i != -21; i -= 7)
  {
    sub_100BFD6EC(&v12[i * 8]);
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  sub_100BFD6EC(v4);
  sub_100BFD6EC(v5);
  return sub_100BFD6EC(v6);
}

void sub_1012CB9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  for (uint64_t i = 112; i != -56; i -= 56)
    sub_1012CC560((uint64_t)(&a21 + i));
  sub_100BFD6EC(&a9);
  sub_100BFD6EC(&a13);
  sub_100BFD6EC(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1012CBA4C(uint64_t a1, int a2)
{
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  char v4 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    sub_1012CC59C(a1, (uint64_t)&__p);
    double v5 = (v15 & 0x80000000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 67240706;
    int v17 = a2;
    __int16 v18 = 2082;
    char v19 = v5;
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[subscription] subscription changed for availability updates %{public}d, %{public}s, %{public}p", buf, 0x1Cu);
    if (SBYTE3(v15) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    sub_1012CC59C(a1, (uint64_t)v9);
    if (v10 >= 0) {
      uint64_t v7 = v9;
    }
    else {
      uint64_t v7 = (void **)v9[0];
    }
    LODWORD(__p) = 67240706;
    HIDWORD(__p) = a2;
    __int16 v12 = 2082;
    long long v13 = v7;
    __int16 v14 = 2050;
    uint64_t v15 = a1;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleRequestAvailabilityUpdate(BOOL, NSDictionary *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_10009C834(a1);
}

void sub_1012CBCB0(uint64_t a1, int a2, uint64_t a3)
{
  if (byte_102486AFF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_102486AE8, *((unint64_t *)&xmmword_102486AE8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_102486AE8;
    uint64_t v20 = unk_102486AF8;
  }
  int v21 = dword_102486B00;
  uint64_t v5 = sub_1012CC7C0(a1, 0, a3, (uint64_t *)__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (v5 == 100)
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    uint64_t v6 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = byte_102486AFF >= 0 ? &xmmword_102486AE8 : (long long *)xmmword_102486AE8;
      sub_1012CC59C(a1, (uint64_t)v22);
      uint64_t v8 = SBYTE3(v26) >= 0 ? v22 : *(unsigned char **)v22;
      *(_DWORD *)long long buf = 136446978;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v30 = 1026;
      int v31 = a2;
      __int16 v32 = 2082;
      uint64_t v33 = v8;
      __int16 v34 = 2050;
      uint64_t v35 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] subscription changed %{public}d, %{public}s, %{public}p", buf, 0x26u);
      if (SBYTE3(v26) < 0) {
        operator delete(*(void **)v22);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10231E710);
      }
      if (byte_102486AFF >= 0) {
        long long v9 = &xmmword_102486AE8;
      }
      else {
        long long v9 = (long long *)xmmword_102486AE8;
      }
      sub_1012CC59C(a1, (uint64_t)v17);
      if (v18 >= 0) {
        char v10 = v17;
      }
      else {
        char v10 = (void **)v17[0];
      }
      *(_DWORD *)uint64_t v22 = 136446978;
      *(void *)&v22[4] = v9;
      __int16 v23 = 1026;
      int v24 = a2;
      __int16 v25 = 2082;
      __int16 v26 = v10;
      __int16 v27 = 2050;
      uint64_t v28 = a1;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleRequestBatchedAccelerometer(BOOL, NSDictionary *)", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
    sub_10009C834(a1);
    if (a2)
    {
      sub_100134750(v15, "kCLConnectionMessageBatchedAccelerometer");
      if (byte_102486AFF < 0)
      {
        sub_1000DC48C(__dst, (void *)xmmword_102486AE8, *((unint64_t *)&xmmword_102486AE8 + 1));
      }
      else
      {
        *(_OWORD *)std::string __dst = xmmword_102486AE8;
        uint64_t v13 = unk_102486AF8;
      }
      int v14 = dword_102486B00;
      sub_1012CCB2C(a1, (uint64_t *)v15, (long long *)__dst);
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    else
    {
      [*(id *)(a1 + 56) unregisterForData:*(void *)(a1 + 48)];
    }
  }
  else
  {
    sub_10009C834(a1);
    [*(id *)(a1 + 56) unregisterForData:*(void *)(a1 + 48)];
    uint64_t v36 = CMErrorMessage;
    int v37 = +[NSNumber numberWithUnsignedInt:v5];
    *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
    sub_1012CCA98(a1);
  }
}

void sub_1012CC0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CC104(uint64_t a1, int a2, uint64_t a3)
{
  if (byte_102486B1F < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_102486B08, *((unint64_t *)&xmmword_102486B08 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_102486B08;
    uint64_t v20 = unk_102486B18;
  }
  int v21 = dword_102486B20;
  uint64_t v5 = sub_1012CC7C0(a1, 0, a3, (uint64_t *)__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (v5 == 100)
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    uint64_t v6 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = byte_102486B1F >= 0 ? &xmmword_102486B08 : (long long *)xmmword_102486B08;
      sub_1012CC59C(a1, (uint64_t)v22);
      uint64_t v8 = SBYTE3(v26) >= 0 ? v22 : *(unsigned char **)v22;
      *(_DWORD *)long long buf = 136446978;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v30 = 1026;
      int v31 = a2;
      __int16 v32 = 2082;
      uint64_t v33 = v8;
      __int16 v34 = 2050;
      uint64_t v35 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] subscription changed %{public}d, %{public}s, %{public}p", buf, 0x26u);
      if (SBYTE3(v26) < 0) {
        operator delete(*(void **)v22);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10231E710);
      }
      if (byte_102486B1F >= 0) {
        long long v9 = &xmmword_102486B08;
      }
      else {
        long long v9 = (long long *)xmmword_102486B08;
      }
      sub_1012CC59C(a1, (uint64_t)v17);
      if (v18 >= 0) {
        char v10 = v17;
      }
      else {
        char v10 = (void **)v17[0];
      }
      *(_DWORD *)uint64_t v22 = 136446978;
      *(void *)&v22[4] = v9;
      __int16 v23 = 1026;
      int v24 = a2;
      __int16 v25 = 2082;
      __int16 v26 = v10;
      __int16 v27 = 2050;
      uint64_t v28 = a1;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleRequestBatchedDeviceMotion(BOOL, NSDictionary *)", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
    sub_10009C834(a1);
    if (a2)
    {
      sub_100134750(v15, "kCLConnectionMessageBatchedDeviceMotion");
      if (byte_102486B1F < 0)
      {
        sub_1000DC48C(__dst, (void *)xmmword_102486B08, *((unint64_t *)&xmmword_102486B08 + 1));
      }
      else
      {
        *(_OWORD *)std::string __dst = xmmword_102486B08;
        uint64_t v13 = unk_102486B18;
      }
      int v14 = dword_102486B20;
      sub_1012CCB2C(a1, (uint64_t *)v15, (long long *)__dst);
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    else
    {
      [*(id *)(a1 + 64) unregisterForData:*(void *)(a1 + 48)];
    }
  }
  else
  {
    sub_10009C834(a1);
    [*(id *)(a1 + 64) unregisterForData:*(void *)(a1 + 48)];
    uint64_t v36 = CMErrorMessage;
    int v37 = +[NSNumber numberWithUnsignedInt:v5];
    *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
    sub_1012CCA98(a1);
  }
}

void sub_1012CC50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012CC560(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1012CC59C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *(void **)(a1 + 24);
  if (v4)
  {
    [v4 clientName];
  }
  else
  {
    uint64_t v18 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    *(_OWORD *)uint64_t v15 = 0u;
    long long v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)__int16 v12 = 0u;
    *(_OWORD *)long long v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
  }
  sub_1000A84C8((uint64_t)v8);
  if (SHIBYTE(v14[3]) >= 0) {
    uint64_t v5 = (void *)HIBYTE(v14[3]);
  }
  else {
    uint64_t v5 = v14[2];
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14[3]) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0)
  {
    operator delete(v8[0]);
    if (v5) {
      goto LABEL_21;
    }
LABEL_24:
    if (objc_msgSend(*(id *)(a1 + 24), "executablePath", v8[0], v8[1], v9[0])) {
      uint64_t v7 = (char *)[objc_msgSend(*(id *)(a1 + 24), "executablePath") UTF8String];
    }
    else {
      uint64_t v7 = "";
    }
    sub_100134750((void *)a2, v7);
    return;
  }
  if (!v5) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    [v6 clientName];
  }
  else
  {
    uint64_t v18 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    *(_OWORD *)uint64_t v15 = 0u;
    long long v13 = 0u;
    memset(v14, 0, sizeof(v14));
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)__int16 v12 = 0u;
    *(_OWORD *)long long v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
  }
  sub_1000A84C8((uint64_t)v8);
  if (SHIBYTE(v14[3]) < 0)
  {
    sub_1000DC48C((unsigned char *)a2, v14[1], (unint64_t)v14[2]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)&v14[1];
    *(void **)(a2 + 16) = v14[3];
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14[3]) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0) {
    operator delete(v8[0]);
  }
}

void sub_1012CC7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1012CC7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (sub_1010A4D14(a1)) {
    return 100;
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  uint64_t v7 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a4;
    if (*((char *)a4 + 23) < 0) {
      uint64_t v8 = (uint64_t *)*a4;
    }
    sub_1012CC59C(a1, (uint64_t)__p);
    if (v17 >= 0) {
      long long v9 = __p;
    }
    else {
      long long v9 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136446722;
    uint64_t v20 = v8;
    __int16 v21 = 2082;
    uint64_t v22 = v9;
    __int16 v23 = 2050;
    uint64_t v24 = a1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] error, not authorized for motion activity %{public}s, %{public}p", buf, 0x20u);
    if (SHIBYTE(v17) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    if (*((char *)a4 + 23) < 0) {
      a4 = (uint64_t *)*a4;
    }
    sub_1012CC59C(a1, (uint64_t)v12);
    if (v13 >= 0) {
      long long v10 = v12;
    }
    else {
      long long v10 = (void **)v12[0];
    }
    *(_DWORD *)std::string __p = 136446722;
    *(void *)&__p[4] = a4;
    __int16 v15 = 2082;
    char v16 = v10;
    __int16 v17 = 2050;
    uint64_t v18 = a1;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLBatchedSensorSubscription::validateBatchedSensorRequest(BOOL, NSDictionary *, ConnectionInfo)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return 105;
}

void *sub_1012CCA40(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  return __dst;
}

void sub_1012CCA98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(off_10231E7C0, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1012CCB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CCB2C(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (objc_opt_class())
  {
    if (!*(void *)(a1 + 88))
    {
      *(void *)(a1 + 80) = objc_opt_new();
      *(void *)(a1 + 88) = [objc_alloc((Class)_HKWorkoutObserver) initWithHealthStore:*(void *)(a1 + 80)];
    }
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x3052000000;
    _DWORD v16[3] = sub_100177F60;
    v16[4] = sub_1001776D0;
    id v17 = 0;
    id v6 = objc_alloc((Class)NSString);
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    id v17 = [v6 initWithString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)];
    id v7 = [*(id *)(a1 + 8) silo];
    uint64_t v9 = *(void *)(a1 + 312);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 320);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000DB0A0(v8);
    }
    long long v10 = *(void **)(a1 + 88);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768;
    _OWORD v11[2] = sub_1012CDEE0;
    void v11[3] = &unk_10231E6B0;
    v11[6] = a1;
    v11[7] = v9;
    void v11[4] = v7;
    __int16 v12 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v11[5] = v16;
    if (*((char *)a3 + 23) < 0)
    {
      sub_1000DC48C(&__p, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long __p = *a3;
      uint64_t v14 = *((void *)a3 + 2);
    }
    int v15 = *((_DWORD *)a3 + 6);
    [v10 currentWorkoutSnapshotWithCompletion:v11];
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    _Block_object_dispose(v16, 8);
  }
}

void sub_1012CCD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  _Block_object_dispose((const void *)(v25 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1012CCD78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = sub_10012E364(a1);
  if (result)
  {
    if (!*(unsigned char *)(a1 + 272)) {
      return 0;
    }
    if (sub_1012CD658(a1)) {
      return 1;
    }
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    id v6 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
    {
      id v7 = a3;
      if (*((char *)a3 + 23) < 0) {
        id v7 = (uint64_t *)*a3;
      }
      uint64_t v8 = (void *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      sub_1012CC59C(a1, (uint64_t)__p);
      if (v18 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136446722;
      __int16 v21 = v7;
      __int16 v22 = 2082;
      __int16 v23 = v8;
      __int16 v24 = 2082;
      uint64_t v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[subscription-%{public}s] not in applicable workout, workout id %{public}s, client id %{public}s", buf, 0x20u);
      if (SHIBYTE(v18) < 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10231E710);
      }
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t *)*a3;
      }
      long long v10 = (void *)(a1 + 280);
      if (*(char *)(a1 + 303) < 0) {
        long long v10 = (void *)*v10;
      }
      sub_1012CC59C(a1, (uint64_t)v13);
      if (v14 >= 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (void **)v13[0];
      }
      *(_DWORD *)long long __p = 136446722;
      *(void *)&__p[4] = a3;
      __int16 v16 = 2082;
      id v17 = v10;
      __int16 v18 = 2082;
      char v19 = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBatchedSensorSubscription::shouldSendBatchedData(std::string, ConnectionInfo)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return 0;
    }
  }
  return result;
}

xpc_object_t sub_1012CD028(long long **a1, uint64_t *a2)
{
  unint64_t v4 = (unint64_t)((char *)a1[1] - (char *)*a1) >> 2;
  uint64_t v5 = malloc_type_malloc(4 * (int)v4, 0x24EF5720uLL);
  id v6 = dispatch_data_create(v5, 4 * (int)v4, 0, _dispatch_data_destructor_free);
  xpc_object_t v7 = xpc_data_create_with_dispatch_data(v6);

  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  while (v8 != v9)
  {
    long long v10 = *v8;
    void v5[4] = *((_DWORD *)v8 + 4);
    *(_OWORD *)uint64_t v5 = v10;
    v5 += 5;
    uint64_t v8 = (long long *)((char *)v8 + 20);
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  uint64_t v11 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v12 = a2;
    if (*((char *)a2 + 23) < 0) {
      __int16 v12 = (uint64_t *)*a2;
    }
    *(_DWORD *)long long buf = 136446722;
    __int16 v16 = v12;
    __int16 v17 = 1026;
    int v18 = 4 * v4;
    __int16 v19 = 1024;
    int v20 = -858993459 * v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] created data size %{public}d num %d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    char v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static xpc_object_t CLBatchedSensorSubscription::createXpcPayload(const BufferT &, ConnectionInfo) [T = CMAccel800, BufferT = std::vector<CMAccel800>]", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return v7;
}

xpc_object_t sub_1012CD2B0(const char *a1, void *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  xpc_object_t v3 = xpc_string_create(a1);
  *(_OWORD *)keys = *(_OWORD *)off_10231E628;
  v6[0] = v3;
  v6[1] = a2;
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)keys, v6, 2uLL);
  if (v3) {
    xpc_release(v3);
  }
  return v4;
}

void sub_1012CD350(uint64_t a1)
{
  sub_1012CF29C(&v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1012CD3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_1012CD3C8(long long **a1, uint64_t *a2)
{
  unint64_t v4 = (unint64_t)((char *)a1[1] - (char *)*a1) >> 1;
  uint64_t v5 = malloc_type_malloc(2 * (int)v4, 0x24EF5720uLL);
  id v6 = dispatch_data_create(v5, 2 * (int)v4, 0, _dispatch_data_destructor_free);
  xpc_object_t v7 = xpc_data_create_with_dispatch_data(v6);

  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  while (v8 != v9)
  {
    long long v10 = *v8;
    long long v11 = v8[1];
    long long v12 = v8[2];
    *((_WORD *)v5 + 24) = *((_WORD *)v8 + 24);
    v5[1] = v11;
    _DWORD v5[2] = v12;
    *uint64_t v5 = v10;
    uint64_t v5 = (_OWORD *)((char *)v5 + 50);
    uint64_t v8 = (long long *)((char *)v8 + 50);
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  char v13 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    char v14 = a2;
    if (*((char *)a2 + 23) < 0) {
      char v14 = (uint64_t *)*a2;
    }
    *(_DWORD *)long long buf = 136446722;
    int v18 = v14;
    __int16 v19 = 1026;
    int v20 = 2 * v4;
    __int16 v21 = 1024;
    int v22 = -1030792151 * v4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] created data size %{public}d num %d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static xpc_object_t CLBatchedSensorSubscription::createXpcPayload(const BufferT &, ConnectionInfo) [T = CMSPU::Safety::DMSample, BufferT = std::vector<CMSPU::Safety::DMSample>]", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return v7;
}

BOOL sub_1012CD658(uint64_t a1)
{
  sub_1012CC59C(a1, (uint64_t)__p);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 303);
  if ((v2 & 0x80u) == 0) {
    xpc_object_t v3 = (void *)*(unsigned __int8 *)(a1 + 303);
  }
  else {
    xpc_object_t v3 = *(void **)(a1 + 288);
  }
  unint64_t v4 = v18;
  int v5 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != (void *)v4)
  {
    BOOL v15 = 0;
    if (((char)v18 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  id v6 = (const void **)(a1 + 280);
  if ((v18 & 0x80u) == 0) {
    xpc_object_t v7 = __p;
  }
  else {
    xpc_object_t v7 = (void **)__p[0];
  }
  if ((v2 & 0x80) != 0)
  {
    BOOL v15 = memcmp(*v6, v7, *(void *)(a1 + 288)) == 0;
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 303))
  {
    uint64_t v8 = v2 - 1;
    do
    {
      int v10 = *(unsigned __int8 *)v6;
      id v6 = (const void **)((char *)v6 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v7;
      xpc_object_t v7 = (void **)((char *)v7 + 1);
      int v11 = v12;
      BOOL v14 = v8-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  BOOL v15 = 1;
  if ((char)v18 < 0) {
LABEL_23:
  }
    operator delete(__p[0]);
LABEL_24:
  if (*(_DWORD *)(a1 + 96) != 1) {
    return 0;
  }
  if (*(void *)(a1 + 264)) {
    return 0;
  }
  return v15;
}

id sub_1012CD758(uint64_t a1, uint64_t a2, void **a3, void *a4)
{
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  uint64_t v8 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *((char *)a3 + 23);
    int v10 = a3;
    if (v9 < 0) {
      int v10 = *a3;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1000DC48C(__dst, *(void **)a2, *(void *)(a2 + 8));
      if ((*((unsigned char *)a3 + 23) & 0x80) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)a2;
      uint64_t v34 = *(void *)(a2 + 16);
      if ((v9 & 0x80) == 0)
      {
LABEL_8:
        *(_OWORD *)long long __p = *(_OWORD *)a3;
        int v31 = a3[2];
LABEL_11:
        int v32 = *((_DWORD *)a3 + 6);
        int v11 = sub_1012CCD78(a1, (uint64_t)__dst, (uint64_t *)__p);
        int v12 = sub_10012E364(a1);
        BOOL v13 = sub_1012CD658(a1);
        *(_DWORD *)long long buf = 136446978;
        int v44 = v10;
        __int16 v45 = 1026;
        int v46 = v11;
        __int16 v47 = 1026;
        int v48 = v12;
        __int16 v49 = 1026;
        BOOL v50 = v13;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] toggling stream, should send data %{public}d, interested, %{public}d, in workout %{public}d", buf, 0x1Eu);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v34) < 0) {
          operator delete(__dst[0]);
        }
        goto LABEL_15;
      }
    }
    sub_1000DC48C(__p, *a3, (unint64_t)a3[1]);
    goto LABEL_11;
  }
LABEL_15:
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    __int16 v16 = a3;
    if (*((char *)a3 + 23) < 0) {
      __int16 v16 = *a3;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1000DC48C(v28, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)a2;
      uint64_t v29 = *(void *)(a2 + 16);
    }
    sub_1012CCA40(v26, (long long *)a3);
    int v17 = sub_1012CCD78(a1, (uint64_t)v28, (uint64_t *)v26);
    int v18 = sub_10012E364(a1);
    BOOL v19 = sub_1012CD658(a1);
    int v35 = 136446978;
    uint64_t v36 = v16;
    __int16 v37 = 1026;
    int v38 = v17;
    __int16 v39 = 1026;
    int v40 = v18;
    __int16 v41 = 1026;
    BOOL v42 = v19;
    int v20 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::toggleStreamAsAllowed(std::string, ConnectionInfo, id<CLBatchedSensorServiceProtocol>)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (sub_10012E364(a1))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1000DC48C(v24, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__int16 v24 = *(_OWORD *)a2;
      uint64_t v25 = *(void *)(a2 + 16);
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_1000DC48C(v21, *a3, (unint64_t)a3[1]);
    }
    else
    {
      *(_OWORD *)__int16 v21 = *(_OWORD *)a3;
      int v22 = a3[2];
    }
    int v23 = *((_DWORD *)a3 + 6);
    int v14 = sub_1012CCD78(a1, (uint64_t)v24, (uint64_t *)v21);
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v25) < 0)
    {
      operator delete(v24[0]);
      if (v14) {
        return [a4 registerForData:*(void *)(a1 + 48)];
      }
    }
    else if (v14)
    {
      return [a4 registerForData:*(void *)(a1 + 48)];
    }
  }
  return [a4 unregisterForData:*(void *)(a1 + 48)];
}

void sub_1012CDB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CDBFC(uint64_t a1, uint64_t a2)
{
  sub_100134750(__p, "kCLConnectionMessageBatchedSensorAvailabilityUpdate");
  char v4 = sub_10012E364(a1);
  char v5 = v4;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v5 & 1) == 0) {
      return;
    }
  }
  else if ((v4 & 1) == 0)
  {
    return;
  }
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  id v6 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[subscription] sending availability update %{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    int v10 = 67240192;
    int v11 = a2;
    xpc_object_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::sendAvailabilityUpdate(BOOL)", "%s\n", v7);
    if (v7 != (char *)__p) {
      free(v7);
    }
  }
  uint64_t v8 = CMBatchedSensorAvailable;
  int v9 = +[NSNumber numberWithBool:a2];
  __p[0] = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  sub_1012CDE5C(a1);
}

void sub_1012CDE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CDE5C(uint64_t a1)
{
  sub_1000E9420(&off_10231E7C8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1012CDEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CDEE0(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  xpc_object_t v6[2] = sub_1012CE004;
  v6[3] = &unk_10231E678;
  long long v7 = *(_OWORD *)(a1 + 48);
  char v4 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  void v6[4] = a2;
  void v6[5] = v5;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 88);
  }
  int v11 = *(_DWORD *)(a1 + 96);
  [v3 async:v6];
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1012CDFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CE004(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v15 = 0;
  __int16 v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  long long v7 = sub_1012CE2DC;
  uint64_t v8 = &unk_10231E640;
  uint64_t v11 = v2;
  long long v9 = *(_OWORD *)(a1 + 32);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 88);
  }
  int v14 = *(_DWORD *)(a1 + 96);
  uint64_t v10 = &v15;
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3 && *(void *)(v3 + 8) != -1) {
    v7((uint64_t)v6);
  }
  if (!*((unsigned char *)v16 + 24))
  {
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    char v4 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning, subscription expired before we received a reply for workout state", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10231E710);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleSensorRequest(std::string, ConnectionInfo)_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = 0;
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  _Block_object_dispose(&v15, 8);
}

void sub_1012CE2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1012CE2DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  sub_100134750(&v58, (char *)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) UTF8String]);
  uint64_t v3 = *(void **)(a1 + 32);
  if (!v3)
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
    goto LABEL_33;
  }
  BOOL v4 = [v3 sessionState] != (id)1
    && [*(id *)(a1 + 32) sessionState] != (id)3
    && [*(id *)(a1 + 32) sessionState] != (id)6;
  if (![*(id *)(a1 + 32) applicationIdentifier])
  {
    BOOL v5 = 0;
    goto LABEL_33;
  }
  sub_1012CC59C(v2, (uint64_t)__s1);
  sub_100134750(__p, [[*(id *)(a1 + 32) applicationIdentifier] UTF8String]);
  char v6 = HIBYTE(v74);
  if (v74 >= 0) {
    uint64_t v7 = HIBYTE(v74);
  }
  else {
    uint64_t v7 = *(void *)&__s1[8];
  }
  uint64_t v8 = HIBYTE(v63);
  int v9 = SHIBYTE(v63);
  if (v63 < 0) {
    uint64_t v8 = *(void *)&__p[8];
  }
  if (v7 != v8)
  {
    BOOL v5 = 0;
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  if (v63 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)__p;
  }
  if (SHIBYTE(v74) < 0)
  {
    BOOL v5 = memcmp(*(const void **)__s1, v10, *(size_t *)&__s1[8]) == 0;
    goto LABEL_31;
  }
  if (HIBYTE(v74))
  {
    uint64_t v11 = HIBYTE(v74) - 1;
    int v12 = __s1;
    do
    {
      int v14 = *v12++;
      int v13 = v14;
      int v16 = *v10++;
      int v15 = v16;
      BOOL v18 = v11-- != 0;
      BOOL v5 = v13 == v15;
    }
    while (v13 == v15 && v18);
LABEL_31:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_28:
    operator delete(*(void **)__p);
    if ((v74 & 0x8000u) == 0) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  BOOL v5 = 1;
  if (SHIBYTE(v63) < 0) {
    goto LABEL_28;
  }
LABEL_32:
  if (v6 < 0) {
LABEL_29:
  }
    operator delete(*(void **)__s1);
LABEL_33:
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_10231E710);
  }
  BOOL v19 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      int v20 = (void *)*v20;
    }
    uint64_t v21 = *(void *)(a1 + 32);
    sub_1012CC59C(v2, (uint64_t)__p);
    if (v63 >= 0) {
      int v22 = __p;
    }
    else {
      int v22 = *(unsigned char **)__p;
    }
    int v23 = *(void **)(a1 + 32);
    if (v23) {
      CFStringRef v24 = (const __CFString *)[v23 applicationIdentifier];
    }
    else {
      CFStringRef v24 = &stru_10234F018;
    }
    BOOL v25 = sub_1012CD658(v2);
    *(_DWORD *)__s1 = 136447746;
    *(void *)&__s1[4] = v20;
    *(_WORD *)&__s1[12] = 2114;
    *(void *)&__s1[14] = v21;
    __int16 v74 = 1026;
    BOOL v75 = v4;
    __int16 v76 = 1026;
    BOOL v77 = v5;
    __int16 v78 = 2082;
    unsigned int v79 = v22;
    __int16 v80 = 2114;
    CFStringRef v81 = v24;
    __int16 v82 = 1026;
    BOOL v83 = v25;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[subscription-%{public}s] received current snapshot from HK %{public}@, inSession, %{public}d, appIdMatches, %{public}d, clientId, %{public}s, workout appId, %{public}@, internal workout %{public}d", __s1, 0x3Cu);
    if (SHIBYTE(v63) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__s1, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10231E710);
    }
    __int16 v39 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      __int16 v39 = (void *)*v39;
    }
    uint64_t v40 = *(void *)(a1 + 32);
    sub_1012CC59C(v2, (uint64_t)v56);
    if (v57 >= 0) {
      __int16 v41 = v56;
    }
    else {
      __int16 v41 = (void **)v56[0];
    }
    BOOL v42 = *(void **)(a1 + 32);
    if (v42) {
      CFStringRef v43 = (const __CFString *)[v42 applicationIdentifier];
    }
    else {
      CFStringRef v43 = &stru_10234F018;
    }
    BOOL v44 = sub_1012CD658(v2);
    *(_DWORD *)long long __p = 136447746;
    *(void *)&__p[4] = v39;
    *(_WORD *)&unsigned char __p[12] = 2114;
    *(void *)&__p[14] = v40;
    __int16 v63 = 1026;
    BOOL v64 = v4;
    __int16 v65 = 1026;
    BOOL v66 = v5;
    __int16 v67 = 2082;
    int v68 = v41;
    __int16 v69 = 2114;
    CFStringRef v70 = v43;
    __int16 v71 = 1026;
    BOOL v72 = v44;
    __int16 v45 = (char *)_os_log_send_and_compose_impl();
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBatchedSensorSubscription::handleSensorRequest(std::string, ConnectionInfo)_block_invoke", "%s\n", v45);
    if (v45 != __s1) {
      free(v45);
    }
  }
  if (sub_10012E364(v2) && (!v4 || !v5) && !sub_1012CD658(v2))
  {
    uint64_t v60 = CMErrorMessage;
    uint64_t v61 = &off_102394508;
    *(void *)__s1 = +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
    sub_1012CCA98(v2);
  }
  __int16 v26 = (const void **)(a1 + 64);
  uint64_t v27 = *(unsigned __int8 *)(a1 + 87);
  int v28 = *(unsigned __int8 *)(a1 + 87);
  size_t v29 = *(void *)(a1 + 72);
  if ((v27 & 0x80u) == 0) {
    uint64_t v30 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v30 = *(void *)(a1 + 72);
  }
  uint64_t v31 = *((void *)&xmmword_102486AE8 + 1);
  if (byte_102486AFF >= 0) {
    uint64_t v31 = byte_102486AFF;
  }
  if (v30 != v31) {
    goto LABEL_67;
  }
  if (byte_102486AFF >= 0) {
    int v32 = &xmmword_102486AE8;
  }
  else {
    int v32 = (long long *)xmmword_102486AE8;
  }
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(*v26, v32, *(void *)(a1 + 72))) {
      goto LABEL_67;
    }
LABEL_79:
    if (SHIBYTE(v59) < 0)
    {
      sub_1000DC48C(&__dst, (void *)v58, *((unint64_t *)&v58 + 1));
      if ((*(unsigned char *)(a1 + 87) & 0x80) == 0) {
        goto LABEL_81;
      }
    }
    else
    {
      long long __dst = v58;
      uint64_t v55 = v59;
      if ((v28 & 0x80) == 0)
      {
LABEL_81:
        *(_OWORD *)__int16 v51 = *(_OWORD *)v26;
        uint64_t v52 = *(void *)(a1 + 80);
LABEL_88:
        int v53 = *(_DWORD *)(a1 + 88);
        sub_1012CD758(v2, (uint64_t)&__dst, v51, *(void **)(v2 + 56));
        if (SHIBYTE(v52) < 0) {
          operator delete(v51[0]);
        }
        if ((SHIBYTE(v55) & 0x80000000) == 0) {
          goto LABEL_99;
        }
        p_dst = (void **)&__dst;
        goto LABEL_98;
      }
    }
    sub_1000DC48C(v51, *(void **)(a1 + 64), *(void *)(a1 + 72));
    goto LABEL_88;
  }
  if (!*(unsigned char *)(a1 + 87)) {
    goto LABEL_79;
  }
  uint64_t v33 = (unsigned __int8 *)(a1 + 64);
  uint64_t v34 = *(unsigned __int8 *)(a1 + 87);
  while (*v33 == *(unsigned __int8 *)v32)
  {
    ++v33;
    int v32 = (long long *)((char *)v32 + 1);
    if (!--v34) {
      goto LABEL_79;
    }
  }
LABEL_67:
  uint64_t v35 = *((void *)&xmmword_102486B08 + 1);
  if (byte_102486B1F >= 0) {
    uint64_t v35 = byte_102486B1F;
  }
  if (v30 != v35) {
    goto LABEL_99;
  }
  if (byte_102486B1F >= 0) {
    uint64_t v36 = &xmmword_102486B08;
  }
  else {
    uint64_t v36 = (long long *)xmmword_102486B08;
  }
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(*v26, v36, v29)) {
      goto LABEL_99;
    }
LABEL_83:
    if (SHIBYTE(v59) < 0)
    {
      sub_1000DC48C(&v49, (void *)v58, *((unint64_t *)&v58 + 1));
      if ((*(unsigned char *)(a1 + 87) & 0x80) == 0) {
        goto LABEL_85;
      }
    }
    else
    {
      long long v49 = v58;
      uint64_t v50 = v59;
      if ((v28 & 0x80) == 0)
      {
LABEL_85:
        *(_OWORD *)int v46 = *(_OWORD *)v26;
        uint64_t v47 = *(void *)(a1 + 80);
LABEL_94:
        int v48 = *(_DWORD *)(a1 + 88);
        sub_1012CD758(v2, (uint64_t)&v49, v46, *(void **)(v2 + 64));
        if (SHIBYTE(v47) < 0) {
          operator delete(v46[0]);
        }
        if ((SHIBYTE(v50) & 0x80000000) == 0) {
          goto LABEL_99;
        }
        p_dst = (void **)&v49;
LABEL_98:
        operator delete(*p_dst);
        goto LABEL_99;
      }
    }
    sub_1000DC48C(v46, *(void **)(a1 + 64), *(void *)(a1 + 72));
    goto LABEL_94;
  }
  if (!v28) {
    goto LABEL_83;
  }
  __int16 v37 = (unsigned __int8 *)(a1 + 64);
  while (*v37 == *(unsigned __int8 *)v36)
  {
    ++v37;
    uint64_t v36 = (long long *)((char *)v36 + 1);
    if (!--v27) {
      goto LABEL_83;
    }
  }
LABEL_99:

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
}

void sub_1012CEA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1012CEB04(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    result[2] = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t result = v5;
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return result;
}

void sub_1012CEB5C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
}

unsigned char *sub_1012CEB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)uint64_t result = v6;
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return result;
}

void sub_1012CEBE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CEBF8(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1012CEC4C(id a1)
{
  qword_102419318 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

__n128 sub_1012CEC7C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10231E740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1012CECC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10231E740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1012CECF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1012CED00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012CED40()
{
}

void sub_1012CED4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(CLConnectionMessage **)a3;
  long long v5 = *(std::__shared_weak_count **)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v7 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v6, v7);
  id v9 = [[DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageSubscribeKey"] BOOLValue];
  uint64_t v10 = *(void (**)(void *, id, void *))a1;
  uint64_t v11 = *(void *)(a1 + 8);
  int v12 = (void *)(a2 + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(void (**)(void *, id, void *))(*v12 + v10);
  }
  v10(v12, v9, DictionaryOfClasses);
  if (v5)
  {
    sub_1000DB0A0(v5);
  }
}

void sub_1012CEE3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012CEE54(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1012CEED0(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1012CEEBC(_Unwind_Exception *a1)
{
  sub_100BFD770(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1012CEED0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1012CF154(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1012CF244((uint64_t)v25, 0);
  return i;
}

void sub_1012CF13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1012CF244((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1012CF154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1012CF1CC(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1012CF1B4(_Unwind_Exception *a1)
{
  sub_1012CF244(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1012CF1CC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BFCF28((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1012CF228(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CF244(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BFD7F0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_1012CF29C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  __n128 result = sub_1012CF2F8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1012CF2E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1012CF2F8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B2330;
  CLConnectionMessage::CLConnectionMessage();
  return a1;
}

void sub_1012CF344(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1012CF358()
{
  sub_100134750(&xmmword_102486AE8, "Acc800Fp");
  dword_102486B00 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, &xmmword_102486AE8, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_102486B08, "DmFp");
  dword_102486B20 = 200;
  __cxa_atexit((void (*)(void *))sub_10058C198, &xmmword_102486B08, (void *)&_mh_execute_header);
  sub_100134750(qword_102486B28, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486B28, (void *)&_mh_execute_header);
}

void sub_1012CF708()
{
}

uint64_t sub_1012CF7A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1012CFD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012CFECC(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t sub_1012CFEFC()
{
  sub_100134750(qword_102486B40, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486B40, (void *)&_mh_execute_header);
}

float sub_1012CFF5C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  *(void *)CFStringRef v43 = 0x10000000000;
  sub_1014F0838(v40);
  unint64_t v3 = 0;
  float v37 = sub_1011C07F8(v2);
  float v38 = v4;
  float v5 = 0.0;
  float v39 = v6;
  do
  {
    float v7 = sub_1004E30E4((uint64_t)&v37, v3);
    float v5 = v5 + (float)((float)(v7 * 0.25) * (float)(v7 * 0.25));
    ++v3;
  }
  while (v3 != 3);
  unint64_t v8 = 0;
  float v9 = sqrtf(v5) * 4.0;
  float v10 = v37 / v9;
  float v11 = v38 / v9;
  float v12 = v39 / v9;
  do
  {
    float v13 = sub_1011C0860((unsigned __int16 *)v2, v8);
    *(float *)sub_1004182C4(v43, v8++) = (float)((float)(v12 * v14) + (float)(v15 * v11)) + (float)(v13 * v10);
  }
  while (v8 != 256);
  sub_1014F083C((uint64_t)v40, v42, v43);
  for (unint64_t i = 0; i != 256; ++i)
  {
    float v17 = *(float *)sub_1004182C4((unsigned __int16 *)(v2 + 1076), i);
    float v18 = *(float *)sub_1004182C4(v43, i);
    *(float *)sub_1004182C4(v43, i) = v17 - (float)(v18 * v11);
  }
  sub_1014F083C((uint64_t)v40, v41, v43);
  int v20 = *(_DWORD *)(v2 + 8);
  unint64_t v19 = (int *)(v2 + 8);
  float v21 = sub_100D6A9FC(v20, 0x80uLL, 15.0);
  int v22 = sub_100D6A824(v21);
  float v23 = sub_100D6A9FC(*v19, 0x80uLL, 50.0);
  int v24 = sub_100D6A824(v23);
  float v25 = sub_100D6AA48(v22, v24, (uint64_t)v41);
  float v26 = sub_100D6A9FC(*v19, 0x80uLL, 5.0);
  int v27 = sub_100D6A824(v26);
  float v28 = sub_100D6A9FC(*v19, 0x80uLL, 15.0);
  int v29 = sub_100D6A824(v28);
  sub_100D6AA48(v27, v29, (uint64_t)v42);
  float v30 = sub_100D6A9FC(*v19, 0x80uLL, 15.0);
  int v31 = sub_100D6A824(v30);
  float v32 = sub_100D6A9FC(*v19, 0x80uLL, 50.0);
  int v33 = sub_100D6A824(v32);
  sub_100D6AA48(v31, v33, (uint64_t)v42);
  float v34 = sub_100D6A9FC(*v19, 0x80uLL, 25.0);
  int v35 = sub_100D6A824(v34);
  sub_100D6AA48(v35, v33, (uint64_t)v42);
  return v25;
}

void sub_1012D0228(void *a1)
{
  *a1 = &off_10231E828;
  a1[1] = 0;
  sub_100F79D60();
}

void sub_1012D0370(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012D03C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 64))(a4, a1, a2, a3);
}

uint64_t sub_1012D03FC(uint64_t result, uint64_t a2, _DWORD *a3, double *a4)
{
  switch(*a3)
  {
    case 0:
      __n128 result = (**(uint64_t (***)(uint64_t, void))result)(result, *(unsigned __int8 *)a4);
      break;
    case 1:
      __n128 result = (*(uint64_t (**)(void))(*(void *)result + 8))();
      break;
    case 2:
      __n128 result = (*(uint64_t (**)(void))(*(void *)result + 16))();
      break;
    case 3:
      __n128 result = (*(uint64_t (**)(void))(*(void *)result + 24))();
      break;
    case 4:
      __n128 result = (*(uint64_t (**)(void))(*(void *)result + 32))();
      break;
    case 5:
      __n128 result = (*(uint64_t (**)(double))(*(void *)result + 40))(*a4);
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1012D0524(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &off_10231E828;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1012D0598(uint64_t a1)
{
}

void sub_1012D05F4(_Unwind_Exception *a1)
{
  sub_101039104(v1);
  _Unwind_Resume(a1);
}

void sub_1012D0610(_DWORD *a1)
{
  sub_101039104(a1);

  operator delete();
}

void sub_1012D064C(uint64_t a1)
{
  bzero(&v6, 0x12uLL);
  uint64_t v6 = *(void *)(a1 + 126);
  int v7 = *(_DWORD *)(a1 + 134);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_10231E8F0);
  }
  uint64_t v2 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67110656;
    int v23 = (__int16)v6;
    __int16 v24 = 1024;
    int v25 = SWORD1(v6);
    __int16 v26 = 1024;
    int v27 = SWORD2(v6);
    __int16 v28 = 1024;
    int v29 = SHIWORD(v6);
    __int16 v30 = 1024;
    int v31 = (__int16)v7;
    __int16 v32 = 1024;
    int v33 = SHIWORD(v7);
    __int16 v34 = 1024;
    int v35 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10231E8F0);
    }
    int v4 = *(_DWORD *)(a1 + 64);
    int v8 = 67110656;
    int v9 = (__int16)v6;
    __int16 v10 = 1024;
    int v11 = SWORD1(v6);
    __int16 v12 = 1024;
    int v13 = SWORD2(v6);
    __int16 v14 = 1024;
    int v15 = SHIWORD(v6);
    __int16 v16 = 1024;
    int v17 = (__int16)v7;
    __int16 v18 = 1024;
    int v19 = SHIWORD(v7);
    __int16 v20 = 1024;
    int v21 = v4;
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV11::chooseOffsetData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_101039F24((float32x2_t *)a1, (__int16 *)&v6);
}

void sub_1012D08C0(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1012D08F0()
{
}

void sub_1012D0964()
{
}

uint64_t sub_1012D0988()
{
  if (qword_102486B58 != -1) {
    dispatch_once(&qword_102486B58, &stru_10231E910);
  }
  return qword_10248B438;
}

void *sub_1012D09D0(void *a1)
{
  *a1 = off_10231E940;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4(a1);
}

void sub_1012D0A30(void *a1)
{
  sub_1012D09D0(a1);

  operator delete();
}

void sub_1012D0A68(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 >= 3)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10231E988);
    }
    int v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Invalid request for data type %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10231E988);
      }
      int v14 = 67240192;
      int v15 = a2;
      float v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPencilDebug::numberOfSpectatorsChanged(int, size_t)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    return;
  }
  int v8 = *(uint64_t **)(a1 + 32);
  if (v8) {
    goto LABEL_18;
  }
  int v9 = (uint64_t *)sub_100A26784();
  uint64_t v12 = 0x320000FF00;
  char v13 = 0;
  sub_101A46D60(v9, (uint64_t)&v12, (uint64_t *)buf);
  long long v10 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int v11 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v10;
  if (!v11)
  {
    int v8 = (uint64_t *)v10;
    if (!(void)v10) {
      return;
    }
    goto LABEL_18;
  }
  sub_1000DB0A0(v11);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  int v8 = *(uint64_t **)(a1 + 32);
  if (v8)
  {
LABEL_18:
    if (a3) {
      sub_100A2932C(v8, (uint64_t)sub_1012D0CB4, a1);
    }
    else {
      sub_100A2932C(v8, 0, 0);
    }
  }
}

void sub_1012D0CB4()
{
  if (IOHIDEventGetType() == 1)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10231E988);
    }
    uint64_t v0 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Invalid %{public}dB payload, returning", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10231E988);
      }
      uint64_t v2 = 67240192;
      uint64_t v1 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLPencilDebug::onIohidEventBounce(void *, void *, void *, IOHIDEventRef)", "%s\n");
      if (v1 != buf) {
        free(v1);
      }
    }
  }
}

void sub_1012D1464(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

CFDictionaryRef sub_1012D1494(void *a1)
{
  CFDictionaryRef result = IOServiceNameMatching((const char *)[a1 UTF8String]);
  if (result)
  {
    return (const __CFDictionary *)IOServiceGetMatchingService(kIOMainPortDefault, result);
  }
  return result;
}

BOOL sub_1012D14DC(void *a1, io_registry_entry_t entry, CFStringRef key)
{
  CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(entry, key, kCFAllocatorDefault, 0);
  CFNumberRef v6 = CFProperty;
  if (CFProperty)
  {
    CFNumberGetValue(CFProperty, kCFNumberIntType, a1);
    CFRelease(v6);
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231E9A8);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      CFStringRef v11 = key;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#warning Key %{public}@ not found!", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231E9A8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL getIntFromIOService(int *, io_service_t, CFStringRef)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return v6 != 0;
}

BOOL sub_1012D16D4(void *a1, io_registry_entry_t entry, __CFString *key, void **p_cache)
{
  float v5 = key;
  CFNumberRef CFProperty = (void *)IORegistryEntryCreateCFProperty(entry, key, kCFAllocatorDefault, 0);
  int v8 = CFProperty;
  if (CFProperty)
  {
    id v9 = [CFProperty length];
    if (v9 == (id)(int)p_cache)
    {
      memcpy(a1, [v8 bytes], (size_t)v9);
      CFRelease(v8);
      return v8 != 0;
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10231E9A8);
    }
    uint64_t v12 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      p_cache = (void **)[(__CFString *)v5 UTF8String];
      *(_DWORD *)long long buf = 68290051;
      *(_DWORD *)int v19 = 0;
      *(_WORD *)&v19[4] = 2082;
      *(void *)&v19[6] = "";
      __int16 v20 = 2082;
      int v21 = (__CFString *)p_cache;
      __int16 v22 = 2050;
      id v23 = [v8 length];
      __int16 v24 = 2082;
      int v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "[data length] == expected_length";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231E9A8);
      }
    }
    char v13 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      p_cache = (void **)[(__CFString *)v5 UTF8String];
      id v14 = [v8 length];
      *(_DWORD *)long long buf = 68290051;
      *(_DWORD *)int v19 = 0;
      *(_WORD *)&v19[4] = 2082;
      *(void *)&v19[6] = "";
      __int16 v20 = 2082;
      int v21 = (__CFString *)p_cache;
      __int16 v22 = 2050;
      id v23 = v14;
      __int16 v24 = 2082;
      int v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "[data length] == expected_length";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected length!", "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10231E9A8);
      }
    }
    int v15 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      float v5 = (__CFString *)[(__CFString *)v5 UTF8String];
      id v16 = [v8 length];
      *(_DWORD *)long long buf = 68290051;
      *(_DWORD *)int v19 = 0;
      *(_WORD *)&v19[4] = 2082;
      *(void *)&v19[6] = "";
      __int16 v20 = 2082;
      int v21 = v5;
      __int16 v22 = 2050;
      id v23 = v16;
      __int16 v24 = 2082;
      int v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "[data length] == expected_length";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected length!\", \"key\":%{public, location:escape_only}s, \"length\":%{public}lu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    }
    abort_report_np();
    goto LABEL_20;
  }
  p_cache = CLAvengerScannerClientController.cache;
  if (qword_102418FD0 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418FD0, &stru_10231E9A8);
  long long v10 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)int v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#warning Key %{public}@ not found!", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (p_cache[506] != (void *)-1) {
      dispatch_once(&qword_102418FD0, &stru_10231E9A8);
    }
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL getBytesFromIOService(void *, io_service_t, CFStringRef, int)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return v8 != 0;
}

void sub_1012D1B68(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1012D1B98(uint64_t a1)
{
  *(void *)a1 = off_10231E9D8;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 8) = _D0;
  *(_DWORD *)(a1 + 16) = 1065353216;
  int v7 = (float *)(a1 + 16);
  uint64_t v8 = sub_1000D3E78();
  sub_10006B564(v8, &v10);
  sub_1004D11B0(v10, "RowingModelMetsScale", v7);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  return a1;
}

void sub_1012D1C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012D1C40(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_1012D2574(*(void *)(a3 + 88), *(double *)(*(void *)(a3 + 88) + 104), *(double *)(*(void *)(a3 + 88) + 112));
    }
  }
  return result;
}

uint64_t sub_1012D1D10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 88) + 48))();
}

void sub_1012D1D38(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a2 + 1352);
  float v6 = *(float *)(a2 + 308);
  float v7 = *(float *)(a2 + 316);
  float v8 = *(float *)(a2 + 1264);
  float v41 = *(float *)(a2 + 1268);
  float v42 = *(float *)(a2 + 1256);
  float v9 = *(float *)(a2 + 1272);
  BOOL v10 = v7 > 30.0 && v6 == 0.0;
  float v11 = v6 * 60.0;
  if (v10) {
    float v12 = 46.154;
  }
  else {
    float v12 = v11;
  }
  float v13 = *(float *)(a2 + 312);
  float v43 = *(float *)(a2 + 1360);
  float v14 = v12;
  float v15 = (float)((float)((float)((float)(v13 * 0.50634) + (float)(v7 * 0.015543)) + (float)(v12 * -0.032764))
              + (float)((float)(v43 * 0.013972) * v12))
      + 3.1475;
  if (v5 == 1) {
    float v15 = v15 * a1[2];
  }
  float v38 = *(float *)(a2 + 1364);
  uint64_t v39 = *(void *)(a2 + 128);
  float v36 = *(float *)(a2 + 1260);
  float v16 = cbrtf(v36);
  float v37 = cbrtf(v42);
  float v40 = v9;
  float v17 = (float)((float)((float)((float)((float)(v37 * 1.1203) + (float)(v16 * 1.4812)) + (float)(v8 * -0.082668))
                      + (float)((float)(v43 * 0.039268) * v8))
              + (float)(v9 * 1.1784))
      + (float)((float)(v41 * 0.0) * v8);
  float v18 = v17 + -0.71494;
  if ((float)(v17 + -0.71494) >= 0.0) {
    float v19 = v17 + -0.71494;
  }
  else {
    float v19 = 0.0;
  }
  if (v19 <= 15.0) {
    float v20 = v19;
  }
  else {
    float v20 = 15.0;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231EA18);
  }
  float v21 = v13;
  __int16 v22 = qword_102418FF8;
  float v23 = v14;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134221312;
    uint64_t v45 = v39;
    __int16 v46 = 2048;
    double v47 = v7;
    __int16 v48 = 2048;
    double v49 = v21;
    __int16 v50 = 2048;
    double v51 = v14;
    __int16 v52 = 2048;
    double v53 = v43;
    __int16 v54 = 1024;
    *(_DWORD *)uint64_t v55 = v5;
    *(_WORD *)&v55[4] = 2048;
    *(double *)&v55[6] = v20;
    *(_WORD *)&v55[14] = 2048;
    *(double *)&v55[16] = v36;
    *(_WORD *)&unsigned char v55[24] = 2048;
    *(double *)&v55[26] = v42;
    __int16 v56 = 2048;
    double v57 = v8;
    __int16 v58 = 2048;
    double v59 = v40;
    __int16 v60 = 2048;
    double v61 = v41;
    __int16 v62 = 2048;
    double v63 = v18;
    __int16 v64 = 2048;
    double v65 = v15;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Rowing, Speed Model, timestamp, %f, stroke power, %f, strokes amplitude, %f, stroke rate (spm), %f, height (m), %f, gender, %d, speed, %f, strokePowerDM, %f, strokeAmpDM, %f, strokeRateDM, %f, strokeDriveVelocityDM, %f, strokeLengthDM, %f, speedDM, %f, speedLegacy, %f", buf, 0x8Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231EA18);
    }
    __int16 v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieRowingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  float v24 = (float)((float)((float)(v15 * (float)(v15 * (float)(v15 * 4.7217))) / v38)
              + (float)((float)(v15 * -0.0083121) * v21))
      + 1.8196;
  if (v5 == 1)
  {
    float v25 = a1[3];
    float v24 = v24 * v25;
    float v26 = (float)((float)(147.22 / v38) + 1.8196) * v25;
  }
  else
  {
    float v26 = (float)(147.22 / v38) + 1.8196;
  }
  float v27 = powf(v38, 0.66667);
  float v28 = (float)((float)((float)((float)(v37 * (float)(v20 * 40.751)) / v27)
                      + (float)((float)(v20 * (float)(v20 * (float)(v20 * 0.62095))) / v27))
              + (float)((float)(v37 * (float)(v20 * (float)(v20 * -5.3983))) / v27))
      + -1.268;
  if (v8 == 0.0 && v40 == 0.0)
  {
    if (v23 <= 0.0) {
      float v29 = 2.1;
    }
    else {
      float v29 = v24;
    }
  }
  else
  {
    if (v26 >= v28) {
      float v30 = v26;
    }
    else {
      float v30 = (float)((float)((float)((float)(v37 * (float)(v20 * 40.751)) / v27)
    }
                          + (float)((float)(v20 * (float)(v20 * (float)(v20 * 0.62095))) / v27))
                  + (float)((float)(v37 * (float)(v20 * (float)(v20 * -5.3983))) / v27))
          + -1.268;
    float v31 = fmaxf(v28, 2.1);
    if (v23 <= 0.0) {
      float v29 = v31;
    }
    else {
      float v29 = v30;
    }
    if (v29 < 4.8423 && v29 < v24) {
      float v29 = v24;
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231EA18);
  }
  __int16 v32 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    float v33 = a1[4];
    *(_DWORD *)long long buf = 134219776;
    uint64_t v45 = v39;
    __int16 v46 = 2048;
    double v47 = v20;
    __int16 v48 = 2048;
    double v49 = v21;
    __int16 v50 = 2048;
    double v51 = v38;
    __int16 v52 = 2048;
    double v53 = v29;
    __int16 v54 = 2048;
    *(double *)uint64_t v55 = v33;
    *(_WORD *)&v55[8] = 2048;
    *(double *)&v55[10] = v28;
    *(_WORD *)&v55[18] = 2048;
    *(double *)&v55[20] = v24;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Rowing, WR Model, timestamp, %f, stroke speed, %f, strokes amplitude, %f, weight (KG), %f, METS, %f, fMetsScaling, %f, METSDM, %f, METSLegacy, %f", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231EA18);
    }
    int v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieRowingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  *(_DWORD *)a3 = 0;
  *(float *)(a3 + 4) = v29;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v29;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v29 * a1[4];
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0x800000003;
}

void sub_1012D2544(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_1012D2574(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_1012D2614(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  float v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v44 = *a4;
  uint64_t v45 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v15 = (std::__shared_weak_count *)a5[1];
  uint64_t v42 = *a5;
  float v43 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v16 = (std::__shared_weak_count *)a6[1];
  uint64_t v40 = *a6;
  float v41 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v39[0] = xmmword_102486B60;
  v39[1] = *(_OWORD *)algn_102486B70;
  v39[2] = xmmword_102486B80;
  sub_100D6AEB4(a1, a2, 3, &v44, &v42, &v40, a10, a9, v39);
  if (v41) {
    sub_1000DB0A0(v41);
  }
  if (v43) {
    sub_1000DB0A0(v43);
  }
  if (v45) {
    sub_1000DB0A0(v45);
  }
  *(void *)a1 = off_10231EA48;
  *(void *)(a1 + 352) = *a3;
  uint64_t v17 = a3[1];
  *(void *)(a1 + 360) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = *a7;
  uint64_t v18 = a7[1];
  *(void *)(a1 + 376) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 384) = *a8;
  uint64_t v19 = a8[1];
  *(void *)(a1 + 392) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 408) = 0xC35000000E10;
  float v20 = (void **)(a1 + 416);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0xFFFF;
  *(void *)(a1 + 476) = 0;
  *(void *)(a1 + 468) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 484) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 500) = _Q1;
  *(_OWORD *)(a1 + 516) = _Q1;
  *(_OWORD *)(a1 + 532) = _Q1;
  *(_DWORD *)(a1 + 548) = 0;
  *(void *)(a1 + 552) = 0xBFF0000000000000;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 580) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 588) = 0x7FFFFFFF;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  sub_101171D90(a1 + 624);
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  sub_101171D90(a1 + 712);
  *(void *)(a1 + 752) = 0xBFF0000000000000;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1136) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1168) = 0;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1160) = 0;
  *(_DWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352), a1 + 408) & 1) == 0) {
    *(_DWORD *)(a1 + 408) = 3600;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352), a1 + 412) & 1) == 0) {
    *(_DWORD *)(a1 + 412) = 50000;
  }
  *(void *)(a1 + 400) = [*(id *)(a1 + 72) classifyingStoreForHarvesterWithSubArchiving:3 itemCountThresholdForAutoCleanUp:300];
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 384) + 40))(buf);
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)float v20 = *(_OWORD *)buf;
  *(void *)(a1 + 432) = *(void *)&buf[16];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10231EB28);
  }
  float v26 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    float v27 = __p;
    sub_100D6B27C(a1, __p);
    if ((v50 & 0x80000000) != 0) {
      float v27 = *(unsigned char **)__p;
    }
    int v28 = *(_DWORD *)(a1 + 412);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    double v30 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = v27;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v28;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v29;
    __int16 v54 = 2048;
    double v55 = v30;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%s: max %d locations, loaded %zu locations (last uploaded %.3fs ago)", buf, 0x26u);
    if (SBYTE3(v50) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10231EB28);
    }
    __int16 v32 = v37;
    sub_100D6B27C(a1, v37);
    if (v38 < 0) {
      __int16 v32 = (void **)v37[0];
    }
    int v33 = *(_DWORD *)(a1 + 412);
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    double v35 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)long long __p = 136315906;
    *(void *)&__p[4] = v32;
    __int16 v47 = 1024;
    int v48 = v33;
    __int16 v49 = 2048;
    uint64_t v50 = v34;
    __int16 v51 = 2048;
    double v52 = v35;
    float v36 = (char *)_os_log_send_and_compose_impl();
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSubHarvesterTracks::CLSubHarvesterTracks(id<CLIntersiloUniverse>, std::shared_ptr<CLTracksHarvestInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Configuration>, std::shared_ptr<CLHarvestSystemInterface::StatusMonitor>, std::shared_ptr<CLHarvestSystemInterface::Controller>, std::shared_ptr<CLHarvestMonitorInterface::Gps>, std::shared_ptr<CLHarvestPolicyInterface::Trip>, CLHNetworkController *, CLHRequestStore *)", "%s\n", v36);
    if (v36 != buf) {
      free(v36);
    }
  }
  return a1;
}

void sub_1012D2C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_100F86B58(v36);
  sub_1002220F0(v38);
  if (*(char *)(v35 + 439) < 0) {
    operator delete(*v37);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v35 + 392);
  if (v40) {
    sub_1000DB0A0(v40);
  }
  float v41 = *(std::__shared_weak_count **)(v35 + 376);
  if (v41) {
    sub_1000DB0A0(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v35 + 360);
  if (v42) {
    sub_1000DB0A0(v42);
  }
  sub_1003C0998(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_1012D2D60(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  return sub_1012D2614(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1012D2D6C(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v18);
  long long v4 = *(_OWORD *)algn_102486B70;
  *(_OWORD *)(a1 + 280) = xmmword_102486B60;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)&algn_102486B70[9];
  if (sub_100012960(a2, "Location", v18)) {
    sub_1012B77D8(a1 + 280, (uint64_t)v18);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10231EB28);
  }
  int v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    sub_100D6B27C(a1, v27);
    int v6 = v28;
    double v7 = (void **)v27[0];
    sub_1012B7520();
    float v8 = v27;
    if (v6 < 0) {
      float v8 = v7;
    }
    if (v17 >= 0) {
      float v9 = __p;
    }
    else {
      float v9 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v20 = 2080;
    float v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %s", buf, 0x16u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v27, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10231EB28);
    }
    sub_100D6B27C(a1, __p);
    int v11 = v17;
    float v12 = (void **)__p[0];
    sub_1012B7520();
    float v13 = __p;
    if (v11 < 0) {
      float v13 = v12;
    }
    if (v22 >= 0) {
      float v14 = buf;
    }
    else {
      float v14 = *(unsigned char **)buf;
    }
    int v23 = 136315394;
    float v24 = v13;
    __int16 v25 = 2080;
    float v26 = v14;
    float v15 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterTracks::applyHarvestRules(const CLNameValuePair &)", "%s\n", v15);
    if (v15 != (char *)v27) {
      free(v15);
    }
  }
  return sub_10013F3C4(v18);
}

void sub_1012D305C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

uint64_t sub_1012D30B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 40))();
}

id sub_1012D30D8(uint64_t a1)
{
  v14[0] = [*(id *)(a1 + 400) homeArchive];
  v14[1] = [*(id *)(a1 + 400) workArchive];
  void v14[2] = [*(id *)(a1 + 400) mainArchive];
  uint64_t v2 = +[NSArray arrayWithObjects:v14 count:3];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id result = [(NSArray *)v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v10;
    do
    {
      int v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        double v7 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v6);
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_1012D3258;
        v8[3] = &unk_1022B7098;
        void v8[4] = v7;
        void v8[5] = a1;
        [v7 iterateSubArchivesWithHandler:v8];
        int v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id result = [(NSArray *)v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      id v4 = result;
    }
    while (result);
  }
  return result;
}

id sub_1012D3258(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if ([a2 count])
  {
    id v5 = [a2 mappedDataByDestructivelyCombiningPrimaryAndSecondaryData];
    if (v5)
    {
      int v6 = [[CLHUploadRequest alloc] initWithPayload:v5];
      -[CLHUploadRequest setEndpoint:](v6, "setEndpoint:", [objc_msgSend(objc_msgSend(*(id *)(v4 + 80), "endpointSelector"), "batchEndpoint")]);
      [*(id *)(v4 + 80) submitRequest:v6];

      *(unsigned char *)(v4 + 440) = 1;
      sub_10076AE78((char *)(v4 + 1144), (double)(int)[a2 count]);
    }
  }
  id result = [a2 count];
  if (!result)
  {
    float v8 = *(void **)(a1 + 32);
    return _[v8 deleteSubArchiveIfInactive:a2];
  }
  return result;
}

uint64_t sub_1012D3338(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 24))(v1, v2, 2);
  return 1;
}

uint64_t sub_1012D3390(uint64_t a1)
{
  *(_DWORD *)(a1 + 464) = 0xFFFF;
  *(void *)(a1 + 476) = 0;
  *(void *)(a1 + 468) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 484) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 500) = _Q1;
  *(_OWORD *)(a1 + 516) = _Q1;
  *(_OWORD *)(a1 + 532) = _Q1;
  *(_DWORD *)(a1 + 548) = 0;
  *(void *)(a1 + 552) = 0xBFF0000000000000;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 580) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 588) = 0x7FFFFFFF;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 616) = 0;

  *(void *)(a1 + 456) = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = sub_10012FD50(a1);
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32);

  return v9(v7, v8, 2);
}

void sub_1012D3464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ++*(_DWORD *)(a1 + 204);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 384) + 56))(*(void *)(a1 + 384));
  sub_100F89590((uint64_t)&v88, v6);
  sub_100134750(v86, "com.apple.harvester.tracks");
  sub_10076C3A4(a1 + 712, (char *)v86, (CLMotionActivity *)&v96[35]);
  __n128 v7 = sub_1012D408C(a1, a4);
  if ((*(uint64_t (**)(void, uint64_t, __n128))(**(void **)(a1 + 384) + 24))(*(void *)(a1 + 384), a4, v7))
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 384) + 40))(__p);
    int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 384) + 120))(*(void *)(a1 + 384));
    sub_10076A8F4(a1 + 712, v86, (std::string *)__p, v8, a4, (CLMotionActivity *)&v96[35]);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    double v9 = *(double *)(a4 + 76);
    double v10 = *(double *)(a1 + 448);
    sub_1012B77B0(a1 + 280);
    double v12 = v11;
    BOOL v13 = (*(_DWORD *)(a1 + 412) & 0x80000000) != 0
       || (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) < (unint64_t)*(int *)(a1 + 412);
    if (v9 - v10 >= v12 + -0.1 && v13)
    {
      float v15 = [CLHarvestDataTracks alloc];
      uint64_t v77 = v88;
      if (SHIBYTE(v90) < 0)
      {
        sub_1000DC48C(&v78, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        long long v78 = __src;
        uint64_t v79 = v90;
      }
      long long v80 = v91;
      if (SHIBYTE(v93) < 0)
      {
        sub_1000DC48C(&v81, (void *)v92, *((unint64_t *)&v92 + 1));
      }
      else
      {
        long long v81 = v92;
        uint64_t v82 = v93;
      }
      if (SHIBYTE(v95) < 0)
      {
        sub_1000DC48C(&v83, (void *)v94, *((unint64_t *)&v94 + 1));
      }
      else
      {
        long long v83 = v94;
        uint64_t v84 = v95;
      }
      memcpy(v85, v96, sizeof(v85));
      long long v16 = *(_OWORD *)(a4 + 112);
      v75[6] = *(_OWORD *)(a4 + 96);
      v75[7] = v16;
      v76[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v76 + 12) = *(_OWORD *)(a4 + 140);
      long long v17 = *(_OWORD *)(a4 + 48);
      v75[2] = *(_OWORD *)(a4 + 32);
      v75[3] = v17;
      long long v18 = *(_OWORD *)(a4 + 80);
      v75[4] = *(_OWORD *)(a4 + 64);
      v75[5] = v18;
      long long v19 = *(_OWORD *)(a4 + 16);
      v75[0] = *(_OWORD *)a4;
      v75[1] = v19;
      __int16 v20 = [(CLHarvestDataTracks *)v15 initWithTracksData:&v77 andLocation:v75];
      if (SHIBYTE(v84) < 0) {
        operator delete((void *)v83);
      }
      if (SHIBYTE(v82) < 0) {
        operator delete((void *)v81);
      }
      if (SHIBYTE(v79) < 0) {
        operator delete((void *)v78);
      }
      [(CLHarvestDataTracks *)v20 setModeIndicator:*(unsigned int *)(a4 + 1176)];
      uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 120))(*(void *)(a1 + 368));
      if (v21)
      {
        id v22 = [objc_alloc((Class)CLPAccessoryMeta) initWithAccessory:v21];
        [(CLHarvestDataTracks *)v20 setActiveAccessory:v22];
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EB28);
      }
      int v23 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        sub_100D6B27C(a1, v73);
        float v24 = v74 >= 0 ? v73 : (void **)v73[0];
        *(void *)long long __p = 68289539;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2081;
        *(void *)&__p[20] = v24;
        __int16 v98 = 2113;
        *(void *)__int16 v99 = v20;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"identifier\":%{private, location:escape_only}s, \"harvestData\":%{private, location:escape_only}@}", __p, 0x26u);
        if (v74 < 0) {
          operator delete(v73[0]);
        }
      }
      id v25 = objc_alloc((Class)CLPLocation);
      long long v26 = *(_OWORD *)(a4 + 112);
      v70[6] = *(_OWORD *)(a4 + 96);
      v70[7] = v26;
      v71[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)(a4 + 140);
      long long v27 = *(_OWORD *)(a4 + 48);
      v70[2] = *(_OWORD *)(a4 + 32);
      _DWORD v70[3] = v27;
      long long v28 = *(_OWORD *)(a4 + 80);
      v70[4] = *(_OWORD *)(a4 + 64);
      v70[5] = v28;
      long long v29 = *(_OWORD *)(a4 + 16);
      v70[0] = *(_OWORD *)a4;
      v70[1] = v29;
      if (v20)
      {
        [(CLHarvestDataTracks *)v20 rawMotionActivity];
        [(CLHarvestDataTracks *)v20 motionActivity];
        [(CLHarvestDataTracks *)v20 dominantMotionActivity];
      }
      else
      {
        uint64_t v69 = 0;
        memset(v68, 0, sizeof(v68));
        memset(v66, 0, sizeof(v66));
        uint64_t v67 = 0;
        uint64_t v65 = 0;
        memset(v64, 0, sizeof(v64));
      }
      id v30 = [v25 initWithDaemonLocation:v70 rawMotionActivity:v68 motionActivity:v66 dominantMotionActivity:v64 vehicleConnected:-[CLHarvestDataTracks motionVehicleConnected](v20, "motionVehicleConnected") vehicleConnectionStateChanged:-[CLHarvestDataTracks motionVehicleConnectedStateChanged](v20, "motionVehicleConnectedStateChanged")];
      id v72 = v30;
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 384) + 40))(__p);
      float v31 = (void **)(a1 + 416);
      if (__p[23] >= 0) {
        uint64_t v32 = __p[23];
      }
      else {
        uint64_t v32 = *(void *)&__p[8];
      }
      uint64_t v33 = *(unsigned __int8 *)(a1 + 439);
      int v34 = (char)v33;
      if ((v33 & 0x80u) != 0) {
        uint64_t v33 = *(void *)(a1 + 424);
      }
      if (v32 == v33)
      {
        if (v34 >= 0) {
          uint64_t v35 = (unsigned __int8 *)(a1 + 416);
        }
        else {
          uint64_t v35 = (unsigned __int8 *)*v31;
        }
        if ((__p[23] & 0x80) != 0)
        {
          uint64_t v40 = *(void **)__p;
          int v41 = memcmp(*(const void **)__p, v35, *(size_t *)&__p[8]);
          operator delete(v40);
          if (!v41)
          {
LABEL_64:
            int v42 = 0;
            goto LABEL_65;
          }
        }
        else
        {
          if (!__p[23]) {
            goto LABEL_64;
          }
          uint64_t v36 = 0;
          do
          {
            int v37 = __p[v36];
            int v38 = v35[v36];
          }
          while (v37 == v38 && __p[23] - 1 != v36++);
          if (v37 == v38) {
            goto LABEL_64;
          }
        }
      }
      else if ((__p[23] & 0x80) != 0)
      {
        operator delete(*(void **)__p);
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 384) + 40))(__p);
      if (*(char *)(a1 + 439) < 0) {
        operator delete(*v31);
      }
      *(_OWORD *)float v31 = *(_OWORD *)__p;
      *(void *)(a1 + 432) = *(void *)&__p[16];
      sub_10022267C(a1 + 664);
      [objc_msgSend(*(id *)(a1 + 400), "homeArchive") generateNewSubArchive];
      [objc_msgSend(*(id *)(a1 + 400), "workArchive") generateNewSubArchive];
      [objc_msgSend(*(id *)(a1 + 400), "mainArchive") generateNewSubArchive];
      int v42 = 1;
LABEL_65:
      obunint64_t j = +[NSMutableArray arrayWithArray:sub_10132D070([(CLHarvestDataTracks *)v20 bundleIds])];
      id v43 = objc_alloc_init((Class)NSMutableArray);
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id v44 = [(NSMutableArray *)obj countByEnumeratingWithState:&v60 objects:v100 count:16];
      int v55 = v42;
      __int16 v56 = v20;
      uint64_t v57 = a4;
      if (v44)
      {
        int v58 = 0;
        uint64_t v45 = *(void *)v61;
        __int16 v46 = (void *)(a1 + 664);
        do
        {
          for (unint64_t i = 0; i != v44; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v61 != v45) {
              objc_enumerationMutation(obj);
            }
            sub_100134750(__p, (char *)[*(id *)(*((void *)&v60 + 1) + 8 * i) UTF8String]);
            if (!sub_100122860(v46, __p))
            {
              uint64_t v48 = *(void *)(a1 + 688);
              v73[0] = __p;
              *((_DWORD *)sub_100F89F14((uint64_t)v46, __p, (uint64_t)&unk_101D0B290, (long long **)v73) + 10) = v48;
              int v58 = 1;
            }
            v73[0] = __p;
            [v43 addObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%d", *((unsigned int *)sub_100F89F14((uint64_t)v46, __p, (uint64_t)&unk_101D0B290, (long long **)v73) + 10))];
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          id v44 = [(NSMutableArray *)obj countByEnumeratingWithState:&v60 objects:v100 count:16];
        }
        while (v44);
      }
      else
      {
        int v58 = 0;
      }
      [v30 setAppBundleIdIndices:v43];
      if (((v55 | v58) & 1) != 0 || *(unsigned char *)(a1 + 440))
      {
        *(unsigned char *)(a1 + 440) = 0;
        sub_1012D4368(a1, (uint64_t)&v88);
      }
      int v49 = *(_DWORD *)(v57 + 96);
      if (v49 == 9)
      {
LABEL_84:
        [v30 setIsProactiveLocation:-[CLHarvestDataTracks isProactiveLocationSession](v56, "isProactiveLocationSession")];
        uint64_t v50 = 2;
LABEL_100:
        [*(id *)(a1 + 400) writeSecondaryObject:v30 collectedAt:v30 toField:v50];
LABEL_101:

        *(void *)(a1 + 448) = *(void *)(v57 + 76);
        (*(void (**)(void))(**(void **)(a1 + 384) + 96))(*(void *)(a1 + 384));
        ++*(_DWORD *)(a1 + 208);
        sub_100D6B950(a1);
        goto LABEL_102;
      }
      if (v49 != 3)
      {
        if (v49 != 1)
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_10231EB28);
          }
          double v53 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
          {
            *(void *)long long __p = 68289795;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2050;
            *(void *)&__p[20] = 3;
            __int16 v98 = 1040;
            *(_DWORD *)__int16 v99 = 8;
            *(_WORD *)&v99[4] = 2097;
            *(void *)&v99[6] = &v72;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", __p, 0x2Cu);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_10231EB28);
            }
          }
          __int16 v54 = qword_102419568;
          if (os_signpost_enabled((os_log_t)qword_102419568))
          {
            *(void *)long long __p = 68289795;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2050;
            *(void *)&__p[20] = 3;
            __int16 v98 = 1040;
            *(_DWORD *)__int16 v99 = 8;
            *(_WORD *)&v99[4] = 2097;
            *(void *)&v99[6] = &v72;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "throwing out non-gps, non-accessory location", "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", __p, 0x2Cu);
          }
          goto LABEL_101;
        }
        goto LABEL_84;
      }
      [v30 setIsProactiveLocation:0];
      int v51 = *(_DWORD *)(v57 + 1176);
      switch(v51)
      {
        case 'A':
          uint64_t v52 = 2;
          break;
        case 'E':
          uint64_t v52 = 4;
          break;
        case 'D':
          uint64_t v52 = 3;
          break;
        default:
LABEL_99:
          uint64_t v50 = 10;
          goto LABEL_100;
      }
      [v30 setModeIndicator:v52];
      goto LABEL_99;
    }
  }
LABEL_102:
  if (v87 < 0) {
    operator delete(v86[0]);
  }
  if (SHIBYTE(v95) < 0) {
    operator delete((void *)v94);
  }
  if (SHIBYTE(v93) < 0) {
    operator delete((void *)v92);
  }
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)__src);
  }
}

void sub_1012D3FB8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x5A7]) < 0) {
    operator delete((void *)STACK[0x590]);
  }
  sub_100F89374((uint64_t)&STACK[0x5A8]);
  _Unwind_Resume(a1);
}

__n128 sub_1012D408C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (double *)(a1 + 468);
  uint64_t v5 = a1 + 464;
  if (*(double *)(a1 + 484) < 0.0 || (sub_1000F1268((double *)(a1 + 624), v5, a2), result.n128_f64[0] > 80000.0))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10231EB28);
    }
    __n128 v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a2 + 4);
      uint64_t v9 = *(void *)(a2 + 12);
      double v10 = *v4;
      uint64_t v11 = *((void *)v4 + 1);
      double v12 = *(double *)(a2 + 76) - v4[9];
      *(_DWORD *)long long buf = 134219264;
      uint64_t v21 = 0x40F3880000000000;
      __int16 v22 = 2048;
      uint64_t v23 = v8;
      __int16 v24 = 2048;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      double v27 = v10;
      __int16 v28 = 2048;
      uint64_t v29 = v11;
      __int16 v30 = 2048;
      double v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "moved over %.2fm to <%+.8f,%+.8f> from <%+.8f,%+.8f> %.3fs ago - checking harvest rules", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EB28);
      }
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterTracks::updatePolicyLocationFromGps(const CLDaemonLocation &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56));
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v13;
    long long v14 = *(_OWORD *)(a2 + 32);
    long long v15 = *(_OWORD *)(a2 + 48);
    long long v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v5 + 80) = v16;
    *(_OWORD *)(v5 + 32) = v14;
    *(_OWORD *)(v5 + 48) = v15;
    __n128 result = *(__n128 *)(a2 + 96);
    long long v17 = *(_OWORD *)(a2 + 112);
    long long v18 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v5 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(v5 + 112) = v17;
    *(_OWORD *)(v5 + 128) = v18;
    *(__n128 *)(v5 + 96) = result;
  }
  return result;
}

void sub_1012D4368(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)CLPLocationCollectionRequest);
  [v4 setMeta:[CLPMeta meta]];
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 384) + 40))(__p);
  if (v12 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  [v4 setTripId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5)];
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  [v4 setMcc:*(unsigned int *)(a2 + 36)];
  [v4 setMnc:*(unsigned int *)(a2 + 40)];
  [v4 setRat:*(unsigned int *)(a2 + 32)];
  uint64_t v6 = (void *)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    if (!*(void *)(a2 + 56)) {
      goto LABEL_12;
    }
    uint64_t v6 = (void *)*v6;
    goto LABEL_11;
  }
  if (*(unsigned char *)(a2 + 71)) {
LABEL_11:
  }
    [v4 setAppBundleId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)];
LABEL_12:
  if (*(void *)(a1 + 688))
  {
    __n128 v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:");
    if (*(int *)(a1 + 688) >= 1)
    {
      int v8 = 0;
      do
      {
        [(NSMutableArray *)v7 addObject:&stru_10234F018];
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 688));
    }
    for (unint64_t i = *(uint64_t **)(a1 + 680); i; unint64_t i = (uint64_t *)*i)
    {
      double v10 = i + 2;
      if (*((char *)i + 39) < 0) {
        double v10 = (void *)*v10;
      }
      [(NSMutableArray *)v7 setObject:+[NSString stringWithUTF8String:v10] atIndexedSubscript:*((int *)i + 10)];
    }
    [v4 setAppBundleIds:v7];
  }
  [objc_msgSend(*(id *)(a1 + 400), "homeArchive") overwritePrimaryObject:v4];
  [objc_msgSend(*(id *)(a1 + 400), "workArchive") overwritePrimaryObject:v4];
  [objc_msgSend(*(id *)(a1 + 400), "mainArchive") overwritePrimaryObject:v4];
}

void sub_1012D4554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1012D4570(uint64_t a1)
{
  return [*(id *)(a1 + 400) count];
}

id sub_1012D4578(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  id v4 = *(void **)(a1 + 400);

  return [v4 pruneSecondaryDataOlderThan:v3];
}

void sub_1012D460C(uint64_t a1)
{
  [*(id *)(a1 + 400) eraseAllData];
  (*(void (**)(void))(**(void **)(a1 + 384) + 64))(*(void *)(a1 + 384));

  sub_10022267C(a1 + 664);
}

void sub_1012D4674(uint64_t a1)
{
  sub_1012D46DC(a1);

  operator delete();
}

void sub_1012D46AC(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1012D46DC(uint64_t a1)
{
  *(void *)a1 = off_10231EA48;
  double v2 = *(void **)(a1 + 1200);
  if (v2)
  {
    *(void *)(a1 + 1208) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 1080);
  if (v3)
  {
    *(void *)(a1 + 1088) = v3;
    operator delete(v3);
  }
  id v4 = *(void **)(a1 + 1000);
  if (v4)
  {
    *(void *)(a1 + 1008) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 920);
  if (v5)
  {
    *(void *)(a1 + 928) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  sub_1002220F0(a1 + 664);
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 392);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  __n128 v7 = *(std::__shared_weak_count **)(a1 + 376);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 360);
  if (v8) {
    sub_1000DB0A0(v8);
  }

  return sub_1003C0998(a1);
}

uint64_t sub_1012D47B8()
{
  return sub_1012B748C((uint64_t)&xmmword_102486B60, 1, 2, 2, 0, 0.0, 43200.0, 43200.0);
}

uint64_t sub_1012D47F8(uint64_t a1, unsigned char *a2, const std::string *a3, const std::string *a4)
{
  uint64_t v6 = a2;
  int v8 = (std::string *)(a1 + 56);
  char v9 = a2[23];
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v11 = *(const void **)(a1 + 56);
    size_t v10 = *(void *)(a1 + 64);
  }
  else
  {
    size_t v10 = *(unsigned __int8 *)(a1 + 79);
    uint64_t v11 = (const void *)(a1 + 56);
  }
  if (v9 >= 0) {
    size_t v12 = a2[23];
  }
  else {
    size_t v12 = *((void *)a2 + 1);
  }
  if (v9 < 0) {
    a2 = *(unsigned char **)a2;
  }
  if (v12 >= v10) {
    size_t v13 = v10;
  }
  else {
    size_t v13 = v12;
  }
  BOOL v14 = !memcmp(v11, a2, v13) && v12 == v10;
  if (v14
    && *(unsigned __int8 *)(a1 + 80) == v6[24]
    && *(_DWORD *)(a1 + 84) == *((_DWORD *)v6 + 7)
    && *(double *)(a1 + 88) == *((double *)v6 + 7)
    && *(unsigned __int8 *)(a1 + 96) == v6[64]
    && *(double *)(a1 + 104) == *((double *)v6 + 9)
    && *(double *)(a1 + 112) == *((double *)v6 + 10)
    && !sub_100A7B1A4((const void **)(a1 + 120), v6 + 88)
    && *(unsigned __int8 *)(a1 + 144) == v6[112]
    && (LODWORD(v15) = *((_DWORD *)v6 + 36), *(double *)(a1 + 176) == (double)v15))
  {
    uint64_t v16 = sub_1012D4E48((unsigned __int8 **)(a1 + 152), (uint64_t)(v6 + 120));
  }
  else
  {
    uint64_t v16 = 1;
  }
  std::string::operator=((std::string *)(a1 + 8), a3);
  std::string::operator=((std::string *)(a1 + 32), a4);
  std::string::operator=(v8, (const std::string *)v6);
  char v17 = v6[24];
  *(void *)(a1 + 88) = *((void *)v6 + 7);
  *(unsigned char *)(a1 + 80) = v17;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)v6 + 7);
  *(unsigned char *)(a1 + 96) = v6[64];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v6 + 72);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(v6 + 88));
  *(unsigned char *)(a1 + 144) = v6[112];
  if ((unsigned char *)(a1 + 152) != v6 + 120) {
    sub_1019EF7A8(a1 + 152, *((std::string **)v6 + 15), *((long long **)v6 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v6 + 16) - *((void *)v6 + 15)) >> 3));
  }
  LODWORD(v18) = *((_DWORD *)v6 + 36);
  *(double *)(a1 + 176) = (double)v18;
  sub_1000C7F88(buf);
  int v19 = sub_1000A699C(*(uint64_t *)buf, "AMLFirstFixDelay", (void *)(a1 + 88));
  if (*(void *)v35) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v35);
  }
  if (v19)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    __int16 v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)a1;
      uint64_t v22 = *(void *)(a1 + 88);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)uint64_t v35 = 2050;
      *(void *)&v35[2] = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning #AMLCfg,inst,%{public}d,overriding first fix delay to %{public}f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::SimConfig::updateEmergencySettings(const AugmentedAction::AML &, const std::string &, const std::string &)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  sub_1000C7F88(buf);
  int v23 = sub_1000D2988(*(uint64_t *)buf, "AMLMultipleSmsEnabled", (BOOL *)(a1 + 96));
  if (*(void *)v35) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v35);
  }
  if (v23)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    __int16 v24 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)a1;
      int v26 = *(unsigned __int8 *)(a1 + 96);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)uint64_t v35 = 1026;
      *(_DWORD *)&v35[2] = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning #AMLCfg,inst,%{public}d,overriding enablement of multiple SMS to %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::SimConfig::updateEmergencySettings(const AugmentedAction::AML &, const std::string &, const std::string &)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  double v27 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v28 = *(_DWORD *)a1;
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = a3;
    }
    else {
      uint64_t v29 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v30 = a4;
    }
    else {
      __int16 v30 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v35 = 2082;
    *(void *)&v35[2] = "";
    __int16 v36 = 1026;
    int v37 = v16;
    __int16 v38 = 1026;
    int v39 = v28;
    __int16 v40 = 2082;
    int v41 = v29;
    __int16 v42 = 2082;
    id v43 = v30;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#AMLCfg updated CB info\", \"changed\":%{public}d, \"sim\":%{public}d, \"version\":%{public, location:escape_only}s, \"id\":%{public, location:escape_only}s}", buf, 0x32u);
  }
  sub_1012D4ECC((int *)a1);
  return v16;
}

void sub_1012D4E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012D4E48(unsigned __int8 **a1, uint64_t a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  id v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 == *(void *)(a2 + 8) - *(void *)a2)
  {
    if (v2 == v3)
    {
      int v5 = 1;
    }
    else
    {
      do
      {
        int v5 = sub_100103744((uint64_t)&v7, v2, v4);
        if (!v5) {
          break;
        }
        v2 += 24;
        v4 += 24;
      }
      while (v2 != v3);
    }
  }
  else
  {
    int v5 = 0;
  }
  return v5 ^ 1u;
}

void sub_1012D4ECC(int *a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  double v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = a1 + 14;
    if (*((char *)a1 + 79) < 0) {
      double v3 = (void *)*v3;
    }
    int v4 = *a1;
    int v5 = *((unsigned __int8 *)a1 + 80);
    int v6 = a1[21];
    uint64_t v7 = *((void *)a1 + 11);
    int v8 = *((unsigned __int8 *)a1 + 96);
    uint64_t v10 = *((void *)a1 + 13);
    uint64_t v9 = *((void *)a1 + 14);
    uint64_t v11 = a1 + 30;
    if (*((char *)a1 + 143) < 0) {
      uint64_t v11 = (void *)*v11;
    }
    v12[0] = 68291331;
    __int16 v13 = 2082;
    v12[1] = 0;
    BOOL v14 = "";
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 2081;
    unint64_t v18 = v3;
    __int16 v19 = 1025;
    int v20 = v5;
    __int16 v21 = 1025;
    int v22 = v6;
    __int16 v23 = 2050;
    uint64_t v24 = v7;
    __int16 v25 = 1026;
    int v26 = v8;
    __int16 v27 = 2050;
    uint64_t v28 = v10;
    __int16 v29 = 2050;
    uint64_t v30 = v9;
    __int16 v31 = 2081;
    uint64_t v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AMLCfg,logSettings\", \"sim\":%{public}d, \"smsAddress\":%{private, location:escape_only}s, \"binary\":%{private}d, \"port\":%{private}d, \"firstFixDelay\":\"%{public}f\", \"multipleSmsEnabled\":%{public}hhd, \"maxFixDelay\":\"%{public}f\", \"minFixDelay\":\"%{public}f\", \"sms over NAS Address\":%{private, location:escape_only}s}", (uint8_t *)v12, 0x5Cu);
  }
}

uint64_t sub_1012D5038(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  DWORD1(v4) = 0;
  LOBYTE(v4) = 0;
  *((void *)&v4 + 1) = 0x402E000000000000;
  LOBYTE(v5) = 1;
  *((void *)&v5 + 1) = 0x4072C00000000000;
  long long v15 = 0u;
  long long v17 = 0uLL;
  long long v19 = v4;
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  int v10 = 0;
  int v11 = 0;
  size_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  long long v20 = v5;
  uint64_t v18 = 0;
  uint64_t v21 = 0x4034000000000000;
  long long __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0x4018000000000000;
  uint64_t v28 = 0;
  uint64_t v29 = 0x4018000000000000;
  sub_1012E1DA0(a1 + 8, &v10, (uint64_t)&v10);
  uint64_t v30 = (void **)&v26;
  sub_1000A7B4C(&v30);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)v17);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v12);
  }
  uint64_t v30 = (void **)&v6;
  sub_1000A7B4C(&v30);
  if ((((unsigned __int128)0 >> 120) & 0x80000000) != 0) {
    operator delete(0);
  }
  if (sub_1000FFBA8())
  {
    DWORD1(v4) = 0;
    LOBYTE(v4) = 0;
    *((void *)&v4 + 1) = 0x402E000000000000;
    LOBYTE(v5) = 1;
    *((void *)&v5 + 1) = 0x4072C00000000000;
    int v10 = 1;
    int v11 = 1;
    size_t v12 = 0;
    uint64_t v13 = 0;
    long long v15 = 0u;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    long long v17 = 0uLL;
    long long v19 = v4;
    long long v20 = v5;
    uint64_t v18 = 0;
    uint64_t v21 = 0x4034000000000000;
    long long __p = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    char v25 = 1;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0x4018000000000000;
    uint64_t v28 = 0;
    uint64_t v29 = 0x4018000000000000;
    sub_1012E1DA0(v2, &v10, (uint64_t)&v10);
    uint64_t v30 = (void **)&v26;
    sub_1000A7B4C(&v30);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)v17);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)v15);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v12);
    }
    uint64_t v30 = (void **)&v6;
    sub_1000A7B4C(&v30);
    if ((((unsigned __int128)0 >> 120) & 0x80000000) != 0) {
      operator delete(0);
    }
  }
  return a1;
}

void sub_1012D536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_1012D539C((uint64_t)&a34);
  sub_1012D5418((uint64_t)&a11);
  sub_1012E1CA8(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_1012D539C(uint64_t a1)
{
  double v3 = (void **)(a1 + 160);
  sub_1000A7B4C(&v3);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_1012D5418(uint64_t a1)
{
  double v3 = (void **)(a1 + 152);
  sub_1000A7B4C(&v3);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1012D5494(uint64_t a1, int a2, unsigned char *a3, const std::string *a4, const std::string *a5)
{
  v15[0] = a2;
  *(_DWORD *)long long buf = a2;
  uint64_t v9 = (void *)(a1 + 8);
  if (sub_10011853C((void *)(a1 + 8), (int *)buf))
  {
    int v10 = sub_10011853C(v9, v15);
    if (!v10) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    return sub_1012D47F8((uint64_t)(v10 + 3), a3, a4, a5);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    size_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67240192;
      int v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#AMLCfg ignoring emergency settings for unexpected inst %{public}d", buf, 8u);
    }
    BOOL v13 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      v15[1] = 67240192;
      void v15[2] = a2;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::updateEmergencySettings(const SimInstance, const AugmentedAction &, const std::string &, const std::string &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1012D56A8(int *a1, int a2)
{
  if (a2 == 255 || *a1 == a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    long long v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *a1;
      *(_DWORD *)long long buf = 67240192;
      int v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#AMLCfg keeping previous active inst %{public}d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::Config::updateEmergencySim(const SimInstance)", "%s\n");
LABEL_27:
    if (v10 != buf) {
      free(v10);
    }
    return 0;
  }
  *(_DWORD *)long long buf = a2;
  if (sub_10011853C((void *)a1 + 1, (int *)buf))
  {
    *a1 = a2;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67240192;
      int v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#AMLCfg active inst changed to %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::Config::updateEmergencySim(const SimInstance)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 1;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67240192;
      int v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#AMLCfg ignoring unexpected inst %{public}d", buf, 8u);
    }
    BOOL v9 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v10 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::updateEmergencySim(const SimInstance)", "%s\n");
      goto LABEL_27;
    }
  }
  return result;
}

BOOL sub_1012D5B1C(int *a1)
{
  uint64_t v2 = a1 + 2;
  *(_DWORD *)long long buf = *a1;
  if (!sub_10011853C((void *)a1 + 1, (int *)buf))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    double v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)long long buf = 67240192;
      int v26 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AMLCfg unexpected inst %{public}d is active", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v8 = *a1;
      int v11 = 67240192;
      int v12 = v8;
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::isEnabled()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    DWORD1(v18) = 0;
    *(_OWORD *)uint64_t v16 = 0u;
    memset(v17, 0, sizeof(v17));
    LOBYTE(v18) = 0;
    *((void *)&v18 + 1) = 0x402E000000000000;
    v19[0] = 1;
    *(_OWORD *)&unsigned char v19[8] = xmmword_101D47C70;
    long long v31 = 0u;
    long long v33 = *(_OWORD *)&v17[1];
    long long v35 = v18;
    int v11 = *a1;
    char v23 = 1;
    *(_DWORD *)long long buf = v11;
    int v27 = v11;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v13 = 0;
    uint64_t v30 = 0;
    uint64_t v32 = 0;
    v16[0] = 0;
    v16[1] = 0;
    memset(v17, 0, sizeof(v17));
    long long v36 = *(_OWORD *)v19;
    uint64_t v34 = 0;
    uint64_t v37 = 0x4034000000000000;
    long long __p = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    long long v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    char v41 = 1;
    memset(v42, 0, 24);
    memset(v24, 0, 24);
    void v24[3] = 0x4018000000000000;
    v42[3] = 0x4018000000000000;
    sub_1012E1DA0((uint64_t)v2, (int *)buf, (uint64_t)buf);
    int v10 = (void **)v42;
    sub_1000A7B4C(&v10);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete((void *)v33);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
    int v10 = (void **)v24;
    sub_1000A7B4C(&v10);
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
    if (SHIBYTE(v17[3]) < 0) {
      operator delete(v17[1]);
    }
    if (SHIBYTE(v17[0]) < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v13);
    }
  }
  int v5 = sub_10011853C(v2, a1);
  if (!v5) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  if (*((char *)v5 + 103) < 0) {
    uint64_t v6 = v5[11];
  }
  else {
    uint64_t v6 = *((unsigned __int8 *)v5 + 103);
  }
  return v6 != 0;
}

void sub_1012D5E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

BOOL sub_1012D5EC0(int *a1)
{
  uint64_t v2 = a1 + 2;
  *(_DWORD *)long long buf = *a1;
  if (!sub_10011853C((void *)a1 + 1, (int *)buf))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    double v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)long long buf = 67240192;
      int v26 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AMLCfg unexpected inst %{public}d is active", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v8 = *a1;
      int v11 = 67240192;
      int v12 = v8;
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::isAmlOverNasEnabled()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    DWORD1(v18) = 0;
    *(_OWORD *)uint64_t v16 = 0u;
    memset(v17, 0, sizeof(v17));
    LOBYTE(v18) = 0;
    *((void *)&v18 + 1) = 0x402E000000000000;
    v19[0] = 1;
    *(_OWORD *)&unsigned char v19[8] = xmmword_101D47C70;
    long long v31 = 0u;
    long long v33 = *(_OWORD *)&v17[1];
    long long v35 = v18;
    int v11 = *a1;
    char v23 = 1;
    *(_DWORD *)long long buf = v11;
    int v27 = v11;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v13 = 0;
    uint64_t v30 = 0;
    uint64_t v32 = 0;
    v16[0] = 0;
    v16[1] = 0;
    memset(v17, 0, sizeof(v17));
    long long v36 = *(_OWORD *)v19;
    uint64_t v34 = 0;
    uint64_t v37 = 0x4034000000000000;
    long long __p = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    long long v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    char v41 = 1;
    memset(v42, 0, 24);
    memset(v24, 0, 24);
    void v24[3] = 0x4018000000000000;
    v42[3] = 0x4018000000000000;
    sub_1012E1DA0((uint64_t)v2, (int *)buf, (uint64_t)buf);
    int v10 = (void **)v42;
    sub_1000A7B4C(&v10);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete((void *)v33);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
    int v10 = (void **)v24;
    sub_1000A7B4C(&v10);
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
    if (SHIBYTE(v17[3]) < 0) {
      operator delete(v17[1]);
    }
    if (SHIBYTE(v17[0]) < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v13);
    }
  }
  int v5 = sub_10011853C(v2, a1);
  if (!v5) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  if (*((char *)v5 + 167) < 0) {
    uint64_t v6 = v5[19];
  }
  else {
    uint64_t v6 = *((unsigned __int8 *)v5 + 167);
  }
  return v6 != 0;
}

void sub_1012D6240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

BOOL sub_1012D6264(int *a1)
{
  uint64_t v2 = a1 + 2;
  *(_DWORD *)long long buf = *a1;
  if (!sub_10011853C((void *)a1 + 1, (int *)buf))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    double v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)long long buf = 67240192;
      int v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AMLCfg unexpected inst %{public}d is active", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v7 = *a1;
      int v10 = 67240192;
      int v11 = v7;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyAML::Config::isAmlOverSatDisabled()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    DWORD1(v17) = 0;
    *(_OWORD *)uint64_t v15 = 0u;
    memset(v16, 0, sizeof(v16));
    LOBYTE(v17) = 0;
    *((void *)&v17 + 1) = 0x402E000000000000;
    v18[0] = 1;
    *(_OWORD *)&v18[8] = xmmword_101D47C70;
    long long v30 = 0u;
    long long v32 = *(_OWORD *)&v16[1];
    long long v34 = v17;
    int v10 = *a1;
    char v22 = 1;
    *(_DWORD *)long long buf = v10;
    int v26 = v10;
    int v27 = 0;
    uint64_t v28 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v12 = 0;
    uint64_t v29 = 0;
    uint64_t v31 = 0;
    v15[0] = 0;
    v15[1] = 0;
    memset(v16, 0, sizeof(v16));
    long long v35 = *(_OWORD *)v18;
    uint64_t v33 = 0;
    uint64_t v36 = 0x4034000000000000;
    long long __p = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    long long v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    char v40 = 1;
    memset(v41, 0, 24);
    memset(v23, 0, 24);
    void v23[3] = 0x4018000000000000;
    v41[3] = 0x4018000000000000;
    sub_1012E1DA0((uint64_t)v2, (int *)buf, (uint64_t)buf);
    BOOL v9 = (void **)v41;
    sub_1000A7B4C(&v9);
    if (SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v27);
    }
    BOOL v9 = (void **)v23;
    sub_1000A7B4C(&v9);
    if (SHIBYTE(v21) < 0) {
      operator delete(v19);
    }
    if (SHIBYTE(v16[3]) < 0) {
      operator delete(v16[1]);
    }
    if (SHIBYTE(v16[0]) < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v12);
    }
  }
  int v5 = sub_10011853C(v2, a1);
  if (!v5) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  return *((unsigned char *)v5 + 168) == 0;
}

void sub_1012D65D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t *sub_1012D65F8(int *a1)
{
  uint64_t v2 = a1 + 2;
  *(_DWORD *)long long buf = *a1;
  if (!sub_10011853C((void *)a1 + 1, (int *)buf))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    double v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)long long buf = 67240192;
      int v25 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AMLCfg AML config for inst %{public}d wasn't created on construction", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v7 = *a1;
      int v10 = 67240192;
      int v11 = v7;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const CLEmergencyAML::SimConfig &CLEmergencyAML::Config::getSimConfig()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    DWORD1(v17) = 0;
    *(_OWORD *)uint64_t v15 = 0u;
    memset(v16, 0, sizeof(v16));
    LOBYTE(v17) = 0;
    *((void *)&v17 + 1) = 0x402E000000000000;
    v18[0] = 1;
    *(_OWORD *)&v18[8] = xmmword_101D47C70;
    long long v30 = 0u;
    long long v32 = *(_OWORD *)&v16[1];
    long long v34 = v17;
    int v10 = *a1;
    char v22 = 1;
    *(_DWORD *)long long buf = v10;
    int v26 = v10;
    int v27 = 0;
    uint64_t v28 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v12 = 0;
    uint64_t v29 = 0;
    uint64_t v31 = 0;
    v15[0] = 0;
    v15[1] = 0;
    memset(v16, 0, sizeof(v16));
    long long v35 = *(_OWORD *)v18;
    uint64_t v33 = 0;
    uint64_t v36 = 0x4034000000000000;
    long long __p = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    long long v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    char v40 = 1;
    memset(v41, 0, 24);
    memset(v23, 0, 24);
    void v23[3] = 0x4018000000000000;
    v41[3] = 0x4018000000000000;
    sub_1012E1DA0((uint64_t)v2, (int *)buf, (uint64_t)buf);
    BOOL v9 = (void **)v41;
    sub_1000A7B4C(&v9);
    if (SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)v30);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v27);
    }
    BOOL v9 = (void **)v23;
    sub_1000A7B4C(&v9);
    if (SHIBYTE(v21) < 0) {
      operator delete(v19);
    }
    if (SHIBYTE(v16[3]) < 0) {
      operator delete(v16[1]);
    }
    if (SHIBYTE(v16[0]) < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v12);
    }
  }
  int v5 = sub_10011853C(v2, a1);
  if (!v5) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  return v5 + 3;
}

void sub_1012D6960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1012D6984(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  sub_100ABCDB0((uint64_t)v16, a4);
  int v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v13 = *a5;
  uint64_t v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100ABCECC((uint64_t)v15, a6);
  sub_1014824D0((uint64_t)a1, a2, 0, a3, (uint64_t)v16, &v13, (uint64_t)v15);
  sub_100ABCF64(v15);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  sub_100ABCE48(v16);
  *a1 = off_10231EB58;
  sub_1012D5038((uint64_t)(a1 + 181));
  sub_100134750(&__p, "#AML state machine");
  operator new();
}

void sub_1012D6C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1012E1CA8(v23 + 1456);
  sub_10148289C(v23);
  _Unwind_Resume(a1);
}

uint64_t **sub_1012D6D50(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    int v4 = a4;
    int v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101AAD278(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_10231ECB8);
LABEL_3:
  int v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    int v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int v10 = (void *)*v10;
    }
    if (v7 > 3) {
      int v11 = "StateUnknown";
    }
    else {
      int v11 = (&off_10231ED30)[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v24) >= 0) {
      int v12 = __p;
    }
    else {
      int v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v26 = 1024;
    unsigned int v27 = v7;
    __int16 v28 = 2080;
    uint64_t v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    uint64_t v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    sub_1012D8728(v7, v17);
    if (v18 >= 0) {
      uint64_t v15 = v17;
    }
    else {
      uint64_t v15 = (void **)v17[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v21 = 1024;
    unsigned int v22 = v7;
    __int16 v23 = 2080;
    uint64_t v24 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyAML>::setStateHandler(State, StateHandler) [T = CLEmergencyAML]", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  *(void *)long long buf = &v19;
  BOOL result = sub_1000C5658((uint64_t **)(v6 + 8), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_1012D703C(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 2:
    case 3:
    case 9:
    case 10:
      return sub_1012DBFF4(a1);
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #AML SendFixTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n");
      goto LABEL_45;
    case 6:
      if (!*(void *)(a1 + 1648))
      {
        sub_101483350(a1);
        sub_1012DC618(a1);
        sub_1012DC9CC(a1 + 1496, 7);
      }
      return 0;
    case 7:
      if (*(void *)(a1 + 1648))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        uint64_t v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML SMS Notification Timeout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          int v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
        sub_101483350(a1);
        sub_1012DC618(a1);
        sub_1012E2594(a1 + 1624);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        int v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#AML SMS Notification timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          int v5 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n");
LABEL_45:
          if (v5 != buf) {
            free(v5);
          }
        }
      }
      return 0;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #AML SessionAssertReleased fired in Disabled state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Disabled(CLEmergencyAML::Event)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_101482C04(a1, 0);
      return 0;
    default:
      return 0;
  }
}

uint64_t sub_1012D7638(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 2:
    case 3:
    case 9:
    case 10:
      return sub_1012DBFF4(a1);
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #AML SendFixTimeout fired while Idle", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n");
      goto LABEL_45;
    case 6:
      if (!*(void *)(a1 + 1648))
      {
        sub_101483350(a1);
        sub_1012DC618(a1);
        sub_1012DC9CC(a1 + 1496, 7);
      }
      return 1;
    case 7:
      if (*(void *)(a1 + 1648))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        uint64_t v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML SMS Notification Timeout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          int v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
        sub_101483350(a1);
        sub_1012DC618(a1);
        sub_1012E2594(a1 + 1624);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        int v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#AML SMS Notification timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          int v5 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n");
LABEL_45:
          if (v5 != buf) {
            free(v5);
          }
        }
      }
      return 1;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #AML SessionAssertReleased fired in Idle state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Idle(CLEmergencyAML::Event)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_101482C04(a1, 0);
      return 1;
    default:
      return 1;
  }
}

uint64_t sub_1012D7C34(uint64_t a1, int a2)
{
  uint64_t v2 = 2;
  switch(a2)
  {
    case 0:
      sub_1012DCE60(a1, 0);
      return v2;
    case 1:
      sub_1012DD1EC(a1);
      return v2;
    case 2:
      sub_1012DD3E0(a1);
      return v2;
    case 3:
      uint64_t v5 = sub_1012DBFF4(a1);
      uint64_t v2 = v5;
      if (v5 > 1)
      {
        if (v5 == 3)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          int v12 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#AML SessionOverNAS transition in emergency state", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10231EC18);
            }
            uint64_t v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Session(CLEmergencyAML::Event)", "%s\n", v13);
            if (v13 != (char *)buf) {
              free(v13);
            }
          }
          return 3;
        }
      }
      else if (*(unsigned char *)(a1 + 184))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        uint64_t v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML delaying Session Exit due to session assertion", buf, 2u);
        }
        uint64_t v2 = 2;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
LABEL_45:
          }
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
LABEL_25:
          int v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_Session(CLEmergencyAML::Event)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
          return 2;
        }
      }
      else
      {
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        sub_1012DBC58(a1, (unsigned int *)(a1 + 2496), 7u);
      }
      return v2;
    case 4:
      if (sub_1012DD5C0(a1)) {
        goto LABEL_7;
      }
      return v2;
    case 5:
LABEL_7:
      sub_1012DDF00(a1, 0);
      sub_1012DEA10(a1);
      return v2;
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #AML SMS Timeout while in Session. Ignoring it", buf, 2u);
      }
      uint64_t v2 = 2;
      if (!sub_10013D1A0(115, 2)) {
        return v2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_25;
      }
      goto LABEL_45;
    case 8:
      sub_101482C04(a1, 0);
      uint64_t v2 = sub_1012DBFF4(a1);
      if (v2 != 2)
      {
        uint64_t v9 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        unsigned int v10 = sub_1012E1968(v9, *(_DWORD *)(a1 + 2496));
        int v11 = *(_DWORD *)(a1 + 2496);
        if (v10 >= 0xFFFFFFFD) {
          int v11 = 7;
        }
        *(_DWORD *)(a1 + 2496) = v11;
      }
      return v2;
    case 9:
    case 10:
      return sub_1012DBFF4(a1);
    default:
      return v2;
  }
}

uint64_t sub_1012D8158(uint64_t a1, int a2)
{
  uint64_t v2 = 3;
  switch(a2)
  {
    case 0:
      sub_1012DCE60(a1, 1);
      return v2;
    case 1:
      sub_1012DD1EC(a1);
      return v2;
    case 2:
      sub_1012DD3E0(a1);
      return v2;
    case 3:
      uint64_t v5 = sub_1012DBFF4(a1);
      uint64_t v2 = v5;
      if (v5 > 1)
      {
        if (v5 == 2)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          int v8 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#AML Session transition in emergency state", buf, 2u);
          }
          uint64_t v2 = 2;
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10231EC18);
            }
            uint64_t v9 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_SessionOverNAS(CLEmergencyAML::Event)", "%s\n", v9);
            if (v9 != (char *)buf) {
              free(v9);
            }
            return 2;
          }
        }
      }
      else if (*(unsigned char *)(a1 + 184))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        uint64_t v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML delaying Session Exit due to session assertion", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
LABEL_42:
          }
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
LABEL_40:
          unsigned int v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::handler_SessionOverNAS(CLEmergencyAML::Event)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
        return 3;
      }
      else
      {
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        sub_1012DBC58(a1, (unsigned int *)(a1 + 2496), 7u);
      }
      return v2;
    case 4:
      if (sub_1012DD5C0(a1)) {
        goto LABEL_7;
      }
      return v2;
    case 5:
LABEL_7:
      sub_1012DDF00(a1, 1);
      sub_1012DEA10(a1);
      return v2;
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #AML SMS Timeout while in Session. Ignoring it", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 8:
      sub_101482C04(a1, 0);
      return v2;
    case 9:
    case 10:
      return sub_1012DBFF4(a1);
    default:
      return v2;
  }
}

uint64_t sub_1012D863C(uint64_t a1)
{
  *(void *)a1 = off_10231EB58;

  *(void *)(a1 + 2512) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 2368);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1012E2468(a1 + 1624);
  sub_1012E2378(a1 + 1496);
  sub_1012E1CA8(a1 + 1456);

  return sub_10148289C(a1);
}

void sub_1012D86C4(uint64_t a1)
{
  sub_1012D863C(a1);

  operator delete();
}

void *sub_1012D86FC@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xA) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = (&off_10231ECD8)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_1012D8728@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    uint64_t v2 = "StateUnknown";
  }
  else {
    uint64_t v2 = (&off_10231ED30)[a1];
  }
  return sub_100134750(a2, v2);
}

uint64_t sub_1012D8754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000E9354(v84);
  if (byte_10248BE47 >= 0) {
    uint64_t v6 = (const char *)&qword_10248BE30;
  }
  else {
    uint64_t v6 = (const char *)qword_10248BE30;
  }
  if (sub_100012960(a1, v6, v84))
  {
    if (byte_10248BE5F >= 0) {
      unsigned int v7 = (const char *)&qword_10248BE48;
    }
    else {
      unsigned int v7 = (const char *)qword_10248BE48;
    }
    if (sub_1004D1284((uint64_t)v84, v7, (std::string *)(a3 + 88)))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#AML over NAS needs to be supported", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        LOWORD(__p[0]) = 0;
        uint64_t v65 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v65);
        if (v65 != (char *)&buf) {
          free(v65);
        }
      }
    }
    if (byte_10248BE77 >= 0) {
      uint64_t v9 = (const char *)&qword_10248BE60;
    }
    else {
      uint64_t v9 = (const char *)qword_10248BE60;
    }
    if ((sub_1000D2988((uint64_t)v84, v9, (BOOL *)(a3 + 112)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      unsigned int v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (byte_10248BE77 >= 0) {
          int v11 = &qword_10248BE60;
        }
        else {
          int v11 = (uint64_t *)qword_10248BE60;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in carrier bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        if (byte_10248BE77 >= 0) {
          BOOL v66 = &qword_10248BE60;
        }
        else {
          BOOL v66 = (uint64_t *)qword_10248BE60;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v66;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v67);
        if (v67 != (char *)&buf) {
          free(v67);
        }
      }
    }
    int v12 = (void *)(a3 + 120);
    sub_1000A7BA0((uint64_t *)(a3 + 120));
    v82[0] = 0;
    if (sub_1004D1D1C((uint64_t)v84, @"EnableForMCCOrPLMNs", v82))
    {
      unint64_t v13 = 0;
      uint64_t v14 = (void *)v82[0];
      while ((unint64_t)[v14 count] > v13)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        uint64_t v15 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          id v16 = [v14 objectAtIndexedSubscript:v13];
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#AML MCCOrPLMN idx %{public}@", (uint8_t *)&buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          id v29 = [v14 objectAtIndexedSubscript:v13];
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v29;
          long long v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v30);
          if (v30 != (char *)&buf) {
            free(v30);
          }
        }
        sub_100134750(__p, (char *)[[v14 objectAtIndexedSubscript:v13] UTF8String]);
        unint64_t v18 = *(void *)(a3 + 128);
        unint64_t v17 = *(void *)(a3 + 136);
        if (v18 >= v17)
        {
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v12) >> 3);
          unint64_t v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *v12) >> 3);
          if (2 * v22 > v21) {
            unint64_t v21 = 2 * v22;
          }
          if (v22 >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v21;
          }
          uint64_t v90 = a3 + 136;
          if (v23) {
            uint64_t v24 = (char *)sub_1000DA5D8(a3 + 136, v23);
          }
          else {
            uint64_t v24 = 0;
          }
          int v25 = &v24[24 * v20];
          *(void *)&long long buf = v24;
          *((void *)&buf + 1) = v25;
          __int16 v89 = &v24[24 * v23];
          long long v26 = *(_OWORD *)__p;
          *((void *)v25 + 2) = v86;
          *(_OWORD *)int v25 = v26;
          __p[1] = 0;
          uint64_t v86 = 0;
          __p[0] = 0;
          uint64_t v88 = v25 + 24;
          sub_1001D7FEC((uint64_t *)(a3 + 120), &buf);
          uint64_t v27 = *(void *)(a3 + 128);
          sub_1001D8184((uint64_t)&buf);
          int v28 = SHIBYTE(v86);
          *(void *)(a3 + 128) = v27;
          if (v28 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v19 = *(_OWORD *)__p;
          *(void *)(v18 + 16) = v86;
          *(_OWORD *)unint64_t v18 = v19;
          *(void *)(a3 + 128) = v18 + 24;
        }
        ++v13;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v33 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        long long v34 = &qword_10248BE78;
        if (byte_10248BE8F < 0) {
          long long v34 = (uint64_t *)qword_10248BE78;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in carrier bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        int v68 = &qword_10248BE78;
        if (byte_10248BE8F < 0) {
          int v68 = (uint64_t *)qword_10248BE78;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v68;
        uint64_t v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v69);
        if (v69 != (char *)&buf) {
          free(v69);
        }
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v31 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#AML SMSOverNAS not found in carrier bundle, using default", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      LOWORD(__p[0]) = 0;
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v32);
      if (v32 != (char *)&buf) {
        free(v32);
      }
    }
  }
  char v83 = 1;
  if (byte_10248B6F7 >= 0) {
    long long v35 = (const char *)&qword_10248B6E0;
  }
  else {
    long long v35 = (const char *)qword_10248B6E0;
  }
  int v36 = sub_1000D2988(a2, v35, (BOOL *)&v83);
  if (v83) {
    int v37 = 0;
  }
  else {
    int v37 = v36;
  }
  if (v37 != 1)
  {
    if (byte_10248B7B7 >= 0) {
      char v40 = (const char *)&qword_10248B7A0;
    }
    else {
      char v40 = (const char *)qword_10248B7A0;
    }
    if ((sub_1000A699C(a2, v40, (void *)(a3 + 56)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      char v41 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (byte_10248B7B7 >= 0) {
          __int16 v42 = &qword_10248B7A0;
        }
        else {
          __int16 v42 = (uint64_t *)qword_10248B7A0;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        if (byte_10248B7B7 >= 0) {
          CFStringRef v70 = &qword_10248B7A0;
        }
        else {
          CFStringRef v70 = (uint64_t *)qword_10248B7A0;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v70;
        __int16 v71 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v71);
        if (v71 != (char *)&buf) {
          free(v71);
        }
      }
    }
    if (byte_10248B7CF >= 0) {
      id v43 = (const char *)&qword_10248B7B8;
    }
    else {
      id v43 = (const char *)qword_10248B7B8;
    }
    if ((sub_1000D2988(a2, v43, (BOOL *)(a3 + 64)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      id v44 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (byte_10248B7CF >= 0) {
          uint64_t v45 = &qword_10248B7B8;
        }
        else {
          uint64_t v45 = (uint64_t *)qword_10248B7B8;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        if (byte_10248B7CF >= 0) {
          id v72 = &qword_10248B7B8;
        }
        else {
          id v72 = (uint64_t *)qword_10248B7B8;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v72;
        uint64_t v73 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v73);
        if (v73 != (char *)&buf) {
          free(v73);
        }
      }
    }
    if (byte_10248B7E7 >= 0) {
      __int16 v46 = (const char *)&qword_10248B7D0;
    }
    else {
      __int16 v46 = (const char *)qword_10248B7D0;
    }
    if ((sub_1000A699C(a2, v46, (void *)(a3 + 72)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      __int16 v47 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (byte_10248B7E7 >= 0) {
          uint64_t v48 = &qword_10248B7D0;
        }
        else {
          uint64_t v48 = (uint64_t *)qword_10248B7D0;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        if (byte_10248B7E7 >= 0) {
          char v74 = &qword_10248B7D0;
        }
        else {
          char v74 = (uint64_t *)qword_10248B7D0;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v74;
        BOOL v75 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v75);
        if (v75 != (char *)&buf) {
          free(v75);
        }
      }
    }
    if (byte_10248B7FF >= 0) {
      int v49 = (const char *)&qword_10248B7E8;
    }
    else {
      int v49 = (const char *)qword_10248B7E8;
    }
    if ((sub_1000A699C(a2, v49, (void *)(a3 + 80)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v50 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (byte_10248B7FF >= 0) {
          int v51 = &qword_10248B7E8;
        }
        else {
          int v51 = (uint64_t *)qword_10248B7E8;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#AML No %{public}s key found in operator bundle, using default", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        if (byte_10248B7FF >= 0) {
          __int16 v76 = &qword_10248B7E8;
        }
        else {
          __int16 v76 = (uint64_t *)qword_10248B7E8;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v76;
        uint64_t v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v77);
        if (v77 != (char *)&buf) {
          free(v77);
        }
      }
    }
    sub_1000E9354(__p);
    if (!sub_100012960(a2, "SMS", __p))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v57 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#AML-SMS No SMS dict found in operator bundle, using default", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        LOWORD(v82[0]) = 0;
        int v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v58);
        if (v58 != (char *)&buf) {
          free(v58);
        }
      }
LABEL_177:
      sub_1000E9354(v82);
      if (sub_100012960(a2, "HTTPS", v82))
      {
        long long v61 = (std::string *)(a3 + 32);
        if (sub_1004D1284((uint64_t)v82, "URL", v61))
        {
          std::string::insert(v61, 0, "https://");
LABEL_192:
          sub_10013F3C4(v82);
          sub_10013F3C4(__p);
          return sub_10013F3C4(v84);
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        long long v63 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "#AML-HTTPS No HTTPS address found in operator bundle, using default", (uint8_t *)&buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_192;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_244:
          __int16 v81 = 0;
          uint64_t v79 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v79);
          if (v79 != (char *)&buf) {
            free(v79);
          }
          goto LABEL_192;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        long long v62 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "#AML-HTTPS No HTTPS dict found in operator bundle, using default", (uint8_t *)&buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_192;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_244;
        }
      }
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
      goto LABEL_244;
    }
    if (!sub_1004D1284((uint64_t)__p, "Destination", (std::string *)a3))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v52 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#AML-SMS No SMS address found in operator bundle, using default", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        LOWORD(v82[0]) = 0;
        long long v78 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v78);
        if (v78 != (char *)&buf) {
          free(v78);
        }
      }
    }
    sub_1000E9354(v82);
    if (!sub_100012960((uint64_t)__p, "Binary", v82))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      double v59 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#AML-SMS No binary SMS dict found in operator bundle, using default", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_176;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      __int16 v81 = 0;
      __int16 v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v56);
      goto LABEL_168;
    }
    BOOL v80 = 0;
    int v53 = sub_1000D2988((uint64_t)v82, "Disabled", &v80);
    if (v80) {
      int v54 = v53;
    }
    else {
      int v54 = 0;
    }
    if (v54 == 1)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v55 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#AML-SMS binary SMS explicitly disabled", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_176;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_150;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 24) = 1;
      if (sub_1004D0870((uint64_t)v82, "DestinationPort", (_DWORD *)(a3 + 28))) {
        goto LABEL_176;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      long long v60 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#AML-SMS No binary SMS destination port found in operator bundle, using default", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_176;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_150;
      }
    }
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
LABEL_150:
    __int16 v81 = 0;
    __int16 v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v56);
LABEL_168:
    if (v56 != (char *)&buf) {
      free(v56);
    }
LABEL_176:
    sub_10013F3C4(v82);
    goto LABEL_177;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v38 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#AML not supported", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    LOWORD(__p[0]) = 0;
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyAML::readAmlKeys(const CLNameValuePair &, const CLNameValuePair &, AugmentedAction::AML &)", "%s\n", v39);
    if (v39 != (char *)&buf) {
      free(v39);
    }
  }
  return sub_10013F3C4(v84);
}

void sub_1012DA18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
}

void sub_1012DA264(uint64_t a1)
{
  uint64_t v1 = (int *)(a1 + 1448);
  uint64_t v2 = sub_1012D65F8((int *)(a1 + 1448));
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  double v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = sub_1012D5B1C(v1);
    int v5 = *(_DWORD *)v2;
    if (*((char *)v2 + 55) < 0)
    {
      sub_1000DC48C(__dst, (void *)v2[4], v2[5]);
    }
    else
    {
      *(_OWORD *)long long __dst = *((_OWORD *)v2 + 2);
      uint64_t v19 = v2[6];
    }
    if (v19 >= 0) {
      uint64_t v6 = __dst;
    }
    else {
      uint64_t v6 = (void **)__dst[0];
    }
    if (*((char *)v2 + 31) < 0)
    {
      sub_1000DC48C(v16, (void *)v2[1], v2[2]);
    }
    else
    {
      *(_OWORD *)id v16 = *(_OWORD *)(v2 + 1);
      uint64_t v17 = v2[3];
    }
    if (v17 >= 0) {
      unsigned int v7 = v16;
    }
    else {
      unsigned int v7 = (void **)v16[0];
    }
    if (*((char *)v2 + 79) < 0)
    {
      sub_1000DC48C(v14, (void *)v2[7], v2[8]);
    }
    else
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)(v2 + 7);
      uint64_t v15 = v2[9];
    }
    if (v15 >= 0) {
      int v8 = v14;
    }
    else {
      int v8 = (void **)v14[0];
    }
    int v9 = *((unsigned __int8 *)v2 + 80);
    int v10 = *((_DWORD *)v2 + 21);
    if (*((char *)v2 + 143) < 0)
    {
      sub_1000DC48C(__p, (void *)v2[15], v2[16]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v2 + 15);
      uint64_t v13 = v2[17];
    }
    int v11 = __p;
    if (v13 < 0) {
      int v11 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 68291075;
    int v21 = 0;
    __int16 v22 = 2082;
    unint64_t v23 = "";
    __int16 v24 = 1026;
    BOOL v25 = v4;
    __int16 v26 = 1026;
    int v27 = v5;
    __int16 v28 = 2082;
    id v29 = v6;
    __int16 v30 = 2082;
    uint64_t v31 = v7;
    __int16 v32 = 2081;
    uint64_t v33 = v8;
    __int16 v34 = 1025;
    int v35 = v9;
    __int16 v36 = 1025;
    int v37 = v10;
    __int16 v38 = 2081;
    uint64_t v39 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AML logging current settings\", \"enabled\":%{public}d, \"inst\":%{public}d, \"bundle ID\":%{public, location:escape_only}s, \"bundle version\":%{public, location:escape_only}s, \"sms address\":%{private, location:escape_only}s, \"binary\":%{private}d, \"port\":%{private}d, \"SMS over NAS Destination address\":%{private, location:escape_only}s}", buf, 0x52u);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_1012DA514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012DA568(uint64_t a1, long long *a2)
{
  double v3 = (unsigned int *)(a1 + 112);
  long long v4 = *a2;
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 112) = v4;
  sub_101483184(a1);
  int v5 = sub_1006D40B0(v3);
  if (sub_1012D56A8((int *)(a1 + 1448), v5))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#AML active inst changed to %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyAML::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    sub_1012DA788(a1 + 1496, 2);
  }
  return sub_1012DA788(a1 + 1496, 3);
}

uint64_t sub_1012DA788(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v90 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_101AAD3F4();
    goto LABEL_169;
  }
  double v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_101AAD564(qword_1024193D0 == -1);
    goto LABEL_169;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231ECB8);
  }
  int v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    unsigned int v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unsigned int v7 = (void *)*v7;
    }
    uint64_t v8 = *(int *)(a1 + 4);
    if (v8 > 3) {
      int v9 = "StateUnknown";
    }
    else {
      int v9 = (&off_10231ED30)[v8];
    }
    sub_100134750(__p, v9);
    int v10 = SHIBYTE(v94);
    int v11 = *(unsigned char **)__p;
    sub_1012D86FC(a2, v101);
    int v12 = __p;
    if (v10 < 0) {
      int v12 = v11;
    }
    if (v104 >= 0) {
      uint64_t v13 = v101;
    }
    else {
      uint64_t v13 = *(unsigned char **)v101;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v97 = 2080;
    __int16 v98 = v12;
    __int16 v99 = 2080;
    int v100 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    double v3 = &qword_102419000;
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    long long v63 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      long long v63 = (void *)*v63;
    }
    sub_1012D8728(*(_DWORD *)(a1 + 4), v101);
    int v64 = v104;
    uint64_t v65 = *(unsigned char **)v101;
    sub_1012D86FC(a2, v88);
    BOOL v66 = v101;
    if (v64 < 0) {
      BOOL v66 = v65;
    }
    if (v89 >= 0) {
      uint64_t v67 = v88;
    }
    else {
      uint64_t v67 = (void **)v88[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v63;
    __int16 v92 = 2080;
    uint64_t v93 = v66;
    __int16 v94 = 2080;
    uint64_t v95 = v67;
    int v68 = (char *)_os_log_send_and_compose_impl();
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    double v3 = &qword_102419000;
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_31;
  }
  uint64_t v15 = (uint64_t **)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 4);
  uint64_t v17 = a1 + 16;
  do
  {
    int v18 = *(_DWORD *)(v14 + 32);
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      unint64_t v20 = (uint64_t *)v14;
    }
    else {
      unint64_t v20 = (uint64_t *)(v14 + 8);
    }
    if (!v19) {
      uint64_t v17 = v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_101AAD6E0();
    goto LABEL_169;
  }
  int v21 = *(uint64_t (**)(void *, uint64_t))(v17 + 40);
  uint64_t v22 = *(void *)(v17 + 48);
  unint64_t v23 = (void *)(*(void *)(a1 + 32) + (v22 >> 1));
  if (v22) {
    int v21 = *(uint64_t (**)(void *, uint64_t))(*v23 + v21);
  }
  uint64_t v24 = v21(v23, a2);
  uint64_t v25 = v24;
  int v87 = v24;
  if (a2 <= 1 && v24 != v90)
  {
    sub_101AADB30();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    __int16 v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v27 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v27 = (void *)*v27;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
      id v72 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        id v72 = (void *)*v72;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v72;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231ECB8);
  }
  __int16 v28 = qword_1024193D8;
  os_log_type_t v29 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v29))
  {
    __int16 v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v30 = (void *)*v30;
    }
    if (v25 > 3) {
      uint64_t v31 = "StateUnknown";
    }
    else {
      uint64_t v31 = (&off_10231ED30)[(int)v25];
    }
    sub_100134750(buf, v31);
    if (v99 >= 0) {
      __int16 v32 = buf;
    }
    else {
      __int16 v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v30;
    __int16 v92 = 2080;
    uint64_t v93 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v99) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    uint64_t v69 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v69 = (void *)*v69;
    }
    sub_1012D8728(v25, __p);
    if (v94 >= 0) {
      CFStringRef v70 = __p;
    }
    else {
      CFStringRef v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v101 = 136315394;
    *(void *)&v101[4] = v69;
    __int16 v102 = 2080;
    __int16 v103 = v70;
    __int16 v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v25 != v90)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    uint64_t v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      int v35 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v35 = (void *)*v35;
      }
      if (v90 > 3) {
        __int16 v36 = "StateUnknown";
      }
      else {
        __int16 v36 = (&off_10231ED30)[v90];
      }
      sub_100134750(__p, v36);
      int v37 = v3;
      int v38 = SHIBYTE(v94);
      uint64_t v39 = *(unsigned char **)__p;
      sub_100134750(v101, "Exit");
      char v40 = __p;
      if (v38 < 0) {
        char v40 = v39;
      }
      if (v104 >= 0) {
        char v41 = v101;
      }
      else {
        char v41 = *(unsigned char **)v101;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v35;
      __int16 v97 = 2080;
      __int16 v98 = v40;
      __int16 v99 = 2080;
      int v100 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      double v3 = v37;
      if (SHIBYTE(v94) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
      char v74 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v74 = (void *)*v74;
      }
      sub_1012D8728(v90, v101);
      BOOL v75 = v3;
      int v76 = v104;
      uint64_t v77 = *(unsigned char **)v101;
      sub_100134750(v88, "Exit");
      long long v78 = v101;
      if (v76 < 0) {
        long long v78 = v77;
      }
      if (v89 >= 0) {
        uint64_t v79 = v88;
      }
      else {
        uint64_t v79 = (void **)v88[0];
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = v74;
      __int16 v92 = 2080;
      uint64_t v93 = v78;
      __int16 v94 = 2080;
      uint64_t v95 = v79;
      BOOL v80 = (char *)_os_log_send_and_compose_impl();
      if (v89 < 0) {
        operator delete(v88[0]);
      }
      double v3 = v75;
      uint64_t v15 = (uint64_t **)(a1 + 8);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v80);
      if (v80 != buf) {
        free(v80);
      }
    }
    uint64_t v42 = *(void *)(a1 + 32);
    *(void *)long long buf = &v90;
    id v43 = sub_1000C5658(v15, (int *)&v90, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    id v44 = v43[5];
    uint64_t v45 = (uint64_t)v43[6];
    __int16 v46 = (void *)(v42 + (v45 >> 1));
    if (v45) {
      id v44 = *(uint64_t **)(*v46 + v44);
    }
    int v47 = ((uint64_t (*)(void *, uint64_t))v44)(v46, 1);
    if (v47 == v90)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
      uint64_t v48 = qword_1024193D8;
      os_log_type_t v49 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v49))
      {
        uint64_t v50 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v50 = (void *)*v50;
        }
        if (v25 > 3) {
          int v51 = "StateUnknown";
        }
        else {
          int v51 = (&off_10231ED30)[(int)v25];
        }
        sub_100134750(__p, v51);
        uint64_t v52 = v3;
        int v53 = SHIBYTE(v94);
        int v54 = *(unsigned char **)__p;
        sub_100134750(v101, "Enter");
        int v55 = __p;
        if (v53 < 0) {
          int v55 = v54;
        }
        if (v104 >= 0) {
          __int16 v56 = v101;
        }
        else {
          __int16 v56 = *(unsigned char **)v101;
        }
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v50;
        __int16 v97 = 2080;
        __int16 v98 = v55;
        __int16 v99 = 2080;
        int v100 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        double v3 = v52;
        if (SHIBYTE(v94) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231ECB8);
        }
        __int16 v81 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v81 = (void *)*v81;
        }
        sub_1012D8728(v25, v101);
        int v82 = v104;
        char v83 = *(unsigned char **)v101;
        sub_100134750(v88, "Enter");
        uint64_t v84 = v101;
        if (v82 < 0) {
          uint64_t v84 = v83;
        }
        if (v89 >= 0) {
          int v85 = v88;
        }
        else {
          int v85 = (void **)v88[0];
        }
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v81;
        __int16 v92 = 2080;
        uint64_t v93 = v84;
        __int16 v94 = 2080;
        uint64_t v95 = v85;
        uint64_t v86 = (char *)_os_log_send_and_compose_impl();
        if (v89 < 0) {
          operator delete(v88[0]);
        }
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyAML>::handleEvent(Event) [T = CLEmergencyAML]", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
      }
      uint64_t v57 = *(void *)(a1 + 32);
      *(void *)long long buf = &v87;
      int v58 = sub_1000C5658(v15, &v87, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      double v59 = v58[5];
      uint64_t v60 = (uint64_t)v58[6];
      long long v61 = (void *)(v57 + (v60 >> 1));
      if (v60) {
        double v59 = *(uint64_t **)(*v61 + v59);
      }
      uint64_t v25 = ((uint64_t (*)(void *, void))v59)(v61, 0);
      if (v25 == v87) {
        goto LABEL_101;
      }
      sub_101AAD850();
    }
    else
    {
      sub_101AAD9C0();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_1012DB570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_1012DB5D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(a1 + 1440);
  if (v4 != a4)
  {
    sub_1014833C0(a1, v4, a4);
    *(_DWORD *)(a1 + 1440) = a4;
  }
}

uint64_t sub_1012DB60C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1012D5494(a1 + 1448, *(_DWORD *)a2, (unsigned char *)(a2 + 120), (const std::string *)(a2 + 1240), (const std::string *)(a2 + 1264));
  if (v3) {
    sub_1012DA788(a1 + 1496, 2);
  }
  return v3;
}

uint64_t *sub_1012DB65C(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v44 = a4;
  int v11 = (void *)(a1 + 1624);
  BOOL result = sub_1001EF6E0((void *)(a1 + 1624), &v44);
  uint64_t v13 = result;
  if (result && *(_DWORD *)(a1 + 1448) == a2)
  {
    if (!a3)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      __int16 v26 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v48 = 2082;
        *(void *)&v48[2] = "";
        __int16 v49 = 1026;
        int v50 = a2;
        __int16 v51 = 1026;
        unsigned int v52 = v44;
        __int16 v53 = 1026;
        int v54 = a5;
        __int16 v55 = 1026;
        *(_DWORD *)__int16 v56 = a6;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AML received send failure notification\", \"inst\":%{public}d, \"messageID\":%{public}d, \"sendError\":%{public}d, \"modemError\":%{public}d}", buf, 0x2Au);
      }
      *(_DWORD *)(a1 + 352) = a5;
      *(_DWORD *)(a1 + 356) = a6;
      if (sub_1000E6DB4((uint64_t)(v13 + 3)))
      {
        uint64_t v27 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 16);
        unsigned int v28 = sub_1012E1968(v27, *(_DWORD *)(a1 + 2496));
        int v29 = *(_DWORD *)(a1 + 2496);
        if (v28 >= 4) {
          int v29 = 5;
        }
        *(_DWORD *)(a1 + 2496) = v29;
        ++*(_DWORD *)(a1 + 424);
        ++*(_DWORD *)(a1 + 2484);
      }
      goto LABEL_30;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v48 = 2082;
      *(void *)&v48[2] = "";
      __int16 v49 = 1026;
      int v50 = a2;
      __int16 v51 = 1026;
      unsigned int v52 = v44;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AML received send success notification\", \"inst\":%{public}d, \"messageID\":%{public}d}", buf, 0x1Eu);
    }
    if (sub_1000E6DB4((uint64_t)(v13 + 3)))
    {
      uint64_t v15 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 0);
      int v16 = sub_1012E1968(v15, *(_DWORD *)(a1 + 2496));
      int v17 = *(_DWORD *)(a1 + 2496);
      if (v16) {
        int v17 = 0;
      }
      *(_DWORD *)(a1 + 2496) = v17;
      ++*(_DWORD *)(a1 + 420);
      ++*(_DWORD *)(a1 + 2480);
      double v42 = 0.0;
      double v43 = 0.0;
      sub_101479590((uint64_t)(v13 + 3), &v43, &v42);
      double v18 = *(double *)(a1 + 248);
      if (v18 < 0.0 || v18 >= v43)
      {
        double v19 = v42;
        *(double *)(a1 + 248) = v43;
        *(double *)(a1 + 256) = v19;
        sub_10192C8D8(a1 + 192, (uint64_t)(v13 + 3));
      }
      float v20 = *(float *)(a1 + 2500);
      if (v20 < 0.0)
      {
        double v21 = *((double *)v13 + 66) - *(double *)(a1 + 176);
        *(_DWORD *)long long buf = 89;
        *(_DWORD *)uint64_t v48 = (int)v21;
        int v22 = *((_DWORD *)v13 + 30);
        int v54 = 0;
        *(_DWORD *)&v56[2] = 90;
        int v57 = v22;
        int v58 = 0;
        char v40 = 0;
        char v41 = 0;
        uint64_t v39 = 0;
        uint64_t v45 = (void **)&v39;
        char v46 = 0;
        uint64_t v39 = (char *)operator new(0x50uLL);
        char v40 = v39;
        char v41 = v39 + 80;
        char v40 = (unsigned char *)sub_100682A48((uint64_t)&v41, (uint64_t)buf, (uint64_t)v59, (uint64_t)v39);
        for (uint64_t i = 48; i != -32; i -= 40)
          sub_100118010((uint64_t)&buf[i]);
        uint64_t v24 = *(void **)(a1 + 2512);
        memset(v38, 0, sizeof(v38));
        sub_100682C20(v38, (uint64_t)v39, (uint64_t)v40, 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 3));
        [v24 setMeasurements:sub_10067C03C(v38)];
        *(void *)long long buf = v38;
        sub_100682B1C((void ***)buf);
        *(void *)long long buf = &v39;
        sub_100682B1C((void ***)buf);
        double v25 = v43;
        goto LABEL_27;
      }
      double v30 = v20;
      double v25 = v43;
      if (v43 <= v30)
      {
LABEL_27:
        float v31 = v25;
        *(float *)(a1 + 2500) = v31;
        double v32 = *((double *)v13 + 66) - *(double *)(a1 + 176);
        *(_DWORD *)long long buf = 91;
        *(_DWORD *)uint64_t v48 = (int)v32;
        int v33 = *((_DWORD *)v13 + 30);
        int v54 = 0;
        *(_DWORD *)&v56[2] = 92;
        int v57 = v33;
        int v58 = 0;
        v59[0] = 93;
        *(float *)&v59[2] = v31;
        float v34 = v42;
        v59[8] = 4;
        v59[10] = 94;
        *(float *)&v59[12] = v34;
        v59[18] = 4;
        char v40 = 0;
        char v41 = 0;
        uint64_t v39 = 0;
        uint64_t v45 = (void **)&v39;
        char v46 = 0;
        uint64_t v39 = (char *)operator new(0xA0uLL);
        char v40 = v39;
        char v41 = v39 + 160;
        char v40 = (unsigned char *)sub_100682A48((uint64_t)&v41, (uint64_t)buf, (uint64_t)&v60, (uint64_t)v39);
        for (uint64_t j = 128; j != -32; j -= 40)
          sub_100118010((uint64_t)&buf[j]);
        __int16 v36 = *(void **)(a1 + 2512);
        memset(v37, 0, sizeof(v37));
        sub_100682C20(v37, (uint64_t)v39, (uint64_t)v40, 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 3));
        [v36 setMeasurements:sub_10067C03C(v37)];
        *(void *)long long buf = v37;
        sub_100682B1C((void ***)buf);
        *(void *)long long buf = &v39;
        sub_100682B1C((void ***)buf);
      }
    }
LABEL_30:
    sub_1012E24EC(v11, v13);
    return (uint64_t *)sub_1012DA788(a1 + 1496, 6);
  }
  return result;
}

void sub_1012DBBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a15;
  sub_100682B1C(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1012DBC58(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v5 = sub_1012E1968(a1, *a2);
  unsigned int v6 = v5;
  uint64_t result = sub_1012E1968(v5, a3);
  unsigned int v8 = *a2;
  if (v6 >= result) {
    unsigned int v8 = a3;
  }
  *a2 = v8;
  return result;
}

uint64_t sub_1012DBCA8(uint64_t a1)
{
  return sub_1012DA788(a1 + 1496, 4);
}

uint64_t sub_1012DBCB4(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#AML handleImsRegStatusChange", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyAML::handleImsRegStatusChange(SimInstance)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1012DA788(a1 + 1496, 9);
}

uint64_t sub_1012DBE54(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#AML handleSatRegStatusChange", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyAML::handleSatRegStatusChange(SimInstance)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1012DA788(a1 + 1496, 10);
}

uint64_t sub_1012DBFF4(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 1448);
  uint64_t v3 = sub_1012D5B1C((int *)(a1 + 1448));
  BOOL v4 = sub_1012D5EC0(v2);
  BOOL v5 = v4;
  if ((v3 & 1) == 0 && !v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    unsigned int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#AML expectedState returning #1 Disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return 0;
  }
  uint64_t v7 = a1 + 112;
  if (sub_100D33CF4(a1 + 112))
  {
    BOOL v8 = 1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 160))
    {
      sub_100D33CA4(a1 + 112);
LABEL_20:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#AML expectedState returning #2 Disabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      return v3;
    }
    BOOL v8 = sub_100D33CD4(a1 + 112);
  }
  if (sub_100D33CA4(a1 + 112) || !v8) {
    goto LABEL_20;
  }
  uint64_t v9 = a1 + 32;
  if (*(unsigned char *)(sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448)) + 5) && !sub_1012D6264(v2))
  {
    BOOL v10 = 0;
    if (!v5) {
      goto LABEL_32;
    }
  }
  else
  {
    BOOL v10 = !sub_1012DEA78(a1);
    if (!v5) {
      goto LABEL_32;
    }
  }
  if (!sub_100D33CC4(v7) || v10 || *(unsigned char *)(sub_100A96A4C(v9, *v2) + 6))
  {
LABEL_32:
    if (v3 && !sub_100D33C94(v7))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#AML expectedState returning Session", buf, 2u);
      }
      uint64_t v3 = 2;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
        return 2;
      }
    }
    return v3;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v15 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#AML expectedState returning SessionOverNAS", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyAML::State CLEmergencyAML::expectedState()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return 3;
}

void sub_1012DC618(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10231EC38);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ca Submit AML Data to CA", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10231EC38);
    }
    LOWORD(v15) = 0;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAML::submitAMLSessionDatatoCA()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v3 = *(_DWORD *)(a1 + 2488);
  *(_DWORD *)long long buf = 95;
  int v20 = v3;
  int v4 = *(_DWORD *)(a1 + 2492);
  int v21 = 0;
  int v22 = 97;
  int v23 = v4;
  int v24 = 0;
  int v5 = *(_DWORD *)(a1 + 2480);
  int v25 = 98;
  int v26 = v5;
  int v6 = *(_DWORD *)(a1 + 2484);
  int v27 = 0;
  int v28 = 99;
  int v29 = v6;
  int v30 = 0;
  int v7 = *(_DWORD *)(a1 + 2496);
  int v31 = 96;
  int v32 = v7;
  LOBYTE(v7) = *(unsigned char *)(a1 + 2504);
  int v33 = 0;
  int v34 = 100;
  char v35 = v7;
  int v36 = 7;
  int v16 = 0;
  v17[0] = 0;
  uint64_t v15 = 0;
  v17[2] = &v15;
  char v18 = 0;
  uint64_t v15 = (char *)operator new(0xF0uLL);
  int v16 = v15;
  v17[0] = v15 + 240;
  int v16 = (unsigned char *)sub_100682A48((uint64_t)v17, (uint64_t)buf, (uint64_t)&v37, (uint64_t)v15);
  for (uint64_t i = 208; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  uint64_t v9 = *(void **)(a1 + 2512);
  memset(v14, 0, sizeof(v14));
  sub_100682C20(v14, (uint64_t)v15, (uint64_t)v16, 0xCCCCCCCCCCCCCCCDLL * ((v16 - v15) >> 3));
  [v9 setMeasurements:sub_10067C03C(v14)];
  *(void *)long long buf = v14;
  sub_100682B1C((void ***)buf);
  BOOL v10 = *(void **)(a1 + 2512);
  if (byte_10248A8E7 < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A8D0, *((unint64_t *)&xmmword_10248A8D0 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = xmmword_10248A8D0;
    uint64_t v13 = unk_10248A8E0;
  }
  [v10 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  *(void *)long long buf = &v15;
  sub_100682B1C((void ***)buf);
}

void sub_1012DC944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
}

void sub_1012DC9CC(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (uint64_t v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    BOOL v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_1012D86FC(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      int v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_1012D86FC(a2, buf);
      if (v25 >= 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyAML>::cancelTimeoutEvent(Event) [T = CLEmergencyAML]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      char v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v18 = (void *)*v18;
      }
      sub_1012D86FC(a2, __p);
      if (v31 >= 0) {
        double v19 = __p;
      }
      else {
        double v19 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      int v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
      int v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v20 = (void *)*v20;
      }
      sub_1012D86FC(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_1012DCE60(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 1648))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#AML Submitting previous session AWD report before starting new session", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      LOWORD(v11) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAML::processEnterInSessionStates(BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_101483350(a1);
    sub_1012DC618(a1);
    sub_1012E2594(a1 + 1624);
    sub_1012DC9CC(a1 + 1496, 7);
  }
  *(CFAbsoluteTime *)(a1 + 168) = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 176) = sub_10016C458();
  *(_WORD *)(a1 + 1664) = 0;
  *(void *)(a1 + 1672) = 0;
  sub_100F40DB8(a1 + 1680);
  sub_1014830F4(a1);
  sub_1012E1B0C(a1 + 2480);
  uint64_t v5 = sub_1012D65F8((int *)(a1 + 1448));
  if (a2)
  {
    sub_1012DF0B0(a1 + 1496, 5, *((double *)v5 + 22));
  }
  else
  {
    sub_1012DF0B0(a1 + 1496, 5, *((double *)v5 + 11));
    sub_101482C04(a1, 1);
    sub_1012DF0B0(a1 + 1496, 8, 60.0);
  }
  *(unsigned char *)(a1 + 2504) = a2;
  signed int v6 = sub_1012D65F8((int *)(a1 + 1448));
  sub_1012D4ECC((int *)v6);
  int v7 = sub_1006D40B0((unsigned int *)(a1 + 112));
  *(_DWORD *)long long buf = 79;
  v16[0] = v7;
  void v16[6] = 0;
  int v12 = 0;
  v13[0] = 0;
  os_log_type_t v11 = 0;
  _OWORD v13[2] = &v11;
  char v14 = 0;
  os_log_type_t v11 = (char *)operator new(0x28uLL);
  int v12 = v11;
  v13[0] = v11 + 40;
  int v12 = (unsigned char *)sub_100682A48((uint64_t)v13, (uint64_t)buf, (uint64_t)&v17, (uint64_t)v11);
  sub_100118010((uint64_t)v16);
  BOOL v8 = *(void **)(a1 + 2512);
  memset(v10, 0, sizeof(v10));
  sub_100682C20(v10, (uint64_t)v11, (uint64_t)v12, 0xCCCCCCCCCCCCCCCDLL * ((v12 - v11) >> 3));
  [v8 setMeasurements:sub_10067C03C(v10)];
  *(void *)long long buf = v10;
  sub_100682B1C((void ***)buf);
  *(void *)long long buf = &v11;
  sub_100682B1C((void ***)buf);
}

void sub_1012DD18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a15;
  sub_100682B1C(&a21);
  _Unwind_Resume(a1);
}

void sub_1012DD1EC(uint64_t a1)
{
  uint64_t v2 = a1 + 1496;
  sub_1012DC9CC(a1 + 1496, 5);
  sub_1012DC9CC(v2, 8);
  if (*(unsigned char *)(a1 + 184))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#AML session assertion active during Session Exit,clearing", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAML::processExitInSessionStates()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_101482C04(a1, 0);
  }
  if (*(void *)(a1 + 1648))
  {
    sub_1012DF0B0(v2, 7, 180.0);
  }
  else
  {
    sub_101483350(a1);
    sub_1012DC618(a1);
  }
}

uint64_t sub_1012DD3E0(uint64_t a1)
{
  uint64_t result = sub_1012DBFF4(a1);
  if (!result)
  {
    if (sub_100D33CF4(a1 + 112))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v3 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #AML unexpectedly disabled during active emergency call", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        signed int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAML::processConfigChangeInSessionStates()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    sub_101482C04(a1, 0);
    uint64_t v4 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 14);
    uint64_t result = sub_1012E1968(v4, *(_DWORD *)(a1 + 2496));
    int v5 = *(_DWORD *)(a1 + 2496);
    if (result >= 0xFFFFFFFD) {
      int v5 = 8;
    }
    *(_DWORD *)(a1 + 2496) = v5;
  }
  return result;
}

uint64_t sub_1012DD5C0(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 1448);
  if (!*((unsigned char *)sub_1012D65F8((int *)(a1 + 1448)) + 96) || !*(unsigned char *)(a1 + 1664)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if (!v3) {
    sub_10015E48C();
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v3 + 48))(v21);
  if ((sub_1000E6DB4((uint64_t)v21) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    BOOL v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning #AML,shouldSendLocation,cached location is invalid", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_22;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    LOWORD(v26) = 0;
    signed int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v6);
    goto LABEL_63;
  }
  if (*(unsigned char *)(a1 + 1665) || (sub_1000E6DB4(a1 + 1680) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,sending,last send attempt had no location", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_28;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    LOWORD(v26) = 0;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v15);
    goto LABEL_68;
  }
  double v4 = sub_10016C458() - *(double *)(a1 + 1672);
  if (v4 < *((double *)sub_1012D65F8(v2) + 14))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      double v31 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,not sending,last send was too recent,tDiff,%{public}f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_22;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v26 = 134349056;
    double v27 = v4;
    signed int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v6);
LABEL_63:
    if (v6 != (char *)buf) {
      free(v6);
    }
LABEL_22:
    uint64_t v7 = 0;
    goto LABEL_29;
  }
  uint64_t v19 = 0;
  double v20 = 0.0;
  sub_101479590((uint64_t)v21, &v20, (double *)&v19);
  uint64_t v17 = 0;
  double v18 = 0.0;
  sub_101479590(a1 + 1680, &v18, (double *)&v17);
  if (v18 - v20 >= 20.0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    char v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349312;
      double v31 = v18;
      __int16 v32 = 2050;
      double v33 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,sending,lower hunc,previous,%{public}f,current,%{public}f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_28;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v26 = 134349312;
    double v27 = v18;
    __int16 v28 = 2050;
    double v29 = v20;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v15);
    goto LABEL_68;
  }
  os_log_type_t v11 = (double *)(a1 + 1684);
  double v12 = sub_1000A3D9C(*v11, v11[1], v22, v23);
  if (v12 < 20.0 || v12 < v11[2] && v12 < v24)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,not sending,no significant changes", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_22;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    LOWORD(v26) = 0;
    signed int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v6);
    goto LABEL_63;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  int v16 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134349056;
    double v31 = v12;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#AML,shouldSendLocation,sending,location changed significantly,dist,%{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v26 = 134349056;
    double v27 = v12;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::shouldSendLocation()", "%s\n", v15);
LABEL_68:
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
LABEL_28:
  uint64_t v7 = 1;
LABEL_29:
  if (v25) {
    sub_1000DB0A0(v25);
  }
  return v7;
}

void sub_1012DDEB8(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2E0]);
  }
  _Unwind_Resume(a1);
}

void sub_1012DDF00(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) & 1) != 0)
  {
    uint64_t v4 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
    sub_101483278(a1, v4 + 136, a1 + 136);
    uint64_t v5 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
    sub_1012DFB9C(a1, v5 + 136, a1 + 136);
    if ((a2 & 1) != 0 || *(unsigned char *)(sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448)) + 4))
    {
      uint64_t v6 = *(void *)(a1 + 104);
      if (!v6) {
        sub_10015E48C();
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v6 + 48))(&v64);
      sub_1014831F0(a1, (uint64_t)&v64);
      if (sub_1000E6DB4((uint64_t)&v64))
      {
        ++*(_DWORD *)(a1 + 412);
        ++*(_DWORD *)(a1 + 2488);
        *(unsigned char *)(a1 + 1665) = 0;
        uint64_t v7 = sub_1012DFD68(a1, (uint64_t)&v64);
      }
      else
      {
        ++*(_DWORD *)(a1 + 416);
        ++*(_DWORD *)(a1 + 2492);
        *(unsigned char *)(a1 + 1665) = 1;
        uint64_t v8 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 2);
        unsigned int v9 = sub_1012E1968(v8, *(_DWORD *)(a1 + 2496));
        int v10 = *(_DWORD *)(a1 + 2496);
        if (v9 >= 5) {
          int v10 = 6;
        }
        *(_DWORD *)(a1 + 2496) = v10;
        if (*(unsigned char *)(a1 + 1664))
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          os_log_type_t v11 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#AML not sending no fix message", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_10231EC18);
            }
            LOWORD(v82) = 0;
            double v12 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v12);
            if (v12 != (char *)buf) {
              free(v12);
            }
          }
          goto LABEL_63;
        }
        uint64_t v7 = sub_1012E01F8(a1);
      }
      double v23 = v7;
      *(unsigned char *)(a1 + 1664) = 1;
      *(double *)(a1 + 1672) = sub_10016C458();
      long long v24 = v71;
      *(_OWORD *)(a1 + 1776) = v70;
      *(_OWORD *)(a1 + 1792) = v24;
      *(_OWORD *)(a1 + 1808) = v72[0];
      long long v25 = v67;
      *(_OWORD *)(a1 + 1712) = v66;
      *(_OWORD *)(a1 + 1728) = v25;
      long long v26 = v69;
      *(_OWORD *)(a1 + 1744) = v68;
      *(_OWORD *)(a1 + 1760) = v26;
      long long v27 = v65;
      *(_OWORD *)(a1 + 1680) = v64;
      *(_OWORD *)(a1 + 1820) = *(_OWORD *)((char *)v72 + 12);
      *(_OWORD *)(a1 + 1696) = v27;
      memcpy((void *)(a1 + 1840), v73, 0x201uLL);
      uint64_t v28 = v74;
      double v29 = v75;
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 2360) = v28;
      int v30 = *(std::__shared_weak_count **)(a1 + 2368);
      *(void *)(a1 + 2368) = v29;
      if (v30) {
        sub_1000DB0A0(v30);
      }
      long long v31 = *(_OWORD *)v81;
      *(_OWORD *)(a1 + 2440) = v80;
      *(_OWORD *)(a1 + 2456) = v31;
      *(void *)(a1 + 2469) = *(void *)&v81[13];
      long long v32 = v77;
      *(_OWORD *)(a1 + 2376) = v76;
      *(_OWORD *)(a1 + 2392) = v32;
      long long v33 = v79;
      *(_OWORD *)(a1 + 2408) = v78;
      *(_OWORD *)(a1 + 2424) = v33;
      *(unsigned char *)(a1 + 2504) = a2;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v34 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        char v35 = [(NSString *)v23 UTF8String];
        *(_DWORD *)long long buf = 136380675;
        *(void *)&uint8_t buf[4] = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#AML preparing to send SMS message: %{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        int v58 = [(NSString *)v23 UTF8String];
        int v82 = 136380675;
        *(void *)char v83 = v58;
        double v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v59);
        if (v59 != (char *)buf) {
          free(v59);
        }
      }
      unsigned int v63 = 0;
      if (*((unsigned char *)sub_1012D65F8((int *)(a1 + 1448)) + 80)) {
        unsigned int v36 = sub_1012E0484(a1, v23, (uint64_t)&v63);
      }
      else {
        unsigned int v36 = sub_1012E0B84(a1, (uint64_t)v23, (uint64_t)&v63, a2);
      }
      unsigned int v37 = v36;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      int v38 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v37;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v63;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#AML message valid,%{public}d,messageID,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        int v82 = 67240448;
        *(_DWORD *)char v83 = v37;
        *(_WORD *)&v83[4] = 1026;
        *(_DWORD *)&v83[6] = v63;
        uint64_t v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v60);
        if (v60 != (char *)buf) {
          free(v60);
        }
      }
      if (v37)
      {
        *(void *)long long buf = &v63;
        uint64_t v39 = sub_1012E25FC(a1 + 1624, &v63, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v41 = v68;
        long long v40 = v69;
        long long v42 = v67;
        *(_OWORD *)(v39 + 7) = v66;
        *(_OWORD *)(v39 + 9) = v42;
        long long v43 = *(_OWORD *)((char *)v72 + 12);
        long long v44 = v72[0];
        long long v45 = v71;
        *(_OWORD *)(v39 + 15) = v70;
        *(_OWORD *)(v39 + 17) = v45;
        *(_OWORD *)(v39 + 19) = v44;
        *(_OWORD *)((char *)v39 + 164) = v43;
        *(_OWORD *)(v39 + 11) = v41;
        *(_OWORD *)(v39 + 13) = v40;
        long long v46 = v65;
        *(_OWORD *)(v39 + 3) = v64;
        *(_OWORD *)(v39 + 5) = v46;
        memcpy(v39 + 23, v73, 0x201uLL);
        uint64_t v47 = v74;
        uint64_t v48 = v75;
        if (v75) {
          atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v39[88] = v47;
        __int16 v49 = (std::__shared_weak_count *)v39[89];
        v39[89] = v48;
        if (v49) {
          sub_1000DB0A0(v49);
        }
        uint64_t v50 = *(void *)&v81[13];
        long long v51 = *(_OWORD *)v81;
        *((_OWORD *)v39 + 49) = v80;
        *((_OWORD *)v39 + 50) = v51;
        *(void *)((char *)v39 + 813) = v50;
        long long v53 = v78;
        long long v52 = v79;
        long long v54 = v77;
        *((_OWORD *)v39 + 45) = v76;
        *((_OWORD *)v39 + 46) = v54;
        *((_OWORD *)v39 + 47) = v53;
        *((_OWORD *)v39 + 48) = v52;
      }
      else
      {
        uint64_t v55 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 28);
        unsigned int v56 = sub_1012E1968(v55, *(_DWORD *)(a1 + 2496));
        int v57 = *(_DWORD *)(a1 + 2496);
        if (v56 >= 2) {
          int v57 = 3;
        }
        *(_DWORD *)(a1 + 2496) = v57;
      }
LABEL_63:
      if (v75) {
        sub_1000DB0A0(v75);
      }
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    double v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#AML,sendLocation,roaming not supported", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      LOWORD(v64) = 0;
      long long v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v62);
      if (v62 != (char *)buf) {
        free(v62);
      }
    }
    uint64_t v21 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 29);
    unsigned int v22 = sub_1012E1968(v21, *(_DWORD *)(a1 + 2496));
    int v16 = (int *)(a1 + 2496);
    int v17 = *(_DWORD *)(a1 + 2496);
    BOOL v18 = v22 >= 3;
    int v19 = 4;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#AML attempted to send location when not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      LOWORD(v64) = 0;
      long long v61 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyAML::sendLocation(BOOL)", "%s\n", v61);
      if (v61 != (char *)buf) {
        free(v61);
      }
    }
    uint64_t v14 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 12);
    unsigned int v15 = sub_1012E1968(v14, *(_DWORD *)(a1 + 2496));
    int v16 = (int *)(a1 + 2496);
    int v17 = *(_DWORD *)(a1 + 2496);
    BOOL v18 = v15 >= 2;
    int v19 = 2;
  }
  if (v18) {
    int v17 = v19;
  }
  *int v16 = v17;
}

void sub_1012DE9D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 688);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012DEA10(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 1448);
  if (*((unsigned char *)sub_1012D65F8((int *)(a1 + 1448)) + 96))
  {
    double v3 = *((double *)sub_1012D65F8(v2) + 13);
    sub_1012DF0B0(a1 + 1496, 5, v3);
  }
}

BOOL sub_1012DEA78(uint64_t a1)
{
  uint64_t v1 = (int *)(a1 + 1448);
  uint64_t v2 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
  double v3 = sub_1012D65F8(v1);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  sub_1001D857C((char *)&v38, (long long *)v3[19], (long long *)v3[20], 0xAAAAAAAAAAAAAAABLL * ((v3[20] - v3[19]) >> 3));
  std::to_string(&v43, *(_DWORD *)(v2 + 8));
  std::to_string(&v35, *(_DWORD *)(v2 + 12));
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v35;
  }
  else {
    uint64_t v4 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = std::string::append(&v43, (const std::string::value_type *)v4, size);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v37 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::to_string(&v35, *(_DWORD *)(v2 + 8));
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v9 = __p;
    if (v37 < 0) {
      unsigned int v9 = (void **)__p[0];
    }
    LODWORD(v43.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#AML current Camped PLMN %{private}s", (uint8_t *)&v43, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v43, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v30 = __p;
    if (v37 < 0) {
      int v30 = (void **)__p[0];
    }
    int v41 = 136380675;
    long long v42 = v30;
    long long v31 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::isCampedMCCorPLMNMatchWithBundleKey()", "%s\n", (const char *)v31);
    if (v31 != &v43) {
      free(v31);
    }
  }
  uint64_t v10 = v38;
  if (v39 == v38)
  {
LABEL_55:
    BOOL v18 = 0;
    goto LABEL_63;
  }
  uint64_t v11 = 0;
  unint64_t v12 = (v39 - v38) / 24;
  if (v37 >= 0) {
    uint64_t v13 = (void *)HIBYTE(v37);
  }
  else {
    uint64_t v13 = __p[1];
  }
  if (v37 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v35.__r_.__value_.__l.__size_;
  }
  int v16 = &v35;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v16 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  __s2 = v16;
  if (v12 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = (v39 - v38) / 24;
  }
  BOOL v18 = 1;
  while (1)
  {
    int v19 = (unsigned __int8 *)(v10 + 24 * v11);
    uint64_t v20 = v19[23];
    size_t v21 = *((void *)v19 + 1);
    if ((v20 & 0x80u) == 0) {
      unsigned int v22 = (void *)v19[23];
    }
    else {
      unsigned int v22 = (void *)*((void *)v19 + 1);
    }
    if (v22 != v13) {
      goto LABEL_44;
    }
    if ((v20 & 0x80) != 0) {
      break;
    }
    if (!v19[23]) {
      goto LABEL_56;
    }
    double v23 = v14;
    long long v24 = (unsigned __int8 *)(v10 + 24 * v11);
    uint64_t v25 = v19[23];
    while (*v24 == *(unsigned __int8 *)v23)
    {
      ++v24;
      double v23 = (void **)((char *)v23 + 1);
      if (!--v25) {
        goto LABEL_56;
      }
    }
LABEL_44:
    if (v22 == (void *)v15)
    {
      if ((v20 & 0x80) != 0) {
        goto LABEL_53;
      }
      if (!v19[23]) {
        goto LABEL_56;
      }
      long long v26 = __s2;
      while (*v19 == v26->__r_.__value_.__s.__data_[0])
      {
        ++v19;
        long long v26 = (std::string *)((char *)v26 + 1);
        if (!--v20) {
          goto LABEL_56;
        }
      }
    }
LABEL_54:
    BOOL v18 = v12 > ++v11;
    if (v11 == v17) {
      goto LABEL_55;
    }
  }
  if (!memcmp(*(const void **)v19, v14, *((void *)v19 + 1))) {
    goto LABEL_56;
  }
  if (v21 != v15) {
    goto LABEL_54;
  }
LABEL_53:
  if (memcmp(*(const void **)v19, __s2, v21)) {
    goto LABEL_54;
  }
LABEL_56:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  long long v27 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v28 = v38 + 24 * v11;
    if (*(char *)(v28 + 23) < 0) {
      std::string::size_type v28 = *(void *)v28;
    }
    LODWORD(v43.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#AML cbMCCOrPLMNArray Matched MCC or PLMN %{private}s", (uint8_t *)&v43, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v43, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    long long v32 = (void **)(v38 + 24 * v11);
    if (*((char *)v32 + 23) < 0) {
      long long v32 = (void **)*v32;
    }
    int v41 = 136380675;
    long long v42 = v32;
    long long v33 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::isCampedMCCorPLMNMatchWithBundleKey()", "%s\n", (const char *)v33);
    if (v33 != &v43) {
      free(v33);
    }
  }
LABEL_63:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  sub_1000A7B4C((void ***)&v43);
  return v18;
}

void sub_1012DF024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  a29 = &a24;
  sub_1000A7B4C((void ***)&a29);
  _Unwind_Resume(a1);
}

void sub_1012DF0A8()
{
}

void sub_1012DF0B0(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    long long v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      long long v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v33 = (void *)*v33;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
      int64_t v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int64_t v37 = (void *)*v37;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v37;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyAML>::setTimeoutEvent(Event, double) [T = CLEmergencyAML]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    int v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
    }
    std::string v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
    }
    unsigned int v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      sub_1012D86FC(a2, __p);
      if (v49 >= 0) {
        unsigned int v9 = __p;
      }
      else {
        unsigned int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&unsigned char buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231ECB8);
      }
      uint64_t v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      sub_1012D86FC(a2, v42);
      if (v45 >= 0) {
        uint64_t v11 = v42;
      }
      else {
        uint64_t v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      uint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyAML>::setTimeoutEvent(Event, double) [T = CLEmergencyAML]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        uint64_t v17 = (uint64_t *)v13;
      }
      else {
        uint64_t v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      BOOL v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231ECB8);
        }
        size_t v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          double v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            double v23 = (void *)*v23;
          }
          sub_1012D86FC(v41, __p);
          if (v49 >= 0) {
            long long v24 = __p;
          }
          else {
            long long v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&unsigned char buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10231ECB8);
          }
          uint64_t v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v25 = (void *)*v25;
          }
          sub_1012D86FC(v41, v42);
          if (v45 >= 0) {
            long long v26 = v42;
          }
          else {
            long long v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)long long __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          uint64_t v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          unint64_t v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyAML>::setTimeoutEvent(Event, double) [T = CLEmergencyAML]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  int v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    BOOL v18 = v19;
    *(void *)long long buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1012E25EC;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10231ECB8);
  }
  long long v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    std::string::size_type v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      std::string::size_type v28 = (void *)*v28;
    }
    sub_1012D86FC(a2, buf);
    if (buf[23] >= 0) {
      double v29 = buf;
    }
    else {
      double v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    uint64_t v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231ECB8);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_1012D86FC(a2, __p);
    if (v49 >= 0) {
      long long v31 = __p;
    }
    else {
      long long v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    long long v44 = v31;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_1012DFB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  BOOL v6 = v5 == 0;
  if (v5) {
    int v7 = 3;
  }
  else {
    int v7 = 1;
  }
  if (v6 || v4 == 0) {
    int v9 = 2;
  }
  else {
    int v9 = 4;
  }
  if (v4) {
    int v10 = v9;
  }
  else {
    int v10 = v7;
  }
  LODWORD(v17) = 31;
  v18[0] = v10;
  v18[6] = 0;
  uint64_t v14 = 0;
  v15[0] = 0;
  uint64_t v13 = 0;
  v15[1] = &v13;
  char v16 = 0;
  uint64_t v13 = (char *)operator new(0x28uLL);
  uint64_t v14 = v13;
  v15[0] = v13 + 40;
  uint64_t v14 = (unsigned char *)sub_100682A48((uint64_t)v15, (uint64_t)&v17, (uint64_t)&v19, (uint64_t)v13);
  sub_100118010((uint64_t)v18);
  uint64_t v11 = *(void **)(a1 + 2512);
  memset(v12, 0, sizeof(v12));
  sub_100682C20(v12, (uint64_t)v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 3));
  [v11 setMeasurements:sub_10067C03C(v12)];
  uint64_t v17 = (void **)v12;
  sub_100682B1C(&v17);
  uint64_t v17 = (void **)&v13;
  sub_100682B1C(&v17);
}

void sub_1012DFD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_100682B1C(&a17);
  _Unwind_Resume(a1);
}

NSString *sub_1012DFD68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
  id v4 = objc_alloc_init((Class)NSDateFormatter);
  [v4 setTimeZone:+[NSTimeZone timeZoneWithAbbreviation:](NSTimeZone, "timeZoneWithAbbreviation:", @"UTC")];
  [v4 setDateFormat:@"yyyyMMddHHmmss"];
  double v5 = *(double *)(a2 + 184);
  BOOL v6 = (double *)sub_100BCE65C();
  int v7 = (double *)(a2 + 76);
  if (v5 != v6[3]) {
    int v7 = (double *)(a2 + 184);
  }
  id v8 = [v4 stringFromDate:[NSDate dateWithTimeIntervalSinceReferenceDate:*v7]];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  int v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    *(void *)unsigned int v36 = [v8 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#AML sending valid fix from time %{public}s", buf, 0xCu);
  }
  uint64_t v10 = sub_10013D1A0(115, 2);
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v29 = 136446210;
    *(void *)int v30 = [v8 UTF8String];
    double v23 = (char *)_os_log_send_and_compose_impl();
    uint64_t v10 = sub_1004BA5E4("Generic", 1, 0, 2, "NSString *CLEmergencyAML::createSmsWithLocation(const GNSS::DaemonLocation &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  uint64_t v11 = sub_1012E1228(v10, *(_DWORD *)(a2 + 96));
  uint64_t v27 = 0;
  double v28 = 0.0;
  sub_101479590(a2, &v28, (double *)&v27);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  unint64_t v12 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a2 + 4);
    uint64_t v14 = *(void *)(a2 + 12);
    *(_DWORD *)long long buf = 67240961;
    *(_DWORD *)unsigned int v36 = v11;
    *(_WORD *)&v36[4] = 2049;
    *(void *)&v36[6] = v13;
    __int16 v37 = 2049;
    uint64_t v38 = v14;
    __int16 v39 = 2050;
    double v40 = v28;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#AML method,%{public}c,lat,%{private}f,lon,%{private}f,acc,%{public}f", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v24 = *(void *)(a2 + 4);
    uint64_t v25 = *(void *)(a2 + 12);
    int v29 = 67240961;
    *(_DWORD *)int v30 = v11;
    *(_WORD *)&v30[4] = 2049;
    *(void *)&v30[6] = v24;
    __int16 v31 = 2049;
    uint64_t v32 = v25;
    __int16 v33 = 2050;
    double v34 = v28;
    long long v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSString *CLEmergencyAML::createSmsWithLocation(const GNSS::DaemonLocation &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  signed int v15 = CKSyncEngine_ptr;
  LODWORD(v15) = vcvtad_u64_f64(v28);
  uint64_t v18 = *(void *)(v3 + 64);
  uint64_t v17 = v3 + 64;
  uint64_t v16 = v18;
  if (*(char *)(v17 + 23) >= 0) {
    uint64_t v16 = v17;
  }
  if (*(char *)(v17 + 71) >= 0) {
    uint64_t v19 = v17 + 48;
  }
  else {
    uint64_t v19 = *(void *)(v17 + 48);
  }
  dispatch_time_t v20 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"A\"ML=1;lt=%+.5f;lg=%+.5f;rd=%u;top=%@;lc=95;pm=%c;si=%s;ei=%s;mcc=%d;mnc=%d;ml=",
          *(void *)(a2 + 4),
          *(void *)(a2 + 12),
          v15,
          v8,
          v11,
          v16,
          v19,
          *(unsigned int *)(v17 - 56),
          *(unsigned int *)(v17 - 52));

  return sub_1012E13F8(v21, v20);
}

NSString *sub_1012E01F8(uint64_t a1)
{
  uint64_t v1 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
  id v2 = objc_alloc_init((Class)NSDateFormatter);
  [v2 setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@"UTC"]];
  [v2 setDateFormat:@"yyyyMMddHHmmss"];
  id v3 = [v2 stringFromDate:[NSDate now]];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    id v15 = [v3 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#AML sending no fix message at time %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    [v3 UTF8String];
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSString *CLEmergencyAML::createSmsWithoutLocation()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v6 = v1 + 64;
  uint64_t v5 = v7;
  if (*(char *)(v6 + 23) >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v5;
  }
  if (*(char *)(v6 + 71) >= 0) {
    uint64_t v9 = v6 + 48;
  }
  else {
    uint64_t v9 = *(void *)(v6 + 48);
  }
  uint64_t v10 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"A\"ML=1;lt=+00.00000;lg=+000.00000;rd=N;top=%@;lc=0;pm=N;si=%s;ei=%s;mcc=%d;mnc=%d;ml=",
          v3,
          v8,
          v9,
          *(unsigned int *)(v6 - 56),
          *(unsigned int *)(v6 - 52));

  return sub_1012E13F8(v11, v10);
}

id sub_1012E0484(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = sub_1012D65F8((int *)(a1 + 1448));
  id v6 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:sub_100554F5C(*(_DWORD *)v5)];
  ctu::TextConverter::TextConverter((ctu::TextConverter *)v34);
  ctu::TextConverter::pushConversion();
  ctu::TextConverter::pushConversion();
  ctu::TextConverter::pushConversion();
  ctu::TextConverter::setSource((ctu::TextConverter *)v34, (const char *)[a2 UTF8String], (unint64_t)[a2 length]);
  ctu::TextConverter::readChars((uint64_t *)&v31, (ctu::TextConverter *)v34, 0x7FFFFFFFuLL);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (v33 & 0x80u) == 0 ? (unsigned __int8 *)&v31 : (unsigned __int8 *)v31;
    uint64_t v9 = (v33 & 0x80u) == 0 ? v33 : v32;
    sub_1004BF8F4((int)&v30, v8, v9, (std::string *)__p);
    uint64_t v10 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136380675;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#AML binary packed message: %{private}s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    if ((v33 & 0x80u) == 0) {
      os_log_type_t v22 = (unsigned __int8 *)&v31;
    }
    else {
      os_log_type_t v22 = (unsigned __int8 *)v31;
    }
    if ((v33 & 0x80u) == 0) {
      uint64_t v23 = v33;
    }
    else {
      uint64_t v23 = v32;
    }
    sub_1004BF8F4((int)&v30, v22, v23, (std::string *)buf);
    if (buf[23] >= 0) {
      uint64_t v24 = buf;
    }
    else {
      uint64_t v24 = *(unsigned char **)buf;
    }
    LODWORD(__dst[0]) = 136380675;
    *(void **)((char *)__dst + 4) = v24;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::sendBinarySms(NSString *, uint32_t &)", "%s\n", v25);
    if (v25 != __p) {
      free(v25);
    }
  }
  id v11 = objc_alloc_init((Class)CTBinarySMS);
  [v11 setContext:v6];
  [v11 setPortAddressingScheme:2];
  [v11 setSrcPort:0];
  [v11 setDstPort:*((unsigned int *)v5 + 21)];
  unint64_t v12 = v5 + 7;
  if (*((char *)v5 + 79) < 0)
  {
    sub_1000DC48C(__p, (void *)v5[7], v5[8]);
  }
  else
  {
    *(_OWORD *)long long __p = *v12;
    *(void *)&__p[16] = v5[9];
  }
  if (__p[23] >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = *(unsigned char **)__p;
  }
  [v11 setDestinationAddress:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)];
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  [v11 setSmscAddress:0];
  if ((v33 & 0x80u) == 0) {
    uint64_t v14 = &v31;
  }
  else {
    uint64_t v14 = v31;
  }
  if ((v33 & 0x80u) == 0) {
    uint64_t v15 = v33;
  }
  else {
    uint64_t v15 = v32;
  }
  [v11 setPayload:[NSData dataWithBytes:length:v14, v15]];
  [v11 setSmsType:1];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v16 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v17 = *(_DWORD *)v5;
    if (*((char *)v5 + 79) < 0)
    {
      sub_1000DC48C(buf, (void *)v5[7], v5[8]);
    }
    else
    {
      *(_OWORD *)long long buf = *v12;
      *(void *)&uint8_t buf[16] = v5[9];
    }
    uint64_t v18 = buf;
    if (buf[23] < 0) {
      uint64_t v18 = *(unsigned char **)buf;
    }
    int v19 = *((_DWORD *)v5 + 21);
    *(_DWORD *)long long __p = 136381443;
    *(void *)&__p[4] = "binary";
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)&__p[14] = v17;
    *(_WORD *)&__p[18] = 2081;
    *(void *)&__p[20] = v18;
    __int16 v41 = 1025;
    int v42 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#AML sending %{private}s SMS on inst %{public}d to %{private}s,dstPort,%{private}d", __p, 0x22u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    unsigned int v26 = *(_DWORD *)v5;
    if (*((char *)v5 + 79) < 0)
    {
      sub_1000DC48C(__dst, (void *)v5[7], v5[8]);
    }
    else
    {
      *(_OWORD *)long long __dst = *v12;
      uint64_t v36 = v5[9];
    }
    uint64_t v27 = __dst;
    if (v36 < 0) {
      uint64_t v27 = (void **)__dst[0];
    }
    int v28 = *((_DWORD *)v5 + 21);
    *(_DWORD *)long long buf = 136381443;
    *(void *)&uint8_t buf[4] = "binary";
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v26;
    *(_WORD *)&unsigned char buf[18] = 2081;
    *(void *)&buf[20] = v27;
    __int16 v38 = 1025;
    int v39 = v28;
    int v29 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v36) < 0) {
      operator delete(__dst[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::sendBinarySms(NSString *, uint32_t &)", "%s\n", v29);
    if (v29 != __p) {
      free(v29);
    }
  }
  id v20 = [[+[CTMessageCenter sharedMessageCenter](CTMessageCenter, "sharedMessageCenter") sendBinarySMS:v11 trackingID:a3];

  if ((char)v33 < 0) {
    operator delete(v31);
  }
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)v34);
  return v20;
}

void sub_1012E0B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_1012E0B84(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = (int *)(a1 + 1448);
  uint64_t v8 = sub_1012D65F8((int *)(a1 + 1448));
  id v9 = [objc_alloc((Class)CTXPCServiceSubscriptionContext) initWithSlot:sub_100554F5C(*(_DWORD *)v8)];
  id v10 = objc_alloc_init((Class)CTMessage);
  [v10 setContext:v9];
  [v10 addText:a2];
  if (a4)
  {
    id v11 = sub_1012D65F8(v7);
    if (*((char *)v11 + 143) < 0)
    {
      sub_1000DC48C(__p, (void *)v11[15], v11[16]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v11 + 15);
      *(void *)&__p[16] = v11[17];
    }
    if (__p[23] >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = *(unsigned char **)__p;
    }
    [v10 addRecipient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)];
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = *(_DWORD *)v8;
      uint64_t v16 = sub_1012D65F8(v7);
      if (*((char *)v16 + 143) < 0)
      {
        sub_1000DC48C(__dst, (void *)v16[15], v16[16]);
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)(v16 + 15);
        *(void *)&__dst[16] = v16[17];
      }
      uint64_t v21 = __dst;
      if (__dst[23] < 0) {
        uint64_t v21 = *(unsigned char **)__dst;
      }
      *(_DWORD *)long long __p = 136381187;
      *(void *)&__p[4] = "text";
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&__p[14] = v15;
      *(_WORD *)&__p[18] = 2081;
      *(void *)&__p[20] = v21;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#AML sending %{private}s SMS on inst %{public}d to %{private}s", __p, 0x1Cu);
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      unsigned int v22 = *(_DWORD *)v8;
      uint64_t v23 = sub_1012D65F8(v7);
      if (*((char *)v23 + 143) < 0)
      {
        sub_1000DC48C(v32, (void *)v23[15], v23[16]);
      }
      else
      {
        *(_OWORD *)uint64_t v32 = *(_OWORD *)(v23 + 15);
        uint64_t v33 = v23[17];
      }
      int v29 = v32;
      if (v33 < 0) {
        int v29 = (void **)v32[0];
      }
      *(_DWORD *)long long __dst = 136381187;
      *(void *)&__dst[4] = "text";
      *(_WORD *)&__dst[12] = 1026;
      *(_DWORD *)&__dst[14] = v22;
      *(_WORD *)&__dst[18] = 2081;
      *(void *)&__dst[20] = v29;
      char v30 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v33) < 0) {
        operator delete(v32[0]);
      }
LABEL_60:
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyAML::sendTextSms(NSString *, uint32_t &, BOOL)", "%s\n", v30);
      if (v30 != __p) {
        free(v30);
      }
    }
  }
  else
  {
    unint64_t v12 = sub_1012D65F8(v7);
    if (*((char *)v12 + 79) < 0)
    {
      sub_1000DC48C(__p, (void *)v12[7], v12[8]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v12 + 7);
      *(void *)&__p[16] = v12[9];
    }
    if (__p[23] >= 0) {
      unsigned int v17 = __p;
    }
    else {
      unsigned int v17 = *(unsigned char **)__p;
    }
    [v10 addRecipient:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17)]];
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    uint64_t v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = *(_DWORD *)v8;
      id v20 = sub_1012D65F8(v7);
      if (*((char *)v20 + 79) < 0)
      {
        sub_1000DC48C(__dst, (void *)v20[7], v20[8]);
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)(v20 + 7);
        *(void *)&__dst[16] = v20[9];
      }
      uint64_t v24 = __dst;
      if (__dst[23] < 0) {
        uint64_t v24 = *(unsigned char **)__dst;
      }
      *(_DWORD *)long long __p = 136381187;
      *(void *)&__p[4] = "text";
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&__p[14] = v19;
      *(_WORD *)&__p[18] = 2081;
      *(void *)&__p[20] = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#AML sending %{private}s SMS on inst %{public}d to %{private}s", __p, 0x1Cu);
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      unsigned int v27 = *(_DWORD *)v8;
      int v28 = sub_1012D65F8(v7);
      if (*((char *)v28 + 79) < 0)
      {
        sub_1000DC48C(v32, (void *)v28[7], v28[8]);
      }
      else
      {
        *(_OWORD *)uint64_t v32 = *(_OWORD *)(v28 + 7);
        uint64_t v33 = v28[9];
      }
      __int16 v31 = v32;
      if (v33 < 0) {
        __int16 v31 = (void **)v32[0];
      }
      *(_DWORD *)long long __dst = 136381187;
      *(void *)&__dst[4] = "text";
      *(_WORD *)&__dst[12] = 1026;
      *(_DWORD *)&__dst[14] = v27;
      *(_WORD *)&__dst[18] = 2081;
      *(void *)&__dst[20] = v31;
      char v30 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v33) < 0) {
        operator delete(v32[0]);
      }
      goto LABEL_60;
    }
  }
  [v10 setMessageType:1];
  [v10 setBypassSupportedMessageModesCheck:1];
  [v10 setSmsType:1];
  unsigned int v25 = [[+[CTMessageCenter sharedMessageCenter](CTMessageCenter, "sharedMessageCenter") sendSMS:v10 withMoreToFollow:0 trackingID:a3];

  return v25 == 0;
}

void sub_1012E1200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012E1228(uint64_t a1, unsigned int a2)
{
  uint64_t result = 67;
  if (a2 <= 0xE)
  {
    int v3 = 1 << a2;
    if (((1 << a2) & 0x5025) != 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231EC18);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning #AML Valid location with unknown or obsolete type", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        id v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "char CLEmergencyAML::positioningMethod(CLLocationType)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      return 67;
    }
    else
    {
      if ((v3 & 0x20A) != 0) {
        unsigned int v4 = 71;
      }
      else {
        unsigned int v4 = 67;
      }
      if ((v3 & 0x2C10) != 0) {
        return 87;
      }
      else {
        return v4;
      }
    }
  }
  return result;
}

NSString *sub_1012E13F8(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 length];
  int v4 = 0;
  do
  {
    uint64_t v5 = v4 + v3;
    unsigned int v6 = [+[NSString stringWithFormat:@"%d", v5] length];
    BOOL v7 = v4 == v6;
    int v4 = v6;
  }
  while (!v7);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  uint64_t v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#AML total message length,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSString *CLEmergencyAML::stringWithAppendedLength(NSString *)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return +[NSString stringWithFormat:@"%@%d", a2, v5];
}

uint64_t *sub_1012E1600(uint64_t a1)
{
  id v2 = (int *)(a1 + 1448);
  unsigned int v3 = sub_1012D65F8((int *)(a1 + 1448));
  if (*((char *)v3 + 31) < 0)
  {
    sub_1000DC48C(&v9, (void *)v3[1], v3[2]);
  }
  else
  {
    long long v9 = *(_OWORD *)(v3 + 1);
    uint64_t v10 = v3[3];
  }
  int v4 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)int v4 = v9;
  *(void *)(a1 + 1168) = v10;
  uint64_t v5 = sub_1012D65F8(v2);
  if (*((char *)v5 + 55) < 0)
  {
    sub_1000DC48C(&v9, (void *)v5[4], v5[5]);
  }
  else
  {
    long long v9 = *((_OWORD *)v5 + 2);
    uint64_t v10 = v5[6];
  }
  unsigned int v6 = (void **)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = v9;
  *(void *)(a1 + 1192) = v10;
  *(_DWORD *)(a1 + 280) = 4;
  uint64_t result = sub_1012D65F8(v2);
  if (*((unsigned char *)result + 80)) {
    int v8 = 7;
  }
  else {
    int v8 = 6;
  }
  *(_DWORD *)(a1 + 284) = v8;
  *(_DWORD *)(a1 + 276) = 3;
  *(_DWORD *)(a1 + 328) = 2;
  return result;
}

uint64_t sub_1012E1718(uint64_t a1, int a2)
{
  if (a2 > 25)
  {
    switch(a2)
    {
      case 26:
        return 4294967294;
      case 29:
        return 3;
      case 28:
        return 2;
      default:
LABEL_12:
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_10231EC18);
        }
        unsigned int v3 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #AML unexpected error code", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_10231EC18);
          }
          int v4 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual uint32_t CLEmergencyAML::getErrorCodePriority(Emergency::SessionErrorCode)", "%s\n", v4);
          if (v4 != (char *)buf) {
            free(v4);
          }
        }
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t result = 1;
    switch(a2)
    {
      case 0:
        return result;
      case 2:
        uint64_t result = 5;
        break;
      case 7:
      case 12:
        return 2;
      case 10:
      case 14:
        uint64_t result = 4294967293;
        break;
      case 16:
        uint64_t result = 4;
        break;
      default:
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_1012E1968(uint64_t a1, unsigned int a2)
{
  if (a2 < 0xA) {
    return dword_101DB30B0[a2];
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  unsigned int v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #AML unexpected error code", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231EC18);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLEmergencyAML::getAMLErrorCodePriority(CLEmergencyAML::AMLSessionErrorCode)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_1012E1B0C(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_10231EC18);
  }
  id v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd CLEmergencySessionReport::reset\"}", (uint8_t *)v3, 0x12u);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xBF80000000000009;
  *(unsigned char *)(a1 + 24) = 0;
}

BOOL sub_1012E1BFC(uint64_t a1)
{
  return sub_1012D5B1C((int *)(a1 + 1448)) || sub_1012DBFF4(a1) == 3;
}

BOOL sub_1012E1C40(uint64_t a1)
{
  return sub_1012D5EC0((int *)(a1 + 1448));
}

void sub_1012E1C48(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1012E1C78(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1012E1CA8(uint64_t a1)
{
  sub_1012E1CE4(a1, *(void **)(a1 + 16));
  id v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1012E1CE4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = a2;
    do
    {
      unsigned int v3 = (void *)*v2;
      sub_1012E1D28((uint64_t)(v2 + 2));
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
}

void sub_1012E1D28(uint64_t a1)
{
  id v2 = (void **)(a1 + 160);
  sub_1000A7B4C(&v2);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

uint64_t *sub_1012E1DA0(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    long long v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = operator new(0xD0uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *uint64_t v13 = 0;
  v13[1] = v6;
  sub_1012E1FF8((uint64_t)(v13 + 2), a3);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  id v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *id v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t i = (uint64_t *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1012E20B4((uint64_t)v23, 0);
  return i;
}

void sub_1012E1FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1012E20B4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_1012E1FF8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  long long v2 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  long long v3 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  long long v5 = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  long long v7 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v7;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  double result = *(double *)(a2 + 184);
  *(double *)(a1 + 184) = result;
  return result;
}

void sub_1012E20B4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1012E1D28((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1012E2110(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1012E214C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1012E2190(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  long long v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_101AADCA0();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    uint8x8_t v8 = &v11;
  }
  else {
    uint8x8_t v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v9 = a2;
    }
    else {
      long long v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)long long v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_1012E2304(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_1012E2348(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1012E2378(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1012E23E8(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1012E23E8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1012DC9CC(a3, *((_DWORD *)v5 + 8));
      long long v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1012E2468(uint64_t a1)
{
  sub_1012E24A4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1012E24A4(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      long long v4 = (std::__shared_weak_count *)v2[89];
      if (v4) {
        sub_1000DB0A0(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1012E24EC(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10017FA3C(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    sub_1012E2538((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_1012E2538(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[89];
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1012E2594(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1012E24A4(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_1012E25EC(uint64_t a1)
{
  return sub_1012DA788(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *sub_1012E25FC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  long long v11 = operator new(0x338uLL);
  void *v11 = 0;
  v11[1] = v7;
  sub_1012E2848((uint64_t)(v11 + 2), *a4);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    *unint64_t v21 = v11;
    goto LABEL_39;
  }
  void *v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1012E282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_1012E2538(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1012E2848(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)a1 = *a2;
  bzero((void *)(a1 + 160), 0x288uLL);
  *(_DWORD *)(a1 + 8) = 0xFFFF;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 44) = _Q0;
  *(_OWORD *)(a1 + 60) = _Q0;
  *(_OWORD *)(a1 + 76) = _Q0;
  *(_DWORD *)(a1 + 92) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 132) = 0x7FFFFFFF;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  sub_1000DBC34(a1 + 168);
  return a1;
}

id sub_1012E3D64(void *a1, int a2)
{
  uint64_t v4 = sub_100881C8C(a1);
  if (v4 != -1)
  {
    int v5 = v4;
    id v6 = [objc_alloc((Class)NSData) _cl_initWithFileDescriptor:v4];
    close(v5);
    if (!a2) {
      return v6;
    }
    goto LABEL_9;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10231EDF0);
  }
  unint64_t v7 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    v10[0] = 68289283;
    v10[1] = 0;
    __int16 v11 = 2082;
    unint64_t v12 = "";
    __int16 v13 = 2113;
    float v14 = a1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning could not open file\", \"path\":%{private, location:escape_only}@}", (uint8_t *)v10, 0x1Cu);
  }
  id v6 = 0;
  if (a2)
  {
LABEL_9:
    unint64_t v8 = +[NSURL fileURLWithPath:a1];
    if (v8) {
      sub_1012E4228(v8);
    }
  }
  return v6;
}

BOOL sub_1012E4228(void *a1)
{
  if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", [a1 path]))
  {
    v8[0] = 0;
    [+[NSFileManager defaultManager] removeItemAtURL:a1 error:v8];
    if (v8[0])
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EDF0);
      }
      uint64_t v2 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 68289539;
        *(_DWORD *)uint64_t v10 = 0;
        *(_WORD *)&_DWORD v10[4] = 2082;
        *(void *)&_DWORD v10[6] = "";
        __int16 v11 = 2114;
        unint64_t v12 = a1;
        __int16 v13 = 2113;
        uint64_t v14 = v8[0];
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to remove fs item\", \"URL\":%{public, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_10231EDF0);
        }
      }
      uint64_t v3 = qword_102419568;
      if (os_signpost_enabled((os_log_t)qword_102419568))
      {
        *(_DWORD *)long long buf = 68289539;
        *(_DWORD *)uint64_t v10 = 0;
        *(_WORD *)&_DWORD v10[4] = 2082;
        *(void *)&_DWORD v10[6] = "";
        __int16 v11 = 2114;
        unint64_t v12 = a1;
        __int16 v13 = 2113;
        uint64_t v14 = v8[0];
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to remove fs item", "{\"msg%{public}.0s\":\"failed to remove fs item\", \"URL\":%{public, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EDF0);
      }
      id v6 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 68289283;
        *(_DWORD *)uint64_t v10 = 0;
        *(_WORD *)&_DWORD v10[4] = 2082;
        *(void *)&_DWORD v10[6] = "";
        __int16 v11 = 2113;
        unint64_t v12 = a1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"removed fs item\", \"URL\":%{private, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    return v8[0] == 0;
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10231EDF0);
    }
    uint64_t v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)uint64_t v10 = [a1 path];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "file does not exists. CheckAndRemoveItemAtPath : %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EDF0);
      }
      LODWORD(v8[0]) = 138412290;
      *(void *)((char *)v8 + 4) = [a1 path];
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL _CLHRemoveItemAtURL(NSURL *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 1;
  }
}

NSArray *sub_1012E5C74(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t result = [+[NSFileManager defaultManager](NSFileManager, "defaultManager") contentsOfDirectoryAtURL:+[NSURL fileURLWithPath:a1] includingPropertiesForKeys:0 options:0 error:&v5];
  if (v5)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10231EDF0);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      uint8x8_t v9 = "";
      __int16 v10 = 2114;
      uint64_t v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error finding contents of directory\", \"directory\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EDF0);
      }
    }
    uint64_t v4 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      *(_DWORD *)long long buf = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      uint8x8_t v9 = "";
      __int16 v10 = 2114;
      uint64_t v11 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error finding contents of directory", "{\"msg%{public}.0s\":\"Error finding contents of directory\", \"directory\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return 0;
  }
  return result;
}

int64_t sub_1012E6008(id a1, NSURL *a2, NSURL *a3)
{
  id v6 = [[(NSString *)[(NSURL *)a2 path] lastPathComponent] componentsSeparatedByString:@"-"];
  int v7 = [[(NSString *)[(NSURL *)a3 path] lastPathComponent] componentsSeparatedByString:@"-"];
  [v6 objectAtIndexedSubscript:1].doubleValue;
  double v9 = v8;
  [v7 objectAtIndexedSubscript:1].doubleValue
  if (v9 >= v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = -1;
  }
  if (v9 > v10) {
    int64_t v12 = 1;
  }
  else {
    int64_t v12 = v11;
  }
  return v12;
}

id sub_1012E6934(uint64_t a1, void *a2)
{
  return [a2 pruneSecondaryDataOlderThan:*(double *)(a1 + 32)];
}

void sub_1012E6B30(id a1, CLHRequestArchive *a2)
{
  [(CLHRequestArchive *)a2 eraseAllData];
  uint64_t v3 = +[NSURL fileURLWithPath:[(CLHRequestArchive *)a2 directory]];
  if (v3)
  {
    sub_1012E4228(v3);
  }
}

void sub_1012E76AC(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

BOOL sub_1012E76DC(id a1, NSURL *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10231EDF0);
    }
    uint64_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      __int16 v13 = a2;
      __int16 v14 = 2114;
      float v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLHRequestArchive auto clean-up. Enumeration error\", \"Item\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x26u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10231EDF0);
      }
    }
    id v6 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v8 = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      __int16 v13 = a2;
      __int16 v14 = 2114;
      float v15 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLHRequestArchive auto clean-up. Enumeration error", "{\"msg%{public}.0s\":\"CLHRequestArchive auto clean-up. Enumeration error\", \"Item\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x26u);
    }
  }
  return 1;
}

void sub_1012E7888()
{
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "CLPowerLogEnable", (BOOL *)&byte_102477430);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_100103240();
  if (sub_10073CEB4())
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_10231EE50);
    }
    uint64_t v0 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Power Log not supported on Base System", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_10231EE50);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPowerLogInit()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    byte_102477430 = 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231EE70);
  }
  uint64_t v1 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = byte_102477430;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "PowerLog: g_enableLocPowerLog, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231EE70);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPowerLogInit()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_1012E7BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012E7BCC(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1012E7BFC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1012E7C38(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 77);
}

BOOL sub_1012E7C44(uint64_t a1)
{
  return *(unsigned char *)(a1 + 76) && *(_DWORD *)(a1 + 80) && *(unsigned char *)(a1 + 77) == 0;
}

BOOL sub_1012E7C70(uint64_t a1)
{
  return *(int *)(a1 + 72) >= 1 && *(_DWORD *)(a1 + 80) && *(unsigned char *)(a1 + 77) == 0;
}

BOOL sub_1012E7CA0(uint64_t a1)
{
  return *(int *)(a1 + 72) >= 1 && *(unsigned char *)(a1 + 76) && *(unsigned char *)(a1 + 77) == 0;
}

void sub_1012E7CD8(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(void *)a1 = &unk_10231EE90;
  *(void *)(a1 + 8) = 12;
  *(_WORD *)(a1 + 16) = 512;
  id v8 = [objc_msgSend(a2, "silo") newTimer];
  *(void *)(a1 + 32) = 0x402E000000000000;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = *a3;
  uint64_t v9 = a3[1];
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = *a4;
  uint64_t v10 = a4[1];
  *(void *)(a1 + 64) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  sub_100134750(v15, "WorkoutSignificantElevation");
  sub_1008AFE90(a1 + 88, v15);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  sub_100134750(__p, "AWD_PhoneSignificantElevation");
  sub_1008AFE90(a1 + 784, __p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(v11, "AWD_WatchSignificantElevation");
  sub_1008AFE90(a1 + 1480, v11);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(void *)(a1 + 2256) = 0;
  sub_100893AE4(a1 + 2272);
  *(void *)(a1 + 2360) = 0;
  *(void *)(a1 + 2368) = a2;
  operator new();
}

void sub_1012E7FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v31 = *(void *)(v29 + 2376);
  *(void *)(v29 + 2376) = 0;
  if (v31) {
    sub_1012EAA90(v29 + 2376, v31);
  }
  uint64_t v32 = *(void *)(v29 + 2360);
  *(void *)(v29 + 2360) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  if (*(char *)(v29 + 2175) < 0) {
    operator delete(*(void **)(v29 + 2152));
  }
  if (*(char *)(v29 + 1479) < 0) {
    operator delete(*(void **)(v29 + 1456));
  }
  if (*(char *)(v29 + 783) < 0) {
    operator delete(*(void **)(v29 + 760));
  }
  uint64_t v33 = *(std::__shared_weak_count **)(v29 + 64);
  if (v33) {
    sub_1000DB0A0(v33);
  }
  double v34 = *(std::__shared_weak_count **)(v29 + 48);
  if (v34) {
    sub_1000DB0A0(v34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012E8134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 2368), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231EFB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLElevationController::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231EFB0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      float v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLElevationController::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012E986C(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012E82E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012E8308(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 76) = 0;
  return sub_1001A34E0(v1, 5, (uint64_t)&v3);
}

uint64_t sub_1012E833C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2360);
  *(void *)(a1 + 2360) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 2376);
  *(void *)(a1 + 2376) = 0;
  if (v3) {
    sub_1012EAA90(a1 + 2376, v3);
  }
  uint64_t v4 = *(void *)(a1 + 2360);
  *(void *)(a1 + 2360) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 2175) < 0) {
    operator delete(*(void **)(a1 + 2152));
  }
  if (*(char *)(a1 + 1479) < 0) {
    operator delete(*(void **)(a1 + 1456));
  }
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return a1;
}

void sub_1012E8420(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 40) = 1000;
  *(_DWORD *)(a3 + 48) = -1082130432;
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  uint64_t v6 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a2 + 8);
    int v8 = *(_DWORD *)(a2 + 16);
    int v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)long long buf = 134349568;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v8;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationPhone,fusionInput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    double v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLElevationChangeEntry CLElevationController::elevationUpdatePhone(CLElevationChangeEntry)", "%s\n", v34);
    if (v34 != buf) {
      free(v34);
    }
  }
  if (*(_DWORD *)(a1 + 80))
  {
    if (*(_DWORD *)(a2 + 16) || *(_DWORD *)(a2 + 20))
    {
      double v10 = sub_101268834(*(void *)(a1 + 2376));
      double v11 = sub_10126883C(*(void *)(a1 + 2376));
      sub_101268844(*(void *)(a1 + 2376), a2, buf);
      long long v12 = *(_OWORD *)&buf[16];
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(_OWORD *)(a3 + 16) = v12;
      long long v13 = *(_OWORD *)&v39[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v39;
      *(_OWORD *)(a3 + 48) = v13;
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231EFD0);
      }
      __int16 v14 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(a3 + 8);
        int v16 = *(_DWORD *)(a3 + 16);
        int v17 = *(_DWORD *)(a3 + 20);
        int v18 = *(_DWORD *)(a3 + 40);
        *(_DWORD *)long long buf = 134350337;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v16;
        *(_WORD *)&unsigned char buf[18] = 1026;
        *(_DWORD *)&buf[20] = v17;
        *(_WORD *)&unsigned char buf[24] = 1026;
        *(_DWORD *)&buf[26] = v18;
        *(_WORD *)&buf[30] = 2049;
        *(double *)int v39 = v10;
        *(_WORD *)&v39[8] = 2049;
        *(double *)&v39[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationPhone,fusionOutput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,source,%{public}d,minGpsAltitudeInMeter,%{private}.3lf,maxGpsAltitudeInMeter,%{private}.3lf", buf, 0x32u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10231EFD0);
        }
        double v35 = *(double *)(a3 + 8);
        unsigned int v20 = *(_DWORD *)(a3 + 16);
        unsigned int v21 = *(_DWORD *)(a3 + 20);
        int v22 = *(_DWORD *)(a3 + 40);
        uint64_t v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLElevationChangeEntry CLElevationController::elevationUpdatePhone(CLElevationChangeEntry)", "%s\n", v36);
        double v19 = v35;
        if (v36 != buf) {
          free(v36);
        }
      }
      else
      {
        double v19 = *(double *)(a3 + 8);
        unsigned int v20 = *(_DWORD *)(a3 + 16);
        unsigned int v21 = *(_DWORD *)(a3 + 20);
        int v22 = *(_DWORD *)(a3 + 40);
      }
      sub_1001952B8((unsigned __int16 *)(a1 + 88), v20, v21, v22, v19);
      *(void *)(a1 + 2216) = *(void *)(a1 + 632);
      sub_1001952C0(v19, a1 + 88, a1 + 2176);
      double v23 = sub_10126A69C(*(void *)(a1 + 2376), a2);
      *(double *)(a1 + 2224) = v23;
      *(unsigned char *)(a1 + 2232) = 1;
      if (v23 > 0.0)
      {
        sub_1001A796C(*(void *)(a1 + 56), a1 + 2176);
        *(void *)(a1 + 2248) = *(void *)(a1 + 2200);
        double Current = CFAbsoluteTimeGetCurrent();
        double v25 = Current;
        if (*(unsigned char *)(a1 + 2240) || *(unsigned char *)(a1 + 2232) && Current - *(double *)(a1 + 2256) > 15.0)
        {
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10231EFD0);
          }
          unsigned int v26 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *(void *)(a1 + 2200);
            int v28 = *(_DWORD *)(a1 + 2216);
            int v29 = *(_DWORD *)(a1 + 2220);
            int v30 = *(unsigned __int8 *)(a1 + 2232);
            uint64_t v31 = *(void *)(a1 + 2224);
            *(_DWORD *)long long buf = 134350080;
            *(void *)&uint8_t buf[4] = v27;
            *(_WORD *)&unsigned char buf[12] = 1026;
            *(_DWORD *)&unsigned char buf[14] = v28;
            *(_WORD *)&unsigned char buf[18] = 1026;
            *(_DWORD *)&buf[20] = v29;
            *(_WORD *)&unsigned char buf[24] = 1026;
            *(_DWORD *)&buf[26] = v30;
            *(_WORD *)&buf[30] = 2050;
            *(void *)int v39 = v31;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "writing data to elevationDB for watch with companion phone during workout,startTime,%{public}.3lf,ascend,%{public}d,descend,%{public}d,workout,%{public}d,pressure,%{public}.5lf", buf, 0x28u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_10231EFD0);
            }
            __int16 v37 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLElevationChangeEntry CLElevationController::elevationUpdatePhone(CLElevationChangeEntry)", "%s\n", v37);
            if (v37 != buf) {
              free(v37);
            }
          }
          *(double *)(a1 + 2256) = v25;
        }
      }
    }
    else
    {
      unsigned int v21 = 0;
      unsigned int v20 = 0;
      double v19 = 0.0;
    }
    sub_1001952B8((unsigned __int16 *)(a1 + 784), v20, v21, 0, v19);
    uint64_t v32 = sub_1001A58C0();
    sub_101432B78(v32, *(_DWORD *)(a1 + 1328));
    uint64_t v33 = (dispatch_queue_t *)sub_10019F4CC();
    sub_100F2B94C(v33, *(_DWORD *)(a1 + 1328));
  }
}

void sub_1012E8AF0(uint64_t a1, long long *a2, void **a3)
{
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    sub_100893B60(a1 + 2272, *((_DWORD *)a2 + 11), *(_DWORD *)(a1 + 80), *((_WORD *)a2 + 27), *((float *)a2 + 12));
  }
  if (!*(unsigned char *)(a1 + 16) && (*((_DWORD *)a2 + 4) || *((_DWORD *)a2 + 5)))
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[3];
    *(_OWORD *)&v62[16] = a2[2];
    *(_OWORD *)&v62[32] = v8;
    long long v61 = v6;
    *(_OWORD *)long long v62 = v7;
    if ((sub_1000A16E8() & 0x1000000000) != 0 && *(_DWORD *)(a1 + 80)) {
      v62[36] = *(_DWORD *)(a1 + 2332);
    }
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    int v9 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134350336;
      *(void *)&uint8_t buf[4] = *((void *)&v61 + 1);
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = *(_DWORD *)v62;
      *(_WORD *)&unsigned char buf[18] = 1026;
      unsigned int v78 = *(_DWORD *)&v62[4];
      LOWORD(v79) = 2050;
      *(double *)((char *)&v79 + 2) = *(float *)&v62[32];
      WORD5(v79) = 1026;
      HIDWORD(v79) = v62[36];
      *(_WORD *)long long v80 = 1026;
      *(_DWORD *)&v80[2] = *(_DWORD *)&v62[28];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationWatch,fusionInput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,pressureAmplitude,%{public}f,pressureQuality,%{public}d,deltaSteps,%{public}d", buf, 0x2Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231EFD0);
      }
      int v63 = 134350336;
      double v64 = *((double *)&v61 + 1);
      __int16 v65 = 1026;
      unsigned int v66 = *(_DWORD *)v62;
      __int16 v67 = 1026;
      unsigned int v68 = *(_DWORD *)&v62[4];
      __int16 v69 = 2050;
      *(double *)long long v70 = *(float *)&v62[32];
      *(_WORD *)&_OWORD v70[8] = 1026;
      *(_DWORD *)&v70[10] = v62[36];
      __int16 v71 = 1026;
      LODWORD(v72) = *(_DWORD *)&v62[28];
      long long v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::elevationUpdateWatch(std::vector<CLElevationChangeEntry>::const_iterator, std::vector<CLElevationChangeEntry> &)", "%s\n", v51);
      if (v51 != buf) {
        free(v51);
      }
    }
    int v10 = 1;
    *(_DWORD *)&v62[24] = 1;
    double v11 = *((double *)&v61 + 1);
    uint64_t v12 = v61;
    unsigned int v13 = *(_DWORD *)v62;
    unsigned int v14 = *(_DWORD *)&v62[4];
    long long v60 = *(_OWORD *)&v62[8];
    long long v75 = *(_OWORD *)&v62[28];
    char v76 = v62[44];
    if (*(_DWORD *)(a1 + 80))
    {
      double v15 = sub_101268834(*(void *)(a1 + 2376));
      double v16 = sub_10126883C(*(void *)(a1 + 2376));
      sub_101269080(*(void *)(a1 + 2376), (uint64_t)&v61, buf);
      uint64_t v12 = *(void *)buf;
      double v11 = *(double *)&buf[8];
      unsigned int v13 = *(_DWORD *)&buf[16];
      unsigned int v14 = v78;
      long long v60 = v79;
      int v10 = *(_DWORD *)v80;
      long long v75 = *(_OWORD *)&v80[4];
      char v76 = v81;
      __int16 v17 = v82;
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231EFD0);
      }
      int v18 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134350337;
        *(double *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v13;
        *(_WORD *)&unsigned char buf[18] = 1026;
        unsigned int v78 = v14;
        LOWORD(v79) = 1026;
        *(_DWORD *)((char *)&v79 + 2) = v10;
        WORD3(v79) = 2049;
        *((double *)&v79 + 1) = v15;
        *(_WORD *)long long v80 = 2049;
        *(double *)&v80[2] = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WorkoutElevation,onElevationWatch,fusionOutput,startTime,%{public}.3lf,ascended,%{public}d,descended,%{public}d,source,%{public}d,minGpsAltitudeInMeter,%{private}.3lf,maxGpsAltitudeInMeter,%{private}.3lf", buf, 0x32u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10231EFD0);
        }
        int v63 = 134350337;
        double v64 = v11;
        __int16 v65 = 1026;
        unsigned int v66 = v13;
        __int16 v67 = 1026;
        unsigned int v68 = v14;
        __int16 v69 = 1026;
        *(_DWORD *)long long v70 = v10;
        *(_WORD *)&v70[4] = 2049;
        *(double *)&v70[6] = v15;
        __int16 v71 = 2049;
        double v72 = v16;
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::elevationUpdateWatch(std::vector<CLElevationChangeEntry>::const_iterator, std::vector<CLElevationChangeEntry> &)", "%s\n", v19);
        if (v19 != buf) {
          free(v19);
        }
      }
    }
    else
    {
      __int16 v17 = *(_WORD *)&v62[46];
    }
    char v20 = v62[45];
    unsigned int v21 = (char *)a3[2];
    int v22 = (char *)a3[1];
    if (v22 >= v21)
    {
      uint64_t v24 = (v22 - (unsigned char *)*a3) >> 6;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 58) {
        sub_1001D7FD4();
      }
      uint64_t v26 = v21 - (unsigned char *)*a3;
      if (v26 >> 5 > v25) {
        unint64_t v25 = v26 >> 5;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27) {
        int v28 = (char *)sub_10017EAF0((uint64_t)(a3 + 2), v27);
      }
      else {
        int v28 = 0;
      }
      int v29 = &v28[64 * v24];
      int v30 = &v28[64 * v27];
      *(void *)int v29 = v12;
      *((double *)v29 + 1) = v11;
      *((_DWORD *)v29 + 4) = v13;
      *((_DWORD *)v29 + 5) = v14;
      *(_OWORD *)(v29 + 24) = v60;
      *((_DWORD *)v29 + 10) = v10;
      v29[60] = v76;
      *(_OWORD *)(v29 + 44) = v75;
      v29[61] = v20;
      *((_WORD *)v29 + 31) = v17;
      double v23 = v29 + 64;
      uint64_t v32 = (char *)*a3;
      uint64_t v31 = (char *)a3[1];
      if (v31 != *a3)
      {
        do
        {
          long long v33 = *((_OWORD *)v31 - 4);
          long long v34 = *((_OWORD *)v31 - 3);
          long long v35 = *((_OWORD *)v31 - 1);
          *((_OWORD *)v29 - 2) = *((_OWORD *)v31 - 2);
          *((_OWORD *)v29 - 1) = v35;
          *((_OWORD *)v29 - 4) = v33;
          *((_OWORD *)v29 - 3) = v34;
          v29 -= 64;
          v31 -= 64;
        }
        while (v31 != v32);
        uint64_t v31 = (char *)*a3;
      }
      *a3 = v29;
      a3[1] = v23;
      a3[2] = v30;
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *(void *)int v22 = v12;
      *((double *)v22 + 1) = v11;
      *((_DWORD *)v22 + 4) = v13;
      *((_DWORD *)v22 + 5) = v14;
      *(_OWORD *)(v22 + 24) = v60;
      *((_DWORD *)v22 + 10) = v10;
      *(_OWORD *)(v22 + 44) = v75;
      v22[60] = v76;
      v22[61] = v20;
      double v23 = v22 + 64;
      *((_WORD *)v22 + 31) = v17;
    }
    a3[1] = v23;
    if ((sub_1000A16E8() & 0x1000000000) != 0)
    {
      int v36 = *(_DWORD *)(a1 + 80);
      if (v36)
      {
        sub_1001952B8((unsigned __int16 *)(a1 + 88), v13, v14, v10, v11);
        uint64_t v37 = *(void *)(a1 + 632);
        LOBYTE(v36) = 1;
      }
      else
      {
        uint64_t v37 = 0;
      }
      *(void *)(a1 + 2216) = v37;
      *(unsigned char *)(a1 + 2232) = v36;
      sub_1001952C0(v11, a1 + 88, a1 + 2176);
      *(double *)(a1 + 2224) = *(float *)&v62[40];
      sub_10126A694(*(void *)(a1 + 2376));
      if (*(double *)(a1 + 2224) > 0.0)
      {
        double v38 = *(double *)(a1 + 2248);
        if (v38 == 1.79769313e308
          || *(unsigned char *)(a1 + 2232)
          || vabdd_f64(*(double *)(a1 + 2200), v38) > *(double *)(a1 + 2264))
        {
          sub_1001A796C(*(void *)(a1 + 56), a1 + 2176);
          *(void *)(a1 + 2248) = *(void *)(a1 + 2200);
          double Current = CFAbsoluteTimeGetCurrent();
          double v40 = Current;
          if (*(unsigned char *)(a1 + 2240) || *(unsigned char *)(a1 + 2232) && Current - *(double *)(a1 + 2256) > 15.0)
          {
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_10231EFD0);
            }
            __int16 v41 = qword_1024190D8;
            if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v42 = *(void *)(a1 + 2200);
              int v43 = *(_DWORD *)(a1 + 2216);
              unsigned int v44 = *(_DWORD *)(a1 + 2220);
              int v45 = *(unsigned __int8 *)(a1 + 2232);
              uint64_t v46 = *(void *)(a1 + 2224);
              double v47 = *((float *)a2 + 12);
              unsigned __int8 v48 = v62[36];
              if (!*(unsigned char *)(a1 + 2232)) {
                unsigned __int8 v48 = 0;
              }
              *(_DWORD *)long long buf = 134350592;
              *(void *)&uint8_t buf[4] = v42;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)&unsigned char buf[14] = v43;
              *(_WORD *)&unsigned char buf[18] = 1026;
              unsigned int v78 = v44;
              LOWORD(v79) = 1026;
              *(_DWORD *)((char *)&v79 + 2) = v45;
              WORD3(v79) = 2050;
              *((void *)&v79 + 1) = v46;
              *(_WORD *)long long v80 = 2050;
              *(double *)&v80[2] = v47;
              *(_WORD *)&v80[10] = 1026;
              *(_DWORD *)&v80[12] = v48;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "writing data to elevationDB for watch,startTime,%{public}.3lf,ascend,%{public}d,descend,%{public}d,workout,%{public}d,pressure,%{public}.5lf,pressureAmplitude,%{public}f,pressureQuality,%{public}d", buf, 0x38u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190D0 != -1) {
                dispatch_once(&qword_1024190D0, &stru_10231EFD0);
              }
              double v52 = *(double *)(a1 + 2200);
              unsigned int v53 = *(_DWORD *)(a1 + 2216);
              unsigned int v54 = *(_DWORD *)(a1 + 2220);
              int v55 = *(unsigned __int8 *)(a1 + 2232);
              uint64_t v56 = *(void *)(a1 + 2224);
              double v57 = *((float *)a2 + 12);
              unsigned __int8 v58 = v62[36];
              if (!*(unsigned char *)(a1 + 2232)) {
                unsigned __int8 v58 = 0;
              }
              int v63 = 134350592;
              double v64 = v52;
              __int16 v65 = 1026;
              unsigned int v66 = v53;
              __int16 v67 = 1026;
              unsigned int v68 = v54;
              __int16 v69 = 1026;
              *(_DWORD *)long long v70 = v55;
              *(_WORD *)&v70[4] = 2050;
              *(void *)&v70[6] = v56;
              __int16 v71 = 2050;
              double v72 = v57;
              __int16 v73 = 1026;
              int v74 = v58;
              double v59 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::elevationUpdateWatch(std::vector<CLElevationChangeEntry>::const_iterator, std::vector<CLElevationChangeEntry> &)", "%s\n", v59);
              if (v59 != buf) {
                free(v59);
              }
            }
            *(double *)(a1 + 2256) = v40;
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 80))
  {
    sub_1001952B8((unsigned __int16 *)(a1 + 1480), *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), 1, *((double *)a2 + 1));
    uint64_t v49 = sub_1001A58C0();
    sub_101432C14(v49, *(_DWORD *)(a1 + 2024));
    double v50 = (dispatch_queue_t *)sub_10019F4CC();
    sub_100F2B8A8(v50, *(_DWORD *)(a1 + 2024));
  }
}

uint64_t sub_1012E9458(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 72) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 72) = a2;
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v3 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      int v4 = *(_DWORD *)(v2 + 72);
      *(_DWORD *)long long buf = 67109120;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "WorkoutElevation,clients,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10231EFD0);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::updateElevationSubscriptionClient(int)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (*(int *)(v2 + 72) < 1) {
      int v5 = 2;
    }
    else {
      int v5 = 1;
    }
    return sub_1001A34E0(v2, v5, (uint64_t)buf);
  }
  return result;
}

uint64_t sub_1012E9640(uint64_t a1, int a2, int a3)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  long long v6 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 76);
    *(_DWORD *)long long buf = 67109632;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = a2;
    __int16 v17 = 1024;
    int v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WorkoutElevation,phone connection,prev,%d,curr,%d,elev,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::updatePhoneConnectionStatus(BOOL, BOOL)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  int v8 = a2 & a3;
  if (*(_DWORD *)(a1 + 80) && (v8 & 1) == 0 && *(unsigned char *)(a1 + 76) || (*(unsigned char *)(a1 + 76) = v8, !v8))
  {
    uint64_t v9 = a1;
    int v10 = 4;
  }
  else
  {
    uint64_t v9 = a1;
    int v10 = 3;
  }
  return sub_1001A34E0(v9, v10, (uint64_t)buf);
}

uint64_t sub_1012E986C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 80);
  if (v6) {
    sub_10126B80C(*(_DWORD **)(a1 + 2376), v6);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a4 + 8);
  sub_1008AFC80(a1 + 88);
  sub_10113101C(*(void *)(a1 + 40));
  sub_101268AFC(*(void *)(a1 + 2376));
  sub_1008AFC80(a1 + 784);
  sub_1008AFC80(a1 + 1480);
  if (*(_DWORD *)(a1 + 80))
  {
    int v7 = &v12;
    uint64_t v8 = a1;
    int v9 = 6;
  }
  else
  {
    int v7 = &v11;
    uint64_t v8 = a1;
    int v9 = 7;
  }
  return sub_1001A34E0(v8, v9, (uint64_t)v7);
}

void sub_1012E9900(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1012E9908(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 77) != a2)
  {
    *(unsigned char *)(result + 77) = a2;
    return sub_1001A34E0(result, 8, (uint64_t)&v2);
  }
  return result;
}

void sub_1012E9940(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012E9970(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

id sub_1012E99A0(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::ENoActiveClients]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    sub_1012E9B80(*(void *)(a1 + 2376), 0);
  }
  else {
    sub_1008AFE94(a1 + 88);
  }
  [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
  return [(([(([(*(id *)(a1 + 2368)) vendor]) proxyForService:@"CLOdometerNotifier") updatePhoneWorkoutElevationSubscription:0];
}

void sub_1012E9B80(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 640) = a2;
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void ***)(a1 + 152);
    uint64_t v4 = *(void *)(a1 + 160);
    *(void *)(a1 + 184) = 0;
    unint64_t v5 = v4 - (void)v3;
    if (v5 >= 0x11)
    {
      do
      {
        operator delete(*v3);
        uint64_t v6 = *(void *)(a1 + 160);
        uint64_t v3 = (void **)(*(void *)(a1 + 152) + 8);
        *(void *)(a1 + 152) = v3;
        unint64_t v5 = v6 - (void)v3;
      }
      while (v5 > 0x10);
    }
    if (v5 >> 3 == 1)
    {
      uint64_t v7 = 32;
    }
    else
    {
      if (v5 >> 3 != 2) {
        return;
      }
      uint64_t v7 = 64;
    }
    *(void *)(a1 + 176) = v7;
  }
}

id sub_1012E9C00(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WorkoutElevation,subs,phone,waitingToUnsubscribe", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doWaitToUnsubscribe(const T *) [T = CLElevationController::ESourceUnavailable]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 24) setNextFireDelay:*(double *)(a1 + 32)];
}

id sub_1012E9DA0(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::EWorkoutStop]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    sub_1012E9B80(*(void *)(a1 + 2376), 0);
  }
  else {
    sub_1008AFE94(a1 + 88);
  }
  [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
  return
}

id sub_1012E9F80(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::EPowerSaveModeChanged]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    sub_1012E9B80(*(void *)(a1 + 2376), 0);
  }
  else {
    sub_1008AFE94(a1 + 88);
  }
  [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
  return [[[objc_msgSend(*(id *)(a1 + 2368), "vendor") proxyForService:@"CLOdometerNotifier"] updatePhoneWorkoutElevationSubscription:0];
}

id sub_1012EA160(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doSubscribe(const T *) [T = CLElevationController::EClientActive]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    *(unsigned char *)(*(void *)(a1 + 2376) + 640) = 1;
  }
  else {
    sub_1008AFE94(a1 + 88);
  }
  [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
  return [(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)(((id)((
}

id sub_1012EA344(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doSubscribe(const T *) [T = CLElevationController::ESourceAvailable]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    *(unsigned char *)(*(void *)(a1 + 2376) + 640) = 1;
  }
  else {
    sub_1008AFE94(a1 + 88);
  }
  [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
  return [[[*(id *)(a1 + 2368) vendor] proxyForService:@"CLOdometerNotifier"] updatePhoneWorkoutElevationSubscription:1];
}

id sub_1012EA528(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doSubscribe(const T *) [T = CLElevationController::EWorkoutStart]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    *(unsigned char *)(*(void *)(a1 + 2376) + 640) = 1;
  }
  else {
    sub_1008AFE94(a1 + 88);
  }
  [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
  return
}

id sub_1012EA70C(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WorkoutElevation,subs,phone,cancelWaitingToUnsubscribe", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doCancelWaitToUnsubscribe(const T *) [T = CLElevationController::ESourceAvailable]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
}

id sub_1012EA8B0(uint64_t a1)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10231EFD0);
  }
  char v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "WorkoutElevation,subs,phone,0", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10231EFD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationController::doUnsubscribe(const T *) [T = CLElevationController::ETimerExpires]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ((sub_1000A16E8() & 0x1000000000) != 0) {
    sub_1012E9B80(*(void *)(a1 + 2376), 0);
  }
  else {
    sub_1008AFE94(a1 + 88);
  }
  [*(id *)(a1 + 24) setNextFireDelay:1.79769313e308];
  return [[[[*(id *)(a1 + 2368) vendor] proxyForService:@"CLOdometerNotifier"] updatePhoneWorkoutElevationSubscription:0];
}

void sub_1012EAA90(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10041F48C((void *)(a2 + 344));
    sub_10041F48C((void *)(a2 + 296));
    *(void *)(a2 + 192) = off_1022B2000;
    sub_1000F5BB0(a2 + 256, *(void **)(a2 + 264));
    sub_10041F48C((void *)(a2 + 208));
    sub_100507624((void *)(a2 + 144));
    sub_1006AAD08((void *)(a2 + 96));
    sub_100507624((void *)(a2 + 48));
    sub_1006AAD08((void *)a2);
    operator delete();
  }
}

uint64_t sub_1012EAB3C()
{
  sub_100134750(qword_102486B90, "Acc800Fp");
  dword_102486BA8 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102486B90, (void *)&_mh_execute_header);
  sub_100134750(qword_102486BB0, "DmFp");
  dword_102486BC8 = 200;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102486BB0, (void *)&_mh_execute_header);
  sub_100134750(qword_102486BD0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486BD0, (void *)&_mh_execute_header);
}

void sub_1012EAC18(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  char v2 = (void *)(a1 + 112);
  sub_1006FE1A8(a1 + 104, *(void **)(a1 + 112));
  *(void *)(v1 + 104) = v2;
  *(void *)(v1 + 120) = 0;
  *char v2 = 0;
  sub_1006FE1A8(v1 + 56, *(void **)(v1 + 64));
  *(void *)(v1 + 56) = v1 + 64;
  *(void *)(v1 + 64) = 0;
  uint64_t v3 = *(void **)(v1 + 88);
  v1 += 88;
  *(void *)(v1 - 16) = 0;
  sub_1006FE1A8(v1 - 8, v3);
  *(void *)(v1 - 8) = v1;
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
}

void sub_1012EAC98(void *a1, int a2)
{
  uint64_t v4 = 0;
  while (dword_101DB30D8[v4] < a2)
  {
    if (++v4 == 11) {
      goto LABEL_15;
    }
  }
  if (v4 < 0xC)
  {
LABEL_15:
    uint64_t v7 = a1[4];
    if (v7 == a1[5])
    {
      v10[0] = 0;
      sub_100D0C2C0(buf, 0xCuLL, v10);
      uint64_t v8 = (void *)a1[4];
      if (v8)
      {
        a1[5] = v8;
        operator delete(v8);
      }
      uint64_t v9 = *(void *)buf;
      *((_OWORD *)a1 + 2) = *(_OWORD *)buf;
      a1[6] = v14;
      uint64_t v7 = v9;
    }
    ++*(_DWORD *)(v7 + 4 * v4);
    return;
  }
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_10231EFF0);
  }
  unint64_t v5 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67240449;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 1025;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "AltimeterMetrics, request count, invalid bucket index, %{public}d, count, %{private}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10231EFF0);
    }
    v10[0] = 67240449;
    v10[1] = v4;
    __int16 v11 = 1025;
    int v12 = a2;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordAPsInALSRequest(int)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1012EAEE4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = 0;
  unsigned __int8 v19 = a3;
  while (dword_101DB30D8[v4] < a2)
  {
    if (++v4 == 11) {
      goto LABEL_15;
    }
  }
  if (v4 < 0xC)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v7 = a1 + 64;
    uint64_t v8 = v9;
    int v10 = (uint64_t **)(v7 - 8);
    if (!v9) {
      goto LABEL_26;
    }
    uint64_t v11 = v7;
    do
    {
      unsigned int v12 = *(unsigned __int8 *)(v8 + 32);
      BOOL v13 = v12 >= a3;
      if (v12 >= a3) {
        uint64_t v14 = (uint64_t *)v8;
      }
      else {
        uint64_t v14 = (uint64_t *)(v8 + 8);
      }
      if (v13) {
        uint64_t v11 = v8;
      }
      uint64_t v8 = *v14;
    }
    while (*v14);
    if (v11 == v7 || *(unsigned __int8 *)(v11 + 32) > a3)
    {
LABEL_26:
      int v18 = 0;
      sub_100D0C2C0(buf, 0xCuLL, &v18);
      char v20 = &v19;
      __int16 v15 = sub_1012EB810(v10, &v19, (uint64_t)&unk_101D0B290, &v20);
      int v16 = v15[5];
      if (v16)
      {
        v15[6] = v16;
        operator delete(v16);
        int v15[5] = 0;
        v15[6] = 0;
        v15[7] = 0;
      }
      *(_OWORD *)(v15 + 5) = *(_OWORD *)buf;
      v15[7] = v24;
    }
    *(void *)long long buf = &v19;
    __int16 v17 = sub_1012EB810(v10, &v19, (uint64_t)&unk_101D0B290, (unsigned char **)buf);
    ++*((_DWORD *)v17[5] + v4);
    return;
  }
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_10231EFF0);
  }
  unint64_t v5 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67240449;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 1025;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "AltimeterMetrics, prioritized, invalid bucket index, %{public}d, count, %{private}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10231EFF0);
    }
    LODWORD(v20) = 67240449;
    HIDWORD(v20) = v4;
    __int16 v21 = 1025;
    int v22 = a2;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordPrioritizedAPsInArchive(int, BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1012EB1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012EB1DC(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = 0;
  unsigned __int8 v19 = a3;
  while (dword_101DB30D8[v4] < a2)
  {
    if (++v4 == 11) {
      goto LABEL_15;
    }
  }
  if (v4 < 0xC)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 88);
    uint64_t v7 = a1 + 88;
    uint64_t v8 = v9;
    int v10 = (uint64_t **)(v7 - 8);
    if (!v9) {
      goto LABEL_26;
    }
    uint64_t v11 = v7;
    do
    {
      unsigned int v12 = *(unsigned __int8 *)(v8 + 32);
      BOOL v13 = v12 >= a3;
      if (v12 >= a3) {
        uint64_t v14 = (uint64_t *)v8;
      }
      else {
        uint64_t v14 = (uint64_t *)(v8 + 8);
      }
      if (v13) {
        uint64_t v11 = v8;
      }
      uint64_t v8 = *v14;
    }
    while (*v14);
    if (v11 == v7 || *(unsigned __int8 *)(v11 + 32) > a3)
    {
LABEL_26:
      int v18 = 0;
      sub_100D0C2C0(buf, 0xCuLL, &v18);
      char v20 = &v19;
      __int16 v15 = sub_1012EB810(v10, &v19, (uint64_t)&unk_101D0B290, &v20);
      int v16 = v15[5];
      if (v16)
      {
        v15[6] = v16;
        operator delete(v16);
        int v15[5] = 0;
        v15[6] = 0;
        v15[7] = 0;
      }
      *(_OWORD *)(v15 + 5) = *(_OWORD *)buf;
      v15[7] = v24;
    }
    *(void *)long long buf = &v19;
    __int16 v17 = sub_1012EB810(v10, &v19, (uint64_t)&unk_101D0B290, (unsigned char **)buf);
    ++*((_DWORD *)v17[5] + v4);
    return;
  }
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_10231EFF0);
  }
  unint64_t v5 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67240449;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 1025;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "AltimeterMetrics, prioritized, invalid bucket index, %{public}d, count, %{private}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10231EFF0);
    }
    LODWORD(v20) = 67240449;
    HIDWORD(v20) = v4;
    __int16 v21 = 1025;
    int v22 = a2;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordUnknownAPsInArchive(int, BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1012EB4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012EB4D4(uint64_t a1, unsigned int a2, float a3)
{
  uint64_t v4 = 0;
  unsigned __int8 v20 = a2;
  signed int v5 = vcvtms_s32_f32(a3);
  while (dword_101DB3104[v4] < v5)
  {
    if (++v4 == 11) {
      goto LABEL_15;
    }
  }
  if (v4 < 0xC)
  {
LABEL_15:
    uint64_t v10 = *(void *)(a1 + 112);
    uint64_t v8 = a1 + 112;
    uint64_t v9 = v10;
    uint64_t v11 = (uint64_t **)(v8 - 8);
    if (!v10) {
      goto LABEL_26;
    }
    uint64_t v12 = v8;
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      BOOL v14 = v13 >= a2;
      if (v13 >= a2) {
        __int16 v15 = (uint64_t *)v9;
      }
      else {
        __int16 v15 = (uint64_t *)(v9 + 8);
      }
      if (v14) {
        uint64_t v12 = v9;
      }
      uint64_t v9 = *v15;
    }
    while (*v15);
    if (v12 == v8 || *(unsigned __int8 *)(v12 + 32) > a2)
    {
LABEL_26:
      int v19 = 0;
      sub_100D0C2C0(buf, 0xCuLL, &v19);
      __int16 v21 = &v20;
      int v16 = sub_1012EB810(v11, &v20, (uint64_t)&unk_101D0B290, &v21);
      __int16 v17 = v16[5];
      if (v17)
      {
        void v16[6] = v17;
        operator delete(v17);
        void v16[5] = 0;
        void v16[6] = 0;
        _DWORD v16[7] = 0;
      }
      *(_OWORD *)(v16 + 5) = *(_OWORD *)buf;
      _DWORD v16[7] = *(uint64_t **)&buf[16];
    }
    *(void *)long long buf = &v20;
    int v18 = sub_1012EB810(v11, &v20, (uint64_t)&unk_101D0B290, (unsigned char **)buf);
    ++*((_DWORD *)v18[5] + v4);
    return;
  }
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_10231EFF0);
  }
  uint64_t v6 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67240449;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 2049;
    *(double *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "AltimeterMetrics, max delta, invalid bucket index, %{public}d, delta, %{private}f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10231EFF0);
    }
    LODWORD(v21) = 67240449;
    HIDWORD(v21) = v4;
    __int16 v22 = 2049;
    double v23 = a3;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSubHarvesterAltimeterMetrics::recordMaxDeltaHeightInArchive(float, BOOL)", "%s\n", v7);
    if (v7 != buf) {
      free(v7);
    }
  }
}

void sub_1012EB7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012EB7E0(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t **sub_1012EB810(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

unsigned char *sub_1012EB8D8(unsigned char *__dst, unsigned __int8 *a2, size_t a3)
{
  if (a3 && ((v4 = *a2 - 1, v4 > 8) ? (uint64_t v5 = 0) : (uint64_t v5 = qword_101DB3150[(char)v4]), v5 == a3)) {
    memcpy(__dst, a2, a3);
  }
  else {
    *long long __dst = -1;
  }
  return __dst;
}

unsigned char *sub_1012EB948(unsigned char *result, uint64_t a2)
{
  switch(*result)
  {
    case 1:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, result);
      break;
    case 2:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 24))(a2, result);
      break;
    case 3:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 32))(a2, result);
      break;
    case 4:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 40))(a2, result);
      break;
    case 5:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 48))(a2, result);
      break;
    case 6:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 56))(a2, result);
      break;
    case 7:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 64))(a2, result);
      break;
    case 8:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 72))(a2, result);
      break;
    case 9:
      uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 80))(a2, result);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1012EBB30(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  *uint64_t v5 = off_10231F030;
  void v5[6] = 0;
  v5[7] = 0;
  unsigned char v5[8] = 0;
  sub_1005AEEAC();
}

void sub_1012EBC24(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v5) {
    sub_101A6A9C8(v5);
  }
  sub_101AAE014(v3, v2);
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_1012EBC54(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231F080);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateSubscription::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231F080);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateSubscription::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012ECB18(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012EBE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012EBE34(void *a1)
{
  *a1 = off_10231F030;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[8];
    a1[8] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  uint64_t v4 = a1[7];
  a1[7] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_1012EBF48(void *a1)
{
  sub_1012EBE34(a1);

  operator delete();
}

void *sub_1012EBF80@<X0>(uint64_t a1@<X8>)
{
  v6[0] = off_10231F0F0;
  v6[1] = sub_1012EC1D0;
  void v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v7, "kCLConnectionMessageMotionState");
  sub_100BF69EC((uint64_t)&v8, (uint64_t)v6);
  v5[0] = off_10231F180;
  v5[1] = sub_1012EC428;
  _DWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v9, "kCLConnectionMessageMotionStateSim");
  sub_100BF69EC((uint64_t)&v10, (uint64_t)v5);
  v4[0] = off_10231F180;
  v4[1] = sub_1012EC7BC;
  v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v11, "kCLConnectionMessageMotionStateYouthSim");
  sub_100BF69EC((uint64_t)v12, (uint64_t)v4);
  sub_1012ED724(a1, (unsigned __int8 *)v7, 3);
  for (uint64_t i = 0; i != -21; i -= 7)
  {
    sub_100BF6F08(&v12[i * 8]);
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  sub_100BF6F08(v4);
  sub_100BF6F08(v5);
  return sub_100BF6F08(v6);
}

void sub_1012EC148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  for (uint64_t i = 112; i != -56; i -= 56)
    sub_1012ECADC((uint64_t)(&a21 + i));
  sub_100BF6F08(&a9);
  sub_100BF6F08(&a13);
  sub_100BF6F08(&a17);
  _Unwind_Resume(a1);
}

void sub_1012EC1D0(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_10231F0A0);
  }
  uint64_t v5 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v12 = v6;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MotionState request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10231F0A0);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateSubscription::handleRequestMotionState(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_10009C834(a1);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v8 = *(void **)(v7 + 16);
  if (a2) {
    [v8 register:v9 forNotification:1 registrationInfo:0];
  }
  else {
    [v8 unregister:v9 forNotification:1];
  }
}

void sub_1012EC3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1012EC428(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_10009C834(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v6 = [Dictionary objectForKeyedSubscript:CMMotionStateSim];
  id v7 = [Dictionary objectForKeyedSubscript:CMMotionStateSimState];
  uint64_t v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231F0C0);
    }
    uint64_t v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid message recieved from framework.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231F0C0);
      }
      __int16 v17 = 0;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionStateSubscription::handleMessageMotionStateSim(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = sub_1000D2E34(0);
  uint64_t v12 = v11;
  if (v11 && ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11) & 1) != 0)
  {
    unsigned __int8 v13 = [v6 BOOLValue];
    uint64_t v14 = *(void *)(a1 + 48);
    if (v13)
    {
      if (!v14)
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_1012ECE44;
        _DWORD v16[3] = &unk_1022DB1F0;
        void v16[4] = v8;
        void v16[5] = a1;
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 112))(v12, v16);
        goto LABEL_20;
      }
      (*(void (**)(uint64_t, id))(*(void *)v14 + 16))(v14, [v8 unsignedIntValue]);
    }
    else
    {
      *(void *)(a1 + 48) = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    sub_1012ECC80(a1, 0);
  }
  else
  {
    sub_1012ECC80(a1, 2);
  }
LABEL_20:
}

void sub_1012EC780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1012EC7BC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_10009C834(a1);
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:CMMotionStateSimState];
  if (!v5)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_10231F0A0);
    }
    id v6 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Failed to override motion state youth. Invalid message received from framework.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_10231F0A0);
      }
      __int16 v12 = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionStateSubscription::handleMessageMotionStateYouthSim(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  uint64_t v8 = sub_1000D2E34(0);
  if (!v8 && ((*(uint64_t (**)(void))(v7 + 96))(0) & 1) == 0) {
    sub_1012ECF04(a1, 2);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    (*(void (**)(uint64_t, id))(*(void *)v9 + 16))(v9, [v5 unsignedIntValue]);
    sub_1012ECF04(a1, 0);
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _OWORD v11[2] = sub_1012ED0C8;
    void v11[3] = &unk_1022DB1F0;
    void v11[4] = v5;
    v11[5] = a1;
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 120))(v8, v11);
  }
}

void sub_1012ECAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1012ECADC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1012ECB18(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    id v6 = objc_alloc((Class)CMActivity);
    long long v7 = *(_OWORD *)(a4 + 112);
    v12[6] = *(_OWORD *)(a4 + 96);
    v12[7] = v7;
    uint64_t v13 = *(void *)(a4 + 128);
    long long v8 = *(_OWORD *)(a4 + 48);
    _DWORD v12[2] = *(_OWORD *)(a4 + 32);
    uint64_t v12[3] = v8;
    long long v9 = *(_OWORD *)(a4 + 80);
    void v12[4] = *(_OWORD *)(a4 + 64);
    void v12[5] = v9;
    long long v10 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v10;
    id v11 = [v6 initWithMotionActivity:v12];
    uint64_t v14 = CMActivityData;
    id v15 = v11;
    +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];

    sub_1012ECBFC(a1);
  }
}

void sub_1012ECBFC(uint64_t a1)
{
  sub_1000E9420(&off_10231F1F0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1012ECC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012ECC80(uint64_t a1, uint64_t a2)
{
  id v4 = [[objc_msgSend(*(id *)(a1 + 8), "silo") queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1012ECD08;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_1012ECD08(uint64_t a1)
{
  uint64_t v3 = CMMotionStateSimResult;
  uint64_t v1 = *(void *)(a1 + 32);
  id v4 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_1012ECDC0(v1);
  return sub_10009C834(v1);
}

void sub_1012ECDC0(uint64_t a1)
{
  sub_1000E9420(&off_10231F1F8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1012ECE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012ECE44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v4 = *(void *)(v3 + 48);
  }
  if (v4)
  {
    (*(void (**)(uint64_t, id))(*(void *)v4 + 16))(v4, [*(id *)(a1 + 32) unsignedIntValue]);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  sub_1012ECC80(v3, v6);
}

void sub_1012ECF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [objc_msgSend(*(id *)(a1 + 8), "silo") queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1012ECF8C;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_1012ECF8C(uint64_t a1)
{
  uint64_t v3 = CMMotionStateSimResult;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_1012ED044(v1);
  return sub_10009C834(v1);
}

void sub_1012ED044(uint64_t a1)
{
  sub_1000E9420(&off_10231F200, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1012ED0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012ED0C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(v3 + 56);
  *(void *)(v3 + 56) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v4 = *(void *)(v3 + 56);
  }
  if (v4)
  {
    (*(void (**)(uint64_t, id))(*(void *)v4 + 16))(v4, [*(id *)(a1 + 32) unsignedIntValue]);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  sub_1012ECF04(v3, v6);
}

void sub_1012ED188(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012ED1B8(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1012ED1E8(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1012ED218(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10231F0F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1012ED264(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10231F0F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1012ED294(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_1012ED29C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012ED2DC()
{
}

void sub_1012ED2E8(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1012ED344(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1012ED32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012ED344(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    long long v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    long long v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      long long v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10231F0C0);
    }
    id v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10231F0C0);
      }
    }
    __int16 v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_1012ED574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

__n128 sub_1012ED590(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10231F180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1012ED5DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10231F180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1012ED60C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1012ED614(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1012ED654()
{
}

void sub_1012ED660(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  long long v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_1012ED700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012ED724(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1012ED7A0(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1012ED78C(_Unwind_Exception *a1)
{
  sub_100BF6F8C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1012ED7A0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1012EDA24(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1012EDB14((uint64_t)v25, 0);
  return i;
}

void sub_1012EDA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1012EDB14((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1012EDA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1012EDA9C(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1012EDA84(_Unwind_Exception *a1)
{
  sub_1012EDB14(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1012EDA9C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BF6744((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1012EDAF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012EDB14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF700C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_1012EDB6C(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(void *)(a1 + 24) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)a1 = sub_1000A6958();
  return a1;
}

void sub_1012EDBB4(uint64_t a1, uint64_t a2, char a3)
{
  if (sub_10101439C(a2) == 1)
  {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 32);
    if (!*(unsigned char *)(a1 + 32))
    {
      *(unsigned char *)(a1 + 32) = 1;
      *(double *)(a1 + 8) = sub_1004BE230();
      sub_1000A699C(*(void *)a1, "CLVO2MaxPreconditionCheckerTimeOfLastEstimate", (void *)(a1 + 16));
      sub_1000A699C(*(void *)a1, "CLVO2MaxPreconditionCheckerTimeOfLastWorkout", (void *)(a1 + 24));
    }
    *(unsigned char *)(a1 + 40) = a3;
    sub_1012EDC70(a1, 1);
  }
}

void sub_1012EDC70(uint64_t a1, int a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10231F208);
  }
  long long v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(_DWORD *)long long buf = 67109888;
    int v9 = a2;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    __int16 v14 = 1024;
    int v15 = sub_1012EDF94(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VO2MaxPrecondition,sessionStart,%d,sessionStartTime,%f,lastEstimateTime,%f,status,%d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10231F208);
    }
    sub_1012EDF94(a1);
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxPreconditionChecker::log(BOOL) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

uint64_t sub_1012EDE7C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10101439C(a2);
  if (result == 2)
  {
    double v13 = sub_1004BE230();
    double v7 = *(double *)(a3 + 16);
    if (v7 != -1.0) {
      sub_10016332C(*a1, "CLVO2MaxPreconditionCheckerTimeOfLastEstimate", &v13);
    }
    if (*((unsigned char *)a1 + 32) && (*(_DWORD *)(a2 + 32) - 1) <= 1)
    {
      sub_10016332C(*a1, "CLVO2MaxPreconditionCheckerTimeOfLastWorkout", &v13);
    }
    else if (v7 == -1.0)
    {
LABEL_9:
      sub_1012EDC70((uint64_t)a1, 0);
      uint64_t result = sub_1000A6958();
      *a1 = result;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 1) = _Q0;
      a1[3] = 0xBFF0000000000000;
      *((unsigned char *)a1 + 32) = 0;
      *((_DWORD *)a1 + 9) = 0;
      *((unsigned char *)a1 + 40) = 0;
      return result;
    }
    (*(void (**)(uint64_t))(*(void *)*a1 + 944))(*a1);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1012EDF94(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36) == 3)
  {
    double v2 = *(double *)(a1 + 16);
    if (v2 >= 0.0)
    {
      double v4 = *(double *)(a1 + 8) - v2;
      BOOL v3 = v4 < sub_100EB9B90();
    }
    else
    {
      BOOL v3 = 0;
    }
    double v5 = *(double *)(a1 + 24);
    if (v5 >= 0.0)
    {
      double v7 = *(double *)(a1 + 8) - v5;
      if (v7 >= sub_100EB9C28()) {
        unsigned int v6 = 0;
      }
      else {
        unsigned int v6 = -12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  unsigned int v6 = 0;
LABEL_11:
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t result = 4294967286;
  }
  else {
    uint64_t result = 0;
  }
  if (*(unsigned char *)(a1 + 32) && !v3)
  {
    if (*(unsigned char *)(a1 + 40)) {
      return 4294967285;
    }
    else {
      return v6;
    }
  }
  return result;
}

void sub_1012EE04C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1012EE190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  CLMotionActivity::getInit((uint64_t *)(a1 + 48), (CLMotionActivity *)a1);
  *(void *)(a1 + 184) = 0;
  sub_100B5B6AC((_OWORD *)(a1 + 192));
  sub_100B5B704(a1 + 240);
  sub_10084F82C(a1 + 280, a2);
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(unsigned char *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(unsigned char *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0xBFF0000000000000;
  *(void *)(a1 + 480) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 488) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 496) = _Q1;
  *(unsigned char *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0xBFF0000000000000;
  *(void *)(a1 + 528) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 536) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 600) = 1065353216;
  *(void *)(a1 + 608) = 0x100000005;
  *(void *)(a1 + 616) = 0;
  return a1;
}

void sub_1012EE290(_Unwind_Exception *a1)
{
  sub_1012EE320(v4);
  unsigned int v6 = (uint64_t *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v7) {
    sub_10099FEC4(v1 + 32, v7);
  }
  sub_10099FF44(v3, 0);
  uint64_t v8 = *v6;
  uint64_t *v6 = 0;
  if (v8) {
    sub_10099FF94(v1 + 16, v8);
  }
  uint64_t v9 = *v2;
  *double v2 = 0;
  if (v9) {
    sub_10099FFF0((uint64_t)v2, v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1012EE320(uint64_t a1)
{
  sub_1000F5BB0(a1 + 48, *(void **)(a1 + 56));
  double v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  BOOL v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_1012EE374(uint64_t a1, uint64_t a2)
{
  *(double *)a2 = *(double *)(a1 + 16) / 1000000000.0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = *(void *)(a1 + 96);
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  *(_OWORD *)(a2 + 32) = _Q0;
  uint64_t v9 = *(void *)(a1 + 176);
  *(void *)(a2 + 48) = *(void *)(a1 + 152);
  *(void *)(a2 + 56) = v9;
  uint64_t v10 = *(void *)(a1 + 104);
  *(void *)(a2 + 64) = *(void *)(a1 + 72);
  *(void *)(a2 + 72) = v10;
  *(void *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 92) = sub_10184535C((unint64_t *)a1);
  double v11 = sub_101845384((unint64_t *)a1);
  uint64_t v12 = *(void *)(a1 + 80);
  *(double *)(a2 + 96) = v11 * 1000.0;
  *(void *)(a2 + 104) = v12;
  uint64_t v13 = *(void *)(a1 + 184);
  *(void *)(a2 + 112) = *(void *)(a1 + 160);
  *(void *)(a2 + 120) = v13;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 112);
  *(void *)(a2 + 144) = *(void *)(a1 + 128);
  *(_OWORD *)(a2 + 152) = v15;
  *(_DWORD *)(a2 + 192) = -1;
  *(void *)(a2 + 176) = -1;
  *(void *)(a2 + 184) = -1;
  *(void *)(a2 + 168) = 0xBFF0000000000000;
  *(void *)(a2 + 200) = 0xBFF0000000000000;
  *(void *)(a2 + 208) = -1;
  *(void *)(a2 + 216) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 224) = -1;
  double result = 0.0;
  *(_OWORD *)(a2 + 232) = xmmword_101D827D0;
  return result;
}

void sub_1012EE470(uint64_t a1, int *a2, int *a3, unint64_t *a4)
{
  if (*(void *)(a1 + 8))
  {
    double v8 = 1.0;
    if (CLMotionActivity::isTypeCycling())
    {
      unsigned int v9 = 3;
    }
    else if (CLMotionActivity::isTypeSwimming())
    {
      unsigned int v9 = 15;
    }
    else if (CLMotionActivity::isTypeRunning() && sub_10010145C() && sub_100119A30())
    {
      unsigned int v9 = 5;
      double v8 = 1.02;
    }
    else
    {
      unsigned int v9 = 5;
    }
    sub_10132971C(*(unsigned int **)(a1 + 8), v9);
    sub_1013298F8(*(void *)(a1 + 8), v8);
  }
  if (*(void *)(a1 + 16))
  {
    if (CLMotionActivity::isTypeCycling())
    {
      uint64_t v10 = *(_DWORD **)(a1 + 16);
      int v11 = 3;
LABEL_55:
      sub_101143530(v10, v11);
      sub_101144E1C(*(void *)(a1 + 16), 1.0);
      goto LABEL_56;
    }
    if (CLMotionActivity::isTypeSwimming())
    {
      uint64_t v10 = *(_DWORD **)(a1 + 16);
      int v11 = 15;
      goto LABEL_55;
    }
    if (!CLMotionActivity::isTypeRunning() || !sub_10010145C() || !sub_100119A30())
    {
      unint64_t v12 = *a4;
      if (*a4 == 37 || v12 == 23)
      {
        if (sub_10010145C() && sub_100119A30())
        {
          sub_101143530(*(_DWORD **)(a1 + 16), 3);
          sub_101144E1C(*(void *)(a1 + 16), 1.02);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10231F228);
          }
          uint64_t v13 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v14 = *a4;
            *(_DWORD *)long long buf = 134349056;
            *(void *)int v45 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GPSODOM,downhill snow sports workout type,%{public}ld,", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_52;
            }
            goto LABEL_119;
          }
          goto LABEL_56;
        }
        unint64_t v12 = *a4;
      }
      if (v12 <= 0x31 && ((1 << v12) & 0x23E8000000000) != 0 && sub_10010145C() && sub_100119A30())
      {
        sub_101143530(*(_DWORD **)(a1 + 16), 5);
        sub_101144E1C(*(void *)(a1 + 16), 1.025);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231F228);
        }
        long long v15 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v16 = *a4;
          *(_DWORD *)long long buf = 134349056;
          *(void *)int v45 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "GPSODOM,field sports workout type,%{public}ld,", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1)
          {
LABEL_52:
            unint64_t v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryInterface::switchContext(const CLMotionActivity &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const CMWorkoutType &)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
            goto LABEL_56;
          }
LABEL_119:
          dispatch_once(&qword_1024193D0, &stru_10231F228);
          goto LABEL_52;
        }
LABEL_56:
        if (((CLMotionActivity::isTypeWalking() & 1) != 0
           || (CLMotionActivity::isTypeRunning() & 1) != 0
           || *a4 == 46
           || *a4 == 27)
          && sub_10010145C()
          && sub_10073FAFC())
        {
          if (*a3 == 6)
          {
            if (CLMotionActivity::isTypeWalking())
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10231F228);
              }
              uint64_t v26 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
              {
                int v27 = *a2;
                int v28 = *a3;
                *(_DWORD *)long long buf = 67240704;
                *(_DWORD *)int v45 = v27;
                *(_WORD *)&v45[4] = 1026;
                *(_DWORD *)&v45[6] = v28;
                __int16 v46 = 2050;
                uint64_t v47 = 0x3FF03D70A3D70A3DLL;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              BOOL v29 = sub_10013D1A0(115, 2);
              double v24 = 1.015;
              if (!v29) {
                goto LABEL_94;
              }
              uint64_t v25 = 0x3FF03D70A3D70A3DLL;
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 == -1) {
                goto LABEL_113;
              }
              goto LABEL_120;
            }
            if (CLMotionActivity::isTypeRunning())
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10231F228);
              }
              long long v34 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
              {
                int v35 = *a2;
                int v36 = *a3;
                *(_DWORD *)long long buf = 67240704;
                *(_DWORD *)int v45 = v35;
                *(_WORD *)&v45[4] = 1026;
                *(_DWORD *)&v45[6] = v36;
                __int16 v46 = 2050;
                uint64_t v47 = 0x3FF028F5C28F5C29;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              BOOL v37 = sub_10013D1A0(115, 2);
              double v24 = 1.01;
              if (!v37) {
                goto LABEL_94;
              }
              uint64_t v25 = 0x3FF028F5C28F5C29;
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 == -1) {
                goto LABEL_113;
              }
              goto LABEL_120;
            }
          }
          else if (*a3 == 1)
          {
            if (CLMotionActivity::isTypeWalking())
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10231F228);
              }
              unint64_t v20 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
              {
                int v21 = *a2;
                int v22 = *a3;
                *(_DWORD *)long long buf = 67240704;
                *(_DWORD *)int v45 = v21;
                *(_WORD *)&v45[4] = 1026;
                *(_DWORD *)&v45[6] = v22;
                __int16 v46 = 2050;
                uint64_t v47 = 0x3FF028F5C28F5C29;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              BOOL v23 = sub_10013D1A0(115, 2);
              double v24 = 1.01;
              if (!v23) {
                goto LABEL_94;
              }
              uint64_t v25 = 0x3FF028F5C28F5C29;
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 == -1)
              {
LABEL_113:
                int v43 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryInterface::switchContext(const CLMotionActivity &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const CMWorkoutType &)", "%s\n", v43);
                if (v43 != (char *)buf) {
                  free(v43);
                }
                double v24 = *(double *)&v25;
LABEL_94:
                sub_101144E1C(*(void *)(a1 + 16), v24);
                goto LABEL_95;
              }
LABEL_120:
              dispatch_once(&qword_1024193D0, &stru_10231F228);
              goto LABEL_113;
            }
            if (CLMotionActivity::isTypeRunning())
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10231F228);
              }
              int v30 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *a2;
                int v32 = *a3;
                *(_DWORD *)long long buf = 67240704;
                *(_DWORD *)int v45 = v31;
                *(_WORD *)&v45[4] = 1026;
                *(_DWORD *)&v45[6] = v32;
                __int16 v46 = 2050;
                uint64_t v47 = 0x3FF028F5C28F5C29;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
              }
              BOOL v33 = sub_10013D1A0(115, 2);
              double v24 = 1.01;
              if (!v33) {
                goto LABEL_94;
              }
              uint64_t v25 = 0x3FF028F5C28F5C29;
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 == -1) {
                goto LABEL_113;
              }
              goto LABEL_120;
            }
          }
        }
LABEL_95:
        if (CLMotionActivity::isTypeRunning()
          && sub_10010145C()
          && sub_10073FAFC()
          && (*a3 - 3) <= 1)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10231F228);
          }
          double v38 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            int v39 = *a2;
            int v40 = *a3;
            *(_DWORD *)long long buf = 67240704;
            *(_DWORD *)int v45 = v39;
            *(_WORD *)&v45[4] = 1026;
            *(_DWORD *)&v45[6] = v40;
            __int16 v46 = 2050;
            uint64_t v47 = 0x3FEF86EF9B1D0144;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "GPSODOM,activity type,%{public}d,sigEnv,%{public}d,distance multiplier,%{public}.3f", buf, 0x18u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10231F228);
            }
            uint64_t v42 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryInterface::switchContext(const CLMotionActivity &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const CMWorkoutType &)", "%s\n", v42);
            if (v42 != (char *)buf) {
              free(v42);
            }
          }
          sub_101144E1C(*(void *)(a1 + 16), 0.985221675);
        }
        goto LABEL_105;
      }
      if (*a4 == 38 && sub_10010145C() && sub_100119A30())
      {
        sub_101143530(*(_DWORD **)(a1 + 16), 5);
        sub_101144E1C(*(void *)(a1 + 16), 1.02);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231F228);
        }
        float v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v18 = *a4;
          *(_DWORD *)long long buf = 134349056;
          *(void *)int v45 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "GPSODOM,paddle sports workout type,%{public}ld,", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_52;
          }
          goto LABEL_119;
        }
        goto LABEL_56;
      }
    }
    uint64_t v10 = *(_DWORD **)(a1 + 16);
    int v11 = 5;
    goto LABEL_55;
  }
LABEL_105:
  uint64_t v41 = *(void *)(a1 + 24);
  if (v41) {
    sub_1012EF210(v41, (uint64_t)a2);
  }
}

void sub_1012EF210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    *(_OWORD *)(v4 + 432) = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 480) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v4 + 496) = v7;
    *(_OWORD *)(v4 + 448) = v5;
    *(_OWORD *)(v4 + 464) = v6;
    long long v8 = *(_OWORD *)(a2 + 80);
    long long v9 = *(_OWORD *)(a2 + 96);
    long long v10 = *(_OWORD *)(a2 + 112);
    *(void *)(v4 + 560) = *(void *)(a2 + 128);
    *(_OWORD *)(v4 + 528) = v9;
    *(_OWORD *)(v4 + 544) = v10;
    *(_OWORD *)(v4 + 512) = v8;
    sub_10190251C(v4);
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
    *(_OWORD *)(v11 + 400) = *(_OWORD *)a2;
    long long v12 = *(_OWORD *)(a2 + 16);
    long long v13 = *(_OWORD *)(a2 + 32);
    long long v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v11 + 448) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v11 + 464) = v14;
    *(_OWORD *)(v11 + 416) = v12;
    *(_OWORD *)(v11 + 432) = v13;
    long long v15 = *(_OWORD *)(a2 + 80);
    long long v16 = *(_OWORD *)(a2 + 96);
    long long v17 = *(_OWORD *)(a2 + 112);
    *(void *)(v11 + 528) = *(void *)(a2 + 128);
    *(_OWORD *)(v11 + 496) = v16;
    *(_OWORD *)(v11 + 512) = v17;
    *(_OWORD *)(v11 + 480) = v15;
    sub_1018FEBD0((void *)v11);
  }
}

BOOL sub_1012EF2C4(uint64_t a1, double *a2, double a3)
{
  *a2 = -1.0;
  double v5 = *(double *)(a1 + 40);
  if (v5 <= 0.0 || (double v7 = a3 - v5, *a2 = v7, v7 >= 0.001))
  {
    BOOL result = 1;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231F228);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = *a2;
      *(_DWORD *)long long buf = 134349056;
      double v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,invalid time between positions %{public}lf", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231F228);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::getTimeInterval(double, double &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      BOOL result = 0;
    }
  }
  *(double *)(a1 + 40) = a3;
  return result;
}

void sub_1012EF4C0(void *a1)
{
  double v2 = (__n128 *)a1[3];
  if (v2) {
    sub_1018FA734(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    sub_10190B1D0(v3);
  }
  a1[2] = 0;
  a1[7] = a1[6];
}

BOOL sub_1012EF504(double a1, double a2)
{
  double v3 = a2 / a1;
  BOOL v4 = a2 / a1 >= 0.0 && v3 <= 600.0;
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231F228);
    }
    long long v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349568;
      double v10 = v3;
      __int16 v11 = 2050;
      double v12 = a1;
      __int16 v13 = 2050;
      double v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "GPSODOM,impossible speed,%{public}f,timeInterval,%{public}f,deltaDist,%{public}f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231F228);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryInterface::isSpeedPossible(double, double) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v4;
}

BOOL sub_1012EF710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, int a6, uint64_t a7, int *a8, char a9, uint64_t a10)
{
  uint64_t v18 = a1 + 48;
  if (*(_DWORD *)a4 != *(_DWORD *)(a1 + 48) || *a8 != *(_DWORD *)(a1 + 312) || *a5 != *(void *)(a1 + 184))
  {
    sub_1012EE470(a1, (int *)a4, a8, a5);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)a4;
    long long v19 = *(_OWORD *)(a4 + 16);
    long long v20 = *(_OWORD *)(a4 + 32);
    long long v21 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(v18 + 64) = v21;
    *(_OWORD *)(v18 + 16) = v19;
    *(_OWORD *)(v18 + 32) = v20;
    long long v22 = *(_OWORD *)(a4 + 80);
    long long v23 = *(_OWORD *)(a4 + 96);
    long long v24 = *(_OWORD *)(a4 + 112);
    *(void *)(v18 + 128) = *(void *)(a4 + 128);
    *(_OWORD *)(v18 + 96) = v23;
    *(_OWORD *)(v18 + 112) = v24;
    *(_OWORD *)(v18 + 80) = v22;
    *(_DWORD *)(a1 + 312) = *a8;
    *(void *)(a1 + 184) = *a5;
  }
  __asm { FMOV            V2.2D, #-1.0 }
  *(_OWORD *)(a2 + 224) = _Q2;
  *(void *)(a2 + 240) = 0xBFF0000000000000;
  *(unsigned char *)(a2 + 216) = 0;
  if (!a6)
  {
    double v37 = *(double *)(a2 + 96);
    if (v37 > 0.0 && (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v38 = *(double *)(a2 + 104);
      if (v38 > 0.0)
      {
        BOOL v30 = 0;
        if (v37 > 100.0 || (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          return v30;
        }
        long long v105 = _Q2;
        if (!sub_1000EF668(*(double *)(a2 + 56), *(double *)(a2 + 64))) {
          goto LABEL_143;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231F228);
        }
        int v39 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "GPSODOM,Null Island not allowed, epochData", buf, 2u);
        }
        BOOL v30 = 0;
        if (!sub_10013D1A0(115, 0)) {
          return v30;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231F228);
        }
        LOWORD(v111) = 0;
        int v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
    }
    return 0;
  }
  long long v105 = _Q2;
  BOOL v30 = *(void *)(a1 + 16) != 0;
  double v31 = *(double *)(a7 + 96);
  if (v31 <= 0.0
    || (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double v32 = *(double *)(a7 + 104), v32 <= 0.0)
    || v31 > 100.0
    || (*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v30 = 0;
  }
  if (sub_1000EF668(*(double *)(a7 + 56), *(double *)(a7 + 64)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231F228);
    }
    BOOL v33 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "GPSODOM,Null Island not allowed, ravenPos", buf, 2u);
    }
    BOOL v30 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231F228);
      }
      LOWORD(v111) = 0;
      __int16 v98 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v98);
      if (v98 != (char *)buf) {
        free(v98);
      }
LABEL_143:
      BOOL v30 = 0;
    }
  }
  double v110 = -1.0;
  long long v34 = (double *)(a2 + 16);
  if (sub_1012EF2C4(a1, &v110, *(double *)(a2 + 16)))
  {
    if (a9)
    {
      double v35 = v110;
      if (*(void *)(a1 + 24) && v110 > 600.0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231F228);
        }
        int v36 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134349056;
          double v114 = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM,rhythmic mode exceeded max interval,%{public}lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10231F228);
          }
          int v111 = 134349056;
          double v112 = v35;
          __int16 v99 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v99);
          if (v99 != (char *)buf) {
            free(v99);
          }
        }
        sub_1012EF4C0(*(void **)(a1 + 24));
      }
LABEL_52:
      if (*(unsigned char *)(a3 + 48)) {
        sub_1012EE374(a3, (uint64_t)v109);
      }
      if (a6 && *(void *)(a1 + 16))
      {
        sub_1012EE374(a7, (uint64_t)&v111);
        long long v34 = (double *)(a7 + 16);
      }
      else
      {
        sub_1012EE374(a2, (uint64_t)&v111);
      }
      double v49 = *v34;
      double v50 = *(double *)(a3 + 16);
      long long v51 = (_OWORD *)(a1 + 320);
      long long v52 = *(_OWORD *)(a2 + 112);
      long long v54 = *(_OWORD *)(a2 + 64);
      long long v53 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 432) = v52;
      *(_OWORD *)(a1 + 384) = v54;
      *(_OWORD *)(a1 + 400) = v53;
      long long v55 = *(_OWORD *)(a2 + 176);
      long long v57 = *(_OWORD *)(a2 + 128);
      long long v56 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 496) = v55;
      *(_OWORD *)(a1 + 448) = v57;
      *(_OWORD *)(a1 + 464) = v56;
      long long v59 = *(_OWORD *)(a2 + 208);
      long long v58 = *(_OWORD *)(a2 + 224);
      long long v60 = *(_OWORD *)(a2 + 192);
      *(void *)(a1 + 560) = *(void *)(a2 + 240);
      *(_OWORD *)(a1 + 528) = v59;
      *(_OWORD *)(a1 + 544) = v58;
      *(_OWORD *)(a1 + 512) = v60;
      long long v61 = *(_OWORD *)a2;
      long long v62 = *(_OWORD *)(a2 + 16);
      long long v63 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 368) = v63;
      *(_OWORD *)(a1 + 320) = v61;
      *(_OWORD *)(a1 + 336) = v62;
      if (a1 + 320 != a2)
      {
        *(_DWORD *)(a1 + 600) = *(_DWORD *)(a2 + 280);
        sub_10084EEAC((void *)(a1 + 568), *(uint64_t **)(a2 + 264), 0);
      }
      double v64 = vabdd_f64(v49, v50);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 288);
      uint64_t v65 = *(void *)(a1 + 32);
      if (v65 && (a9 & 1) == 0)
      {
        if (sub_101196C84(v65, (double *)&v111))
        {
          *(double *)(a2 + 224) = sub_101196B9C(*(void *)(a1 + 32));
          double v66 = sub_101196BAC(*(void *)(a1 + 32));
          *(double *)(a2 + 232) = v66;
          if (v66 < 0.0 || !*(unsigned char *)(a3 + 48))
          {
LABEL_67:
            if (v66 >= 0.0 && !sub_1012EF504(v35, v66))
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10231F228);
              }
              __int16 v67 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM,maximium speed exceeded resetting smoother", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_10231F228);
                }
                __int16 v108 = 0;
                __int16 v101 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v101);
                if (v101 != (char *)buf) {
                  free(v101);
                }
              }
              sub_101196910(*(void *)(a1 + 32));
LABEL_88:
              BOOL v30 = 0;
LABEL_89:
              *(_OWORD *)(a2 + 224) = v105;
              *(void *)(a2 + 240) = 0xBFF0000000000000;
              return v30;
            }
            goto LABEL_131;
          }
          *(double *)(a2 + 240) = sub_1010A0588(v109, (double *)&v111, v64);
        }
        double v66 = *(double *)(a2 + 232);
        goto LABEL_67;
      }
      uint64_t v68 = *(void *)(a1 + 8);
      if (v68 && (a9 & 1) == 0)
      {
        sub_1013289B4(v68);
        *(double *)(a2 + 224) = sub_101144E0C(*(void *)(a1 + 8));
        double v69 = sub_1000E6F24(*(void *)(a1 + 8));
        *(double *)(a2 + 232) = v69;
        if (v69 >= 0.0 && *(unsigned char *)(a3 + 48))
        {
          *(double *)(a2 + 240) = sub_1010A0588(v109, (double *)&v111, v64);
          double v69 = *(double *)(a2 + 232);
        }
        if (v69 >= 0.0 && !sub_1012EF504(v35, v69))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10231F228);
          }
          long long v70 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,maximium speed exceeded resetting subsampler", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10231F228);
            }
            __int16 v108 = 0;
            __int16 v102 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v102);
            if (v102 != (char *)buf) {
              free(v102);
            }
          }
          sub_101329534(*(void *)(a1 + 8));
          goto LABEL_88;
        }
LABEL_131:
        *(unsigned char *)(a2 + 216) = *(double *)(a2 + 240) > 0.0;
        return v30;
      }
      uint64_t v71 = *(void *)(a1 + 16);
      if (v71 && (a9 & 1) == 0)
      {
        if (a6)
        {
          sub_101143874(v71, 2, v43, v44, v45, v46, v47, v48, *(double *)(a7 + 56), *(double *)(a7 + 64), *(double *)(a7 + 72), *(double *)(a7 + 96), *(double *)(a7 + 104), *(double *)(a7 + 152), *(double *)(a7 + 160), *(double *)(a7 + 176), *(double *)(a7 + 184), *(void *)(a7 + 16));
          long long v72 = *(_OWORD *)a7;
          long long v73 = *(_OWORD *)(a7 + 16);
          long long v74 = *(_OWORD *)(a7 + 48);
          *(_OWORD *)(a1 + 352) = *(_OWORD *)(a7 + 32);
          *(_OWORD *)(a1 + 368) = v74;
          *long long v51 = v72;
          *(_OWORD *)(a1 + 336) = v73;
          long long v75 = *(_OWORD *)(a7 + 64);
          long long v76 = *(_OWORD *)(a7 + 80);
          long long v77 = *(_OWORD *)(a7 + 112);
          *(_OWORD *)(a1 + 416) = *(_OWORD *)(a7 + 96);
          *(_OWORD *)(a1 + 432) = v77;
          *(_OWORD *)(a1 + 384) = v75;
          *(_OWORD *)(a1 + 400) = v76;
          long long v78 = *(_OWORD *)(a7 + 128);
          long long v79 = *(_OWORD *)(a7 + 144);
          long long v80 = *(_OWORD *)(a7 + 176);
          *(_OWORD *)(a1 + 480) = *(_OWORD *)(a7 + 160);
          *(_OWORD *)(a1 + 496) = v80;
          *(_OWORD *)(a1 + 448) = v78;
          *(_OWORD *)(a1 + 464) = v79;
          long long v81 = *(_OWORD *)(a7 + 192);
          long long v82 = *(_OWORD *)(a7 + 208);
          long long v83 = *(_OWORD *)(a7 + 224);
          *(void *)(a1 + 560) = *(void *)(a7 + 240);
          *(_OWORD *)(a1 + 528) = v82;
          *(_OWORD *)(a1 + 544) = v83;
          *(_OWORD *)(a1 + 512) = v81;
          if (v51 != (_OWORD *)a7)
          {
            *(_DWORD *)(a1 + 600) = *(_DWORD *)(a7 + 280);
            sub_10084EEAC((void *)(a1 + 568), *(uint64_t **)(a7 + 264), 0);
          }
          *(_OWORD *)(a1 + 608) = *(_OWORD *)(a7 + 288);
        }
        else
        {
          sub_101143874(v71, 1, v43, v44, v45, v46, v47, v48, *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72), *(double *)(a2 + 96), *(double *)(a2 + 104), *(double *)(a2 + 152), *(double *)(a2 + 160), *(double *)(a2 + 176), *(double *)(a2 + 184), *(void *)(a2 + 16));
        }
        *(double *)(a2 + 224) = sub_101144E0C(*(void *)(a1 + 16));
        double v92 = sub_1000E6F24(*(void *)(a1 + 16));
        *(double *)(a2 + 232) = v92;
        if (v92 >= 0.0 && *(unsigned char *)(a3 + 48))
        {
          *(double *)(a2 + 240) = sub_1010A0588(v109, (double *)&v111, v64);
          double v92 = *(double *)(a2 + 232);
        }
        if (v92 >= 0.0 && !sub_1012EF504(v35, v92))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10231F228);
          }
          uint64_t v93 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,maximium speed exceeded resetting modified subsampler", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10231F228);
            }
            __int16 v108 = 0;
            __int16 v103 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v103);
            if (v103 != (char *)buf) {
              free(v103);
            }
          }
          sub_1011445F8(*(void *)(a1 + 16));
          goto LABEL_89;
        }
        goto LABEL_131;
      }
      int v85 = *(void **)(a1 + 24);
      if (!v85 || !a9) {
        goto LABEL_131;
      }
      long long v86 = *(_OWORD *)(a10 + 16);
      v106[0] = *(_OWORD *)a10;
      v106[1] = v86;
      uint64_t v107 = *(void *)(a10 + 32);
      sub_10190CA6C(v85, a2, (uint64_t)v106);
      int v87 = *(void **)(a1 + 24);
      *(void *)(a2 + 224) = v87[2];
      uint64_t v88 = (double *)v87[4];
      if (v88 && (double v89 = *v88, *v88 >= 0.0))
      {
        *(double *)(a2 + 232) = v89;
        double v91 = v89;
      }
      else
      {
        unsigned int v90 = (double *)v87[3];
        if (v90) {
          double v91 = *v90;
        }
        else {
          double v91 = 0.0;
        }
        *(double *)(a2 + 232) = v91;
        if (!v88) {
          goto LABEL_124;
        }
        double v89 = *v88;
      }
      if (v89 >= 0.0) {
        goto LABEL_126;
      }
      unsigned int v90 = (double *)v87[3];
LABEL_124:
      if (!v90)
      {
        double v95 = -1.0;
        goto LABEL_128;
      }
      uint64_t v88 = v90;
LABEL_126:
      double v95 = v88[1];
LABEL_128:
      *(double *)(a2 + 240) = v95;
      if (v91 >= 0.0 && (*(void *)&v91 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && !sub_1012EF504(v35, v91))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231F228);
        }
        __int16 v97 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,maximum speed exceeded resetting Rhythmic odometer", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10231F228);
          }
          __int16 v108 = 0;
          char v104 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v104);
          if (v104 != (char *)buf) {
            free(v104);
          }
        }
        sub_1012EF4C0(*(void **)(a1 + 24));
        goto LABEL_89;
      }
      goto LABEL_131;
    }
    double v35 = v110;
    if (v110 <= 180.0) {
      goto LABEL_52;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231F228);
    }
    uint64_t v41 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      double v114 = v35;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM,exceeded max interval,%{public}.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231F228);
      }
      int v111 = 134349056;
      double v112 = v35;
      int v100 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryInterface::update(GNSS::PerEpochData &, const GNSS::PerEpochData &, const CLMotionActivity &, const CMWorkoutType &, const BOOL, const GNSS::PerEpochData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType &, const BOOL, const std::optional<CLPedometerPathStraightness> &)", "%s\n", v100);
      if (v100 != (char *)buf) {
        free(v100);
      }
    }
    uint64_t v42 = *(void *)(a1 + 8);
    if (v42)
    {
      sub_101329534(v42);
    }
    else
    {
      uint64_t v84 = *(void *)(a1 + 32);
      if (v84)
      {
        sub_101196910(v84);
      }
      else
      {
        uint64_t v94 = *(void *)(a1 + 16);
        if (v94) {
          sub_1011445F8(v94);
        }
      }
    }
  }
  return v30;
}

void sub_1012F0778()
{
}

void sub_1012F07E8()
{
}

void sub_1012F080C()
{
}

void sub_1012F08B8()
{
  sub_1006A9CC0(v1);
  *(void *)uint64_t v0 = off_1022CAE80;
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*(void **)(v0 + 8));
  }
  operator delete();
}

void sub_1012F0918()
{
}

void sub_1012F0988()
{
}

uint64_t sub_1012F09AC(uint64_t result)
{
  if (!*(void *)(result + 24)) {
    operator new();
  }
  return result;
}

void sub_1012F0A2C()
{
}

void sub_1012F0A50(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  int v12 = a5 & ~a3;
  int v13 = a8 & a4 & a9 ^ 1;
  int v14 = v13 | a2;
  if (v12 == 1 && v14)
  {
    uint64_t v15 = *(void *)(a1 + 24);
    if (v15)
    {
      sub_10190CC30(v15);
      long long v16 = *(double **)(a1 + 24);
      double v17 = v16[2];
      sub_1012EF4C0(v16);
    }
    else
    {
      double v17 = 0.0;
    }
    uint64_t v21 = *(void *)(a1 + 8);
    if (!v21)
    {
      uint64_t v23 = *(void *)(a1 + 32);
      if (v23)
      {
        long long v22 = (double *)(v23 + 1952);
        goto LABEL_14;
      }
      uint64_t v21 = *(void *)(a1 + 16);
      if (!v21) {
        goto LABEL_15;
      }
    }
    long long v22 = (double *)(v21 + 16);
LABEL_14:
    *long long v22 = v17;
LABEL_15:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231F228);
    }
    long long v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      double v87 = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "GPSODOM,switching from Rhythmic to normal GNSS odometer,greatestDistance,%{public}.2lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231F228);
      }
      int v71 = 134349056;
      double v72 = v17;
      long long v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryInterface::handleGNSSOperatingState(const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL)", "%s\n", v53);
      if (v53 != (char *)buf) {
        free(v53);
      }
    }
    int v18 = 0;
    goto LABEL_53;
  }
  int v18 = 0;
  if (((v12 | v13) & 1) == 0 && (a2 & 1) == 0)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    if (v19)
    {
      double v20 = sub_101144E0C(v19);
      sub_101329534(*(void *)(a1 + 8));
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 32);
      if (v25)
      {
        double v20 = sub_101196B9C(v25);
        sub_101196910(*(void *)(a1 + 32));
      }
      else
      {
        uint64_t v26 = *(void *)(a1 + 16);
        if (v26)
        {
          double v20 = sub_101144E0C(v26);
          sub_1011445F8(*(void *)(a1 + 16));
        }
        else
        {
          double v20 = 0.0;
        }
      }
    }
    int v27 = *(double **)(a1 + 24);
    if (v27
      && ((v27[2] = v20, (uint64_t v28 = *((void *)v27 + 3)) == 0) ? (v29 = 1) : (v29 = *(double *)(v28 + 144) > 0.0),
          (uint64_t v30 = *((void *)v27 + 4)) == 0 ? (v31 = 1) : (v31 = *(double *)(v30 + 144) > 0.0),
          (!v29 || !v31)
       && (double v32 = *(double *)(a1 + 336), v32 > 0.0)
       && vabdd_f64(v32, CFAbsoluteTimeGetCurrent()) <= 3.0
       && !sub_1000EF668(*(double *)(a1 + 376), *(double *)(a1 + 384))
       && sub_1000EF68C(*(double *)(a1 + 376), *(double *)(a1 + 384))
       && sub_1000F0E28(*(double *)(a1 + 392))))
    {
      BOOL v33 = *(void **)(a1 + 24);
      v70[0] = 0;
      v70[32] = 0;
      sub_10190CA6C(v33, a1 + 320, (uint64_t)v70);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231F228);
      }
      long long v34 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        double v35 = *(double *)(a1 + 336);
        uint64_t v36 = *(void *)(a1 + 376);
        uint64_t v37 = *(void *)(a1 + 384);
        uint64_t v38 = *(void *)(a1 + 392);
        uint64_t v39 = *(void *)(a1 + 496);
        uint64_t v40 = *(void *)(a1 + 504);
        uint64_t v41 = *(void *)(a1 + 472);
        uint64_t v42 = *(void *)(a1 + 480);
        uint64_t v43 = *(void *)(a1 + 416);
        uint64_t v44 = *(void *)(a1 + 424);
        *(_DWORD *)long long buf = 134351361;
        double v87 = v35;
        __int16 v88 = 2049;
        *(void *)double v89 = v36;
        *(_WORD *)&v89[8] = 2049;
        *(void *)unsigned int v90 = v37;
        *(_WORD *)&v90[8] = 2050;
        *(void *)double v91 = v39;
        *(_WORD *)&v91[8] = 2050;
        *(void *)double v92 = v38;
        *(_WORD *)&v92[8] = 2050;
        *(void *)uint64_t v93 = v41;
        *(_WORD *)&v93[8] = 2050;
        uint64_t v94 = v43;
        __int16 v95 = 2050;
        uint64_t v96 = v40;
        __int16 v97 = 2050;
        uint64_t v98 = v42;
        __int16 v99 = 2050;
        uint64_t v100 = v44;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,%{public}.1lf,location sent to RhythmicOdometer for initializing when switching from 1Hz,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf", buf, 0x66u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10231F228);
        }
        double v59 = *(double *)(a1 + 336);
        uint64_t v60 = *(void *)(a1 + 376);
        uint64_t v61 = *(void *)(a1 + 384);
        uint64_t v62 = *(void *)(a1 + 392);
        uint64_t v63 = *(void *)(a1 + 496);
        uint64_t v64 = *(void *)(a1 + 504);
        uint64_t v65 = *(void *)(a1 + 472);
        uint64_t v66 = *(void *)(a1 + 480);
        uint64_t v67 = *(void *)(a1 + 416);
        uint64_t v68 = *(void *)(a1 + 424);
        int v71 = 134351361;
        double v72 = v59;
        __int16 v73 = 2049;
        *(void *)long long v74 = v60;
        *(_WORD *)&v74[8] = 2049;
        *(void *)long long v75 = v61;
        *(_WORD *)&_OWORD v75[8] = 2050;
        *(void *)long long v76 = v63;
        *(_WORD *)&v76[8] = 2050;
        *(void *)long long v77 = v62;
        *(_WORD *)&v77[8] = 2050;
        *(void *)long long v78 = v65;
        *(_WORD *)&v78[8] = 2050;
        uint64_t v79 = v67;
        __int16 v80 = 2050;
        uint64_t v81 = v64;
        __int16 v82 = 2050;
        uint64_t v83 = v66;
        __int16 v84 = 2050;
        uint64_t v85 = v68;
        double v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryInterface::handleGNSSOperatingState(const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL)", "%s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      int v18 = 1;
    }
    else
    {
      int v18 = 0;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10231F228);
    }
    uint64_t v45 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = *(void *)(a1 + 336);
      uint64_t v47 = *(void *)(a1 + 376);
      uint64_t v48 = *(void *)(a1 + 384);
      uint64_t v49 = *(void *)(a1 + 392);
      *(_DWORD *)long long buf = 134350593;
      double v87 = v20;
      __int16 v88 = 1026;
      *(_DWORD *)double v89 = a6;
      *(_WORD *)&v89[4] = 1026;
      *(_DWORD *)&v89[6] = v18;
      *(_WORD *)unsigned int v90 = 2050;
      *(void *)&v90[2] = v46;
      *(_WORD *)double v91 = 2049;
      *(void *)&v91[2] = v47;
      *(_WORD *)double v92 = 2049;
      *(void *)&v92[2] = v48;
      *(_WORD *)uint64_t v93 = 2050;
      *(void *)&v93[2] = v49;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "GPSODOM,switching from normal to Rhythmic GNSS odometer,greatestDistance,%{public}.2lf,isRhythmicFixQualified,%{public}d,forceUpdateRhythmic,%{public}d,lastLocationTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf", buf, 0x40u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10231F228);
      }
      uint64_t v54 = *(void *)(a1 + 336);
      uint64_t v55 = *(void *)(a1 + 376);
      uint64_t v56 = *(void *)(a1 + 384);
      uint64_t v57 = *(void *)(a1 + 392);
      int v71 = 134350593;
      double v72 = v20;
      __int16 v73 = 1026;
      *(_DWORD *)long long v74 = a6;
      *(_WORD *)&v74[4] = 1026;
      *(_DWORD *)&v74[6] = v18;
      *(_WORD *)long long v75 = 2050;
      *(void *)&v75[2] = v54;
      *(_WORD *)long long v76 = 2049;
      *(void *)&_OWORD v76[2] = v55;
      *(_WORD *)long long v77 = 2049;
      *(void *)&v77[2] = v56;
      *(_WORD *)long long v78 = 2050;
      *(void *)&v78[2] = v57;
      long long v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryInterface::handleGNSSOperatingState(const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL, const BOOL)", "%s\n", v58);
      if (v58 != (char *)buf) {
        free(v58);
      }
    }
  }
LABEL_53:
  if (v14) {
    int v50 = 0;
  }
  else {
    int v50 = a6 & ~a7;
  }
  if ((v18 | v50) == 1)
  {
    uint64_t v51 = *(void *)(a1 + 24);
    if (v51)
    {
      sub_10190CC30(v51);
      if (*(void *)(a1 + 304))
      {
        sub_1000DB3D4((uint64_t)buf);
        if (sub_1012F1284(*(void *)(a1 + 24), (uint64_t)buf))
        {
          uint64_t v52 = *(void *)(a1 + 304);
          if (!v52) {
            sub_10015E48C();
          }
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v52 + 48))(v52, buf);
        }

        if (v105) {
          sub_1000DB0A0(v105);
        }
        if (v104 < 0) {
          operator delete(__p);
        }
        if (v102) {
          sub_1000DB0A0(v102);
        }
        if (v101) {
          sub_1000DB0A0(v101);
        }
      }
    }
  }
}

void sub_1012F1258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012F1284(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void **)(a1 + 32);
  if (v4 && sub_1018FFA88(v4, a2)) {
    return 1;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    return sub_1018FFA88((void *)result, a2);
  }
  return result;
}

uint64_t sub_1012F12EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return sub_1012F1284(result, a2);
  }
  return result;
}

void sub_1012F12FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 192;
  sub_100B5B290(a1 + 192, a2);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    sub_1012F1354(v4, a1 + 240, v3);
  }
}

void sub_1012F1354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    sub_1012F13DC(v5, a2);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    sub_1012F1434(v6, a3);
  }
}

void sub_1012F13AC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1012F13DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 568);
  if (v4 != (uint64_t **)a2) {
    sub_1012F14A0(v4, *(void **)a2, (void *)(a2 + 8));
  }
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 24);

  sub_10190251C(a1);
}

void sub_1012F1434(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char *)(a1 + 352);
  if (v3 != (char *)a2)
  {
    sub_1002DD194(v3, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    sub_1002DD194((char *)(a1 + 376), *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  }

  sub_1018FEBD0((void *)a1);
}

uint64_t **sub_1012F14A0(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    double v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    double v17 = result;
    int v18 = v8;
    uint64_t v19 = v8;
    if (v8)
    {
      int v18 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        double v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          long long v10 = *(_OWORD *)(v9 + 5);
          long long v11 = *(_OWORD *)(v9 + 7);
          long long v12 = *(_OWORD *)(v9 + 9);
          v8[11] = v9[11];
          *(_OWORD *)(v8 + 9) = v12;
          *(_OWORD *)(v8 + 7) = v11;
          *(_OWORD *)(v8 + 5) = v10;
          sub_1012F1624(v5, (uint64_t)v8);
          long long v8 = v18;
          uint64_t v19 = v18;
          if (v18) {
            int v18 = sub_1002FABD8((uint64_t)v18);
          }
          int v13 = (void *)v9[1];
          if (v13)
          {
            do
            {
              a2 = v13;
              int v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v14 = *a2 == (void)v9;
              double v9 = a2;
            }
            while (!v14);
          }
          if (!v8) {
            break;
          }
          double v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002FAC2C((uint64_t)&v17);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1012F1694(v5, (_OWORD *)a2 + 2);
      uint64_t v15 = (void *)a2[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (void *)a2[2];
          BOOL v14 = *v16 == (void)a2;
          a2 = v16;
        }
        while (!v14);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1012F1610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012F1624(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *sub_1012F1694(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x60uLL);
  uint64_t v5 = v4;
  long long v6 = a2[1];
  v4[2] = *a2;
  void v4[3] = v6;
  long long v7 = a2[3];
  void v4[4] = a2[2];
  void v4[5] = v7;
  long long v8 = a1 + 1;
  double v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        long long v8 = (uint64_t **)v9;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v9 + 8)) {
          break;
        }
        double v9 = (uint64_t *)*v9;
        long long v10 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      double v9 = (uint64_t *)v9[1];
    }
    while (v9);
    long long v10 = v8 + 1;
  }
  else
  {
    long long v10 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v8, v10, (uint64_t *)v4);
  return v5;
}

__n128 sub_1012F1734@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v2;
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_1012F1760(uint64_t a1, double *a2, double *a3, double *a4, uint64_t a5, double *a6, double *a7)
{
  BOOL v14 = sub_1012F1E20(a3, a4);
  if (!v14) {
    return;
  }
  if (!*(unsigned char *)(a1 + 120))
  {
    if (!sub_1012F2118(v14, a2, a5, a4, a6, a7)) {
      return;
    }
    double v17 = (void *)(a5 + 8);
    sub_1000E2830((uint64_t)buf, v17);
    uint64_t v18 = *(void *)(*(void *)(*(void *)&v28[4]
                                + (((unint64_t)(*((void *)&v31 + 1) + v31 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (BYTE8(v31) + v31 - 1));
    sub_1000D80C4(buf);
    sub_1000E2830((uint64_t)buf, v17);
    double v19 = *(double *)(*(void *)(*(void *)&v28[4]
                                + (((unint64_t)(*((void *)&v31 + 1) + v31 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (BYTE8(v31) + v31 - 1)
                    + 8);
    sub_1000D80C4(buf);
    if (*a2 < 0.0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      double v20 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        double v21 = *a2;
        *(_DWORD *)long long buf = 134283521;
        *(double *)uint64_t v28 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not initialize, wifi measurement timestamp %{private}0.3f was negative.", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_9;
      }
LABEL_36:
      dispatch_once(&qword_1024193A0, &stru_10231F248);
      goto LABEL_9;
    }
    if (v19 >= 0.0)
    {
      *(double *)(a1 + 64) = *a2;
      *(double *)(a1 + 72) = *a2;
      *(double *)(a1 + 80) = v19;
      *(double *)a1 = *a3;
      double v23 = *((double *)sub_1000DBFA0() + 7) * *a4;
      *(double *)(a1 + 8) = v23 * v23;
      *(void *)(a1 + 112) = v18;
      *(unsigned char *)(a1 + 120) = 1;
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      long long v24 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        double v25 = *a2;
        double v26 = *a3;
        *(_DWORD *)long long buf = 134284289;
        *(double *)uint64_t v28 = v25;
        *(_WORD *)&v28[8] = 2049;
        *(double *)&unsigned char v28[10] = v19;
        __int16 v29 = 2049;
        double v30 = v26;
        LOWORD(v31) = 2050;
        *(double *)((char *)&v31 + 2) = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, initialized, wifi timestamp, %{private}0.3f, relative altitude timestamp, %{private}0.3f, initial altitude, %{private}0.3f, initial uncertainty, %{public}0.3f.", buf, 0x2Au);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        goto LABEL_36;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      long long v22 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134283521;
        *(double *)uint64_t v28 = v19;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not initialize, relative altitude timestamp %{private}0.3f was negative.", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        goto LABEL_36;
      }
    }
LABEL_9:
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAltitudeKalmanFilter::initializeKalmanFilter(const CFAbsoluteTime &, const double &, const double &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231F248);
  }
  uint64_t v15 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, already initialized", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
}

BOOL sub_1012F1E20(double *a1, double *a2)
{
  if (*a2 < 0.0 || (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231F248);
    }
    long long v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      double v5 = *a2;
      *(_DWORD *)long long buf = 134349056;
      double v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, invalid uncertainty, %{public}0.3f", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_22:
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiAltitudeKalmanFilter::validAltitudeAndUncertainty(const double &, const double &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
LABEL_25:
    dispatch_once(&qword_1024193A0, &stru_10231F248);
    goto LABEL_22;
  }
  if (*a1 >= -450.0 && *a1 <= 8850.0) {
    return 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231F248);
  }
  long long v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *a1;
    *(_DWORD *)long long buf = 134283521;
    double v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, invalid altitude, %{private}0.3f", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  return result;
}

BOOL sub_1012F2118(uint64_t a1, double *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  long long v10 = (void *)(a3 + 8);
  sub_1000E2830((uint64_t)v19, (void *)(a3 + 8));
  uint64_t v11 = v21;
  sub_1000D80C4(v19);
  if (!v11) {
    return 0;
  }
  sub_1000E2830((uint64_t)v19, v10);
  double v12 = *(double *)(*(void *)(v19[1] + (((unint64_t)(v21 + v20 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (v21 + v20 - 1)
                  + 8);
  sub_1000D80C4(v19);
  double v13 = *a4;
  if (v13 > *((double *)sub_1000DBFA0() + 11)) {
    return 0;
  }
  double v14 = *a5;
  if (v14 < *((double *)sub_1000DBFA0() + 10)) {
    return 0;
  }
  double v15 = vabdd_f64(*a2, v12);
  if (v15 > *((double *)sub_1000DBFA0() + 14)) {
    return 0;
  }
  double v17 = *a5 - *a6;
  if (v17 <= *((double *)sub_1000DBFA0() + 17)) {
    return 1;
  }
  double v18 = *a6;
  return v18 >= *((double *)sub_1000DBFA0() + 18);
}

BOOL sub_1012F223C(uint64_t a1, double *a2, void *a3, double *a4, double *a5, unsigned char *a6)
{
  if (*(unsigned char *)(a1 + 120))
  {
    double v12 = *a2 - *(double *)(a1 + 64);
    if (v12 >= *((double *)sub_1000DBFA0() + 12))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      double v19 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        double v20 = *a2 - *(double *)(a1 + 64);
        *(_DWORD *)long long buf = 134283521;
        double v29 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, did not propagate for, %{private}0.3f, seconds", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_53;
    }
    double v13 = *a2 - *(double *)(a1 + 72);
    if (v13 >= *((double *)sub_1000DBFA0() + 13))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      uint64_t v21 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        double v22 = *a2 - *(double *)(a1 + 72);
        *(_DWORD *)long long buf = 134283521;
        double v29 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, did not update for, %{private}0.3f, seconds", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_53;
    }
    if (!sub_1012F28D4(a1, a2, a3))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      double v23 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, unable to propagate", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_53;
    }
    if (sub_1012F31E8((double *)a1, a4, a5, v14, a6))
    {
      if (!sub_1012F3274(a1, a4, a5))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231F248);
        }
        double v15 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, stopping, unable to update", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_50;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 == -1) {
          goto LABEL_43;
        }
LABEL_53:
        dispatch_once(&qword_1024193A0, &stru_10231F248);
LABEL_43:
        long long v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagateAndUpdate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &, const BOOL &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
        goto LABEL_50;
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
    }
    double v25 = (double *)(a1 + 8);
    if (!sub_1012F1E20((double *)a1, (double *)(a1 + 8)))
    {
LABEL_50:
      sub_1000DBF34(a1);
      return 0;
    }
    double v26 = *((double *)sub_1000DBFA0() + 28);
    double v27 = v26 * *((double *)sub_1000DBFA0() + 28);
    if (v27 >= *v25) {
      double v27 = *v25;
    }
    *double v25 = v27;
    return 1;
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231F248);
    }
    long long v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not propagate and update, not initialized", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagateAndUpdate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *, const double &, const double &, const BOOL &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1012F28D4(uint64_t a1, double *a2, void *a3)
{
  double v5 = *(double *)(a1 + 64);
  *(double *)(a1 + 96) = *a2 - v5;
  if (*a2 < v5)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231F248);
    }
    long long v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      double v8 = *a2;
      *(_DWORD *)long long buf = 134283777;
      *(void *)uint64_t v40 = v7;
      *(_WORD *)&v40[8] = 2049;
      *(double *)&v40[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not propagate, filter's propagation timestamp, %{private}0.3f, is larger than current wifi timestamp, %{private}0.3f", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_31;
      }
      goto LABEL_62;
    }
    return result;
  }
  *(double *)(a1 + 64) = *a2;
  uint64_t v11 = a3 + 1;
  sub_1000E2830((uint64_t)buf, a3 + 1);
  uint64_t v12 = v42;
  sub_1000D80C4(buf);
  if (!v12)
  {
    double v24 = *(double *)(a1 + 8) + *(double *)(a1 + 96) * *(double *)(a1 + 96) * *(double *)(a1 + 48);
    *(void *)(a1 + 16) = *(void *)a1;
    *(double *)(a1 + 24) = v24;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231F248);
    }
    double v25 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 134283521;
      *(void *)uint64_t v40 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, propagated, timestamp, %{private}0.3f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_54;
    }
    goto LABEL_63;
  }
  sub_1000E2830((uint64_t)buf, v11);
  double v13 = *(double *)(*(void *)(*(void *)&v40[4] + (((unint64_t)(v42 + v41 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (v42 + v41 - 1)
                  + 8);
  sub_1000D80C4(buf);
  sub_1000E2830((uint64_t)buf, v11);
  double v14 = *(double *)(*(void *)(*(void *)&v40[4] + (((unint64_t)(v42 + v41 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                  + 16 * (v42 + v41 - 1));
  sub_1000D80C4(buf);
  int v15 = (*(uint64_t (**)(void *, double *))(*a3 + 16))(a3, a2);
  double v16 = *(double *)(a1 + 80);
  if (v13 >= v16)
  {
    int v17 = v15;
    double v18 = *(double *)(a1 + 112);
    *(double *)(a1 + 80) = v13;
    *(double *)(a1 + 88) = v13 - v16;
    if (v13 - v16 <= *((double *)sub_1000DBFA0() + 15))
    {
      double v22 = v14 - v18;
      double v23 = *(double *)(a1 + 88);
      if (v23 != 0.0) {
        *(void *)(a1 + 104) = 0;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      double v19 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = *(void *)(a1 + 88);
        uint64_t v21 = *(void *)(a1 + 104);
        *(_DWORD *)long long buf = 134283777;
        *(void *)uint64_t v40 = v20;
        *(_WORD *)&v40[8] = 2049;
        *(void *)&v40[10] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, baro outage time interval, %{private}0.3f, altitude change over outage, %{private}0.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231F248);
        }
        uint64_t v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *)", "%s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      double v22 = v14 - *(double *)(a1 + 112) - *(double *)(a1 + 104);
      *(void *)(a1 + 104) = 0;
      double v23 = *(double *)(a1 + 88);
    }
    *(double *)(a1 + 112) = v14;
    double v30 = fabs(v22);
    if (v30 >= 2.5) {
      int v17 = 0;
    }
    if (v23 == 0.0)
    {
      if (v17)
      {
LABEL_43:
        double v32 = *(double *)(a1 + 8);
        *(void *)(a1 + 16) = *(void *)a1;
        double v33 = *(double *)(a1 + 96) * *(double *)(a1 + 96);
        double v34 = *(double *)(a1 + 32);
        goto LABEL_46;
      }
    }
    else
    {
      if (v30 / v23 > *((double *)sub_1000DBFA0() + 6)) {
        char v31 = 1;
      }
      else {
        char v31 = v17;
      }
      if (v31) {
        goto LABEL_43;
      }
    }
    double v32 = *(double *)(a1 + 8);
    *(double *)(a1 + 16) = v22 + *(double *)a1;
    double v33 = *(double *)(a1 + 96) * *(double *)(a1 + 96);
    double v34 = *(double *)(a1 + 40);
LABEL_46:
    *(double *)(a1 + 24) = v32 + v33 * v34;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231F248);
    }
    double v35 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 134283521;
      *(void *)uint64_t v40 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, propagated, timestamp, %{private}0.3f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_54:
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *)", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
      return 1;
    }
LABEL_63:
    dispatch_once(&qword_1024193A0, &stru_10231F248);
    goto LABEL_54;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231F248);
  }
  double v27 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *(void *)(a1 + 80);
    *(_DWORD *)long long buf = 134283777;
    *(void *)uint64_t v40 = v28;
    *(_WORD *)&v40[8] = 2049;
    *(double *)&v40[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, did not propagate, filter's relative altitude timestamp, %{private}0.3f, is larger than current relative altitude timestamp, %{private}0.3f", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_31:
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::propagate(const CFAbsoluteTime &, const CL::Wifi1::Types::ElevationHistory *)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
      return 0;
    }
LABEL_62:
    dispatch_once(&qword_1024193A0, &stru_10231F248);
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_1012F31E8(double *a1, double *a2, double *a3, uint64_t a4, unsigned char *a5)
{
  BOOL v8 = sub_1012F1E20(a2, a3);
  double v9 = a1[12];
  if (v9 <= 0.0)
  {
    BOOL v11 = 1;
  }
  else
  {
    double v10 = vabdd_f64(*a2, *a1) / v9;
    BOOL v11 = v10 < *((double *)sub_1000DBFA0() + 16);
  }
  if (*a5) {
    BOOL v12 = v8;
  }
  else {
    BOOL v12 = 0;
  }
  return v12 & v11;
}

BOOL sub_1012F3274(uint64_t a1, double *a2, double *a3)
{
  long long v6 = sub_1000DBFA0();
  double v7 = *((double *)v6 + 7) * *a3 * (*((double *)v6 + 7) * *a3);
  *(double *)(a1 + 56) = v7;
  double v8 = v7 + *(double *)(a1 + 24);
  if (v8 > 0.0)
  {
    double v9 = *a2 - *(double *)(a1 + 16);
    double v10 = v7 + *(double *)(a1 + 24);
    if (v9 * v9 / v8 > *((double *)sub_1000DBFA0() + 20))
    {
      double v11 = 1.0;
      do
      {
        double v11 = v11 * *((double *)sub_1000DBFA0() + 21);
        double v12 = *(double *)(a1 + 8) + *(double *)(a1 + 96) * (v11 * *(double *)(a1 + 96)) * *(double *)(a1 + 32);
        *(double *)(a1 + 24) = v12;
        double v10 = v12 + *(double *)(a1 + 56);
      }
      while (v9 * v9 / v10 > *((double *)sub_1000DBFA0() + 20));
    }
    double v13 = *(double *)(a1 + 24);
    double v14 = *(double *)(a1 + 16) + v13 / v10 * v9;
    *(double *)(a1 + 8) = v13 * (1.0 - v13 / v10);
    *(void *)(a1 + 72) = *(void *)(a1 + 64);
    if (*(double *)(a1 + 88) == 0.0) {
      *(double *)(a1 + 104) = *(double *)(a1 + 104) + v14 - *(double *)a1;
    }
    *(double *)a1 = v14;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231F248);
    }
    int v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 72);
      *(_DWORD *)long long buf = 134283521;
      uint64_t v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, updated, timestamp, %{private}0.3f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::update(const double &, const double &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  return v8 > 0.0;
}

BOOL sub_1012F3530(uint64_t a1, uint64_t *a2, double *a3)
{
  if (!*(unsigned char *)(a1 + 120)) {
    return 0;
  }
  BOOL result = sub_1012F1E20((double *)a1, (double *)(a1 + 8));
  if (result)
  {
    *a2 = *(void *)a1;
    double v7 = *((double *)sub_1000DBFA0() + 8) * sqrt(*(double *)(a1 + 8));
    double v8 = *((double *)sub_1000DBFA0() + 9);
    if (v7 >= v8) {
      double v8 = v7;
    }
    *a3 = v8;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231F248);
    }
    double v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *a2;
      double v11 = *a3;
      *(_DWORD *)long long buf = 134283777;
      uint64_t v14 = v10;
      __int16 v15 = 2049;
      double v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, kalmanFilter, estimated altitude, %{private}0.3f, uncertainty, %{private}0.3f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231F248);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAltitudeKalmanFilter::getResults(double &, double &) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 1;
  }
  return result;
}

void sub_1012F3764(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1012F3794()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1012F384C(_Unwind_Exception *a1)
{
}

void sub_1012F3864()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1012F390C(_Unwind_Exception *a1)
{
}

void sub_1012F3924(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10170140C((void *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 3616) |= 1u;
  *(void *)(a2 + 616) = v4;
  operator new();
}

void sub_1012F3DA4(_Unwind_Exception *a1)
{
  sub_101706914(v1);
  _Unwind_Resume(a1);
}

void sub_1012F3EB8(id a1)
{
  qword_102486BE8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSuggestedActionManagerSilo"];
}

id sub_1012F415C(uint64_t a1)
{
  id result = [[*(id *)(a1 + 32) activeRequests] count];
  if (result)
  {
    id v3 = +[NSMutableIndexSet indexSet];
    double Current = CFAbsoluteTimeGetCurrent();
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v27 = a1;
    id v5 = [*(id *)(a1 + 32) activeRequests];
    id v6 = [v5 countByEnumeratingWithState:&v28 objects:v44 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)v29;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v29 != v9) {
            objc_enumerationMutation(v5);
          }
          double v11 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v10);
          [v11 timestamp];
          if (Current > v12 + 5.0)
          {
            [v3 addIndex:(char *)v10 + v8];
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_10231F288);
            }
            double v13 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              [v11 lat];
              uint64_t v15 = v14;
              [v11 lon];
              uint64_t v17 = v16;
              [v11 radiusMeters];
              *(_DWORD *)long long buf = 134218496;
              uint64_t v39 = v15;
              __int16 v40 = 2048;
              uint64_t v41 = v17;
              __int16 v42 = 2048;
              double v43 = v18;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE_APP: Removing request since it timed out, lat, %f, lon, %f, radius, %f.", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10231F288);
              }
              [v11 lat];
              uint64_t v21 = v20;
              [v11 lon];
              uint64_t v23 = v22;
              [v11 radiusMeters];
              int v32 = 134218496;
              uint64_t v33 = v21;
              __int16 v34 = 2048;
              uint64_t v35 = v23;
              __int16 v36 = 2048;
              double v37 = v24;
              double v25 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "-[CLAppTileDataProvider beginService]_block_invoke", "%s\n", v25);
              if (v25 != (char *)buf) {
                free(v25);
              }
            }
            double v19 = (void (**)(id, void, NSError *))[v11 handler];
            v19[2](v19, 0, +[NSError errorWithDomain:@"CLAppTileDataProviderErrorDomain" code:0 userInfo:0]);
          }
          uint64_t v10 = (char *)v10 + 1;
        }
        while (v7 != v10);
        id v26 = [v5 countByEnumeratingWithState:&v28 objects:v44 count:16];
        id v7 = v26;
        v8 += (uint64_t)v10;
      }
      while (v26);
    }
    [objc_msgSend(*(id *)(v27 + 32), "activeRequests") removeObjectsAtIndexes:v3];
    id result = [[*(id *)(v27 + 32) activeRequests] count];
    if (result) {
      return [((id *)(v27 + 32))[0] activeRequestCleanupTimer setNextFireDelay:5.0];
    }
  }
  return result;
}

void sub_1012F4F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55)
{
}

void sub_1012F5848(uint64_t a1, unsigned int *a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_1000DC48C(&v8, (void *)a3[1], a3[2]);
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 1);
    uint64_t v9 = a3[3];
  }
  if (*((char *)a3 + 55) < 0)
  {
    sub_1000DC48C(&v10, (void *)a3[4], a3[5]);
  }
  else
  {
    long long v10 = *((_OWORD *)a3 + 2);
    uint64_t v11 = a3[6];
  }
  if (*((char *)a3 + 79) < 0)
  {
    sub_1000DC48C(&__p, (void *)a3[7], a3[8]);
  }
  else
  {
    long long __p = *(_OWORD *)(a3 + 7);
    uint64_t v13 = a3[9];
  }
  [a4 onTileWasDownloadedNotification:v6 data:&v7];
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)v8);
  }
}

void sub_1012F5958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012F63A8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012F63D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1012F6458()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1012F64E8(_Unwind_Exception *a1)
{
}

void sub_1012F67A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    [*(id *)(a1 + 32) delegate];
    if (objc_opt_respondsToSelector())
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1012F6854;
      block[3] = &unk_10229FF28;
      block[4] = v3;
      void block[5] = a2;
      block[6] = a3;
      dispatch_async((dispatch_queue_t)[v3 delegateQueue], block);
    }
  }
}

id sub_1012F6854(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);

  return _[v2 eventUpdateForDevice:v3 event:v4];
}

void sub_1012F6A10(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1012F6A40(uint64_t a1)
{
  uint64_t v2 = sub_100CF59B4(a1) + 560;
  sub_1006587CC(v2, 0);
  sub_1012F6DB4(a1 + 1424, v2);
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1476) = xmmword_101DB3610;
  int64x2_t v3 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 1496) = v3;
  *(_DWORD *)(a1 + 1512) = 0;
  *(_OWORD *)(a1 + 1516) = xmmword_101DB3610;
  *(int64x2_t *)(a1 + 1536) = v3;
  *(void *)(a1 + 1584) = 0;
  *(unsigned char *)(a1 + 1592) = 0;
  *(_DWORD *)(a1 + 1596) = 2139095039;
  sub_1006599B4(v2, (uint64_t)sub_1012F6B34, a1);
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1476) = xmmword_101DB3620;
  int64x2_t v4 = vdupq_n_s64(2uLL);
  *(int64x2_t *)(a1 + 1496) = v4;
  *(_DWORD *)(a1 + 1512) = 0;
  *(_OWORD *)(a1 + 1516) = xmmword_101DB3630;
  *(int64x2_t *)(a1 + 1536) = v4;
  return a1;
}

void sub_1012F6B14(_Unwind_Exception *a1)
{
  void *v1 = off_1022C0070;
  _Unwind_Resume(a1);
}

float sub_1012F6B34(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100CF646C(a4, a1, a2);
}

BOOL sub_1012F6B48(uint64_t a1, float32x2_t *a2, double *a3)
{
  unint64_t v4 = (unint64_t)(*a3 * 1000000.0);
  unint64_t v16 = v4;
  float v5 = a2[1].f32[0];
  float32x2_t v14 = vmul_f32(*a2, (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  float v15 = v5 * 0.017453;
  sub_100B5C68C((float32x2_t *)(a1 + 1472), &v14);
  uint64_t v6 = *(void *)(a1 + 1504) - 1;
  *(void *)(a1 + 1504) = v6;
  if (!v6)
  {
    *(void *)(a1 + 1504) = *(void *)(a1 + 1496);
    unint64_t v7 = v4 - *(void *)(a1 + 1584);
    if (v7 >= 0xF4241)
    {
      sub_100CF59B8(a1);
      sub_100658878(a1 + 560, v7);
      if (*(unsigned char *)(a1 + 1592)) {
        sub_100AD63C4((uint64_t *)(a1 + 1424), a1 + 1552);
      }
      float v8 = *(float *)(a1 + 1596);
      if (v8 != 3.4028e38) {
        sub_100AD65B4(a1 + 1424, v8);
      }
    }
    *(void *)(a1 + 1584) = v4;
    int v9 = *(_DWORD *)(a1 + 1488);
    uint64_t v12 = *(void *)(a1 + 1480);
    int v13 = v9;
    sub_100658E3C(a1 + 560, (uint64_t)&v12, &v16);
  }
  int v10 = *(unsigned __int8 *)(a1 + 1304);
  if (*(unsigned char *)(a1 + 1304)) {
    sub_100CF64A8(a1, (uint64_t)&v14, v16);
  }
  return v10 != 0;
}

float32x2_t *sub_1012F6C80(uint64_t a1, float32x2_t *a2, double *a3)
{
  __int32 v4 = a2[1].i32[0];
  float32x2_t v13 = *a2;
  __int32 v14 = v4;
  uint64_t v5 = (unint64_t)(*a3 * 1000000.0);
  uint64_t v12 = v5;
  id result = sub_100B5C68C((float32x2_t *)(a1 + 1512), &v13);
  uint64_t v7 = *(void *)(a1 + 1544) - 1;
  *(void *)(a1 + 1544) = v7;
  if (!v7)
  {
    *(void *)(a1 + 1544) = *(void *)(a1 + 1536);
    int v8 = *(_DWORD *)(a1 + 1528);
    uint64_t v10 = *(void *)(a1 + 1520);
    int v11 = v8;
    sub_100CF6B48((float32x4_t *)a1, (uint64_t)&v10, v5);
    int v9 = *(_DWORD *)(a1 + 1528);
    uint64_t v10 = *(void *)(a1 + 1520);
    int v11 = v9;
    return (float32x2_t *)sub_100658E04(a1 + 560, (uint64_t)&v10);
  }
  return result;
}

void *sub_1012F6D34(uint64_t a1, float a2)
{
  id result = sub_100AD65B4(a1 + 1424, a2);
  *(float *)(a1 + 1596) = a2;
  return result;
}

void *sub_1012F6D6C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 1592) = 1;
  *(_DWORD *)(a1 + 1552) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 1556) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 1560) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 1564) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 1568) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 1572) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 24);
  return sub_100AD63C4((uint64_t *)(a1 + 1424), a2);
}

uint64_t sub_1012F6DB4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) &= 0xFCu;
  if (!a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231F310);
    }
    __int32 v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: receiver, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMLinearTemperatureFit.h, line 27,receiver must not be null..", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231F310);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMLinearTemperatureFit::CMLinearTemperatureFit(CMTemperatureFitReceiver *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return a1;
}

void sub_1012F6F60(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012F6F90(uint64_t a1, uint64_t a2, int a3)
{
}

void *sub_1012F6FF8(void *a1)
{
  *a1 = off_10231F340;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  int64x2_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_1009D1DE4(a1);
}

CFStringRef sub_1012F7068(int a1)
{
  if ((a1 - 1) > 7) {
    return @"unknown";
  }
  else {
    return off_10231F450[a1 - 1];
  }
}

CFStringRef sub_1012F7090(unsigned int a1)
{
  if (a1 > 4) {
    return @"?";
  }
  else {
    return off_10231F490[a1];
  }
}

CFStringRef sub_1012F70B4(int a1)
{
  CFStringRef v1 = @"?";
  if (a1 == 1) {
    CFStringRef v1 = @"Disconnected";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"Connected";
  }
}

CFStringRef sub_1012F70E0(unsigned int a1)
{
  if (a1 > 2) {
    return @"?";
  }
  else {
    return off_10231F4B8[a1];
  }
}

BOOL sub_1012F7104(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 1;
  }
  sub_100514790();
  return !sub_100516FEC();
}

uint64_t sub_1012F7134()
{
  uint64_t v6 = 0;
  uint64_t v0 = sub_100514790();
  sub_100516734(v0, (int *)&v6 + 1, (int *)&v6);
  if (v6) {
    unsigned int v1 = 2;
  }
  else {
    unsigned int v1 = 4;
  }
  BOOL v3 = HIDWORD(v6) != 3 || v6 != 3;
  if (v6) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 3;
  }
  if (HIDWORD(v6)) {
    return v4;
  }
  else {
    return v1;
  }
}

void sub_1012F71A4(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    sub_100514790();
    int v3 = *(_DWORD *)(a1 + 56);
    int v2 = *(_DWORD *)(a1 + 60);
    if (!*(unsigned char *)(a1 + 29)) {
      operator new();
    }
    unsigned int v4 = (uint64_t *)sub_100A26784();
    v7[0] = v3;
    v7[1] = v2;
    char v8 = 1;
    sub_101A46D60(v4, (uint64_t)v7, (uint64_t *)&v9);
    long long v5 = v9;
    long long v9 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v5;
    if (v6)
    {
      sub_1000DB0A0(v6);
      if (*((void *)&v9 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    sub_100A293C8(*(void *)(a1 + 32), (uint64_t)sub_1012F7930, a1);
    sub_100A2941C(*(void **)(a1 + 32), (uint64_t)sub_1012F7DBC, a1);
    sub_100A2932C(*(uint64_t **)(a1 + 32), (uint64_t)sub_1012F790C, a1);
  }
}

void sub_1012F72CC()
{
}

BOOL sub_1012F72FC(uint64_t a1, _DWORD *a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14()) {
    sub_101AAE268();
  }
  long long v5 = (__IOHIDServiceClient *)sub_100A291D0(*(void *)(a1 + 32));
  if (v5)
  {
    if (!sub_10149F740(a2, v5, @"LocationID")) {
      sub_10149F740(a2, v5, @"SIDE");
    }
    sub_10149FA98((uint64_t)(a2 + 2), v5, @"CFG#");
    sub_10149FA98((uint64_t)(a2 + 8), v5, @"SerialNumber");
    sub_1012F73C0(a1);
    a2[14] = *(_DWORD *)(a1 + 48);
  }
  return v5 != 0;
}

void sub_1012F73C0(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 48))
  {
    int v2 = *(_DWORD *)(sub_100514790() + 24);
    switch(v2)
    {
      case 8202:
      case 8223:
        int v3 = 2;
        goto LABEL_23;
      case 8203:
      case 8204:
      case 8205:
      case 8207:
      case 8208:
      case 8209:
      case 8213:
      case 8214:
      case 8216:
      case 8218:
      case 8220:
      case 8221:
      case 8222:
        goto LABEL_6;
      case 8206:
        int v3 = 1;
        goto LABEL_23;
      case 8210:
        int v3 = 4;
        goto LABEL_23;
      case 8211:
        int v3 = 3;
        goto LABEL_23;
      case 8212:
        goto LABEL_5;
      case 8215:
        int v3 = 6;
        goto LABEL_23;
      case 8217:
        int v3 = 7;
        goto LABEL_23;
      case 8219:
        int v3 = 8;
        goto LABEL_23;
      default:
        if (v2 == 8228)
        {
LABEL_5:
          int v3 = 5;
LABEL_23:
          *(_DWORD *)(a1 + 48) = v3;
        }
        else
        {
LABEL_6:
          if (!*(void *)(a1 + 80))
          {
            unsigned int v4 = (void *)sub_100514790();
            if ((sub_100515DAC(v4, *(void *)(a1 + 80)) & 1) == 0)
            {
              if (qword_1024190E0 != -1) {
                dispatch_once(&qword_1024190E0, &stru_10231F398);
              }
              long long v5 = qword_1024190E8;
              if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 67174657;
                int v8 = v2;
                _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLAccessoryNotifier] Warning! The connected device %{private}d might not be supported", buf, 8u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190E0 != -1) {
                  dispatch_once(&qword_1024190E0, &stru_10231F398);
                }
                uint64_t v6 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryNotifier::refreshHardwareModel()", "%s\n", v6);
                if (v6 != (char *)buf) {
                  free(v6);
                }
              }
            }
          }
        }
        break;
    }
  }
}

void sub_1012F7668(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100514790();

  sub_100516248(v4, a1, a2);
}

void sub_1012F76A8(uint64_t a1)
{
  uint64_t v2 = sub_100514790();

  sub_100516344(v2, a1);
}

id sub_1012F76E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100514790();

  return sub_100516468(v3, a2);
}

void sub_1012F7718(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_10231F398);
  }
  int v8 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67240704;
    int v11 = a2;
    __int16 v12 = 2050;
    unint64_t v13 = a3;
    __int16 v14 = 2050;
    unint64_t v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[AccessoryNotifier] numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10231F398);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryNotifier::numberOfClientsChanged(int, size_t, size_t)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a3 < a4) {
    *(unsigned char *)(a1 + 30) = 0;
  }
}

uint64_t sub_1012F790C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void sub_1012F7930(uint64_t a1)
{
  uint64_t v21 = 0;
  uint64_t v2 = (__IOHIDServiceClient *)sub_100A291D0(*(void *)(a1 + 32));
  if (!v2 || (uint64_t v3 = v2, !sub_10149FE70(&v21, v2, @"BT_ADDR", (id)6)))
  {
LABEL_24:
    *(_DWORD *)(a1 + 48) = 0;
    uint64_t v4 = (unsigned char *)(a1 + 30);
    goto LABEL_25;
  }
  if (v21 != *(void *)(a1 + 80))
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10231F398);
    }
    unint64_t v13 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 80);
      *(_DWORD *)long long buf = 134284033;
      long long v30 = v3;
      __int16 v31 = 2049;
      *(void *)int v32 = v14;
      *(_WORD *)&v32[8] = 2049;
      uint64_t v33 = v21;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[AccessoryNotifier] onNewHidService for service %{private}p. Updating BT address from %{private}llx to %{private}llx", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10231F398);
      }
      uint64_t v19 = *(void *)(a1 + 80);
      int v24 = 134284033;
      double v25 = v3;
      __int16 v26 = 2049;
      *(void *)uint64_t v27 = v19;
      *(_WORD *)&v27[8] = 2049;
      uint64_t v28 = v21;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLAccessoryNotifier::onNewHidService(void *)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    if (*(void *)(a1 + 80))
    {
      *(void *)(a1 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
    }
    *(void *)(a1 + 80) = v21;
    uint64_t v15 = sub_100514790();
    sub_100514B3C(v15, *(void *)(a1 + 80));
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
    uint64_t v16 = *(void *)(a1 + 88);
    if (!v16 || *(void *)(a1 + 80) == v16)
    {
      uint64_t v17 = +[NSData dataWithBytes:&v21 length:6];
      uint64_t v18 = *(void *)(a1 + 32);
      CFStringRef v22 = @"BT_ADDR";
      uint64_t v23 = v17;
      sub_100A29EB0(v18, +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1]);
    }
    goto LABEL_24;
  }
  uint64_t v4 = (unsigned char *)(a1 + 30);
  if (*(unsigned char *)(a1 + 30))
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_10231F398);
    }
    long long v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(__IOHIDServiceClient **)(a1 + 80);
      int v7 = *(_DWORD *)(a1 + 56);
      int v8 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)long long buf = 134284033;
      long long v30 = v6;
      __int16 v31 = 1026;
      *(_DWORD *)int v32 = v7;
      *(_WORD *)&v32[4] = 1026;
      *(_DWORD *)&v32[6] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[AccessoryNotifier] Duplicate service with the same BT address %{private}llx for usage page %{public}d usage %{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_10231F398);
      }
      long long v9 = *(__IOHIDServiceClient **)(a1 + 80);
      int v10 = *(_DWORD *)(a1 + 56);
      int v11 = *(_DWORD *)(a1 + 60);
      int v24 = 134284033;
      double v25 = v9;
      __int16 v26 = 1026;
      *(_DWORD *)uint64_t v27 = v10;
      *(_WORD *)&v27[4] = 1026;
      *(_DWORD *)&v27[6] = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLAccessoryNotifier::onNewHidService(void *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
LABEL_25:
  unsigned char *v4 = 0;
}

void sub_1012F7DBC(uint64_t *a1)
{
  sub_100A2A4D8(a1[4]);
  a1[10] = 0;
  (*(void (**)(uint64_t *))(*a1 + 48))(a1);
  uint64_t v2 = sub_100514790();

  sub_100514B3C(v2, 0);
}

void sub_1012F7E28(uint64_t a1, uint64_t a2)
{
  sub_1012F7ED0(&v2, a2);
}

void sub_1012F7E70(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_1012F7EA0(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1012F7ED0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1012F7F38(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101AAE438(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012F7F50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1012F7F80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_1012F7FC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486EE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486EE0))
  {
    sub_100134750(&__p, "vision_input");
    sub_1012F83DC(qword_102486BF8, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __cxa_atexit((void (*)(void *))sub_10103E68C, qword_102486BF8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102486EE0);
  }
  return qword_102486BF8;
}

void sub_1012F8074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_102486EE0);
  _Unwind_Resume(a1);
}

uint64_t sub_1012F80A4()
{
  if (sub_10120E064()) {
    return 1;
  }
  sub_100103240();

  return sub_10073E30C();
}

uint64_t sub_1012F80E0@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::string *)sub_10042885C((uint64_t)a2);
  std::string::operator=(v4, a1);
  sub_1000C7F88(buf);
  v16[0] = 0;
  int v5 = sub_1000D2988(*(uint64_t *)buf, "WriteVisionLogsToCrashReporterFolder", v16);
  if (v16[0]) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v18) {
    sub_1000DB0A0(v18);
  }
  sub_1000C7F88(buf);
  v16[0] = 0;
  int v7 = sub_1000D2988(*(uint64_t *)buf, "WriteLocationdLogsToCrashReporterFolder", v16);
  if (v16[0]) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  int v9 = v6 | v8;
  if (v18) {
    sub_1000DB0A0(v18);
  }
  if (v9) {
    int v10 = "/var/mobile/Library/Logs/CrashReporter/vision";
  }
  else {
    int v10 = "/var/mobile/Library/Logs/vision";
  }
  std::string::assign(a2 + 2, v10);
  a2[4].__r_.__value_.__l.__size_ = 125829120;
  sub_1000C7F88(buf);
  v16[0] = 0;
  int v11 = sub_1000D2988(*(uint64_t *)buf, "EnableLargeVisionLogs", v16);
  if (v16[0]) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v18) {
    sub_1000DB0A0(v18);
  }
  if (v12)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_10231F508);
    }
    unint64_t v13 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "EnableLargeVisionLogs is set", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_10231F508);
      }
      *(_WORD *)uint64_t v16 = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLVisionEventSerializer::generateConfig(const std::string &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    a2[4].__r_.__value_.__l.__size_ *= 2097152000;
  }
  a2[4].__r_.__value_.__s.__data_[20] = 0;
  a2[4].__r_.__value_.__s.__data_[21] = sub_10120E064();
  sub_100103240();
  uint64_t result = sub_10073E30C();
  a2[4].__r_.__value_.__s.__data_[22] = result;
  return result;
}

void sub_1012F8394(_Unwind_Exception *a1)
{
  sub_1004284E0(v1);
  _Unwind_Resume(a1);
}

void *sub_1012F83DC(void *a1, const std::string *a2)
{
  sub_1012F80E0(a2, &v4);
  sub_10120E0E0((uint64_t)a1, (long long *)&v4);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  *a1 = off_10231F4E0;
  return a1;
}

void sub_1012F847C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1012F8490(uint64_t a1, int *a2)
{
  sub_100168850(v9);
  double v4 = sub_1000D3E50();
  v12 |= 1u;
  if (!v10) {
    operator new();
  }
  sub_10086A6A8(v10, v4);
  v12 |= 2u;
  uint64_t v5 = v11;
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 492) |= 0x20u;
  uint64_t v6 = *(void *)(v5 + 304);
  if (!v6) {
    operator new();
  }
  int v7 = *a2;
  if (!sub_10016E674(v7)) {
    __assert_rtn("set_ar_session_state", "CLPVisionLogEntry.pb.h", 184, "::CLP::LogEntry::Vision::ARSessionState_IsValid(value)");
  }
  *(_DWORD *)(v6 + 40) |= 1u;
  *(_DWORD *)(v6 + 32) = v7;
  sub_100030E00(a1);
  return sub_1001687EC(v9);
}

void sub_1012F85E8()
{
}

uint64_t sub_1012F864C(uint64_t a1, uint64_t a2)
{
  sub_100168850(v9);
  double v4 = sub_1000D3E50();
  v12 |= 1u;
  if (!v10) {
    operator new();
  }
  sub_10086A6A8(v10, v4);
  v12 |= 2u;
  uint64_t v5 = v11;
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 492) |= 0x20u;
  uint64_t v6 = *(void *)(v5 + 304);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 40) |= 2u;
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7) {
    operator new();
  }
  sub_100B6CBA0(v7, a2);
  sub_100030E00(a1);
  return sub_1001687EC(v9);
}

void sub_1012F87A4()
{
}

uint64_t sub_1012F881C(uint64_t a1, uint64_t a2)
{
  sub_100168850(v9);
  double v4 = sub_1000D3E50();
  v12 |= 1u;
  if (!v10) {
    operator new();
  }
  sub_10086A6A8(v10, v4);
  v12 |= 2u;
  uint64_t v5 = v11;
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 492) |= 0x20u;
  uint64_t v6 = *(void *)(v5 + 304);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 40) |= 8u;
  uint64_t v7 = *(void *)(v6 + 24);
  if (!v7) {
    operator new();
  }
  sub_100B75730(v7, a2);
  sub_100030E00(a1);
  return sub_1001687EC(v9);
}

void sub_1012F8974()
{
}

uint64_t sub_1012F89EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sub_100168850(v20);
  double v8 = sub_1000D3E50();
  v23 |= 1u;
  if (!v21) {
    operator new();
  }
  sub_10086A6A8(v21, v8);
  v23 |= 2u;
  uint64_t v9 = v22;
  if (a4)
  {
    if (!v22) {
      operator new();
    }
    *(_DWORD *)(v22 + 488) |= 0x20000u;
    uint64_t v10 = *(void *)(v9 + 144);
    if (!v10) {
      operator new();
    }
    *(_DWORD *)(v10 + 100) |= 4u;
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11) {
      operator new();
    }
    sub_1003E2ED0(v11, a2);
    v23 |= 2u;
    uint64_t v12 = v22;
    if (!v22) {
      operator new();
    }
    *(_DWORD *)(v22 + 488) |= 0x20000u;
    uint64_t v13 = *(void *)(v12 + 144);
    if (!v13) {
      operator new();
    }
    *(_DWORD *)(v13 + 100) |= 8u;
    uint64_t v14 = *(void *)(v13 + 24);
    if (!v14) {
      operator new();
    }
  }
  else
  {
    if (!v22) {
      operator new();
    }
    *(_DWORD *)(v22 + 488) |= 8u;
    uint64_t v15 = *(void *)(v9 + 32);
    if (!v15) {
      operator new();
    }
    *(_DWORD *)(v15 + 100) |= 4u;
    uint64_t v16 = *(void *)(v15 + 16);
    if (!v16) {
      operator new();
    }
    sub_1003E2ED0(v16, a2);
    v23 |= 2u;
    uint64_t v17 = v22;
    if (!v22) {
      operator new();
    }
    *(_DWORD *)(v22 + 488) |= 8u;
    uint64_t v18 = *(void *)(v17 + 32);
    if (!v18) {
      operator new();
    }
    *(_DWORD *)(v18 + 100) |= 8u;
    uint64_t v14 = *(void *)(v18 + 24);
    if (!v14) {
      operator new();
    }
  }
  sub_1003E7568(v14, a3);
  sub_100030E00(a1);
  return sub_1001687EC(v20);
}

void sub_1012F8D58()
{
}

void sub_1012F8E14(id a1)
{
  qword_102419428 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void sub_1012F8E44(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF758((_DWORD *)a2, (uint64_t)a1);
  sub_1000C7F88(buf);
  v8[0] = 0;
  int v4 = sub_1000D2988(*(uint64_t *)buf, "EmergencyWifiToggleAllowed", v8);
  if (v8[0]) {
    int v5 = 0;
  }
  else {
    int v5 = v4;
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v5)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_10231F528);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "emergency wifi toggle not allowed so skipping check", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_10231F528);
      }
      *(_WORD *)double v8 = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScanRequest::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else if (a1[6172])
  {
    if (!a1[964] && !a1[6379])
    {
      if (!*(unsigned char *)(a2 + 1940)) {
        *(unsigned char *)(a2 + 1940) = 1;
      }
      *(_DWORD *)(a2 + 1936) = 0;
    }
  }
  else if (a1[1064])
  {
    if (!*(unsigned char *)(a2 + 1940)) {
      *(unsigned char *)(a2 + 1940) = 1;
    }
    *(_DWORD *)(a2 + 1936) = 1;
  }
}

void sub_1012F9080(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1012F90B0(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1012F9180()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1012F9238(_Unwind_Exception *a1)
{
}

void sub_1012F9250()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1012F92F8(_Unwind_Exception *a1)
{
}

uint64_t sub_1012F9310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = sub_1001198CC() == 1;
  *(_DWORD *)(a1 + 28) = 0xFFFF;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 48) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(void *)(a1 + 156) = 0;
  *(void *)(a1 + 172) = 0;
  *(void *)(a1 + 164) = 0;
  *(unsigned char *)(a1 + 180) = 0;
  *(void *)&double v9 = sub_1000DBC34(a1 + 184).n128_u64[0];
  *(_DWORD *)(a1 + 824) = 0;
  if ([objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor", v9), "isServiceEnabled:", @"CLCachedLocationController")] sub_10088C5FC(); {
  return a1;
  }
}

void sub_1012F9468(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[89];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *v1;
  uint64_t *v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012F94C0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231F548);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLastConfidentLocation::onCachedLocationControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231F548);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLastConfidentLocation::onCachedLocationControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012F9B3C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012F967C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id *sub_1012F96A0(id *a1)
{
  [a1[1] silo];
  [*((id *)*a1 + 2) unregister:*((void *)*a1 + 1) forNotification:1];
  long long v2 = (std::__shared_weak_count *)a1[89];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  id v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(id))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_1012F9720(uint64_t a1)
{
  [*(id *)(a1 + 8) silo];
  *(unsigned char *)(a1 + 24) = 1;
  [*(id *)(a1 + 8) silo];
  *(_DWORD *)(a1 + 824) = 0;

  return sub_1012F9770(a1);
}

uint64_t sub_1012F9770(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 8) silo];
  unsigned int v3 = *(_DWORD *)(a1 + 824);
  if (v3 <= 1)
  {
    *(_DWORD *)(a1 + 824) = v3 + 1;
    uint64_t result = sub_10019F650(a1);
    if (result)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231F568);
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v5 = *(_DWORD *)(a1 + 824);
        uint64_t v6 = *(void *)(a1 + 48);
        uint64_t v7 = *(void *)(a1 + 104);
        uint64_t v8 = *(void *)(a1 + 116);
        *(_DWORD *)long long buf = 67109888;
        int v11 = v5;
        __int16 v12 = 2048;
        uint64_t v13 = v6;
        __int16 v14 = 2048;
        uint64_t v15 = v7;
        __int16 v16 = 2048;
        uint64_t v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Notifying cached location,num,%u,accuracy,%.01lf,timestamp,%.03lf,lifespan,%.04lf", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231F568);
        }
        double v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLastConfidentLocation::notifyConfidentLocationIfNecessary()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a1 + 28, a1 + 184);
    }
  }
  return result;
}

double sub_1012F99C4(uint64_t a1)
{
  [*(id *)(a1 + 8) silo];
  [*(id *)(a1 + 8) silo];
  *(_DWORD *)(a1 + 824) = 2;
  *(unsigned char *)(a1 + 24) = 0;

  *(void *)&double result = sub_1012F9A14(a1).n128_u64[0];
  return result;
}

__n128 sub_1012F9A14(uint64_t a1)
{
  [*(id *)(a1 + 8) silo];
  *(_DWORD *)(a1 + 28) = 0xFFFF;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_OWORD *)(a1 + 96) = _Q0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_DWORD *)(a1 + 140) = 0;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
  *(void *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 164) = 0u;
  *(unsigned char *)(a1 + 180) = 0;
  sub_1000DBC34(v15);
  memcpy((void *)(a1 + 184), v15, 0x201uLL);
  long long v7 = v16;
  long long v16 = 0u;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 712);
  *(_OWORD *)(a1 + 704) = v7;
  if (v8)
  {
    sub_1000DB0A0(v8);
    double v9 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    long long v10 = *(_OWORD *)v22;
    *(_OWORD *)(a1 + 784) = v21;
    *(_OWORD *)(a1 + 800) = v10;
    *(void *)(a1 + 813) = *(void *)&v22[13];
    long long v11 = v18;
    *(_OWORD *)(a1 + 720) = v17;
    *(_OWORD *)(a1 + 736) = v11;
    __n128 result = v20;
    *(_OWORD *)(a1 + 752) = v19;
    *(__n128 *)(a1 + 768) = result;
    if (v9) {
      sub_1000DB0A0(v9);
    }
  }
  else
  {
    long long v13 = *(_OWORD *)v22;
    *(_OWORD *)(a1 + 784) = v21;
    *(_OWORD *)(a1 + 800) = v13;
    *(void *)(a1 + 813) = *(void *)&v22[13];
    long long v14 = v18;
    *(_OWORD *)(a1 + 720) = v17;
    *(_OWORD *)(a1 + 736) = v14;
    __n128 result = v20;
    *(_OWORD *)(a1 + 752) = v19;
    *(__n128 *)(a1 + 768) = result;
  }
  return result;
}

void sub_1012F9B3C(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  [*(id *)(a1 + 8) silo];
  if (*a3 == 1)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231F568);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *a4;
      *(_DWORD *)long long buf = 67109120;
      int v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received a kNotificationCachedLocationControllerStateUpdate notification, state, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231F568);
      }
LABEL_17:
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLastConfidentLocation::onCachedLocationControllerNotification(int, const CLCachedLocationController_Type::Notification &, const CLCachedLocationController_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10231F588);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *a3;
      *(_DWORD *)long long buf = 67109120;
      int v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Received unknown notification %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10231F588);
      }
      goto LABEL_17;
    }
  }
}

void sub_1012F9DFC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012F9E2C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012F9E5C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

char *sub_1012F9E8C(char *a1)
{
  *(void *)a1 = off_10231F5C8;
  *((_WORD *)a1 + 4) = 0;
  *(void *)(a1 + 12) = 0xFFFFFFFF00000000;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 3) = 0;
  sub_100513074(a1 + 48, "CLLogBase", 1, 0);
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)sub_1012F9FE4, @"com.apple.locationd.DumpDiagnostics", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void sub_1012F9F4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 32);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012F9FE4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
}

void *sub_1012FA00C(void *a1)
{
  *a1 = off_10231F5C8;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, a1);
  if (*((char *)a1 + 159) < 0) {
    operator delete((void *)a1[17]);
  }
  if (*((char *)a1 + 135) < 0) {
    operator delete((void *)a1[14]);
  }
  if (*((char *)a1 + 111) < 0) {
    operator delete((void *)a1[11]);
  }
  if (*((char *)a1 + 87) < 0) {
    operator delete((void *)a1[8]);
  }
  sub_10051310C(a1 + 6);
  uint64_t v3 = a1[5];
  a1[5] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_1012FA0E8(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)(v1 - 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  operator new();
}

void sub_1012FA2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1012FA33C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10231F690);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "received unexpected darwin notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10231F690);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLLogBase::onSettingsNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &, void *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a4 + 24);
    if (v6)
    {
      sub_10051F604(v6);
      sub_1012FA52C(a4);
      sub_10051F604(*(void *)(a4 + 24));
      sub_1012FA52C(a4);
    }
  }
}

uint64_t sub_1012FA52C(uint64_t a1)
{
  uint64_t v3 = a1 + 48;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v10 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v11 = 256;
  BOOL v9 = 0;
  sub_1000D2988(*(void *)(v3 - 24), "LogDumpOnUnload", &v9);
  BOOL v4 = v9;
  if (*(unsigned char *)(a1 + 9)) {
    BOOL v5 = !v9;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    BOOL v4 = v9;
  }
  *(unsigned char *)(a1 + 9) = v4;
  sub_10006EF84(*(void *)(a1 + 24), "LogFileRotationSize", (_DWORD *)(a1 + 12));
  sub_10006EF84(*(void *)(a1 + 24), "LogFileStorageCount", (_DWORD *)(a1 + 16));
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  BOOL v8 = 0;
  sub_1000D2988(*(void *)(a1 + 24), "LogDumpOnLoad", &v8);
  BOOL v6 = v8;
  if (!*(unsigned char *)(a1 + 8) && v8)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    BOOL v6 = v8;
  }
  *(unsigned char *)(a1 + 8) = v6;
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 48) + 24))(v3);
}

void sub_1012FA6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1012FA6E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (qword_102486EF0 != -1) {
    dispatch_once(&qword_102486EF0, &stru_10231F5E8);
  }
  BOOL v4 = (char *)[[[objc_msgSend((id)qword_102486EE8, "stringFromDate:", a1) UTF8String];

  return sub_100134750(a2, v4);
}

void sub_1012FA75C(id a1)
{
  uint64_t v1 = objc_opt_new();
  qword_102486EE8 = (uint64_t)v1;

  [v1 setDateFormat:@"yyyy-MM-dd_HH-mm-ss"];
}

void sub_1012FA79C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486F10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486F10))
  {
    xmmword_102486EF8 = 0uLL;
    unk_102486F08 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102486EF8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102486F10);
  }
  if (qword_102486F18 != -1) {
    dispatch_once(&qword_102486F18, &stru_10231F608);
  }
  if (byte_102486F0F < 0)
  {
    long long v2 = xmmword_102486EF8;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102486EF8;
    *(void *)(a1 + 16) = unk_102486F08;
  }
}

void sub_1012FA890(id a1)
{
}

void sub_1012FA8A4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486F38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486F38))
  {
    xmmword_102486F20 = 0uLL;
    unk_102486F30 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102486F20, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102486F38);
  }
  if (qword_102486F40 != -1) {
    dispatch_once(&qword_102486F40, &stru_10231F628);
  }
  if (byte_102486F37 < 0)
  {
    long long v2 = xmmword_102486F20;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102486F20;
    *(void *)(a1 + 16) = unk_102486F30;
  }
}

void sub_1012FA998(id a1)
{
  sub_100134750(v2, "mobile");
  sub_10053B3A0((uint64_t *)v2, __p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  std::string::assign((std::string *)&xmmword_102486F20, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1), "stringByAppendingPathComponent:", [&off_102398088 componentsJoinedByString:@"/"]), "UTF8String"));
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_1012FAA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012FAA88(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486F60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486F60))
  {
    xmmword_102486F48 = 0uLL;
    unk_102486F58 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102486F48, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102486F60);
  }
  if (qword_102486F68 != -1) {
    dispatch_once(&qword_102486F68, &stru_10231F648);
  }
  if (byte_102486F5F < 0)
  {
    long long v2 = xmmword_102486F48;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_102486F48;
    *(void *)(a1 + 16) = unk_102486F58;
  }
}

void sub_1012FAB7C(id a1)
{
  sub_100134750(v2, "mobile");
  sub_10053B3A0((uint64_t *)v2, __p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  std::string::assign((std::string *)&xmmword_102486F48, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1), "stringByAppendingPathComponent:", [&off_1023980A0 componentsJoinedByString:@"/"]), "UTF8String"));
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_1012FAC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012FAC6C(const void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, std::string *a5@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  __int16 v11 = &v30;
  sub_1001110E4((uint64_t)&v30, v10 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    __int16 v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v12 = a1;
    }
    else {
      int v12 = *a1;
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    long long v14 = (const std::string::value_type *)a2;
  }
  else {
    long long v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  long long v16 = std::string::append(&v30, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long long v18 = std::string::append(&v31, "_");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_1012FA6E4(a4, __p);
  if ((v29 & 0x80u) == 0) {
    __n128 v20 = __p;
  }
  else {
    __n128 v20 = (void **)__p[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v21 = v29;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)__p[1];
  }
  uint64_t v22 = std::string::append(&v32, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  int v24 = *(char *)(a3 + 23);
  if (v24 >= 0) {
    double v25 = (const std::string::value_type *)a3;
  }
  else {
    double v25 = *(const std::string::value_type **)a3;
  }
  if (v24 >= 0) {
    std::string::size_type v26 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v26 = *(void *)(a3 + 8);
  }
  uint64_t v27 = std::string::append(&v33, v25, v26);
  *a5 = *v27;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((char)v29 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_1012FAE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012FAEC8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  sub_1012FA79C((uint64_t)v9);
  if (v10 >= 0) {
    BOOL v8 = (char *)v9;
  }
  else {
    BOOL v8 = (char *)v9[0];
  }
  sub_100134750(__p, v8);
  sub_1012FAC6C((const void **)__p, a2, a1 + 112, a3, a4);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_1012FAF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012FAF9C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_1012FAA88((uint64_t)v5);
  if (v6 >= 0) {
    BOOL v4 = (char *)v5;
  }
  else {
    BOOL v4 = (char *)v5[0];
  }
  sub_100134750(__p, v4);
  sub_1012FAC6C((const void **)__p, a1 + 88, a1 + 112, (uint64_t)+[NSDate date], a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1012FB038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDate *sub_1012FB06C()
{
  return +[NSDate date];
}

uint64_t sub_1012FB078(uint64_t a1, char **a2, char *a3)
{
  char v3 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 >= 0) {
    BOOL v4 = (char *)a2;
  }
  else {
    BOOL v4 = *a2;
  }
  int v5 = a3[23];
  if (v5 >= 0) {
    char v6 = a3;
  }
  else {
    char v6 = *(char **)a3;
  }
  if (v5 >= 0) {
    int64_t v7 = a3[23];
  }
  else {
    int64_t v7 = *((void *)a3 + 1);
  }
  if (!v7) {
    return 1;
  }
  if ((char)v3 < 0) {
    char v3 = a2[1];
  }
  char v8 = &v3[(void)v4];
  if ((uint64_t)v3 >= v7)
  {
    int v12 = *v6;
    int v13 = v4;
    do
    {
      long long v14 = &v3[-v7];
      if (v14 == (char *)-1) {
        break;
      }
      std::string::size_type v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15) {
        break;
      }
      BOOL v9 = v15;
      if (!memcmp(v15, v6, v7)) {
        return v9 != v8 && v9 == v4;
      }
      int v13 = v9 + 1;
      char v3 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v3 >= v7);
  }
  BOOL v9 = v8;
  return v9 != v8 && v9 == v4;
}

unint64_t sub_1012FB150(uint64_t a1, void **a2, char *a3)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  char v4 = a3[23];
  if (v4 >= 0) {
    int64_t v5 = a3[23];
  }
  else {
    int64_t v5 = *((void *)a3 + 1);
  }
  if (v4 >= 0) {
    char v6 = a3;
  }
  else {
    char v6 = *(char **)a3;
  }
  if ((v3 & 0x80u) == 0)
  {
    int64_t v7 = (char *)a2;
  }
  else
  {
    unint64_t v3 = (unint64_t)a2[1];
    int64_t v7 = (char *)*a2;
  }
  unint64_t result = v3 == v5;
  if (v3 < result) {
    return 1;
  }
  if (v5)
  {
    BOOL v9 = &v7[result];
    char v10 = &v7[v3];
    int64_t v11 = &v7[v3] - v9;
    if (v11 >= v5)
    {
      int v14 = *v6;
      do
      {
        int64_t v15 = v11 - v5;
        if (v15 == -1) {
          break;
        }
        long long v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        int v12 = v16;
        if (!memcmp(v16, v6, v5)) {
          return v12 != v7 || v12 == v10;
        }
        BOOL v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v5);
    }
    int v12 = v10;
    return v12 != v7 || v12 == v10;
  }
  return result;
}

BOOL sub_1012FB230(uint64_t a1)
{
  unint64_t v3 = (char *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v19 = a1 + 48;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 48);
  __int16 v20 = 256;
  char v4 = v3 + 88;
  int64_t v5 = v3 + 88;
  if (v3[111] < 0) {
    int64_t v5 = *(const char **)v4;
  }
  if (stat(v5, &v18) == -1)
  {
    BOOL v14 = 1;
  }
  else
  {
    char v6 = v3 + 88;
    if (*(char *)(a1 + 159) < 0) {
      char v6 = *(const char **)v4;
    }
    st_std::string::size_type size = v18.st_size;
    char v8 = fopen(v6, "r");
    if (v8)
    {
      sub_1012FAF9C(a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v10 = fopen((const char *)p_p, "w");
      if (v10)
      {
        uint64_t v11 = 0;
        if (!feof(v8))
        {
          while (1)
          {
            size_t v13 = fread(__ptr, 1uLL, 0x400uLL, v8);
            if (!v13) {
              break;
            }
            size_t v12 = fwrite(__ptr, 1uLL, v13, v10);
            v11 += v12;
            if (feof(v8) || !v12) {
              goto LABEL_17;
            }
          }
          feof(v8);
        }
LABEL_17:
        BOOL v14 = v11 == st_size;
        fflush(v10);
        fclose(v10);
      }
      else
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v15 = &__p;
        }
        else {
          int64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        syslog(5, "%s,%s,failed to open %s\n", "NOTICE", "CLLog", (const char *)v15);
        BOOL v14 = 0;
      }
      fclose(v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*(char *)(a1 + 159) < 0) {
        char v4 = *(const char **)v4;
      }
      syslog(5, "%s,%s,failed to open %s\n", "NOTICE", "CLLog", v4);
      BOOL v14 = 0;
    }
  }
  (*(void (**)(char *))(*(void *)v3 + 24))(v3);
  return v14;
}

void sub_1012FB498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t sub_1012FB4E0(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1004CE5C0((void *)a1, a2);
  void *v4 = off_1022B8D80;
  *((unsigned char *)v4 + 16) = *(unsigned char *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1000DC48C((unsigned char *)v4 + 24, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    void v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)(v4 + 3) = v5;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  *(_OWORD *)(a1 + 72) = v7;
  sub_1004CE5C0((void *)(a1 + 104), a2 + 104);
  *(void *)(a1 + 104) = off_1022B9148;
  sub_1004CE5C0((void *)(a1 + 120), a2 + 120);
  *(void *)(a1 + 120) = off_1022B9148;
  return a1;
}

void sub_1012FB604(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  sub_10013F374((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1012FB658(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1012FB688(void *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1[6];
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 12) = 0;
  *(void *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 112) = 0;
  *(void *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  if (v3)
  {
    uint64_t v10 = a1[2];
    if (a1[3] == v10
      || (unint64_t v11 = a1[5],
          unint64_t v12 = *(void *)(v10 + 8 * (v11 / 0x1A)) + 156 * (v11 % 0x1A),
          unint64_t v13 = *(void *)(v10 + 8 * ((v3 + v11) / 0x1A)) + 156 * ((v3 + v11) % 0x1A),
          v12 == v13))
    {
      double v16 = 1.79769313e308;
    }
    else
    {
      BOOL v14 = (void *)(v10 + 8 * (v11 / 0x1A));
      double v15 = *a2;
      double v16 = 1.79769313e308;
      do
      {
        double v17 = vabdd_f64(v15, *(double *)(v12 + 76));
        if (v16 > v17)
        {
          long long v18 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a3 = *(_OWORD *)v12;
          *(_OWORD *)(a3 + 16) = v18;
          long long v19 = *(_OWORD *)(v12 + 32);
          long long v20 = *(_OWORD *)(v12 + 48);
          long long v21 = *(_OWORD *)(v12 + 80);
          *(_OWORD *)(a3 + 64) = *(_OWORD *)(v12 + 64);
          *(_OWORD *)(a3 + 80) = v21;
          *(_OWORD *)(a3 + 32) = v19;
          *(_OWORD *)(a3 + 48) = v20;
          long long v22 = *(_OWORD *)(v12 + 96);
          long long v23 = *(_OWORD *)(v12 + 112);
          long long v24 = *(_OWORD *)(v12 + 128);
          *(_OWORD *)(a3 + 140) = *(_OWORD *)(v12 + 140);
          *(_OWORD *)(a3 + 112) = v23;
          *(_OWORD *)(a3 + 128) = v24;
          *(_OWORD *)(a3 + 96) = v22;
          double v16 = v17;
        }
        v12 += 156;
        if (v12 - *v14 == 4056)
        {
          unint64_t v25 = v14[1];
          ++v14;
          unint64_t v12 = v25;
        }
      }
      while (v12 != v13);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10231F6B0);
    }
    std::string::size_type v26 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = a1[6];
      *(_DWORD *)long long buf = 134349312;
      uint64_t v30 = v27;
      __int16 v31 = 2050;
      double v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLReferenceLocations, size %{public}zu, found closest reference location with timestamp delta %{public}.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10231F6B0);
      }
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLDaemonLocation CLReferenceLocations::getClosestReferenceLocation(const CFAbsoluteTime &) const", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
}

void sub_1012FB998(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1012FB9C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  long long v5 = (void *)sub_1007FC1E8(a1, &v7, a3, a4);
  *long long v5 = off_10231F9F8;
  v5[41] = 0;
  *(void *)((char *)v5 + 334) = 0;
  v5[43] = 0;
  v5[44] = 0;
  v5[47] = 0;
  v5[48] = 0;
  v5[45] = 0;
  v5[46] = v5 + 47;
  sub_100103240();
  *(unsigned char *)(a1 + 392) = sub_10073E30C();
  return a1;
}

void sub_1012FBA5C(_Unwind_Exception *a1)
{
  long long v5 = v3;
  sub_1000F5BB0(v2, *v4);
  int v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 352) = v7;
    operator delete(v7);
  }
  sub_1010456D8(v1);
  _Unwind_Resume(a1);
}

void *sub_1012FBA90(uint64_t a1, uint64_t a2)
{
  unint64_t result = (void *)sub_1012FB9C8(a1, 3, qword_102486F70, a2);
  *unint64_t result = off_10231F6E0;
  return result;
}

uint64_t sub_1012FBAD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  long long v5 = (void *)sub_1007FC1E8(a1, &v7, a3, a4);
  *long long v5 = off_10231FAD0;
  v5[41] = 0;
  *(void *)((char *)v5 + 334) = 0;
  v5[43] = 0;
  v5[44] = 0;
  v5[47] = 0;
  v5[48] = 0;
  v5[45] = 0;
  v5[46] = v5 + 47;
  sub_100103240();
  *(unsigned char *)(a1 + 392) = sub_10073E30C();
  return a1;
}

void sub_1012FBB68(_Unwind_Exception *a1)
{
  long long v5 = v3;
  sub_1000F5BB0(v2, *v4);
  int v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 352) = v7;
    operator delete(v7);
  }
  sub_1010456D8(v1);
  _Unwind_Resume(a1);
}

void *sub_1012FBB9C(uint64_t a1, uint64_t a2)
{
  unint64_t result = (void *)sub_1012FBAD4(a1, 5, qword_102486F70, a2);
  *unint64_t result = off_10231F7B8;
  return result;
}

uint64_t sub_1012FBBE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  long long v5 = (void *)sub_1007FC1E8(a1, &v7, a3, a4);
  *long long v5 = &off_10231FBA8;
  v5[41] = 0;
  *(void *)((char *)v5 + 334) = 0;
  v5[43] = 0;
  v5[44] = 0;
  v5[47] = 0;
  v5[48] = 0;
  v5[45] = 0;
  v5[46] = v5 + 47;
  sub_100103240();
  *(unsigned char *)(a1 + 392) = sub_10073E30C();
  return a1;
}

void sub_1012FBC74(_Unwind_Exception *a1)
{
  long long v5 = v3;
  sub_1000F5BB0(v2, *v4);
  int v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 352) = v7;
    operator delete(v7);
  }
  sub_1010456D8(v1);
  _Unwind_Resume(a1);
}

void *sub_1012FBCA8(uint64_t a1, uint64_t a2)
{
  unint64_t result = (void *)sub_1012FBBE0(a1, 4, qword_102486F70, a2);
  *unint64_t result = off_10231F890;
  return result;
}

void sub_1012FBCF0(uint64_t a1)
{
  sub_1013064C4(a1);

  operator delete();
}

uint64_t sub_1012FBD28()
{
  return 350;
}

double sub_1012FBD30()
{
  return 2.0;
}

uint64_t sub_1012FBD38()
{
  return 0x10000;
}

uint64_t sub_1012FBD40(uint64_t a1, std::string::value_type *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_101047E00(a1, a2);
  sub_10104A8A0((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_101306608((uint64_t *)&v42, a1 + 368);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  long long v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218242;
    *(void *)long long v53 = v44;
    *(_WORD *)&v53[8] = 2080;
    *(void *)&v53[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_DWORD *)std::string __p = 134218242;
    *(void *)&__p[4] = v44;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)&__p[14] = a2;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  uint64_t v6 = a1 + 376;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  int v7 = v42;
  if (v42 != &v43)
  {
    uint64_t v8 = 0;
    while (1)
    {
      *(void *)uint64_t v41 = *(void **)((char *)v7 + 25);
      *(void *)&v41[6] = *(void **)((char *)v7 + 31);
      memset(v40, 0, 14);
      uint64_t v38 = 0;
      memset(v39, 0, 14);
      uint64_t v37 = 0;
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 368) = v6;
      clock_t v9 = clock();
      int v10 = (*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)a1 + 192))(a1, v41, v40);
      clock_t v11 = clock();
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 368) = v6;
      clock_t v12 = clock();
      int v13 = (*(uint64_t (**)(uint64_t, unsigned char *, _WORD *))(*(void *)a1 + 184))(a1, v41, v39);
      clock_t v14 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v14 - v12, v11 - v9);
      if (v10 != v13) {
        break;
      }
      int v15 = (*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)a1 + 176))(a1, v41, v40);
      if (v15) {
        sub_10104C204(a1, LOWORD(v40[1]), WORD1(v40[1]), (double *)&v38, (double *)&v37);
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      double v16 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = v44;
        uint64_t v18 = v37;
        uint64_t v19 = v38;
        sub_10104421C();
        long long v20 = __p;
        if (__p[23] < 0) {
          long long v20 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 134219266;
        *(void *)long long v53 = v8;
        *(_WORD *)&v53[8] = 2048;
        *(void *)&v53[10] = v17;
        *(_WORD *)&v53[18] = 1024;
        *(_DWORD *)&v53[20] = v15;
        __int16 v54 = 2048;
        uint64_t v55 = v19;
        __int16 v56 = 2048;
        uint64_t v57 = v18;
        __int16 v58 = 2080;
        double v59 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231FC70);
        }
        uint64_t v24 = v44;
        uint64_t v25 = v37;
        uint64_t v26 = v38;
        sub_10104421C();
        uint64_t v27 = &v35;
        if (v36 < 0) {
          uint64_t v27 = v35;
        }
        *(_DWORD *)std::string __p = 134219266;
        *(void *)&__p[4] = v8;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v24;
        *(_WORD *)&unsigned char __p[22] = 1024;
        *(_DWORD *)&unsigned char __p[24] = v15;
        __int16 v46 = 2048;
        uint64_t v47 = v26;
        __int16 v48 = 2048;
        uint64_t v49 = v25;
        __int16 v50 = 2080;
        uint64_t v51 = v27;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        if (v36 < 0) {
          operator delete(v35);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      if (!v15)
      {
        int v31 = 759;
        double v32 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v31, v32);
      }
      long long v21 = v7[1];
      if (v21)
      {
        do
        {
          long long v22 = (void **)v21;
          long long v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          long long v22 = (void **)v7[2];
          BOOL v23 = *v22 == v7;
          int v7 = v22;
        }
        while (!v23);
      }
      ++v8;
      int v7 = v22;
      if (v22 == &v43) {
        goto LABEL_36;
      }
    }
    int v31 = 742;
    double v32 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  uint64_t v8 = 0;
LABEL_36:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  unsigned __int8 v29 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)long long v53 = 1;
    *(_WORD *)&v53[4] = 2048;
    *(void *)&v53[6] = v8;
    *(_WORD *)&v53[14] = 2048;
    *(void *)&v53[16] = v44;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(void *)std::string __p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(void *)&__p[10] = v8;
    *(_WORD *)&__p[18] = 2048;
    *(void *)&__p[20] = v44;
    __int16 v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  sub_1000F5BB0((uint64_t)&v42, v43);
  return 1;
}

void sub_1012FC544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27)
{
}

void sub_1012FC598(uint64_t a1)
{
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 352) = *(void *)(a1 + 344);
}

void sub_1012FC5DC(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1007FE8A4(a1, (uint64_t)a2, a3);
  uint64_t v82 = 0;
  int v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(void *)uint64_t v83 = 0x200006ABBALL;
      memset(&v83[8], 0, 32);
      LODWORD(v84) = 0;
      sub_101044D88(a4, (uint64_t)v83);
      clock_t v11 = (void *)(a1 + 344);
      *(void *)(a1 + 352) = *(void *)(a1 + 344);
      sub_1013069A4((char **)(a1 + 344), *(unsigned int *)&v83[12]);
      clock_t v12 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&v83[12], *(int *)&v83[16]);
      if (v12)
      {
        v79[0] = 0;
        v79[1].i32[0] = 0;
        if (*(_DWORD *)&v83[12])
        {
          unint64_t v13 = 0;
          do
          {
            sub_101044414((int8x8_t *)&v12[v13 * *(unsigned int *)&v83[16]], v79);
            int v15 = *(int8x8_t **)(a1 + 352);
            unint64_t v14 = *(void *)(a1 + 360);
            if ((unint64_t)v15 >= v14)
            {
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *v11) >> 2);
              unint64_t v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555) {
                sub_1001D7FD4();
              }
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19) {
                unint64_t v19 = 2 * v20;
              }
              if (v20 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v21 = 0x1555555555555555;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21) {
                long long v22 = (char *)sub_10080FC80(a1 + 360, v21);
              }
              else {
                long long v22 = 0;
              }
              BOOL v23 = (int8x8_t *)&v22[12 * v18];
              int8x8_t v24 = v79[0];
              v23[1].i32[0] = v79[1].i32[0];
              int8x8_t *v23 = v24;
              uint64_t v26 = *(_DWORD **)(a1 + 344);
              uint64_t v25 = *(_DWORD **)(a1 + 352);
              uint64_t v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  int8x8_t v28 = *(int8x8_t *)(v25 - 3);
                  v25 -= 3;
                  __int32 v29 = v25[2];
                  *(int8x8_t *)((char *)v27 - 12) = v28;
                  uint64_t v27 = (int8x8_t *)((char *)v27 - 12);
                  v27[1].i32[0] = v29;
                }
                while (v25 != v26);
                uint64_t v25 = (_DWORD *)*v11;
              }
              uint64_t v17 = (char *)&v23[1] + 4;
              *(void *)(a1 + 344) = v27;
              *(void *)(a1 + 352) = (char *)v23 + 12;
              *(void *)(a1 + 360) = &v22[12 * v21];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              int8x8_t v16 = v79[0];
              v15[1].i32[0] = v79[1].i32[0];
              *int v15 = v16;
              uint64_t v17 = (char *)&v15[1] + 4;
            }
            *(void *)(a1 + 352) = v17;
            if (!*(unsigned char *)(a5 + 9))
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10231FC70);
              }
              uint64_t v30 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *(_DWORD *)&v83[12];
                sub_101044430();
                double v32 = __p;
                if (SBYTE3(v96) < 0) {
                  double v32 = *(unsigned char **)__p;
                }
                *(_DWORD *)long long buf = 134218498;
                *(void *)uint64_t v100 = v13;
                *(_WORD *)&v100[8] = 1024;
                *(_DWORD *)__int16 v101 = v31;
                *(_WORD *)&v101[4] = 2080;
                *(void *)&v101[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v96) < 0) {
                  operator delete(*(void **)__p);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10231FC70);
                }
                int v33 = *(_DWORD *)&v83[12];
                sub_101044430();
                __int16 v34 = v80;
                if (v81 < 0) {
                  __int16 v34 = (void **)v80[0];
                }
                *(_DWORD *)std::string __p = 134218498;
                *(void *)&__p[4] = v13;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = v33;
                *(_WORD *)&__p[18] = 2080;
                uint64_t v96 = v34;
                uint64_t v35 = (char *)_os_log_send_and_compose_impl();
                if (v81 < 0) {
                  operator delete(v80[0]);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v35);
                if (v35 != (char *)buf) {
                  free(v35);
                }
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v83[12]);
        }
      }
      goto LABEL_82;
    }
    unsigned int v42 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)std::string __p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101DB37A0;
  uint64_t v96 = 0;
  uint64_t v98 = 0;
  uint64_t v97 = 0;
  sub_101044D88(a4, (uint64_t)__p);
  char v36 = (uint64_t **)(a1 + 368);
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  if (!*(unsigned char *)(a5 + 9))
  {
    memset(v79, 0, 14);
    double v43 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    clock_t v12 = v43;
    if (!v43)
    {
LABEL_82:
      unsigned int v42 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      unint64_t v44 = 0;
      long long v76 = v43;
      do
      {
        sub_1010441E4((int8x8_t *)&v12[v44 * *(unsigned int *)&__p[16]], v79);
        sub_101307378(v36, (int *)v79, (uint64_t *)v79);
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        sub_10104C204(a1, v79[1].u16[0], v79[1].u16[1], (double *)&v78, (double *)&v77);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231FC70);
        }
        uint64_t v45 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v46 = *(_DWORD *)&__p[12];
          uint64_t v47 = *(void *)(a1 + 384);
          sub_10104421C();
          __int16 v48 = v36;
          if (v83[23] >= 0) {
            uint64_t v49 = v83;
          }
          else {
            uint64_t v49 = *(unsigned char **)v83;
          }
          uint64_t v50 = v77;
          uint64_t v51 = v78;
          double v52 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v53 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)long long buf = 134220290;
          *(void *)uint64_t v100 = v44;
          *(_WORD *)&v100[8] = 1024;
          *(_DWORD *)__int16 v101 = v46;
          *(_WORD *)&v101[4] = 2048;
          *(void *)&v101[6] = v47;
          __int16 v102 = 2080;
          __int16 v103 = v49;
          __int16 v104 = 2048;
          uint64_t v105 = v51;
          __int16 v106 = 2048;
          uint64_t v107 = v50;
          __int16 v108 = 2048;
          double v109 = v52;
          __int16 v110 = 2048;
          double v111 = v53;
          __int16 v112 = 1024;
          int v113 = v54;
          __int16 v114 = 1024;
          int v115 = v55;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v83[23] & 0x80000000) != 0) {
            operator delete(*(void **)v83);
          }
          char v36 = v48;
          clock_t v12 = v76;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v56 = *(_DWORD *)&__p[12];
          uint64_t v57 = *(void *)(a1 + 384);
          sub_10104421C();
          long long v75 = v36;
          if (v81 >= 0) {
            __int16 v58 = v80;
          }
          else {
            __int16 v58 = (void **)v80[0];
          }
          uint64_t v59 = v77;
          uint64_t v60 = v78;
          double v61 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v62 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v63 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v64 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)uint64_t v83 = 134220290;
          *(void *)&v83[4] = v44;
          *(_WORD *)&v83[12] = 1024;
          *(_DWORD *)&v83[14] = v56;
          *(_WORD *)&v83[18] = 2048;
          *(void *)&v83[20] = v57;
          *(_WORD *)&v83[28] = 2080;
          *(void *)&v83[30] = v58;
          *(_WORD *)&v83[38] = 2048;
          uint64_t v84 = v60;
          __int16 v85 = 2048;
          uint64_t v86 = v59;
          __int16 v87 = 2048;
          double v88 = v61;
          __int16 v89 = 2048;
          double v90 = v62;
          __int16 v91 = 1024;
          int v92 = v63;
          __int16 v93 = 1024;
          int v94 = v64;
          uint64_t v65 = (char *)_os_log_send_and_compose_impl();
          if (v81 < 0) {
            operator delete(v80[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v65);
          char v36 = v75;
          if (v65 != (char *)buf) {
            free(v65);
          }
        }
        ++v44;
      }
      while (v44 < *(unsigned int *)&__p[12]);
    }
    goto LABEL_101;
  }
  BOOL v37 = sub_101306A88(a1, (unsigned int **)(a1 + 344), (_DWORD *)&v82 + 1, &v82);
  int v39 = v82;
  int v38 = HIDWORD(v82);
  unsigned int v40 = v82 - HIDWORD(v82) + 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v41 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v100 = v40;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v38;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_DWORD *)uint64_t v83 = 67109376;
    *(_DWORD *)&v83[4] = v40;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&unsigned char v83[10] = v38;
    __int16 v73 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v73);
    if (v73 != (char *)buf) {
      free(v73);
    }
  }
  if ((v39 + 1) >= *(_DWORD *)&__p[12]) {
    unsigned int v42 = *(_DWORD *)&__p[12] - v38;
  }
  else {
    unsigned int v42 = v40;
  }
  if (!v42)
  {
LABEL_57:
    clock_t v12 = 0;
    goto LABEL_83;
  }
  if (v42 + v38 > *(_DWORD *)&__p[12]) {
    sub_101AAE45C();
  }
  clock_t v12 = (char *)sub_100800268(a1, a2, a3, v38, v42, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)&v83[6] = 0;
  *(void *)uint64_t v83 = 0;
  if (!v37)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    double v69 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      LOWORD(v80[0]) = 0;
      long long v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v74);
      if (v74 != (char *)buf) {
        free(v74);
      }
    }
LABEL_101:
    unsigned int v42 = 0;
    int v70 = 1;
    goto LABEL_102;
  }
  if (sub_1013070F8(a1, (uint64_t)v12, v42, *(int *)&__p[16], (_DWORD *)(a1 + 328), v83))
  {
    sub_101307378((uint64_t **)(a1 + 368), (int *)v83, (uint64_t *)v83);
LABEL_83:
    BOOL v66 = 1;
    goto LABEL_84;
  }
  int v70 = 0;
LABEL_102:
  BOOL v66 = v70 != 0;
LABEL_84:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v67 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10104421C();
    uint64_t v68 = v83[23] >= 0 ? v83 : *(unsigned char **)v83;
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)uint64_t v100 = v66;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v42;
    *(_WORD *)__int16 v101 = 2080;
    *(void *)&v101[2] = v68;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v83[23] & 0x80000000) != 0) {
      operator delete(*(void **)v83);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_10104421C();
    if (SBYTE3(v96) >= 0) {
      int v71 = __p;
    }
    else {
      int v71 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v83 = 67109634;
    *(_DWORD *)&v83[4] = v66;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&unsigned char v83[10] = v42;
    *(_WORD *)&v83[14] = 2080;
    *(void *)&v83[16] = v71;
    double v72 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE3(v96) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v72);
    if (v72 != (char *)buf) {
      free(v72);
    }
  }
  if (v12) {
    free(v12);
  }
}

void sub_1012FD488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012FD4C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t sub_1012FD4E4(uint64_t a1, int *a2, void *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 368);
  uint64_t v7 = sub_101307780(a1 + 368, a2);
  uint64_t v8 = (void **)v7;
  if (a1 + 376 != v7)
  {
    uint64_t v9 = *(void *)(v7 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v7 + 31);
    *a3 = v9;
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  clock_t v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10104421C();
    clock_t v12 = v146[9] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v146[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_10104421C();
    if ((SBYTE7(v140) & 0x80u) == 0) {
      long long v76 = buf;
    }
    else {
      long long v76 = *(unsigned char **)buf;
    }
    *(_DWORD *)unint64_t v131 = 136315138;
    *(void *)&v131[4] = v76;
    uint64_t v77 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v140) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v77);
    if (v77 != __p) {
      free(v77);
    }
  }
  *(void *)(a1 + 352) = *(void *)(a1 + 344);
  sub_100134750(v125, "");
  uint64_t v127 = 0;
  int v128 = -1;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  if ((sub_1007FCEFC(a1, (uint64_t)v125) & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    uint64_t v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      *(_WORD *)long long buf = 0;
      uint64_t v78 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v78);
      if (v78 != __p) {
        free(v78);
      }
    }
    BOOL v10 = 0;
    goto LABEL_179;
  }
  unsigned int v105 = 0;
  unint64_t v13 = 0;
  uint64_t v124 = 0;
  int v122 = 0;
  int v123 = 43962;
  uint64_t v119 = 0x200006ABBALL;
  long long v120 = 0u;
  long long v121 = 0u;
  *(void *)&uint8_t buf[4] = 184;
  *(_DWORD *)long long buf = 371642;
  int v139 = 381;
  long long v140 = 0u;
  long long v141 = 0u;
  uint64_t v143 = 0;
  uint64_t v142 = 0;
  int v144 = 0;
  int v114 = 502714;
  long long v115 = xmmword_101DB37A0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v14 = v130;
      if (!sub_1007FD08C(a1, v125, &v123)) {
        goto LABEL_162;
      }
      if (HIWORD(v123) == 7) {
        break;
      }
      if (HIWORD(v123) == 6)
      {
        sub_101044D88(v129 + v14, (uint64_t)&v119);
        unint64_t v13 = (int8x8_t *)(v14 + v129 + v124 + 12);
        if ((unint64_t)v13 + (DWORD2(v120) * DWORD1(v120)) > v127 + v129)
        {
          if (!*(unsigned char *)(a1 + 392)) {
            goto LABEL_162;
          }
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          __int16 v48 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            int v49 = DWORD1(v120);
            __int16 v95 = sub_100147F50(*(_DWORD *)(a1 + 48));
            int v102 = v49;
            sub_101307404();
            int v50 = v132[9];
            uint64_t v51 = *(unsigned char **)v131;
            sub_10104421C();
            double v52 = v131;
            if (v50 < 0) {
              double v52 = v51;
            }
            double v53 = v134;
            if (v137 < 0) {
              double v53 = *(unsigned char **)v134;
            }
            *(_DWORD *)std::string __p = 134284803;
            *(void *)&__p[4] = v13;
            *(_WORD *)&unsigned char __p[12] = 1025;
            *(_DWORD *)float v146 = v102;
            *(_WORD *)&v146[4] = 2049;
            *(void *)&v146[6] = v14;
            *(_WORD *)&v146[14] = 2081;
            *(void *)&v146[16] = v95;
            *(_WORD *)&v146[24] = 2081;
            *(void *)&v146[26] = v52;
            *(_WORD *)&v146[34] = 2081;
            v147[0] = v53;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v137 < 0) {
              operator delete(*(void **)v134);
            }
            if ((v132[9] & 0x80000000) != 0) {
              operator delete(*(void **)v131);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v103 = DWORD1(v120);
          uint64_t v96 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          int v54 = v137;
          int v55 = *(unsigned char **)v134;
          sub_10104421C();
          int v56 = v134;
          if (v54 < 0) {
            int v56 = v55;
          }
          uint64_t v57 = v112;
          if (v113 < 0) {
            uint64_t v57 = (void **)v112[0];
          }
          *(_DWORD *)unint64_t v131 = 134284803;
          *(void *)&v131[4] = v13;
          *(_WORD *)&v131[12] = 1025;
          *(_DWORD *)__int16 v132 = v103;
          *(_WORD *)&v132[4] = 2049;
          *(void *)&v132[6] = v14;
          *(_WORD *)&v132[14] = 2081;
          *(void *)&v132[16] = v96;
          *(_WORD *)&v132[24] = 2081;
          *(void *)&v132[26] = v56;
          *(_WORD *)&v132[34] = 2081;
          *(void *)int v133 = v57;
          double v32 = (char *)_os_log_send_and_compose_impl();
          if (v113 < 0) {
            operator delete(v112[0]);
          }
          if (v137 < 0) {
            operator delete(*(void **)v134);
          }
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v123) != 5)
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v33 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
          {
            __int16 v34 = sub_100147F50(*(_DWORD *)(a1 + 48));
            sub_101307404();
            uint64_t v35 = v132[9] >= 0 ? v131 : *(unsigned char **)v131;
            *(_DWORD *)std::string __p = 134218498;
            *(void *)&__p[4] = v14;
            *(_WORD *)&unsigned char __p[12] = 2080;
            *(void *)float v146 = v34;
            *(_WORD *)&v146[8] = 2080;
            *(void *)&v146[10] = v35;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v132[9] & 0x80000000) != 0) {
              operator delete(*(void **)v131);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          char v36 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          if (v137 >= 0) {
            BOOL v37 = v134;
          }
          else {
            BOOL v37 = *(unsigned char **)v134;
          }
          *(_DWORD *)unint64_t v131 = 134218498;
          *(void *)&v131[4] = v14;
          *(_WORD *)&v131[12] = 2080;
          *(void *)__int16 v132 = v36;
          *(_WORD *)&v132[8] = 2080;
          *(void *)&v132[10] = v37;
          double v32 = (char *)_os_log_send_and_compose_impl();
          if (v137 < 0) {
            operator delete(*(void **)v134);
          }
LABEL_147:
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v32);
          goto LABEL_221;
        }
        sub_101043CA4(v129 + v14, (uint64_t)buf);
      }
    }
    sub_101044D88(v129 + v14, (uint64_t)&v114);
    uint64_t v15 = v14 + v129 + v124 + 12;
    if (v15 + (unint64_t)(HIDWORD(v115) * DWORD2(v115)) > v127 + v129)
    {
      if (!*(unsigned char *)(a1 + 392)) {
        goto LABEL_162;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v38 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v39 = DWORD2(v115);
        __int16 v93 = sub_100147F50(*(_DWORD *)(a1 + 48));
        int v100 = v39;
        sub_101307404();
        int v40 = v132[9];
        uint64_t v41 = *(unsigned char **)v131;
        sub_10104421C();
        unsigned int v42 = v131;
        if (v40 < 0) {
          unsigned int v42 = v41;
        }
        double v43 = v134;
        if (v137 < 0) {
          double v43 = *(unsigned char **)v134;
        }
        *(_DWORD *)std::string __p = 134284803;
        *(void *)&__p[4] = v15;
        *(_WORD *)&unsigned char __p[12] = 1025;
        *(_DWORD *)float v146 = v100;
        *(_WORD *)&v146[4] = 2049;
        *(void *)&v146[6] = v14;
        *(_WORD *)&v146[14] = 2081;
        *(void *)&v146[16] = v93;
        *(_WORD *)&v146[24] = 2080;
        *(void *)&v146[26] = v42;
        *(_WORD *)&v146[34] = 2081;
        v147[0] = v43;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v137 < 0) {
          operator delete(*(void **)v134);
        }
        if ((v132[9] & 0x80000000) != 0) {
          operator delete(*(void **)v131);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v101 = DWORD2(v115);
      int v94 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v44 = v137;
      uint64_t v45 = *(unsigned char **)v134;
      sub_10104421C();
      int v46 = v134;
      if (v44 < 0) {
        int v46 = v45;
      }
      uint64_t v47 = v112;
      if (v113 < 0) {
        uint64_t v47 = (void **)v112[0];
      }
      *(_DWORD *)unint64_t v131 = 134284803;
      *(void *)&v131[4] = v15;
      *(_WORD *)&v131[12] = 1025;
      *(_DWORD *)__int16 v132 = v101;
      *(_WORD *)&v132[4] = 2049;
      *(void *)&v132[6] = v14;
      *(_WORD *)&v132[14] = 2081;
      *(void *)&v132[16] = v94;
      *(_WORD *)&v132[24] = 2080;
      *(void *)&v132[26] = v46;
      *(_WORD *)&v132[34] = 2081;
      *(void *)int v133 = v47;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      goto LABEL_147;
    }
    sub_1000F5BB0((uint64_t)v6, *v8);
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 368) = v8;
    *uint64_t v8 = 0;
    uint64_t v110 = 0;
    int v111 = 0;
    sub_1010445F8(&v110, a2);
    unsigned int v108 = DWORD2(v115);
    unsigned int v109 = 0;
    if (!v13)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      __int16 v58 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
      {
        uint64_t v59 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        uint64_t v60 = v146[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)unint64_t v131 = 136380931;
        *(void *)&v131[4] = v59;
        *(_WORD *)&v131[12] = 2081;
        *(void *)__int16 v132 = v60;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v131, 0x16u);
        if ((v146[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      double v61 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v132[9] >= 0) {
        double v62 = v131;
      }
      else {
        double v62 = *(unsigned char **)v131;
      }
      *(_DWORD *)int v134 = 136380931;
      *(void *)&v134[4] = v61;
      __int16 v135 = 2081;
      __int16 v136 = v62;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if ((v132[9] & 0x80000000) != 0) {
        operator delete(*(void **)v131);
      }
      goto LABEL_147;
    }
    BOOL v16 = sub_10130760C(a1, v13, DWORD1(v120), SDWORD2(v120), &v110, &v109, &v108);
    if (v109 >= DWORD2(v115) || v108 >= DWORD2(v115)) {
      break;
    }
    if (!v16)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v63 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v97 = v109;
        unsigned int v104 = v108;
        sub_101044430();
        if (v132[9] >= 0) {
          int v64 = v131;
        }
        else {
          int v64 = *(unsigned char **)v131;
        }
        uint64_t v65 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        if (v137 >= 0) {
          BOOL v66 = v134;
        }
        else {
          BOOL v66 = *(unsigned char **)v134;
        }
        *(_DWORD *)std::string __p = 67175683;
        *(_DWORD *)&__p[4] = v97;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = v104;
        *(_WORD *)float v146 = 2081;
        *(void *)&v146[2] = v64;
        *(_WORD *)&v146[10] = 2081;
        *(void *)&v146[12] = v65;
        *(_WORD *)&v146[20] = 2081;
        *(void *)&v146[22] = v66;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v137 < 0) {
          operator delete(*(void **)v134);
        }
        if ((v132[9] & 0x80000000) != 0) {
          operator delete(*(void **)v131);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      unsigned int v85 = v109;
      unsigned int v98 = v108;
      sub_101044430();
      if (v137 >= 0) {
        uint64_t v86 = v134;
      }
      else {
        uint64_t v86 = *(unsigned char **)v134;
      }
      __int16 v87 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v113 >= 0) {
        double v88 = v112;
      }
      else {
        double v88 = (void **)v112[0];
      }
      *(_DWORD *)unint64_t v131 = 67175683;
      *(_DWORD *)&v131[4] = v85;
      *(_WORD *)&v131[8] = 1025;
      *(_DWORD *)&v131[10] = v98;
      *(_WORD *)__int16 v132 = 2081;
      *(void *)&v132[2] = v86;
      *(_WORD *)&v132[10] = 2081;
      *(void *)&v132[12] = v87;
      *(_WORD *)&v132[20] = 2081;
      *(void *)&v132[22] = v88;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v32);
LABEL_221:
      if (v32 != __p) {
        free(v32);
      }
      goto LABEL_162;
    }
    unsigned int v105 = v108 - v109 + 1;
    if (!sub_1013070F8(a1, v15 + HIDWORD(v115) * v109, v105, SHIDWORD(v115), a2, a3)) {
      goto LABEL_162;
    }
    sub_101307378(v6, (int *)a3, a3);
  }
  if (*(unsigned char *)(a1 + 392))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    unint64_t v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      unint64_t v19 = v131;
      sub_101044430();
      if (v132[9] < 0) {
        unint64_t v19 = *(unsigned char **)v131;
      }
      __int16 v99 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v20 = v137;
      unint64_t v21 = *(unsigned char **)v134;
      unsigned int v22 = v109;
      unsigned int v89 = v108;
      int v91 = DWORD2(v115);
      sub_10104421C();
      BOOL v23 = v134;
      if (v20 < 0) {
        BOOL v23 = v21;
      }
      int8x8_t v24 = v112;
      if (v113 < 0) {
        int8x8_t v24 = (void **)v112[0];
      }
      *(_DWORD *)std::string __p = 136382211;
      *(void *)&__p[4] = v19;
      *(_WORD *)&unsigned char __p[12] = 2081;
      *(void *)float v146 = v99;
      *(_WORD *)&v146[8] = 2081;
      *(void *)&v146[10] = v23;
      *(_WORD *)&v146[18] = 1025;
      *(_DWORD *)&v146[20] = v22;
      *(_WORD *)&v146[24] = 1025;
      *(_DWORD *)&v146[26] = v89;
      *(_WORD *)&v146[30] = 1025;
      *(_DWORD *)&v146[32] = v91;
      LOWORD(v147[0]) = 2081;
      *(void *)((char *)v147 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      if ((v132[9] & 0x80000000) != 0) {
        operator delete(*(void **)v131);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v25 = v134;
      sub_101044430();
      if (v137 < 0) {
        uint64_t v25 = *(unsigned char **)v134;
      }
      int v92 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v26 = v113;
      uint64_t v27 = (void **)v112[0];
      unsigned int v28 = v108;
      unsigned int v29 = v109;
      int v90 = DWORD2(v115);
      sub_10104421C();
      uint64_t v30 = v112;
      if (v26 < 0) {
        uint64_t v30 = v27;
      }
      int v31 = &v106;
      if (v107 < 0) {
        int v31 = v106;
      }
      *(_DWORD *)unint64_t v131 = 136382211;
      *(void *)&v131[4] = v25;
      *(_WORD *)&v131[12] = 2081;
      *(void *)__int16 v132 = v92;
      *(_WORD *)&v132[8] = 2081;
      *(void *)&v132[10] = v30;
      *(_WORD *)&v132[18] = 1025;
      *(_DWORD *)&v132[20] = v29;
      *(_WORD *)&v132[24] = 1025;
      *(_DWORD *)&v132[26] = v28;
      *(_WORD *)&v132[30] = 1025;
      *(_DWORD *)&v132[32] = v90;
      *(_WORD *)int v133 = 2081;
      *(void *)&v133[2] = v31;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v107 < 0) {
        operator delete(v106);
      }
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v32);
      goto LABEL_221;
    }
  }
LABEL_162:
  uint64_t v67 = sub_101307780((uint64_t)v6, a2);
  uint64_t v68 = (void **)v67;
  BOOL v10 = v8 != (void **)v67;
  if (v8 != (void **)v67)
  {
    uint64_t v69 = *(void *)(v67 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v67 + 31);
    *a3 = v69;
  }
  if (v129) {
    sub_1007FCFE0(a1, (uint64_t)v125);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  int v70 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10104421C();
    int v71 = v132[9];
    double v72 = *(unsigned char **)v131;
    sub_10104421C();
    __int16 v73 = v131;
    if (v71 < 0) {
      __int16 v73 = v72;
    }
    if (v137 >= 0) {
      long long v74 = v134;
    }
    else {
      long long v74 = *(unsigned char **)v134;
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v68;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v105;
    *(_WORD *)float v146 = 2080;
    *(void *)&v146[2] = v73;
    *(_WORD *)&v146[10] = 2080;
    *(void *)&v146[12] = v74;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v137 < 0) {
      operator delete(*(void **)v134);
    }
    if ((v132[9] & 0x80000000) != 0) {
      operator delete(*(void **)v131);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    BOOL v79 = v8 != v68;
    sub_10104421C();
    int v80 = v137;
    char v81 = *(unsigned char **)v134;
    sub_10104421C();
    uint64_t v82 = v134;
    if (v80 < 0) {
      uint64_t v82 = v81;
    }
    if (v113 >= 0) {
      uint64_t v83 = v112;
    }
    else {
      uint64_t v83 = (void **)v112[0];
    }
    *(_DWORD *)unint64_t v131 = 67109890;
    *(_DWORD *)&v131[4] = v79;
    *(_WORD *)&v131[8] = 1024;
    *(_DWORD *)&v131[10] = v105;
    *(_WORD *)__int16 v132 = 2080;
    *(void *)&v132[2] = v82;
    *(_WORD *)&v132[10] = 2080;
    *(void *)&v132[12] = v83;
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    if (v113 < 0) {
      operator delete(v112[0]);
    }
    if (v137 < 0) {
      operator delete(*(void **)v134);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v84);
    if (v84 != __p) {
      free(v84);
    }
  }
LABEL_179:
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  return v10;
}

void sub_1012FEC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1012FEDE0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  *(void *)(a1 + 334) = *(uint64_t *)((char *)a2 + 6);
  *(void *)(a1 + 328) = v6;
  char v37 = 0;
  uint64_t v39 = nullsub_41(0, a2);
  char v36 = "search";
  char v38 = 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10104421C();
    uint64_t v8 = SHIBYTE(v48) >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v48) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_10104421C();
    if (SHIBYTE(v42) >= 0) {
      BOOL v23 = buf;
    }
    else {
      BOOL v23 = *(unsigned char **)buf;
    }
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    int8x8_t v24 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v24);
    if (v24 != __p) {
      free(v24);
    }
  }
  sub_101048050(a1, &v45);
  uint64_t v9 = (const char **)(a1 + 8);
  BOOL v10 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    BOOL v10 = *v9;
  }
  if (sub_1000A569C(v10))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    clock_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      clock_t v12 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        clock_t v12 = *v9;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v30 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v30 = *v9;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      int v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v31);
      if (v31 != __p) {
        free(v31);
      }
    }
    std::string::operator=(&v45, (const std::string *)(a1 + 8));
  }
  sub_101049A48((void *)a1, (uint64_t)&v45, (uint64_t)&v36);
  uint64_t v13 = sub_101307780(a1 + 368, (int *)a2);
  uint64_t v14 = v13;
  uint64_t v15 = a1 + 376;
  if (a1 + 376 != v13)
  {
    uint64_t v16 = *(void *)(v13 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v13 + 31);
    *a3 = v16;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v17 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10104421C();
    int v18 = SHIBYTE(v42);
    unint64_t v19 = *(unsigned char **)buf;
    sub_10104421C();
    int v20 = buf;
    if (v18 < 0) {
      int v20 = v19;
    }
    if (v35 >= 0) {
      unint64_t v21 = v34;
    }
    else {
      unint64_t v21 = (void **)v34[0];
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v15 != v14;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    __int16 v47 = 2080;
    __int16 v48 = v20;
    __int16 v49 = 2080;
    int v50 = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_10104421C();
    int v25 = v35;
    int v26 = (void **)v34[0];
    sub_10104421C();
    uint64_t v27 = v34;
    if (v25 < 0) {
      uint64_t v27 = v26;
    }
    if (v33 >= 0) {
      unsigned int v28 = &v32;
    }
    else {
      unsigned int v28 = v32;
    }
    *(_DWORD *)long long buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v15 != v14;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    __int16 v41 = 2080;
    unsigned int v42 = v27;
    __int16 v43 = 2080;
    int v44 = v28;
    unsigned int v29 = (char *)_os_log_send_and_compose_impl();
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v29);
    if (v29 != __p) {
      free(v29);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return v15 != v14;
}

void sub_1012FF4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012FF520(uint64_t a1)
{
  sub_101306530(a1);

  operator delete();
}

uint64_t sub_1012FF558(uint64_t a1, std::string::value_type *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_101047E00(a1, a2);
  sub_10104A8A0((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_1013077FC((uint64_t *)&v42, a1 + 368);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  long long v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218242;
    *(void *)double v53 = v44;
    *(_WORD *)&v53[8] = 2080;
    *(void *)&v53[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_DWORD *)std::string __p = 134218242;
    *(void *)&__p[4] = v44;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)&unsigned char __p[14] = a2;
    char v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  uint64_t v6 = a1 + 376;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  uint64_t v7 = v42;
  if (v42 != &v43)
  {
    uint64_t v8 = 0;
    while (1)
    {
      *(void *)__int16 v41 = *(void **)((char *)v7 + 25);
      *(void *)&v41[6] = *(void **)((char *)v7 + 31);
      memset(v40, 0, 14);
      uint64_t v38 = 0;
      memset(v39, 0, 14);
      uint64_t v37 = 0;
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 368) = v6;
      clock_t v9 = clock();
      int v10 = (*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)a1 + 192))(a1, v41, v40);
      clock_t v11 = clock();
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 368) = v6;
      clock_t v12 = clock();
      int v13 = (*(uint64_t (**)(uint64_t, unsigned char *, _WORD *))(*(void *)a1 + 184))(a1, v41, v39);
      clock_t v14 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v14 - v12, v11 - v9);
      if (v10 != v13) {
        break;
      }
      int v15 = (*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)a1 + 176))(a1, v41, v40);
      if (v15) {
        sub_10104C204(a1, LOWORD(v40[1]), WORD1(v40[1]), (double *)&v38, (double *)&v37);
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v16 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = v44;
        uint64_t v18 = v37;
        uint64_t v19 = v38;
        sub_1010449C8();
        int v20 = __p;
        if (__p[23] < 0) {
          int v20 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 134219266;
        *(void *)double v53 = v8;
        *(_WORD *)&v53[8] = 2048;
        *(void *)&v53[10] = v17;
        *(_WORD *)&v53[18] = 1024;
        *(_DWORD *)&v53[20] = v15;
        __int16 v54 = 2048;
        uint64_t v55 = v19;
        __int16 v56 = 2048;
        uint64_t v57 = v18;
        __int16 v58 = 2080;
        uint64_t v59 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231FC70);
        }
        uint64_t v24 = v44;
        uint64_t v25 = v37;
        uint64_t v26 = v38;
        sub_1010449C8();
        uint64_t v27 = &v35;
        if (v36 < 0) {
          uint64_t v27 = v35;
        }
        *(_DWORD *)std::string __p = 134219266;
        *(void *)&__p[4] = v8;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&unsigned char __p[14] = v24;
        *(_WORD *)&unsigned char __p[22] = 1024;
        *(_DWORD *)&unsigned char __p[24] = v15;
        __int16 v46 = 2048;
        uint64_t v47 = v26;
        __int16 v48 = 2048;
        uint64_t v49 = v25;
        __int16 v50 = 2080;
        uint64_t v51 = v27;
        unsigned int v28 = (char *)_os_log_send_and_compose_impl();
        if (v36 < 0) {
          operator delete(v35);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      if (!v15)
      {
        int v31 = 759;
        double v32 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v31, v32);
      }
      unint64_t v21 = v7[1];
      if (v21)
      {
        do
        {
          unsigned int v22 = (void **)v21;
          unint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unsigned int v22 = (void **)v7[2];
          BOOL v23 = *v22 == v7;
          uint64_t v7 = v22;
        }
        while (!v23);
      }
      ++v8;
      uint64_t v7 = v22;
      if (v22 == &v43) {
        goto LABEL_36;
      }
    }
    int v31 = 742;
    double v32 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  uint64_t v8 = 0;
LABEL_36:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  unsigned int v29 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)double v53 = 1;
    *(_WORD *)&v53[4] = 2048;
    *(void *)&v53[6] = v8;
    *(_WORD *)&v53[14] = 2048;
    *(void *)&v53[16] = v44;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(void *)std::string __p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(void *)&__p[10] = v8;
    *(_WORD *)&__p[18] = 2048;
    *(void *)&unsigned char __p[20] = v44;
    __int16 v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  sub_1000F5BB0((uint64_t)&v42, v43);
  return 1;
}

void sub_1012FFD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27)
{
}

void sub_1012FFDB0(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1007FE8A4(a1, (uint64_t)a2, a3);
  uint64_t v82 = 0;
  int v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(void *)uint64_t v83 = 0x200006ABBALL;
      memset(&v83[8], 0, 32);
      LODWORD(v84) = 0;
      sub_101044D88(a4, (uint64_t)v83);
      clock_t v11 = (void *)(a1 + 344);
      *(void *)(a1 + 352) = *(void *)(a1 + 344);
      sub_1013069A4((char **)(a1 + 344), *(unsigned int *)&v83[12]);
      clock_t v12 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&v83[12], *(int *)&v83[16]);
      if (v12)
      {
        v79[0] = 0;
        v79[1].i32[0] = 0;
        if (*(_DWORD *)&v83[12])
        {
          unint64_t v13 = 0;
          do
          {
            sub_101044414((int8x8_t *)&v12[v13 * *(unsigned int *)&v83[16]], v79);
            int v15 = *(int8x8_t **)(a1 + 352);
            unint64_t v14 = *(void *)(a1 + 360);
            if ((unint64_t)v15 >= v14)
            {
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *v11) >> 2);
              unint64_t v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555) {
                sub_1001D7FD4();
              }
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19) {
                unint64_t v19 = 2 * v20;
              }
              if (v20 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v21 = 0x1555555555555555;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21) {
                unsigned int v22 = (char *)sub_10080FC80(a1 + 360, v21);
              }
              else {
                unsigned int v22 = 0;
              }
              BOOL v23 = (int8x8_t *)&v22[12 * v18];
              int8x8_t v24 = v79[0];
              v23[1].i32[0] = v79[1].i32[0];
              int8x8_t *v23 = v24;
              uint64_t v26 = *(_DWORD **)(a1 + 344);
              uint64_t v25 = *(_DWORD **)(a1 + 352);
              uint64_t v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  int8x8_t v28 = *(int8x8_t *)(v25 - 3);
                  v25 -= 3;
                  __int32 v29 = v25[2];
                  *(int8x8_t *)((char *)v27 - 12) = v28;
                  uint64_t v27 = (int8x8_t *)((char *)v27 - 12);
                  v27[1].i32[0] = v29;
                }
                while (v25 != v26);
                uint64_t v25 = (_DWORD *)*v11;
              }
              uint64_t v17 = (char *)&v23[1] + 4;
              *(void *)(a1 + 344) = v27;
              *(void *)(a1 + 352) = (char *)v23 + 12;
              *(void *)(a1 + 360) = &v22[12 * v21];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              int8x8_t v16 = v79[0];
              v15[1].i32[0] = v79[1].i32[0];
              *int v15 = v16;
              uint64_t v17 = (char *)&v15[1] + 4;
            }
            *(void *)(a1 + 352) = v17;
            if (!*(unsigned char *)(a5 + 9))
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10231FC70);
              }
              uint64_t v30 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *(_DWORD *)&v83[12];
                sub_101044BC0();
                double v32 = __p;
                if (SBYTE3(v96) < 0) {
                  double v32 = *(unsigned char **)__p;
                }
                *(_DWORD *)long long buf = 134218498;
                *(void *)int v100 = v13;
                *(_WORD *)&v100[8] = 1024;
                *(_DWORD *)int v101 = v31;
                *(_WORD *)&v101[4] = 2080;
                *(void *)&v101[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v96) < 0) {
                  operator delete(*(void **)__p);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10231FC70);
                }
                int v33 = *(_DWORD *)&v83[12];
                sub_101044BC0();
                __int16 v34 = v80;
                if (v81 < 0) {
                  __int16 v34 = (void **)v80[0];
                }
                *(_DWORD *)std::string __p = 134218498;
                *(void *)&__p[4] = v13;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&unsigned char __p[14] = v33;
                *(_WORD *)&__p[18] = 2080;
                uint64_t v96 = v34;
                char v35 = (char *)_os_log_send_and_compose_impl();
                if (v81 < 0) {
                  operator delete(v80[0]);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v35);
                if (v35 != (char *)buf) {
                  free(v35);
                }
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v83[12]);
        }
      }
      goto LABEL_82;
    }
    unsigned int v42 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)std::string __p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101DB37A0;
  uint64_t v96 = 0;
  uint64_t v98 = 0;
  uint64_t v97 = 0;
  sub_101044D88(a4, (uint64_t)__p);
  char v36 = (uint64_t **)(a1 + 368);
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  if (!*(unsigned char *)(a5 + 9))
  {
    memset(v79, 0, 14);
    __int16 v43 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    clock_t v12 = v43;
    if (!v43)
    {
LABEL_82:
      unsigned int v42 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      unint64_t v44 = 0;
      long long v76 = v43;
      do
      {
        sub_1010441E4((int8x8_t *)&v12[v44 * *(unsigned int *)&__p[16]], v79);
        sub_101307378(v36, (int *)v79, (uint64_t *)v79);
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        sub_10104C204(a1, v79[1].u16[0], v79[1].u16[1], (double *)&v78, (double *)&v77);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231FC70);
        }
        std::string v45 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v46 = *(_DWORD *)&__p[12];
          uint64_t v47 = *(void *)(a1 + 384);
          sub_1010449C8();
          __int16 v48 = v36;
          if (v83[23] >= 0) {
            uint64_t v49 = v83;
          }
          else {
            uint64_t v49 = *(unsigned char **)v83;
          }
          uint64_t v50 = v77;
          uint64_t v51 = v78;
          double v52 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v53 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)long long buf = 134220290;
          *(void *)int v100 = v44;
          *(_WORD *)&v100[8] = 1024;
          *(_DWORD *)int v101 = v46;
          *(_WORD *)&v101[4] = 2048;
          *(void *)&v101[6] = v47;
          __int16 v102 = 2080;
          int v103 = v49;
          __int16 v104 = 2048;
          uint64_t v105 = v51;
          __int16 v106 = 2048;
          uint64_t v107 = v50;
          __int16 v108 = 2048;
          double v109 = v52;
          __int16 v110 = 2048;
          double v111 = v53;
          __int16 v112 = 1024;
          int v113 = v54;
          __int16 v114 = 1024;
          int v115 = v55;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v83[23] & 0x80000000) != 0) {
            operator delete(*(void **)v83);
          }
          char v36 = v48;
          clock_t v12 = v76;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v56 = *(_DWORD *)&__p[12];
          uint64_t v57 = *(void *)(a1 + 384);
          sub_1010449C8();
          long long v75 = v36;
          if (v81 >= 0) {
            __int16 v58 = v80;
          }
          else {
            __int16 v58 = (void **)v80[0];
          }
          uint64_t v59 = v77;
          uint64_t v60 = v78;
          double v61 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v62 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v63 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v64 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)uint64_t v83 = 134220290;
          *(void *)&v83[4] = v44;
          *(_WORD *)&v83[12] = 1024;
          *(_DWORD *)&v83[14] = v56;
          *(_WORD *)&v83[18] = 2048;
          *(void *)&v83[20] = v57;
          *(_WORD *)&v83[28] = 2080;
          *(void *)&v83[30] = v58;
          *(_WORD *)&v83[38] = 2048;
          uint64_t v84 = v60;
          __int16 v85 = 2048;
          uint64_t v86 = v59;
          __int16 v87 = 2048;
          double v88 = v61;
          __int16 v89 = 2048;
          double v90 = v62;
          __int16 v91 = 1024;
          int v92 = v63;
          __int16 v93 = 1024;
          int v94 = v64;
          uint64_t v65 = (char *)_os_log_send_and_compose_impl();
          if (v81 < 0) {
            operator delete(v80[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v65);
          char v36 = v75;
          if (v65 != (char *)buf) {
            free(v65);
          }
        }
        ++v44;
      }
      while (v44 < *(unsigned int *)&__p[12]);
    }
    goto LABEL_101;
  }
  BOOL v37 = sub_101307854(a1, (int **)(a1 + 344), (_DWORD *)&v82 + 1, &v82);
  int v39 = v82;
  int v38 = HIDWORD(v82);
  unsigned int v40 = v82 - HIDWORD(v82) + 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  __int16 v41 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)int v100 = v40;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v38;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_DWORD *)uint64_t v83 = 67109376;
    *(_DWORD *)&v83[4] = v40;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&unsigned char v83[10] = v38;
    __int16 v73 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v73);
    if (v73 != (char *)buf) {
      free(v73);
    }
  }
  if ((v39 + 1) >= *(_DWORD *)&__p[12]) {
    unsigned int v42 = *(_DWORD *)&__p[12] - v38;
  }
  else {
    unsigned int v42 = v40;
  }
  if (!v42)
  {
LABEL_57:
    clock_t v12 = 0;
    goto LABEL_83;
  }
  if (v42 + v38 > *(_DWORD *)&__p[12]) {
    sub_101AAE45C();
  }
  clock_t v12 = (char *)sub_100800268(a1, a2, a3, v38, v42, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)&v83[6] = 0;
  *(void *)uint64_t v83 = 0;
  if (!v37)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    uint64_t v69 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      LOWORD(v80[0]) = 0;
      long long v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v74);
      if (v74 != (char *)buf) {
        free(v74);
      }
    }
LABEL_101:
    unsigned int v42 = 0;
    int v70 = 1;
    goto LABEL_102;
  }
  if (sub_101307EB4(a1, (uint64_t)v12, v42, *(int *)&__p[16], (_DWORD *)(a1 + 328), v83))
  {
    sub_101307378((uint64_t **)(a1 + 368), (int *)v83, (uint64_t *)v83);
LABEL_83:
    BOOL v66 = 1;
    goto LABEL_84;
  }
  int v70 = 0;
LABEL_102:
  BOOL v66 = v70 != 0;
LABEL_84:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v67 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1010449C8();
    uint64_t v68 = v83[23] >= 0 ? v83 : *(unsigned char **)v83;
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)int v100 = v66;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v42;
    *(_WORD *)int v101 = 2080;
    *(void *)&v101[2] = v68;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v83[23] & 0x80000000) != 0) {
      operator delete(*(void **)v83);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_1010449C8();
    if (SBYTE3(v96) >= 0) {
      int v71 = __p;
    }
    else {
      int v71 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v83 = 67109634;
    *(_DWORD *)&v83[4] = v66;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&unsigned char v83[10] = v42;
    *(_WORD *)&v83[14] = 2080;
    *(void *)&v83[16] = v71;
    double v72 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE3(v96) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v72);
    if (v72 != (char *)buf) {
      free(v72);
    }
  }
  if (v12) {
    free(v12);
  }
}

void sub_101300C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101300C94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t sub_101300CB8(uint64_t a1, int *a2, void *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 368);
  uint64_t v7 = sub_101307780(a1 + 368, a2);
  uint64_t v8 = (void **)v7;
  if (a1 + 376 != v7)
  {
    uint64_t v9 = *(void *)(v7 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v7 + 31);
    *a3 = v9;
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  clock_t v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1010449C8();
    clock_t v12 = v146[9] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v146[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_1010449C8();
    if ((SBYTE7(v140) & 0x80u) == 0) {
      long long v76 = buf;
    }
    else {
      long long v76 = *(unsigned char **)buf;
    }
    *(_DWORD *)unint64_t v131 = 136315138;
    *(void *)&v131[4] = v76;
    uint64_t v77 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v140) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v77);
    if (v77 != __p) {
      free(v77);
    }
  }
  *(void *)(a1 + 352) = *(void *)(a1 + 344);
  sub_100134750(v125, "");
  uint64_t v127 = 0;
  int v128 = -1;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  if ((sub_1007FCEFC(a1, (uint64_t)v125) & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    uint64_t v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      *(_WORD *)long long buf = 0;
      uint64_t v78 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v78);
      if (v78 != __p) {
        free(v78);
      }
    }
    BOOL v10 = 0;
    goto LABEL_179;
  }
  unsigned int v105 = 0;
  unint64_t v13 = 0;
  uint64_t v124 = 0;
  int v122 = 0;
  int v123 = 43962;
  uint64_t v119 = 0x200006ABBALL;
  long long v120 = 0u;
  long long v121 = 0u;
  *(void *)&uint8_t buf[4] = 184;
  *(_DWORD *)long long buf = 371642;
  int v139 = 381;
  long long v140 = 0u;
  long long v141 = 0u;
  uint64_t v143 = 0;
  uint64_t v142 = 0;
  int v144 = 0;
  int v114 = 502714;
  long long v115 = xmmword_101DB37A0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v14 = v130;
      if (!sub_1007FD08C(a1, v125, &v123)) {
        goto LABEL_162;
      }
      if (HIWORD(v123) == 7) {
        break;
      }
      if (HIWORD(v123) == 6)
      {
        sub_101044D88(v129 + v14, (uint64_t)&v119);
        unint64_t v13 = (int8x8_t *)(v14 + v129 + v124 + 12);
        if ((unint64_t)v13 + (DWORD2(v120) * DWORD1(v120)) > v127 + v129)
        {
          if (!*(unsigned char *)(a1 + 392)) {
            goto LABEL_162;
          }
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          __int16 v48 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            int v49 = DWORD1(v120);
            __int16 v95 = sub_100147F50(*(_DWORD *)(a1 + 48));
            int v102 = v49;
            sub_101307404();
            int v50 = v132[9];
            uint64_t v51 = *(unsigned char **)v131;
            sub_1010449C8();
            double v52 = v131;
            if (v50 < 0) {
              double v52 = v51;
            }
            double v53 = v134;
            if (v137 < 0) {
              double v53 = *(unsigned char **)v134;
            }
            *(_DWORD *)std::string __p = 134284803;
            *(void *)&__p[4] = v13;
            *(_WORD *)&unsigned char __p[12] = 1025;
            *(_DWORD *)float v146 = v102;
            *(_WORD *)&v146[4] = 2049;
            *(void *)&v146[6] = v14;
            *(_WORD *)&v146[14] = 2081;
            *(void *)&v146[16] = v95;
            *(_WORD *)&v146[24] = 2081;
            *(void *)&v146[26] = v52;
            *(_WORD *)&v146[34] = 2081;
            v147[0] = v53;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v137 < 0) {
              operator delete(*(void **)v134);
            }
            if ((v132[9] & 0x80000000) != 0) {
              operator delete(*(void **)v131);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v103 = DWORD1(v120);
          uint64_t v96 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          int v54 = v137;
          int v55 = *(unsigned char **)v134;
          sub_1010449C8();
          int v56 = v134;
          if (v54 < 0) {
            int v56 = v55;
          }
          uint64_t v57 = v112;
          if (v113 < 0) {
            uint64_t v57 = (void **)v112[0];
          }
          *(_DWORD *)unint64_t v131 = 134284803;
          *(void *)&v131[4] = v13;
          *(_WORD *)&v131[12] = 1025;
          *(_DWORD *)__int16 v132 = v103;
          *(_WORD *)&v132[4] = 2049;
          *(void *)&v132[6] = v14;
          *(_WORD *)&v132[14] = 2081;
          *(void *)&v132[16] = v96;
          *(_WORD *)&v132[24] = 2081;
          *(void *)&v132[26] = v56;
          *(_WORD *)&v132[34] = 2081;
          *(void *)int v133 = v57;
          double v32 = (char *)_os_log_send_and_compose_impl();
          if (v113 < 0) {
            operator delete(v112[0]);
          }
          if (v137 < 0) {
            operator delete(*(void **)v134);
          }
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v123) != 5)
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v33 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
          {
            __int16 v34 = sub_100147F50(*(_DWORD *)(a1 + 48));
            sub_101307404();
            char v35 = v132[9] >= 0 ? v131 : *(unsigned char **)v131;
            *(_DWORD *)std::string __p = 134218498;
            *(void *)&__p[4] = v14;
            *(_WORD *)&unsigned char __p[12] = 2080;
            *(void *)float v146 = v34;
            *(_WORD *)&v146[8] = 2080;
            *(void *)&v146[10] = v35;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v132[9] & 0x80000000) != 0) {
              operator delete(*(void **)v131);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          char v36 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          if (v137 >= 0) {
            BOOL v37 = v134;
          }
          else {
            BOOL v37 = *(unsigned char **)v134;
          }
          *(_DWORD *)unint64_t v131 = 134218498;
          *(void *)&v131[4] = v14;
          *(_WORD *)&v131[12] = 2080;
          *(void *)__int16 v132 = v36;
          *(_WORD *)&v132[8] = 2080;
          *(void *)&v132[10] = v37;
          double v32 = (char *)_os_log_send_and_compose_impl();
          if (v137 < 0) {
            operator delete(*(void **)v134);
          }
LABEL_147:
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v32);
          goto LABEL_221;
        }
        sub_101043CA4(v129 + v14, (uint64_t)buf);
      }
    }
    sub_101044D88(v129 + v14, (uint64_t)&v114);
    uint64_t v15 = v14 + v129 + v124 + 12;
    if (v15 + (unint64_t)(HIDWORD(v115) * DWORD2(v115)) > v127 + v129)
    {
      if (!*(unsigned char *)(a1 + 392)) {
        goto LABEL_162;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v38 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v39 = DWORD2(v115);
        __int16 v93 = sub_100147F50(*(_DWORD *)(a1 + 48));
        int v100 = v39;
        sub_101307404();
        int v40 = v132[9];
        __int16 v41 = *(unsigned char **)v131;
        sub_1010449C8();
        unsigned int v42 = v131;
        if (v40 < 0) {
          unsigned int v42 = v41;
        }
        __int16 v43 = v134;
        if (v137 < 0) {
          __int16 v43 = *(unsigned char **)v134;
        }
        *(_DWORD *)std::string __p = 134284803;
        *(void *)&__p[4] = v15;
        *(_WORD *)&unsigned char __p[12] = 1025;
        *(_DWORD *)float v146 = v100;
        *(_WORD *)&v146[4] = 2049;
        *(void *)&v146[6] = v14;
        *(_WORD *)&v146[14] = 2081;
        *(void *)&v146[16] = v93;
        *(_WORD *)&v146[24] = 2080;
        *(void *)&v146[26] = v42;
        *(_WORD *)&v146[34] = 2081;
        v147[0] = v43;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v137 < 0) {
          operator delete(*(void **)v134);
        }
        if ((v132[9] & 0x80000000) != 0) {
          operator delete(*(void **)v131);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v101 = DWORD2(v115);
      int v94 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v44 = v137;
      std::string v45 = *(unsigned char **)v134;
      sub_1010449C8();
      int v46 = v134;
      if (v44 < 0) {
        int v46 = v45;
      }
      uint64_t v47 = v112;
      if (v113 < 0) {
        uint64_t v47 = (void **)v112[0];
      }
      *(_DWORD *)unint64_t v131 = 134284803;
      *(void *)&v131[4] = v15;
      *(_WORD *)&v131[12] = 1025;
      *(_DWORD *)__int16 v132 = v101;
      *(_WORD *)&v132[4] = 2049;
      *(void *)&v132[6] = v14;
      *(_WORD *)&v132[14] = 2081;
      *(void *)&v132[16] = v94;
      *(_WORD *)&v132[24] = 2080;
      *(void *)&v132[26] = v46;
      *(_WORD *)&v132[34] = 2081;
      *(void *)int v133 = v47;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      goto LABEL_147;
    }
    sub_1000F5BB0((uint64_t)v6, *v8);
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 368) = v8;
    *uint64_t v8 = 0;
    uint64_t v110 = 0;
    int v111 = 0;
    sub_1010445F8(&v110, a2);
    unsigned int v108 = DWORD2(v115);
    unsigned int v109 = 0;
    if (!v13)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      __int16 v58 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
      {
        uint64_t v59 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        uint64_t v60 = v146[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)unint64_t v131 = 136380931;
        *(void *)&v131[4] = v59;
        *(_WORD *)&v131[12] = 2081;
        *(void *)__int16 v132 = v60;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v131, 0x16u);
        if ((v146[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      double v61 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v132[9] >= 0) {
        double v62 = v131;
      }
      else {
        double v62 = *(unsigned char **)v131;
      }
      *(_DWORD *)int v134 = 136380931;
      *(void *)&v134[4] = v61;
      __int16 v135 = 2081;
      __int16 v136 = v62;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if ((v132[9] & 0x80000000) != 0) {
        operator delete(*(void **)v131);
      }
      goto LABEL_147;
    }
    BOOL v16 = sub_101308134(a1, v13, DWORD1(v120), SDWORD2(v120), &v110, &v109, &v108);
    if (v109 >= DWORD2(v115) || v108 >= DWORD2(v115)) {
      break;
    }
    if (!v16)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v63 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v97 = v109;
        unsigned int v104 = v108;
        sub_101044BC0();
        if (v132[9] >= 0) {
          int v64 = v131;
        }
        else {
          int v64 = *(unsigned char **)v131;
        }
        uint64_t v65 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        if (v137 >= 0) {
          BOOL v66 = v134;
        }
        else {
          BOOL v66 = *(unsigned char **)v134;
        }
        *(_DWORD *)std::string __p = 67175683;
        *(_DWORD *)&__p[4] = v97;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = v104;
        *(_WORD *)float v146 = 2081;
        *(void *)&v146[2] = v64;
        *(_WORD *)&v146[10] = 2081;
        *(void *)&v146[12] = v65;
        *(_WORD *)&v146[20] = 2081;
        *(void *)&v146[22] = v66;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v137 < 0) {
          operator delete(*(void **)v134);
        }
        if ((v132[9] & 0x80000000) != 0) {
          operator delete(*(void **)v131);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      unsigned int v85 = v109;
      unsigned int v98 = v108;
      sub_101044BC0();
      if (v137 >= 0) {
        uint64_t v86 = v134;
      }
      else {
        uint64_t v86 = *(unsigned char **)v134;
      }
      __int16 v87 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v113 >= 0) {
        double v88 = v112;
      }
      else {
        double v88 = (void **)v112[0];
      }
      *(_DWORD *)unint64_t v131 = 67175683;
      *(_DWORD *)&v131[4] = v85;
      *(_WORD *)&v131[8] = 1025;
      *(_DWORD *)&v131[10] = v98;
      *(_WORD *)__int16 v132 = 2081;
      *(void *)&v132[2] = v86;
      *(_WORD *)&v132[10] = 2081;
      *(void *)&v132[12] = v87;
      *(_WORD *)&v132[20] = 2081;
      *(void *)&v132[22] = v88;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v32);
LABEL_221:
      if (v32 != __p) {
        free(v32);
      }
      goto LABEL_162;
    }
    unsigned int v105 = v108 - v109 + 1;
    if (!sub_101307EB4(a1, v15 + HIDWORD(v115) * v109, v105, SHIDWORD(v115), a2, a3)) {
      goto LABEL_162;
    }
    sub_101307378(v6, (int *)a3, a3);
  }
  if (*(unsigned char *)(a1 + 392))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    unint64_t v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      unint64_t v19 = v131;
      sub_101044BC0();
      if (v132[9] < 0) {
        unint64_t v19 = *(unsigned char **)v131;
      }
      __int16 v99 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v20 = v137;
      unint64_t v21 = *(unsigned char **)v134;
      unsigned int v22 = v109;
      unsigned int v89 = v108;
      int v91 = DWORD2(v115);
      sub_1010449C8();
      BOOL v23 = v134;
      if (v20 < 0) {
        BOOL v23 = v21;
      }
      int8x8_t v24 = v112;
      if (v113 < 0) {
        int8x8_t v24 = (void **)v112[0];
      }
      *(_DWORD *)std::string __p = 136382211;
      *(void *)&__p[4] = v19;
      *(_WORD *)&unsigned char __p[12] = 2081;
      *(void *)float v146 = v99;
      *(_WORD *)&v146[8] = 2081;
      *(void *)&v146[10] = v23;
      *(_WORD *)&v146[18] = 1025;
      *(_DWORD *)&v146[20] = v22;
      *(_WORD *)&v146[24] = 1025;
      *(_DWORD *)&v146[26] = v89;
      *(_WORD *)&v146[30] = 1025;
      *(_DWORD *)&v146[32] = v91;
      LOWORD(v147[0]) = 2081;
      *(void *)((char *)v147 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      if ((v132[9] & 0x80000000) != 0) {
        operator delete(*(void **)v131);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v25 = v134;
      sub_101044BC0();
      if (v137 < 0) {
        uint64_t v25 = *(unsigned char **)v134;
      }
      int v92 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v26 = v113;
      uint64_t v27 = (void **)v112[0];
      unsigned int v28 = v108;
      unsigned int v29 = v109;
      int v90 = DWORD2(v115);
      sub_1010449C8();
      uint64_t v30 = v112;
      if (v26 < 0) {
        uint64_t v30 = v27;
      }
      int v31 = &v106;
      if (v107 < 0) {
        int v31 = v106;
      }
      *(_DWORD *)unint64_t v131 = 136382211;
      *(void *)&v131[4] = v25;
      *(_WORD *)&v131[12] = 2081;
      *(void *)__int16 v132 = v92;
      *(_WORD *)&v132[8] = 2081;
      *(void *)&v132[10] = v30;
      *(_WORD *)&v132[18] = 1025;
      *(_DWORD *)&v132[20] = v29;
      *(_WORD *)&v132[24] = 1025;
      *(_DWORD *)&v132[26] = v28;
      *(_WORD *)&v132[30] = 1025;
      *(_DWORD *)&v132[32] = v90;
      *(_WORD *)int v133 = 2081;
      *(void *)&v133[2] = v31;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v107 < 0) {
        operator delete(v106);
      }
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v32);
      goto LABEL_221;
    }
  }
LABEL_162:
  uint64_t v67 = sub_101307780((uint64_t)v6, a2);
  uint64_t v68 = (void **)v67;
  BOOL v10 = v8 != (void **)v67;
  if (v8 != (void **)v67)
  {
    uint64_t v69 = *(void *)(v67 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v67 + 31);
    *a3 = v69;
  }
  if (v129) {
    sub_1007FCFE0(a1, (uint64_t)v125);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  int v70 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1010449C8();
    int v71 = v132[9];
    double v72 = *(unsigned char **)v131;
    sub_1010449C8();
    __int16 v73 = v131;
    if (v71 < 0) {
      __int16 v73 = v72;
    }
    if (v137 >= 0) {
      long long v74 = v134;
    }
    else {
      long long v74 = *(unsigned char **)v134;
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v68;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v105;
    *(_WORD *)float v146 = 2080;
    *(void *)&v146[2] = v73;
    *(_WORD *)&v146[10] = 2080;
    *(void *)&v146[12] = v74;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v137 < 0) {
      operator delete(*(void **)v134);
    }
    if ((v132[9] & 0x80000000) != 0) {
      operator delete(*(void **)v131);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    BOOL v79 = v8 != v68;
    sub_1010449C8();
    int v80 = v137;
    char v81 = *(unsigned char **)v134;
    sub_1010449C8();
    uint64_t v82 = v134;
    if (v80 < 0) {
      uint64_t v82 = v81;
    }
    if (v113 >= 0) {
      uint64_t v83 = v112;
    }
    else {
      uint64_t v83 = (void **)v112[0];
    }
    *(_DWORD *)unint64_t v131 = 67109890;
    *(_DWORD *)&v131[4] = v79;
    *(_WORD *)&v131[8] = 1024;
    *(_DWORD *)&v131[10] = v105;
    *(_WORD *)__int16 v132 = 2080;
    *(void *)&v132[2] = v82;
    *(_WORD *)&v132[10] = 2080;
    *(void *)&v132[12] = v83;
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    if (v113 < 0) {
      operator delete(v112[0]);
    }
    if (v137 < 0) {
      operator delete(*(void **)v134);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v84);
    if (v84 != __p) {
      free(v84);
    }
  }
LABEL_179:
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  return v10;
}

void sub_10130246C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1013025B4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  *(void *)(a1 + 334) = *(uint64_t *)((char *)a2 + 6);
  *(void *)(a1 + 328) = v6;
  char v37 = 0;
  uint64_t v39 = nullsub_41(0, a2);
  char v36 = "search";
  char v38 = 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1010449C8();
    uint64_t v8 = SHIBYTE(v48) >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v48) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_1010449C8();
    if (SHIBYTE(v42) >= 0) {
      BOOL v23 = buf;
    }
    else {
      BOOL v23 = *(unsigned char **)buf;
    }
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    int8x8_t v24 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v24);
    if (v24 != __p) {
      free(v24);
    }
  }
  sub_101048050(a1, &v45);
  uint64_t v9 = (const char **)(a1 + 8);
  BOOL v10 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    BOOL v10 = *v9;
  }
  if (sub_1000A569C(v10))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    clock_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      clock_t v12 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        clock_t v12 = *v9;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v30 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v30 = *v9;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      int v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v31);
      if (v31 != __p) {
        free(v31);
      }
    }
    std::string::operator=(&v45, (const std::string *)(a1 + 8));
  }
  sub_101049A48((void *)a1, (uint64_t)&v45, (uint64_t)&v36);
  uint64_t v13 = sub_101307780(a1 + 368, (int *)a2);
  uint64_t v14 = v13;
  uint64_t v15 = a1 + 376;
  if (a1 + 376 != v13)
  {
    uint64_t v16 = *(void *)(v13 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v13 + 31);
    *a3 = v16;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v17 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1010449C8();
    int v18 = SHIBYTE(v42);
    unint64_t v19 = *(unsigned char **)buf;
    sub_1010449C8();
    int v20 = buf;
    if (v18 < 0) {
      int v20 = v19;
    }
    if (v35 >= 0) {
      unint64_t v21 = v34;
    }
    else {
      unint64_t v21 = (void **)v34[0];
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v15 != v14;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    __int16 v47 = 2080;
    __int16 v48 = v20;
    __int16 v49 = 2080;
    int v50 = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_1010449C8();
    int v25 = v35;
    int v26 = (void **)v34[0];
    sub_1010449C8();
    uint64_t v27 = v34;
    if (v25 < 0) {
      uint64_t v27 = v26;
    }
    if (v33 >= 0) {
      unsigned int v28 = &v32;
    }
    else {
      unsigned int v28 = v32;
    }
    *(_DWORD *)long long buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v15 != v14;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    __int16 v41 = 2080;
    unsigned int v42 = v27;
    __int16 v43 = 2080;
    int v44 = v28;
    unsigned int v29 = (char *)_os_log_send_and_compose_impl();
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v29);
    if (v29 != __p) {
      free(v29);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return v15 != v14;
}

void sub_101302C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101302CF4(uint64_t a1)
{
  sub_10130659C(a1);

  operator delete();
}

uint64_t sub_101302D2C(uint64_t a1, std::string::value_type *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_101047E00(a1, a2);
  sub_10104A8A0((uint64_t *)a1, "", a2, *(_DWORD *)(a1 + 48), 0, Current);
  sub_1013082A8((uint64_t *)&v42, a1 + 368);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  long long v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218242;
    *(void *)double v53 = v44;
    *(_WORD *)&v53[8] = 2080;
    *(void *)&v53[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_DWORD *)std::string __p = 134218242;
    *(void *)&__p[4] = v44;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)&unsigned char __p[14] = a2;
    char v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  uint64_t v6 = a1 + 376;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  uint64_t v7 = v42;
  if (v42 != &v43)
  {
    uint64_t v8 = 0;
    while (1)
    {
      *(void *)__int16 v41 = *(void **)((char *)v7 + 25);
      *(void *)&v41[6] = *(void **)((char *)v7 + 31);
      memset(v40, 0, 14);
      uint64_t v38 = 0;
      memset(v39, 0, 14);
      uint64_t v37 = 0;
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 368) = v6;
      clock_t v9 = clock();
      int v10 = (*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)a1 + 192))(a1, v41, v40);
      clock_t v11 = clock();
      sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      *(void *)(a1 + 368) = v6;
      clock_t v12 = clock();
      int v13 = (*(uint64_t (**)(uint64_t, unsigned char *, _WORD *))(*(void *)a1 + 184))(a1, v41, v39);
      clock_t v14 = clock();
      printf("tilestool: mmap, %lu, file, %lu\n", v14 - v12, v11 - v9);
      if (v10 != v13) {
        break;
      }
      int v15 = (*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)a1 + 176))(a1, v41, v40);
      if (v15) {
        sub_10104C204(a1, LOWORD(v40[1]), WORD1(v40[1]), (double *)&v38, (double *)&v37);
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v16 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = v44;
        uint64_t v18 = v37;
        uint64_t v19 = v38;
        sub_101044608();
        int v20 = __p;
        if (__p[23] < 0) {
          int v20 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 134219266;
        *(void *)double v53 = v8;
        *(_WORD *)&v53[8] = 2048;
        *(void *)&v53[10] = v17;
        *(_WORD *)&v53[18] = 1024;
        *(_DWORD *)&v53[20] = v15;
        __int16 v54 = 2048;
        uint64_t v55 = v19;
        __int16 v56 = 2048;
        uint64_t v57 = v18;
        __int16 v58 = 2080;
        uint64_t v59 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s", buf, 0x3Au);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231FC70);
        }
        uint64_t v24 = v44;
        uint64_t v25 = v37;
        uint64_t v26 = v38;
        sub_101044608();
        uint64_t v27 = &v35;
        if (v36 < 0) {
          uint64_t v27 = v35;
        }
        *(_DWORD *)std::string __p = 134219266;
        *(void *)&__p[4] = v8;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&unsigned char __p[14] = v24;
        *(_WORD *)&unsigned char __p[22] = 1024;
        *(_DWORD *)&unsigned char __p[24] = v15;
        __int16 v46 = 2048;
        uint64_t v47 = v26;
        __int16 v48 = 2048;
        uint64_t v49 = v25;
        __int16 v50 = 2080;
        uint64_t v51 = v27;
        unsigned int v28 = (char *)_os_log_send_and_compose_impl();
        if (v36 < 0) {
          operator delete(v35);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      if (!v15)
      {
        int v31 = 759;
        double v32 = "isFound";
LABEL_44:
        __assert_rtn("TEST_testBinarySearch", "CLKeyLatLonTileTemplate.h", v31, v32);
      }
      unint64_t v21 = v7[1];
      if (v21)
      {
        do
        {
          unsigned int v22 = (void **)v21;
          unint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unsigned int v22 = (void **)v7[2];
          BOOL v23 = *v22 == v7;
          uint64_t v7 = v22;
        }
        while (!v23);
      }
      ++v8;
      uint64_t v7 = v22;
      if (v22 == &v43) {
        goto LABEL_36;
      }
    }
    int v31 = 742;
    double v32 = "isFound == isFoundMmap";
    goto LABEL_44;
  }
  uint64_t v8 = 0;
LABEL_36:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  unsigned int v29 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)double v53 = 1;
    *(_WORD *)&v53[4] = 2048;
    *(void *)&v53[6] = v8;
    *(_WORD *)&v53[14] = 2048;
    *(void *)&v53[16] = v44;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: result: tilestool: pass, %d, tests, %lu, %lu", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(void *)std::string __p = 0x104000300;
    *(_WORD *)&__p[8] = 2048;
    *(void *)&__p[10] = v8;
    *(_WORD *)&__p[18] = 2048;
    *(void *)&unsigned char __p[20] = v44;
    __int16 v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  sub_1000F5BB0((uint64_t)&v42, v43);
  return 1;
}

void sub_101303530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27)
{
}

void sub_101303584(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1007FE8A4(a1, (uint64_t)a2, a3);
  uint64_t v82 = 0;
  int v10 = *(unsigned __int16 *)(a3 + 2);
  if (v10 != 7)
  {
    if (v10 == 6)
    {
      *(void *)uint64_t v83 = 0x200006ABBALL;
      memset(&v83[8], 0, 32);
      LODWORD(v84) = 0;
      sub_101044D88(a4, (uint64_t)v83);
      clock_t v11 = (void *)(a1 + 344);
      *(void *)(a1 + 352) = *(void *)(a1 + 344);
      sub_1013069A4((char **)(a1 + 344), *(unsigned int *)&v83[12]);
      clock_t v12 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&v83[12], *(int *)&v83[16]);
      if (v12)
      {
        v79[0] = 0;
        v79[1].i32[0] = 0;
        if (*(_DWORD *)&v83[12])
        {
          unint64_t v13 = 0;
          do
          {
            sub_101044414((int8x8_t *)&v12[v13 * *(unsigned int *)&v83[16]], v79);
            int v15 = *(int8x8_t **)(a1 + 352);
            unint64_t v14 = *(void *)(a1 + 360);
            if ((unint64_t)v15 >= v14)
            {
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *v11) >> 2);
              unint64_t v19 = v18 + 1;
              if (v18 + 1 > 0x1555555555555555) {
                sub_1001D7FD4();
              }
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v11) >> 2);
              if (2 * v20 > v19) {
                unint64_t v19 = 2 * v20;
              }
              if (v20 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v21 = 0x1555555555555555;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21) {
                unsigned int v22 = (char *)sub_10080FC80(a1 + 360, v21);
              }
              else {
                unsigned int v22 = 0;
              }
              BOOL v23 = (int8x8_t *)&v22[12 * v18];
              int8x8_t v24 = v79[0];
              v23[1].i32[0] = v79[1].i32[0];
              int8x8_t *v23 = v24;
              uint64_t v26 = *(_DWORD **)(a1 + 344);
              uint64_t v25 = *(_DWORD **)(a1 + 352);
              uint64_t v27 = v23;
              if (v25 != v26)
              {
                do
                {
                  int8x8_t v28 = *(int8x8_t *)(v25 - 3);
                  v25 -= 3;
                  __int32 v29 = v25[2];
                  *(int8x8_t *)((char *)v27 - 12) = v28;
                  uint64_t v27 = (int8x8_t *)((char *)v27 - 12);
                  v27[1].i32[0] = v29;
                }
                while (v25 != v26);
                uint64_t v25 = (_DWORD *)*v11;
              }
              uint64_t v17 = (char *)&v23[1] + 4;
              *(void *)(a1 + 344) = v27;
              *(void *)(a1 + 352) = (char *)v23 + 12;
              *(void *)(a1 + 360) = &v22[12 * v21];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              int8x8_t v16 = v79[0];
              v15[1].i32[0] = v79[1].i32[0];
              *int v15 = v16;
              uint64_t v17 = (char *)&v15[1] + 4;
            }
            *(void *)(a1 + 352) = v17;
            if (!*(unsigned char *)(a5 + 9))
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_10231FC70);
              }
              uint64_t v30 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                int v31 = *(_DWORD *)&v83[12];
                sub_101044800();
                double v32 = __p;
                if (SBYTE3(v96) < 0) {
                  double v32 = *(unsigned char **)__p;
                }
                *(_DWORD *)long long buf = 134218498;
                *(void *)int v100 = v13;
                *(_WORD *)&v100[8] = 1024;
                *(_DWORD *)int v101 = v31;
                *(_WORD *)&v101[4] = 2080;
                *(void *)&v101[6] = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: index entry, %3lu, %3u, %s", buf, 0x1Cu);
                if (SBYTE3(v96) < 0) {
                  operator delete(*(void **)__p);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_10231FC70);
                }
                int v33 = *(_DWORD *)&v83[12];
                sub_101044800();
                __int16 v34 = v80;
                if (v81 < 0) {
                  __int16 v34 = (void **)v80[0];
                }
                *(_DWORD *)std::string __p = 134218498;
                *(void *)&__p[4] = v13;
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&unsigned char __p[14] = v33;
                *(_WORD *)&__p[18] = 2080;
                uint64_t v96 = v34;
                char v35 = (char *)_os_log_send_and_compose_impl();
                if (v81 < 0) {
                  operator delete(v80[0]);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v35);
                if (v35 != (char *)buf) {
                  free(v35);
                }
              }
            }
            ++v13;
          }
          while (v13 < *(unsigned int *)&v83[12]);
        }
      }
      goto LABEL_82;
    }
    unsigned int v42 = 0;
    goto LABEL_57;
  }
  *(_DWORD *)std::string __p = 502714;
  *(_OWORD *)&__p[4] = xmmword_101DB37A0;
  uint64_t v96 = 0;
  uint64_t v98 = 0;
  uint64_t v97 = 0;
  sub_101044D88(a4, (uint64_t)__p);
  char v36 = (uint64_t **)(a1 + 368);
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  if (!*(unsigned char *)(a5 + 9))
  {
    memset(v79, 0, 14);
    __int16 v43 = (char *)sub_100800268(a1, a2, a3, 0, *(int *)&__p[12], *(int *)&__p[16]);
    clock_t v12 = v43;
    if (!v43)
    {
LABEL_82:
      unsigned int v42 = 0;
      goto LABEL_83;
    }
    if (*(_DWORD *)&__p[12])
    {
      unint64_t v44 = 0;
      long long v76 = v43;
      do
      {
        sub_1010441E4((int8x8_t *)&v12[v44 * *(unsigned int *)&__p[16]], v79);
        sub_101307378(v36, (int *)v79, (uint64_t *)v79);
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        sub_10104C204(a1, v79[1].u16[0], v79[1].u16[1], (double *)&v78, (double *)&v77);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10231FC70);
        }
        std::string v45 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v46 = *(_DWORD *)&__p[12];
          uint64_t v47 = *(void *)(a1 + 384);
          sub_101044608();
          __int16 v48 = v36;
          if (v83[23] >= 0) {
            uint64_t v49 = v83;
          }
          else {
            uint64_t v49 = *(unsigned char **)v83;
          }
          uint64_t v50 = v77;
          uint64_t v51 = v78;
          double v52 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v53 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v54 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)long long buf = 134220290;
          *(void *)int v100 = v44;
          *(_WORD *)&v100[8] = 1024;
          *(_DWORD *)int v101 = v46;
          *(_WORD *)&v101[4] = 2048;
          *(void *)&v101[6] = v47;
          __int16 v102 = 2080;
          int v103 = v49;
          __int16 v104 = 2048;
          uint64_t v105 = v51;
          __int16 v106 = 2048;
          uint64_t v107 = v50;
          __int16 v108 = 2048;
          double v109 = v52;
          __int16 v110 = 2048;
          double v111 = v53;
          __int16 v112 = 1024;
          int v113 = v54;
          __int16 v114 = 1024;
          int v115 = v55;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u", buf, 0x5Au);
          if ((v83[23] & 0x80000000) != 0) {
            operator delete(*(void **)v83);
          }
          char v36 = v48;
          clock_t v12 = v76;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v56 = *(_DWORD *)&__p[12];
          uint64_t v57 = *(void *)(a1 + 384);
          sub_101044608();
          long long v75 = v36;
          if (v81 >= 0) {
            __int16 v58 = v80;
          }
          else {
            __int16 v58 = (void **)v80[0];
          }
          uint64_t v59 = v77;
          uint64_t v60 = v78;
          double v61 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
          double v62 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
          int v63 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
          int v64 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
          *(_DWORD *)uint64_t v83 = 134220290;
          *(void *)&v83[4] = v44;
          *(_WORD *)&v83[12] = 1024;
          *(_DWORD *)&v83[14] = v56;
          *(_WORD *)&v83[18] = 2048;
          *(void *)&v83[20] = v57;
          *(_WORD *)&v83[28] = 2080;
          *(void *)&v83[30] = v58;
          *(_WORD *)&v83[38] = 2048;
          uint64_t v84 = v60;
          __int16 v85 = 2048;
          uint64_t v86 = v59;
          __int16 v87 = 2048;
          double v88 = v61;
          __int16 v89 = 2048;
          double v90 = v62;
          __int16 v91 = 1024;
          int v92 = v63;
          __int16 v93 = 1024;
          int v94 = v64;
          uint64_t v65 = (char *)_os_log_send_and_compose_impl();
          if (v81 < 0) {
            operator delete(v80[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v65);
          char v36 = v75;
          if (v65 != (char *)buf) {
            free(v65);
          }
        }
        ++v44;
      }
      while (v44 < *(unsigned int *)&__p[12]);
    }
    goto LABEL_101;
  }
  BOOL v37 = sub_101308300(a1, (int **)(a1 + 344), (_DWORD *)&v82 + 1, &v82);
  int v39 = v82;
  int v38 = HIDWORD(v82);
  unsigned int v40 = v82 - HIDWORD(v82) + 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  __int16 v41 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)int v100 = v40;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v38;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "TILE: searched, numOfEntries, %u, offsetEntries, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_DWORD *)uint64_t v83 = 67109376;
    *(_DWORD *)&v83[4] = v40;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&unsigned char v83[10] = v38;
    __int16 v73 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v73);
    if (v73 != (char *)buf) {
      free(v73);
    }
  }
  if ((v39 + 1) >= *(_DWORD *)&__p[12]) {
    unsigned int v42 = *(_DWORD *)&__p[12] - v38;
  }
  else {
    unsigned int v42 = v40;
  }
  if (!v42)
  {
LABEL_57:
    clock_t v12 = 0;
    goto LABEL_83;
  }
  if (v42 + v38 > *(_DWORD *)&__p[12]) {
    sub_101AAE45C();
  }
  clock_t v12 = (char *)sub_100800268(a1, a2, a3, v38, v42, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)&v83[6] = 0;
  *(void *)uint64_t v83 = 0;
  if (!v37)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    uint64_t v69 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      LOWORD(v80[0]) = 0;
      long long v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v74);
      if (v74 != (char *)buf) {
        free(v74);
      }
    }
LABEL_101:
    unsigned int v42 = 0;
    int v70 = 1;
    goto LABEL_102;
  }
  if (sub_101308960(a1, (uint64_t)v12, v42, *(int *)&__p[16], (_DWORD *)(a1 + 328), v83))
  {
    sub_101307378((uint64_t **)(a1 + 368), (int *)v83, (uint64_t *)v83);
LABEL_83:
    BOOL v66 = 1;
    goto LABEL_84;
  }
  int v70 = 0;
LABEL_102:
  BOOL v66 = v70 != 0;
LABEL_84:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v67 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101044608();
    uint64_t v68 = v83[23] >= 0 ? v83 : *(unsigned char **)v83;
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)int v100 = v66;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)&v100[6] = v42;
    *(_WORD *)int v101 = 2080;
    *(void *)&v101[2] = v68;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s", buf, 0x18u);
    if ((v83[23] & 0x80000000) != 0) {
      operator delete(*(void **)v83);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_101044608();
    if (SBYTE3(v96) >= 0) {
      int v71 = __p;
    }
    else {
      int v71 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v83 = 67109634;
    *(_DWORD *)&v83[4] = v66;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&unsigned char v83[10] = v42;
    *(_WORD *)&v83[14] = 2080;
    *(void *)&v83[16] = v71;
    double v72 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE3(v96) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v72);
    if (v72 != (char *)buf) {
      free(v72);
    }
  }
  if (v12) {
    free(v12);
  }
}

void sub_101304430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101304468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t sub_10130448C(uint64_t a1, int *a2, void *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 368);
  uint64_t v7 = sub_101307780(a1 + 368, a2);
  uint64_t v8 = (void **)v7;
  if (a1 + 376 != v7)
  {
    uint64_t v9 = *(void *)(v7 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v7 + 31);
    *a3 = v9;
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  clock_t v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101044608();
    clock_t v12 = v146[9] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE:  getLocationByKey_mmap, key, %s", buf, 0xCu);
    if ((v146[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_101044608();
    if ((SBYTE7(v140) & 0x80u) == 0) {
      long long v76 = buf;
    }
    else {
      long long v76 = *(unsigned char **)buf;
    }
    *(_DWORD *)unint64_t v131 = 136315138;
    *(void *)&v131[4] = v76;
    uint64_t v77 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE7(v140) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v77);
    if (v77 != __p) {
      free(v77);
    }
  }
  *(void *)(a1 + 352) = *(void *)(a1 + 344);
  sub_100134750(v125, "");
  uint64_t v127 = 0;
  int v128 = -1;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  if ((sub_1007FCEFC(a1, (uint64_t)v125) & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    uint64_t v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TILE: getLocationByKey_mmap, failed to mmap, #CloneMe", __p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      *(_WORD *)long long buf = 0;
      uint64_t v78 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v78);
      if (v78 != __p) {
        free(v78);
      }
    }
    BOOL v10 = 0;
    goto LABEL_179;
  }
  unsigned int v105 = 0;
  unint64_t v13 = 0;
  uint64_t v124 = 0;
  int v122 = 0;
  int v123 = 43962;
  uint64_t v119 = 0x200006ABBALL;
  long long v120 = 0u;
  long long v121 = 0u;
  *(void *)&uint8_t buf[4] = 184;
  *(_DWORD *)long long buf = 371642;
  int v139 = 381;
  long long v140 = 0u;
  long long v141 = 0u;
  uint64_t v143 = 0;
  uint64_t v142 = 0;
  int v144 = 0;
  int v114 = 502714;
  long long v115 = xmmword_101DB37A0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v14 = v130;
      if (!sub_1007FD08C(a1, v125, &v123)) {
        goto LABEL_162;
      }
      if (HIWORD(v123) == 7) {
        break;
      }
      if (HIWORD(v123) == 6)
      {
        sub_101044D88(v129 + v14, (uint64_t)&v119);
        unint64_t v13 = (int8x8_t *)(v14 + v129 + v124 + 12);
        if ((unint64_t)v13 + (DWORD2(v120) * DWORD1(v120)) > v127 + v129)
        {
          if (!*(unsigned char *)(a1 + 392)) {
            goto LABEL_162;
          }
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          __int16 v48 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            int v49 = DWORD1(v120);
            __int16 v95 = sub_100147F50(*(_DWORD *)(a1 + 48));
            int v102 = v49;
            sub_101307404();
            int v50 = v132[9];
            uint64_t v51 = *(unsigned char **)v131;
            sub_101044608();
            double v52 = v131;
            if (v50 < 0) {
              double v52 = v51;
            }
            double v53 = v134;
            if (v137 < 0) {
              double v53 = *(unsigned char **)v134;
            }
            *(_DWORD *)std::string __p = 134284803;
            *(void *)&__p[4] = v13;
            *(_WORD *)&unsigned char __p[12] = 1025;
            *(_DWORD *)float v146 = v102;
            *(_WORD *)&v146[4] = 2049;
            *(void *)&v146[6] = v14;
            *(_WORD *)&v146[14] = 2081;
            *(void *)&v146[16] = v95;
            *(_WORD *)&v146[24] = 2081;
            *(void *)&v146[26] = v52;
            *(_WORD *)&v146[34] = 2081;
            v147[0] = v53;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "TILE: pIndexEntries passes valid mmapped region, pIndexEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{private}s, %{private}s", __p, 0x3Au);
            if (v137 < 0) {
              operator delete(*(void **)v134);
            }
            if ((v132[9] & 0x80000000) != 0) {
              operator delete(*(void **)v131);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v103 = DWORD1(v120);
          uint64_t v96 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          int v54 = v137;
          int v55 = *(unsigned char **)v134;
          sub_101044608();
          int v56 = v134;
          if (v54 < 0) {
            int v56 = v55;
          }
          uint64_t v57 = v112;
          if (v113 < 0) {
            uint64_t v57 = (void **)v112[0];
          }
          *(_DWORD *)unint64_t v131 = 134284803;
          *(void *)&v131[4] = v13;
          *(_WORD *)&v131[12] = 1025;
          *(_DWORD *)__int16 v132 = v103;
          *(_WORD *)&v132[4] = 2049;
          *(void *)&v132[6] = v14;
          *(_WORD *)&v132[14] = 2081;
          *(void *)&v132[16] = v96;
          *(_WORD *)&v132[24] = 2081;
          *(void *)&v132[26] = v56;
          *(_WORD *)&v132[34] = 2081;
          *(void *)int v133 = v57;
          double v32 = (char *)_os_log_send_and_compose_impl();
          if (v113 < 0) {
            operator delete(v112[0]);
          }
          if (v137 < 0) {
            operator delete(*(void **)v134);
          }
          goto LABEL_147;
        }
      }
      else
      {
        if (HIWORD(v123) != 5)
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          int v33 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
          {
            __int16 v34 = sub_100147F50(*(_DWORD *)(a1 + 48));
            sub_101307404();
            char v35 = v132[9] >= 0 ? v131 : *(unsigned char **)v131;
            *(_DWORD *)std::string __p = 134218498;
            *(void *)&__p[4] = v14;
            *(_WORD *)&unsigned char __p[12] = 2080;
            *(void *)float v146 = v34;
            *(_WORD *)&v146[8] = 2080;
            *(void *)&v146[10] = v35;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "TILE: unregconized sectionId, %lld, %s, %s", __p, 0x20u);
            if ((v132[9] & 0x80000000) != 0) {
              operator delete(*(void **)v131);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_162;
          }
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10231FC70);
          }
          char v36 = sub_100147F50(*(_DWORD *)(a1 + 48));
          sub_101307404();
          if (v137 >= 0) {
            BOOL v37 = v134;
          }
          else {
            BOOL v37 = *(unsigned char **)v134;
          }
          *(_DWORD *)unint64_t v131 = 134218498;
          *(void *)&v131[4] = v14;
          *(_WORD *)&v131[12] = 2080;
          *(void *)__int16 v132 = v36;
          *(_WORD *)&v132[8] = 2080;
          *(void *)&v132[10] = v37;
          double v32 = (char *)_os_log_send_and_compose_impl();
          if (v137 < 0) {
            operator delete(*(void **)v134);
          }
LABEL_147:
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v32);
          goto LABEL_221;
        }
        sub_101043CA4(v129 + v14, (uint64_t)buf);
      }
    }
    sub_101044D88(v129 + v14, (uint64_t)&v114);
    uint64_t v15 = v14 + v129 + v124 + 12;
    if (v15 + (unint64_t)(HIDWORD(v115) * DWORD2(v115)) > v127 + v129)
    {
      if (!*(unsigned char *)(a1 + 392)) {
        goto LABEL_162;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v38 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v39 = DWORD2(v115);
        __int16 v93 = sub_100147F50(*(_DWORD *)(a1 + 48));
        int v100 = v39;
        sub_101307404();
        int v40 = v132[9];
        __int16 v41 = *(unsigned char **)v131;
        sub_101044608();
        unsigned int v42 = v131;
        if (v40 < 0) {
          unsigned int v42 = v41;
        }
        __int16 v43 = v134;
        if (v137 < 0) {
          __int16 v43 = *(unsigned char **)v134;
        }
        *(_DWORD *)std::string __p = 134284803;
        *(void *)&__p[4] = v15;
        *(_WORD *)&unsigned char __p[12] = 1025;
        *(_DWORD *)float v146 = v100;
        *(_WORD *)&v146[4] = 2049;
        *(void *)&v146[6] = v14;
        *(_WORD *)&v146[14] = 2081;
        *(void *)&v146[16] = v93;
        *(_WORD *)&v146[24] = 2080;
        *(void *)&v146[26] = v42;
        *(_WORD *)&v146[34] = 2081;
        v147[0] = v43;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "TILE: pDataEntries passes valid mmapped region, pDataEntries:%{private}lu, numOfEntries:%{private}u, atOffset:%{private}lld, %{private}s, %{privat}s, %{private}s", __p, 0x3Au);
        if (v137 < 0) {
          operator delete(*(void **)v134);
        }
        if ((v132[9] & 0x80000000) != 0) {
          operator delete(*(void **)v131);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v101 = DWORD2(v115);
      int v94 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v44 = v137;
      std::string v45 = *(unsigned char **)v134;
      sub_101044608();
      int v46 = v134;
      if (v44 < 0) {
        int v46 = v45;
      }
      uint64_t v47 = v112;
      if (v113 < 0) {
        uint64_t v47 = (void **)v112[0];
      }
      *(_DWORD *)unint64_t v131 = 134284803;
      *(void *)&v131[4] = v15;
      *(_WORD *)&v131[12] = 1025;
      *(_DWORD *)__int16 v132 = v101;
      *(_WORD *)&v132[4] = 2049;
      *(void *)&v132[6] = v14;
      *(_WORD *)&v132[14] = 2081;
      *(void *)&v132[16] = v94;
      *(_WORD *)&v132[24] = 2080;
      *(void *)&v132[26] = v46;
      *(_WORD *)&v132[34] = 2081;
      *(void *)int v133 = v47;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      goto LABEL_147;
    }
    sub_1000F5BB0((uint64_t)v6, *v8);
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 368) = v8;
    *uint64_t v8 = 0;
    uint64_t v110 = 0;
    int v111 = 0;
    sub_1010445F8(&v110, a2);
    unsigned int v108 = DWORD2(v115);
    unsigned int v109 = 0;
    if (!v13)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      __int16 v58 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
      {
        uint64_t v59 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        uint64_t v60 = v146[9] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)unint64_t v131 = 136380931;
        *(void *)&v131[4] = v59;
        *(_WORD *)&v131[12] = 2081;
        *(void *)__int16 v132 = v60;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "TILE: no index section before entries section, %{private}s, %{private}s", v131, 0x16u);
        if ((v146[9] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      double v61 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v132[9] >= 0) {
        double v62 = v131;
      }
      else {
        double v62 = *(unsigned char **)v131;
      }
      *(_DWORD *)int v134 = 136380931;
      *(void *)&v134[4] = v61;
      __int16 v135 = 2081;
      __int16 v136 = v62;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if ((v132[9] & 0x80000000) != 0) {
        operator delete(*(void **)v131);
      }
      goto LABEL_147;
    }
    BOOL v16 = sub_101308134(a1, v13, DWORD1(v120), SDWORD2(v120), &v110, &v109, &v108);
    if (v109 >= DWORD2(v115) || v108 >= DWORD2(v115)) {
      break;
    }
    if (!v16)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      int v63 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v97 = v109;
        unsigned int v104 = v108;
        sub_101044800();
        if (v132[9] >= 0) {
          int v64 = v131;
        }
        else {
          int v64 = *(unsigned char **)v131;
        }
        uint64_t v65 = sub_100147F50(*(_DWORD *)(a1 + 48));
        sub_101307404();
        if (v137 >= 0) {
          BOOL v66 = v134;
        }
        else {
          BOOL v66 = *(unsigned char **)v134;
        }
        *(_DWORD *)std::string __p = 67175683;
        *(_DWORD *)&__p[4] = v97;
        *(_WORD *)&__p[8] = 1025;
        *(_DWORD *)&__p[10] = v104;
        *(_WORD *)float v146 = 2081;
        *(void *)&v146[2] = v64;
        *(_WORD *)&v146[10] = 2081;
        *(void *)&v146[12] = v65;
        *(_WORD *)&v146[20] = 2081;
        *(void *)&v146[22] = v66;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "TILE: not found in index, a, %{private}u, b, %{private}u, %{private}s, %{private}s, %{private}s", __p, 0x2Cu);
        if (v137 < 0) {
          operator delete(*(void **)v134);
        }
        if ((v132[9] & 0x80000000) != 0) {
          operator delete(*(void **)v131);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_162;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      unsigned int v85 = v109;
      unsigned int v98 = v108;
      sub_101044800();
      if (v137 >= 0) {
        uint64_t v86 = v134;
      }
      else {
        uint64_t v86 = *(unsigned char **)v134;
      }
      __int16 v87 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      if (v113 >= 0) {
        double v88 = v112;
      }
      else {
        double v88 = (void **)v112[0];
      }
      *(_DWORD *)unint64_t v131 = 67175683;
      *(_DWORD *)&v131[4] = v85;
      *(_WORD *)&v131[8] = 1025;
      *(_DWORD *)&v131[10] = v98;
      *(_WORD *)__int16 v132 = 2081;
      *(void *)&v132[2] = v86;
      *(_WORD *)&v132[10] = 2081;
      *(void *)&v132[12] = v87;
      *(_WORD *)&v132[20] = 2081;
      *(void *)&v132[22] = v88;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v32);
LABEL_221:
      if (v32 != __p) {
        free(v32);
      }
      goto LABEL_162;
    }
    unsigned int v105 = v108 - v109 + 1;
    if (!sub_101308960(a1, v15 + HIDWORD(v115) * v109, v105, SHIDWORD(v115), a2, a3)) {
      goto LABEL_162;
    }
    sub_101307378(v6, (int *)a3, a3);
  }
  if (*(unsigned char *)(a1 + 392))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    unint64_t v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      unint64_t v19 = v131;
      sub_101044800();
      if (v132[9] < 0) {
        unint64_t v19 = *(unsigned char **)v131;
      }
      __int16 v99 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v20 = v137;
      unint64_t v21 = *(unsigned char **)v134;
      unsigned int v22 = v109;
      unsigned int v89 = v108;
      int v91 = DWORD2(v115);
      sub_101044608();
      BOOL v23 = v134;
      if (v20 < 0) {
        BOOL v23 = v21;
      }
      int8x8_t v24 = v112;
      if (v113 < 0) {
        int8x8_t v24 = (void **)v112[0];
      }
      *(_DWORD *)std::string __p = 136382211;
      *(void *)&__p[4] = v19;
      *(_WORD *)&unsigned char __p[12] = 2081;
      *(void *)float v146 = v99;
      *(_WORD *)&v146[8] = 2081;
      *(void *)&v146[10] = v23;
      *(_WORD *)&v146[18] = 1025;
      *(_DWORD *)&v146[20] = v22;
      *(_WORD *)&v146[24] = 1025;
      *(_DWORD *)&v146[26] = v89;
      *(_WORD *)&v146[30] = 1025;
      *(_DWORD *)&v146[32] = v91;
      LOWORD(v147[0]) = 2081;
      *(void *)((char *)v147 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "TILE: invalid binary search %{private}s in %{private}s, %{private}s, a:%{private}u, b:%{private}u, max:%{private}u, %{private}s", __p, 0x3Cu);
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      if ((v132[9] & 0x80000000) != 0) {
        operator delete(*(void **)v131);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v25 = v134;
      sub_101044800();
      if (v137 < 0) {
        uint64_t v25 = *(unsigned char **)v134;
      }
      int v92 = sub_100147F50(*(_DWORD *)(a1 + 48));
      sub_101307404();
      int v26 = v113;
      uint64_t v27 = (void **)v112[0];
      unsigned int v28 = v108;
      unsigned int v29 = v109;
      int v90 = DWORD2(v115);
      sub_101044608();
      uint64_t v30 = v112;
      if (v26 < 0) {
        uint64_t v30 = v27;
      }
      int v31 = &v106;
      if (v107 < 0) {
        int v31 = v106;
      }
      *(_DWORD *)unint64_t v131 = 136382211;
      *(void *)&v131[4] = v25;
      *(_WORD *)&v131[12] = 2081;
      *(void *)__int16 v132 = v92;
      *(_WORD *)&v132[8] = 2081;
      *(void *)&v132[10] = v30;
      *(_WORD *)&v132[18] = 1025;
      *(_DWORD *)&v132[20] = v29;
      *(_WORD *)&v132[24] = 1025;
      *(_DWORD *)&v132[26] = v28;
      *(_WORD *)&v132[30] = 1025;
      *(_DWORD *)&v132[32] = v90;
      *(_WORD *)int v133 = 2081;
      *(void *)&v133[2] = v31;
      double v32 = (char *)_os_log_send_and_compose_impl();
      if (v107 < 0) {
        operator delete(v106);
      }
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (v137 < 0) {
        operator delete(*(void **)v134);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v32);
      goto LABEL_221;
    }
  }
LABEL_162:
  uint64_t v67 = sub_101307780((uint64_t)v6, a2);
  uint64_t v68 = (void **)v67;
  BOOL v10 = v8 != (void **)v67;
  if (v8 != (void **)v67)
  {
    uint64_t v69 = *(void *)(v67 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v67 + 31);
    *a3 = v69;
  }
  if (v129) {
    sub_1007FCFE0(a1, (uint64_t)v125);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  int v70 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101044608();
    int v71 = v132[9];
    double v72 = *(unsigned char **)v131;
    sub_101044608();
    __int16 v73 = v131;
    if (v71 < 0) {
      __int16 v73 = v72;
    }
    if (v137 >= 0) {
      long long v74 = v134;
    }
    else {
      long long v74 = *(unsigned char **)v134;
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v8 != v68;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v105;
    *(_WORD *)float v146 = 2080;
    *(void *)&v146[2] = v73;
    *(_WORD *)&v146[10] = 2080;
    *(void *)&v146[12] = v74;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "TILE: isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v137 < 0) {
      operator delete(*(void **)v134);
    }
    if ((v132[9] & 0x80000000) != 0) {
      operator delete(*(void **)v131);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    BOOL v79 = v8 != v68;
    sub_101044608();
    int v80 = v137;
    char v81 = *(unsigned char **)v134;
    sub_101044608();
    uint64_t v82 = v134;
    if (v80 < 0) {
      uint64_t v82 = v81;
    }
    if (v113 >= 0) {
      uint64_t v83 = v112;
    }
    else {
      uint64_t v83 = (void **)v112[0];
    }
    *(_DWORD *)unint64_t v131 = 67109890;
    *(_DWORD *)&v131[4] = v79;
    *(_WORD *)&v131[8] = 1024;
    *(_DWORD *)&v131[10] = v105;
    *(_WORD *)__int16 v132 = 2080;
    *(void *)&v132[2] = v82;
    *(_WORD *)&v132[10] = 2080;
    *(void *)&v132[12] = v83;
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    if (v113 < 0) {
      operator delete(v112[0]);
    }
    if (v137 < 0) {
      operator delete(*(void **)v134);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v84);
    if (v84 != __p) {
      free(v84);
    }
  }
LABEL_179:
  if (v126 < 0) {
    operator delete(v125[0]);
  }
  return v10;
}

void sub_101305C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_101305D88(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  *(void *)(a1 + 334) = *(uint64_t *)((char *)a2 + 6);
  *(void *)(a1 + 328) = v6;
  char v37 = 0;
  uint64_t v39 = nullsub_41(0, a2);
  char v36 = "search";
  char v38 = 1;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101044608();
    uint64_t v8 = SHIBYTE(v48) >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, key, %s", buf, 0xCu);
    if (SHIBYTE(v48) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_101044608();
    if (SHIBYTE(v42) >= 0) {
      BOOL v23 = buf;
    }
    else {
      BOOL v23 = *(unsigned char **)buf;
    }
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    int8x8_t v24 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v24);
    if (v24 != __p) {
      free(v24);
    }
  }
  sub_101048050(a1, &v45);
  uint64_t v9 = (const char **)(a1 + 8);
  BOOL v10 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    BOOL v10 = *v9;
  }
  if (sub_1000A569C(v10))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    clock_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      clock_t v12 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        clock_t v12 = *v9;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, prefer local file name because it exists, %s", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      uint64_t v30 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v30 = *v9;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      int v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v31);
      if (v31 != __p) {
        free(v31);
      }
    }
    std::string::operator=(&v45, (const std::string *)(a1 + 8));
  }
  sub_101049A48((void *)a1, (uint64_t)&v45, (uint64_t)&v36);
  uint64_t v13 = sub_101307780(a1 + 368, (int *)a2);
  uint64_t v14 = v13;
  uint64_t v15 = a1 + 376;
  if (a1 + 376 != v13)
  {
    uint64_t v16 = *(void *)(v13 + 25);
    *(void *)((char *)a3 + 6) = *(void *)(v13 + 31);
    *a3 = v16;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v17 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_101044608();
    int v18 = SHIBYTE(v42);
    unint64_t v19 = *(unsigned char **)buf;
    sub_101044608();
    int v20 = buf;
    if (v18 < 0) {
      int v20 = v19;
    }
    if (v35 >= 0) {
      unint64_t v21 = v34;
    }
    else {
      unint64_t v21 = (void **)v34[0];
    }
    *(_DWORD *)std::string __p = 67109890;
    *(_DWORD *)&__p[4] = v15 != v14;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = 0;
    __int16 v47 = 2080;
    __int16 v48 = v20;
    __int16 v49 = 2080;
    int v50 = v21;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s", __p, 0x22u);
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    sub_101044608();
    int v25 = v35;
    int v26 = (void **)v34[0];
    sub_101044608();
    uint64_t v27 = v34;
    if (v25 < 0) {
      uint64_t v27 = v26;
    }
    if (v33 >= 0) {
      unsigned int v28 = &v32;
    }
    else {
      unsigned int v28 = v32;
    }
    *(_DWORD *)long long buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v15 != v14;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    __int16 v41 = 2080;
    unsigned int v42 = v27;
    __int16 v43 = 2080;
    int v44 = v28;
    unsigned int v29 = (char *)_os_log_send_and_compose_impl();
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]", "%s\n", v29);
    if (v29 != __p) {
      free(v29);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return v15 != v14;
}

void sub_10130645C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1013064C4(uint64_t a1)
{
  *(void *)a1 = off_10231F9F8;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }

  return sub_1010456D8(a1);
}

uint64_t sub_101306530(uint64_t a1)
{
  *(void *)a1 = off_10231FAD0;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }

  return sub_1010456D8(a1);
}

uint64_t sub_10130659C(uint64_t a1)
{
  *(void *)a1 = &off_10231FBA8;
  sub_1000F5BB0(a1 + 368, *(void **)(a1 + 376));
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }

  return sub_1010456D8(a1);
}

uint64_t *sub_101306608(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_101306660(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_101306648(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_101306660(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      unint64_t result = sub_1013066EC(v5, v6, (int *)((char *)v4 + 25), (void *)((char *)v4 + 25));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1013066EC(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v6 = sub_10130677C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 25) = *a4;
    *(uint64_t *)((char *)v7 + 31) = *(uint64_t *)((char *)a4 + 6);
    sub_1000EDF90(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10130677C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_5;
  }
  int v5 = *(_DWORD *)((char *)a2 + 25);
  int v6 = *a5;
  int v7 = a5[1];
  int v8 = *(_DWORD *)((char *)a2 + 29);
  BOOL v9 = v7 < v8;
  if (*a5 != v5) {
    BOOL v9 = *a5 < v5;
  }
  if (v9)
  {
LABEL_5:
    BOOL v10 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      clock_t v12 = a2;
LABEL_24:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      clock_t v11 = (uint64_t *)*a2;
      do
      {
        clock_t v12 = v11;
        clock_t v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      uint64_t v17 = a2;
      do
      {
        clock_t v12 = (uint64_t *)v17[2];
        BOOL v18 = *v12 == (void)v17;
        uint64_t v17 = v12;
      }
      while (v18);
    }
    int v19 = *(_DWORD *)((char *)v12 + 25);
    BOOL v18 = v19 == *a5;
    BOOL v20 = v19 < *a5;
    if (v18) {
      BOOL v20 = *(_DWORD *)((char *)v12 + 29) < a5[1];
    }
    if (v20) {
      goto LABEL_24;
    }
    return sub_1013068F4((uint64_t)a1, a3, a5);
  }
  BOOL v13 = v8 < v7;
  if (v6 == v5) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = v5 < v6;
  }
  if (v14)
  {
    uint64_t v15 = a2[1];
    if (v15)
    {
      uint64_t v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        uint64_t v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      unint64_t v21 = a2;
      do
      {
        a4 = (uint64_t **)v21[2];
        BOOL v18 = *a4 == v21;
        unint64_t v21 = (uint64_t *)a4;
      }
      while (!v18);
    }
    if (a4 == a1 + 1) {
      goto LABEL_35;
    }
    int v22 = *(_DWORD *)((char *)a4 + 25);
    BOOL v23 = v7 < *(_DWORD *)((char *)a4 + 29);
    BOOL v18 = v6 == v22;
    BOOL v24 = v6 < v22;
    if (v18) {
      BOOL v24 = v23;
    }
    if (v24)
    {
LABEL_35:
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    return sub_1013068F4((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

uint64_t *sub_1013068F4(uint64_t a1, void *a2, int *a3)
{
  int v5 = *(uint64_t **)(a1 + 8);
  unint64_t result = (uint64_t *)(a1 + 8);
  char v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    do
    {
      while (1)
      {
        int v8 = v4;
        int v9 = *(_DWORD *)((char *)v4 + 25);
        int v10 = *(_DWORD *)((char *)v8 + 29);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        char v4 = (uint64_t *)*v8;
        unint64_t result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      unint64_t result = v8 + 1;
      char v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_101306974(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1013069A4(char **a1, unint64_t a2)
{
  char v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_1001D7FD4();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    int v6 = (char *)sub_10080FC80(v3, a2);
    int v7 = &v6[12 * v5];
    int v9 = &v6[12 * v8];
    BOOL v11 = *a1;
    int v10 = a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      int v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

BOOL sub_101306A88(uint64_t a1, unsigned int **a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v38 = 0;
  int v39 = 0;
  sub_1010445F8(&v38, (void *)(a1 + 328));
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  int v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a2;
    uint64_t v8 = a2[1];
    sub_101044430();
    int v10 = v45 >= 0 ? __p : *(unsigned char **)__p;
    unsigned int v11 = **a2;
    BOOL v12 = v38 == v11 ? SHIDWORD(v38) < (int)(*a2)[1] : v38 < v11;
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * (v8 - v9);
    __int16 v48 = 2080;
    __int16 v49 = v10;
    __int16 v50 = 1024;
    BOOL v51 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v45) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    int v31 = *a2;
    uint64_t v30 = a2[1];
    sub_101044430();
    if (v41 >= 0) {
      double v32 = v40;
    }
    else {
      double v32 = (void **)v40[0];
    }
    unsigned int v33 = **a2;
    if (v38 == v33) {
      BOOL v34 = SHIDWORD(v38) < (int)(*a2)[1];
    }
    else {
      BOOL v34 = v38 < v33;
    }
    *(_DWORD *)std::string __p = 134218498;
    *(void *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (v30 - v31);
    __int16 v43 = 2080;
    int v44 = v32;
    __int16 v45 = 1024;
    BOOL v46 = v34;
    char v37 = (char *)_os_log_send_and_compose_impl();
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
  }
  *a4 = 0;
  *a3 = 0;
  int v14 = *a2;
  uint64_t v13 = a2[1];
  if (v13 == *a2) {
    goto LABEL_24;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v13 - *a2);
  uint64_t v16 = *a2;
  do
  {
    unint64_t v17 = v15 >> 1;
    BOOL v18 = &v16[3 * (v15 >> 1)];
    unsigned int v21 = *v18;
    signed int v19 = v18[1];
    BOOL v20 = v18 + 3;
    BOOL v22 = v19 < SHIDWORD(v38);
    BOOL v23 = v21 == v38;
    BOOL v24 = v21 < v38;
    if (v23) {
      BOOL v24 = v22;
    }
    v15 += ~(v15 >> 1);
    if (v24) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v17;
    }
  }
  while (v15);
  if (v16 == v14)
  {
LABEL_24:
    *a3 = v14[2];
    *a4 = v14[2] + 1;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    int v25 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_101044430();
      int v26 = v50 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      sub_101044430();
      if (v45 >= 0) {
        char v35 = __p;
      }
      else {
        char v35 = *(unsigned char **)__p;
      }
      LODWORD(v40[0]) = 136315138;
      *(void **)((char *)v40 + 4) = v35;
      char v36 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v45) < 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v36);
      if (v36 != buf) {
        free(v36);
      }
    }
    return 1;
  }
  if (v16 != v13)
  {
    *a3 = *(v16 - 1);
    *a4 = v16[2];
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  unsigned int v28 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_WORD *)std::string __p = 0;
    unsigned int v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1013070F8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, void *a6)
{
  if (a3)
  {
    unsigned int v9 = a3;
    int v11 = 0;
    int v12 = 1;
    while (1)
    {
      int v13 = v12;
      *(void *)&buf[6] = 0;
      *(void *)long long buf = 0;
      sub_1010441E4((int8x8_t *)((v11 + (v9 >> 1)) * a4 + a2), (int8x8_t *)buf);
      BOOL v14 = *(_DWORD *)buf < *a5;
      if (*(_DWORD *)buf == *a5)
      {
        int v15 = a5[1];
        BOOL v14 = *(_DWORD *)&buf[4] < v15;
        if (*(_DWORD *)&buf[4] == v15) {
          break;
        }
      }
      int v16 = v14;
      BOOL v17 = v16 == 0;
      if (v16) {
        int v18 = (v9 >> 1) + 1;
      }
      else {
        int v18 = 0;
      }
      v11 += v18;
      if (v17) {
        v9 >>= 1;
      }
      else {
        v9 -= (v9 >> 1) + 1;
      }
      int v12 = v13 + 1;
      if (!v9)
      {
        uint64_t v19 = 0;
        goto LABEL_18;
      }
    }
    *a6 = *(void *)buf;
    *(void *)((char *)a6 + 6) = *(void *)&buf[6];
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v19 = 0;
    int v13 = 0;
  }
LABEL_18:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  BOOL v20 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  return v19;
}

uint64_t *sub_101307378(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t v5 = sub_1013068F4((uint64_t)a1, &v9, a2);
  int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    int v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 25) = *a3;
    *(uint64_t *)((char *)v6 + 31) = *(uint64_t *)((char *)a3 + 6);
    sub_1000EDF90(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_101307404()
{
  sub_10010F274((uint64_t)v8);
  uint64_t v0 = sub_100132EFC(v9, (uint64_t)"TileHeader(", 11);
  sub_100132EFC(v0, (uint64_t)"tileY=", 6);
  uint64_t v1 = (void *)std::ostream::operator<<();
  uint64_t v2 = sub_100132EFC(v1, (uint64_t)", ", 2);
  sub_100132EFC(v2, (uint64_t)"tileX=", 6);
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v4 = sub_100132EFC(v3, (uint64_t)",", 1);
  sub_100132EFC(v4, (uint64_t)"genTime=", 8);
  uint64_t v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1013075F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10130760C(uint64_t a1, int8x8_t *a2, unsigned int a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  int8x8_t v22 = 0;
  int v23 = 0;
  if (!a3) {
    goto LABEL_18;
  }
  unsigned int v13 = 0;
  unsigned int v14 = a3;
  do
  {
    unsigned int v15 = v14 >> 1;
    sub_101044414((int8x8_t *)((char *)a2 + (v13 + (v14 >> 1)) * a4), &v22);
    BOOL v16 = v22.i32[0] < *a5;
    if (v22.i32[0] == *a5) {
      BOOL v16 = v22.i32[1] < a5[1];
    }
    if (v16) {
      v14 -= v15 + 1;
    }
    else {
      v14 >>= 1;
    }
    if (v16) {
      unsigned int v17 = v15 + 1;
    }
    else {
      unsigned int v17 = 0;
    }
    v13 += v17;
  }
  while (v14);
  if (v13) {
    BOOL v18 = v13 >= a3;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    sub_101044414((int8x8_t *)((char *)a2 + v13 * a4), &v22);
    *a7 = v23;
    sub_101044414((int8x8_t *)((char *)a2 + (v13 - 1) * a4), &v22);
    BOOL v19 = 1;
    int v20 = v23;
    goto LABEL_25;
  }
  if (v13)
  {
LABEL_18:
    int v20 = 0;
    BOOL v19 = 0;
    *a7 = 0;
    goto LABEL_25;
  }
  sub_101044414(a2, &v22);
  if (v22.i32[0] == *a5)
  {
    BOOL v19 = v22.i32[1] == a5[1];
    if (v22.i32[1] == a5[1]) {
      int v20 = v23;
    }
    else {
      int v20 = 0;
    }
  }
  else
  {
    BOOL v19 = 0;
    int v20 = 0;
  }
  *a7 = v20;
LABEL_25:
  *a6 = v20;
  return v19;
}

uint64_t sub_101307780(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  int v5 = *a2;
  int v6 = a2[1];
  uint64_t v7 = v2;
  do
  {
    int v8 = *(_DWORD *)(v3 + 25);
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = *(_DWORD *)(v3 + 29) < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      int v11 = (uint64_t *)(v3 + 8);
    }
    else {
      int v11 = (uint64_t *)v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  int v12 = *(_DWORD *)(v7 + 25);
  BOOL v13 = v6 < *(_DWORD *)(v7 + 29);
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

uint64_t *sub_1013077FC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_101306660(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_10130783C(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_101307854(uint64_t a1, int **a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v40 = 0;
  int v41 = 0;
  sub_1010445F8(&v40, (void *)(a1 + 328));
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    BOOL v9 = *a2;
    int v8 = a2[1];
    sub_101044BC0();
    if (v47 >= 0) {
      BOOL v10 = __p;
    }
    else {
      BOOL v10 = *(unsigned char **)__p;
    }
    int v11 = **a2;
    BOOL v12 = (int)v40 < v11;
    if (v40 == v11) {
      BOOL v12 = SHIDWORD(v40) < (*a2)[1];
    }
    int v13 = v12;
    *(_DWORD *)long long buf = 134218498;
    *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * (v8 - v9);
    __int16 v50 = 2080;
    BOOL v51 = v10;
    __int16 v52 = 1024;
    int v53 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d", buf, 0x1Cu);
    if (SHIBYTE(v47) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    double v32 = *a2;
    int v31 = a2[1];
    sub_101044BC0();
    if (v43 >= 0) {
      unsigned int v33 = v42;
    }
    else {
      unsigned int v33 = (void **)v42[0];
    }
    int v34 = **a2;
    BOOL v35 = (int)v40 < v34;
    if (v40 == v34) {
      BOOL v35 = SHIDWORD(v40) < (*a2)[1];
    }
    int v36 = v35;
    *(_DWORD *)std::string __p = 134218498;
    *(void *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * (v31 - v32);
    __int16 v45 = 2080;
    BOOL v46 = v33;
    __int16 v47 = 1024;
    int v48 = v36;
    char v37 = (char *)_os_log_send_and_compose_impl();
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
  }
  *a4 = 0;
  *a3 = 0;
  unsigned int v15 = *a2;
  BOOL v14 = a2[1];
  if (v14 == *a2) {
    goto LABEL_26;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - *a2);
  unsigned int v17 = *a2;
  do
  {
    unint64_t v18 = v16 >> 1;
    BOOL v19 = &v17[3 * (v16 >> 1)];
    int v22 = *v19;
    int v20 = v19[1];
    unsigned int v21 = v19 + 3;
    BOOL v23 = v20 < SHIDWORD(v40);
    BOOL v24 = v22 == v40;
    BOOL v25 = v22 < (int)v40;
    if (v24) {
      BOOL v25 = v23;
    }
    v16 += ~(v16 >> 1);
    if (v25) {
      unsigned int v17 = v21;
    }
    else {
      unint64_t v16 = v18;
    }
  }
  while (v16);
  if (v17 == v15)
  {
LABEL_26:
    *a3 = v15[2];
    *a4 = v15[2] + 1;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    int v26 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_101044BC0();
      uint64_t v27 = v52 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: index search, match, %s", __p, 0xCu);
      if (SHIBYTE(v52) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10231FC70);
      }
      sub_101044BC0();
      if (v47 >= 0) {
        uint64_t v38 = __p;
      }
      else {
        uint64_t v38 = *(unsigned char **)__p;
      }
      LODWORD(v42[0]) = 136315138;
      *(void **)((char *)v42 + 4) = v38;
      int v39 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v47) < 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v39);
      if (v39 != buf) {
        free(v39);
      }
    }
    return 1;
  }
  if (v17 != v14)
  {
    *a3 = *(v17 - 1);
    *a4 = v17[2];
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10231FC70);
  }
  unsigned int v29 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: index search, not found", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10231FC70);
    }
    *(_WORD *)std::string __p = 0;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]", "%s\n", v30);
    if (v30 != buf) {
      free(v30);
    }
    return 0;
  }
  return result;
}