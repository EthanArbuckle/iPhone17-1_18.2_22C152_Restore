void sub_1005BABF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_1001687EC(&a47);
  _Unwind_Resume(a1);
}

void sub_1005BAD24(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v79 = 1024;
        LODWORD(v80) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)v74 = 67109376;
      *(_DWORD *)&v74[4] = v16;
      *(_WORD *)&v74[8] = 1024;
      *(_DWORD *)&v74[10] = v18;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v74);
    v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v64);
    sub_100165AD4((uint64_t)v74, a2, a3, a4, (uint64_t *)v64);
    v77 |= 2u;
    uint64_t v28 = v76;
    if (!v76) {
      operator new();
    }
    *(_DWORD *)(v76 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x1000u;
    uint64_t v30 = *(void *)(v29 + 96);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + 8) = v31;
    unsigned int v32 = sub_1005BB894(a6);
    if (!sub_1001A4C4C(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8254, "::CLP::LogEntry::PrivateData::MotionStateObserverNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 28) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    if (*a6)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v35 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        int v36 = *a6;
        LODWORD(buf) = 67109120;
        HIDWORD(buf) = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,unsupported notification type,%d", (uint8_t *)&buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_95;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v37 = *a6;
      *(_DWORD *)v65 = 67109120;
      *(_DWORD *)&v65[4] = v37;
      v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v38);
      if (v38 == (char *)&buf) {
        goto LABEL_95;
      }
    }
    else
    {
      *(_DWORD *)(v34 + 20) |= 1u;
      uint64_t v39 = *(void *)(v34 + 8);
      if (!v39) {
        operator new();
      }
      sub_101467134(a7, v39);
      int v40 = sub_100168A44(a1);
      if (!*(unsigned char *)(a1 + 8)) {
        goto LABEL_95;
      }
      int v41 = v40;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v42 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v65);
        if (SBYTE3(v67) >= 0) {
          v43 = v65;
        }
        else {
          v43 = *(unsigned char **)v65;
        }
        LODWORD(v57[0]) = a3->i32[0];
        sub_101522E48((int *)v57, v62);
        int v55 = v41;
        if (v63 >= 0) {
          v44 = v62;
        }
        else {
          v44 = (void **)v62[0];
        }
        int v59 = *a4;
        v45 = __p;
        sub_101522E48(&v59, __p);
        if (v61 < 0) {
          v45 = (void **)__p[0];
        }
        int v46 = *a6;
        uint64_t v47 = sub_10016BA10();
        double v48 = sub_10018202C(v47);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v55;
        __int16 v79 = 2080;
        v80 = v43;
        __int16 v81 = 2080;
        v82 = v44;
        __int16 v83 = 2080;
        v84 = v45;
        __int16 v85 = 1024;
        int v86 = v46;
        __int16 v87 = 2050;
        double v88 = v48;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v61 < 0) {
          operator delete(__p[0]);
        }
        if (v63 < 0) {
          operator delete(v62[0]);
        }
        int v41 = v55;
        if (SBYTE3(v67) < 0) {
          operator delete(*(void **)v65);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_95;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v62);
      if (v63 >= 0) {
        v49 = v62;
      }
      else {
        v49 = (void **)v62[0];
      }
      int v59 = a3->i32[0];
      v50 = __p;
      sub_101522E48(&v59, __p);
      if (v61 < 0) {
        v50 = (void **)__p[0];
      }
      int v56 = *a4;
      v51 = v57;
      sub_101522E48(&v56, v57);
      if (v58 < 0) {
        v51 = (void **)v57[0];
      }
      int v52 = *a6;
      uint64_t v53 = sub_10016BA10();
      double v54 = sub_10018202C(v53);
      *(_DWORD *)v65 = 67110402;
      *(_DWORD *)&v65[4] = v41;
      *(_WORD *)&v65[8] = 2080;
      *(void *)&v65[10] = v49;
      __int16 v66 = 2080;
      v67 = v50;
      __int16 v68 = 2080;
      v69 = v51;
      __int16 v70 = 1024;
      int v71 = v52;
      __int16 v72 = 2050;
      double v73 = v54;
      v38 = (char *)_os_log_send_and_compose_impl();
      if (v58 < 0) {
        operator delete(v57[0]);
      }
      if (v61 < 0) {
        operator delete(__p[0]);
      }
      if (v63 < 0) {
        operator delete(v62[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v38);
      if (v38 == (char *)&buf) {
        goto LABEL_95;
      }
    }
    free(v38);
LABEL_95:
    sub_1001687EC(v74);
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    sub_101522B64((int *)a2, &buf);
    v21 = SBYTE3(v82) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)v74 = 136315138;
    *(void *)&v74[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionStateObserver_Type,unsupported message type,%s", v74, 0xCu);
    if (SBYTE3(v82) < 0) {
      operator delete(buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    sub_101522B64((int *)a2, v74);
    if (v75 >= 0) {
      v22 = v74;
    }
    else {
      v22 = *(uint8_t **)v74;
    }
    *(_DWORD *)v65 = 136315138;
    *(void *)&v65[4] = v22;
    v19 = (char *)_os_log_send_and_compose_impl();
    if (v75 < 0) {
      operator delete(*(void **)v74);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v19);
    if (v19 != (char *)&buf) {
      goto LABEL_54;
    }
  }
}

void sub_1005BB75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

BOOL sub_1005BB894(int *a1)
{
  if (!*a1) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *a1;
    *(_DWORD *)buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertMotionStateObserverNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::MotionStateObserverNotification_NotificationType CLLocationControllerRecorder::convertMotionStateObserverNotificationTypeToProtobuf(const CLMotionStateObserver_Type::Notification &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1005BBA70(uint64_t a1)
{
  *(_DWORD *)(a1 + 28) |= 2u;
  if (!*(void *)(a1 + 16)) {
    operator new();
  }
  return *(void *)(a1 + 16);
}

void sub_1005BBACC()
{
}

void sub_1005BBAF0(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v77 = 1024;
        LODWORD(v78) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionState_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)__int16 v72 = 67109376;
      *(_DWORD *)&v72[4] = v16;
      *(_WORD *)&v72[8] = 1024;
      *(_DWORD *)&v72[10] = v18;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v72);
    v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v62);
    sub_100165AD4((uint64_t)v72, a2, a3, a4, (uint64_t *)v62);
    v75 |= 2u;
    uint64_t v28 = v74;
    if (!v74) {
      operator new();
    }
    *(_DWORD *)(v74 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x800u;
    uint64_t v30 = *(void *)(v29 + 88);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + 8) = v31;
    unsigned int v32 = sub_10146AB74(a6);
    if (!sub_1001662E0(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8117, "::CLP::LogEntry::PrivateData::MotionStateNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 28) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    int v35 = *a6;
    if ((*a6 - 3) < 9)
    {
LABEL_65:
      sub_1001687EC(v72);
      return;
    }
    if ((v35 - 1) >= 2)
    {
      if (!v35) {
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v36 = sub_1005BC4F0(v34);
      sub_100163CA8(a7, v36, 0);
    }
    int v37 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v38 = v37;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      uint64_t v39 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v63);
        if (SBYTE3(v65) >= 0) {
          int v40 = v63;
        }
        else {
          int v40 = *(unsigned char **)v63;
        }
        LODWORD(v55[0]) = a3->i32[0];
        sub_101522E48((int *)v55, v60);
        int v53 = v38;
        if (v61 >= 0) {
          int v41 = v60;
        }
        else {
          int v41 = (void **)v60[0];
        }
        int v57 = *a4;
        v42 = __p;
        sub_101522E48(&v57, __p);
        if (v59 < 0) {
          v42 = (void **)__p[0];
        }
        int v43 = *a6;
        uint64_t v44 = sub_10016BA10();
        double v45 = sub_10018202C(v44);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v53;
        __int16 v77 = 2080;
        v78 = v40;
        __int16 v79 = 2080;
        v80 = v41;
        __int16 v81 = 2080;
        v82 = v42;
        __int16 v83 = 1024;
        int v84 = v43;
        __int16 v85 = 2050;
        double v86 = v45;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionState_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v59 < 0) {
          operator delete(__p[0]);
        }
        if (v61 < 0) {
          operator delete(v60[0]);
        }
        int v38 = v53;
        if (SBYTE3(v65) < 0) {
          operator delete(*(void **)v63);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v60);
        if (v61 >= 0) {
          int v46 = v60;
        }
        else {
          int v46 = (void **)v60[0];
        }
        int v57 = a3->i32[0];
        uint64_t v47 = __p;
        sub_101522E48(&v57, __p);
        if (v59 < 0) {
          uint64_t v47 = (void **)__p[0];
        }
        int v54 = *a4;
        sub_101522E48(&v54, v55);
        if (v56 >= 0) {
          double v48 = v55;
        }
        else {
          double v48 = (void **)v55[0];
        }
        int v49 = *a6;
        uint64_t v50 = sub_10016BA10();
        double v51 = sub_10018202C(v50);
        *(_DWORD *)char v63 = 67110402;
        *(_DWORD *)&v63[4] = v38;
        *(_WORD *)&v63[8] = 2080;
        *(void *)&v63[10] = v46;
        __int16 v64 = 2080;
        v65 = v47;
        __int16 v66 = 2080;
        v67 = v48;
        __int16 v68 = 1024;
        int v69 = v49;
        __int16 v70 = 2050;
        double v71 = v51;
        int v52 = (char *)_os_log_send_and_compose_impl();
        if (v56 < 0) {
          operator delete(v55[0]);
        }
        if (v59 < 0) {
          operator delete(__p[0]);
        }
        if (v61 < 0) {
          operator delete(v60[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v52);
        if (v52 != (char *)&buf) {
          free(v52);
        }
      }
    }
    goto LABEL_65;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    sub_101522B64((int *)a2, &buf);
    v21 = SBYTE3(v80) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)__int16 v72 = 136315138;
    *(void *)&v72[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLMotionState_Type,unsupported message type,%s", v72, 0xCu);
    if (SBYTE3(v80) < 0) {
      operator delete(buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    sub_101522B64((int *)a2, v72);
    if (v73 >= 0) {
      v22 = v72;
    }
    else {
      v22 = *(uint8_t **)v72;
    }
    *(_DWORD *)char v63 = 136315138;
    *(void *)&v63[4] = v22;
    v19 = (char *)_os_log_send_and_compose_impl();
    if (v73 < 0) {
      operator delete(*(void **)v72);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v19);
    if (v19 != (char *)&buf) {
      goto LABEL_54;
    }
  }
}

void sub_1005BC3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t sub_1005BC4F0(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) |= 1u;
  if (!*(void *)(a1 + 8)) {
    operator new();
  }
  return *(void *)(a1 + 8);
}

void sub_1005BC54C()
{
}

void sub_1005BC570(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, int *a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v81 = 1024;
        LODWORD(v82) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)uint64_t v76 = 67109376;
      *(_DWORD *)&v76[4] = v16;
      *(_WORD *)&v76[8] = 1024;
      *(_DWORD *)&v76[10] = v18;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v76);
    v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v66);
    sub_100165AD4((uint64_t)v76, a2, a3, a4, (uint64_t *)v66);
    v79 |= 2u;
    uint64_t v28 = v78;
    if (!v78) {
      operator new();
    }
    *(_DWORD *)(v78 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x2000u;
    uint64_t v30 = *(void *)(v29 + 104);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + 8) = v31;
    unsigned int v32 = sub_10146A7E4(a6);
    if (!sub_1001A4C4C(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8391, "::CLP::LogEntry::PrivateData::SignalEnvironmentNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 28) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    *(_DWORD *)(v34 + 20) |= 1u;
    uint64_t v35 = *(void *)(v34 + 8);
    if (!v35) {
      operator new();
    }
    int v36 = sub_10016DA54(a7);
    if (sub_10016D86C(v36))
    {
      *(_DWORD *)(v35 + 20) |= 1u;
      *(_DWORD *)(v35 + 8) = v36;
      *(_DWORD *)(v34 + 20) |= 1u;
      uint64_t v37 = *(void *)(v34 + 8);
      if (!v37) {
        operator new();
      }
      unsigned int v38 = sub_10146A9A8(a7 + 1);
      if (sub_100165F14(v38))
      {
        *(_DWORD *)(v37 + 20) |= 2u;
        *(_DWORD *)(v37 + 12) = v38;
        int v39 = sub_100168A44(a1);
        if (*(unsigned char *)(a1 + 8))
        {
          int v40 = v39;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          int v41 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            sub_101522B64((int *)a2, v67);
            if (SBYTE3(v69) >= 0) {
              v42 = v67;
            }
            else {
              v42 = *(unsigned char **)v67;
            }
            LODWORD(v59[0]) = a3->i32[0];
            sub_101522E48((int *)v59, v64);
            if (v65 >= 0) {
              int v43 = v64;
            }
            else {
              int v43 = (void **)v64[0];
            }
            int v61 = *a4;
            uint64_t v44 = __p;
            sub_101522E48(&v61, __p);
            if (v63 < 0) {
              uint64_t v44 = (void **)__p[0];
            }
            int v45 = *a6;
            uint64_t v46 = sub_10016BA10();
            double v47 = sub_10018202C(v46);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v40;
            __int16 v81 = 2080;
            v82 = v42;
            __int16 v83 = 2080;
            int v84 = v43;
            __int16 v85 = 2080;
            double v86 = v44;
            __int16 v87 = 1024;
            int v88 = v45;
            __int16 v89 = 2050;
            double v90 = v47;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
            if (v63 < 0) {
              operator delete(__p[0]);
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            if (SBYTE3(v69) < 0) {
              operator delete(*(void **)v67);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022BD0F8);
            }
            sub_101522B64((int *)a2, v64);
            if (v65 >= 0) {
              double v51 = v64;
            }
            else {
              double v51 = (void **)v64[0];
            }
            int v61 = a3->i32[0];
            int v52 = __p;
            sub_101522E48(&v61, __p);
            if (v63 < 0) {
              int v52 = (void **)__p[0];
            }
            int v58 = *a4;
            sub_101522E48(&v58, v59);
            if (v60 >= 0) {
              int v53 = v59;
            }
            else {
              int v53 = (void **)v59[0];
            }
            int v54 = *a6;
            uint64_t v55 = sub_10016BA10();
            double v56 = sub_10018202C(v55);
            *(_DWORD *)v67 = 67110402;
            *(_DWORD *)&v67[4] = v40;
            *(_WORD *)&v67[8] = 2080;
            *(void *)&v67[10] = v51;
            __int16 v68 = 2080;
            int v69 = v52;
            __int16 v70 = 2080;
            double v71 = v53;
            __int16 v72 = 1024;
            int v73 = v54;
            __int16 v74 = 2050;
            double v75 = v56;
            int v57 = (char *)_os_log_send_and_compose_impl();
            if (v60 < 0) {
              operator delete(v59[0]);
            }
            if (v63 < 0) {
              operator delete(__p[0]);
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v57);
            if (v57 != (char *)&buf) {
              free(v57);
            }
          }
        }
        sub_1001687EC(v76);
        return;
      }
      double v48 = "::CLP::LogEntry::PrivateData::SignalEnvironmentFidelityLevel_IsValid(value)";
      int v49 = 22085;
      uint64_t v50 = "set_fidelity_level";
    }
    else
    {
      double v48 = "::CLP::LogEntry::PrivateData::SignalEnvironment_SignalEnvironmentType_IsValid(value)";
      int v49 = 22062;
      uint64_t v50 = "set_type";
    }
    __assert_rtn(v50, "CLPPrivateDataShared.pb.h", v49, v48);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    sub_101522B64((int *)a2, &buf);
    v21 = SBYTE3(v84) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)uint64_t v76 = 136315138;
    *(void *)&v76[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLSignalEnvironmentProvider_Type,unsupported message type,%s", v76, 0xCu);
    if (SBYTE3(v84) < 0) {
      operator delete(buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    sub_101522B64((int *)a2, v76);
    if (v77 >= 0) {
      v22 = v76;
    }
    else {
      v22 = *(uint8_t **)v76;
    }
    *(_DWORD *)v67 = 136315138;
    *(void *)&v67[4] = v22;
    v19 = (char *)_os_log_send_and_compose_impl();
    if (v77 < 0) {
      operator delete(*(void **)v76);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v19);
    if (v19 != (char *)&buf) {
      goto LABEL_54;
    }
  }
}

void sub_1005BCF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1005BD048(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v9 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v10 = a3->i32[1] == 0;
        }
        else {
          BOOL v10 = 1;
        }
        int v11 = !v10;
        if (*a4) {
          BOOL v12 = a4[1] == 0;
        }
        else {
          BOOL v12 = 1;
        }
        int v13 = !v12;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v11;
        __int16 v74 = 1024;
        LODWORD(v75) = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLTelephonyService_Type,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v14 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v15 = !v14;
      BOOL v16 = !*a4 || a4[1] == 0;
      BOOL v17 = !v16;
      *(_DWORD *)char v60 = 67109376;
      *(_DWORD *)&v60[4] = v15;
      *(_WORD *)&v60[8] = 1024;
      *(_DWORD *)&v60[10] = v17;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLTelephonyService_Type::Notification &)", "%s\n", v18);
      if (v18 == (char *)buf) {
        return;
      }
LABEL_54:
      free(v18);
      return;
    }
    sub_100168850(&v69);
    v25 = (__n128 *)sub_10016BA10();
    sub_100168854(v25, v59);
    sub_100165AD4((uint64_t)&v69, a2, a3, a4, (uint64_t *)v59);
    v72 |= 2u;
    uint64_t v26 = v71;
    if (!v71) {
      operator new();
    }
    *(_DWORD *)(v71 + 492) |= 0x800u;
    uint64_t v27 = *(void *)(v26 + 352);
    if (!v27) {
      operator new();
    }
    *(_DWORD *)(v27 + 184) |= 0x4000u;
    uint64_t v28 = *(_DWORD **)(v27 + 112);
    if (!v28) {
      operator new();
    }
    int v29 = *a5;
    v28[5] |= 1u;
    v28[2] = v29;
    unsigned int v30 = sub_1005BDA58(a6);
    if (!sub_10016E644(v30)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8482, "::CLP::LogEntry::PrivateData::TelephonyServiceNotification_NotificationType_IsValid(value)");
    }
    v28[5] |= 2u;
    v28[3] = v30;
    int v31 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v32 = v31;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v33 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v60);
        if (SBYTE3(v62) >= 0) {
          uint64_t v34 = v60;
        }
        else {
          uint64_t v34 = *(unsigned char **)v60;
        }
        LODWORD(v49[0]) = a3->i32[0];
        sub_101522E48((int *)v49, v57);
        if (v58 >= 0) {
          uint64_t v35 = v57;
        }
        else {
          uint64_t v35 = (void **)v57[0];
        }
        int v54 = *a4;
        sub_101522E48(&v54, v55);
        if (v56 >= 0) {
          int v36 = v55;
        }
        else {
          int v36 = (void **)v55[0];
        }
        CFStringRef v37 = (const __CFString *)sub_1000FA17C(a6);
        unsigned int v38 = __p;
        sub_1000FECE0(v37, (uint64_t)__p);
        if (v53 < 0) {
          unsigned int v38 = (void **)__p[0];
        }
        uint64_t v39 = sub_10016BA10();
        double v40 = sub_10018202C(v39);
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = v32;
        __int16 v74 = 2080;
        double v75 = v34;
        __int16 v76 = 2080;
        char v77 = v35;
        __int16 v78 = 2080;
        int v79 = v36;
        __int16 v80 = 2080;
        __int16 v81 = v38;
        __int16 v82 = 2050;
        double v83 = v40;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLTelephonyService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", buf, 0x3Au);
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v56 < 0) {
          operator delete(v55[0]);
        }
        if (v58 < 0) {
          operator delete(v57[0]);
        }
        if (SBYTE3(v62) < 0) {
          operator delete(*(void **)v60);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v57);
        if (v58 >= 0) {
          int v41 = v57;
        }
        else {
          int v41 = (void **)v57[0];
        }
        int v54 = a3->i32[0];
        v42 = v55;
        sub_101522E48(&v54, v55);
        if (v56 < 0) {
          v42 = (void **)v55[0];
        }
        int v51 = *a4;
        int v43 = __p;
        sub_101522E48(&v51, __p);
        if (v53 < 0) {
          int v43 = (void **)__p[0];
        }
        CFStringRef v44 = (const __CFString *)sub_1000FA17C(a6);
        int v45 = v49;
        sub_1000FECE0(v44, (uint64_t)v49);
        if (v50 < 0) {
          int v45 = (void **)v49[0];
        }
        uint64_t v46 = sub_10016BA10();
        double v47 = sub_10018202C(v46);
        *(_DWORD *)char v60 = 67110402;
        *(_DWORD *)&v60[4] = v32;
        *(_WORD *)&v60[8] = 2080;
        *(void *)&v60[10] = v41;
        __int16 v61 = 2080;
        v62 = v42;
        __int16 v63 = 2080;
        __int16 v64 = v43;
        __int16 v65 = 2080;
        __int16 v66 = v45;
        __int16 v67 = 2050;
        double v68 = v47;
        double v48 = (char *)_os_log_send_and_compose_impl();
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v56 < 0) {
          operator delete(v55[0]);
        }
        if (v58 < 0) {
          operator delete(v57[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLTelephonyService_Type::Notification &)", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
    }
    sub_1001687EC(&v69);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, buf);
      v20 = SBYTE3(v77) >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)char v60 = 136315138;
      *(void *)&v60[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLTelephonyService_Type,unsupported message type,%s", v60, 0xCu);
      if (SBYTE3(v77) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v60);
      if (SBYTE3(v62) >= 0) {
        v21 = v60;
      }
      else {
        v21 = *(unsigned char **)v60;
      }
      int v69 = 136315138;
      __int16 v70 = v21;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v62) < 0) {
        operator delete(*(void **)v60);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLTelephonyService_Type::Notification &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1005BD918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

uint64_t sub_1005BDA58(int *a1)
{
  v2 = (const void *)sub_1000FA17C(a1);
  if (CFEqual(v2, kCTRegistrationStatusChangedNotification)) {
    return 1;
  }
  v4 = (const void *)sub_1000FA17C(a1);
  if (CFEqual(v4, kCTCallStatusChangeNotification)) {
    return 2;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v8 = sub_1000F1244((unsigned int *)a1);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertTelephonyServiceNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    sub_1000F1244((unsigned int *)a1);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::TelephonyServiceNotification_NotificationType CLLocationControllerRecorder::convertTelephonyServiceNotificationTypeToProtobuf(const CLTelephonyService_Type::Notification &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

void sub_1005BDC60(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v9 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v10 = a3->i32[1] == 0;
        }
        else {
          BOOL v10 = 1;
        }
        int v11 = !v10;
        if (*a4) {
          BOOL v12 = a4[1] == 0;
        }
        else {
          BOOL v12 = 1;
        }
        int v13 = !v12;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v11;
        __int16 v71 = 1024;
        LODWORD(v72) = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v14 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v15 = !v14;
      BOOL v16 = !*a4 || a4[1] == 0;
      BOOL v17 = !v16;
      *(_DWORD *)int v57 = 67109376;
      *(_DWORD *)&v57[4] = v15;
      *(_WORD *)&v57[8] = 1024;
      *(_DWORD *)&v57[10] = v17;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v18);
      if (v18 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v18);
      return;
    }
    sub_100168850(&v66);
    v25 = (__n128 *)sub_10016BA10();
    sub_100168854(v25, v56);
    sub_100165AD4((uint64_t)&v66, a2, a3, a4, (uint64_t *)v56);
    v69 |= 2u;
    uint64_t v26 = v68;
    if (!v68) {
      operator new();
    }
    *(_DWORD *)(v68 + 492) |= 0x800u;
    uint64_t v27 = *(void *)(v26 + 352);
    if (!v27) {
      operator new();
    }
    *(_DWORD *)(v27 + 184) |= 0x10000u;
    uint64_t v28 = *(_DWORD **)(v27 + 128);
    if (!v28) {
      operator new();
    }
    int v29 = *a5;
    v28[9] |= 1u;
    v28[2] = v29;
    unsigned int v30 = sub_100169B90(a6);
    if (!sub_100169B58(v30)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9437, "::CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType_IsValid(value)");
    }
    v28[9] |= 2u;
    v28[3] = v30;
    int v31 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v32 = v31;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v33 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v57);
        if (SBYTE3(v59) >= 0) {
          uint64_t v34 = v57;
        }
        else {
          uint64_t v34 = *(unsigned char **)v57;
        }
        double v47 = v34;
        LODWORD(v49[0]) = a3->i32[0];
        sub_101522E48((int *)v49, v54);
        if (v55 >= 0) {
          uint64_t v35 = v54;
        }
        else {
          uint64_t v35 = (void **)v54[0];
        }
        int v51 = *a4;
        int v36 = __p;
        sub_101522E48(&v51, __p);
        if (v53 < 0) {
          int v36 = (void **)__p[0];
        }
        CFStringRef v37 = sub_10008A168(*a6);
        uint64_t v38 = sub_10016BA10();
        double v39 = sub_10018202C(v38);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v32;
        __int16 v71 = 2080;
        int v72 = v47;
        __int16 v73 = 2080;
        __int16 v74 = v35;
        __int16 v75 = 2080;
        __int16 v76 = v36;
        __int16 v77 = 2080;
        __int16 v78 = v37;
        __int16 v79 = 2050;
        double v80 = v39;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%s,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x3Au);
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        if (SBYTE3(v59) < 0) {
          operator delete(*(void **)v57);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v54);
        if (v55 >= 0) {
          double v40 = v54;
        }
        else {
          double v40 = (void **)v54[0];
        }
        int v51 = a3->i32[0];
        int v41 = __p;
        sub_101522E48(&v51, __p);
        if (v53 < 0) {
          int v41 = (void **)__p[0];
        }
        int v48 = *a4;
        sub_101522E48(&v48, v49);
        if (v50 >= 0) {
          v42 = v49;
        }
        else {
          v42 = (void **)v49[0];
        }
        int v43 = sub_10008A168(*a6);
        uint64_t v44 = sub_10016BA10();
        double v45 = sub_10018202C(v44);
        *(_DWORD *)int v57 = 67110402;
        *(_DWORD *)&v57[4] = v32;
        *(_WORD *)&v57[8] = 2080;
        *(void *)&v57[10] = v40;
        __int16 v58 = 2080;
        char v59 = v41;
        __int16 v60 = 2080;
        __int16 v61 = v42;
        __int16 v62 = 2080;
        __int16 v63 = v43;
        __int16 v64 = 2050;
        double v65 = v45;
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v46);
        if (v46 != (char *)&buf) {
          free(v46);
        }
      }
    }
    sub_1001687EC(&v66);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      v20 = SBYTE3(v74) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)int v57 = 136315138;
      *(void *)&v57[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLLocationProvider_Type,unsupported message type,%s", v57, 0xCu);
      if (SBYTE3(v74) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v57);
      if (SBYTE3(v59) >= 0) {
        v21 = v57;
      }
      else {
        v21 = *(unsigned char **)v57;
      }
      int v66 = 136315138;
      __int16 v67 = v21;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v59) < 0) {
        operator delete(*(void **)v57);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLLocationProvider_Type::Notification &)", "%s\n", v18);
      if (v18 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1005BE4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

BOOL sub_1005BE5E0(uint64_t a1, unsigned int a2)
{
  BOOL result = sub_10016E644(a2);
  if (!result) {
    sub_101A665DC();
  }
  *(_DWORD *)(a1 + 112) |= 0x40u;
  *(_DWORD *)(a1 + 52) = a2;
  return result;
}

uint64_t sub_1005BE624(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x1000u;
  if (!*(void *)(a1 + 88)) {
    operator new();
  }
  return *(void *)(a1 + 88);
}

void sub_1005BE680()
{
}

uint64_t sub_1005BE6A4(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 0x2000u;
  if (!*(void *)(a1 + 96)) {
    operator new();
  }
  return *(void *)(a1 + 96);
}

void sub_1005BE700()
{
}

uint64_t sub_1005BE724(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) |= 4u;
  if (!*(void *)(a1 + 24)) {
    operator new();
  }
  return *(void *)(a1 + 24);
}

void sub_1005BE780()
{
}

void sub_1005BE7A4(uint64_t a1, int32x4_t *a2, int *a3, void *a4, int a5)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    int v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      if (a2->i32[0]) {
        BOOL v8 = a2->i32[1] == 0;
      }
      else {
        BOOL v8 = 1;
      }
      int v9 = !v8;
      if (*a3) {
        BOOL v10 = a3[1] == 0;
      }
      else {
        BOOL v10 = 1;
      }
      int v11 = !v10;
      *(_DWORD *)buf = 67109376;
      int v69 = v9;
      __int16 v70 = 1024;
      LODWORD(v71) = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,RoutineVisit,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      if (a2->i32[0]) {
        BOOL v12 = a2->i32[1] == 0;
      }
      else {
        BOOL v12 = 1;
      }
      int v13 = !v12;
      if (*a3) {
        BOOL v14 = a3[1] == 0;
      }
      else {
        BOOL v14 = 1;
      }
      int v15 = !v14;
      v63[0] = 67109376;
      v63[1] = v13;
      __int16 v64 = 1024;
      int v65 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLVisit *, const BOOL)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return;
  }
  sub_100168850(v63);
  v20 = (__n128 *)sub_10016BA10();
  sub_100168854(v20, v51);
  int v50 = 4;
  sub_100165AD4((uint64_t)v63, (unsigned int *)&v50, a2, a3, (uint64_t *)v51);
  v67 |= 2u;
  uint64_t v21 = v66;
  if (!v66) {
    operator new();
  }
  *(_DWORD *)(v66 + 492) |= 0x800u;
  uint64_t v22 = *(void *)(v21 + 352);
  if (!v22) {
    operator new();
  }
  *(_DWORD *)(v22 + 184) |= 0x40000u;
  uint64_t v23 = *(void *)(v22 + 144);
  if (!v23) {
    operator new();
  }
  *(_DWORD *)(v23 + 28) |= 1u;
  *(_DWORD *)(v23 + 8) = -1;
  if (!a5)
  {
    if (sub_10016E644(1u))
    {
      int v24 = 1;
      goto LABEL_47;
    }
LABEL_72:
    __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9753, "::CLP::LogEntry::PrivateData::RoutineVisitNotification_NotificationType_IsValid(value)");
  }
  if (!sub_10016E644(2u)) {
    goto LABEL_72;
  }
  int v24 = 2;
LABEL_47:
  int v25 = *(_DWORD *)(v23 + 28);
  *(_DWORD *)(v23 + 12) = v24;
  *(_DWORD *)(v23 + 28) = v25 | 6;
  uint64_t v26 = *(void *)(v23 + 16);
  if (!v26) {
    operator new();
  }
  *(_DWORD *)(v26 + 20) |= 1u;
  uint64_t v27 = *(void *)(v26 + 8);
  if (!v27) {
    operator new();
  }
  sub_101462648(a4, v27);
  int v28 = sub_100168A44(a1);
  if (*(unsigned char *)(a1 + 8))
  {
    int v29 = v28;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    unsigned int v30 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64(&v50, &v52);
      if (SBYTE3(v56) >= 0) {
        int v31 = &v52;
      }
      else {
        int v31 = v52;
      }
      LODWORD(v43[0]) = a2->i32[0];
      sub_101522E48((int *)v43, v48);
      if (v49 >= 0) {
        int v32 = v48;
      }
      else {
        int v32 = (void **)v48[0];
      }
      int v45 = *a3;
      int v33 = __p;
      sub_101522E48(&v45, __p);
      if (v47 < 0) {
        int v33 = (void **)__p[0];
      }
      uint64_t v34 = sub_10016BA10();
      double v35 = sub_10018202C(v34);
      *(_DWORD *)buf = 67110402;
      int v69 = v29;
      __int16 v70 = 2080;
      __int16 v71 = v31;
      __int16 v72 = 2080;
      __int16 v73 = v32;
      __int16 v74 = 2080;
      __int16 v75 = v33;
      __int16 v76 = 1024;
      int v77 = a5;
      __int16 v78 = 2050;
      double v79 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,RoutineVisit,success,%d,message_type,%s,from,%s,to,%s,isLOI,%d,propagation_us,%{public}.3f", buf, 0x36u);
      if (v47 < 0) {
        operator delete(__p[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      if (SBYTE3(v56) < 0) {
        operator delete(v52);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v36 = v48;
      sub_101522B64(&v50, v48);
      if (v49 < 0) {
        int v36 = (void **)v48[0];
      }
      int v45 = a2->i32[0];
      CFStringRef v37 = __p;
      sub_101522E48(&v45, __p);
      if (v47 < 0) {
        CFStringRef v37 = (void **)__p[0];
      }
      int v42 = *a3;
      uint64_t v38 = v43;
      sub_101522E48(&v42, v43);
      if (v44 < 0) {
        uint64_t v38 = (void **)v43[0];
      }
      uint64_t v39 = sub_10016BA10();
      double v40 = sub_10018202C(v39);
      LODWORD(v52) = 67110402;
      HIDWORD(v52) = v29;
      __int16 v53 = 2080;
      int v54 = v36;
      __int16 v55 = 2080;
      char v56 = v37;
      __int16 v57 = 2080;
      __int16 v58 = v38;
      __int16 v59 = 1024;
      int v60 = a5;
      __int16 v61 = 2050;
      double v62 = v40;
      int v41 = (char *)_os_log_send_and_compose_impl();
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      if (v47 < 0) {
        operator delete(__p[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLVisit *, const BOOL)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
  }
  sub_1001687EC(v63);
}

void sub_1005BEED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1005BF010(uint64_t a1, int32x4_t *a2, int *a3, void *a4)
{
  if (*(void *)(a1 + 16))
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v6 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a2->i32[0]) {
          BOOL v7 = a2->i32[1] == 0;
        }
        else {
          BOOL v7 = 1;
        }
        int v8 = !v7;
        if (*a3) {
          BOOL v9 = a3[1] == 0;
        }
        else {
          BOOL v9 = 1;
        }
        int v10 = !v9;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)__int16 v71 = v8;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,InertialOdometry,silo entry invalid,from_valid,%d,to_valid,%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        if (a2->i32[0]) {
          BOOL v11 = a2->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a3) {
          BOOL v13 = a3[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        v65[0] = 67109376;
        v65[1] = v12;
        __int16 v66 = 1024;
        int v67 = v14;
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CMOdometry *)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    else
    {
      sub_100168850(v65);
      BOOL v18 = (__n128 *)sub_10016BA10();
      sub_100168854(v18, v61);
      int v60 = 4;
      sub_100165AD4((uint64_t)v65, (unsigned int *)&v60, a2, a3, (uint64_t *)v61);
      v69 |= 2u;
      uint64_t v19 = v68;
      if (!v68) {
        operator new();
      }
      *(_DWORD *)(v68 + 492) |= 0x800u;
      uint64_t v20 = *(void *)(v19 + 352);
      if (!v20) {
        operator new();
      }
      *(_DWORD *)(v20 + 184) |= 0x80000u;
      uint64_t v21 = *(void *)(v20 + 152);
      if (!v21) {
        operator new();
      }
      *(_DWORD *)(v21 + 28) |= 1u;
      *(_DWORD *)(v21 + 8) = -1;
      if (!sub_1001A4C4C(1u)) {
        __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9873, "::CLP::LogEntry::PrivateData::InertialOdometryNotification_NotificationType_IsValid(value)");
      }
      int v22 = *(_DWORD *)(v21 + 28);
      *(_DWORD *)(v21 + 12) = 1;
      *(_DWORD *)(v21 + 28) = v22 | 6;
      uint64_t v23 = *(int **)(v21 + 16);
      if (!v23) {
        operator new();
      }
      int v24 = v23[5];
      uint64_t v25 = v23[4];
      if ((int)v25 >= v24)
      {
        if (v24 == v23[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v23 + 2), v24 + 1);
          int v24 = v23[5];
        }
        v23[5] = v24 + 1;
        sub_1005C1544();
      }
      uint64_t v26 = *((void *)v23 + 1);
      v23[4] = v25 + 1;
      sub_10146BA50(a4, *(void *)(v26 + 8 * v25));
      int v27 = sub_100168A44(a1);
      if (*(unsigned char *)(a1 + 8))
      {
        int v28 = v27;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        int v29 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          sub_101522B64(&v60, v62);
          if (v62[23] >= 0) {
            unsigned int v30 = v62;
          }
          else {
            unsigned int v30 = *(unsigned char **)v62;
          }
          LODWORD(v53[0]) = a2->i32[0];
          sub_101522E48((int *)v53, v58);
          if (v59 >= 0) {
            int v31 = v58;
          }
          else {
            int v31 = (void **)v58[0];
          }
          int v55 = *a3;
          int v32 = __p;
          sub_101522E48(&v55, __p);
          if (v57 < 0) {
            int v32 = (void **)__p[0];
          }
          uint64_t v33 = sub_10016BA10();
          double v34 = sub_10018202C(v33);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)__int16 v71 = v28;
          *(_WORD *)&v71[4] = 2080;
          *(void *)&v71[6] = v30;
          *(_WORD *)&v71[14] = 2080;
          *(void *)&v71[16] = v31;
          *(_WORD *)&v71[24] = 2080;
          *(void *)&v71[26] = v32;
          __int16 v72 = 2050;
          double v73 = v34;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,InertialOdometry,success,%d,message_type,%s,from,%s,to,%s,propagation_us,%{public}.3f", buf, 0x30u);
          if (v57 < 0) {
            operator delete(__p[0]);
          }
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          if ((v62[23] & 0x80000000) != 0) {
            operator delete(*(void **)v62);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          sub_101522B64(&v60, v58);
          if (v59 >= 0) {
            int v41 = v58;
          }
          else {
            int v41 = (void **)v58[0];
          }
          int v55 = a2->i32[0];
          int v42 = __p;
          sub_101522E48(&v55, __p);
          if (v57 < 0) {
            int v42 = (void **)__p[0];
          }
          int v52 = *a3;
          int v43 = v53;
          sub_101522E48(&v52, v53);
          if (v54 < 0) {
            int v43 = (void **)v53[0];
          }
          uint64_t v44 = sub_10016BA10();
          double v45 = sub_10018202C(v44);
          *(_DWORD *)double v62 = 67110146;
          *(_DWORD *)&v62[4] = v28;
          *(_WORD *)&v62[8] = 2080;
          *(void *)&v62[10] = v41;
          *(_WORD *)&v62[18] = 2080;
          *(void *)&v62[20] = v42;
          *(_WORD *)&v62[28] = 2080;
          *(void *)&v62[30] = v43;
          __int16 v63 = 2050;
          double v64 = v45;
          uint64_t v46 = (char *)_os_log_send_and_compose_impl();
          if (v54 < 0) {
            operator delete(v53[0]);
          }
          if (v57 < 0) {
            operator delete(__p[0]);
          }
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CMOdometry *)", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        double v35 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          id v36 = [a4 description];
          uint64_t v37 = sub_10016BA10();
          *(_DWORD *)double v62 = 0;
          double v38 = sub_10016BA54(v37, v62);
          uint64_t v39 = sub_10016BA10();
          double v40 = sub_10018202C(v39);
          *(_DWORD *)buf = 138543874;
          *(void *)__int16 v71 = v36;
          *(_WORD *)&v71[8] = 2050;
          *(double *)&v71[10] = v38;
          *(_WORD *)&v71[18] = 2050;
          *(double *)&v71[20] = v40;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#locctl,#rec,#pbio CMOdometry, %{public}@, now, %{public}.3f, propagation_us, %{public}.3f", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          id v47 = [a4 description];
          double v48 = sub_1005BFA38();
          uint64_t v49 = sub_10016BA10();
          double v50 = sub_10018202C(v49);
          *(_DWORD *)double v62 = 138543874;
          *(void *)&v62[4] = v47;
          *(_WORD *)&v62[12] = 2050;
          *(double *)&v62[14] = v48;
          *(_WORD *)&v62[22] = 2050;
          *(double *)&v62[24] = v50;
          int v51 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CMOdometry *)", "%s\n", v51);
          if (v51 != (char *)buf) {
            free(v51);
          }
        }
      }
      sub_1001687EC(v65);
    }
  }
}

void sub_1005BF900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

double sub_1005BFA38()
{
  uint64_t v0 = sub_10016BA10();
  int v2 = 0;
  return sub_10016BA54(v0, &v2);
}

void sub_1005BFA64(uint64_t a1, int32x4_t *a2, int *a3, int *a4)
{
  if (*(void *)(a1 + 16))
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a2))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v6 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a2->i32[0]) {
          BOOL v7 = a2->i32[1] == 0;
        }
        else {
          BOOL v7 = 1;
        }
        int v8 = !v7;
        if (*a3) {
          BOOL v9 = a3[1] == 0;
        }
        else {
          BOOL v9 = 1;
        }
        int v10 = !v9;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v8;
        __int16 v70 = 1024;
        LODWORD(v71) = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,MapRouteHintNotification,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        if (a2->i32[0]) {
          BOOL v11 = a2->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a3) {
          BOOL v13 = a3[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        v64[0] = 67109376;
        v64[1] = v12;
        __int16 v65 = 1024;
        int v66 = v14;
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLMapsRouteHintData &)", "%s\n", v15);
        if (v15 != (char *)&buf) {
          free(v15);
        }
      }
    }
    else
    {
      sub_100168850(v64);
      BOOL v18 = (__n128 *)sub_10016BA10();
      sub_100168854(v18, v52);
      int v51 = 4;
      sub_100165AD4((uint64_t)v64, (unsigned int *)&v51, a2, a3, (uint64_t *)v52);
      v68 |= 2u;
      uint64_t v19 = v67;
      if (!v67) {
        operator new();
      }
      *(_DWORD *)(v67 + 492) |= 0x800u;
      uint64_t v20 = *(void *)(v19 + 352);
      if (!v20) {
        operator new();
      }
      *(_DWORD *)(v20 + 184) |= 0x200000u;
      uint64_t v21 = *(void *)(v20 + 168);
      if (!v21) {
        operator new();
      }
      *(_DWORD *)(v21 + 28) |= 1u;
      *(_DWORD *)(v21 + 8) = -1;
      if (!sub_1001A4C4C(1u)) {
        __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 10189, "::CLP::LogEntry::PrivateData::MapRouteHintNotification_NotificationType_IsValid(value)");
      }
      int v22 = *(_DWORD *)(v21 + 28);
      *(_DWORD *)(v21 + 12) = 1;
      *(_DWORD *)(v21 + 28) = v22 | 6;
      uint64_t v23 = *(void *)(v21 + 16);
      if (!v23) {
        operator new();
      }
      *(_DWORD *)(v23 + 20) |= 1u;
      uint64_t v24 = *(void *)(v23 + 8);
      if (!v24) {
        operator new();
      }
      uint64_t v25 = sub_10016BA10();
      LODWORD(v53) = 0;
      uint64_t buf = sub_10016BA54(v25, &v53);
      uint64_t v26 = sub_10016BA10();
      LODWORD(v49[0]) = 1;
      __int16 v53 = COERCE_VOID_(sub_10016BA54(v26, v49));
      sub_10145F5EC((uint64_t)a4, v24, &buf, (double *)&v53);
      int v27 = sub_100168A44(a1);
      if (*(unsigned char *)(a1 + 8))
      {
        int v28 = v27;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        int v29 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          sub_101522B64(&v51, &v53);
          if (SBYTE3(v57) >= 0) {
            unsigned int v30 = &v53;
          }
          else {
            unsigned int v30 = v53;
          }
          LODWORD(v44[0]) = a2->i32[0];
          sub_101522E48((int *)v44, v49);
          if (v50 >= 0) {
            int v31 = v49;
          }
          else {
            int v31 = (void **)v49[0];
          }
          int v46 = *a3;
          sub_101522E48(&v46, __p);
          if (v48 >= 0) {
            int v32 = __p;
          }
          else {
            int v32 = (void **)__p[0];
          }
          int v33 = *a4;
          uint64_t v34 = sub_10016BA10();
          double v35 = sub_10018202C(v34);
          LODWORD(buf) = 67110402;
          HIDWORD(buf) = v28;
          __int16 v70 = 2080;
          __int16 v71 = v30;
          __int16 v72 = 2080;
          double v73 = v31;
          __int16 v74 = 2080;
          __int16 v75 = v32;
          __int16 v76 = 1024;
          int v77 = v33;
          __int16 v78 = 2050;
          double v79 = v35;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,MapRouteHintNotification,success,%d,message_type,%s,from,%s,to,%s,routeType,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
          if (v48 < 0) {
            operator delete(__p[0]);
          }
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          if (SBYTE3(v57) < 0) {
            operator delete(v53);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          id v36 = v49;
          sub_101522B64(&v51, v49);
          if (v50 < 0) {
            id v36 = (void **)v49[0];
          }
          int v46 = a2->i32[0];
          uint64_t v37 = __p;
          sub_101522E48(&v46, __p);
          if (v48 < 0) {
            uint64_t v37 = (void **)__p[0];
          }
          int v43 = *a3;
          sub_101522E48(&v43, v44);
          if (v45 >= 0) {
            double v38 = v44;
          }
          else {
            double v38 = (void **)v44[0];
          }
          int v39 = *a4;
          uint64_t v40 = sub_10016BA10();
          double v41 = sub_10018202C(v40);
          LODWORD(v53) = 67110402;
          HIDWORD(v53) = v28;
          __int16 v54 = 2080;
          int v55 = v36;
          __int16 v56 = 2080;
          char v57 = v37;
          __int16 v58 = 2080;
          char v59 = v38;
          __int16 v60 = 1024;
          int v61 = v39;
          __int16 v62 = 2050;
          double v63 = v41;
          int v42 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(v44[0]);
          }
          if (v48 < 0) {
            operator delete(__p[0]);
          }
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const CLMapsRouteHintData &)", "%s\n", v42);
          if (v42 != (char *)&buf) {
            free(v42);
          }
        }
      }
      sub_1001687EC(v64);
    }
  }
}

void sub_1005C01BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t sub_1005C02FC(uint64_t result, uint64_t a2, uint64_t *a3, char a4, char a5, char a6, char a7, int *a8, unsigned int *a9, unsigned int *a10, int a11, int *a12, uint64_t a13)
{
  uint64_t v47 = result;
  if (!*(void *)(result + 16)) {
    return result;
  }
  sub_100168850(v51);
  uint64_t v20 = (__n128 *)sub_10016BA10();
  sub_100168854(v20, v50);
  unsigned int v49 = 1;
  *(_DWORD *)uint64_t buf = 21;
  v48[0] = 21;
  v48[1] = sub_10016A9AC((int *)buf);
  sub_100165AD4((uint64_t)v51, &v49, v48, v48, (uint64_t *)v50);
  v53 |= 2u;
  uint64_t v21 = v52;
  if (!v52) {
    operator new();
  }
  *(_DWORD *)(v52 + 492) |= 0x800u;
  uint64_t v22 = *(void *)(v21 + 352);
  if (!v22) {
    operator new();
  }
  *(_DWORD *)(v22 + 184) |= 0x10u;
  uint64_t v23 = *(void *)(v22 + 32);
  if (!v23) {
    operator new();
  }
  *(_DWORD *)(v23 + 28) |= 1u;
  *(_DWORD *)(v23 + 8) = -1;
  if (!sub_1001662E0(4u)) {
    __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6520, "::CLP::LogEntry::PrivateData::SystemNotification_NotificationType_IsValid(value)");
  }
  int v24 = *(_DWORD *)(v23 + 28);
  *(_DWORD *)(v23 + 12) = 4;
  *(_DWORD *)(v23 + 28) = v24 | 6;
  uint64_t v25 = *(void *)(v23 + 16);
  if (!v25) {
    operator new();
  }
  *(_DWORD *)(v25 + 72) |= 0x40u;
  uint64_t v26 = *(void *)(v25 + 56);
  if (!v26) {
    operator new();
  }
  *(_DWORD *)(v26 + 20) |= 1u;
  uint64_t v27 = *(void *)(v26 + 8);
  if (!v27) {
    operator new();
  }
  *(_DWORD *)(v27 + 64) |= 1u;
  uint64_t v28 = *(void *)(v27 + 8);
  if (!v28) {
    operator new();
  }
  sub_10016D01C(a2, v28);
  *(_DWORD *)(v26 + 20) |= 1u;
  uint64_t v29 = *(void *)(v26 + 8);
  if (!v29) {
    operator new();
  }
  uint64_t v30 = *a3;
  *(_DWORD *)(v29 + 64) |= 2u;
  *(void *)(v29 + 16) = v30;
  *(_DWORD *)(v26 + 20) |= 1u;
  *(_DWORD *)(v29 + 64) |= 4u;
  *(unsigned char *)(v29 + 24) = a4;
  *(_DWORD *)(v26 + 20) |= 1u;
  *(_DWORD *)(v29 + 64) |= 8u;
  *(unsigned char *)(v29 + 25) = a5;
  *(_DWORD *)(v26 + 20) |= 1u;
  *(_DWORD *)(v29 + 64) |= 0x10u;
  *(unsigned char *)(v29 + 26) = a6;
  *(_DWORD *)(v26 + 20) |= 1u;
  *(_DWORD *)(v29 + 64) |= 0x20u;
  *(unsigned char *)(v29 + 27) = a7;
  *(_DWORD *)(v26 + 20) |= 1u;
  unsigned int v31 = sub_1005C0B3C(a8);
  if (!sub_100F1401C(v31))
  {
    int v43 = "::CLP::LogEntry::PrivateData::DynamicsMode_IsValid(value)";
    int v44 = 6039;
    char v45 = "set_dynamics_mode";
    goto LABEL_45;
  }
  *(_DWORD *)(v29 + 64) |= 0x40u;
  *(_DWORD *)(v29 + 28) = v31;
  *(_DWORD *)(v26 + 20) |= 1u;
  uint64_t v32 = *(void *)(v26 + 8);
  if (!v32) {
    operator new();
  }
  int v33 = sub_1001647E0((unsigned int *)(a13 + 8));
  if (!sub_100164354(v33))
  {
    int v43 = "::CLP::LogEntry::PrivateData::DominantMotionModeType_IsValid(value)";
    int v44 = 6062;
    char v45 = "set_motion_activity";
    goto LABEL_45;
  }
  *(_DWORD *)(v32 + 64) |= 0x80u;
  *(_DWORD *)(v32 + 32) = v33;
  *(_DWORD *)(v26 + 20) |= 1u;
  uint64_t v34 = *(void *)(v26 + 8);
  if (!v34) {
    operator new();
  }
  unsigned int v35 = sub_1005C0D08(a9 + 2);
  if (!sub_1001662E0(v35))
  {
    int v43 = "::CLP::LogEntry::PrivateData::IODerivedMotionActivity_IsValid(value)";
    int v44 = 6085;
    char v45 = "set_io_derived_motion_activity";
    goto LABEL_45;
  }
  *(_DWORD *)(v34 + 64) |= 0x100u;
  *(_DWORD *)(v34 + 36) = v35;
  *(_DWORD *)(v26 + 20) |= 1u;
  uint64_t v36 = *(void *)(v26 + 8);
  if (!v36) {
    operator new();
  }
  uint64_t v37 = *(void *)a9;
  *(_DWORD *)(v36 + 64) |= 0x200u;
  *(void *)(v36 + 40) = v37;
  *(_DWORD *)(v26 + 20) |= 1u;
  unsigned int v38 = sub_10016D640(a10);
  if (!sub_10016D634(v38))
  {
    int v43 = "::CLP::LogEntry::PrivateData::LocationType_IsValid(value)";
    int v44 = 6130;
    char v45 = "set_original_location_type";
    goto LABEL_45;
  }
  *(_DWORD *)(v36 + 64) |= 0x400u;
  *(_DWORD *)(v36 + 48) = v38;
  *(_DWORD *)(v26 + 20) |= 1u;
  int v39 = *(_DWORD **)(v26 + 8);
  if (!v39) {
    operator new();
  }
  v39[16] |= 0x800u;
  v39[13] = a11;
  *(_DWORD *)(v26 + 20) |= 1u;
  unsigned int v40 = sub_1005C0ECC(a12);
  if (!sub_1001A4C58(v40))
  {
    int v43 = "::CLP::LogEntry::PrivateData::LCFusionState_IsValid(value)";
    int v44 = 6175;
    char v45 = "set_fusion_state";
LABEL_45:
    __assert_rtn(v45, "CLPLocationController.pb.h", v44, v43);
  }
  v39[16] |= 0x1000u;
  v39[14] = v40;
  int v41 = sub_100168A44(v47);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  int v42 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v57 = v41;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "#locctl,#rec,recordLCFusionStatus,success,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    int v54 = 67240192;
    int v55 = v41;
    int v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordLCFusionStatus(const CLDaemonLocation &, const double &, const BOOL, const BOOL, const BOOL, const BOOL, const cllcf::LCFusionDynamicsMode::DynamicsMode &, const cllcf::IODerivedMotionActivityState &, const CLLocationType &, const int, const cllcf::LCFusionState &, const cllcf::TaggedMotionActivity &)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  return sub_1001687EC(v51);
}

void sub_1005C0A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C0B3C(int *a1)
{
  if (*a1 < 0xB) {
    return (*a1 + 1);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  int v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertLCFusionDynamicsModeTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::DynamicsMode CLLocationControllerRecorder::convertLCFusionDynamicsModeTypeToProtobuf(const cllcf::LCFusionDynamicsMode::DynamicsMode &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1005C0D08(unsigned int *a1)
{
  uint64_t result = *a1;
  if (result >= 5)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    int v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *a1;
      *(_DWORD *)uint64_t buf = 67109120;
      int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertIODerivedMotionActivityTypeToProtobuf,unhandled type,%d", buf, 8u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::IODerivedMotionActivity CLLocationControllerRecorder::convertIODerivedMotionActivityTypeToProtobuf(const cllcf::IODerivedMotionActivity &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005C0ECC(int *a1)
{
  if (*a1 < 5) {
    return (*a1 + 1);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  int v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertLCFusionStateTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::LCFusionState CLLocationControllerRecorder::convertLCFusionStateTypeToProtobuf(const cllcf::LCFusionState &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1005C1098(uint64_t result, int a2, char a3)
{
  *(void *)uint64_t result = 0;
  *(unsigned char *)(result + 8) = a3;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 32) = 0xBFF0000000000000;
  if (a2) {
    operator new();
  }
  return result;
}

void sub_1005C1128()
{
}

void sub_1005C119C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1005C11CC()
{
}

void sub_1005C120C()
{
}

uint64_t *sub_1005C1230(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1005C1288(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1005C1270(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1005C1288(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      uint64_t result = sub_1005C1314(v5, v6, v4 + 7, v4 + 7);
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1005C1314(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  v6 = sub_1005C139C(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_1000EDF90(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1005C139C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1005C1544()
{
}

void sub_1005C1584()
{
}

void sub_1005C15A8(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[2];
    a2[2] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *a2;
    *a2 = 0;
    if (v4) {
      sub_10045F2A8((uint64_t)a2, v4);
    }
    operator delete();
  }
}

void sub_1005C1638()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D23BA0;
      v0[3] = unk_101D23BB0;
      v0[4] = xmmword_101D23BC0;
      v0[0] = xmmword_101D23B80;
      v0[1] = unk_101D23B90;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1005C1718(_Unwind_Exception *a1)
{
}

void sub_1005C19F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_1005C1A1C((uint64_t)&a12);
  *(void *)(v12 - 40) = &a9;
  sub_1002E4F50((void ***)(v12 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_1005C1A1C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_1002E4F50(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1005C1E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

char *sub_1005C2114(char *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a3;
  *((void *)__dst + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return __dst;
}

void sub_1005C2188(id a1)
{
  qword_1024195D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "PeopleDensity");
}

uint64_t sub_1005C21B8(uint64_t a1)
{
  sub_1005C21F4(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1005C21F4(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1005C2238((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void sub_1005C2238(uint64_t a1)
{
  int v2 = (void **)(a1 + 24);
  sub_1002E4F50(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_1005C2280(uint64_t a1, uint64_t *a2)
{
  sub_1005C2324(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  int v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *int v7 = 0;
    v7[1] = 0;
  }
}

void sub_1005C2324(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1005C21F4(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *sub_1005C237C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    BOOL v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  sub_1005C262C((uint64_t)v26, 0);
  return i;
}

void sub_1005C2614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1005C262C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1005C262C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1005C2238((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_1005C2684(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  float v18 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1002E5328(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint8x8_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  float v17 = &v10[40 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(v11, *(void **)a2, *((void *)a2 + 1));
    uint8x8_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint8x8_t v11 = v12;
  }
  *(_OWORD *)&v10[40 * v4 + 24] = *(long long *)((char *)a2 + 24);
  uint64_t v16 = v11 + 40;
  sub_1005C27B8(a1, v15);
  uint64_t v13 = a1[1];
  sub_1002E549C((uint64_t)v15);
  return v13;
}

void sub_1005C27A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002E549C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C27B8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1005C2830((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1005C2830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1005C28DC((uint64_t)v11);
  return v9;
}

uint64_t sub_1005C28DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002E5454(a1);
  }
  return a1;
}

void sub_1005C2914(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_1022BD148;
  sub_100513074(a1 + 8, "CLFileUpdate", 1, 1);
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = 0;
  id v8 = [[[a2 silo] newTimer];
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 64) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 72) = _Q1;
  *(_OWORD *)(a1 + 88) = _Q1;
  *(_OWORD *)(a1 + 104) = _Q1;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_WORD *)(a1 + 240) = 0;
  [*(id *)(a1 + 24) silo];
  [*(id *)(a1 + 24) silo];
  operator new();
}

void sub_1005C2D38(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 232);
  *(void *)(v1 + 232) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 224);
  *(void *)(v1 + 224) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*(void **)(v1 + 200));
  }
  if (*(char *)(v1 + 199) < 0) {
    operator delete(*(void **)(v1 + 176));
  }
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*(void **)(v1 + 152));
  }
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v3);
  }
  uint64_t v7 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_10051310C(v2);
  _Unwind_Resume(a1);
}

void sub_1005C2E60(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BD190);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFileUpdate::onDownloaded", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BD190);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      long long v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFileUpdate::onDownloaded\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_1005C535C(a3, v5, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005C3014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C3034(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  (*(void (**)(uint64_t))(*(void *)(v1 + 8) + 16))(v1 + 8);
  sub_100103240();
  if (sub_10010145C() && *(unsigned char *)(v1 + 240) && *(unsigned char *)(v1 + 241)
    || objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v1 + 24), "vendor"), "proxyForService:", @"CLDaemonStatus"), "syncgetReachability"))
  {
    uint64_t v2 = (uint64_t *)(v1 + 152);
    uint64_t v3 = (void *)(v1 + 152);
    if (*(char *)(v1 + 175) < 0) {
      uint64_t v3 = (void *)*v2;
    }
    unint64_t v4 = (uint64_t *)(v1 + 200);
    uint64_t v5 = v1 + 200;
    if (*(char *)(v1 + 223) < 0) {
      uint64_t v5 = *v4;
    }
    if ((*(unsigned int (**)(void, void *, uint64_t, uint64_t))(**(void **)(v1 + 48) + 16))(*(void *)(v1 + 48), v3, v5, v1 + 72))
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      uint64_t v6 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = (void *)(v1 + 152);
        if (*(char *)(v1 + 175) < 0) {
          uint64_t v7 = (void *)*v2;
        }
        uint64_t v8 = v1 + 200;
        if (*(char *)(v1 + 223) < 0) {
          uint64_t v8 = *v4;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        unint64_t v21 = v7;
        __int16 v22 = 2082;
        uint64_t v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLFU,downloading from %{public}s to %{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLFileUpdate::CLFileUpdate(id<CLIntersiloUniverse>, OnUpdated, void *)_block_invoke", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      *(unsigned char *)(v1 + 120) = 1;
      char v9 = 0;
      *(CFAbsoluteTime *)(v1 + 104) = CFAbsoluteTimeGetCurrent();
      uint64_t v10 = 1;
    }
    else
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      int v11 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v12 = (void *)(v1 + 152);
        if (*(char *)(v1 + 175) < 0) {
          __int16 v12 = (void *)*v2;
        }
        uint64_t v13 = v1 + 200;
        if (*(char *)(v1 + 223) < 0) {
          uint64_t v13 = *v4;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        unint64_t v21 = v12;
        __int16 v22 = 2082;
        uint64_t v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU,could not download from %{public}s to %{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        float v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLFileUpdate::CLFileUpdate(id<CLIntersiloUniverse>, OnUpdated, void *)_block_invoke", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      char v9 = 0;
      uint64_t v10 = 3;
    }
  }
  else
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    __int16 v14 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v15 = (void *)(v1 + 152);
      if (*(char *)(v1 + 175) < 0) {
        unint64_t v15 = (void *)*v15;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      unint64_t v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLFU,data reachability is not available - not downloading %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLFileUpdate::CLFileUpdate(id<CLIntersiloUniverse>, OnUpdated, void *)_block_invoke", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    uint64_t v10 = 0;
    char v9 = 1;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 24))(v1 + 8);
  if ((v9 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 32))(v1, v10, *(void *)(v1 + 40));
  }
  return result;
}

void sub_1005C365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005C3698(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BD190);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFileUpdate::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BD190);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFileUpdate::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1005C4E24(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005C3854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C3874(uint64_t a1, int *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 24), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BD190);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFileUpdate::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BD190);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFileUpdate::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1005C3BB8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005C3A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C3A54(uint64_t a1)
{
  *(void *)a1 = off_1022BD148;
  sub_1005C70E0(a1);

  uint64_t v2 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_10051310C(a1 + 8);
  return a1;
}

void sub_1005C3B80(uint64_t a1)
{
  sub_1005C3A54(a1);

  operator delete();
}

uint64_t sub_1005C3BB8(uint64_t a1, uint64_t a2, int *a3, unsigned char *a4)
{
  uint64_t v7 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  if (qword_1024195F0 != -1) {
    dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
  }
  uint64_t v8 = qword_1024195F8;
  if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    int v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLFU,onCompanionNotification, notification, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (*a3 == 5)
  {
    sub_100103240();
    if (sub_10010145C())
    {
      *(unsigned char *)(a1 + 241) = *a4;
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      uint64_t v10 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *(unsigned __int8 *)(a1 + 241);
        __int16 v12 = (void *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          __int16 v12 = (void *)*v12;
        }
        *(_DWORD *)uint64_t buf = 67240450;
        int v17 = v11;
        __int16 v18 = 2082;
        uint64_t v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLFU,fCompanionIsNearby,%{public}d,fDownloadDst,%{public}s", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        unint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      if (*(unsigned char *)(a1 + 241)) {
        sub_1005C3FC0(a1);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_1005C3F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C3FC0(uint64_t a1)
{
  uint64_t v3 = (char *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)&v51[1] = a1 + 8;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 8);
  __int16 v52 = 256;
  if (v3[167] < 0)
  {
    if (*(void *)(a1 + 160))
    {
LABEL_3:
      if (!sub_1005C4EF0(a1)) {
        return (*(uint64_t (**)(char *))(*(void *)v3 + 24))(v3);
      }
      uint64_t v4 = v3 + 144;
      if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLDaemonStatus"), "syncgetReachability") == 2)
      {
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        uint64_t v5 = qword_1024195F8;
        if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100103240();
          int v6 = sub_10010145C();
          uint64_t v7 = "(WiFi)";
          if (v6) {
            uint64_t v7 = "(WiFi or companion nearby)";
          }
          uint64_t v8 = v3 + 144;
          if (*(char *)(a1 + 175) < 0) {
            uint64_t v8 = *(const char **)v4;
          }
          double v9 = *(double *)(a1 + 88);
          *(_DWORD *)uint64_t buf = 136446722;
          double v64 = v7;
          __int16 v65 = 2082;
          double v66 = *(double *)&v8;
          __int16 v67 = 2050;
          double v68 = v9;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLFU,we are now on large reachability %{public}s, scheduling a download for %{public}s (period %{public}.3f)", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
          }
          sub_100103240();
          int v39 = sub_10010145C();
          unsigned int v40 = "(WiFi)";
          if (v39) {
            unsigned int v40 = "(WiFi or companion nearby)";
          }
          int v41 = v3 + 144;
          if (*(char *)(a1 + 175) < 0) {
            int v41 = *(const char **)v4;
          }
          double v42 = *(double *)(a1 + 88);
          int v53 = 136446722;
          int v54 = v40;
          __int16 v55 = 2082;
          double v56 = *(double *)&v41;
          __int16 v57 = 2050;
          double v58 = v42;
          int v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v43);
          if (v43 != (char *)buf) {
            free(v43);
          }
        }
        uint64_t v10 = (double *)(a1 + 88);
      }
      else
      {
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        int v13 = qword_1024195F8;
        if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v14 = v3 + 144;
          if (*(char *)(a1 + 175) < 0) {
            __int16 v14 = *(const char **)v4;
          }
          double v15 = *(double *)(a1 + 80);
          *(_DWORD *)uint64_t buf = 136446466;
          double v64 = v14;
          __int16 v65 = 2050;
          double v66 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLFU,we are now on short reachability (Cell), scheduling a download for %{public}s (period %{public}.3f)", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
          }
          uint64_t v36 = v3 + 144;
          if (*(char *)(a1 + 175) < 0) {
            uint64_t v36 = *(const char **)v4;
          }
          double v37 = *(double *)(a1 + 80);
          int v53 = 136446466;
          int v54 = v36;
          __int16 v55 = 2050;
          double v56 = v37;
          unsigned int v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        uint64_t v10 = (double *)(a1 + 80);
      }
      double v16 = *v10;
      v51[0] = -1.0;
      double Current = CFAbsoluteTimeGetCurrent();
      double v18 = -1.0;
      if (v16 <= 0.0) {
        goto LABEL_73;
      }
      if (sub_1005C5270(a1, v51))
      {
        double v19 = v51[0];
        if (v51[0] >= Current - v16)
        {
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
          }
          double v18 = v16 + v19;
          uint64_t v26 = qword_1024195F8;
          if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
          {
            char v27 = v3 + 144;
            if (*(char *)(a1 + 175) < 0) {
              char v27 = *(const char **)v4;
            }
            *(_DWORD *)uint64_t buf = 136447234;
            double v64 = v27;
            __int16 v65 = 2050;
            double v66 = v16;
            __int16 v67 = 2050;
            double v68 = v51[0];
            __int16 v69 = 2050;
            double v70 = v18;
            __int16 v71 = 2050;
            double v72 = v18 - Current;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CLFU,last %{public}s downloaded less than %{public}.3f seconds ago (%{public}.3f), scheduling download for %{public}.3f (%{public}.3f away)", buf, 0x34u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024195F0 != -1) {
              dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
            }
            unsigned int v49 = v3 + 144;
            if (*(char *)(a1 + 175) < 0) {
              unsigned int v49 = *(const char **)v4;
            }
            int v53 = 136447234;
            int v54 = v49;
            __int16 v55 = 2050;
            double v56 = v16;
            __int16 v57 = 2050;
            double v58 = v51[0];
            __int16 v59 = 2050;
            double v60 = v18;
            __int16 v61 = 2050;
            double v62 = v18 - Current;
            char v50 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v50);
            if (v50 != (char *)buf) {
              free(v50);
            }
          }
          goto LABEL_63;
        }
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        unint64_t v20 = qword_1024195F8;
        if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v21 = v3 + 144;
          if (*(char *)(a1 + 175) < 0) {
            unint64_t v21 = *(const char **)v4;
          }
          *(_DWORD *)uint64_t buf = 136446722;
          double v64 = v21;
          __int16 v65 = 2050;
          double v66 = v16;
          __int16 v67 = 2050;
          double v68 = v51[0];
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLFU,last %{public}s downloaded over %{public}.3f seconds ago (%{public}.3f), starting a download now", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2))
        {
LABEL_55:
          double v18 = Current;
LABEL_63:
          double v28 = *(double *)(a1 + 96);
          if (v28 >= 0.0 && v28 < v18)
          {
            if (qword_1024195F0 != -1) {
              dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
            }
            uint64_t v29 = qword_1024195F8;
            if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = v3 + 144;
              if (*(char *)(a1 + 175) < 0) {
                uint64_t v30 = *(const char **)v4;
              }
              double v31 = *(double *)(a1 + 96);
              *(_DWORD *)uint64_t buf = 136446722;
              double v64 = v30;
              __int16 v65 = 2050;
              double v66 = v31;
              __int16 v67 = 2050;
              double v68 = v28 - v31;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "CLFU,scheduled download %{public}s is after %{public}.3f deadline (%{public}.3f after) - overriding", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024195F0 != -1) {
                dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
              }
              int v46 = v3 + 144;
              if (*(char *)(a1 + 175) < 0) {
                int v46 = *(const char **)v4;
              }
              double v47 = *(double *)(a1 + 96);
              int v53 = 136446722;
              int v54 = v46;
              __int16 v55 = 2050;
              double v56 = v47;
              __int16 v57 = 2050;
              double v58 = v28 - v47;
              char v48 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v48);
              if (v48 != (char *)buf) {
                free(v48);
              }
            }
            double v18 = v28;
          }
LABEL_73:
          double v32 = *(double *)(a1 + 112);
          if (v32 > 0.0 && v32 > v18)
          {
            if (qword_1024195F0 != -1) {
              dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
            }
            int v33 = qword_1024195F8;
            if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v34 = v3 + 144;
              if (*(char *)(a1 + 175) < 0) {
                uint64_t v34 = *(const char **)v4;
              }
              *(_DWORD *)uint64_t buf = 136446722;
              double v64 = v34;
              __int16 v65 = 2050;
              double v66 = v32;
              __int16 v67 = 2050;
              double v68 = v32 - Current;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "CLFU,Throttling download %{public}s due to retry delay, scheduling download for %{public}.3f (%{public}.3f away)", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024195F0 != -1) {
                dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
              }
              if (*(char *)(a1 + 175) < 0) {
                uint64_t v4 = *(const char **)v4;
              }
              int v53 = 136446722;
              int v54 = v4;
              __int16 v55 = 2050;
              double v56 = v32;
              __int16 v57 = 2050;
              double v58 = v32 - Current;
              int v44 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v44);
              if (v44 != (char *)buf) {
                free(v44);
              }
            }
            double v18 = v32;
          }
          if (v18 > 0.0) {
            [*(id *)(a1 + 56) setNextFireTime:v18];
          }
          return (*(uint64_t (**)(char *))(*(void *)v3 + 24))(v3);
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        __int16 v22 = v3 + 144;
        if (*(char *)(a1 + 175) < 0) {
          __int16 v22 = *(const char **)v4;
        }
        int v53 = 136446722;
        int v54 = v22;
        __int16 v55 = 2050;
        double v56 = v16;
        __int16 v57 = 2050;
        double v58 = v51[0];
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v23);
      }
      else
      {
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        unint64_t v24 = qword_1024195F8;
        if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = (const char *)(a1 + 176);
          if (*(char *)(a1 + 199) < 0) {
            uint64_t v25 = *(const char **)v25;
          }
          *(_DWORD *)uint64_t buf = 136446210;
          double v64 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLFU,cannot verify existence of %{public}s, attempting to re-download now", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_55;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        char v45 = (const char *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          char v45 = *(const char **)v45;
        }
        int v53 = 136446210;
        int v54 = v45;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v23);
      }
      if (v23 != (char *)buf) {
        free(v23);
      }
      goto LABEL_55;
    }
  }
  else if (v3[167])
  {
    goto LABEL_3;
  }
  if (qword_1024195F0 != -1) {
    dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
  }
  int v11 = qword_1024195F8;
  if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLFU,no download source set - not downloading", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    LOWORD(v53) = 0;
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::scheduleDownload()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return (*(uint64_t (**)(char *))(*(void *)v3 + 24))(v3);
}

void sub_1005C4DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C4E24(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  if (*a3 == 6 && *(_DWORD *)(a4 + 4) != 0) {
    sub_1005C3FC0(a1);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_1005C4ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005C4EF0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 120)) {
    return 1;
  }
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 104)) > *(double *)(a1 + 72))
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    int v6 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (void *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLFU,current download of %{public}s has timed out, canceling", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFileUpdate::checkForDownloadTimeout()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48));
    *(unsigned char *)(a1 + 120) = 0;
    return 1;
  }
  if (qword_1024195F0 != -1) {
    dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
  }
  uint64_t v2 = qword_1024195F8;
  if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (void *)(a1 + 152);
    if (*(char *)(a1 + 175) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLFU,download of %{public}s not yet timed out. Blocking current download request", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFileUpdate::checkForDownloadTimeout()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1005C5270(uint64_t a1, void *a2)
{
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)&v10[1] = a1 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 8);
  __int16 v11 = 256;
  if (sub_1005C6274(a1, v10))
  {
    uint64_t v6 = sub_1000A6958();
    uint64_t v7 = (const char *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
    uint64_t v8 = sub_1000A699C(v6, v7, a2);
  }
  else
  {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v8;
}

void sub_1005C5348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C535C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)&v62[1] = a1 + 8;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 8);
  __int16 v63 = 256;
  v6[112] = 0;
  if (a3)
  {
    uint64_t v8 = (const std::__fs::filesystem::path **)(a1 + 200);
    double v9 = (const std::__fs::filesystem::path *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0) {
      double v9 = *v8;
    }
    uint64_t v10 = (const std::__fs::filesystem::path **)(a1 + 176);
    __int16 v11 = (const std::__fs::filesystem::path *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      __int16 v11 = *v10;
    }
    rename(v9, v11, v7);
    if (v12)
    {
      int v13 = *__error();
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      __int16 v14 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_ERROR))
      {
        double v15 = (const std::__fs::filesystem::path *)(a1 + 200);
        if (*(char *)(a1 + 223) < 0) {
          double v15 = *v8;
        }
        double v16 = (const std::__fs::filesystem::path *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          double v16 = *v10;
        }
        *(_DWORD *)uint64_t buf = 136446722;
        *(void *)__int16 v67 = v15;
        *(_WORD *)&v67[8] = 2082;
        *(void *)&v67[10] = v16;
        *(_WORD *)&unsigned char v67[18] = 1026;
        *(_DWORD *)&v67[20] = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLFU,could not rename %{public}s to %{public}s,%{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        if (*(char *)(a1 + 223) < 0) {
          uint64_t v8 = (const std::__fs::filesystem::path **)*v8;
        }
        if (*(char *)(a1 + 199) < 0) {
          uint64_t v10 = (const std::__fs::filesystem::path **)*v10;
        }
        int v64 = 136446722;
        *(void *)__int16 v65 = v8;
        *(_WORD *)&v65[8] = 2082;
        *(void *)&v65[10] = v10;
        *(_WORD *)&unsigned char v65[18] = 1026;
        *(_DWORD *)&v65[20] = v13;
        char v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
      uint64_t v17 = 3;
    }
    else
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      double v32 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = (const std::__fs::filesystem::path *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          int v33 = *v10;
        }
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)__int16 v67 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "CLFU,download completed to %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        __int16 v52 = (const std::__fs::filesystem::path *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          __int16 v52 = *v10;
        }
        int v64 = 136446210;
        *(void *)__int16 v65 = v52;
        int v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v53);
        if (v53 != (char *)buf) {
          free(v53);
        }
      }
      v62[0] = 0.0;
      if (sub_1005C6274(a1, v62))
      {
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        uint64_t v34 = qword_1024195F8;
        if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v35 = (const std::__fs::filesystem::path *)(a1 + 200);
          if (*(char *)(a1 + 223) < 0) {
            unsigned int v35 = *v8;
          }
          uint64_t v36 = (const std::__fs::filesystem::path *)(a1 + 176);
          if (*(char *)(a1 + 199) < 0) {
            uint64_t v36 = *v10;
          }
          *(_DWORD *)uint64_t buf = 136446722;
          *(void *)__int16 v67 = v35;
          *(_WORD *)&v67[8] = 2082;
          *(void *)&v67[10] = v36;
          *(_WORD *)&unsigned char v67[18] = 2050;
          *(double *)&v67[20] = v62[0];
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLFU,newly downloaded %{public}s file is now %{public}s (time %{public}.3f)", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
          }
          if (*(char *)(a1 + 223) < 0) {
            uint64_t v8 = (const std::__fs::filesystem::path **)*v8;
          }
          if (*(char *)(a1 + 199) < 0) {
            uint64_t v10 = (const std::__fs::filesystem::path **)*v10;
          }
          int v64 = 136446722;
          *(void *)__int16 v65 = v8;
          *(_WORD *)&v65[8] = 2082;
          *(void *)&v65[10] = v10;
          *(_WORD *)&unsigned char v65[18] = 2050;
          *(double *)&v65[20] = v62[0];
          double v56 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v56);
          if (v56 != (char *)buf) {
            free(v56);
          }
        }
        uint64_t v37 = sub_1000A6958();
        unsigned int v38 = (const char *)(a1 + 128);
        if (*(char *)(a1 + 151) < 0) {
          unsigned int v38 = *(const char **)v38;
        }
        sub_10016332C(v37, v38, v62);
        uint64_t v39 = sub_1000A6958();
        (*(void (**)(uint64_t))(*(void *)v39 + 944))(v39);
      }
      else
      {
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        double v42 = qword_1024195F8;
        if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
        {
          int v43 = (const std::__fs::filesystem::path *)(a1 + 176);
          if (*(char *)(a1 + 199) < 0) {
            int v43 = *v10;
          }
          *(_DWORD *)uint64_t buf = 136446210;
          *(void *)__int16 v67 = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU, could not get modified time for %{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
          }
          if (*(char *)(a1 + 199) < 0) {
            uint64_t v10 = (const std::__fs::filesystem::path **)*v10;
          }
          int v64 = 136446210;
          *(void *)__int16 v65 = v10;
          __int16 v57 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v57);
          if (v57 != (char *)buf) {
            free(v57);
          }
        }
      }
      *(void *)(a1 + 96) = 0xBFF0000000000000;
      uint64_t v17 = 2;
    }
    *(void *)(a1 + 112) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 64) = 0;
    sub_1005C3FC0(a1);
  }
  else
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    double v18 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
    {
      double v19 = (void *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0) {
        double v19 = (void *)*v19;
      }
      unint64_t v20 = (void *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0) {
        unint64_t v20 = (void *)*v20;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)__int16 v67 = v19;
      *(_WORD *)&v67[8] = 2082;
      *(void *)&v67[10] = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU, could not download from %{public}s to %{public}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      char v45 = (void *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0) {
        char v45 = (void *)*v45;
      }
      int v46 = (void *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0) {
        int v46 = (void *)*v46;
      }
      int v64 = 136446466;
      *(void *)__int16 v65 = v45;
      *(_WORD *)&v65[8] = 2082;
      *(void *)&v65[10] = v46;
      double v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    unsigned int v21 = [[[*(id *)(a1 + 24) vendor] proxyForService:@"CLDaemonStatus"] syncgetReachability];
    if (v21)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      double v23 = sub_1004BF698(*(_DWORD *)(a1 + 64), 10, 4);
      if (v21 == 2)
      {
        double v24 = *(double *)(a1 + 88);
        if (v24 > 0.0 && v23 > v24)
        {
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
          }
          uint64_t v25 = qword_1024195F8;
          if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
          {
            int v26 = *(_DWORD *)(a1 + 64);
            uint64_t v27 = *(void *)(a1 + 88);
            double v28 = (void *)(a1 + 152);
            if (*(char *)(a1 + 175) < 0) {
              double v28 = (void *)*v28;
            }
            *(_DWORD *)uint64_t buf = 134349826;
            *(double *)__int16 v67 = v23;
            *(_WORD *)&v67[8] = 1026;
            *(_DWORD *)&v67[10] = v26;
            *(_WORD *)&v67[14] = 2050;
            *(void *)&v67[16] = v27;
            *(_WORD *)&v67[24] = 2082;
            *(void *)&v67[26] = v28;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CLFU,delay %{public}.3f for retry count %{public}d exceeds current update period of %{public}.3f, setting delay to half the current update period for %{public}s", buf, 0x26u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024195F0 != -1) {
              dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
            }
            int v58 = *(_DWORD *)(a1 + 64);
            uint64_t v59 = *(void *)(a1 + 88);
            double v60 = (void *)(a1 + 152);
            if (*(char *)(a1 + 175) < 0) {
              double v60 = (void *)*v60;
            }
            int v64 = 134349826;
            *(double *)__int16 v65 = v23;
            *(_WORD *)&v65[8] = 1026;
            *(_DWORD *)&v65[10] = v58;
            *(_WORD *)&v65[14] = 2050;
            *(void *)&v65[16] = v59;
            *(_WORD *)&v65[24] = 2082;
            *(void *)&v65[26] = v60;
            __int16 v61 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v61);
            if (v61 != (char *)buf) {
              free(v61);
            }
          }
          double v23 = *(double *)(a1 + 88) * 0.5;
        }
      }
      *(double *)(a1 + 112) = Current + v23;
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      uint64_t v29 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = *(_DWORD *)(a1 + 64);
        double v31 = (void *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0) {
          double v31 = (void *)*v31;
        }
        *(_DWORD *)uint64_t buf = 67240706;
        *(_DWORD *)__int16 v67 = v30;
        *(_WORD *)&v67[4] = 2082;
        *(void *)&v67[6] = v31;
        *(_WORD *)&v67[14] = 2050;
        *(double *)&v67[16] = v23;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "CLFU,retry count %{public}d, will re-download for %{public}s after delay of %{public}.3f", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        int v49 = *(_DWORD *)(a1 + 64);
        char v50 = (void *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0) {
          char v50 = (void *)*v50;
        }
        int v64 = 67240706;
        *(_DWORD *)__int16 v65 = v49;
        *(_WORD *)&v65[4] = 2082;
        *(void *)&v65[6] = v50;
        *(_WORD *)&v65[14] = 2050;
        *(double *)&v65[16] = v23;
        int v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
      ++*(_DWORD *)(a1 + 64);
      [*(id *)(a1 + 56) setNextFireTime:*(double *)(a1 + 112)];
    }
    else
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      unsigned int v40 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = (void *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0) {
          int v41 = (void *)*v41;
        }
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)__int16 v67 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "CLFU,data reachability is not available - not retrying %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        int v54 = (void *)(a1 + 152);
        if (*(char *)(a1 + 175) < 0) {
          int v54 = (void *)*v54;
        }
        int v64 = 136446210;
        *(void *)__int16 v65 = v54;
        __int16 v55 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFileUpdate::onDownloaded(CLFileDownload *, BOOL)", "%s\n", v55);
        if (v55 != (char *)buf) {
          free(v55);
        }
      }
    }
    uint64_t v17 = 3;
  }
  (*(void (**)(unsigned char *))(*(void *)v6 + 24))(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 32))(a1, v17, *(void *)(a1 + 40));
}

void sub_1005C6214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005C6274(uint64_t a1, double *a2)
{
  uint64_t v5 = (char *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v15 = a1 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 8);
  __int16 v16 = 256;
  uint64_t v6 = (const char **)(v5 + 168);
  uint64_t v7 = v5 + 168;
  if (v5[191] < 0) {
    uint64_t v7 = *v6;
  }
  int v8 = stat(v7, &v14);
  if (v8)
  {
    int v9 = *__error();
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    uint64_t v10 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = v5 + 168;
      if (*(char *)(a1 + 199) < 0) {
        __int16 v11 = *v6;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      __int16 v22 = v11;
      __int16 v23 = 1026;
      int v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLFU,destination stat failed,%{public}s,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      if (*(char *)(a1 + 199) < 0) {
        uint64_t v6 = (const char **)*v6;
      }
      int v17 = 136446466;
      double v18 = v6;
      __int16 v19 = 1026;
      int v20 = v9;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFileUpdate::getFileModifiedTime(CFAbsoluteTime &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    *a2 = sub_10016BE44(&v14.st_mtimespec.tv_sec);
  }
  (*(void (**)(char *))(*(void *)v5 + 24))(v5);
  return v8 == 0;
}

void sub_1005C6510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

BOOL sub_1005C653C(uint64_t a1, const std::string::value_type *a2, const std::string::value_type *a3, double *a4)
{
  int v8 = (unsigned __int8 *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  int v9 = v8[112];
  if (v8[112])
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    uint64_t v10 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_INFO))
    {
      __int16 v11 = (void *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0) {
        __int16 v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning,CLFU,%{public}s downloading in progress, cannot change update settings", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)", "%s\n", v12);
LABEL_12:
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    std::string::assign((std::string *)(a1 + 152), a2);
    int v13 = (unsigned char **)(a1 + 176);
    std::string::assign((std::string *)(a1 + 176), a3);
    double v14 = *a4;
    if (*a4 <= 0.0)
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      uint64_t v15 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = a1 + 152;
        if (*(char *)(a1 + 175) < 0) {
          uint64_t v16 = *(void *)(a1 + 152);
        }
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLFU,%{public}s download timeout must be greater than 0. Forcing to 30 seconds.", buf, 0xCu);
      }
      BOOL v17 = sub_10013D1A0(115, 0);
      double v14 = 30.0;
      if (v17)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
        double v14 = 30.0;
      }
    }
    *(double *)(a1 + 72) = v14;
    std::operator+<char>();
    double v18 = (void **)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      operator delete(*v18);
    }
    *(_OWORD *)double v18 = *(_OWORD *)buf;
    *(void *)(a1 + 144) = v31;
    if (*(char *)(a1 + 199) >= 0) {
      size_t v19 = *(unsigned __int8 *)(a1 + 199);
    }
    else {
      size_t v19 = *(void *)(a1 + 184);
    }
    int v20 = buf;
    sub_1001110E4((uint64_t)buf, v19 + 5);
    if (v31 < 0) {
      int v20 = *(uint8_t **)buf;
    }
    if (v19)
    {
      if (*(char *)(a1 + 199) >= 0) {
        unsigned int v21 = (const void *)(a1 + 176);
      }
      else {
        unsigned int v21 = *(const void **)(a1 + 176);
      }
      memmove(v20, v21, v19);
    }
    strcpy((char *)&v20[v19], ".temp");
    __int16 v22 = (void **)(a1 + 200);
    if (*(char *)(a1 + 223) < 0) {
      operator delete(*v22);
    }
    *(_OWORD *)__int16 v22 = *(_OWORD *)buf;
    *(void *)(a1 + 216) = v31;
    __int16 v23 = (unsigned char *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      __int16 v23 = *v13;
    }
    uid_t v24 = getuid();
    gid_t v25 = getgid();
    if (!sub_1004BB250(v23, v24, v25))
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      int v26 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v27 = (unsigned char *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          uint64_t v27 = *v13;
        }
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "CLFU,could not create path %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)", "%s\n", v12);
        goto LABEL_12;
      }
    }
  }
  (*(void (**)(unsigned __int8 *))(*(void *)v8 + 24))(v8);
  return v9 == 0;
}

void sub_1005C6B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C6BBC(uint64_t a1, double *a2, double *a3)
{
  uint64_t v6 = (void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  double v7 = *a2;
  v6[9] = *(void *)a2;
  double v8 = *a3;
  v6[10] = *(void *)a3;
  if (v7 > 0.0 && v7 < v8)
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    uint64_t v10 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v11 = *(void **)(a1 + 80);
      uint64_t v12 = *(void *)(a1 + 88);
      *(_DWORD *)uint64_t buf = 134349312;
      unsigned int v21 = v11;
      __int16 v22 = 2050;
      uint64_t v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,CLFU,update rate %{public}.3fs is shorter than WiFi update rate %{public}.3fs - overriding WiFi update rate", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      size_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFileUpdate::setUpdateRate(const CFTimeInterval &, const CFTimeInterval &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    *(void *)(a1 + 88) = *(void *)(a1 + 80);
  }
  if (qword_1024195F0 != -1) {
    dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
  }
  int v13 = qword_1024195F8;
  if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_INFO))
  {
    double v14 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      double v14 = (void *)*v14;
    }
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v16 = *(void *)(a1 + 88);
    *(_DWORD *)uint64_t buf = 136446722;
    unsigned int v21 = v14;
    __int16 v22 = 2050;
    uint64_t v23 = v15;
    __int16 v24 = 2050;
    uint64_t v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLFU,file %{public}s update rate set to %{public}.3fs, %{public}.3fs", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFileUpdate::setUpdateRate(const CFTimeInterval &, const CFTimeInterval &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  [*(id *)(*(void *)(a1 + 224) + 16) register:*(void *)(*(void *)(a1 + 224) + 8) forNotification:6 registrationInfo:0];
  sub_1005C3FC0(a1);
  (*(void (**)(void *))(*v6 + 24))(v6);
  return 1;
}

void sub_1005C6FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C6FFC(double *a1, double *a2)
{
  uint64_t v4 = a1 + 1;
  (*(void (**)(void *))(*((void *)a1 + 1) + 16))((void *)a1 + 1);
  if (sub_1005C4EF0((uint64_t)a1))
  {
    a1[12] = *a2;
    uint64_t v5 = (void *)*((void *)a1 + 7);
    [v5 nextFireTime];
    if (a1[12] < v6) {
      double v6 = a1[12];
    }
    [v5 setNextFireTime:v6];
  }
  return (*(uint64_t (**)(void *))(*v4 + 24))(v4);
}

void sub_1005C70C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C70E0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  [*(id *)(v2[27] + 16) unregister:*(void *)(v2[27] + 8) forNotification:6];
  [*(id *)(*(void *)(a1 + 232) + 16) unregister:*(void *)(*(void *)(a1 + 232) + 8) forNotification:5];
  if (qword_1024195F0 != -1) {
    dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
  }
  uint64_t v3 = qword_1024195F8;
  if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (void *)(a1 + 152);
    if (*(char *)(a1 + 175) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLFU,unregistered for kNotificationCompanionConnectionUpdate for %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFileUpdate::cancelUpdate()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (*(unsigned char *)(a1 + 120))
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
    }
    uint64_t v5 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = (void *)(a1 + 152);
      if (*(char *)(a1 + 175) < 0) {
        double v6 = (void *)*v6;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLFU,stopping download of %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022BD1B0);
      }
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFileUpdate::cancelUpdate()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48));
    *(unsigned char *)(a1 + 120) = 0;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  [*(id *)(a1 + 56) setNextFireDelay:1.79769313e308];
  return (*(uint64_t (**)(void *))(*v2 + 24))(v2);
}

void sub_1005C74E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C751C(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = (double *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  v5.n128_u64[0] = *a2;
  if (*(double *)a2 > v4[13]) {
    *(void *)(a1 + 112) = v5.n128_u64[0];
  }
  return (*(uint64_t (**)(double *, __n128))(*(void *)v4 + 24))(v4, v5);
}

uint64_t sub_1005C75B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  if (*(char *)(v4 + 167) < 0)
  {
    sub_1000DC48C((unsigned char *)a2, *(void **)(a1 + 152), *(void *)(a1 + 160));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 144);
    *(void *)(a2 + 16) = *(void *)(v4 + 160);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005C7674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C768C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  if (*(char *)(v4 + 191) < 0)
  {
    sub_1000DC48C((unsigned char *)a2, *(void **)(a1 + 176), *(void *)(a1 + 184));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(v4 + 168);
    *(void *)(a2 + 16) = *(void *)(v4 + 184);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005C774C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C7764(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  [v3[6] nextFireTime];
  *a2 = v4;
  (*((void (**)(id *))*v3 + 3))(v3);
  return 1;
}

void sub_1005C7800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C7814(uint64_t result, char a2)
{
  *(unsigned char *)(result + 240) = a2;
  return result;
}

void sub_1005C781C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005C784C(id a1)
{
  qword_1024195F8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

id sub_1005C79D8(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1005CFA5C(a1);
}

void sub_1005C7A38(uint64_t a1, void *a2)
{
  uint64_t v4 = +[NSNumber numberWithInteger:a2[1]];
  id v5 = +[NSMutableDictionary dictionary];
  [v5 setObject:v4 forKeyedSubscript:@"CLMiLoConnectionReturnCode"];
  switch(a2[1])
  {
    case 1:
      id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 40];
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
      double v7 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
      {
        id v8 = [[objc_msgSend(*(id *)(a1 + 72), "UUIDString") UTF8String];
        *(_DWORD *)uint64_t buf = 68289794;
        int v32 = 0;
        __int16 v33 = 2082;
        uint64_t v34 = "";
        __int16 v35 = 2082;
        uint64_t v36 = (uint64_t)v8;
        __int16 v37 = 2082;
        id v38 = [[objc_msgSend(v6, "UUIDString") UTF8String];
        __int16 v39 = 2050;
        uint64_t v40 = a1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"MiLoConnectionSubscription, didCreateService\", \"connectionToken\":%{public, location:escape_only}s, \"serviceIdentifier\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}", buf, 0x30u);
      }
      goto LABEL_34;
    case 2:
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
      int v9 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
      {
        id v10 = [[[*(id *)(a1 + 72) UUIDString] UTF8String];
        *(_DWORD *)uint64_t buf = 68289282;
        int v32 = 0;
        __int16 v33 = 2082;
        uint64_t v34 = "";
        __int16 v35 = 2082;
        uint64_t v36 = (uint64_t)v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"MiLoConnectionSubscription, createServiceFailed\", \"connectionToken\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      [v5 setObject:[+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39])] forKeyedSubscript:@"CLMiLoConnectionErrorMessage"];
      goto LABEL_37;
    case 3:
      __int16 v11 = (NSNumber *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 40];
      uint64_t v12 = off_102304028;
      goto LABEL_36;
    case 4:
      [v5 setObject:[objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 40] forKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
      goto LABEL_14;
    case 5:
      id v13 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v14 = a2[43];
      if (a2[44] != v14)
      {
        unint64_t v15 = a2[46];
        uint64_t v16 = a2[47];
        BOOL v17 = (void *)(v14 + 8 * (v15 / 0x38));
        double v18 = (void *)(*v17 + 72 * (v15 % 0x38));
        unint64_t v19 = *(void *)(v14 + 8 * ((v16 + v15) / 0x38)) + 72 * ((v16 + v15) % 0x38);
        while (v18 != (void *)v19)
        {
          id v20 = sub_1005C9724(v18);
          [v13 addObject:v20];

          v18 += 9;
          if ((void *)((char *)v18 - *v17) == (void *)4032)
          {
            unsigned int v21 = (void *)v17[1];
            ++v17;
            double v18 = v21;
          }
        }
      }
      [v5 setObject:v13 forKeyedSubscript:@"CLMiLoConnectionServiceDescriptors"];

      goto LABEL_37;
    case 6:
    case 0xCLL:
LABEL_14:
      __int16 v11 = +[NSNumber numberWithInteger:a2[39]];
      uint64_t v12 = off_102304020;
      goto LABEL_36;
    case 7:
      id v22 = sub_1005C9838((uint64_t)(a2 + 2));
      [v5 setObject:v22 forKeyedSubscript:@"CLMiLoConnectionServiceStatus"];

      goto LABEL_37;
    case 8:
      [v5 setObject:+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]) forKeyedSubscript:@"CLMiLoConnectionErrorMessage"];
      id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 40];
      if ([v6 isEqual:*(void *)(a1 + 80)])
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_1022BD230);
        }
        uint64_t v23 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)uint64_t buf = 68289538;
          int v32 = 0;
          __int16 v33 = 2082;
          uint64_t v34 = "";
          __int16 v35 = 2082;
          uint64_t v36 = v24;
          __int16 v37 = 2082;
          id v38 = [[[v6 UUIDString] UTF8String];
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"connect to service failed, clear fConnectedServiceIdentifier\", \"class\":%{public, location:escape_only}s, \"ServiceId\":%{public, location:escape_only}s}", buf, 0x26u);
        }

        *(void *)(a1 + 80) = 0;
      }
      goto LABEL_34;
    case 9:
      [v5 setObject:+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]) forKeyedSubscript:@"CLMiLoConnectionErrorMessage"];
      id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 40];
      if (!*(void *)(a1 + 80))
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_1022BD230);
        }
        uint64_t v25 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)uint64_t buf = 68289538;
          int v32 = 0;
          __int16 v33 = 2082;
          uint64_t v34 = "";
          __int16 v35 = 2082;
          uint64_t v36 = v26;
          __int16 v37 = 2082;
          id v38 = [[objc_msgSend(v6, "UUIDString") UTF8String];
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"disconnect to service failed, restore fConnectedServiceIdentifier\", \"class\":%{public, location:escape_only}s, \"ServiceId\":%{public, location:escape_only}s}", buf, 0x26u);
        }
        *(void *)(a1 + 80) = [v6 copy];
      }
LABEL_34:
      [v5 setObject:v6 forKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
      goto LABEL_37;
    case 0xALL:
      [v5 setObject:+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]) forKeyedSubscript:@"CLMiLoConnectionErrorMessage"];
      __int16 v11 = (NSNumber *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 48];
      uint64_t v12 = off_102304048;
LABEL_36:
      [v5 setObject:v11 forKeyedSubscript:*v12];
      goto LABEL_37;
    case 0xDLL:
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
      uint64_t v27 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = a2[1];
        *(_DWORD *)uint64_t buf = 68289282;
        int v32 = 0;
        __int16 v33 = 2082;
        uint64_t v34 = "";
        __int16 v35 = 1026;
        LODWORD(v36) = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"onMiLoServiceEvent, unexpected event type\", \"miloServiceEventType data\":%{public}d}", buf, 0x18u);
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_1022BD230);
        }
      }
      uint64_t v29 = qword_102419458;
      if (os_signpost_enabled((os_log_t)qword_102419458))
      {
        uint64_t v30 = a2[1];
        *(_DWORD *)uint64_t buf = 68289282;
        int v32 = 0;
        __int16 v33 = 2082;
        uint64_t v34 = "";
        __int16 v35 = 1026;
        LODWORD(v36) = v30;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "onMiLoServiceEvent, unexpected event type", "{\"msg%{public}.0s\":\"onMiLoServiceEvent, unexpected event type\", \"miloServiceEventType data\":%{public}d}", buf, 0x18u);
      }
      return;
    default:
LABEL_37:
      sub_1005C9CB0(a1);
      return;
  }
}

id sub_1005C836C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1005CFE4C(a1);
}

void sub_1005C83CC(uint64_t a1, void *a2)
{
  id v5 = +[NSMutableDictionary dictionary];
  id v4 = sub_1005C9D34(a2);
  [v5 setObject:v4 forKeyedSubscript:@"CLMiLoConnectionPredictionUpdate"];

  sub_1005CA374(a1);
}

id sub_1005C854C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1005D020C(a1);
}

void sub_1005C85AC(uint64_t a1, uint64_t *a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *a2;
    uint64_t v8 = 68289282;
    __int16 v9 = 2082;
    id v10 = "";
    __int16 v11 = 1026;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onMiLoServiceDebugResponse\", \"Event Type\":%{public}d}", (uint8_t *)&v8, 0x18u);
  }
  id v6 = +[NSMutableDictionary dictionary];
  uint64_t v8 = (uint64_t)v6;
  id v7 = sub_1005CA3F8((uint64_t)a2);
  [v6 setObject:v7 forKeyedSubscript:@"CLMiLoConnectionDebugEventResponse"];

  sub_1005CA534(a1);
}

id sub_1005C87F0(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1005D05CC(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1005D0958(a1);
    }
    else
    {
      return 0;
    }
  }
}

void sub_1005C888C(uint64_t a1, void *a2)
{
  id v5 = +[NSMutableDictionary dictionary];
  id v4 = [objc_alloc((Class)CLMiLoConnectionStatus) initWithConnectionState:*a2];
  [v5 setObject:v4 forKeyedSubscript:@"CLMiLoConnectionStatusEvent"];

  sub_1005CA5B8(a1);
}

id sub_1005C8A28(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1005D0DA0(a1);
}

void sub_1005C8A88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = +[NSNumber numberWithInteger:*(void *)a2];
  id v4 = +[NSMutableDictionary dictionary];
  id v5 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v6 = *(void *)(a2 + 56);
  if (*(void *)(a2 + 64) != v6)
  {
    unint64_t v7 = *(void *)(a2 + 80);
    uint64_t v8 = (void *)(v6 + 8 * (v7 >> 9));
    __int16 v9 = (uint64_t *)(*v8 + 8 * (v7 & 0x1FF));
    uint64_t v10 = *(void *)(v6 + (((*(void *)(a2 + 88) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(a2 + 88) + v7) & 0x1FF);
    while (v9 != (uint64_t *)v10)
    {
      id v11 = objc_alloc((Class)CLMiLoFingerprintError);
      uint64_t v12 = *v9++;
      id v13 = [v11 initWithFingerprintErrorEnum:v12];
      [v5 addObject:v13];

      if ((uint64_t *)((char *)v9 - *v8) == (uint64_t *)4096)
      {
        uint64_t v14 = (uint64_t *)v8[1];
        ++v8;
        __int16 v9 = v14;
      }
    }
  }
  id v15 = [objc_alloc((Class)CLMiLoFingerprintMetaInfo) initWithNumWiFiAccessPoints:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 32)) numBLESources:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 36)) numUWBSources:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 40)) requestIdentifier:[objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 16] errors:v5];

  [v4 setObject:v3 forKeyedSubscript:@"CLMiLoConnectionReturnCode"];
  [v4 setObject:v15 forKeyedSubscript:@"CLMiLoConnectionRecordingMetaInfo"];

  sub_1005C9CB0(a1);
}

id sub_1005C8D54(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1005D1160(a1);
}

void sub_1005C8DB4(uint64_t a1, uint64_t *a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *a2;
    uint64_t v8 = 68289282;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 1026;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onMiLoGenericEventResponse\", \"Event Type\":%{public}d}", (uint8_t *)&v8, 0x18u);
  }
  id v6 = +[NSMutableDictionary dictionary];
  uint64_t v8 = (uint64_t)v6;
  id v7 = sub_1005CA63C(a2);
  [v6 setObject:v7 forKeyedSubscript:@"CLMiLoConnectionGenericEventResponse"];

  sub_1005CA7C4(a1);
}

void sub_1005C8F1C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t v5 = off_1022BD1E0;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(void *)(v5 + 128) = 0;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v6 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Initialize CLMiLoConnectionSubscription", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMiLoConnectionSubscription::CLMiLoConnectionSubscription(Delegate *, id<CLIntersiloUniverse>, CLClientManagerAuthorizationContext *, CLClientKeyPath *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100FBECF0();
}

void sub_1005C9230(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v3);
  }
  uint64_t v5 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_1005C92A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BD250);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMiLoConnectionSubscription::onMiLoServiceEventNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BD250);
    }
    id v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMiLoConnectionSubscription::onMiLoServiceEventNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005C9440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C9460(uint64_t a1)
{
  *(void *)a1 = off_1022BD1E0;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(void *)(a1 + 80))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)a1 - 8) + 8);
      id v5 = [[objc_msgSend(*(id *)(a1 + 80), "UUIDString") UTF8String];
      v12[0] = 68289538;
      v12[1] = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = v4 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v17 = 2082;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"disconnect to a connected service in Dtor of\", \"class\":%{public, location:escape_only}s, \"serviceId\":%{public, location:escape_only}s}", (uint8_t *)v12, 0x26u);
    }
    id v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      id v6 = (void *)*v6;
    }
    id v7 = *(void **)(a1 + 64);
    char v8 = +[NSString stringWithUTF8String:v6];
    __int16 v9 = (void *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      __int16 v9 = (void *)*v9;
    }
    [v7 disconnectToServiceForClient:v8 withServiceIdentifier:*(void *)(a1 + 80) withConnectionToken:*(void *)(a1 + 72) forUser:[NSString stringWithUTF8String:v9]];

    *(void *)(a1 + 80) = 0;
  }
  [*(id *)(a1 + 64) unregisterForMiloServiceEventUpdatesForClient:*(void *)(a1 + 56) withToken:*(void *)(a1 + 72)];
  [*(id *)(a1 + 64) unregisterForMiloPredictionEventUpdates:*(void *)(a1 + 56)];

  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  [*(id *)(a1 + 56) setValid:0];

  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_100029A7C(a1);
  return a1;
}

void sub_1005C96DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1005C96EC(uint64_t a1)
{
  sub_1005C9460(a1);

  operator delete();
}

id sub_1005C9724(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v3 = a1[4];
  if (a1[5] != v3)
  {
    unint64_t v4 = a1[7];
    id v5 = (void *)(v3 + 8 * (v4 >> 9));
    id v6 = (uint64_t *)(*v5 + 8 * (v4 & 0x1FF));
    uint64_t v7 = *(void *)(v3 + (((a1[8] + v4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[8] + v4) & 0x1FF);
    while (v6 != (uint64_t *)v7)
    {
      id v8 = objc_alloc((Class)CLMiLoLocationType);
      uint64_t v9 = *v6++;
      id v10 = [v8 initWithLocationTypeEnum:v9];
      [v2 addObject:v10];

      if ((uint64_t *)((char *)v6 - *v5) == (uint64_t *)4096)
      {
        __int16 v11 = (uint64_t *)v5[1];
        ++v5;
        id v6 = v11;
      }
    }
  }
  id v12 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a1];
  id v13 = [objc_alloc((Class)CLMiLoServiceDescriptor) initWithServiceIdentifier:v12 serviceType:a1[2] locationTypes:v2];

  return v13;
}

id sub_1005C9838(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v3 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) != v3)
  {
    unint64_t v4 = *(void *)(a1 + 112);
    id v5 = (void *)(v3 + 8 * (v4 >> 9));
    id v6 = (uint64_t *)(*v5 + 8 * (v4 & 0x1FF));
    uint64_t v7 = *(void *)(v3 + (((*(void *)(a1 + 120) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 120) + v4) & 0x1FF);
    while (v6 != (uint64_t *)v7)
    {
      id v8 = objc_alloc((Class)CLMiLoLocationType);
      uint64_t v9 = *v6++;
      id v10 = [v8 initWithLocationTypeEnum:v9];
      [v2 addObject:v10];

      if ((uint64_t *)((char *)v6 - *v5) == (uint64_t *)4096)
      {
        __int16 v11 = (uint64_t *)v5[1];
        ++v5;
        id v6 = v11;
      }
    }
  }
  id v12 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a1 + 56];
  id v13 = [objc_alloc((Class)CLMiLoServiceDescriptor) initWithServiceIdentifier:v12 serviceType:*(void *)(a1 + 72) locationTypes:v2];

  id v14 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v15 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 24) != v15)
  {
    unint64_t v16 = *(void *)(a1 + 40);
    __int16 v17 = (void *)(v15 + 8 * (v16 >> 9));
    id v18 = (uint64_t *)(*v17 + 8 * (v16 & 0x1FF));
    uint64_t v19 = *(void *)(v15 + (((*(void *)(a1 + 48) + v16) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(void *)(a1 + 48) + v16) & 0x1FF);
    while (v18 != (uint64_t *)v19)
    {
      id v20 = objc_alloc((Class)CLMiLoServiceSuspendReason);
      uint64_t v21 = *v18++;
      id v22 = [v20 initWithSuspendReasonEnum:v21];
      [v14 addObject:v22];

      if ((uint64_t *)((char *)v18 - *v17) == (uint64_t *)4096)
      {
        uint64_t v23 = (uint64_t *)v17[1];
        ++v17;
        id v18 = v23;
      }
    }
  }
  id v24 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v25 = *(uint64_t **)(a1 + 184);
  uint64_t v26 = *(uint64_t **)(a1 + 192);
  while (v25 != v26)
  {
    id v27 = objc_alloc((Class)CLMiLoServiceQualityReason);
    uint64_t v28 = *v25++;
    id v29 = [v27 initWithQualityReasonEnum:v28];
    [v24 addObject:v29];
  }
  id v30 = [objc_alloc((Class)CLMiLoServiceQualityInfo) initWithQuality:*(void *)(a1 + 176) andReasons:v24];

  if (*(unsigned char *)(a1 + 144))
  {
    id v31 = objc_alloc((Class)NSUUID);
    if (!*(unsigned char *)(a1 + 144)) {
      goto LABEL_27;
    }
    id v32 = [v31 initWithUUIDBytes:a1 + 128];
  }
  else
  {
    id v32 = 0;
  }
  int v49 = v30;
  char v48 = v32;
  if (*(unsigned char *)(a1 + 160))
  {
    id v33 = objc_alloc((Class)CLMiLoLocationType);
    if (*(unsigned char *)(a1 + 160))
    {
      id v46 = [v33 initWithLocationTypeEnum:*(void *)(a1 + 152)];
      goto LABEL_21;
    }
LABEL_27:
    sub_10020D700();
  }
  id v46 = 0;
LABEL_21:
  id v34 = objc_alloc((Class)NSError);
  id v47 = [v34 initWithDomain:kCLErrorDomainPrivate code:*(void *)(a1 + 168) userInfo:0];
  id v35 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v36 = *(void *)(a1 + 216);
  if (*(void *)(a1 + 224) != v36)
  {
    unint64_t v37 = *(void *)(a1 + 240);
    id v38 = (void *)(v36 + 8 * (v37 >> 8));
    uint64_t v39 = *v38 + 16 * v37;
    uint64_t v40 = *(void *)(v36 + (((*(void *)(a1 + 248) + v37) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(unsigned char *)(a1 + 248) + v37);
    while (v39 != v40)
    {
      id v41 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v39];
      [v35 addObject:v41];

      v39 += 16;
      if (v39 - *v38 == 4096)
      {
        uint64_t v42 = v38[1];
        ++v38;
        uint64_t v39 = v42;
      }
    }
  }
  id v43 = objc_msgSend(objc_alloc((Class)CLMiLoServiceMetaInfo), "initWithNumClustersLearnedInModel:numRecordingTriggersAtCurrentLOI:numInputValidFingerprints:numInputValidFingerprintsLabeled:numInputValidFingerprintsUnlabeled:numFingerprintsBeforePruning:numFingerprintsAfterPruning:numWiFiAccessPoints:numBLESources:numUWBSources:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 256)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 260)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 264)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:",
            *(unsigned int *)(a1 + 272)),
          +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 268)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 276)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 280)), +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 284)), +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 288)],
          +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 292)]);
  id v44 = [objc_alloc((Class)CLMiLoServiceStatus) initWithServiceState:*(void *)a1 suspendReasons:v14 serviceDescriptor:v13 currentLocationOfInterestUuid:v48 currentLocationOfInterestType:v46 error:v47 serviceQualityInfo:v49 places:v35 metaInfo:v43];

  return v44;
}

void sub_1005C9CB0(uint64_t a1)
{
  sub_1005D1520(off_1022BD290, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1005C9D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

id sub_1005C9D34(void *a1)
{
  id v54 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v2 = a1[1];
  int v51 = a1;
  if (a1[2] != v2)
  {
    unint64_t v3 = a1[4];
    unint64_t v4 = (void *)(v2 + 8 * (v3 / 0x49));
    id v5 = (void *)(*v4 + 56 * (v3 % 0x49));
    unint64_t v52 = *(void *)(v2 + 8 * ((a1[5] + v3) / 0x49)) + 56 * ((a1[5] + v3) % 0x49);
    while (v5 != (void *)v52)
    {
      __int16 v55 = v4;
      id v6 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v7 = v5[1];
      if (v5[2] != v7)
      {
        unint64_t v8 = v5[4];
        uint64_t v9 = (void *)(v7 + 8 * (v8 >> 7));
        uint64_t v10 = *v9 + 32 * (v8 & 0x7F);
        uint64_t v11 = *(void *)(v7 + (((v5[5] + v8) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v5[5] + v8) & 0x7F);
        while (v10 != v11)
        {
          id v12 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v10];
          id v13 = [objc_alloc((Class)CLMiLoPlace) initWithPlaceIdentifier:v12 score:[NSNumber numberWithDouble:*((double *)(v10 + 16))] confidence:*(void *)(v10 + 24) placeMetadata:0];

          [v6 addObject:v13];
          v10 += 32;
          if (v10 - *v9 == 4096)
          {
            uint64_t v14 = v9[1];
            ++v9;
            uint64_t v10 = v14;
          }
        }
      }
      id v15 = [objc_alloc((Class)CLMiLoServicePlacePrediction) initWithPlaces:v6 serviceType:v5[6]];

      [v54 addObject:v15];
      v5 += 7;
      unint64_t v4 = v55;
      if ((void *)((char *)v5 - *v55) == (void *)4088)
      {
        unint64_t v4 = v55 + 1;
        id v5 = (void *)v55[1];
      }
    }
  }
  id v16 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v17 = a1[13];
  if (a1[14] != v17)
  {
    unint64_t v18 = a1[16];
    uint64_t v19 = (void *)(v17 + 8 * (v18 / 0x66));
    unint64_t v20 = *v19 + 40 * (v18 % 0x66);
    unint64_t v21 = *(void *)(v17 + 8 * ((v51[17] + v18) / 0x66)) + 40 * ((v51[17] + v18) % 0x66);
    while (v20 != v21)
    {
      unint64_t v22 = v20;
      if (*(char *)(v20 + 23) < 0) {
        unint64_t v22 = *(void *)v20;
      }
      id v23 = [objc_alloc((Class)CLMiLoPredictionDeviceDistanceIndication) initWithDeviceIdentifier:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22) uwbRange:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v20 + 24)) bleRSSI:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v20 + 32))];
      [v16 addObject:v23];

      v20 += 40;
      if (v20 - *v19 == 4080)
      {
        unint64_t v24 = v19[1];
        ++v19;
        unint64_t v20 = v24;
      }
    }
  }
  id v56 = [objc_alloc((Class)CLMiLoPredictionCloseDeviceList) initWithCloseDeviceList:v16];

  id v25 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v26 = v51[7];
  if (v51[8] != v26)
  {
    unint64_t v27 = v51[10];
    uint64_t v28 = (void *)(v26 + 8 * (v27 >> 7));
    uint64_t v29 = *v28 + 32 * (v27 & 0x7F);
    uint64_t v30 = *(void *)(v26 + (((v51[11] + v27) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v51[11] + v27) & 0x7F);
    while (v29 != v30)
    {
      id v31 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v29];
      id v32 = [objc_alloc((Class)CLMiLoPlace) initWithPlaceIdentifier:v31 score:[NSNumber numberWithDouble:*((double *)(v29 + 16))] confidence:*(void *)(v29 + 24) placeMetadata:0];

      [v25 addObject:v32];
      v29 += 32;
      if (v29 - *v28 == 4096)
      {
        uint64_t v33 = v28[1];
        ++v28;
        uint64_t v29 = v33;
      }
    }
  }
  id v53 = [objc_alloc((Class)CLMiLoServicePredictionLocationSimilarityList) initWithPlaces:v25];

  id v34 = objc_alloc((Class)NSError);
  id v50 = [v34 initWithDomain:kCLErrorDomainPrivate code:v51[18] userInfo:0];
  id v35 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v51 + 19];
  id v36 = objc_alloc_init((Class)NSMutableArray);
  id v37 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v38 = v51[23];
  if (v51[24] != v38)
  {
    unint64_t v39 = v51[26];
    uint64_t v40 = (void *)(v38 + 8 * (v39 >> 9));
    id v41 = (void *)(*v40 + 8 * (v39 & 0x1FF));
    uint64_t v42 = *(void *)(v38 + (((v51[27] + v39) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v51[27] + v39) & 0x1FF);
    while (v41 != (void *)v42)
    {
      id v43 = [objc_alloc((Class)CLMiLoPlaceConfidenceReason) initWithConfidenceReasonEnum:*v41];
      [v36 addObject:v43];

      uint64_t v44 = *v41;
      if (*v41 <= 7uLL && ((0xFBu >> v44) & 1) != 0)
      {
        id v45 = [objc_alloc((Class)CLMiLoFingerprintError) initWithFingerprintErrorEnum:qword_101D241C0[v44]];
        [v37 addObject:v45];
      }
      if ((void *)((char *)++v41 - *v40) == (void *)4096)
      {
        id v46 = (void *)v40[1];
        ++v40;
        id v41 = v46;
      }
    }
  }
  id v47 = [objc_alloc((Class)CLMiLoFingerprintMetaInfo) initWithNumWiFiAccessPoints:[NSNumber numberWithUnsignedInt:*((unsigned int *)v51 + 56)] numBLESources:[NSNumber numberWithUnsignedInt:*((unsigned int *)v51 + 57)] numUWBSources:[NSNumber numberWithUnsignedInt:*((unsigned int *)v51 + 58)] requestIdentifier:v35 errors:v37];

  id v48 = [objc_alloc((Class)CLMiLoPrediction) initWithPlacePredictions:v54 locationSimilarityList:v53 closeDeviceList:v56 error:v50 requestIdentifier:v35 predictionTime:+[NSDate date](NSDate, "date") confidence:v51[21] placeConfidenceReasons:v36 localizationFingerprintMetaInfo:v47];
  return v48;
}

void sub_1005CA374(uint64_t a1)
{
  sub_1005D1520(off_1022BD298, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1005CA3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

id sub_1005CA3F8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a1 + 16];
  id v3 = objc_alloc((Class)NSError);
  id v4 = [v3 initWithDomain:kCLErrorDomainPrivate code:*(void *)(a1 + 8) userInfo:0];
  if (*(unsigned char *)(a1 + 104))
  {
    id v5 = objc_alloc((Class)CLMiLoExportDatabaseTableResult);
    if (*(char *)(a1 + 55) >= 0) {
      uint64_t v6 = a1 + 32;
    }
    else {
      uint64_t v6 = *(void *)(a1 + 32);
    }
    uint64_t v7 = +[NSString stringWithUTF8String:v6];
    if (*(char *)(a1 + 79) >= 0) {
      uint64_t v8 = a1 + 56;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 56);
    }
    uint64_t v9 = +[NSString stringWithUTF8String:v8];
    uint64_t v12 = *(void *)(a1 + 80);
    uint64_t v11 = a1 + 80;
    uint64_t v10 = v12;
    if (*(char *)(v11 + 23) >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = v10;
    }
    id v14 = [v5 initWithExportDir:v7 fileName:v9 sandboxExtensionTok:[NSString stringWithUTF8String:v13]];
  }
  else
  {
    id v14 = 0;
  }
  id v15 = [objc_alloc((Class)CLMiLoDebugResponse) initWithExportDatabaseTablesResult:v14 requestIdentifier:v2 error:v4];

  return v15;
}

void sub_1005CA534(uint64_t a1)
{
  sub_1005D1520(off_1022BD2A0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1005CA5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005CA5B8(uint64_t a1)
{
  sub_1005D1520(off_1022BD2A8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1005CA624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

id sub_1005CA63C(uint64_t *a1)
{
  id v2 = objc_alloc((Class)NSError);
  id v3 = [v2 initWithDomain:kCLErrorDomainPrivate code:a1[1] userInfo:0];
  id v4 = objc_alloc((Class)CLMiLoGenericEventResponse);
  uint64_t v5 = *a1;
  int v6 = *((char *)a1 + 39);
  uint64_t v9 = a1[2];
  uint64_t v8 = a1 + 2;
  uint64_t v7 = v9;
  if (v6 >= 0) {
    uint64_t v10 = (uint64_t)v8;
  }
  else {
    uint64_t v10 = v7;
  }
  id v11 = [v4 initWithEventType:v5 withDescription:[NSString stringWithUTF8String:v10] withError:v3];
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  uint64_t v12 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 68289538;
    v14[1] = 0;
    __int16 v15 = 2082;
    id v16 = "";
    __int16 v17 = 2050;
    uint64_t v18 = [v11 eventType];
    __int16 v19 = 2082;
    id v20 = [[[v11 genericEventDescription] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"created GenericEventResponse with\", \"EventType\":%{public}lu, \"Description\":%{public, location:escape_only}s}", (uint8_t *)v14, 0x26u);
  }

  return v11;
}

void sub_1005CA7C4(uint64_t a1)
{
  sub_1005D1520(&off_1022BD2B0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1005CA830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1005CA848@<X0>(uint64_t a1@<X8>)
{
  v24[0] = off_1022BD2C8;
  v24[1] = sub_1005CB210;
  v24[2] = 0;
  v24[3] = v24;
  sub_100134750(v25, "kCLConnectionMessageMiLoServiceEvent");
  sub_1005CF9DC((uint64_t)&v26, (uint64_t)v24);
  unint64_t v21 = off_1022BD378;
  v22[0] = sub_1005CB368;
  v22[1] = 0;
  id v23 = &v21;
  sub_100134750(v27, "kCLConnectionMessageMiLoCreateService");
  sub_1005CF9DC((uint64_t)&v28, (uint64_t)&v21);
  v20[0] = off_1022BD378;
  v20[1] = sub_1005CB76C;
  v20[2] = 0;
  v20[3] = v20;
  sub_100134750(v29, "kCLConnectionMessageMiLoDeleteService");
  sub_1005CF9DC((uint64_t)&v30, (uint64_t)v20);
  v19[0] = off_1022BD378;
  v19[1] = sub_1005CBA0C;
  v19[2] = 0;
  v19[3] = v19;
  sub_100134750(v31, "kCLConnectionMessageMiLoQueryMyServices");
  sub_1005CF9DC((uint64_t)&v32, (uint64_t)v19);
  v18[0] = off_1022BD378;
  v18[1] = sub_1005CBBF8;
  v18[2] = 0;
  v18[3] = v18;
  sub_100134750(v33, "kCLConnectionMessageMiLoConnectToService");
  sub_1005CF9DC((uint64_t)&v34, (uint64_t)v18);
  v17[0] = off_1022BD378;
  v17[1] = sub_1005CC240;
  v17[2] = 0;
  v17[3] = v17;
  sub_100134750(v35, "kCLConnectionMessageMiLoDisconnectToService");
  sub_1005CF9DC((uint64_t)&v36, (uint64_t)v17);
  v16[0] = off_1022BD378;
  v16[1] = sub_1005CCD6C;
  v16[2] = 0;
  v16[3] = v16;
  sub_100134750(v37, "kCLConnectionMessageMiLoSingleShotPrediction");
  sub_1005CF9DC((uint64_t)&v38, (uint64_t)v16);
  v15[0] = off_1022BD378;
  v15[1] = sub_1005CD00C;
  void v15[2] = 0;
  v15[3] = v15;
  sub_100134750(v39, "kCLConnectionMessageRequestObservation");
  sub_1005CF9DC((uint64_t)&v40, (uint64_t)v15);
  v14[0] = off_1022BD378;
  v14[1] = sub_1005CD2C8;
  _DWORD v14[2] = 0;
  v14[3] = v14;
  sub_100134750(v41, "kCLConnectionMessageLabelSignleObservation");
  sub_1005CF9DC((uint64_t)&v42, (uint64_t)v14);
  v13[0] = off_1022BD378;
  v13[1] = sub_1005CD5B4;
  v13[2] = 0;
  v13[3] = v13;
  sub_100134750(v43, "kCLConnectionMessageLabelObservationsBetweenDates");
  sub_1005CF9DC((uint64_t)&v44, (uint64_t)v13);
  v12[0] = off_1022BD378;
  v12[1] = sub_1005CD900;
  _DWORD v12[2] = 0;
  v12[3] = v12;
  sub_100134750(v45, "kCLConnectionMessageRemoveLabels");
  sub_1005CF9DC((uint64_t)&v46, (uint64_t)v12);
  v11[0] = off_1022BD378;
  v11[1] = sub_1005CDBE0;
  v11[2] = 0;
  void v11[3] = v11;
  sub_100134750(v47, "kCLConnectionMessageStartUpdatingMicroLocation");
  sub_1005CF9DC((uint64_t)&v48, (uint64_t)v11);
  v10[0] = off_1022BD378;
  v10[1] = sub_1005CDEC0;
  v10[2] = 0;
  double v10[3] = v10;
  sub_100134750(v49, "kCLConnectionMessageStopUpdatingMicroLocation");
  sub_1005CF9DC((uint64_t)&v50, (uint64_t)v10);
  v9[0] = off_1022BD378;
  v9[1] = sub_1005CE170;
  v9[2] = 0;
  v9[3] = v9;
  sub_100134750(v51, "kCLConnectionMessageMiLoQueryConnectionStatus");
  sub_1005CF9DC((uint64_t)&v52, (uint64_t)v9);
  v8[0] = off_1022BD378;
  v8[1] = sub_1005CE30C;
  v8[2] = 0;
  v8[3] = v8;
  sub_100134750(v53, "kCLConnectionMessageMiLoEnableMiLoAtCurrentLocation");
  sub_1005CF9DC((uint64_t)&v54, (uint64_t)v8);
  v7[0] = off_1022BD378;
  v7[1] = sub_1005CE588;
  v7[2] = 0;
  v7[3] = v7;
  sub_100134750(v55, "kCLConnectionMessageRemoveCustomLOI");
  sub_1005CF9DC((uint64_t)&v56, (uint64_t)v7);
  v6[0] = off_1022BD378;
  v6[1] = sub_1005CE844;
  v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v57, "kCLConnectionMessageRequestModelLearning");
  sub_1005CF9DC((uint64_t)&v58, (uint64_t)v6);
  v5[0] = off_1022BD378;
  v5[1] = sub_1005CED60;
  v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v59, "kCLConnectionMessageRequestPurgeMiLoData");
  sub_1005CF9DC((uint64_t)&v60, (uint64_t)v5);
  v4[0] = off_1022BD378;
  v4[1] = sub_1005CF244;
  v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v61, "kCLConnectionMessageRequestMiLoExportDatabaseTables");
  sub_1005CF9DC((uint64_t)&v62, (uint64_t)v4);
  sub_1005D1B44(a1, (unsigned __int8 *)v25, 19);
  uint64_t v2 = 133;
  do
  {
    sub_1005D192C(&v24[v2]);
    if (SHIBYTE((&v23)[v2]) < 0) {
      operator delete((void *)v22[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_1005D192C(v4);
  sub_1005D192C(v5);
  sub_1005D192C(v6);
  sub_1005D192C(v7);
  sub_1005D192C(v8);
  sub_1005D192C(v9);
  sub_1005D192C(v10);
  sub_1005D192C(v11);
  sub_1005D192C(v12);
  sub_1005D192C(v13);
  sub_1005D192C(v14);
  sub_1005D192C(v15);
  sub_1005D192C(v16);
  sub_1005D192C(v17);
  sub_1005D192C(v18);
  sub_1005D192C(v19);
  sub_1005D192C(v20);
  sub_1005D192C(&v21);
  return sub_1005D192C(v24);
}

void sub_1005CB038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 1008; i != -56; i -= 56)
    sub_1005CF758((uint64_t)&STACK[0x260] + i);
  sub_1005D192C(&a9);
  sub_1005D192C(&a13);
  sub_1005D192C(&a17);
  sub_1005D192C(&a21);
  sub_1005D192C(&a25);
  sub_1005D192C(&a29);
  sub_1005D192C(&a33);
  sub_1005D192C(&a37);
  sub_1005D192C(&a41);
  sub_1005D192C(&a45);
  sub_1005D192C(&a49);
  sub_1005D192C(&a53);
  sub_1005D192C(&a57);
  sub_1005D192C(&a61);
  sub_1005D192C(&a65);
  sub_1005D192C(&a69);
  sub_1005D192C(&STACK[0x200]);
  sub_1005D192C(&STACK[0x220]);
  sub_1005D192C(&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_1005CB158()
{
}

void sub_1005CB164()
{
}

void sub_1005CB170()
{
}

void sub_1005CB17C()
{
}

void sub_1005CB188()
{
}

void sub_1005CB194()
{
}

void sub_1005CB1A0()
{
}

void sub_1005CB1AC()
{
}

void sub_1005CB1B8()
{
}

void sub_1005CB1C4()
{
}

void sub_1005CB1D0()
{
}

void sub_1005CB1DC()
{
}

void sub_1005CB1E8()
{
}

void sub_1005CB1F4()
{
}

void sub_1005CB200()
{
}

uint64_t sub_1005CB210(uint64_t a1, int a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"modifying subscription for kCLConnectionMessageMiLoServiceEvent and kCLConnectionMessageMiLoPredictionEventUpdate\", \"subscribe?\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  sub_10009C834(a1);
  sub_10009C834(a1);
  sub_10009C834(a1);
  sub_10009C834(a1);
  return sub_10009C834(a1);
}

uint64_t sub_1005CB368(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v26 = 2082;
    unint64_t v27 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoCreateService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if (sub_1005CF794(a1, (uint64_t *)buf))
  {
    uint64_t v5 = objc_opt_class();
    int v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
    uint64_t v8 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && [DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceTypeKey"]
      && [v8 objectForKeyedSubscript:@"CLMiLoConnectionLocationTypesKey"])
    {
      id v9 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionServiceTypeKey"];
      id v10 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:[v8 objectForKeyedSubscript:@"CLMiLoConnectionLocationTypesKey"] error:0];
      uint64_t v11 = objc_opt_class();
      id v12 = [v10 decodeObjectOfClasses:+[NSSet setWithObjects:](NSSet, "setWithObjects:", v11, objc_opt_class(), 0) forKey:NSKeyedArchiveRootObjectKey];
      [v10 finishDecoding];
      uint64_t v13 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      id v14 = *(void **)(a1 + 64);
      __int16 v15 = +[NSString stringWithUTF8String:v13];
      id v16 = [v9 integerValue];
      __int16 v17 = (void *)(a1 + 112);
      if (*(char *)(a1 + 135) < 0) {
        __int16 v17 = (void *)*v17;
      }
      [v14 createServiceForClient:v15 withServiceType:v16 locationTypes:v12 connectionToken:*(void *)(a1 + 72) forUser:[NSString stringWithUTF8String:v17]];
      CFStringRef v19 = @"CLMiLoConnectionReturnCode";
      id v20 = &off_1023927B0;
      +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      return CLConnectionMessage::sendReply();
    }
    else
    {
      v21[0] = @"CLMiLoConnectionReturnCode";
      v21[1] = @"CLMiLoConnectionErrorMessage";
      v22[0] = &off_102392780;
      v22[1] = &off_102392798;
      +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:2];
      return CLConnectionMessage::sendReply();
    }
  }
  else
  {
    v24[0] = &off_102392780;
    v23[0] = @"CLMiLoConnectionReturnCode";
    v23[1] = @"CLMiLoConnectionErrorMessage";
    v24[1] = +[NSNumber numberWithInteger:*(void *)buf];
    +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];
    return CLConnectionMessage::sendReply();
  }
}

void sub_1005CB704(_Unwind_Exception *a1)
{
}

uint64_t sub_1005CB76C(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v23 = 2082;
    unint64_t v24 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoDeleteService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v21[0] = &off_1023927C8;
    v20[0] = @"CLMiLoConnectionReturnCode";
    v20[1] = @"CLMiLoConnectionErrorMessage";
    v21[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v12 = (_UNKNOWN ***)v21;
    uint64_t v13 = (const __CFString **)v20;
LABEL_15:
    uint64_t v14 = 2;
    goto LABEL_16;
  }
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  if (!DictionaryOfClasses
    || (__int16 v7 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"]))
  {
    v18[0] = @"CLMiLoConnectionReturnCode";
    v18[1] = @"CLMiLoConnectionErrorMessage";
    v19[0] = &off_1023927C8;
    v19[1] = &off_102392798;
    id v12 = (_UNKNOWN ***)v19;
    uint64_t v13 = (const __CFString **)v18;
    goto LABEL_15;
  }
  id v8 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v9 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    id v9 = (void *)*v9;
  }
  id v10 = +[NSString stringWithUTF8String:v9];
  uint64_t v11 = (void *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  [*(id *)(a1 + 64) deleteServiceForClient:v10 withServiceIdentifier:v8 withConnectionToken:*(void *)(a1 + 72) forUser:[NSString stringWithUTF8String:v11]];
  CFStringRef v16 = @"CLMiLoConnectionReturnCode";
  __int16 v17 = &off_1023927B0;
  id v12 = &v17;
  uint64_t v13 = &v16;
  uint64_t v14 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:v12 forKeys:v13 count:v14];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CBA0C(uint64_t a1)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  uint64_t v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    CFStringRef v16 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoQueryMyServices received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if (sub_1005CF794(a1, (uint64_t *)buf))
  {
    id v3 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      id v3 = (void *)*v3;
    }
    id v4 = +[NSString stringWithUTF8String:v3];
    uint64_t v5 = (void *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    [*(id *)(a1 + 64) queryServicesForClient:v4 withConnectionToken:*(void *)(a1 + 72) forUser:[NSString stringWithUTF8String:v5]];
    CFStringRef v10 = @"CLMiLoConnectionReturnCode";
    uint64_t v11 = &off_1023927B0;
    int v6 = &v11;
    __int16 v7 = &v10;
    uint64_t v8 = 1;
  }
  else
  {
    v13[0] = &off_1023927E0;
    v12[0] = @"CLMiLoConnectionReturnCode";
    v12[1] = @"CLMiLoConnectionErrorMessage";
    v13[1] = +[NSNumber numberWithInteger:*(void *)buf];
    int v6 = (_UNKNOWN ***)v13;
    __int16 v7 = (const __CFString **)v12;
    uint64_t v8 = 2;
  }
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v7, v8, v10, v11);
  return CLConnectionMessage::sendReply();
}

void sub_1005CBBF8(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v35 = 0;
    __int16 v36 = 2082;
    id v37 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoConnectToService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  uint64_t v29 = 0;
  if ((sub_1005CF794(a1, &v29) & 1) == 0)
  {
    v45[0] = &off_1023927F8;
    v44[0] = @"CLMiLoConnectionReturnCode";
    v44[1] = @"CLMiLoConnectionErrorMessage";
    v45[1] = +[NSNumber numberWithInteger:v29];
    uint64_t v18 = (_UNKNOWN ***)v45;
    CFStringRef v19 = (const __CFString **)v44;
    goto LABEL_18;
  }
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  __int16 v7 = DictionaryOfClasses;
  if (DictionaryOfClasses
    && [DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
  {
    id v8 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
    id v9 = v8;
    if (!*(void *)(a1 + 80))
    {
      *(void *)(a1 + 80) = [v8 copy];
      __int16 v23 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        __int16 v23 = (void *)*v23;
      }
      unint64_t v24 = +[NSString stringWithUTF8String:v23];
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
      id v25 = qword_102419458;
      if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v26 = [(NSString *)v24 UTF8String];
        id v27 = [objc_msgSend(v9, "UUIDString") UTF8String];
        *(_DWORD *)uint64_t buf = 68289539;
        int v35 = 0;
        __int16 v36 = 2082;
        id v37 = "";
        __int16 v38 = 2081;
        *(void *)unint64_t v39 = v26;
        *(_WORD *)&v39[8] = 2081;
        *(void *)&v39[10] = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoConnectionSubscription::handleConnectToService, connecting to service\", \"clientId\":%{private, location:escape_only}s, \"serviceIdentifier\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      uint64_t v28 = (void *)(a1 + 112);
      if (*(char *)(a1 + 135) < 0) {
        uint64_t v28 = (void *)*v28;
      }
      [*(id *)(a1 + 64) connectToServiceForClient:v24 withServiceIdentifier:v9 withConnectionToken:*(void *)(a1 + 72) forUser:[NSString stringWithUTF8String:v28]];
      CFStringRef v30 = @"CLMiLoConnectionReturnCode";
      id v31 = &off_1023927B0;
      uint64_t v18 = &v31;
      CFStringRef v19 = &v30;
      uint64_t v20 = 1;
      goto LABEL_19;
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    CFStringRef v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      id v12 = [[[v9 UUIDString] UTF8String];
      id v13 = [[objc_msgSend(*(id *)(a1 + 80), "UUIDString") UTF8String];
      *(_DWORD *)uint64_t buf = 68289794;
      int v35 = 0;
      __int16 v36 = 2082;
      id v37 = "";
      __int16 v38 = 2082;
      *(void *)unint64_t v39 = v11;
      *(_WORD *)&v39[8] = 2082;
      *(void *)&v39[10] = v12;
      __int16 v40 = 2082;
      id v41 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"connect to service failed, already has an active connection\", \"class\":%{public, location:escape_only}s, \"requestedServiceIdentifierToConnect\":%{public, location:escape_only}s, \"activeConnectionServiceIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
    }
    uint64_t v14 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      id v16 = [[objc_msgSend(v9, "UUIDString") UTF8String];
      id v17 = [[objc_msgSend(*(id *)(a1 + 80), "UUIDString") UTF8String];
      *(_DWORD *)uint64_t buf = 68289794;
      int v35 = 0;
      __int16 v36 = 2082;
      id v37 = "";
      __int16 v38 = 2082;
      *(void *)unint64_t v39 = v15;
      *(_WORD *)&v39[8] = 2082;
      *(void *)&v39[10] = v16;
      __int16 v40 = 2082;
      id v41 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "connect to service failed, already has an active connection", "{\"msg%{public}.0s\":\"connect to service failed, already has an active connection\", \"class\":%{public, location:escape_only}s, \"requestedServiceIdentifierToConnect\":%{public, location:escape_only}s, \"activeConnectionServiceIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    v32[0] = @"CLMiLoConnectionReturnCode";
    v32[1] = @"CLMiLoConnectionErrorMessage";
    v33[0] = &off_1023927F8;
    v33[1] = &off_102392810;
    uint64_t v18 = (_UNKNOWN ***)v33;
    CFStringRef v19 = (const __CFString **)v32;
LABEL_18:
    uint64_t v20 = 2;
LABEL_19:
    +[NSDictionary dictionaryWithObjects:v18 forKeys:v19 count:v20];
    CLConnectionMessage::sendReply();
    return;
  }
  v42[0] = @"CLMiLoConnectionReturnCode";
  v42[1] = @"CLMiLoConnectionErrorMessage";
  v43[0] = &off_1023927F8;
  v43[1] = &off_102392798;
  +[NSDictionary dictionaryWithObjects:v43 forKeys:v42 count:2];
  CLConnectionMessage::sendReply();
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  unint64_t v21 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    if ([v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"]) {
      unint64_t v22 = (const char *)[[[v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"] UUIDString] UTF8String];
    }
    else {
      unint64_t v22 = "";
    }
    *(_DWORD *)uint64_t buf = 68289538;
    int v35 = 0;
    __int16 v36 = 2082;
    id v37 = "";
    __int16 v38 = 1026;
    *(_DWORD *)unint64_t v39 = v7 != 0;
    *(_WORD *)&v39[4] = 2082;
    *(void *)&v39[6] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"handleConnectToService, mesasge info missing\", \"hasDictionary\":%{public}hhd, \"serviceIdentifier\":%{public, location:escape_only}s}", buf, 0x22u);
  }
}

uint64_t sub_1005CC240(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v56 = 0;
    __int16 v57 = 2082;
    uint64_t v58 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoDisconnectToService received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  uint64_t v50 = 0;
  if ((sub_1005CF794(a1, &v50) & 1) == 0)
  {
    v74[0] = &off_102392828;
    v73[0] = @"CLMiLoConnectionReturnCode";
    v73[1] = @"CLMiLoConnectionErrorMessage";
    v74[1] = +[NSNumber numberWithInteger:v50];
    uint64_t v15 = (_UNKNOWN ***)v74;
    id v16 = (const __CFString **)v73;
LABEL_56:
    uint64_t v36 = 2;
    goto LABEL_57;
  }
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  if (!DictionaryOfClasses
    || (__int16 v7 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"]))
  {
    v71[0] = @"CLMiLoConnectionReturnCode";
    v71[1] = @"CLMiLoConnectionErrorMessage";
    v72[0] = &off_102392828;
    v72[1] = &off_102392798;
    uint64_t v15 = (_UNKNOWN ***)v72;
    id v16 = (const __CFString **)v71;
    goto LABEL_56;
  }
  id v8 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    id v17 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (objc_class *)objc_opt_class();
      CFStringRef v19 = [NSStringFromClass(v18) UTF8String];
      uint64_t v20 = (objc_opt_respondsToSelector() & 1) != 0
          ? (const char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "UUIDString"), "UTF8String")
          : "not available";
      *(_DWORD *)uint64_t buf = 68289538;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = v19;
      __int16 v61 = 2082;
      uint64_t v62 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service failed, requested service identifier to disconnect is not a NSUUID object\", \"class of requested service identifier to disconnect\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
    }
    id v37 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      __int16 v38 = (objc_class *)objc_opt_class();
      unint64_t v39 = [NSStringFromClass(v38) UTF8String];
      if (objc_opt_respondsToSelector()) {
        __int16 v40 = (const char *)[objc_msgSend(*(id *)(a1 + 80), "UUIDString") UTF8String];
      }
      else {
        __int16 v40 = "not available";
      }
      *(_DWORD *)uint64_t buf = 68289538;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = v39;
      __int16 v61 = 2082;
      uint64_t v62 = v40;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service failed, requested service identifier to disconnect is not a NSUUID object", "{\"msg%{public}.0s\":\"disconnect to service failed, requested service identifier to disconnect is not a NSUUID object\", \"class of requested service identifier to disconnect\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v69[0] = @"CLMiLoConnectionReturnCode";
    v69[1] = @"CLMiLoConnectionErrorMessage";
    v70[0] = &off_1023927F8;
    v70[1] = &off_102392840;
    uint64_t v15 = (_UNKNOWN ***)v70;
    id v16 = (const __CFString **)v69;
    goto LABEL_56;
  }
  id v9 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    id v9 = (void *)*v9;
  }
  CFStringRef v10 = +[NSString stringWithUTF8String:v9];
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  uint64_t v11 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = [(NSString *)v10 UTF8String];
    id v13 = (const char *)[v8 UUIDString];
    *(_DWORD *)uint64_t buf = 68289539;
    int v56 = 0;
    __int16 v57 = 2082;
    uint64_t v58 = "";
    __int16 v59 = 2081;
    uint64_t v60 = v12;
    __int16 v61 = 2081;
    uint64_t v62 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLMiLoConnectionSubscription::handleDisconnectToService, disconnecting\", \"clientId\":%{private, location:escape_only}s, \"serviceIdentifier\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  if (!*(void *)(a1 + 80))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    unint64_t v21 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v23 = (const char *)[v8 UUIDString];
      *(_DWORD *)uint64_t buf = 68289538;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = (const char *)v22;
      __int16 v61 = 2082;
      uint64_t v62 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service failed, doesn't have an active connection\", \"class\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
    }
    unint64_t v24 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      uint64_t v25 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = (const char *)[v8 UUIDString];
      *(_DWORD *)uint64_t buf = 68289538;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = (const char *)v25;
      __int16 v61 = 2082;
      uint64_t v62 = v26;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service failed, doesn't have an active connection", "{\"msg%{public}.0s\":\"disconnect to service failed, doesn't have an active connection\", \"class\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v67[0] = @"CLMiLoConnectionReturnCode";
    v67[1] = @"CLMiLoConnectionErrorMessage";
    v68[0] = &off_1023927F8;
    v68[1] = &off_102392858;
    uint64_t v15 = (_UNKNOWN ***)v68;
    id v16 = (const __CFString **)v67;
    goto LABEL_56;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    id v27 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = (objc_class *)objc_opt_class();
      uint64_t v29 = [NSStringFromClass(v28) UTF8String];
      CFStringRef v30 = (const char *)[v8 UUIDString];
      *(_DWORD *)uint64_t buf = 68289538;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = v29;
      __int16 v61 = 2082;
      uint64_t v62 = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service, connected service identifier is not a NSUUID object\", \"class of connected service identifier\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
    }
    id v31 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      uint64_t v32 = (objc_class *)objc_opt_class();
      uint64_t v33 = [NSStringFromClass(v32) UTF8String];
      uint64_t v34 = (const char *)[v8 UUIDString].UTF8String;
      *(_DWORD *)uint64_t buf = 68289538;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = v33;
      __int16 v61 = 2082;
      uint64_t v62 = v34;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service, connected service identifier is not a NSUUID object", "{\"msg%{public}.0s\":\"disconnect to service, connected service identifier is not a NSUUID object\", \"class of connected service identifier\":%{public, location:escape_only}s, \"requested service identifier to disconnect\":%{public, location:escape_only}s}", buf, 0x26u);
    }

    *(void *)(a1 + 80) = 0;
    int v35 = (void *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      int v35 = (void *)*v35;
    }
    [*(id *)(a1 + 64) disconnectToServiceForClient:v10 withServiceIdentifier:v8 withConnectionToken:*(void *)(a1 + 72) forUser:[NSString stringWithUTF8String:v35]];
    CFStringRef v65 = @"CLMiLoConnectionReturnCode";
    double v66 = &off_1023927B0;
    uint64_t v15 = &v66;
    id v16 = &v65;
    goto LABEL_46;
  }
  if (([v8 isEqual:*(void *)(a1 + 80)] & 1) == 0)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    uint64_t v42 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v44 = (const char *)[[*(id *)(a1 + 80) UUIDString] UTF8String];
      id v45 = [[[v8 UUIDString] UTF8String];
      *(_DWORD *)uint64_t buf = 68289794;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = (const char *)v43;
      __int16 v61 = 2082;
      uint64_t v62 = v44;
      __int16 v63 = 2082;
      id v64 = v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"disconnect to service failed, disconnect a not connected service\", \"class\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s, \"requested service identifierToDisconnect\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022BD230);
      }
    }
    uint64_t v46 = qword_102419458;
    if (os_signpost_enabled((os_log_t)qword_102419458))
    {
      uint64_t v47 = *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v48 = (const char *)[objc_msgSend(*(id *)(a1 + 80), "UUIDString") UTF8String];
      id v49 = [[[v8 UUIDString] UTF8String];
      *(_DWORD *)uint64_t buf = 68289794;
      int v56 = 0;
      __int16 v57 = 2082;
      uint64_t v58 = "";
      __int16 v59 = 2082;
      uint64_t v60 = (const char *)v47;
      __int16 v61 = 2082;
      uint64_t v62 = v48;
      __int16 v63 = 2082;
      id v64 = v49;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "disconnect to service failed, disconnect a not connected service", "{\"msg%{public}.0s\":\"disconnect to service failed, disconnect a not connected service\", \"class\":%{public, location:escape_only}s, \"connected service identifier\":%{public, location:escape_only}s, \"requested service identifierToDisconnect\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    v53[0] = @"CLMiLoConnectionReturnCode";
    v53[1] = @"CLMiLoConnectionErrorMessage";
    v54[0] = &off_1023927F8;
    v54[1] = &off_102392840;
    uint64_t v15 = (_UNKNOWN ***)v54;
    id v16 = (const __CFString **)v53;
    goto LABEL_56;
  }

  *(void *)(a1 + 80) = 0;
  uint64_t v14 = (void *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    uint64_t v14 = (void *)*v14;
  }
  [*(id *)(a1 + 64) disconnectToServiceForClient:v10 withServiceIdentifier:v8 withConnectionToken:*(void *)(a1 + 72) forUser:[NSString stringWithUTF8String:v14]];
  CFStringRef v51 = @"CLMiLoConnectionReturnCode";
  uint64_t v52 = &off_1023927B0;
  uint64_t v15 = &v52;
  id v16 = &v51;
LABEL_46:
  uint64_t v36 = 1;
LABEL_57:
  +[NSDictionary dictionaryWithObjects:v15 forKeys:v16 count:v36];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CCD6C(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v22 = 2082;
    __int16 v23 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoSingleShotPrediction received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v20[0] = &off_102392870;
    v19[0] = @"CLMiLoConnectionReturnCode";
    v19[1] = @"CLMiLoConnectionErrorMessage";
    v20[1] = +[NSNumber numberWithInteger:*(void *)buf];
    uint64_t v11 = (_UNKNOWN ***)v20;
    id v12 = (const __CFString **)v19;
LABEL_14:
    uint64_t v13 = 2;
    goto LABEL_15;
  }
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  if (!DictionaryOfClasses
    || (__int16 v7 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"])
  {
    v17[0] = @"CLMiLoConnectionReturnCode";
    v17[1] = @"CLMiLoConnectionErrorMessage";
    v18[0] = &off_102392870;
    v18[1] = &off_102392840;
    uint64_t v11 = (_UNKNOWN ***)v18;
    id v12 = (const __CFString **)v17;
    goto LABEL_14;
  }
  id v8 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v9 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
  CFStringRef v10 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    CFStringRef v10 = (void *)*v10;
  }
  [*(id *)(a1 + 64) requestSingleShotMiLoPredictionForClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10) withServiceIdentifier:v8 withRequestIdentifier:v9 withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v15 = @"CLMiLoConnectionReturnCode";
  id v16 = &off_1023927B0;
  uint64_t v11 = &v16;
  id v12 = &v15;
  uint64_t v13 = 1;
LABEL_15:
  +[NSDictionary dictionaryWithObjects:v11 forKeys:v12 count:v13];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CD00C(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v23 = 2082;
    unint64_t v24 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestObservation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v21[0] = &off_102392870;
    v20[0] = @"CLMiLoConnectionReturnCode";
    v20[1] = @"CLMiLoConnectionErrorMessage";
    v21[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v12 = (_UNKNOWN ***)v21;
    uint64_t v13 = (const __CFString **)v20;
LABEL_14:
    uint64_t v14 = 2;
    goto LABEL_15;
  }
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  if (!DictionaryOfClasses
    || (__int16 v7 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"])
  {
    v18[0] = @"CLMiLoConnectionReturnCode";
    v18[1] = @"CLMiLoConnectionErrorMessage";
    v19[0] = &off_102392870;
    v19[1] = &off_102392840;
    id v12 = (_UNKNOWN ***)v19;
    uint64_t v13 = (const __CFString **)v18;
    goto LABEL_14;
  }
  id v8 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v9 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
  id v10 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionPlaceLabelIdentifier"];
  uint64_t v11 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    uint64_t v11 = (void *)*v11;
  }
  [*(id *)(a1 + 64) requestObservationForClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11) withServiceIdentifier:v8 withRequestIdentifier:v9 withPlaceIdentifier:v10 withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v16 = @"CLMiLoConnectionReturnCode";
  id v17 = &off_1023927B0;
  id v12 = &v17;
  uint64_t v13 = &v16;
  uint64_t v14 = 1;
LABEL_15:
  +[NSDictionary dictionaryWithObjects:v12 forKeys:v13 count:v14];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CD2C8(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageLabelSignleObservation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v22[0] = &off_102392870;
    v21[0] = @"CLMiLoConnectionReturnCode";
    v21[1] = @"CLMiLoConnectionErrorMessage";
    v22[1] = +[NSNumber numberWithInteger:*(void *)buf];
    uint64_t v13 = (_UNKNOWN ***)v22;
    uint64_t v14 = (const __CFString **)v21;
LABEL_15:
    uint64_t v15 = 2;
    goto LABEL_16;
  }
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  if (!DictionaryOfClasses
    || (__int16 v7 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"]
    || ![v7 objectForKeyedSubscript:@"CLMiLoConnectionPlaceLabelIdentifier"])
  {
    v19[0] = @"CLMiLoConnectionReturnCode";
    v19[1] = @"CLMiLoConnectionErrorMessage";
    v20[0] = &off_102392870;
    v20[1] = &off_102392840;
    uint64_t v13 = (_UNKNOWN ***)v20;
    uint64_t v14 = (const __CFString **)v19;
    goto LABEL_15;
  }
  id v8 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v9 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
  id v10 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionPlaceLabelIdentifier"];
  id v11 = [v7 objectForKeyedSubscript:@"CLMiLoConnectionObservationIdentifier"];
  id v12 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    id v12 = (void *)*v12;
  }
  [*(id *)(a1 + 64) requestLabelSingleObservationForClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12) withServiceIdentifier:v8 withRequestIdentifier:v9 withPlaceIdentifier:v10 withObservationRequestIdentifier:v11 withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v17 = @"CLMiLoConnectionReturnCode";
  uint64_t v18 = &off_1023927B0;
  uint64_t v13 = &v18;
  uint64_t v14 = &v17;
  uint64_t v15 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:v13 forKeys:v14 count:v15];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CD5B4(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v26 = 2082;
    id v27 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageLabelObservationsBetweenDates received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v24[0] = &off_102392870;
    v23[0] = @"CLMiLoConnectionReturnCode";
    v23[1] = @"CLMiLoConnectionErrorMessage";
    v24[1] = +[NSNumber numberWithInteger:*(void *)buf];
    uint64_t v15 = (_UNKNOWN ***)v24;
    CFStringRef v16 = (const __CFString **)v23;
LABEL_17:
    uint64_t v17 = 2;
    goto LABEL_18;
  }
  uint64_t v5 = objc_opt_class();
  int v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (id v8 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"]
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionPlaceLabelIdentifier"]
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionObservationStartDate"]
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionObservationEndDate"])
  {
    v21[0] = @"CLMiLoConnectionReturnCode";
    v21[1] = @"CLMiLoConnectionErrorMessage";
    v22[0] = &off_102392870;
    v22[1] = &off_102392840;
    uint64_t v15 = (_UNKNOWN ***)v22;
    CFStringRef v16 = (const __CFString **)v21;
    goto LABEL_17;
  }
  id v9 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v10 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
  id v11 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionPlaceLabelIdentifier"];
  id v12 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionObservationStartDate"];
  id v13 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionObservationEndDate"];
  uint64_t v14 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    uint64_t v14 = (void *)*v14;
  }
  [*(id *)(a1 + 64) requestLabelObservationsForClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14) withServiceIdentifier:v9 withRequestIdentifier:v10 withPlaceIdentifier:v11 betweenStartDate:v12 endDate:v13 withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v19 = @"CLMiLoConnectionReturnCode";
  uint64_t v20 = &off_1023927B0;
  uint64_t v15 = &v20;
  CFStringRef v16 = &v19;
  uint64_t v17 = 1;
LABEL_18:
  +[NSDictionary dictionaryWithObjects:v15 forKeys:v16 count:v17];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CD900(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageRemoveLabels received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v22[0] = &off_102392870;
    v21[0] = @"CLMiLoConnectionReturnCode";
    v21[1] = @"CLMiLoConnectionErrorMessage";
    v22[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v13 = (_UNKNOWN ***)v22;
    uint64_t v14 = (const __CFString **)v21;
LABEL_15:
    uint64_t v15 = 2;
    goto LABEL_16;
  }
  uint64_t v5 = objc_opt_class();
  int v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (id v8 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"]
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionLabelArray"])
  {
    v19[0] = @"CLMiLoConnectionReturnCode";
    v19[1] = @"CLMiLoConnectionErrorMessage";
    v20[0] = &off_102392870;
    v20[1] = &off_102392840;
    id v13 = (_UNKNOWN ***)v20;
    uint64_t v14 = (const __CFString **)v19;
    goto LABEL_15;
  }
  id v9 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v10 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
  id v11 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionLabelArray"];
  id v12 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    id v12 = (void *)*v12;
  }
  [*(id *)(a1 + 64) requestRemoveLabelsForClient:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)] withServiceIdentifier:v9 withRequestIdentifier:v10 withLabels:v11 withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v17 = @"CLMiLoConnectionReturnCode";
  uint64_t v18 = &off_1023927B0;
  id v13 = &v18;
  uint64_t v14 = &v17;
  uint64_t v15 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:v13 forKeys:v14 count:v15];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CDBE0(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageStartUpdatingMicroLocation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v22[0] = &off_102392870;
    v21[0] = @"CLMiLoConnectionReturnCode";
    v21[1] = @"CLMiLoConnectionErrorMessage";
    v22[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v13 = (_UNKNOWN ***)v22;
    uint64_t v14 = (const __CFString **)v21;
LABEL_15:
    uint64_t v15 = 2;
    goto LABEL_16;
  }
  uint64_t v5 = objc_opt_class();
  int v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (id v8 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"]
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionUpdateConfiguration"])
  {
    v19[0] = @"CLMiLoConnectionReturnCode";
    v19[1] = @"CLMiLoConnectionErrorMessage";
    v20[0] = &off_102392870;
    v20[1] = &off_102392840;
    id v13 = (_UNKNOWN ***)v20;
    uint64_t v14 = (const __CFString **)v19;
    goto LABEL_15;
  }
  id v9 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v10 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
  id v11 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionUpdateConfiguration"];
  id v12 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    id v12 = (void *)*v12;
  }
  [*(id *)(a1 + 64) requestStartUpdatingMicroLocationForClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12) withServiceIdentifier:v9 withRequestIdentifier:v10 withConfiguration:v11 withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v17 = @"CLMiLoConnectionReturnCode";
  uint64_t v18 = &off_1023927B0;
  id v13 = &v18;
  uint64_t v14 = &v17;
  uint64_t v15 = 1;
LABEL_16:
  +[NSDictionary dictionaryWithObjects:v13 forKeys:v14 count:v15];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CDEC0(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v23 = 2082;
    __int16 v24 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageStopUpdatingMicroLocation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v21[0] = &off_102392870;
    v20[0] = @"CLMiLoConnectionReturnCode";
    v20[1] = @"CLMiLoConnectionErrorMessage";
    v21[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v12 = (_UNKNOWN ***)v21;
    id v13 = (const __CFString **)v20;
LABEL_14:
    uint64_t v14 = 2;
    goto LABEL_15;
  }
  uint64_t v5 = objc_opt_class();
  int v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (id v8 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"])
  {
    v18[0] = @"CLMiLoConnectionReturnCode";
    v18[1] = @"CLMiLoConnectionErrorMessage";
    v19[0] = &off_102392870;
    v19[1] = &off_102392840;
    id v12 = (_UNKNOWN ***)v19;
    id v13 = (const __CFString **)v18;
    goto LABEL_14;
  }
  id v9 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
  id v10 = [v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
  id v11 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    id v11 = (void *)*v11;
  }
  [*(id *)(a1 + 64) requestStopUpdatingMicroLocationForClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11) withServiceIdentifier:v9 withRequestIdentifier:v10 withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v16 = @"CLMiLoConnectionReturnCode";
  CFStringRef v17 = &off_1023927B0;
  id v12 = &v17;
  id v13 = &v16;
  uint64_t v14 = 1;
LABEL_15:
  +[NSDictionary dictionaryWithObjects:v12 forKeys:v13 count:v14];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CE170(uint64_t a1)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  uint64_t v2 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v12 = 2082;
    id v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoQueryConnectionStatus received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if (sub_1005CF794(a1, (uint64_t *)buf))
  {
    [*(id *)(a1 + 64) queryMiloConnectionStatus:*(void *)(a1 + 72)];
    CFStringRef v7 = @"CLMiLoConnectionReturnCode";
    id v8 = &off_1023927B0;
    id v3 = &v8;
    id v4 = &v7;
    uint64_t v5 = 1;
  }
  else
  {
    v10[0] = &off_102392888;
    v9[0] = @"CLMiLoConnectionReturnCode";
    v9[1] = @"CLMiLoConnectionErrorMessage";
    v10[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v3 = (_UNKNOWN ***)v10;
    id v4 = (const __CFString **)v9;
    uint64_t v5 = 2;
  }
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v4, v5, v7, v8);
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CE30C(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageMiLoEnableMiLoAtCurrentLocation received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v17[0] = &off_102392870;
    v16[0] = @"CLMiLoConnectionReturnCode";
    v16[1] = @"CLMiLoConnectionErrorMessage";
    v17[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v8 = (_UNKNOWN ***)v17;
    id v9 = (const __CFString **)v16;
LABEL_12:
    uint64_t v10 = 2;
    goto LABEL_13;
  }
  uint64_t v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  if (!DictionaryOfClasses
    || (CFStringRef v7 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"])
  {
    v14[0] = @"CLMiLoConnectionReturnCode";
    v14[1] = @"CLMiLoConnectionErrorMessage";
    v15[0] = &off_102392870;
    v15[1] = &off_102392840;
    id v8 = (_UNKNOWN ***)v15;
    id v9 = (const __CFString **)v14;
    goto LABEL_12;
  }
  [*(id *)(a1 + 64) enableMiLoAtCurrentLocationWithServiceIdentifier:[v7 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"] withRequestIdentifier:[v7 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"] connectionToken:*(void *)(a1 + 72)];
  CFStringRef v12 = @"CLMiLoConnectionReturnCode";
  id v13 = &off_1023927B0;
  id v8 = &v13;
  id v9 = &v12;
  uint64_t v10 = 1;
LABEL_13:
  +[NSDictionary dictionaryWithObjects:v8 forKeys:v9 count:v10];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CE588(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t buf = 68289026;
    __int16 v20 = 2082;
    unint64_t v21 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"kCLConnectionMessageRemoveCustomLOI received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  *(void *)uint64_t buf = 0;
  if ((sub_1005CF794(a1, (uint64_t *)buf) & 1) == 0)
  {
    v18[0] = &off_102392870;
    v17[0] = @"CLMiLoConnectionReturnCode";
    v17[1] = @"CLMiLoConnectionErrorMessage";
    v18[1] = +[NSNumber numberWithInteger:*(void *)buf];
    id v9 = (_UNKNOWN ***)v18;
    uint64_t v10 = (const __CFString **)v17;
LABEL_13:
    uint64_t v11 = 2;
    goto LABEL_14;
  }
  uint64_t v5 = objc_opt_class();
  int v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
  if (!DictionaryOfClasses
    || (id v8 = DictionaryOfClasses,
        ![DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"])
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"]
    || ![v8 objectForKeyedSubscript:@"CLMiLoConnectionLOIIdentifier"])
  {
    v15[0] = @"CLMiLoConnectionReturnCode";
    v15[1] = @"CLMiLoConnectionErrorMessage";
    v16[0] = &off_102392870;
    v16[1] = &off_102392840;
    id v9 = (_UNKNOWN ***)v16;
    uint64_t v10 = (const __CFString **)v15;
    goto LABEL_13;
  }
  [*(id *)(a1 + 64) requestRemoveCustomLoiWithServiceIdentifier:[v8 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"] withRequestIdentifier:[v8 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"] withLoiIdentifier:[v8 objectForKeyedSubscript:@"CLMiLoConnectionLOIIdentifier"] withConnectionToken:*(void *)(a1 + 72)];
  CFStringRef v13 = @"CLMiLoConnectionReturnCode";
  uint64_t v14 = &off_1023927B0;
  id v9 = &v14;
  uint64_t v10 = &v13;
  uint64_t v11 = 1;
LABEL_14:
  +[NSDictionary dictionaryWithObjects:v9 forKeys:v10 count:v11];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_1005CE844(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v25 = 2082;
    __int16 v26 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestModelLearning received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  uint64_t v17 = 0;
  if (sub_1005CF794(a1, &v17))
  {
    sub_100134750(buf, "com.apple.locationd.private_info");
    char v5 = sub_1010A4BAC(a1);
    char v6 = v5;
    if (v27 < 0)
    {
      operator delete(*(void **)buf);
      if (v6) {
        goto LABEL_8;
      }
    }
    else if (v5)
    {
LABEL_8:
      CFStringRef v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
      id v9 = DictionaryOfClasses;
      if (DictionaryOfClasses
        && [DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"]
        && [v9 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"])
      {
        id v10 = [v9 objectForKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
        id v11 = [v9 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
        CFStringRef v12 = (void *)(a1 + 88);
        if (*(char *)(a1 + 111) < 0) {
          CFStringRef v12 = (void *)*v12;
        }
        [*(id *)(a1 + 64) requestMicroLocationLearningForClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12) withServiceIdentifier:v10 withRequestIdentifier:v11];
        CFStringRef v18 = @"CLMiLoConnectionReturnCode";
        __int16 v19 = &off_1023927B0;
        +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
        return CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_1022BD230);
        }
        uint64_t v15 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v25 = 2082;
          __int16 v26 = "";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalid data for kCLConnectionMessageRequestModelLearning\"}", buf, 0x12u);
        }
        v20[0] = @"CLMiLoConnectionReturnCode";
        v20[1] = @"CLMiLoConnectionErrorMessage";
        v21[0] = &off_102392870;
        v21[1] = &off_102392840;
        +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
        return CLConnectionMessage::sendReply();
      }
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    CFStringRef v16 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v25 = 2082;
      __int16 v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestModelLearning\"}", buf, 0x12u);
    }
    v22[0] = @"CLMiLoConnectionReturnCode";
    v22[1] = @"CLMiLoConnectionErrorMessage";
    v23[0] = &off_102392870;
    v23[1] = +[NSNumber numberWithInteger:1];
    +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:2];
    return CLConnectionMessage::sendReply();
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v25 = 2082;
      __int16 v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for MiLo connection\"}", buf, 0x12u);
    }
    v29[0] = &off_102392870;
    v28[0] = @"CLMiLoConnectionReturnCode";
    v28[1] = @"CLMiLoConnectionErrorMessage";
    v29[1] = +[NSNumber numberWithInteger:v17];
    +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
    return CLConnectionMessage::sendReply();
  }
}

void sub_1005CED3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CED60(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v24 = 2082;
    __int16 v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestPurgeMiLoData received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  uint64_t v16 = 0;
  if (sub_1005CF794(a1, &v16))
  {
    sub_100134750(buf, "com.apple.locationd.milo_purge_data");
    char v5 = sub_1010A4BAC(a1);
    char v6 = v5;
    if (v26 < 0)
    {
      operator delete(*(void **)buf);
      if (v6) {
        goto LABEL_8;
      }
    }
    else if (v5)
    {
LABEL_8:
      CFStringRef v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
      id v9 = DictionaryOfClasses;
      if (DictionaryOfClasses
        && [DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"])
      {
        id v10 = [v9 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
        id v11 = (void *)(a1 + 88);
        if (*(char *)(a1 + 111) < 0) {
          id v11 = (void *)*v11;
        }
        [*(id *)(a1 + 64) requestPurgeAllMiLoDataFromClient:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11) withRequestIdentifier:v10];
        CFStringRef v17 = @"CLMiLoConnectionReturnCode";
        CFStringRef v18 = &off_1023927B0;
        +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
        return CLConnectionMessage::sendReply();
      }
      else
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_1022BD230);
        }
        uint64_t v15 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v24 = 2082;
          __int16 v25 = "";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalid data for kCLConnectionMessageRequestPurgeMiLoData\"}", buf, 0x12u);
        }
        v19[0] = @"CLMiLoConnectionReturnCode";
        v19[1] = @"CLMiLoConnectionErrorMessage";
        v20[0] = &off_102392870;
        v20[1] = &off_102392840;
        +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:2];
        return CLConnectionMessage::sendReply();
      }
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    uint64_t v14 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      __int16 v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestMiLoExportDatabaseTables\"}", buf, 0x12u);
    }
    v21[0] = @"CLMiLoConnectionReturnCode";
    v21[1] = @"CLMiLoConnectionErrorMessage";
    v22[0] = &off_102392870;
    v22[1] = +[NSNumber numberWithInteger:1];
    +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:2];
    return CLConnectionMessage::sendReply();
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    CFStringRef v13 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      __int16 v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestPurgeMiLoData\"}", buf, 0x12u);
    }
    v28[0] = &off_102392870;
    v27[0] = @"CLMiLoConnectionReturnCode";
    v27[1] = @"CLMiLoConnectionErrorMessage";
    v28[1] = +[NSNumber numberWithInteger:v16];
    +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:2];
    return CLConnectionMessage::sendReply();
  }
}

void sub_1005CF220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005CF244(uint64_t a1, CLConnectionMessage **a2)
{
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v4 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v23) = 2082;
    *(void *)((char *)&v23 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestMiLoExportDatabaseTables received in CLMiLoConnectionSubscription\"}", buf, 0x12u);
  }
  uint64_t v15 = 0;
  if (sub_1005CF794(a1, &v15))
  {
    sub_100134750(buf, "com.apple.locationd.microlocation.export-db");
    char v5 = sub_1010A4BAC(a1);
    char v6 = v5;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(*(void **)buf);
      if (v6) {
        goto LABEL_8;
      }
    }
    else if (v5)
    {
LABEL_8:
      CFStringRef v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
      id v9 = DictionaryOfClasses;
      if (DictionaryOfClasses
        && [DictionaryOfClasses objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"])
      {
        id v10 = [v9 objectForKeyedSubscript:@"CLMiLoConnectionRequestIdentifier"];
        *(void *)uint64_t buf = 0;
        long long v23 = 0uLL;
        sub_1010A4D8C(a1);
        if (v23 >= 0) {
          id v11 = buf;
        }
        else {
          id v11 = *(uint8_t **)buf;
        }
        [*(id *)(a1 + 64) requestExportMiLoDatabaseTablesFromClient:[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11) withRequestIdentifier:v10 connectionToken:*(void *)(a1 + 72)];
        CFStringRef v16 = @"CLMiLoConnectionReturnCode";
        CFStringRef v17 = &off_1023927B0;
        +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
        CLConnectionMessage::sendReply();
        if (SHIBYTE(v23) < 0) {
          operator delete(*(void **)buf);
        }
      }
      else
      {
        if (qword_102419450 != -1) {
          dispatch_once(&qword_102419450, &stru_1022BD230);
        }
        uint64_t v14 = qword_102419458;
        if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          LOWORD(v23) = 2082;
          *(void *)((char *)&v23 + 2) = "";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invalid data for kCLConnectionMessageRequestMiLoExportDatabaseTables\"}", buf, 0x12u);
        }
        v18[0] = @"CLMiLoConnectionReturnCode";
        v18[1] = @"CLMiLoConnectionErrorMessage";
        v19[0] = &off_102392870;
        v19[1] = &off_102392840;
        +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:2];
        CLConnectionMessage::sendReply();
      }
      return;
    }
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    CFStringRef v13 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v23) = 2082;
      *(void *)((char *)&v23 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for kCLConnectionMessageRequestMiLoExportDatabaseTables\"}", buf, 0x12u);
    }
    v20[0] = @"CLMiLoConnectionReturnCode";
    v20[1] = @"CLMiLoConnectionErrorMessage";
    v21[0] = &off_102392870;
    v21[1] = +[NSNumber numberWithInteger:1];
    +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
    CLConnectionMessage::sendReply();
  }
  else
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    CFStringRef v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v23) = 2082;
      *(void *)((char *)&v23 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"not qualified for CLMiLoConnection\"}", buf, 0x12u);
    }
    v25[0] = &off_102392870;
    v24[0] = @"CLMiLoConnectionReturnCode";
    v24[1] = @"CLMiLoConnectionErrorMessage";
    v25[1] = +[NSNumber numberWithInteger:v15];
    +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
    CLConnectionMessage::sendReply();
  }
}

void sub_1005CF72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CF758(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1005CF794(uint64_t a1, uint64_t *a2)
{
  sub_100134750(&__p, "com.apple.locationd.milo_connection");
  char v4 = sub_1010A4BAC(a1);
  char v5 = v4;
  if (v13 < 0)
  {
    operator delete(__p);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022BD230);
    }
    CFStringRef v7 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289026;
      __int16 v11 = 2082;
      CFStringRef v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SPI request, client is not entitled for CLMiLoConnection\"}", (uint8_t *)&__p, 0x12u);
    }
    uint64_t v8 = 1;
    goto LABEL_16;
  }
  if ((v4 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (sub_100FBAE1C()) {
    return 1;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022BD230);
  }
  id v9 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    __p = (void *)68289026;
    __int16 v11 = 2082;
    CFStringRef v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SPI request, CLMiLoConnection is not available on this platform\"}", (uint8_t *)&__p, 0x12u);
  }
  uint64_t v8 = 2;
LABEL_16:
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

void sub_1005CF958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005CF97C(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1005CF9AC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1005CF9DC(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    id v3 = (void *)(a1 + 24);
  }
  *id v3 = 0;
  return a1;
}

id sub_1005CFA5C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      id v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23C89 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoServiceEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23C89 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BD270);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1005CFE1C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

id sub_1005CFE4C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      id v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23CBCLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoPrediction, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23CBCLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BD270);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1005D020C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      id v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23CEDLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoServiceDebugResponse, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23CEDLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BD270);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1005D05CC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1005D0D18((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022BD270);
    }
    char v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D23D28 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022BD270);
  }
  id v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D23D28 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022BD270);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D23D28 & 0x7FFFFFFFFFFFFFFFLL;
  char v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoConnectionStatusEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1005D0958(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      id v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23D28 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoConnectionStatusEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23D28 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BD270);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1005D0D18(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023928A0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8) {
      sub_101A667DC();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

id sub_1005D0DA0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      id v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23D64 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoRecordingMetaInfoEvent, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23D64 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BD270);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1005D1160(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      id v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23DA1 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMicroLocationNotifier_Type::MiLoGenericEventResponse, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BD270);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D23DA1 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BD270);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void *sub_1005D1520@<X0>(char **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_1000E9484(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1005D1570(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1005D1584(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = off_1022BD2C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1005D15D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022BD2C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1005D1600(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_1005D1608(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1005D1648()
{
}

void sub_1005D1654(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1005D16B0(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1005D1698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D16B0(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  char v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    id v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      id v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BD338);
    }
    __int16 v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      unint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BD338);
      }
    }
    unint64_t v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      unint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_1005D18E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1005D18FC(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void *sub_1005D192C(void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_1005D19B0(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = off_1022BD378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1005D19FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022BD378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1005D1A2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1005D1A34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1005D1A74()
{
}

void sub_1005D1A80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  char v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    char v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_1005D1B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D1B44(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1005D1BC0(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1005D1BAC(_Unwind_Exception *a1)
{
  sub_1005D2074(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1005D1BC0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1005D1E44(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1005D1FCC((uint64_t)v25, 0);
  return i;
}

void sub_1005D1E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1005D1FCC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1005D1E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1005D1EBC(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1005D1EA4(_Unwind_Exception *a1)
{
  sub_1005D1FCC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1005D1EBC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_1005D1F34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1005D1F18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D1F34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1005D1FCC(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1005D2024((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1005D2024(uint64_t a1)
{
  sub_1005D192C((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    id v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_1005D2074(uint64_t a1)
{
  sub_1005D20B0(a1, *(void **)(a1 + 16));
  id v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1005D20B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1005D2024((uint64_t)(v2 + 2));
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
}

void sub_1005D21A4(id a1)
{
  qword_10247C658 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CMHealthColdStorageWatchServiceSilo"];
}

void sub_1005D2264(id a1)
{
  if (sub_10010145C()) {
    byte_10247C668 = 1;
  }
}

void sub_1005D27DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  operator delete();
}

id sub_1005D2850(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onCompanionNotification:a2 data:a3];
}

void sub_1005D2860()
{
}

void sub_1005D2978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A61384(v11, v10);
  operator delete();
}

void sub_1005D2CA0(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    unint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      float v16 = &v15[24 * v11];
      float v17 = &v15[24 * v14];
      *(double *)float v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      unint64_t v10 = v16 + 24;
      unint64_t v19 = (char *)*a1;
      BOOL v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        BOOL v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      unint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BD578);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BD578);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_1005D2F58(uint64_t a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BD4E8);
  }
  id v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating ElevationGrade db records", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BD4E8);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageWatchService setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1005D3100(*(void *)(*(void *)(a1 + 32) + 128));
}

uint64_t sub_1005D3100(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BD578);
    }
    id v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BD578);
      }
      sub_1000D3E50();
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BD578);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BD578);
      }
      sub_1000D3E50();
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1005D5E54(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BD578);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1005D5E54(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)size_t v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BD578);
        }
        sub_1005D5E54(*(void *)(a1 + 24), (double **)a1);
        unint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    float v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

id sub_1005D3990(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005D3A28;
  v4[3] = &unk_1022BD458;
  long long v5 = *(_OWORD *)(a1 + 40);
  return sub_1005E26F4(518400.0, a2, 34, v2, 300, 0, 1, 1, 0, (uint64_t)v4);
}

id sub_1005D3A28(uint64_t a1, char a2, uint64_t a3)
{
  id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1005D3AC8;
  v8[3] = &unk_1022BD430;
  char v11 = a2;
  long long v9 = *(_OWORD *)(a1 + 32);
  uint64_t v10 = a3;
  return [v6 async:v8];
}

id sub_1005D3AC8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  double v3 = *(_DWORD **)(a1 + 32);
  if (v2)
  {
    [v3 saveCurrentSyncProgress];
    int v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    return [v4 continueSync:v5];
  }
  else
  {
    ++v3[42];
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022BD4C8);
    }
    double v7 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[WatchService] Transfer to phone failed with error, %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022BD4C8);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageWatchService sendCompanionData:activity:]_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return [*(id *)(a1 + 32) setActivityAsDone:*(void *)(a1 + 40)];
  }
}

void sub_1005D45B8(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022BD4C8);
  }
  int v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[WatchService] Sync timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022BD4C8);
    }
    xpc_activity_get_state(a2);
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageWatchService setupSyncActivity]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(void *)(*(void *)(a1 + 32) + 160) = os_transaction_create();
  [*(id *)(a1 + 40) onSyncActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022BD4C8);
    }
    uint64_t v5 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)uint64_t buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[WatchService] Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022BD4C8);
      }
      xpc_activity_get_state(a2);
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageWatchService setupSyncActivity]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

id sub_1005D4DC0(uint64_t a1)
{
  [*(id *)(a1 + 32) resetAnalytics];
  *(_DWORD *)(*(void *)(a1 + 32) + 144) = 0;
  *(_DWORD *)(*(void *)(a1 + 32) + 148) = 0;
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 continueSync:v3];
}

uint64_t sub_1005D5918(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1005D5B24(id a1)
{
  qword_102419308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_1005D5B54(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1005D5B84(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1005D5BB4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a2[5];
    if (v3) {
      sub_1000DB0A0(v3);
    }
    int v4 = (std::__shared_weak_count *)a2[3];
    if (v4) {
      sub_1000DB0A0(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      sub_1000DB0A0(v5);
    }
    operator delete();
  }
}

void sub_1005D5C24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_1000DB0A0(v2);
    }
    operator delete();
  }
}

uint64_t sub_1005D5C7C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100EEA568();
    operator delete();
  }
  return result;
}

void *sub_1005D5CCC@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x180uLL);
  uint64_t result = sub_1005D5D28(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1005D5D14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1005D5D28(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022BD538;
  sub_100EEA564(a1 + 3, *a2);
  return a1;
}

void sub_1005D5D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1005D5D88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BD538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005D5DA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BD538;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1005D5DFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1005D5E24(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1005D5E54(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  int v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022BD508);
    }
    uint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022BD508);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_1005D6054(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  double v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v27 = *a4;
  uint64_t v28 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v25 = *a5;
  char v26 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a6[1];
  uint64_t v23 = *a6;
  __int16 v24 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v22[0] = xmmword_10247C678;
  v22[1] = unk_10247C688;
  void v22[2] = xmmword_10247C698;
  sub_100D6AEB4(a1, a2, 8, &v27, &v25, &v23, a8, a7, v22);
  if (v24) {
    sub_1000DB0A0(v24);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
  if (v28) {
    sub_1000DB0A0(v28);
  }
  *(void *)a1 = off_1022BD5A8;
  uint64_t v13 = *a3;
  *(void *)(a1 + 352) = *a3;
  uint64_t v14 = a3[1];
  *(void *)(a1 + 360) = v14;
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = *(void *)(a1 + 352);
  }
  *(_DWORD *)(a1 + 368) = 10000;
  *(_WORD *)(a1 + 372) = 0;
  *(void *)(a1 + 376) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a1 + 368) & 1) == 0) {
    *(_DWORD *)(a1 + 368) = 10000;
  }
  sub_1000C7F88(buf);
  char v15 = sub_1000D2988(*(uint64_t *)buf, "StationaryLocationHarvest", (BOOL *)(a1 + 373));
  if (*(void *)v30) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v30);
  }
  if ((v15 & 1) == 0) {
    *(unsigned char *)(a1 + 373) = 0;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BD688);
  }
  float v16 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    int v17 = *(_DWORD *)(a1 + 368);
    int v18 = *(unsigned __int8 *)(a1 + 373);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    double v20 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
        - *(double *)(a1 + 96);
    *(_DWORD *)uint64_t buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)CFStringRef v30 = 2082;
    *(void *)&v30[2] = "";
    __int16 v31 = 2050;
    uint64_t v32 = 8;
    __int16 v33 = 1025;
    int v34 = v17;
    __int16 v35 = 1025;
    int v36 = v18;
    __int16 v37 = 2049;
    uint64_t v38 = v19;
    __int16 v39 = 2049;
    double v40 = v20;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}d, \"allowStationaryHarvest\":%{private}hhd, \"curHarvestPointCount\":%{private}lu, \"timeSinceLastUpload_s\":\"%{private}.09f\"}", buf, 0x3Cu);
  }
  return a1;
}

void sub_1005D635C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 360);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

void sub_1005D6398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  if (a20) {
    sub_1000DB0A0(a20);
  }
  if (a22) {
    sub_1000DB0A0(a22);
  }
  JUMPOUT(0x1005D6390);
}

id sub_1005D63C8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 72) requestArchivesForHarvester:8];

  return [v1 count];
}

id sub_1005D63F8(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  double v4 = *(void **)(a1 + 72);

  return _[v4 pruneSecondaryDataOlderThan:8 forHarvester:v3];
}

id sub_1005D6490(uint64_t a1)
{
  return [*(id *)(a1 + 72) clearDataForHarvester:8];
}

uint64_t sub_1005D649C(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v11);
  double v4 = (_OWORD *)(a1 + 280);
  long long v5 = unk_10247C688;
  _OWORD *v4 = xmmword_10247C678;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = unk_10247C691;
  if (sub_100012960(a2, "Pressure", v11)) {
    sub_1012B77D8((uint64_t)v4, (uint64_t)v11);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BD688);
  }
  xpc_activity_state_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    sub_1012B7520();
    if (v10 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)uint64_t buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    char v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = 8;
    __int16 v18 = 2081;
    uint64_t v19 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v11);
}

void sub_1005D6624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D6644()
{
  return (sub_10074157C() >> 4) & 1;
}

id sub_1005D6660(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 72) requestArchivesForHarvester:8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v9;
    do
    {
      xpc_activity_state_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(*((void *)&v8 + 1) + 8 * (void)v6)];
        -[CLHUploadRequest setEndpoint:](v7, "setEndpoint:", [objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "pressureEndpoint")]);
        [*(id *)(a1 + 80) submitRequest:v7];

        xpc_activity_state_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      id v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1005D6794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 3);
  return 1;
}

uint64_t sub_1005D682C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  xpc_activity_state_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32);

  return v6(v4, v5, 3);
}

void sub_1005D68CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v5 = *a4;
  BOOL v6 = v5 < 0x39;
  unint64_t v7 = 0x110000000000C20uLL >> v5;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BD688);
  }
  int v8 = v6 & v7;
  long long v9 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(unsigned __int8 *)(a1 + 372);
    v11[0] = 68289795;
    v11[1] = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2050;
    uint64_t v15 = 8;
    __int16 v16 = 1025;
    int v17 = v10;
    __int16 v18 = 1025;
    int v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received motion state notif\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"oldIsDriving\":%{private}hhd, \"newIsDriving\":%{private}hhd}", (uint8_t *)v11, 0x28u);
  }
  *(unsigned char *)(a1 + 372) = v8;
}

uint64_t sub_1005D69F8(void *a1)
{
  *a1 = off_1022BD5A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[45];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1003C0998((uint64_t)a1);
}

void sub_1005D6A54(void *a1)
{
  *a1 = off_1022BD5A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[45];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1003C0998((uint64_t)a1);

  operator delete();
}

void sub_1005D6AC4(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1005D6AF4()
{
  return sub_1012B748C((uint64_t)&xmmword_10247C678, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_1005D6BE4(id a1)
{
  qword_10247C6A8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLGyroCalibrationDatabaseSilo"];
}

void sub_1005D6DC4(id a1)
{
  if (sub_100A08A84()) {
    byte_10247C6B8 = 1;
  }
}

void *sub_1005D733C(uint64_t a1, void *a2)
{
  id result = (void *)sub_1005D737C(a1, "CLGyroCalibrationDatabase", a2);
  *id result = off_1022BD6F8;
  return result;
}

uint64_t sub_1005D737C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022BD900;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1005D740C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D742C(uint64_t a1)
{
  *(void *)a1 = off_1022BD900;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_1005D74B8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1005D7534(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

uint64_t sub_1005D7544()
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022BD8D0);
  }
  uint64_t v0 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Warning: Not implemented.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022BD8D0);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabase::getGyroStats(CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, BOOL)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_1005D76D0()
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022BD8D0);
  }
  uint64_t v0 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Warning: Not implemented.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1022BD8D0);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLGyroCalibrationDatabase::getMaxDynamicTemperature()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0x80000000;
}

uint64_t sub_1005D785C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005D78EC;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247C6D0 != -1) {
    dispatch_once(&qword_10247C6D0, block);
  }
  return byte_10247C6C8;
}

id sub_1005D78EC(uint64_t a1)
{
  id result = [[[*(id *)(a1 + 32) vendor] isServiceEnabled:@"CLGyroCalibrationDatabase"];
  byte_10247C6C8 = (char)result;
  return result;
}

void sub_1005D791C()
{
}

void sub_1005D79D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1005D7A14(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022BD9E0;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1005D7AFC(uint64_t a1)
{
  sub_1005D7B94(a1);

  operator delete();
}

void sub_1005D7B34(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005D7B64(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_1005D7B94(uint64_t a1)
{
  *(void *)a1 = off_1022BD9E0;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

double sub_1005D7C04(double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  __double2 v11 = __sincos_stret(a4 * 0.0174532925);
  __double2 v12 = __sincos_stret(a5 * 0.0174532925);
  double v13 = 6378137.0 / sqrt(v11.__sinval * -0.00669437999 * v11.__sinval + 1.0);
  double v14 = v11.__cosval * (v13 + a6);
  *a1 = v12.__cosval * v14;
  *a2 = v12.__sinval * v14;
  double result = v11.__sinval * (a6 + v13 * 0.99330562);
  *a3 = result;
  return result;
}

void sub_1005D7CC4(double *a1, long double *a2, double *a3, long double a4, long double a5, long double a6)
{
  double v9 = sqrt(a5 * a5 + a4 * a4);
  *a2 = atan2(a5, a4) / 0.0174532925;
  double v10 = v9 * 0.99330562;
  double v11 = 0.0;
  double v12 = 1.57079633;
  if (v9 * 0.99330562 != 0.0)
  {
    long double __y = a6;
    unsigned int v13 = 0;
    double v12 = 0.0;
    double v14 = 0.0;
    do
    {
      double v15 = v12;
      double v12 = atan2(__y, v10);
      __double2 v16 = __sincos_stret(v12);
      double v17 = 6378137.0 / sqrt(v16.__sinval * -0.00669437999 * v16.__sinval + 1.0);
      double v11 = v9 / v16.__cosval - v17;
      if (vabdd_f64(v15, v12) >= 0.000001)
      {
        if (v13 > 8) {
          goto LABEL_13;
        }
      }
      else if (vabdd_f64(v14, v11) < 0.001 || v13 >= 9)
      {
        goto LABEL_13;
      }
      ++v13;
      double v10 = v9 * (v17 / (v11 + v17) * -0.00669437999 + 1.0);
      double v14 = v9 / v16.__cosval - v17;
    }
    while (v10 != 0.0);
    double v12 = 1.57079633;
  }
LABEL_13:
  *a1 = v12 / 0.0174532925;
  *a3 = v11;
}

double sub_1005D7E38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)a1 = off_1022BDA20;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 128) = 26;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  return result;
}

uint64_t sub_1005D7E9C(uint64_t a1)
{
  *(void *)a1 = off_1022BDA20;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  BOOL v6 = (void **)(a1 + 72);
  sub_1005D9394(&v6);
  BOOL v6 = (void **)(a1 + 48);
  sub_1005D9394(&v6);
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_1005D7F30(uint64_t a1)
{
  sub_1005D7E9C(a1);

  operator delete();
}

uint64_t sub_1005D7F68(uint64_t a1)
{
  return 1;
}

uint64_t sub_1005D7F84(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 184))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v2 = *(void *)(a1 + 56);
    if (v3 != v2)
    {
      uint64_t v22 = a1 + 88;
      do
      {
        *(_OWORD *)uint64_t buf = xmmword_101D24440;
        *(_OWORD *)&uint8_t buf[16] = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        sub_1005D9480((uint64_t)buf, &v23);
        if (*((void *)&v32 + 1))
        {
          *(void *)&long long v33 = *((void *)&v32 + 1);
          operator delete(*((void **)&v32 + 1));
        }
        if ((void)v32) {
          sub_1000DB0A0((std::__shared_weak_count *)v32);
        }
        *(void *)uint64_t v25 = &buf[16];
        sub_1000C5954((void ***)v25);
        unint64_t v5 = *(long long **)(v3 + 16);
        uint64_t v4 = *(long long **)(v3 + 24);
        while (v5 != v4)
        {
          BOOL v6 = *(double **)v5;
          double v7 = **(double **)v5;
          uint64_t v8 = v23;
          if (v7 < *(double *)v23) {
            *(double *)uint64_t v23 = v7;
          }
          double v9 = v6[1];
          if (v9 > *(double *)(v8 + 8)) {
            *(double *)(v8 + 8) = v9;
          }
          sub_1005D8BE0((uint64_t *)(v8 + 16), v5++);
        }
        if (*(void *)(v23 + 16) == *(void *)(v23 + 24))
        {
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022BDA50);
          }
          double v12 = qword_1024192F8;
          if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, amalgamated query range is empty", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_32;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022BDA50);
          }
          *(_WORD *)uint64_t v25 = 0;
          unsigned int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::amalgamateQueryRangesForSessions()", "%s\n", v13);
        }
        else
        {
          unint64_t v10 = *(void *)(a1 + 80);
          if (v10 >= *(void *)(a1 + 88))
          {
            uint64_t v11 = sub_1005D973C((uint64_t *)(a1 + 72), v23);
          }
          else
          {
            sub_1005D984C(v22, *(void *)(a1 + 80), v23);
            uint64_t v11 = v10 + 80;
            *(void *)(a1 + 80) = v10 + 80;
          }
          *(void *)(a1 + 80) = v11;
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022BDA50);
          }
          double v14 = qword_1024192F8;
          if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
          {
            double v15 = *(double *)v23;
            uint64_t v16 = *(void *)(v23 + 8);
            uint64_t v17 = (uint64_t)(*(void *)(v23 + 24) - *(void *)(v23 + 16)) >> 4;
            *(_DWORD *)uint64_t buf = 134218496;
            *(double *)&uint8_t buf[4] = v15;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v16;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&buf[24] = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, amalgamated query range added from, %f, to, %f, number_dependents, %lu", buf, 0x20u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_32;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022BDA50);
          }
          double v18 = *(double *)v23;
          uint64_t v19 = *(void *)(v23 + 8);
          uint64_t v20 = (uint64_t)(*(void *)(v23 + 24) - *(void *)(v23 + 16)) >> 4;
          *(_DWORD *)uint64_t v25 = 134218496;
          *(double *)&v25[4] = v18;
          __int16 v26 = 2048;
          uint64_t v27 = v19;
          __int16 v28 = 2048;
          uint64_t v29 = v20;
          unsigned int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::amalgamateQueryRangesForSessions()", "%s\n", v13);
        }
        if (v13 != buf) {
          free(v13);
        }
LABEL_32:
        if (v24) {
          sub_1000DB0A0(v24);
        }
        v3 += 80;
      }
      while (v3 != v2);
    }
    *(unsigned char *)(a1 + 184) = 1;
  }
  return 1;
}

void sub_1005D83E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1005D8424(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 184);
  if (*(unsigned char *)(a1 + 184))
  {
    if (!*(unsigned char *)(a1 + 185))
    {
      uint64_t v3 = *(double **)(a1 + 72);
      for (uint64_t i = *(double **)(a1 + 80); v3 != i; v3 += 10)
      {
        uint64_t v5 = *(void *)(a1 + 8);
        double v6 = *v3;
        double v7 = v3[1];
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&uint8_t buf[16] = 0;
        *(void *)uint64_t buf = &buf[8];
        long long v38 = xmmword_101D07BE0;
        sub_1005D9CB0((uint64_t)&v32, (uint64_t *)&v38, 2);
        sub_100A11028(v5, (uint64_t)buf, (uint64_t)&v32, &v30, v6, v7);
        sub_1000F5BB0((uint64_t)&v32, *(void **)&v33[4]);
        sub_1000F5BB0((uint64_t)buf, *(void **)&buf[8]);
        double v9 = v30;
        uint64_t v8 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v10 = (std::__shared_weak_count *)*((void *)v3 + 6);
        *((void *)v3 + 5) = v9;
        *((void *)v3 + 6) = v8;
        if (v10) {
          sub_1000DB0A0(v10);
        }
        double v12 = (uint64_t *)*((void *)v3 + 2);
        uint64_t v11 = (uint64_t *)*((void *)v3 + 3);
        while (v12 != v11)
        {
          uint64_t v13 = *v12;
          double v15 = v30;
          double v14 = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *(std::__shared_weak_count **)(v13 + 48);
          *(void *)(v13 + 40) = v15;
          *(void *)(v13 + 48) = v14;
          if (v16) {
            sub_1000DB0A0(v16);
          }
          v12 += 2;
        }
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022BDA50);
        }
        uint64_t v17 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v19 = *v30;
          uint64_t v18 = v30[1];
          double v20 = sub_100A0F078(v30);
          double v21 = sub_100A0F094(v30);
          *(_DWORD *)uint64_t buf = 134218496;
          *(void *)&uint8_t buf[4] = 0x2E8BA2E8BA2E8BA3 * ((v18 - v19) >> 3);
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v20;
          *(_WORD *)&buf[22] = 2048;
          double v37 = v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, queryRangesForRecords found nmbr_sessions, %zu, from, %f, to, %f", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022BDA50);
          }
          uint64_t v23 = *v30;
          uint64_t v22 = v30[1];
          double v24 = sub_100A0F078(v30);
          double v25 = sub_100A0F094(v30);
          int v32 = 134218496;
          *(void *)long long v33 = 0x2E8BA2E8BA2E8BA3 * ((v22 - v23) >> 3);
          *(_WORD *)&v33[8] = 2048;
          *(double *)&v33[10] = v24;
          __int16 v34 = 2048;
          double v35 = v25;
          __int16 v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::queryRangesForRecords()", "%s\n", v26);
          if (v26 != buf) {
            free(v26);
          }
        }
        if (v31) {
          sub_1000DB0A0(v31);
        }
      }
      *(unsigned char *)(a1 + 185) = 1;
    }
  }
  else
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022BDA50);
    }
    uint64_t v27 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, attempting to query cache records before preparing the query", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022BDA50);
      }
      LOWORD(v32) = 0;
      __int16 v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::queryRangesForRecords()", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  return v1 != 0;
}

void sub_1005D88DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D8930(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3) {
    v3[1] = *v3;
  }
  uint64_t v5 = *(char **)(a1 + 24);
  uint64_t v4 = *(char **)(a1 + 32);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 32);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 32) = &v5[v6];
  }
  *(_WORD *)(a1 + 184) = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  for (uint64_t i = *(void *)(a1 + 56); i != v8; sub_1005D942C(a1 + 64, i))
    i -= 80;
  *(void *)(a1 + 56) = v8;
  uint64_t v10 = *(void *)(a1 + 72);
  for (uint64_t j = *(void *)(a1 + 80); j != v10; sub_1005D942C(a1 + 88, j))
    j -= 80;
  *(void *)(a1 + 80) = v10;
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1022BDA50);
  }
  uint64_t v11 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCache, release()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022BDA50);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPCache::release(const CLCyclingFTPCacheIterator *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return 1;
}

uint64_t sub_1005D8B88(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v5 = (void **)(a1 + 16);
  sub_1000C5954(&v5);
  return a1;
}

void **sub_1005D8BE0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  double v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    double v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    double v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)double v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_1005D95F8(a1, v18);
    double v9 = (void *)a1[1];
    double result = sub_1000C5898(v18);
  }
  else
  {
    *double v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    double v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1005D8CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D8CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 96);
  if (a1 + 96 != a2
    || *(double *)(a1 + 120) != *(double *)(a2 + 24)
    || *(double *)(a1 + 112) != *(double *)(a2 + 16)
    || *(void *)(a1 + 128) != *(void *)(a2 + 32))
  {
    sub_100A11118(*(void *)(a1 + 8), a2);
    uuid_copy(v4, (const unsigned __int8 *)a2);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 128) = *(void *)(a2 + 32);
    unint64_t v5 = *(void **)(a1 + 144);
    if (v5) {
      v5[1] = *v5;
    }
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v6 = *(void *)(a2 + 56);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = v6;
    if (v8) {
      sub_1000DB0A0(v8);
    }
  }
  return 1;
}

void sub_1005D8DC8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(double *)&long long v42 = a4;
  *((double *)&v42 + 1) = a5;
  long long v43 = 0u;
  long long v44 = 0u;
  *(_OWORD *)__p = 0u;
  long long v46 = 0u;
  sub_1005D9480((uint64_t)&v42, &v47);
  if (__p[1])
  {
    *(void **)&long long v46 = __p[1];
    operator delete(__p[1]);
  }
  if (__p[0]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[0]);
  }
  uint64_t v48 = (void **)&v43;
  sub_1000C5954(&v48);
  uint64_t v8 = (void *)v47;
  double v9 = *(void **)(v47 + 64);
  unint64_t v10 = *(void *)(v47 + 72);
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v12 = (void **)(v47 + 56);
    uint64_t v13 = *(void *)(v47 + 56);
    uint64_t v14 = ((uint64_t)v9 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v10 - v13;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      uint64_t v18 = (char *)sub_1000DA54C(v47 + 72, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[8 * v14];
    double v20 = &v18[8 * v17];
    *(void *)uint64_t v19 = a2;
    unint64_t v11 = v19 + 8;
    uint64_t v22 = (char *)v8[7];
    double v21 = (char *)v8[8];
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      double v21 = (char *)*v12;
    }
    v8[7] = v19;
    v8[8] = v11;
    v8[9] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    void *v9 = a2;
    unint64_t v11 = v9 + 1;
  }
  v8[8] = v11;
  uint64_t v24 = a1[6];
  if (a1[7] == v24)
  {
    *(_OWORD *)__p = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    sub_1005D90F8((uint64_t *)&v43, &v47);
    unint64_t v25 = a1[7];
    if (v25 >= a1[8])
    {
      uint64_t v26 = sub_1005D973C(a1 + 6, (uint64_t)&v42);
    }
    else
    {
      sub_1005D984C((uint64_t)(a1 + 8), a1[7], (uint64_t)&v42);
      uint64_t v26 = v25 + 80;
      a1[7] = v25 + 80;
    }
    a1[7] = v26;
    if (__p[1])
    {
      *(void **)&long long v46 = __p[1];
      operator delete(__p[1]);
    }
    if (__p[0]) {
      sub_1000DB0A0((std::__shared_weak_count *)__p[0]);
    }
    uint64_t v48 = (void **)&v43;
    sub_1000C5954(&v48);
  }
  else
  {
    sub_1005D90F8((uint64_t *)(v24 + 16), &v47);
  }
  *(void *)&long long v42 = a1;
  sub_1005D9F60((uint64_t *)&v47, (uint64_t *)&v42, a3);
  unint64_t v27 = a1[5];
  uint64_t v28 = *a3;
  uint64_t v29 = (void *)a1[4];
  if ((unint64_t)v29 >= v27)
  {
    uint64_t v31 = a1[3];
    uint64_t v32 = ((uint64_t)v29 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v33 = v27 - v31;
    uint64_t v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
      uint64_t v34 = v32 + 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v34;
    }
    if (v35) {
      int v36 = (char *)sub_1000DA54C((uint64_t)(a1 + 5), v35);
    }
    else {
      int v36 = 0;
    }
    double v37 = &v36[8 * v32];
    long long v38 = &v36[8 * v35];
    *(void *)double v37 = v28;
    CFStringRef v30 = v37 + 8;
    double v40 = (char *)a1[3];
    __int16 v39 = (char *)a1[4];
    if (v39 != v40)
    {
      do
      {
        uint64_t v41 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v37 - 1) = v41;
        v37 -= 8;
      }
      while (v39 != v40);
      __int16 v39 = (char *)a1[3];
    }
    a1[3] = v37;
    a1[4] = v30;
    a1[5] = v38;
    if (v39) {
      operator delete(v39);
    }
  }
  else
  {
    *uint64_t v29 = v28;
    CFStringRef v30 = v29 + 1;
  }
  a1[4] = v30;
  if (*((void *)&v47 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v47 + 1));
  }
}

void sub_1005D909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 56) = v10;
  sub_1005D8B88((uint64_t)&a9);
  uint64_t v13 = *(std::__shared_weak_count **)(v11 - 64);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  _Unwind_Resume(a1);
}

void *sub_1005D90F8(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v19[4] = v4;
    uint64_t v14 = (char *)sub_1000C571C((uint64_t)v4, v13);
    uint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v19[2] = v15 + 16;
    sub_1005D95F8(a1, v19);
    uint64_t v9 = (void *)a1[1];
    sub_1000C5898(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1005D9204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D9218(uint64_t a1)
{
  sub_1005D7F84(a1);
  sub_1005D8424(a1);
  uint64_t v2 = *(void **)(a1 + 72);
  uint64_t v15 = *(void **)(a1 + 80);
  uint64_t v16 = a1;
  if (v2 == v15)
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    int v3 = 1;
    do
    {
      uint64_t v4 = (uint64_t *)v2[5];
      uint64_t v5 = *v4;
      uint64_t v6 = v4[1];
      while (v5 != v6)
      {
        uint64_t v7 = *(void **)(v5 + 48);
        if (v7 && *v7 == v7[1]) {
          sub_1005D8CFC(v16, v5);
        }
        uint64_t v8 = (uint64_t *)v2[2];
        uint64_t v9 = (uint64_t *)v2[3];
        while (v8 != v9)
        {
          uint64_t v10 = *v8;
          unint64_t v11 = (std::__shared_weak_count *)v8[1];
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v13 = *(void **)(v10 + 56);
          uint64_t v12 = *(void **)(v10 + 64);
          while (v13 != v12)
          {
            v3 &= (*(uint64_t (**)(void, uint64_t))(*(void *)*v13 + 64))(*v13, v5);
            ++v13;
          }
          if (v11) {
            sub_1000DB0A0(v11);
          }
          v8 += 2;
        }
        v5 += 88;
      }
      v2 += 10;
    }
    while (v2 != v15);
  }
  return v3 & 1;
}

void sub_1005D934C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005D9364(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_1005D9394(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_1005D942C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1005D942C(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 48);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = (void **)(a2 + 16);
  sub_1000C5954(&v5);
}

void sub_1005D9480(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x68uLL);
  sub_1005D94DC((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
}

void sub_1005D94C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_1005D94DC(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1022BDA80;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 96) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  return result;
}

void sub_1005D9558(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BDA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005D9578(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BDA80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1005D95CC(uint64_t a1)
{
  sub_1005D942C((uint64_t)&v1, a1 + 24);
}

uint64_t sub_1005D95F8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1005D9670((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1005D9670(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1005D9704((uint64_t)v12);
  return v10;
}

uint64_t sub_1005D9704(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

uint64_t sub_1005D973C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_1001D7FD4();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_100214C7C((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = &v7[80 * v3];
  char v13 = &v7[80 * v6];
  sub_1005D984C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 80;
  sub_1005D9A50(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1005D9C34(&v10);
  return v8;
}

void sub_1005D9838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1005D9C34((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1005D984C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  sub_1005D9900((void *)(a2 + 16), *(void **)(a3 + 16), *(void **)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 4);
  uint64_t v5 = *(void *)(a3 + 48);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a2 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return sub_1001DD364((void *)(a2 + 56), *(const void **)(a3 + 56), *(void *)(a3 + 64), (uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3);
}

void sub_1005D98DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(std::__shared_weak_count **)(v2 + 48);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_1000C5954((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_1005D9900(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_10022F168(result, a4);
    uint64_t result = sub_1005D9988((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1005D9968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C5954(&a9);
  _Unwind_Resume(a1);
}

void *sub_1005D9988(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1005D9A18((uint64_t)v7);
  return v4;
}

uint64_t sub_1005D9A18(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

uint64_t sub_1005D9A50(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1005D9AC8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1005D9AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v13 + 1) - 80;
      *((void *)&v13 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  sub_1005D9BA8((uint64_t)v10);
  return v8;
}

uint64_t sub_1005D9BA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1005D9BE0((uint64_t *)a1);
  }
  return a1;
}

void sub_1005D9BE0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1005D942C(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_1005D9C34(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1005D9C68(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_1005D942C(v4, i - 80);
  }
}

uint64_t sub_1005D9CB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1005D9D30((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1005D9D18(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1005D9D30(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_1005D9DB8(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_1000EDF90(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_1005D9DB8(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, uint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    double v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          double v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        double v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      double v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_1005D9F60@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = sub_1005D9FC4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1005D9FB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1005D9FC4(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022BDAD0;
  sub_100EC86DC((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1005DA010(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1005DA024(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BDAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005DA044(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BDAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1005DA098(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

id sub_1005DA26C(uint64_t a1)
{
  return [*(id *)(a1 + 32) refresh];
}

id sub_1005DA274(uint64_t a1)
{
  return [*(id *)(a1 + 32) refresh];
}

void sub_1005DA370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005DA424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005DA488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1005DA4A0(uint64_t a1, uint64_t a2)
{
  int v3 = 11;
  uint64_t result = (void *)sub_1007FC1E8(a1, &v3, qword_10247C6D8, a2);
  *uint64_t result = off_1022BDB20;
  return result;
}

void sub_1005DA4F8(uint64_t a1)
{
  sub_1010456D8(a1);

  operator delete();
}

uint64_t sub_1005DA530()
{
  return dword_10241CC20;
}

double sub_1005DA53C()
{
  return 0.5;
}

double sub_1005DA544()
{
  return 0.5;
}

uint64_t sub_1005DA54C()
{
  return 4096;
}

uint64_t sub_1005DA554()
{
  return 4096;
}

uint64_t sub_1005DA55C(uint64_t a1, FILE *a2)
{
  if (!a2) {
    sub_101A66B40(qword_102419630 == -1);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
  uint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TransitMac, Traversing transit mac tile", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    *(_WORD *)__ptr = 0;
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  memset(&v45, 0, sizeof(v45));
  do
  {
    std::string::size_type v5 = fread(__ptr, 1uLL, 0x400uLL, a2);
    std::string::append(&v45, __ptr, v5);
  }
  while (v5 && !feof(a2) && !ferror(a2));
  if (ferror(a2))
  {
    uint64_t v6 = 0;
    goto LABEL_59;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)uint64_t v60 = size;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TransitMac, Transit mac tile std::string::size_type size = %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    std::string::size_type v37 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v37 = v45.__r_.__value_.__l.__size_;
    }
    int v46 = 134217984;
    *(void *)long long v47 = v37;
    long long v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v45;
  }
  else {
    uint64_t v9 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v45.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = +[NSData dataWithBytes:v9 length:v10];
  id v13 = [objc_alloc((Class)PBDataReader) initWithData:v11];
  id v14 = (id)objc_opt_new();
  unsigned __int8 v15 = [v14 readFrom:v13];
  if (!v14)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    uint64_t v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "TransitMac, failed to allocate transit mac tile", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_57;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1) {
      goto LABEL_81;
    }
    goto LABEL_88;
  }
  if ((v15 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    double v20 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      std::string::size_type v21 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v21 = v45.__r_.__value_.__l.__size_;
      }
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v60 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "TransitMac, failed to decode transit mac tile protobuf, encrypted=%{public}lu", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_57;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    std::string::size_type v22 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = v45.__r_.__value_.__l.__size_;
    }
    int v46 = 134349056;
    *(void *)long long v47 = v22;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v23);
    goto LABEL_82;
  }
  if ([v14 hasVersion]
    && [v14 hasGenerationTimeSecs]
    && [v14 macsCount])
  {
    [v14 generationTimeSecs];
    double v17 = v16;
    if ([v14 hasExpirationAgeSecs]) {
      unsigned int v18 = [v14 expirationAgeSecs];
    }
    else {
      unsigned int v18 = 31536000;
    }
    unsigned int v26 = [v14 version];
    unsigned int v27 = [v14 tileX];
    unsigned int v28 = [v14 tileY];
    double v29 = v17 - kCFAbsoluteTimeIntervalSince1970;
    *(_DWORD *)(a1 + 184) = v26;
    *(_DWORD *)(a1 + 52) = v27;
    *(_DWORD *)(a1 + 56) = v28;
    *(void *)(a1 + 64) = -1;
    *(double *)(a1 + 176) = v17 - kCFAbsoluteTimeIntervalSince1970;
    *(_DWORD *)(a1 + 200) = v18;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    CFStringRef v30 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v31 = [v14 version];
      unsigned int v32 = [v14 tileX];
      unsigned int v33 = [v14 tileY];
      double Current = CFAbsoluteTimeGetCurrent();
      id v35 = [v14 macsCount];
      *(_DWORD *)uint64_t buf = 67110656;
      *(_DWORD *)uint64_t v60 = v31;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v32;
      __int16 v61 = 1024;
      unsigned int v62 = v33;
      __int16 v63 = 2048;
      double v64 = v29;
      __int16 v65 = 2048;
      double v66 = Current - v29;
      __int16 v67 = 1024;
      unsigned int v68 = v18;
      __int16 v69 = 2048;
      id v70 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TransitMac, ver,%d, x, %d, y, %d, generated, %.01lf, age, %.01f, ageThresh, %d, numOfMacs, %lu", buf, 0x38u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BDBE8);
      }
      unsigned int v39 = [v14 version];
      unsigned int v40 = [v14 tileX];
      unsigned int v41 = [v14 tileY];
      double v42 = CFAbsoluteTimeGetCurrent();
      id v43 = [v14 macsCount];
      int v46 = 67110656;
      *(_DWORD *)long long v47 = v39;
      *(_WORD *)&v47[4] = 1024;
      *(_DWORD *)&v47[6] = v40;
      __int16 v48 = 1024;
      unsigned int v49 = v41;
      __int16 v50 = 2048;
      double v51 = v29;
      __int16 v52 = 2048;
      double v53 = v42 - v29;
      __int16 v54 = 1024;
      unsigned int v55 = v18;
      __int16 v56 = 2048;
      id v57 = v43;
      long long v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    uint64_t v6 = 1;
    goto LABEL_58;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
  uint64_t v24 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "TransitMac, failed to get fields in transit mac tile", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1)
    {
LABEL_81:
      LOWORD(v46) = 0;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTransitMacTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)", "%s\n", v23);
LABEL_82:
      if (v23 != (char *)buf) {
        free(v23);
      }
      goto LABEL_57;
    }
LABEL_88:
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
    goto LABEL_81;
  }
LABEL_57:
  uint64_t v6 = 0;
LABEL_58:
LABEL_59:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1005DAFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DB03C(uint64_t a1, id **a2, char **a3)
{
  if (!a3) {
    sub_101A66CC4(qword_102419630 == -1);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TransitMac, Searching transit mac tile", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    LOWORD(__ptr) = 0;
    std::string v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  a3[1] = *a3;
  sub_100C0A030((int *)(a1 + 48), a1 + 8, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v8 = fopen((const char *)p_p, "rb");
  if (v8)
  {
    memset(&v58, 0, sizeof(v58));
    do
    {
      std::string::size_type v9 = fread(&__ptr, 1uLL, 0x400uLL, v8);
      std::string::append(&v58, (const std::string::value_type *)&__ptr, v9);
    }
    while (v9 && !feof(v8) && !ferror(v8));
    if (ferror(v8))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BDBE8);
      }
      std::string::size_type v10 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        double v66 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TransitMac, failed to read tile file, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BDBE8);
        }
        int v46 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v61 = 136315138;
        unsigned int v62 = v46;
        long long v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
      fclose(v8);
    }
    else
    {
      fclose(v8);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned __int8 v15 = &v58;
      }
      else {
        unsigned __int8 v15 = (std::string *)v58.__r_.__value_.__r.__words[0];
      }
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v58.__r_.__value_.__l.__size_;
      }
      id v17 = [objc_alloc((Class)PBDataReader) initWithData:+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v15, size)];
      id v18 = (id)objc_opt_new();
      if ([v18 readFrom:v17])
      {
        if ([v18 macsCount])
        {
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          id v19 = [v18 macs];
          id v20 = [v19 countByEnumeratingWithState:&v54 objects:v60 count:16];
          if (v20)
          {
            uint64_t v21 = *(void *)v55;
            do
            {
              for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v55 != v21) {
                  objc_enumerationMutation(v19);
                }
                uint64_t v23 = *(void **)(*((void *)&v54 + 1) + 8 * i);
                uint64_t v24 = *a2;
                unint64_t v25 = a2[1];
                id v26 = [v23 mac];
                if (v24 != v25)
                {
                  while (*v24 != v26)
                  {
                    if (++v24 == v25)
                    {
                      uint64_t v24 = v25;
                      break;
                    }
                  }
                }
                if (v24 != a2[1])
                {
                  id v27 = [v23 mac];
                  id v28 = v27;
                  CFStringRef v30 = a3[1];
                  unint64_t v29 = (unint64_t)a3[2];
                  if ((unint64_t)v30 >= v29)
                  {
                    unsigned int v32 = *a3;
                    uint64_t v33 = (v30 - *a3) >> 3;
                    unint64_t v34 = v33 + 1;
                    if ((unint64_t)(v33 + 1) >> 61) {
                      sub_1001D7FD4();
                    }
                    uint64_t v35 = v29 - (void)v32;
                    if (v35 >> 2 > v34) {
                      unint64_t v34 = v35 >> 2;
                    }
                    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v36 = v34;
                    }
                    if (v36)
                    {
                      std::string::size_type v37 = (char *)sub_1000DA54C((uint64_t)(a3 + 2), v36);
                      unsigned int v32 = *a3;
                      CFStringRef v30 = a3[1];
                    }
                    else
                    {
                      std::string::size_type v37 = 0;
                    }
                    long long v38 = &v37[8 * v33];
                    *(void *)long long v38 = v28;
                    unsigned int v31 = v38 + 8;
                    while (v30 != v32)
                    {
                      uint64_t v39 = *((void *)v30 - 1);
                      v30 -= 8;
                      *((void *)v38 - 1) = v39;
                      v38 -= 8;
                    }
                    *a3 = v38;
                    a3[1] = v31;
                    a3[2] = &v37[8 * v36];
                    if (v32) {
                      operator delete(v32);
                    }
                  }
                  else
                  {
                    *(void *)CFStringRef v30 = v27;
                    unsigned int v31 = v30 + 8;
                  }
                  a3[1] = v31;
                }
              }
              id v20 = [v19 countByEnumeratingWithState:&v54 objects:v60 count:16];
            }
            while (v20);
          }
        }
        else
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BDBE8);
          }
          id v43 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            long long v44 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t buf = 136315138;
            double v66 = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "TransitMac, empty tile??, %s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BDBE8);
            }
            __int16 v52 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            int v61 = 136315138;
            unsigned int v62 = v52;
            double v53 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v53);
            if (v53 != (char *)buf) {
              free(v53);
            }
          }
        }
        uint64_t v14 = 1;
        goto LABEL_78;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BDBE8);
      }
      unsigned int v40 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v41 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        double v66 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "TransitMac, failed to parse tile file, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BDBE8);
        }
        __int16 v50 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v61 = 136315138;
        unsigned int v62 = v50;
        double v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
    }
    uint64_t v14 = 0;
LABEL_78:
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    goto LABEL_80;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
  long long v12 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    id v13 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      id v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 136315138;
    double v66 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TransitMac, failed to open tile file, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    __int16 v48 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int __ptr = 136315138;
    double v64 = v48;
    unsigned int v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTransitMacTile::extractTransitMacAddresses(std::vector<uint64_t> *, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v49);
    if (v49 != (char *)buf) {
      free(v49);
    }
  }
  uint64_t v14 = 0;
LABEL_80:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_1005DBA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DBAF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v28 = v2;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  __int16 v29 = 256;
  sub_10010F274((uint64_t)v25);
  int v3 = sub_100132EFC(v26, (uint64_t)"CLTileFile(", 11);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)"tileId=", 7);
  sub_100C094CC(a1 + 48);
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v5 = __p;
  }
  else {
    std::string::size_type v5 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v6 = v24;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)", localFilename=", 16);
  int v9 = *(char *)(a1 + 31);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 8;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  long long v12 = sub_100132EFC(v8, v10, v11);
  id v13 = sub_100132EFC(v12, (uint64_t)", tempFilename=", 15);
  uint64_t v16 = *(void *)(a1 + 208);
  uint64_t v15 = a1 + 208;
  uint64_t v14 = v16;
  int v17 = *(char *)(v15 + 23);
  if (v17 >= 0) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v14;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    uint64_t v19 = *(void *)(v15 + 8);
  }
  id v20 = sub_100132EFC(v13, v18, v19);
  sub_100132EFC(v20, (uint64_t)")", 1);
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  *(void *)((char *)v25
  v26[0] = v21;
  if (v27 < 0) {
    operator delete((void *)v26[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_1005DBDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_101A129A8((uint64_t)&a16);
  sub_1019DB560(v16 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_1005DBDE4()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BDBE8);
  }
  uint64_t v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "This instance has no : TEST_testBinarySearch", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BDBE8);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileFile::TEST_testBinarySearch(const char *)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_1005DBF70(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_1005DBFA0()
{
  uint64_t v1 = qword_102419638;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_1005DBFC0()
{
}

void sub_1005DC014()
{
}

void sub_1005DC54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_1000DB0A0(a26);
  }
  _Unwind_Resume(exception_object);
}

id sub_1005DC570(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onScanTimer];
}

void sub_1005DC7A8(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6 = *a2;
  __int16 v7 = *a3;
  sub_1000E23EC(v8, (uint64_t)(a3 + 4));
  uint64_t v12 = *((void *)a3 + 13);
  memset(v13, 0, 24);
  sub_1000DA6E8(v13, *((void *)a3 + 14), *((void *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 3));
  v13[3] = *((void *)a3 + 17);
  [a4 onWifiServiceNotification:v6 data:&v7];
  uint64_t v14 = (void **)v13;
  sub_1000D7F78(&v14);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1005DC870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

id sub_1005DC8A4(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  long long v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  long long v7 = a3[3];
  _DWORD v11[2] = a3[2];
  void v11[3] = v7;
  long long v8 = a3[5];
  void v11[4] = a3[4];
  v11[5] = v8;
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return [a4 onMotionStateNotification:v4 data:v11];
}

id sub_1005DC928(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005DC99C;
  v4[3] = &unk_10229FED8;
  void v4[4] = v1;
  return [v2 async:v4];
}

id sub_1005DC99C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleVehicularStateChanged];
}

void sub_1005DD1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10050EC2C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

id sub_1005DD244(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_1005E0678;
  v4[3] = &unk_1022BDCE8;
  void v4[4] = *(void *)a1;
  char v5 = *(unsigned char *)(a1 + 8);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1000DC48C(&v6, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 32);
  }
  long long v9 = *(_OWORD *)(a1 + 56);
  long long v10 = *(_OWORD *)(a1 + 72);
  v11[0] = *(_OWORD *)(a1 + 88);
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)(a1 + 100);
  long long v8 = *(_OWORD *)(a1 + 40);
  if (*(char *)(a1 + 143) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 120), *(void *)(a1 + 128));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 120);
    uint64_t v13 = *(void *)(a1 + 136);
  }
  id v2 = [v4 copy];
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  return v2;
}

void sub_1005DD37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005DD434(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 36) = a2 == 2;
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[32]) {
    return [result updateStatusBarLabel];
  }
  return result;
}

id *sub_1005DDF2C(id *result, int a2)
{
  if (!a2) {
    return result;
  }
  id v2 = result;
  char v3 = *((unsigned char *)result + 136);
  if (v3)
  {
    uint64_t result = (id *)[result[4] submitFalseDetectionMetricsWithType:1];
    char v3 = *((unsigned char *)v2 + 136);
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_10;
    }
  }
  else if (((_BYTE)result[17] & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = (id *)[v2[4] submitFalseDetectionMetricsWithType:2];
  char v3 = *((unsigned char *)v2 + 136);
  if ((v3 & 4) == 0)
  {
LABEL_5:
    if ((v3 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t result = (id *)[v2[4] submitFalseDetectionMetricsWithType:8];
    if (((_BYTE)v2[17] & 0x10) == 0) {
      return result;
    }
    goto LABEL_12;
  }
LABEL_10:
  uint64_t result = (id *)[v2[4] submitFalseDetectionMetricsWithType:4];
  char v3 = *((unsigned char *)v2 + 136);
  if ((v3 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_6:
  if ((v3 & 0x10) == 0) {
    return result;
  }
LABEL_12:
  id v4 = v2[4];

  return (id *)[v4 submitFalseDetectionMetricsWithType:16];
}

id sub_1005DEBB8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(void **)(v2 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005DEC30;
  v5[3] = &unk_1022BDC60;
  char v6 = a2;
  void v5[4] = v2;
  return [v3 async:v5];
}

void sub_1005DEC30(uint64_t a1)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_1022BDCA8);
  }
  uint64_t v2 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "status bar assertion acquired, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BDCA8);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLLocationDerivedSpeedEstimator setStatusBarWithLabel:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (!*(unsigned char *)(a1 + 40)) {
    [*(id *)(a1 + 32) clearStatusBarColorAndText];
  }
}

id sub_1005DEDF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005DEE68;
  v4[3] = &unk_10229FED8;
  void v4[4] = v1;
  return [v2 async:v4];
}

id sub_1005DEE68(uint64_t a1)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_1022BDCA8);
  }
  uint64_t v2 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "status bar assertion invalidated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BDCA8);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLLocationDerivedSpeedEstimator setStatusBarWithLabel:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 32) clearStatusBarColorAndText];
}

id sub_1005DF4D8(uint64_t a1, void *a2)
{
  v6[0] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 152), @"accelLatency"];
  v5[1] = @"gpsLatency";
  v6[1] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 160)];
  v5[2] = @"basebandLatency";
  _DWORD v6[2] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 168)];
  v5[3] = @"wifiLatency";
  v6[3] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 176)];
  void v5[4] = @"btLatency";
  void v6[4] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 184)];
  void v5[5] = @"exitFromNoHints";
  v6[5] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 200)];
  v5[6] = @"exitFromLastBTHint";
  v6[6] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 208)];
  v5[7] = @"BTHintFromLastMotionHintDuration";
  v6[7] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 216)];
  v5[8] = @"motionExitsWithBTCount";
  v6[8] = +[NSString stringWithFormat:@"%d", *(unsigned int *)(*(void *)(a1 + 32) + 136)];
  v5[9] = @"sequentialVehicularIndex";
  v6[9] = +[NSString stringWithFormat:@"%d", *(unsigned int *)(*(void *)(a1 + 32) + 144)];
  v5[10] = @"vehicularDuration";
  v6[10] = +[NSString stringWithFormat:@"%f", *(void *)(*(void *)(a1 + 32) + 192)];
  return [a2 writeData:+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 11), 0, 0)];
}

void sub_1005E04A4(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

uint64_t sub_1005E04D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_10247C6E0 != -1) {
    dispatch_once(&qword_10247C6E0, &stru_1022BDCC8);
  }
  long long v10 = (uint64_t (*)())dlsym((void *)qword_10247C6E8, "OSAWriteLogForSubmission");
  off_10241CC28 = v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

void sub_1005E0580(id a1)
{
  qword_10247C6E8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
}

void sub_1005E05AC()
{
}

uint64_t sub_1005E0658(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

unsigned char *sub_1005E0678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 32);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 40);
  id v4 = (unsigned char *)(a2 + 16);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_1000DC48C(v4, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)id v4 = *(_OWORD *)(a1 + 48);
    *(void *)(a2 + 32) = *(void *)(a1 + 64);
  }
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 132);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 72);
  uint64_t result = (unsigned char *)(a2 + 120);
  if (*(char *)(a1 + 175) < 0) {
    return sub_1000DC48C(result, *(void **)(a1 + 152), *(void *)(a1 + 160));
  }
  *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 152);
  *(void *)(a2 + 136) = *(void *)(a1 + 168);
  return result;
}

void sub_1005E0738(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005E0754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 132) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  uint64_t result = (unsigned char *)(a1 + 152);
  if (*(char *)(a2 + 175) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 152), *(void *)(a2 + 160));
  }
  long long v10 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)uint64_t result = v10;
  return result;
}

void sub_1005E0814(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005E0830(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

void sub_1005E0888()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1005E0940(_Unwind_Exception *a1)
{
}

void sub_1005E0958()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1005E0A00(_Unwind_Exception *a1)
{
}

void sub_1005E0AC8(id a1)
{
  qword_10247C730 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCompanionNotifierSilo"];
}

void sub_1005E0B44(CLCompanionNotifierAdapter *self, SEL a2)
{
  [(CLNotifierServiceAdapter *)self setAdaptedNotifier:sub_1005E0B88((uint64_t)[(CLCompanionNotifierAdapter *)self universe])];
  if (![(CLNotifierServiceAdapter *)self notifier])
  {
    uint64_t v3 = sub_101A66E48();
    sub_1005E0B88(v3);
  }
}

uint64_t sub_1005E0B88(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005E0DA8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247C740 != -1) {
    dispatch_once(&qword_10247C740, block);
  }
  return qword_10248A0E0;
}

void sub_1005E0C18(CLCompanionNotifierAdapter *self, SEL a2)
{
  uint64_t v2 = *(void (**)(void))(*(void *)[(CLNotifierServiceAdapter *)self notifier] + 16);

  v2();
}

void sub_1005E0DA8()
{
  if (sub_10010145C()) {
    operator new();
  }
  operator new();
}

void sub_1005E0E28()
{
}

void sub_1005E0E60(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1005E124C(a1, "CLCompanionNotifier", a2);
  *(void *)uint64_t v3 = off_1022BDD48;
  *(_WORD *)(v3 + 109) = 0;
  *(unsigned char *)(v3 + 111) = 0;
  *(void *)(v3 + 112) = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v4 = (void *)(v3 + 112);
  id v5 = [*(id *)(v3 + 40) newTimer];
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v6 = sub_1000D3E78();
  sub_10006B564(v6, &v8);
  sub_1000A699C(v8, "CompanionStateSyncInterval", v4);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005E12F8;
  void v7[3] = &unk_1022A3020;
  void v7[4] = a1;
  [*(id *)(a1 + 120) setHandler:v7];
  sub_100EB2E6C();
}

void sub_1005E116C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v2;
  uint64_t *v2 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1005E18FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E124C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022BDFB8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1005E12DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005E12F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))();
}

void sub_1005E1320(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BDF28);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BDF28);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  if (*a2 == 1)
  {
    *(unsigned char *)(a4 + 109) = *(unsigned char *)(a3 + 4);
    if (qword_10248A0E8) {
      id v9 = [(id)qword_10248A0E8 isConnected];
    }
    else {
      id v9 = 0;
    }
    sub_1005E1AF0(a4, (uint64_t)v9);
  }
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005E1504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005E1524(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BDF28);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BDF28);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1005E2C74(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005E16E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005E1700(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BDF28);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BDF28);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      __int16 v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 29))(a4, a2, a3);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005E18DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005E18FC(uint64_t a1)
{
  *(void *)a1 = off_1022BDFB8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

CLCompanionTransport *sub_1005E1980(uint64_t a1, uint64_t a2)
{
  uint64_t result = [[CLCompanionTransport alloc] initWithSilo:*(void *)(a1 + 40) iDSService:a2];
  qword_10248A0E8 = (uint64_t)result;
  if (result)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1005E1AC0;
    v6[3] = &unk_1022BDE38;
    void v6[4] = a1;
    [(CLCompanionTransport *)result setReceivedMessageHandler:v6];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1005E1AE8;
    v5[3] = &unk_1022BDE58;
    void v5[4] = a1;
    [(id)qword_10248A0E8 setConnectionUpdateHandler:v5];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1005E20D0;
    v4[3] = &unk_1022BDE58;
    void v4[4] = a1;
    return (CLCompanionTransport *)[(id)qword_10248A0E8 setDeviceNearbyHandler:v4];
  }
  return result;
}

uint64_t sub_1005E1AC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 224))();
}

void sub_1005E1AE8(uint64_t a1, uint64_t a2)
{
}

void sub_1005E1AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)qword_10248A0E8;
  if (qword_10248A0E8)
  {
    if (a2 && (v5 = [(id)qword_10248A0E8 pairedDevice], uint64_t v3 = (void *)qword_10248A0E8, v5))
    {
      uint64_t v6 = (const char *)[[[objc_msgSend((id)qword_10248A0E8, "pairedDevice")] modelIdentifier] UTF8String];
      uint64_t v3 = (void *)qword_10248A0E8;
    }
    else
    {
      uint64_t v6 = "Unknown";
    }
    char v7 = *(unsigned char *)(a1 + 111);
    if ([v3 pairedDevice])
    {
      id v8 = [(id)qword_10248A0E8 pairedDevice];
      if (v8)
      {
        [v8 operatingSystemVersion];
        int v9 = *(_DWORD *)buf;
      }
      else
      {
        int v9 = 0;
        memset(buf, 0, 24);
      }
    }
    else
    {
      int v9 = 0;
    }
    uint8_t v10 = v7 ^ 1;
    if ([(id)qword_10248A0E8 pairedDevice])
    {
      id v11 = [(id)qword_10248A0E8 pairedDevice];
      if (v11)
      {
        [v11 operatingSystemVersion];
        int v12 = *(_DWORD *)v36;
      }
      else
      {
        int v12 = 0;
        uint64_t v35 = 0;
        *(void *)unint64_t v36 = 0;
        *(void *)&v36[8] = 0;
      }
    }
    else
    {
      int v12 = 0;
    }
    if ([(id)qword_10248A0E8 pairedDevice])
    {
      id v13 = [(id)qword_10248A0E8 pairedDevice];
      if (v13)
      {
        [v13 operatingSystemVersion];
        int v14 = v34;
      }
      else
      {
        int v14 = 0;
      }
    }
    else
    {
      int v14 = 0;
    }
    uint8_t v15 = sub_1005E2494(a1);
    LODWORD(v35) = 5;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    memset(buf, 0, sizeof(buf));
    buf[0] = a2;
    (*(void (**)(uint64_t, uint64_t *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v35, buf, 1, 0xFFFFFFFFLL, 0);
    LODWORD(v35) = 6;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v42 = 0u;
    memset(&buf[16], 0, 32);
    buf[0] = a2;
    buf[1] = v10;
    *(_WORD *)&buf[2] = 0;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_DWORD *)&uint8_t buf[8] = v12;
    *(_DWORD *)&buf[12] = v14;
    uint8_t buf[16] = v15;
    *(_WORD *)&buf[17] = 0;
    buf[19] = 0;
    (*(void (**)(uint64_t, uint64_t *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v35, buf, 1, 0xFFFFFFFFLL, 0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, a2);
    char v16 = [[objc_msgSend((id)qword_10248A0E8, "pairedDevice") deviceType] == (id)6;
    __int16 v17 = (dispatch_queue_t *)sub_10019F4CC();
    sub_100F2B5E4(v17, a2, v16);
    char v18 = sub_1005E25CC();
    if (sub_1001A58C0())
    {
      uint64_t v19 = sub_1001A58C0();
      sub_10142F360(v19, a2, (uint64_t)v6, v18);
    }
    if (sub_100B7CA64())
    {
      uint64_t v20 = sub_100B7CA64();
      sub_100B7CF64(v20, a2, v18);
    }
    std::string::size_type v22 = objc_alloc_init(ALActivityLog);
    [(ALActivityLog *)v22 setTimestamp:CFAbsoluteTimeGetCurrent()];
    [(ALActivityLog *)v22 setIdsStatus:objc_alloc_init(ALCLIDSStatus)];
    if ((objc_msgSend(*(id *)(a1 + 152), "isEqualToString:", objc_msgSend(objc_msgSend((id)qword_10248A0E8, "pairedDevice"), "uniqueIDOverride")) & 1) == 0)
    {

      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 152) = [[objc_msgSend((id)qword_10248A0E8, "pairedDevice") uniqueIDOverride] copy];
      [-[ALActivityLog idsStatus](v22, "idsStatus") setPairedModelId:[objc_msgSend((id)qword_10248A0E8, "pairedDevice") modelIdentifier]];
    }
    [(ALCLIDSStatus *)[(ALActivityLog *)v22 idsStatus] setConnectionStatus:a2];
    [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v22;
    if (objc_opt_class())
    {
      uint64_t v23 = (void *)IDSCopyLocalDeviceUniqueID();
      if (qword_102419210 != -1) {
        dispatch_once(&qword_102419210, &stru_1022BDF48);
      }
      unsigned __int8 v24 = qword_102419218;
      if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
      {
        [(id)qword_10248A0E8 pairedDeviceLastSeenTimestamp];
        uint64_t v26 = v25;
        id v27 = [[[objc_msgSend((id)qword_10248A0E8, "pairedDevice") uniqueIDOverride] UTF8String];
        id v28 = [v23 UTF8String];
        *(_DWORD *)uint64_t buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = a2;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v26;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v6;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v27;
        *(_WORD *)&buf[38] = 2080;
        *(void *)&buf[40] = v28;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "IDS connection update,status,%d,prevDisconnection,%f,modelID,%s,uniqueIDOverride,%s,localDeviceID,%s", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419210 != -1) {
          dispatch_once(&qword_102419210, &stru_1022BDF48);
        }
        [(id)qword_10248A0E8 pairedDeviceLastSeenTimestamp];
        uint64_t v30 = v29;
        id v31 = [[[objc_msgSend((id)qword_10248A0E8, "pairedDevice") uniqueIDOverride] UTF8String];
        id v32 = [v23 UTF8String];
        LODWORD(v35) = 67110146;
        HIDWORD(v35) = a2;
        *(_WORD *)unint64_t v36 = 2048;
        *(void *)&v36[2] = v30;
        *(_WORD *)&v36[10] = 2080;
        *(void *)&v36[12] = v6;
        __int16 v37 = 2080;
        id v38 = v31;
        __int16 v39 = 2080;
        id v40 = v32;
        uint64_t v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifier::connectionUpdate(BOOL)", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
    }
  }
}

void sub_1005E20D0(uint64_t a1, int a2)
{
}

void sub_1005E20D8(uint64_t a1, int a2)
{
  if (qword_10248A0E8)
  {
    if ([(id)qword_10248A0E8 pairedDevice]) {
      unsigned __int8 v4 = [[objc_msgSend((id)qword_10248A0E8, "pairedDevice") isConnected];
    }
    else {
      unsigned __int8 v4 = 0;
    }
    if ([(id)qword_10248A0E8 pairedDevice]) {
      unsigned __int8 v5 = [[objc_msgSend((id)qword_10248A0E8, "pairedDevice") isActive];
    }
    else {
      unsigned __int8 v5 = 0;
    }
    [(id)qword_10248A0E8 pairedDeviceLastNearbyTimestamp];
    v11[0] = 13;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)&v15[8] = 0u;
    LOBYTE(buf) = v4;
    BYTE1(buf) = a2;
    BYTE2(buf) = v5;
    *(_DWORD *)((char *)&buf + 3) = 0;
    HIBYTE(buf) = 0;
    *(void *)uint8_t v15 = v6;
    (*(void (**)(uint64_t, _DWORD *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v11, &buf, 1, 0xFFFFFFFFLL, 0);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_1022BDF48);
    }
    char v7 = qword_102419218;
    if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
    {
      [(id)qword_10248A0E8 pairedDeviceLastNearbyTimestamp];
      LODWORD(buf) = 67109376;
      HIDWORD(buf) = a2;
      *(_WORD *)uint8_t v15 = 2048;
      *(void *)&void v15[2] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Companion proximity update, nearby %d, nearbyTimestamp %f", (uint8_t *)&buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419210 != -1) {
        dispatch_once(&qword_102419210, &stru_1022BDF48);
      }
      [(id)qword_10248A0E8 pairedDeviceLastNearbyTimestamp];
      v11[0] = 67109376;
      v11[1] = a2;
      __int16 v12 = 2048;
      uint64_t v13 = v9;
      uint8_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifier::deviceNearbyUpdate(BOOL)", "%s\n", v10);
      if (v10 != (char *)&buf) {
        free(v10);
      }
    }
  }
}

id sub_1005E2384()
{
  id result = (id)qword_10248A0E8;
  if (qword_10248A0E8) {
    return [(id)qword_10248A0E8 isConnected];
  }
  return result;
}

uint64_t sub_1005E2398(void *a1)
{
  *a1 = off_1022BDD48;
  if (qword_10248A0E8) {

  }
  uint64_t v2 = a1[18];
  a1[18] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[17];
  a1[17] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[16];
  a1[16] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return sub_1005E18FC((uint64_t)a1);
}

uint64_t sub_1005E2494(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 111)) {
    return 0;
  }
  if (qword_10248A0E8)
  {
    if ([(id)qword_10248A0E8 pairedDevice])
    {
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      id v2 = [&off_1023979E0 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v2)
      {
        id v3 = v2;
        uint64_t v4 = *(void *)v7;
LABEL_7:
        uint64_t v5 = 0;
        while (1)
        {
          if (*(void *)v7 != v4) {
            objc_enumerationMutation(&off_1023979E0);
          }
          if ([objc_msgSend(objc_msgSend(objc_msgSend((id)qword_10248A0E8, "pairedDevice"), "modelIdentifier"), hasPrefix:*(void *)(*((void *)&v6 + 1) + 8 * v5)])return 0; {
          if (v3 == (id)++v5)
          }
          {
            id v3 = [&off_1023979E0 countByEnumeratingWithState:&v6 objects:v10 count:16];
            uint64_t result = 1;
            if (v3) {
              goto LABEL_7;
            }
            return result;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1005E25CC()
{
  uint64_t result = qword_10248A0E8;
  if (qword_10248A0E8)
  {
    uint64_t result = (uint64_t)[(id)qword_10248A0E8 pairedDevice];
    if (result)
    {
      long long v6 = 0u;
      long long v7 = 0u;
      long long v4 = 0u;
      long long v5 = 0u;
      uint64_t result = (uint64_t)[&off_1023979F8 countByEnumeratingWithState:&v4 objects:v8 count:16];
      if (result)
      {
        id v1 = (id)result;
        uint64_t v2 = *(void *)v5;
        while (2)
        {
          for (uint64_t i = 0; i != v1; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v5 != v2) {
              objc_enumerationMutation(&off_1023979F8);
            }
            if ([((id)qword_10248A0E8).pairedDevice.modelIdentifier hasPrefix:*(void *)(*((void *)&v4 + 1) + 8 * i)])return 1; {
          }
            }
          id v1 = [&off_1023979F8 countByEnumeratingWithState:&v4 objects:v8 count:16];
          uint64_t result = 0;
          if (v1) {
            continue;
          }
          break;
        }
      }
    }
  }
  return result;
}

id sub_1005E26F4(double a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_1022BDF48);
  }
  long long v18 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67110912;
    int v23 = a3;
    __int16 v24 = 2048;
    id v25 = [a4 length];
    __int16 v26 = 2048;
    uint64_t v27 = a5;
    __int16 v28 = 1024;
    int v29 = a6;
    __int16 v30 = 1024;
    int v31 = a7;
    __int16 v32 = 1024;
    int v33 = a8;
    __int16 v34 = 2048;
    double v35 = a1;
    __int16 v36 = 1024;
    int v37 = a9;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Sending message,type,%d,size,%lu,priority,%ld,fireAndForget,%d,encrypt,%d,bypassConnectionCheck,%d,timeout,%f,nonWaking,%d", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_1022BDF48);
    }
    [a4 length];
    long long v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifier::sendCompanionMessage(CLCompanionNotifier_Type::Type, NSData *, IDSMessagePriority, BOOL, BOOL, BOOL, CFTimeInterval, BOOL, CLCompanionTransportCompletionHandler) const", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  id result = (id)qword_10248A0E8;
  if (qword_10248A0E8)
  {
    LOBYTE(v21) = a9;
    return [(id)qword_10248A0E8 sendMessage:a4 type:(unsigned __int16)a3 priority:a5 fireAndForget:a6 encrypt:a7 bypassConnectionCheck:a8 timeout:a1 nonWaking:v21 completionHandler:a10];
  }
  else if (a10)
  {
    return (id)(*(uint64_t (**)(uint64_t, void, void))(a10 + 16))(a10, 0, 0);
  }
  return result;
}

void *sub_1005E29C0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1005E2A3C(_DWORD *a1)
{
  int v1 = *a1 - 2;
  if (v1 > 3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_101D246E0[v1];
  }
}

uint64_t sub_1005E2A64()
{
  return 1;
}

uint64_t sub_1005E2A6C()
{
  return 1;
}

void sub_1005E2A74(uint64_t a1, int a2)
{
  double v3 = 1.79769313e308;
  if (a2) {
    double v3 = 10.0;
  }
  *(double *)(a1 + 112) = v3;
  [*(id *)(a1 + 120) setNextFireDelay:v3 interval:v3];
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_1022BDF48);
  }
  long long v4 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(double *)(a1 + 112);
    if (v5 == 1.79769313e308) {
      double v5 = 0.0;
    }
    *(_DWORD *)uint64_t buf = 134217984;
    double v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "timer interval,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_1022BDF48);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifier::setStateSyncTimer(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1005E2C74(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    *(unsigned char *)(a1 + 110) = *(unsigned char *)(a4 + 3);
    *(unsigned char *)(a1 + 111) = *(unsigned char *)(a4 + 2);
  }
  if (qword_10248A0E8) {
    id v5 = [(id)qword_10248A0E8 isConnected];
  }
  else {
    id v5 = 0;
  }

  sub_1005E1AF0(a1, (uint64_t)v5);
}

void sub_1005E316C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BDF88);
    }
    long long v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLCompanionNotifier IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BDF88);
      }
    }
    id v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLCompanionNotifier IDS service failed to initialize", "{\"msg%{public}.0s\":\"#CLCompanionNotifier IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    if (qword_10247C748)
    {

      qword_10247C748 = 0;
    }
    qword_10247C748 = a2;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022BDF68);
    }
    double v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      __int16 v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLCompanionNotifier IDS became available so resuming silo (CLCompanionTransport)\"}", (uint8_t *)&v9, 0x12u);
    }
    [*(id *)(a1 + 32) resume];
  }
}

void *sub_1005E33B0(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id result = (void *)sub_1000B2D04(a1, 0, a2, a3, a4, a5);
  *id result = &off_1022BDEE0;
  return result;
}

void sub_1005E33F8()
{
}

void sub_1005E34B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1005E34F4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1005E353C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1005E3584(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

BOOL sub_1005E35CC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BDF28);
    }
    int v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      __int16 v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        __int16 v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      __int16 v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BDF28);
      }
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005E3850(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = (char *)operator new(0xD8uLL);
  long long v7 = a3[9];
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 168) = v7;
  long long v8 = a3[11];
  *(_OWORD *)(v6 + 184) = a3[10];
  *(_OWORD *)(v6 + 200) = v8;
  long long v9 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v9;
  long long v10 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v10;
  long long v11 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 40) = v11;
  long long v12 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_1022BE098;
  *(_OWORD *)(v6 + 72) = v12;
  int v16 = *a2;
  int v17 = &v16;
  __int16 v13 = sub_10044715C((uint64_t **)(a1 + 56), &v16, (uint64_t)&unk_101D0B290, &v17);
  uint64_t v14 = (std::__shared_weak_count *)v13[9];
  v13[8] = (uint64_t *)(v6 + 24);
  v13[9] = (uint64_t *)v6;
  if (v14) {
    sub_1000DB0A0(v14);
  }
  return 1;
}

void sub_1005E3944(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E3958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1005E39C4(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BDF28);
  }
  long long v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    long long v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v28 = 0;
    __int16 v29 = 2082;
    *(void *)__int16 v30 = "";
    *(_WORD *)&v30[8] = 2082;
    *(void *)&unsigned char v30[10] = "activity";
    __int16 v31 = 2082;
    __int16 v32 = v10;
    __int16 v33 = 2050;
    __int16 v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    double v35 = v36;
    memset(v36, 0, sizeof(v36));
    int v37 = 0;
    sub_1005E4B68((uint64_t)buf, a2, (uint64_t)&v35);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v34) {
      sub_1000DB0A0(v34);
    }
    sub_1000F5BB0((uint64_t)&v29, *(void **)&v30[6]);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    sub_1000F5BB0((uint64_t)&v35, v36[0]);
  }
  if (a4)
  {
    uint64_t v18 = (char *)operator new(0xD8uLL);
    long long v19 = a3[1];
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 40) = v19;
    long long v20 = a3[3];
    *(_OWORD *)(v18 + 56) = a3[2];
    *(_OWORD *)(v18 + 72) = v20;
    long long v21 = a3[6];
    *(_OWORD *)(v18 + 136) = a3[7];
    *(_OWORD *)(v18 + 120) = v21;
    long long v22 = a3[4];
    *(_OWORD *)(v18 + 104) = a3[5];
    *(_OWORD *)(v18 + 88) = v22;
    long long v23 = a3[10];
    *(_OWORD *)(v18 + 200) = a3[11];
    *(_OWORD *)(v18 + 184) = v23;
    long long v24 = a3[8];
    *(_OWORD *)(v18 + 168) = a3[9];
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)uint64_t v18 = off_1022BE098;
    *(_OWORD *)(v18 + 152) = v24;
    __int16 v25 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v25) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  __int16 v25 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v25) {
LABEL_27:
  }
    sub_1000DB0A0(v25);
LABEL_28:
  if (v14[7]) {
    sub_1005E46A4();
  }
  os_activity_scope_leave(&state);
}

void sub_1005E3FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1005E4034(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BDF28);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      long long v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BDF28);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BDF28);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      long long v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BDF28);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022BDF28);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              long long v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                long long v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              long long v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BDF28);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        uint64_t v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1005E45E4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005E4614(id a1)
{
  qword_102419218 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_1005E4644(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1005E4674(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1005E46A4()
{
}

void sub_1005E4778(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        sub_100077700(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                long long v22 = (uint64_t *)v17;
              }
              else {
                long long v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_100077608(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                double v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    double v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      long long v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      long long v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  long long v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      long long v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      double v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BDF28);
              }
              long long v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)uint64_t buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BDF28);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 8);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_1005E4B68(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_1005E4BC0((uint64_t *)(a1 + 8), a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 40);
  return a1;
}

uint64_t *sub_1005E4BC0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CF398(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1005E4C00(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1005E4C18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BE098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005E4C38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BE098;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1005E4C94(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_1005E4CB4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_1005E5040((uint64_t)&v6, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022BE0D8);
    }
    int v3 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D246AELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_18:
        int v7 = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D246AELL & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_20:
      dispatch_once(&qword_102418F90, &stru_1022BE0D8);
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022BE0D8);
    }
    uint64_t v4 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D246AELL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
}

void sub_1005E5040(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023928E8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)192)
    {
      int v3 = (void *)sub_101A67130();
      sub_1005E50C8(v3);
      return;
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  [a2 cppObjectPtr];
}

void sub_1005E50C8(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

id sub_1005E50F8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1005E5844((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022BE0D8);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D96718 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022BE0D8);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D96718 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022BE0D8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D96718 & 0x7FFFFFFFFFFFFFFFLL;
  char v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::RegistrationInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1005E5484(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BE0D8);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D96718 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCompanionNotifier_Type::RegistrationInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BE0D8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D96718 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BE0D8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1005E5844(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023928E8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
    {
      uint64_t v4 = sub_101A67130();
      return (id)sub_1005E58CC(v4);
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

BOOL sub_1005E58CC()
{
  uint64_t v1 = qword_102419588;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_1005E58EC()
{
  sub_100134750(qword_10247C6F0, "Acc800Fp");
  dword_10247C708 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_10247C6F0, (void *)&_mh_execute_header);
  sub_100134750(qword_10247C710, "DmFp");
  dword_10247C728 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_10247C710, (void *)&_mh_execute_header);
}

double sub_1005E5B38(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_1005E6CEC(v2, a2);
}

BOOL sub_1005E5B48(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_1005E69F4(v2, a2);
}

double sub_1005E5B58(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_1005E6A48(v2, a2);
}

BOOL sub_1005E5B68(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(unsigned char *)(a2 + 27)) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 3;
  }
  if (v3 > *(unsigned __int16 *)(v2 + 34)) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 16) >= (signed int)v3 && *(unsigned char *)(a2 + 30)) {
    return 1;
  }
  return *(unsigned char *)(a2 + 29) != 0;
}

double sub_1005E5BC4(uint64_t a1, double *a2)
{
  uint64_t v2 = a1 - 8;
  if (!a1) {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(v2 + 160) = 0;
  double result = *a2;
  *(double *)(v2 + 168) = *a2;
  return result;
}

double sub_1005E5BE0(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1022BE120;
  *(void *)(a1 + 16) = 5;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_1022BE1A8;
  *(void *)&double result = 0x500000000;
  *(void *)(a1 + 32) = 0x500000000;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_1005E5C30(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247C768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247C768))
  {
    *(_OWORD *)uint64_t buf = xmmword_101D24710;
    sub_1004F7D80(qword_10247C750, buf, 4uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_10247C750, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247C768);
  }
  __int16 v20 = 0;
  *(_OWORD *)unint64_t v19 = xmmword_101D1E250;
  memset(&v19[2], 0, 135);
  long long v21 = xmmword_101D1E250;
  uint64_t v22 = 0;
  int v23 = 0;
  v25[0] = 0;
  uint64_t v24 = 0;
  *(void *)((char *)v25 + 5) = 0;
  *(void *)((char *)&v25[1] + 6) = 0;
  char v26 = 0;
  memset(&v25[3], 0, 24);
  long long v27 = xmmword_101D1E250;
  uint64_t v28 = 0;
  int v29 = 0;
  double v30 = -1.79769313e308;
  int v41 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  int v36 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  memset(v40, 0, sizeof(v40));
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v45 = 0;
  int v46 = 0;
  uint64_t v52 = 0;
  __int16 v53 = 0;
  int v58 = 0;
  int v51 = 0;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  char v56 = 0;
  memset(v57, 0, sizeof(v57));
  unint64_t v59 = 0xFFEFFFFFFFFFFFFFLL;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  uint64_t v79 = 0;
  unint64_t v80 = 0xFFEFFFFFFFFFFFFFLL;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  unint64_t v85 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v86 = 0;
  int v87 = 0;
  uint64_t v88 = 0;
  char v89 = 0;
  unint64_t v90 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v92 = 0;
  uint64_t v91 = 0;
  uint64_t v93 = 0x80000000800000;
  uint64_t v95 = 0;
  uint64_t v94 = 0;
  long long v96 = xmmword_101D1E260;
  uint64_t v97 = 0x80000000800000;
  long long v98 = 0u;
  long long v99 = 0u;
  uint64_t v100 = 0;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  int v108 = 0;
  unint64_t v109 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v110 = 0;
  int v111 = 0;
  *(void *)&long long v112 = 0xFFEFFFFFFFFFFFFFLL;
  *((void *)&v112 + 1) = 7;
  double v113 = -1.79769313e308;
  char v114 = 0;
  uint64_t v116 = 0;
  uint64_t v115 = 0;
  uint64_t v117 = 0;
  sub_100174478((double *)a2, qword_10247C750, (uint64_t)v19);
  *(void *)&long long v14 = 0;
  *((void *)&v14 + 1) = 7;
  __int16 v15 = 0;
  if (*(double *)&v112 == -1.79769313e308)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022BE218);
    }
    char v6 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a2 + 296);
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cycling active state model failure to get cycling result, %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022BE218);
      }
      uint64_t v12 = *(void *)(a2 + 296);
      LODWORD(v16[0]) = 134217984;
      *(void *)((char *)v16 + 4) = v12;
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutActiveStateEvent CLOutdoorCyclingActiveStateModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else
  {
    char v4 = 0;
    long long v14 = v112;
    BOOL v5 = v113 != -1.79769313e308;
    if (*(float *)&v116 <= 0.5) {
      BOOL v5 = 0;
    }
    LOBYTE(v15) = v5;
    if (v30 != -1.79769313e308 && v113 != -1.79769313e308)
    {
      char v4 = 0;
      if (*(float *)&v116 > 0.5 && *(double *)&v33 >= 0.44704 && DWORD2(v14) == 5)
      {
        DWORD2(v14) = 6;
        char v4 = 1;
      }
    }
    HIBYTE(v15) = v4;
  }
  if (!*(_WORD *)(a1 + 34)) {
    goto LABEL_21;
  }
  unint64_t v8 = *(unsigned __int16 *)(a1 + 34) + (unint64_t)*(unsigned __int16 *)(a1 + 32) - 1;
  unint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v8 < v9) {
    unint64_t v9 = 0;
  }
  if (*(double *)&v14 > *(double *)(a1 + 32 + 24 * (v8 - v9) + 8)) {
LABEL_21:
  }
    sub_1001886E4((unsigned __int16 *)(a1 + 32), &v14);
  sub_1005E6208(a1, (uint64_t)v19, a2, (uint64_t)v16);
  uint64_t v10 = (long long *)(a2 + 296);
  if (*(double *)&v112 != -1.79769313e308) {
    uint64_t v10 = &v14;
  }
  *(void *)uint64_t buf = *(void *)v10;
  *(_OWORD *)&uint8_t buf[8] = v16[0];
  *(void *)&buf[23] = *(void *)((char *)v16 + 15);
  uint64_t v18 = a2;
  sub_1001A34E0(a1 + 8, 1, (uint64_t)buf);
  return *(void *)(a1 + 160);
}

void sub_1005E61E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1005E6208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 15) = 0;
  if (*(_WORD *)(a1 + 34))
  {
    uint64_t v6 = 0;
    int v48 = 0;
    int v7 = 0;
    int v8 = 0;
    unsigned int v9 = 0;
    int v10 = 0;
    unint64_t v11 = 0;
    int v12 = 0;
    uint64_t v46 = a1;
    unint64_t v13 = (unsigned __int16 *)(a1 + 32);
    do
    {
      unsigned int v14 = *(_DWORD *)(sub_1005E6594(v13, v11) + 8);
      int v15 = *(unsigned __int8 *)(sub_1005E6594(v13, v11) + 16);
      a1 = sub_1005E6594(v13, v11);
      v12 += *(unsigned __int8 *)(a1 + 17);
      BOOL v17 = v14 >= 2 && v14 != 14 && v14 - 9 >= 2;
      int v18 = !v17;
      if (!v17) {
        ++v8;
      }
      *(_DWORD *)a4 = v12;
      *(_DWORD *)(a4 + 4) = v8;
      if (!v14) {
        int v18 = 0;
      }
      BOOL v20 = v14 == 7 && v15 != 0;
      int v21 = (v14 & 0xFFFFFFFD) == 4 || v20;
      v7 += v21;
      int v22 = v48;
      if (!v15) {
        int v22 = v48 + 1;
      }
      *(_DWORD *)(a4 + 8) = v7;
      *(_DWORD *)(a4 + 12) = v22;
      int v48 = v22;
      unint64_t v23 = *(unsigned __int16 *)(v46 + 34);
      if (v6 + v23 <= 2 && v14 == 11) {
        *(unsigned char *)(a4 + 16) = 1;
      }
      v9 += v18;
      v10 += v15;
      ++v11;
      --v6;
    }
    while (v11 < v23);
    if (v10)
    {
      BOOL v24 = 1;
      uint64_t v4 = a3;
      uint64_t v5 = a2;
      goto LABEL_41;
    }
    uint64_t v4 = a3;
    uint64_t v5 = a2;
  }
  else
  {
    unsigned int v9 = 0;
  }
  BOOL v24 = *(double *)(v5 + 288) != -1.79769313e308 && *(double *)(v5 + 328) > 2.2352
     || *(double *)(v5 + 1344) != -1.79769313e308 && *(float *)(v5 + 1376) < 3.0;
LABEL_41:
  *(unsigned char *)(a4 + 22) = v24;
  BOOL v25 = *(double *)(v5 + 168) != -1.79769313e308;
  if (*(double *)(v5 + 192) < 0.100000001) {
    BOOL v25 = 0;
  }
  if (v9 >= 3) {
    BOOL v25 = 0;
  }
  *(unsigned char *)(a4 + 17) = v25;
  uint64_t v26 = sub_1005E6794(a1, v5, v4);
  int v28 = v27;
  uint64_t result = sub_101004734(v4, v5);
  unsigned int v30 = result;
  double v31 = *(double *)(v5 + 288);
  if (v31 == -1.79769313e308)
  {
    double v31 = -1.79769313e308;
  }
  else
  {
    uint64_t result = 0;
    double v32 = *(double *)(v5 + 328);
    if (SHIDWORD(v26) >= 4 && v32 < 0.44704)
    {
      uint64_t result = sub_1001A4C4C(v30);
      double v32 = *(double *)(v5 + 328);
      double v31 = *(double *)(v5 + 288);
    }
    *(unsigned char *)(a4 + 18) = result;
    BOOL v34 = v32 >= 0.44704 && v28 > 3;
    *(unsigned char *)(a4 + 19) = v34;
  }
  if (*(double *)(v5 + 1344) != -1.79769313e308 && *(double *)(v5 + 1328) != -1.79769313e308 && v31 != -1.79769313e308)
  {
    uint64_t result = 0;
    unsigned int v37 = *(_DWORD *)(v5 + 1336);
    BOOL v39 = v37 - 9 > 1 && v37 != 14 && v37 > 1;
    float v40 = *(float *)(v5 + 1364);
    if (!v39 && v40 <= 0.1)
    {
      uint64_t result = 0;
      if (*(double *)(v5 + 328) == 0.0 && (int)v26 >= 3)
      {
        uint64_t result = sub_1001A4C4C(v30);
        unsigned int v37 = *(_DWORD *)(v5 + 1336);
        float v40 = *(float *)(v5 + 1364);
      }
    }
    *(unsigned char *)(a4 + 20) = result;
    BOOL v41 = (v37 & 0xFFFFFFFD) == 4 || v40 > 0.5 && v37 == 7;
    BOOL v43 = 0;
    if (v41 && v40 > 0.1) {
      BOOL v43 = *(double *)(v5 + 328) > 2.2352;
    }
    *(unsigned char *)(a4 + 21) = v43;
  }
  return result;
}

uint64_t sub_1005E6580(uint64_t result)
{
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(void *)(result + 168) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_1005E6594(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE238);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE238);
      }
      unsigned int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLOutdoorCyclingActiveStateModel::CycleStateResultForPauseResume>::operator[](const size_t) const [T = CLOutdoorCyclingActiveStateModel::CycleStateResultForPauseResume]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

uint64_t sub_1005E6794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  int v9 = 0;
  if (*(double *)(a2 + 288) != -1.79769313e308)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    unint64_t v5 = (void *)(*(uint64_t (**)(void))(**(void **)a3 + 16))();
    uint64_t v6 = (double *)operator new(0x20uLL);
    *(void *)uint64_t v6 = off_1022BE268;
    v6[1] = Current + -5.0;
    _DWORD v6[2] = Current;
    *((void *)v6 + 3) = &v8;
    void v10[3] = v6;
    sub_1005E68B4(v5, (uint64_t)v10);
    sub_1005E73C4(v10);
  }
  return v8;
}

void sub_1005E68A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1005E73C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1005E68B4(void *result, uint64_t a2)
{
  uint64_t v2 = result[7];
  if (v2)
  {
    unint64_t v3 = result[6];
    uint64_t v4 = v3 + v2;
    uint64_t v5 = ((v3 + v2) * (unsigned __int128)0x8618618618618619) >> 64;
    unint64_t v6 = (v5 + ((unint64_t)(v4 - v5) >> 1)) >> 4;
    uint64_t v7 = result[3];
    if (result[4] == v7)
    {
      unint64_t v10 = 0;
      uint64_t v12 = v7 + 8 * v6;
      uint64_t v13 = 0;
      uint64_t v14 = v12;
      uint64_t v15 = 0;
      int v9 = (void *)(v7 + 8 * (v3 / 0x15));
    }
    else
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      uint64_t v12 = v7 + 8 * v6;
      uint64_t v13 = v8 + 192 * (v4 - 21 * v6);
      uint64_t v14 = v12;
      uint64_t v15 = v13;
      int v9 = (void *)(v7 + 8 * (v3 / 0x15));
      unint64_t v10 = *v9 + 192 * (v3 % 0x15);
    }
    v11[0] = v9;
    v11[1] = v10;
    _DWORD v11[2] = v9;
    void v11[3] = v10;
    sub_1005E71B0((uint64_t)v16, a2);
    sub_1005E7050((uint64_t)&v12, (uint64_t)v11, (uint64_t)v16, (uint64_t)v17);
    sub_1005E73C4(v17);
    return sub_1005E73C4(v16);
  }
  return result;
}

void sub_1005E69D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1005E73C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1005E69F4(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 34) >= 3u
      && (*(int *)(a2 + 12) > 2 || *(unsigned char *)(a2 + 28) || *(unsigned char *)(a2 + 26))
      && *(int *)(a2 + 20) >= 1
      && !*(unsigned char *)(a2 + 24)
      && *(unsigned char *)(a2 + 25) == 0;
}

double sub_1005E6A48(uint64_t a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022BE218);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 28);
    int v6 = *(unsigned __int8 *)(a2 + 26);
    int v7 = *(_DWORD *)(a2 + 8);
    int v8 = *(_DWORD *)(a2 + 12);
    sub_1010048BC(*(void *)(a2 + 32), (std::string *)&__p);
    int v9 = (v24 & 0x8000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)uint64_t buf = 67110146;
    int v28 = v8;
    __int16 v29 = 1024;
    int v30 = v5;
    __int16 v31 = 1024;
    int v32 = v6;
    __int16 v33 = 1024;
    int v34 = v7;
    __int16 v35 = 2080;
    int v36 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLOutdoorCyclingActiveStateModel,pausing,nominalPauseStates,%d,fastPauseWithTier1Prob,%d,pauseHistGPSOverride,%d,countTier1Override,%d,%s", buf, 0x24u);
    if (SBYTE1(v24) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022BE218);
    }
    int v11 = *(unsigned __int8 *)(a2 + 28);
    int v12 = *(unsigned __int8 *)(a2 + 26);
    int v13 = *(_DWORD *)(a2 + 8);
    int v14 = *(_DWORD *)(a2 + 12);
    sub_1010048BC(*(void *)(a2 + 32), &v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v17;
    }
    else {
      uint64_t v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p) = 67110146;
    HIDWORD(__p) = v14;
    __int16 v19 = 1024;
    int v20 = v11;
    __int16 v21 = 1024;
    int v22 = v12;
    __int16 v23 = 1024;
    int v24 = v13;
    __int16 v25 = 2080;
    uint64_t v26 = v15;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorCyclingActiveStateModel::doPause(const ETick *)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  *(_DWORD *)(a1 + 160) = 1;
  double result = *(double *)a2;
  *(void *)(a1 + 168) = *(void *)a2;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double sub_1005E6CEC(uint64_t a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022BE218);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(unsigned __int8 *)(a2 + 29);
    int v7 = *(unsigned __int8 *)(a2 + 27);
    int v8 = *(_DWORD *)(a2 + 8);
    sub_1010048BC(*(void *)(a2 + 32), (std::string *)&__p);
    int v9 = (v24 & 0x8000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)uint64_t buf = 67110146;
    int v28 = v5;
    __int16 v29 = 1024;
    int v30 = v6;
    __int16 v31 = 1024;
    int v32 = v7;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 2080;
    int v36 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLOutdoorCyclingActiveStateModel,resuming,nominalResumeStates,%d,fastResumeWithTier1Prob,%d,resumeHistGPSOverride,%d,countTier1Override,%d,%s", buf, 0x24u);
    if (SBYTE1(v24) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022BE218);
    }
    int v11 = *(_DWORD *)(a2 + 16);
    int v12 = *(unsigned __int8 *)(a2 + 29);
    int v13 = *(unsigned __int8 *)(a2 + 27);
    int v14 = *(_DWORD *)(a2 + 8);
    sub_1010048BC(*(void *)(a2 + 32), &v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v17;
    }
    else {
      uint64_t v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p) = 67110146;
    HIDWORD(__p) = v11;
    __int16 v19 = 1024;
    int v20 = v12;
    __int16 v21 = 1024;
    int v22 = v13;
    __int16 v23 = 1024;
    int v24 = v14;
    __int16 v25 = 2080;
    uint64_t v26 = v15;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorCyclingActiveStateModel::doResume(const ETick *)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  *(_DWORD *)(a1 + 160) = 2;
  double result = *(double *)a2;
  *(void *)(a1 + 168) = *(void *)a2;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1005E6F98()
{
  return 257;
}

void *sub_1005E6FA0(void *result)
{
  *double result = off_1022BE1A8;
  return result;
}

void sub_1005E6FC0(void *a1)
{
  *a1 = off_1022BE1A8;
  operator delete();
}

void sub_1005E6FF0(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1005E7020(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1005E7050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6 != *(void *)(a2 + 24))
  {
    int v9 = *(void **)(a1 + 16);
    do
    {
      if (v6 == *v9) {
        uint64_t v6 = *(v9 - 1) + 4032;
      }
      uint64_t v10 = *(void *)(a3 + 24);
      if (!v10) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v6 - 192);
      int v9 = *(void **)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      if (v11 == *v9)
      {
        *(void *)(a1 + 16) = v9 - 1;
        uint64_t v11 = *--v9 + 4032;
      }
      uint64_t v6 = v11 - 192;
      *(void *)(a1 + 24) = v6;
    }
    while (v6 != *(void *)(a2 + 24));
  }

  return sub_1005E7130(a4, a3);
}

uint64_t sub_1005E7130(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }
  *unint64_t v3 = 0;
  return a1;
}

uint64_t sub_1005E71B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1005E724C()
{
}

__n128 sub_1005E7260(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022BE268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1005E72B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022BE268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1005E72EC(uint64_t result, double *a2)
{
  double v2 = *a2;
  if (*a2 >= *(double *)(result + 8))
  {
    double v3 = *(double *)(result + 16);
    double v4 = a2[5];
    if (v2 <= v3 && v4 == 0.0) {
      ++**(_DWORD **)(result + 24);
    }
    if (v2 <= v3)
    {
      if (v4 >= 0.0 && v4 < 0.44704) {
        ++*(_DWORD *)(*(void *)(result + 24) + 4);
      }
      if (a2[5] >= 0.44704) {
        ++*(_DWORD *)(*(void *)(result + 24) + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1005E7378(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1005E73B8()
{
}

void *sub_1005E73C4(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1005E7448()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E766C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E7890()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E7AB4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E7CD8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E7EFC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E8120()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E8344()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E8568()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E878C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E89B0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E8BD4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E8DF8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E901C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E9240()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E9464()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E9688()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E98AC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E9AD0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E9CF4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005E9F18()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EA13C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EA360()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EA584()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EA7A8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EA9CC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EABF0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EAE14()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EB038()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EB25C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EB480()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EB6A4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EB8C8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EBAEC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EBD10()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EBF34()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EC158()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EC37C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EC5A0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EC7C4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EC9E8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005ECC0C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005ECE30()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005ED054()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005ED278()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005ED49C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005ED6C0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005ED8E4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EDB08()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EDD2C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EDF50()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EE174()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EE398()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EE5BC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EE7E0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EEA04()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EEC28()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EEE4C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EF070()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EF294()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EF4B8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EF6DC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EF900()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EFB24()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EFD48()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005EFF6C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F0190()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F03B4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F05D8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F07FC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F0A20()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F0C44()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F0E68()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F108C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F12B0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F14D4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F16F8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F191C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F1B40()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F1D64()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F1F88()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F21AC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F23D0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F25F4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F2818()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F2A3C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F2C60()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F2E84()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F30A8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F32CC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F34F0()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F3714()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F3938()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F3B5C()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F3D80()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F3FA4()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F41C8()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F43EC()
{
  if (qword_1024195E0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v1 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to trace sqlite statement creating failures", "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    double v2 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2082;
      int v8 = "assert";
      __int16 v9 = 2081;
      uint64_t v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to trace sqlite statement creating failures\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
}

void sub_1005F4610(uint64_t a1, sqlite3_stmt *a2, int a3)
{
  int v6 = sqlite3_stmt_status(a2, 1, a3);
  int v7 = sqlite3_stmt_status(a2, 2, a3);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BE4A0);
  }
  int v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    __int16 v9 = sqlite3_sql(a2);
    uint64_t v10 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    *(_DWORD *)uint64_t buf = 136315906;
    int v13 = v9;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 2080;
    __int16 v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Query: %s, full table scans: %d, sorts: %d, File: %s", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE4A0);
    }
    sqlite3_sql(a2);
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSqliteDatabase::logStmtStatus(sqlite3_stmt *, BOOL)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_1005F4864(uint64_t a1)
{
  *(_DWORD *)(a1 + 120) = 0;
  memset(&__p, 0, sizeof(__p));
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  double v2 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    double v3 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      double v3 = (void *)*v3;
    }
    int v4 = *(_DWORD *)(a1 + 48);
    int v5 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v3;
    __int16 v57 = 1026;
    *(_DWORD *)int v58 = v4;
    *(_WORD *)&v58[4] = 1026;
    *(_DWORD *)&v58[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"open\", \"path\":%{public, location:escape_only}s, \"protection\":%{public}d, \"persistence\":%{public}d}", buf, 0x28u);
  }
  if (*(char *)(a1 + 87) < 0) {
    uint64_t v6 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 87);
  }
  int v7 = (uint64_t *)(a1 + 48);
  int v8 = (long long *)(a1 + 64);
  __int16 v9 = (void **)(a1 + 96);
  if (!v6)
  {
    if (*(char *)(a1 + 119) < 0)
    {
      if (*(void *)(a1 + 104))
      {
LABEL_15:
        uint64_t v12 = sub_10019F510();
        uint64_t v42 = *v7;
        __int16 v43 = *(_WORD *)(a1 + 56);
        uint64_t v11 = (void **)&v44;
        if (*(char *)(a1 + 87) < 0)
        {
          sub_1000DC48C(&v44, *(void **)(a1 + 64), *(void *)(a1 + 72));
        }
        else
        {
          long long v44 = *v8;
          uint64_t v45 = *(void *)(a1 + 80);
        }
        uint64_t v46 = *(void *)(a1 + 88);
        int v13 = sub_100EE3708(v12, &v42, (const void **)(a1 + 96), (uint64_t)&v53);
        int v52 = v13;
        if (SHIBYTE(v45) < 0) {
          goto LABEL_52;
        }
        goto LABEL_19;
      }
    }
    else if (*(unsigned char *)(a1 + 119))
    {
      goto LABEL_15;
    }
    uint64_t v19 = sub_10019F510();
    uint64_t v37 = *v7;
    __int16 v38 = *(_WORD *)(a1 + 56);
    uint64_t v11 = (void **)&v39;
    if (*(char *)(a1 + 87) < 0)
    {
      sub_1000DC48C(&v39, *(void **)(a1 + 64), *(void *)(a1 + 72));
    }
    else
    {
      long long v39 = *v8;
      uint64_t v40 = *(void *)(a1 + 80);
    }
    uint64_t v41 = *(void *)(a1 + 88);
    int v13 = sub_100EE360C(v19, (uint64_t)&v37, (uint64_t)&v53);
    int v52 = v13;
    if (SHIBYTE(v40) < 0) {
      goto LABEL_52;
    }
LABEL_19:
    if (v13) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a1 + 64));
  uint64_t v10 = sub_10019F510();
  uint64_t v47 = *v7;
  __int16 v48 = *(_WORD *)(a1 + 56);
  uint64_t v11 = (void **)&v49;
  if (*(char *)(a1 + 87) < 0)
  {
    sub_1000DC48C(&v49, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    long long v49 = *v8;
    uint64_t v50 = *(void *)(a1 + 80);
  }
  uint64_t v51 = *(void *)(a1 + 88);
  int v13 = sub_100EE3708(v10, &v47, (const void **)(a1 + 64), (uint64_t)&v53);
  int v52 = v13;
  if ((SHIBYTE(v50) & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_52:
  operator delete(*v11);
  if (v13)
  {
LABEL_20:
    if (*(char *)(a1 + 119) < 0)
    {
      if (!*(void *)(a1 + 104))
      {
LABEL_24:
        sub_1005F7250((gid_t *)(a1 + 48), (std::string *)buf);
        if (*(char *)(a1 + 119) < 0) {
          operator delete(*v9);
        }
        *(_OWORD *)__int16 v9 = *(_OWORD *)buf;
        *(void *)(a1 + 112) = *(void *)&buf[16];
      }
    }
    else if (!*(unsigned char *)(a1 + 119))
    {
      goto LABEL_24;
    }
    if (v13 == 23)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      __int16 v14 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 119) < 0) {
          __int16 v9 = (void **)*v9;
        }
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v9;
        __int16 v57 = 1040;
        *(_DWORD *)int v58 = 4;
        *(_WORD *)&v58[4] = 2098;
        *(void *)&v58[6] = &v52;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Could not open database\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
      }
    }
    else
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      int v15 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        __int16 v16 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v16 = *v9;
        }
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v16;
        __int16 v57 = 1040;
        *(_DWORD *)int v58 = 4;
        *(_WORD *)&v58[4] = 2098;
        *(void *)&v58[6] = &v52;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not open database\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
      }
      int v17 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        __int16 v18 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v18 = *v9;
        }
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v18;
        __int16 v57 = 1040;
        *(_DWORD *)int v58 = 4;
        *(_WORD *)&v58[4] = 2098;
        *(void *)&v58[6] = &v52;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not open database", "{\"msg%{public}.0s\":\"Could not open database\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
      }
      sub_1005F9B94(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v52);
    }
    *(void *)(a1 + 8) = 0;
    goto LABEL_112;
  }
LABEL_53:
  *(_OWORD *)(a1 + 8) = v53;
  uint64_t v20 = *(unsigned __int8 *)(a1 + 119);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v21 = *(void *)(a1 + 104);
  }
  else {
    uint64_t v21 = *(unsigned __int8 *)(a1 + 119);
  }
  if (!v21)
  {
    std::string::operator=((std::string *)(a1 + 96), &__p);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v26 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 119) < 0) {
        __int16 v9 = (void **)*v9;
      }
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Returned database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    goto LABEL_99;
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v22 = *(unsigned __int8 *)(a1 + 119);
  }
  else {
    uint64_t v22 = *(void *)(a1 + 104);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v22 != size) {
    goto LABEL_82;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*v9, p_p, *(void *)(a1 + 104)))
    {
LABEL_82:
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      int v27 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v28 = &__p;
        }
        else {
          int v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        __int16 v29 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v29 = *v9;
        }
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v28;
        __int16 v57 = 2082;
        *(void *)int v58 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Requested filename\", \"expected\":%{public, location:escape_only}s, \"actual\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
      }
      int v30 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v31 = &__p;
        }
        else {
          __int16 v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (*(char *)(a1 + 119) < 0) {
          __int16 v9 = (void **)*v9;
        }
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v31;
        __int16 v57 = 2082;
        *(void *)int v58 = v9;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested filename", "{\"msg%{public}.0s\":\"Requested filename\", \"expected\":%{public, location:escape_only}s, \"actual\":%{public, location:escape_only}s}", buf, 0x26u);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 119))
  {
    __int16 v25 = (unsigned __int8 *)(a1 + 96);
    while (*v25 == p_p->__r_.__value_.__s.__data_[0])
    {
      ++v25;
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v20) {
        goto LABEL_99;
      }
    }
    goto LABEL_82;
  }
LABEL_99:
  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v32 = *(void *)(a1 + 16);
    (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 16))(v32, p_p);
    if (!*v54)
    {
      *(void *)uint64_t buf = "TableName";
      *(_DWORD *)&uint8_t buf[8] = 3;
      *(_WORD *)&buf[12] = 1;
      uint8_t buf[16] = 0;
      v58[10] = 0;
      unint64_t v59 = "SoftwareVersion";
      int v60 = 3;
      __int16 v61 = 0;
      char v62 = 0;
      char v63 = 0;
      long long v64 = "SerialNumber";
      int v65 = 3;
      __int16 v66 = 0;
      char v67 = 0;
      char v68 = 0;
      uint64_t v69 = 0;
      int v70 = 5;
      __int16 v71 = 0;
      char v72 = 0;
      char v73 = 0;
      sub_1005F588C(a1, "TableInfo", (const char **)buf, 0, 1);
      *long long v54 = 1;
    }
    sub_1005F689C(a1);
    (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
  }
  if (!sub_1005F705C(a1, 1))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v33 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to turn ON foreign keys check\"}", buf, 0x12u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    int v34 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to turn ON foreign keys check", "{\"msg%{public}.0s\":\"Unable to turn ON foreign keys check\"}", buf, 0x12u);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_1005F71E4, @"com.apple.locationd.DumpDiagnostics", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, (const void *)a1, (CFNotificationCallback)sub_1005F71E4, @"com.apple.locationd.DumpDiagnostics", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
LABEL_112:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1005F5348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1005F53D0(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_1022BE308;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = a1 + 24;
  *(void *)(a1 + 32) = a1 + 24;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = *a2;
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 48) = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), (void *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 80) = a2[4];
    *(_OWORD *)(a1 + 64) = v5;
  }
  *(void *)(a1 + 88) = a2[5];
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  sub_1005F4864(a1);
  return a1;
}

void sub_1005F5490(_Unwind_Exception *a1)
{
  sub_1003B2350(v1);
  _Unwind_Resume(a1);
}

int *sub_1005F54D0(int *a1)
{
  *(void *)a1 = off_1022BE308;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, a1);
  for (uint64_t i = *((void *)a1 + 4); (int *)i != a1 + 6; uint64_t i = v5)
  {
    uint64_t v5 = *(void *)(i + 8);
    sub_1005F55D8((uint64_t)a1, *(sqlite3_stmt **)(i + 16));
  }
  if (*((void *)a1 + 1))
  {
    if (a1[30] >= 1)
    {
      do
      {
        sub_10014D468(*((void *)a1 + 2));
        int v6 = a1[30];
        BOOL v7 = __OFSUB__(v6--, 1);
        a1[30] = v6;
      }
      while (!((v6 < 0) ^ v7 | (v6 == 0)));
    }
    uint64_t v8 = sub_10019F510();
    sub_100EE3E1C(v8, *((sqlite3 **)a1 + 1));
    *((void *)a1 + 1) = 0;
  }
  if (*((void *)a1 + 2)) {
    *((void *)a1 + 2) = 0;
  }

  if (*((char *)a1 + 119) < 0) {
    operator delete(*((void **)a1 + 12));
  }
  if (*((char *)a1 + 87) < 0) {
    operator delete(*((void **)a1 + 8));
  }
  sub_1003B2350((void *)a1 + 3);
  return a1;
}

uint64_t sub_1005F55D8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  if (v5 == (uint64_t *)(a1 + 24))
  {
LABEL_4:
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    BOOL v7 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2050;
      __int16 v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not find prepared statement\", \"statement\":\"%{public}p\"}", buf, 0x1Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v8 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2050;
      __int16 v16 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not find prepared statement", "{\"msg%{public}.0s\":\"Could not find prepared statement\", \"statement\":\"%{public}p\"}", buf, 0x1Cu);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v6 = v5[1];
      if ((sqlite3_stmt *)v5[2] == a2) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (v6 == a1 + 24) {
        goto LABEL_4;
      }
    }
    uint64_t v9 = *v5;
    *(void *)(v9 + 8) = v6;
    *(void *)v5[1] = v9;
    --*(void *)(a1 + 40);
    operator delete(v5);
    sub_10003D328(*(sqlite3 **)(a1 + 8), a2);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005F5828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005F5854(int *a1)
{
  sub_1005F54D0(a1);

  operator delete();
}

uint64_t sub_1005F588C(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4, char a5)
{
  uint64_t v120 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v120 + 16))(v120);
  __int16 v122 = 256;
  if (a3 && *a3)
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v8 = sub_100132EFC(&v140[6], (uint64_t)"PRAGMA table_info(", 18);
    size_t v9 = strlen(a2);
    uint64_t v10 = sub_100132EFC(v8, (uint64_t)a2, v9);
    LOBYTE(__p) = 41;
    sub_100132EFC(v10, (uint64_t)&__p, 1);
    std::stringbuf::str();
    if (v124[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    int v12 = (sqlite3_stmt *)sub_10014D630(a1, p_p);
    char v103 = a5;
    long long v104 = a4;
    if ((v124[15] & 0x80000000) != 0) {
      operator delete(__p);
    }
    uint64_t v112 = 0;
    char v13 = 1;
    int v111 = a3;
    while (sqlite3_step(v12) == 100)
    {
      __int16 v14 = &a3[6 * v112];
      __int16 v15 = *v14;
      if (!*v14) {
        goto LABEL_38;
      }
      __int16 v16 = sqlite3_column_text(v12, 1);
      if (strcmp(v15, (const char *)v16)) {
        goto LABEL_19;
      }
      int v17 = (int)a3[6 * v112 + 1];
      __int16 v18 = "INTEGER";
      if (v17 != 1)
      {
        uint64_t v19 = 0;
        do
        {
          uint64_t v20 = v19;
          v19 += 16;
        }
        while (v19 != 80 && *(_DWORD *)((char *)&unk_1022BE410 + v20 + 16) != v17);
        __int16 v18 = *(const char **)((char *)&unk_1022BE410 + v20 + 24);
      }
      uint64_t v21 = sqlite3_column_text(v12, 2);
      if (strcmp(v18, (const char *)v21) || BYTE4(a3[6 * v112 + 1]) != sqlite3_column_int(v12, 5) > 0)
      {
LABEL_19:
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
        uint64_t v22 = off_1024195E8;
        char v13 = 0;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = (int)a3[6 * v112 + 1];
          int v24 = "INTEGER";
          if (v23 != 1)
          {
            uint64_t v25 = 0;
            do
            {
              uint64_t v26 = v25;
              v25 += 16;
            }
            while (v25 != 80 && *(_DWORD *)((char *)&unk_1022BE410 + v26 + 16) != v23);
            int v24 = *(const char **)((char *)&unk_1022BE410 + v26 + 24);
          }
          int v27 = *v14;
          int v28 = BYTE4(v111[6 * v112 + 1]);
          __int16 v29 = sqlite3_column_text(v12, 1);
          int v30 = sqlite3_column_text(v12, 2);
          int v31 = sqlite3_column_int(v12, 5);
          std::string __p = (void *)68291075;
          *(_WORD *)v124 = 2082;
          *(void *)&v124[2] = "";
          *(_WORD *)&v124[10] = 2081;
          *(void *)&v124[12] = a2;
          __int16 v125 = 1026;
          *(_DWORD *)v126 = v112;
          *(_WORD *)&v126[4] = 2082;
          *(void *)&v126[6] = v27;
          *(_WORD *)&v126[14] = 2082;
          *(void *)&v126[16] = v24;
          *(_WORD *)&v126[24] = 1026;
          *(_DWORD *)&v126[26] = v28;
          *(_WORD *)v127 = 2082;
          *(void *)&v127[2] = v29;
          *(_WORD *)v128 = 2082;
          *(void *)&v128[2] = v30;
          LOWORD(v129) = 1026;
          *(_DWORD *)((char *)&v129 + 2) = v31 > 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Existing table's column does not match expected\", \"table\":%{private, location:escape_only}s, \"index\":%{public}d, \"expected name\":%{public, location:escape_only}s, \"expected type\":%{public, location:escape_only}s, \"expected primary key\":%{public}hhd, \"actual name\":%{public, location:escape_only}s, \"actual type\":%{public, location:escape_only}s, \"actual primary key\":%{public}hhd}", (uint8_t *)&__p, 0x56u);
          char v13 = 0;
          a3 = v111;
        }
      }
      ++v112;
    }
    if (!a3[6 * v112]) {
      goto LABEL_43;
    }
LABEL_38:
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v35 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      std::string __p = (void *)68289283;
      *(_WORD *)v124 = 2082;
      *(void *)&v124[2] = "";
      *(_WORD *)&v124[10] = 2081;
      *(void *)&v124[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Existing table's schema does not have the same number of columns as the requested schema\", \"table\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
    char v13 = 0;
LABEL_43:
    sub_10003D328(*(sqlite3 **)(a1 + 8), v12);
    if ((v13 & 1) == 0) {
      goto LABEL_131;
    }
    int v36 = 0;
    uint64_t v117 = 0;
    v118 = 0;
    v119 = 0;
    uint64_t v37 = v112;
    do
    {
      if (LOBYTE(a3[6 * v37 + 5]))
      {
        __int16 v38 = &a3[6 * v37];
        if (v36 >= v119)
        {
          uint64_t v41 = (char *)v117;
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v36 - (unsigned char *)v117) >> 4);
          unint64_t v43 = v42 + 1;
          if (v42 + 1 > 0x555555555555555) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v119 - (unsigned char *)v117) >> 4) > v43) {
            unint64_t v43 = 0x5555555555555556 * ((v119 - (unsigned char *)v117) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v119 - (unsigned char *)v117) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v44 = 0x555555555555555;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44)
          {
            uint64_t v45 = (char *)sub_10014F86C((uint64_t)&v119, v44);
            uint64_t v41 = (char *)v117;
            int v36 = v118;
          }
          else
          {
            uint64_t v45 = 0;
          }
          uint64_t v46 = &v45[48 * v42];
          long long v47 = *(_OWORD *)v38;
          long long v48 = *((_OWORD *)v38 + 2);
          *((_OWORD *)v46 + 1) = *((_OWORD *)v38 + 1);
          *((_OWORD *)v46 + 2) = v48;
          *(_OWORD *)uint64_t v46 = v47;
          if (v36 == v41)
          {
            uint64_t v50 = &v45[48 * v42];
            a3 = v111;
          }
          else
          {
            long long v49 = &v45[48 * v42];
            a3 = v111;
            do
            {
              uint64_t v50 = v49 - 48;
              long long v51 = *((_OWORD *)v36 - 3);
              long long v52 = *((_OWORD *)v36 - 1);
              *((_OWORD *)v49 - 2) = *((_OWORD *)v36 - 2);
              *((_OWORD *)v49 - 1) = v52;
              *((_OWORD *)v49 - 3) = v51;
              v36 -= 48;
              v49 -= 48;
            }
            while (v36 != v41);
          }
          int v36 = v46 + 48;
          uint64_t v117 = v50;
          v118 = v46 + 48;
          v119 = &v45[48 * v44];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          long long v39 = *(_OWORD *)v38;
          long long v40 = *((_OWORD *)v38 + 2);
          *((_OWORD *)v36 + 1) = *((_OWORD *)v38 + 1);
          *((_OWORD *)v36 + 2) = v40;
          *(_OWORD *)int v36 = v39;
          v36 += 48;
          a3 = v111;
        }
        v118 = v36;
      }
    }
    while (v37-- > 0);
    std::string __p = 0;
    *(void *)v124 = 0;
    *(void *)&v124[8] = 0;
    std::string::operator=(&v141, (const std::string *)&__p);
    sub_100450DEC((uint64_t)&v140[14]);
    if ((v124[15] & 0x80000000) != 0) {
      operator delete(__p);
    }
    long long v54 = sub_100132EFC(&v140[6], (uint64_t)"PRAGMA foreign_key_list(", 24);
    size_t v55 = strlen(a2);
    char v56 = sub_100132EFC(v54, (uint64_t)a2, v55);
    sub_100132EFC(v56, (uint64_t)")", 1);
    std::stringbuf::str();
    if (v124[15] >= 0) {
      __int16 v57 = &__p;
    }
    else {
      __int16 v57 = __p;
    }
    int v58 = (sqlite3_stmt *)sub_10014D630(a1, v57);
    if ((v124[15] & 0x80000000) != 0) {
      operator delete(__p);
    }
    int v59 = sqlite3_step(v58);
    int v60 = (char *)v117;
    __int16 v61 = v118;
    if (v118 == v117 && v59 == 100)
    {
      char v62 = 0;
      int v63 = 0;
      int v60 = v118;
      goto LABEL_121;
    }
    int v63 = 0;
    BOOL v64 = v118 == v117 || v59 == 100;
    char v65 = !v64;
    char v62 = v65 ^ 1;
    if (!v64 || v59 != 100)
    {
LABEL_121:
      if (0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 4) > v63 || v59 == 100)
      {
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
        long long v99 = off_1024195E8;
        char v62 = 0;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
        {
          std::string __p = (void *)68289026;
          *(_WORD *)v124 = 2082;
          *(void *)&v124[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Actual table has more foreign key contraints than expected\"}", (uint8_t *)&__p, 0x12u);
          char v62 = 0;
        }
      }
      sub_10003D328(*(sqlite3 **)(a1 + 8), v58);
      if (v117)
      {
        v118 = (char *)v117;
        operator delete(v117);
      }
      if (v62)
      {
        uint64_t v34 = 0;
LABEL_138:
        if ((v103 & 1) == 0) {
          sub_1005FB250(a1, a2);
        }
        if (v104) {
          sub_1005FC8D8(a1, a2, v104);
        }
        *(void *)&v140[6] = v101;
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        goto LABEL_145;
      }
LABEL_131:
      if (v112)
      {
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
        uint64_t v100 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
        {
          std::string __p = (void *)68289283;
          *(_WORD *)v124 = 2082;
          *(void *)&v124[2] = "";
          *(_WORD *)&v124[10] = 2081;
          *(void *)&v124[12] = a2;
          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Table exists but does not have matching schema\", \"table\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        }
        sub_1005FDAE0(a1, a2);
      }
      sub_1005FE264(a1, a2, a3);
      uint64_t v34 = 1;
      goto LABEL_138;
    }
    uint64_t v66 = 0;
    uint64_t v67 = 1;
    char v62 = 1;
    while (1)
    {
      char v68 = *(const char **)&v60[v66];
      uint64_t v69 = sqlite3_column_text(v58, 3);
      if (strcmp(v68, (const char *)v69)) {
        break;
      }
      int v70 = *(const char **)((char *)v117 + v66 + 16);
      __int16 v71 = sqlite3_column_text(v58, 2);
      if (strcmp(v70, (const char *)v71)) {
        break;
      }
      char v72 = *(const char **)((char *)v117 + v66 + 24);
      char v73 = sqlite3_column_text(v58, 4);
      if (strcmp(v72, (const char *)v73)) {
        break;
      }
      sub_100134750(&__p, (&off_1022BE500)[*(int *)((char *)v117 + v66 + 36)]);
      int v74 = v124[15];
      long long v75 = (void **)__p;
      long long v76 = sqlite3_column_text(v58, 5);
      if (v74 >= 0) {
        long long v77 = &__p;
      }
      else {
        long long v77 = v75;
      }
      if (!strcmp((const char *)v77, (const char *)v76))
      {
        sub_100134750(v115, (&off_1022BE500)[*(int *)((char *)v117 + v66 + 32)]);
        int v79 = v116;
        unint64_t v80 = (void **)v115[0];
        long long v81 = sqlite3_column_text(v58, 6);
        if (v79 >= 0) {
          long long v82 = v115;
        }
        else {
          long long v82 = v80;
        }
        BOOL v78 = strcmp((const char *)v82, (const char *)v81) != 0;
        if (v116 < 0) {
          operator delete(v115[0]);
        }
      }
      else
      {
        BOOL v78 = 1;
      }
      if ((v124[15] & 0x80000000) != 0)
      {
        operator delete(__p);
        if (v78) {
          break;
        }
      }
      else if (v78)
      {
        break;
      }
LABEL_118:
      int v59 = sqlite3_step(v58);
      int v60 = (char *)v117;
      __int16 v61 = v118;
      int v98 = v67 + 1;
      if (v67 != 0xAAAAAAAAAAAAAAABLL * ((v118 - (unsigned char *)v117) >> 4))
      {
        v66 += 48;
        ++v67;
        if (v59 == 100) {
          continue;
        }
      }
      int v63 = v98 - 1;
      goto LABEL_121;
    }
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    long long v83 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v84 = *(void *)((char *)v117 + v66);
      uint64_t v86 = *(void *)((char *)v117 + v66 + 16);
      uint64_t v85 = *(void *)((char *)v117 + v66 + 24);
      int v87 = sqlite3_column_text(v58, 3);
      uint64_t v88 = sqlite3_column_text(v58, 2);
      char v89 = sqlite3_column_text(v58, 4);
      uint64_t v107 = v67;
      sub_100134750(v115, (&off_1022BE500)[*(int *)((char *)v117 + v66 + 32)]);
      long long v106 = v89;
      uint64_t v109 = v66;
      if (v116 >= 0) {
        unint64_t v90 = v115;
      }
      else {
        unint64_t v90 = (void **)v115[0];
      }
      uint64_t v91 = v58;
      uint64_t v92 = sqlite3_column_text(v58, 6);
      uint64_t v93 = v85;
      long long v105 = v83;
      sub_100134750(v113, (&off_1022BE500)[*(int *)((char *)v117 + v109 + 36)]);
      int v94 = v114;
      uint64_t v95 = (void **)v113[0];
      long long v96 = sqlite3_column_text(v91, 5);
      LODWORD(__p) = 68291843;
      uint64_t v97 = v113;
      if (v94 < 0) {
        uint64_t v97 = v95;
      }
      HIDWORD(__p) = 0;
      *(_WORD *)v124 = 2082;
      *(void *)&v124[2] = "";
      *(_WORD *)&v124[10] = 2081;
      *(void *)&v124[12] = a2;
      __int16 v125 = 2082;
      *(void *)v126 = v84;
      *(_WORD *)&v126[8] = 2082;
      *(void *)&v126[10] = v86;
      *(_WORD *)&v126[18] = 2082;
      *(void *)&v126[20] = v93;
      *(_WORD *)&v126[28] = 2082;
      *(void *)v127 = v87;
      *(_WORD *)&v127[8] = 2082;
      *(void *)v128 = v88;
      *(_WORD *)&v128[8] = 2082;
      v129 = v106;
      __int16 v130 = 2082;
      v131 = v90;
      __int16 v132 = 2082;
      v133 = v92;
      __int16 v134 = 2082;
      v135 = v97;
      __int16 v136 = 2082;
      v137 = v96;
      _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#warning Existing table's foreign key constraint does not match expected\", \"table\":%{private, location:escape_only}s, \"ExpectedFromCol\":%{public, location:escape_only}s, \"ExpectedToTable\":%{public, location:escape_only}s, \"ExpectedToCol\":%{public, location:escape_only}s, \"ActualFromCol\":%{public, location:escape_only}s, \"ActualToTable\":%{public, location:escape_only}s, \"ActualToCol\":%{public, location:escape_only}s, \"ExpectedOnDelete\":%{public, location:escape_only}s, \"ActualOnDelete\":%{public, location:escape_only}s, \"ExpectedOnUpdate\":%{public, location:escape_only}s, \"ActualOnUpdate\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x80u);
      if (v114 < 0) {
        operator delete(v113[0]);
      }
      a3 = v111;
      int v58 = v91;
      uint64_t v66 = v109;
      if (v116 < 0) {
        operator delete(v115[0]);
      }
      char v62 = 0;
      uint64_t v67 = v107;
    }
    else
    {
      char v62 = 0;
    }
    goto LABEL_118;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v32 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v139 = 2082;
    *(void *)v140 = "";
    *(_WORD *)&v140[8] = 2081;
    *(void *)&v140[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Need at least one column in table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  __int16 v33 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v139 = 2082;
    *(void *)v140 = "";
    *(_WORD *)&v140[8] = 2081;
    *(void *)&v140[10] = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Need at least one column in table", "{\"msg%{public}.0s\":\"Need at least one column in table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v34 = 0;
LABEL_145:
  if ((_BYTE)v122) {
    pthread_mutex_unlock(v121);
  }
  else {
    (*(void (**)(uint64_t))(*(void *)v120 + 24))(v120);
  }
  return v34;
}

void sub_1005F67A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a36) {
    operator delete(a36);
  }
  sub_101A129A8((uint64_t)&a61);
  sub_1019DB560((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_1005F689C(uint64_t a1)
{
  uint64_t v41 = "id";
  int v42 = 1;
  __int16 v43 = 1;
  char v44 = 0;
  char v45 = 0;
  uint64_t v46 = "uuid";
  int v47 = 3;
  __int16 v48 = 0;
  char v49 = 0;
  char v50 = 0;
  uint64_t v51 = 0;
  int v52 = 5;
  __int16 v53 = 0;
  char v54 = 0;
  char v55 = 0;
  v40[0] = "uuid";
  v40[1] = 0;
  sub_1005F7B0C(a1, "DatabaseIdentifier", &v41, v40, 0);
  memset(&v31, 0, sizeof(v31));
  double v2 = (sqlite3_stmt *)sub_10014D630(a1, "SELECT * FROM DatabaseIdentifier;");
  double v3 = v2;
  if (v2)
  {
    if (sqlite3_step(v2) == 100)
    {
      uint64_t v4 = sqlite3_column_text(v3, 1);
      std::string::assign(&v31, (const std::string::value_type *)v4);
      id v5 = objc_alloc((Class)NSString);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v31;
      }
      else {
        uint64_t v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      *(void *)(a1 + 128) = [v5 initWithUTF8String:v6];
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      BOOL v7 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 119) < 0)
        {
          sub_1000DC48C(__p, *(void **)(a1 + 96), *(void *)(a1 + 104));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 96);
          *(void *)&__p[16] = *(void *)(a1 + 112);
        }
        size_t v9 = __p;
        if (__p[23] < 0) {
          size_t v9 = *(unsigned char **)__p;
        }
        uint64_t v10 = &v31;
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v10 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v36 = 2082;
        *(void *)uint64_t v37 = "";
        *(_WORD *)&v37[8] = 2082;
        *(void *)&v37[10] = v9;
        *(_WORD *)&v37[18] = 2081;
        *(void *)&v37[20] = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"initUUID\", \"path\":%{public, location:escape_only}s, \"uuid\":%{private, location:escape_only}s}", buf, 0x26u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    sub_10003D328(*(sqlite3 **)(a1 + 8), v3);
    if (!*(void *)(a1 + 128))
    {
      uint64_t v11 = +[NSUUID UUID];
      std::string::assign(&v31, [(NSString *)[(NSUUID *)v11 UUIDString] UTF8String]);
      sub_10010F274((uint64_t)buf);
      int v12 = sub_100132EFC(&v37[6], (uint64_t)"INSERT INTO DatabaseIdentifier (uuid) VALUES (\"", 47);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v13 = &v31;
      }
      else {
        char v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      size_t v14 = strlen((const char *)v13);
      __int16 v15 = sub_100132EFC(v12, (uint64_t)v13, v14);
      sub_100132EFC(v15, (uint64_t)"\");", 3);
      std::stringbuf::str();
      if (__p[23] >= 0) {
        __int16 v16 = __p;
      }
      else {
        __int16 v16 = *(unsigned char **)__p;
      }
      uint64_t v17 = sub_10014D630(a1, v16);
      __int16 v18 = (sqlite3_stmt *)v17;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (v18)
        {
LABEL_31:
          if (sqlite3_step(v18) == 101)
          {
            *(void *)(a1 + 128) = [(NSUUID *)v11 UUIDString];
            if (qword_1024195E0 != -1) {
              dispatch_once(&qword_1024195E0, &stru_1022BE480);
            }
            uint64_t v19 = off_1024195E8;
            if (!os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_59;
            }
            if (*(char *)(a1 + 119) < 0)
            {
              sub_1000DC48C(v29, *(void **)(a1 + 96), *(void *)(a1 + 104));
            }
            else
            {
              *(_OWORD *)__int16 v29 = *(_OWORD *)(a1 + 96);
              uint64_t v30 = *(void *)(a1 + 112);
            }
            uint64_t v26 = v29;
            if (v30 < 0) {
              uint64_t v26 = (void **)v29[0];
            }
            int v27 = &v31;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            *(void *)std::string __p = 68289539;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(void *)&__p[20] = v26;
            __int16 v33 = 2081;
            uint64_t v34 = v27;
            int v23 = "{\"msg%{public}.0s\":\"UUID initialized\", \"path\":%{public, location:escape_only}s, \"uuid\":%{priva"
                  "te, location:escape_only}s}";
            int v24 = v19;
            uint32_t v25 = 38;
          }
          else
          {
            if (qword_1024195E0 != -1) {
              dispatch_once(&qword_1024195E0, &stru_1022BE480);
            }
            uint64_t v21 = off_1024195E8;
            if (!os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_59;
            }
            if (*(char *)(a1 + 119) < 0)
            {
              sub_1000DC48C(v29, *(void **)(a1 + 96), *(void *)(a1 + 104));
            }
            else
            {
              *(_OWORD *)__int16 v29 = *(_OWORD *)(a1 + 96);
              uint64_t v30 = *(void *)(a1 + 112);
            }
            uint64_t v22 = v29;
            if (v30 < 0) {
              uint64_t v22 = (void **)v29[0];
            }
            *(void *)std::string __p = 68289282;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(void *)&__p[20] = v22;
            int v23 = "{\"msg%{public}.0s\":\"Failed to initialize DB UUID\", \"path\":%{public, location:escape_only}s}";
            int v24 = v21;
            uint32_t v25 = 28;
          }
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, __p, v25);
          if (SHIBYTE(v30) < 0) {
            operator delete(v29[0]);
          }
LABEL_59:
          sub_10003D328(*(sqlite3 **)(a1 + 8), v18);
LABEL_60:
          *(void *)&v37[6] = v28;
          if (v39 < 0) {
            operator delete(v38);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
          goto LABEL_63;
        }
      }
      else if (v17)
      {
        goto LABEL_31;
      }
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      uint64_t v20 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)std::string __p = 68289026;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Failed to create UUID insert statement\"}", __p, 0x12u);
      }
      goto LABEL_60;
    }
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v8 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v36 = 2082;
      *(void *)uint64_t v37 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Failed to create UUID select statement\"}", buf, 0x12u);
    }
  }
LABEL_63:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_1005F6FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1005F705C(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v14 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v15 = 256;
  sub_100134750(&v13, "pragma foreign_keys = ");
  if (a2) {
    id v5 = "1";
  }
  else {
    id v5 = "0";
  }
  sub_100134750(__p, v5);
  if ((v12 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(&v13, (const std::string::value_type *)v6, v7);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v13;
  }
  else {
    uint64_t v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  int v9 = sqlite3_exec(*(sqlite3 **)(a1 + 8), (const char *)v8, 0, 0, 0);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v9 == 0;
}

void sub_1005F719C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F71E4(uint64_t a1, uint64_t a2)
{
  sub_10014DB24(*(void *)(a2 + 16));
  for (uint64_t i = *(void *)(a2 + 32); i != a2 + 24; uint64_t i = *(void *)(i + 8))
    sub_1005F4610(a2, *(sqlite3_stmt **)(i + 16), 0);
  uint64_t v4 = *(void *)(a2 + 16);

  return sub_10014D468(v4);
}

void sub_1005F7250(gid_t *a1@<X0>, std::string *a2@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  memset(&v40, 0, sizeof(v40));
  memset(&v39, 0, sizeof(v39));
  uint64_t v4 = (int)*a1;
  if (v4 >= 4)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    id v5 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      gid_t v6 = *a1;
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 1026;
      buf.st_gid = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"unknown protection type\", \"protection\":%{public}d}", (uint8_t *)&buf, 0x18u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    std::string::size_type v7 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      gid_t v8 = *a1;
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 1026;
      buf.st_gid = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unknown protection type", "{\"msg%{public}.0s\":\"unknown protection type\", \"protection\":%{public}d}", (uint8_t *)&buf, 0x18u);
    }
  }
  else
  {
    std::string::assign(&v40, *((const std::string::value_type **)&off_1022BE4E0 + v4));
  }
  if (*((unsigned char *)a1 + 8))
  {
    sub_10053BE74((std::string *)&buf);
  }
  else
  {
    int v9 = (char *)sub_1000A6958();
    sub_1000A5670(v9, (uint64_t)&buf);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)&buf.st_dev;
  uint64_t v42 = *(void *)&buf.st_uid;
  if (a1[1] == 7)
  {
    sub_10053B70C(2, (std::string *)&buf);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)&buf.st_dev;
    uint64_t v42 = *(void *)&buf.st_uid;
  }
  if (v42 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  uid_t v11 = getuid();
  gid_t v12 = getgid();
  if (!sub_1004BB250(v10, v11, v12))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    std::string v13 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v14 = __p;
      if (v42 < 0) {
        uint64_t v14 = (void **)__p[0];
      }
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 2082;
      *(void *)&buf.st_gid = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    __int16 v15 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      __int16 v16 = __p;
      if (v42 < 0) {
        __int16 v16 = (void **)__p[0];
      }
      buf.st_dev = 68289282;
      *(_DWORD *)&buf.st_mode = 0;
      LOWORD(buf.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
      HIWORD(buf.st_uid) = 2082;
      *(void *)&buf.st_gid = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not create path", "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  uint64_t v17 = "file::memory:?cache=shared";
  __int16 v18 = &v39;
  switch(a1[1])
  {
    case 0u:
      goto LABEL_67;
    case 1u:
      if (*((unsigned char *)a1 + 8))
      {
        std::string::assign(&v39, "factory");
        sub_1002F0A00((const void **)__p, (const void **)&v39.__r_.__value_.__l.__data_, (uint64_t)&buf);
        sub_100134750(&v35, ".db");
        if ((v37 & 0x80u) == 0) {
          uint64_t v19 = (const std::string::value_type *)&v35;
        }
        else {
          uint64_t v19 = (const std::string::value_type *)v35;
        }
        if ((v37 & 0x80u) == 0) {
          std::string::size_type v20 = v37;
        }
        else {
          std::string::size_type v20 = v36;
        }
        uint64_t v21 = std::string::append((std::string *)&buf, v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((char)v37 < 0) {
          operator delete(v35);
        }
        if (SHIBYTE(buf.st_gid) < 0) {
          operator delete(*(void **)&buf.st_dev);
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v23 = &v38;
        }
        else {
          int v23 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        if (lstat((const char *)v23, &buf)) {
          std::string::assign(&v39, "factory_minimum");
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::assign(&v39, "cache");
      }
      if (*((unsigned char *)a1 + 8) || *a1) {
        break;
      }
      uint64_t v17 = "_unencrypted";
      __int16 v18 = &v40;
      goto LABEL_67;
    case 2u:
      uint64_t v17 = "consolidated";
      goto LABEL_66;
    case 3u:
      uint64_t v17 = "lockCache";
      goto LABEL_66;
    case 4u:
      uint64_t v17 = "gyroCal";
      goto LABEL_66;
    case 5u:
      uint64_t v17 = "timezone";
      goto LABEL_66;
    case 6u:
      uint64_t v17 = "sensorRecorder";
      goto LABEL_66;
    case 7u:
      uint64_t v17 = "cold";
LABEL_66:
      __int16 v18 = &v39;
LABEL_67:
      std::string::assign(v18, v17);
      break;
    default:
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      int v24 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        gid_t v25 = a1[1];
        buf.st_dev = 68289282;
        *(_DWORD *)&buf.st_mode = 0;
        LOWORD(buf.st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf.st_uid) = 1026;
        buf.st_gid = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"unknown persistence type\", \"persistence\":%{public}d}", (uint8_t *)&buf, 0x18u);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
      }
      uint64_t v26 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        gid_t v27 = a1[1];
        buf.st_dev = 68289282;
        *(_DWORD *)&buf.st_mode = 0;
        LOWORD(buf.st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf.st_uid) = 1026;
        buf.st_gid = v27;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unknown persistence type", "{\"msg%{public}.0s\":\"unknown persistence type\", \"persistence\":%{public}d}", (uint8_t *)&buf, 0x18u);
      }
      break;
  }
  if (a1[1])
  {
    sub_1002F0A00((const void **)__p, (const void **)&v39.__r_.__value_.__l.__data_, (uint64_t)&v38);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v40;
    }
    else {
      uint64_t v28 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v30 = std::string::append(&v38, (const std::string::value_type *)v28, size);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    *(void *)&buf.st_uid = *((void *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)&buf.st_dev = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    sub_100134750(&v35, ".db");
    if ((v37 & 0x80u) == 0) {
      uint64_t v32 = (const std::string::value_type *)&v35;
    }
    else {
      uint64_t v32 = (const std::string::value_type *)v35;
    }
    if ((v37 & 0x80u) == 0) {
      std::string::size_type v33 = v37;
    }
    else {
      std::string::size_type v33 = v36;
    }
    uint64_t v34 = std::string::append((std::string *)&buf, v32, v33);
    *a2 = *v34;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((char)v37 < 0) {
      operator delete(v35);
    }
    if (SHIBYTE(buf.st_gid) < 0) {
      operator delete(*(void **)&buf.st_dev);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = v39;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005F7A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005F7AF4(uint64_t a1, int a2)
{
}

uint64_t sub_1005F7B0C(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4, int a5)
{
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v10 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289539;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2081;
    __int16 v16 = a2;
    __int16 v17 = 1026;
    int v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"createTableIfNecessary\", \"table\":%{private, location:escape_only}s, \"specificToSerialNumber\":%{public}hhd}", (uint8_t *)v12, 0x22u);
  }
  return sub_1005FBF80(a1, a2, a3, a4, a5);
}

char *sub_1005F7C38@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[119] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 12), *((void *)result + 13));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 6);
  *(void *)(a2 + 16) = *((void *)result + 14);
  return result;
}

BOOL sub_1005F7C64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v23 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v24 = 256;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v21 = v5;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  __int16 v22 = 256;
  if (*(char *)(a2 + 119) < 0)
  {
    sub_1000DC48C(__dst, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a2 + 96);
    uint64_t v20 = *(void *)(a2 + 112);
  }
  std::operator+<char>();
  gid_t v6 = std::string::append(&v25, "' AS OTHER;");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v18 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v18 >= 0) {
    gid_t v8 = __p;
  }
  else {
    gid_t v8 = (void **)__p[0];
  }
  int v9 = (sqlite3_stmt *)sub_10014D630(a1, v8);
  uint64_t v10 = v9;
  if (v9)
  {
    int v11 = sqlite3_step(v9);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    gid_t v12 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      v25.__r_.__value_.__r.__words[0] = 68289282;
      LOWORD(v25.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(v25.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v25.__r_.__value_.__r.__words[2]) = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"attachToDatabaseAsOther\", \"ret\":%{public}d}", (uint8_t *)&v25, 0x18u);
    }
    sub_10003D328(*(sqlite3 **)(a1 + 8), v10);
    BOOL v13 = v11 == 101;
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v14 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_ERROR))
    {
      v25.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(v25.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create ATTACH statement\"}", (uint8_t *)&v25, 0x12u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    __int16 v15 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      v25.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(v25.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create ATTACH statement", "{\"msg%{public}.0s\":\"Failed to create ATTACH statement\"}", (uint8_t *)&v25, 0x12u);
    }
    BOOL v13 = 0;
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v13;
}

void sub_1005F801C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
}

BOOL sub_1005F809C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v14 = v2;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  __int16 v15 = 256;
  sub_100134750(__p, "DETACH DATABASE 'OTHER';");
  if (v13 >= 0) {
    double v3 = __p;
  }
  else {
    double v3 = (void **)__p[0];
  }
  uint64_t v4 = (sqlite3_stmt *)sub_10014D630(a1, v3);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = sqlite3_step(v4);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    long long v7 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 1026;
      int v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"detachFromOther\", \"ret\":%{public}d}", buf, 0x18u);
    }
    sub_10003D328(*(sqlite3 **)(a1 + 8), v5);
    BOOL v8 = v6 == 101;
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v9 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create DETACH statement\"}", buf, 0x12u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v10 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)stat buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create DETACH statement", "{\"msg%{public}.0s\":\"Failed to create DETACH statement\"}", buf, 0x12u);
    }
    BOOL v8 = 0;
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v8;
}

void sub_1005F837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1005F83BC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, char *a5, double a6)
{
  uint64_t v119 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v119 + 16))(v119);
  __int16 v121 = 256;
  uint64_t v116 = *(void *)(a2 + 16);
  (*(void (**)(uint64_t))(*(void *)v116 + 16))(v116);
  __int16 v118 = 256;
  uint64_t v114 = a1;
  uint64_t v115 = a2;
  BOOL v10 = sub_1005F7C64(a1, a2);
  v113[0] = v10;
  if (!v10) {
    goto LABEL_155;
  }
  uint64_t v11 = a4[1];
  uint64_t v12 = *a3;
  if (*a4 == v11)
  {
    uint64_t v13 = a3[1];
  }
  else
  {
    uint64_t v13 = a3[1];
    if (v11 - *a4 != v13 - v12)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      uint64_t v14 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3);
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
        *(_DWORD *)stat buf = 134349312;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid input parameters, number of columnList (%{public}zu) and tableNames (%{public}zu) differ.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3);
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
        LODWORD(__p[0]) = 134349312;
        *(void **)((char *)__p + 4) = (void *)v17;
        WORD2(__p[1]) = 2050;
        *(void **)((char *)&__p[1] + 6) = (void *)v18;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSqliteDatabase::copyTablesFromOtherDatabase(CLSqliteDatabase &, const std::vector<std::string> &, const std::vector<std::string> &, const char *, CFAbsoluteTime)", "%s\n", v19);
        if (v19 != buf) {
          free(v19);
        }
      }
      goto LABEL_155;
    }
  }
  if (v12 == v13)
  {
LABEL_155:
    sub_10020D798((uint64_t)v113);
    BOOL v101 = 1;
LABEL_156:
    if ((_BYTE)v118) {
      pthread_mutex_unlock(v117);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v116 + 24))(v116);
    }
    goto LABEL_159;
  }
  uint64_t v103 = v13;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  LOBYTE(v22) = 1;
  do
  {
    uint64_t v23 = (const char *)(v12 + v20);
    __int16 v24 = (const char *)(v12 + v20);
    if (*(char *)(v12 + v20 + 23) < 0) {
      __int16 v24 = *(const char **)v23;
    }
    BOOL v25 = sub_1005FE7D4(a1, v24);
    uint64_t v26 = (const char *)(v12 + v20);
    if (v23[23] < 0) {
      uint64_t v26 = *(const char **)v23;
    }
    BOOL v27 = sub_1005FE7D4(a2, v26);
    if (v25 && v27)
    {
      memset(__p, 0, 24);
      if (a5)
      {
        if (*a4 == a4[1])
        {
          std::operator+<char>();
          int v74 = std::string::append(&v110, " SELECT * FROM OTHER.");
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          int v76 = v23[23];
          if (v76 >= 0) {
            long long v77 = (const std::string::value_type *)(v12 + v20);
          }
          else {
            long long v77 = *(const std::string::value_type **)(v12 + v20);
          }
          if (v76 >= 0) {
            std::string::size_type v78 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            std::string::size_type v78 = *(void *)(v12 + v20 + 8);
          }
          int v79 = std::string::append(&v124, v77, v78);
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v111.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          long long v81 = std::string::append(&v111, " WHERE ");
          long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v112.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          sub_100134750(&v109, a5);
          if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v83 = &v109;
          }
          else {
            long long v83 = (std::string *)v109.__r_.__value_.__r.__words[0];
          }
          if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v109.__r_.__value_.__l.__size_;
          }
          uint64_t v85 = std::string::append(&v112, (const std::string::value_type *)v83, size);
          long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v85->__r_.__value_.__l + 2);
          *(_OWORD *)stat buf = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          int v87 = std::string::append((std::string *)buf, " > ?;");
          uint64_t v88 = (void *)v87->__r_.__value_.__r.__words[0];
          v122.__r_.__value_.__r.__words[0] = v87->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v122.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
          char v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          __p[0] = v88;
          __p[1] = v122.__r_.__value_.__l.__data_;
          *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v122.__r_.__value_.__r.__words + 7);
          HIBYTE(__p[2]) = v89;
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v112.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v111.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_124;
          }
          int v60 = (void *)v110.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::operator+<char>();
          uint64_t v28 = std::string::append(&v107, " (");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v108.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v21) {
            sub_100273D6C();
          }
          uint64_t v30 = *a4 + v20;
          int v31 = *(char *)(v30 + 23);
          if (v31 >= 0) {
            uint64_t v32 = (const std::string::value_type *)(*a4 + v20);
          }
          else {
            uint64_t v32 = *(const std::string::value_type **)v30;
          }
          if (v31 >= 0) {
            std::string::size_type v33 = *(unsigned __int8 *)(v30 + 23);
          }
          else {
            std::string::size_type v33 = *(void *)(v30 + 8);
          }
          uint64_t v34 = std::string::append(&v108, v32, v33);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v122.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v36 = std::string::append(&v122, ") SELECT ");
          long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v109.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v21) {
            sub_100273D6C();
          }
          uint64_t v38 = *a4 + v20;
          int v39 = *(char *)(v38 + 23);
          if (v39 >= 0) {
            std::string v40 = (const std::string::value_type *)(*a4 + v20);
          }
          else {
            std::string v40 = *(const std::string::value_type **)v38;
          }
          if (v39 >= 0) {
            std::string::size_type v41 = *(unsigned __int8 *)(v38 + 23);
          }
          else {
            std::string::size_type v41 = *(void *)(v38 + 8);
          }
          uint64_t v42 = std::string::append(&v109, v40, v41);
          long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v110.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          char v44 = std::string::append(&v110, " FROM OTHER.");
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          int v46 = v23[23];
          if (v46 >= 0) {
            int v47 = (const std::string::value_type *)(v12 + v20);
          }
          else {
            int v47 = *(const std::string::value_type **)(v12 + v20);
          }
          if (v46 >= 0) {
            std::string::size_type v48 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            std::string::size_type v48 = *(void *)(v12 + v20 + 8);
          }
          char v49 = std::string::append(&v124, v47, v48);
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v111.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          uint64_t v51 = std::string::append(&v111, " WHERE ");
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v112.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          sub_100134750(v105, a5);
          if ((v106 & 0x80u) == 0) {
            __int16 v53 = v105;
          }
          else {
            __int16 v53 = (void **)v105[0];
          }
          if ((v106 & 0x80u) == 0) {
            std::string::size_type v54 = v106;
          }
          else {
            std::string::size_type v54 = (std::string::size_type)v105[1];
          }
          char v55 = std::string::append(&v112, (const std::string::value_type *)v53, v54);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v55->__r_.__value_.__l + 2);
          *(_OWORD *)stat buf = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          __int16 v57 = std::string::append((std::string *)buf, " > ?;");
          int v58 = (void *)v57->__r_.__value_.__r.__words[0];
          v123[0] = v57->__r_.__value_.__l.__size_;
          *(void *)((char *)v123 + 7) = *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7);
          char v59 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          __p[0] = v58;
          __p[1] = (void *)v123[0];
          *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v123 + 7);
          HIBYTE(__p[2]) = v59;
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if ((char)v106 < 0) {
            operator delete(v105[0]);
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v112.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v111.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v122.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v108.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_124;
          }
          int v60 = (void *)v107.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        std::operator+<char>();
        BOOL v64 = std::string::append(&v111, " SELECT * FROM OTHER.");
        long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        int v66 = v23[23];
        if (v66 >= 0) {
          uint64_t v67 = (const std::string::value_type *)(v12 + v20);
        }
        else {
          uint64_t v67 = *(const std::string::value_type **)(v12 + v20);
        }
        if (v66 >= 0) {
          std::string::size_type v68 = *((unsigned __int8 *)v23 + 23);
        }
        else {
          std::string::size_type v68 = *(void *)(v12 + v20 + 8);
        }
        uint64_t v69 = std::string::append(&v112, v67, v68);
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        *(void *)&uint8_t buf[16] = *((void *)&v69->__r_.__value_.__l + 2);
        *(_OWORD *)stat buf = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        __int16 v71 = std::string::append((std::string *)buf, ";");
        char v72 = (void *)v71->__r_.__value_.__r.__words[0];
        v124.__r_.__value_.__r.__words[0] = v71->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v71->__r_.__value_.__r.__words[1] + 7);
        char v73 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        __p[0] = v72;
        __p[1] = v124.__r_.__value_.__l.__data_;
        *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v124.__r_.__value_.__r.__words + 7);
        HIBYTE(__p[2]) = v73;
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_124;
        }
        int v60 = (void *)v111.__r_.__value_.__r.__words[0];
      }
      operator delete(v60);
LABEL_124:
      if (SHIBYTE(__p[2]) >= 0) {
        unint64_t v90 = __p;
      }
      else {
        unint64_t v90 = (void **)__p[0];
      }
      uint64_t v91 = (sqlite3_stmt *)sub_10014D630(a1, v90);
      uint64_t v92 = v91;
      if (v91)
      {
        if (a5) {
          sub_100055D58(v91, 1, a6);
        }
        int v93 = sqlite3_step(v92);
        int v94 = v93;
        if ((_BYTE)v22) {
          BOOL v95 = v93 == 101;
        }
        else {
          BOOL v95 = 0;
        }
        int v22 = v95;
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
        long long v96 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
        {
          if (v23[23] < 0) {
            uint64_t v23 = *(const char **)v23;
          }
          *(_DWORD *)stat buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v23;
          __int16 v127 = 1026;
          BOOL v128 = v94;
          _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"copyTablesFromOtherDatabase, insert\", \"tableName\":%{public, location:escape_only}s, \"ret\":%{public}d}", buf, 0x22u);
        }
        sub_10003D328(*(sqlite3 **)(a1 + 8), v92);
      }
      else
      {
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
        uint64_t v97 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to create INSERT statement\"}", buf, 0x12u);
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022BE480);
          }
        }
        int v98 = off_1024195E8;
        if (os_signpost_enabled((os_log_t)off_1024195E8))
        {
          *(_DWORD *)stat buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v98, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create INSERT statement", "{\"msg%{public}.0s\":\"Failed to create INSERT statement\"}", buf, 0x12u);
        }
        int v22 = 0;
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_153;
    }
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v61 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_ERROR))
    {
      char v62 = (const char *)(v12 + v20);
      if (v23[23] < 0) {
        char v62 = *(const char **)v23;
      }
      *(_DWORD *)stat buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v62;
      __int16 v127 = 1026;
      BOOL v128 = v25;
      __int16 v129 = 1026;
      BOOL v130 = v27;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInThisDB\":%{public}hhd, \"ExistsInOtherDB\":%{public}hhd}", buf, 0x28u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    int v63 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      if (v23[23] < 0) {
        uint64_t v23 = *(const char **)v23;
      }
      *(_DWORD *)stat buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v23;
      __int16 v127 = 1026;
      BOOL v128 = v25;
      __int16 v129 = 1026;
      BOOL v130 = v27;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "table is missing", "{\"msg%{public}.0s\":\"table is missing\", \"TableName\":%{public, location:escape_only}s, \"ExistsInThisDB\":%{public}hhd, \"ExistsInOtherDB\":%{public}hhd}", buf, 0x28u);
      int v22 = 0;
    }
    else
    {
      int v22 = 0;
    }
LABEL_153:
    ++v21;
    v20 += 24;
  }
  while (v12 + v20 != v103);
  int v100 = HIBYTE(v118);
  BOOL v101 = v22 != 0;
  sub_10020D798((uint64_t)v113);
  if (v100) {
    goto LABEL_156;
  }
LABEL_159:
  if (HIBYTE(v121))
  {
    if ((_BYTE)v121) {
      pthread_mutex_unlock(v120);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v119 + 24))(v119);
    }
  }
  return v101;
}

void sub_1005F91A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54)
{
}

uint64_t sub_1005F93E8(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

void sub_1005F93F0(uint64_t a1, uint64_t a2, int a3, sqlite3_stmt *a4)
{
  int v15 = a3;
  if (a3 <= 0x1Au && ((1 << a3) & 0x4004C00) != 0)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v6 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      int v7 = *__error();
      BOOL v8 = a4 ? sqlite3_sql(a4) : 0;
      *(_DWORD *)stat buf = 68290307;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = a2;
      __int16 v22 = 1026;
      int v23 = v7;
      __int16 v24 = 1040;
      int v25 = 4;
      __int16 v26 = 2098;
      BOOL v27 = &v15;
      __int16 v28 = 2081;
      long long v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"displaySqlResult\", \"function\":%{public, location:escape_only}s, \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v12 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      int v13 = *__error();
      if (a4) {
        uint64_t v14 = sqlite3_sql(a4);
      }
      else {
        uint64_t v14 = 0;
      }
      *(_DWORD *)stat buf = 68290307;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = a2;
      __int16 v22 = 1026;
      int v23 = v13;
      __int16 v24 = 1040;
      int v25 = 4;
      __int16 v26 = 2098;
      BOOL v27 = &v15;
      __int16 v28 = 2081;
      long long v29 = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "displaySqlResult", "{\"msg%{public}.0s\":\"displaySqlResult\", \"function\":%{public, location:escape_only}s, \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v9 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *__error();
      if (a4) {
        uint64_t v11 = sqlite3_sql(a4);
      }
      else {
        uint64_t v11 = 0;
      }
      *(_DWORD *)stat buf = 68290307;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = a2;
      __int16 v22 = 1026;
      int v23 = v10;
      __int16 v24 = 1040;
      int v25 = 4;
      __int16 v26 = 2098;
      BOOL v27 = &v15;
      __int16 v28 = 2081;
      long long v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning displaySqlResult\", \"function\":%{public, location:escape_only}s, \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
}

BOOL sub_1005F9734(uint64_t a1, char *a2)
{
  sub_1005F9828(a1, "table", a2, v13);
  uint64_t v2 = v14;
  int v3 = (char)v14;
  uint64_t v4 = (void *)v13[0];
  if ((v14 & 0x80u) == 0)
  {
    uint64_t v5 = v13;
  }
  else
  {
    uint64_t v2 = v13[1];
    uint64_t v5 = (void *)v13[0];
  }
  int v6 = (char *)v5 + v2;
  if (v2 >= 13)
  {
    int v7 = v5;
    do
    {
      BOOL v8 = memchr(v7, 65, v2 - 12);
      if (!v8) {
        break;
      }
      int v9 = (char *)v8;
      if (*v8 == 0x52434E494F545541 && *(void *)((char *)v8 + 5) == 0x544E454D4552434ELL) {
        goto LABEL_13;
      }
      int v7 = (char *)v8 + 1;
      uint64_t v2 = v6 - (v9 + 1);
    }
    while (v2 > 12);
  }
  int v9 = v6;
LABEL_13:
  if (v3 < 0) {
    operator delete(v4);
  }
  return v9 != v6 && v9 - (char *)v5 != -1;
}

uint64_t sub_1005F9828@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v27 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  __int16 v28 = 256;
  sub_10010F274((uint64_t)v24);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  int v9 = sub_100132EFC(v25, (uint64_t)"SELECT sql FROM ", 16);
  int v10 = sub_100132EFC(v9, (uint64_t)"sqlite_master", 13);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)" WHERE ", 7);
  uint64_t v12 = sub_100132EFC(v11, (uint64_t)"Type", 4);
  int v13 = sub_100132EFC(v12, (uint64_t)"=? AND ", 7);
  unsigned __int8 v14 = sub_100132EFC(v13, (uint64_t)"Name", 4);
  sub_100132EFC(v14, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v23 >= 0) {
    int v15 = __p;
  }
  else {
    int v15 = (void **)__p[0];
  }
  uint64_t v16 = sub_10014D630(a1, v15);
  int v17 = (sqlite3_stmt *)v16;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if (!v17) {
      goto LABEL_16;
    }
  }
  else if (!v16)
  {
    goto LABEL_16;
  }
  if (sub_100133F10(v17, 1, a2) && sub_100133F10(v17, 2, a3) && sqlite3_step(v17) == 100)
  {
    __int16 v18 = sqlite3_column_text(v17, 0);
    if (v18) {
      uint64_t v19 = (char *)v18;
    }
    else {
      uint64_t v19 = "";
    }
    sub_100134750(__p, v19);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    a4[2] = v23;
  }
  sub_10003D328(*(sqlite3 **)(a1 + 8), v17);
LABEL_16:
  *(void *)((char *)v24
  v25[0] = v20;
  if (v26 < 0) {
    operator delete((void *)v25[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
}

void sub_1005F9B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_101A129A8((uint64_t)&a16);
  sub_1019DB560(v16 - 104);
  _Unwind_Resume(a1);
}

void sub_1005F9B94(sqlite3 *a1, NSObject *a2, int a3, int a4)
{
  int v17 = a4;
  if (a4 == 26 || a4 == 11)
  {
    if (!a3)
    {
      if (qword_1024195E0 != -1) {
        goto LABEL_44;
      }
      while (1)
      {
        int v10 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v11 = SHIBYTE(a2[2].isa) >= 0 ? (const char *)a2 : (const char *)a2->isa;
          *(_DWORD *)stat buf = 68289794;
          int v19 = 0;
          __int16 v20 = 2082;
          uint64_t v21 = "";
          __int16 v22 = 2082;
          uint64_t v23 = v11;
          __int16 v24 = 1040;
          LODWORD(v25[0]) = 4;
          WORD2(v25[0]) = 2098;
          *(void *)((char *)v25 + 6) = &v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"database error; deleting and exiting\", \"path\":%{public, location:escape_only}s, \""
            "rc\":%{public, location:SqliteResult}.*P}",
            buf,
            0x2Cu);
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022BE480);
          }
        }
        uint64_t v12 = off_1024195E8;
        if (os_signpost_enabled((os_log_t)off_1024195E8))
        {
          if (SHIBYTE(a2[2].isa) >= 0) {
            isa = (const char *)a2;
          }
          else {
            isa = (const char *)a2->isa;
          }
          *(_DWORD *)stat buf = 68289794;
          int v19 = 0;
          __int16 v20 = 2082;
          uint64_t v21 = "";
          __int16 v22 = 2082;
          uint64_t v23 = isa;
          __int16 v24 = 1040;
          LODWORD(v25[0]) = 4;
          WORD2(v25[0]) = 2098;
          *(void *)((char *)v25 + 6) = &v17;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "database error; deleting and exiting",
            "{\"msg%{public}.0s\":\"database error; deleting and exiting\", \"path\":%{public, location:escape_only}s, \""
            "rc\":%{public, location:SqliteResult}.*P}",
            buf,
            0x2Cu);
        }
        sub_1005FA108(a1, (uint64_t)a2);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
        unsigned __int8 v14 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)stat buf = 68289539;
          int v19 = 0;
          __int16 v20 = 2082;
          uint64_t v21 = "";
          __int16 v22 = 2082;
          uint64_t v23 = "assert";
          __int16 v24 = 2081;
          v25[0] = "0";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022BE480);
          }
        }
        int v15 = off_1024195E8;
        if (os_signpost_enabled((os_log_t)off_1024195E8))
        {
          *(_DWORD *)stat buf = 68289539;
          int v19 = 0;
          __int16 v20 = 2082;
          uint64_t v21 = "";
          __int16 v22 = 2082;
          uint64_t v23 = "assert";
          __int16 v24 = 2081;
          v25[0] = "0";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Killing locationd to resolve corrupted database", "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022BE480);
          }
        }
        a2 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)stat buf = 68289539;
          int v19 = 0;
          __int16 v20 = 2082;
          uint64_t v21 = "";
          __int16 v22 = 2082;
          uint64_t v23 = "assert";
          __int16 v24 = 2081;
          v25[0] = "0";
          _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Killing locationd to resolve corrupted database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
        abort_report_np();
LABEL_44:
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v6 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      int v7 = SHIBYTE(a2[2].isa) >= 0 ? (const char *)a2 : (const char *)a2->isa;
      *(_DWORD *)stat buf = 68289794;
      int v19 = 0;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      __int16 v22 = 2082;
      uint64_t v23 = v7;
      __int16 v24 = 1040;
      LODWORD(v25[0]) = 4;
      WORD2(v25[0]) = 2098;
      *(void *)((char *)v25 + 6) = &v17;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"handleSqlError on read-only db\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v8 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      if (SHIBYTE(a2[2].isa) >= 0) {
        v9.isa = (Class)a2;
      }
      else {
        v9.isa = a2->isa;
      }
      *(_DWORD *)stat buf = 68289794;
      int v19 = 0;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      __int16 v22 = 2082;
      uint64_t v23 = (const char *)v9.isa;
      __int16 v24 = 1040;
      LODWORD(v25[0]) = 4;
      WORD2(v25[0]) = 2098;
      *(void *)((char *)v25 + 6) = &v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "handleSqlError on read-only db", "{\"msg%{public}.0s\":\"handleSqlError on read-only db\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x2Cu);
    }
  }
}

void sub_1005FA108(sqlite3 *a1, uint64_t a2)
{
  if (a1 && &_CPSqliteDatabaseDelete)
  {
    if (CPSqliteDatabaseDelete()) {
      return;
    }
  }
  else if (!a1)
  {
    goto LABEL_13;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v4 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)stat buf = 68289026;
    int v74 = 0;
    __int16 v75 = 2082;
    int v76 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not delete the database with CPSqliteDatabaseDelete()\"}", buf, 0x12u);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  uint64_t v5 = off_1024195E8;
  if (!os_signpost_enabled((os_log_t)off_1024195E8)) {
    goto LABEL_15;
  }
  *(_DWORD *)stat buf = 68289026;
  int v74 = 0;
  __int16 v75 = 2082;
  int v76 = "";
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not delete the database with CPSqliteDatabaseDelete()", "{\"msg%{public}.0s\":\"Could not delete the database with CPSqliteDatabaseDelete()\"}", buf, 0x12u);
LABEL_13:
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
LABEL_15:
  int v6 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    int v7 = *(char *)(a2 + 23) >= 0 ? (void **)a2 : *(void ***)a2;
    *(_DWORD *)stat buf = 68289282;
    int v74 = 0;
    __int16 v75 = 2082;
    int v76 = "";
    __int16 v77 = 2082;
    std::string::size_type v78 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Falling back to file deletion\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  uint64_t v8 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    if (*(char *)(a2 + 23) >= 0) {
      NSObject v9 = (void **)a2;
    }
    else {
      NSObject v9 = *(void ***)a2;
    }
    *(_DWORD *)stat buf = 68289282;
    int v74 = 0;
    __int16 v75 = 2082;
    int v76 = "";
    __int16 v77 = 2082;
    std::string::size_type v78 = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Falling back to file deletion", "{\"msg%{public}.0s\":\"Falling back to file deletion\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sqlite3_close(a1);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v11 = (const std::__fs::filesystem::path *)a2;
  }
  else {
    uint64_t v11 = *(const std::__fs::filesystem::path **)a2;
  }
  if (remove(v11, v10))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v12 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      int v13 = *(char *)(a2 + 23) >= 0 ? (void **)a2 : *(void ***)a2;
      int v14 = *__error();
      int v15 = __error();
      uint64_t v16 = strerror(*v15);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v13;
      __int16 v79 = 1026;
      int v80 = v14;
      __int16 v81 = 2082;
      long long v82 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    int v17 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      if (*(char *)(a2 + 23) >= 0) {
        __int16 v18 = (void **)a2;
      }
      else {
        __int16 v18 = *(void ***)a2;
      }
      int v19 = *__error();
      __int16 v20 = __error();
      uint64_t v21 = strerror(*v20);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v18;
      __int16 v79 = 1026;
      int v80 = v19;
      __int16 v81 = 2082;
      long long v82 = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v22 = *(void *)(a2 + 8);
  }
  uint64_t v23 = v71;
  sub_1001110E4((uint64_t)v71, v22 + 8);
  if (v72 < 0) {
    uint64_t v23 = (void **)v71[0];
  }
  if (v22)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v25 = (const void *)a2;
    }
    else {
      int v25 = *(const void **)a2;
    }
    memmove(v23, v25, v22);
  }
  strcpy((char *)v23 + v22, "-journal");
  if (v72 >= 0) {
    char v26 = (const std::__fs::filesystem::path *)v71;
  }
  else {
    char v26 = (const std::__fs::filesystem::path *)v71[0];
  }
  if (remove(v26, v24))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v27 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      __int16 v28 = v72 >= 0 ? v71 : (void **)v71[0];
      int v29 = *__error();
      uint64_t v30 = __error();
      int v31 = strerror(*v30);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v28;
      __int16 v79 = 1026;
      int v80 = v29;
      __int16 v81 = 2082;
      long long v82 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v32 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      if (v72 >= 0) {
        std::string::size_type v33 = v71;
      }
      else {
        std::string::size_type v33 = (void **)v71[0];
      }
      int v34 = *__error();
      long long v35 = __error();
      std::string::size_type v36 = strerror(*v35);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v33;
      __int16 v79 = 1026;
      int v80 = v34;
      __int16 v81 = 2082;
      long long v82 = v36;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v37 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v37 = *(void *)(a2 + 8);
  }
  uint64_t v38 = v69;
  sub_1001110E4((uint64_t)v69, v37 + 4);
  if (v70 < 0) {
    uint64_t v38 = (void **)v69[0];
  }
  if (v37)
  {
    if (*(char *)(a2 + 23) >= 0) {
      std::string v40 = (const void *)a2;
    }
    else {
      std::string v40 = *(const void **)a2;
    }
    memmove(v38, v40, v37);
  }
  strcpy((char *)v38 + v37, "-wal");
  if (v70 >= 0) {
    std::string::size_type v41 = (const std::__fs::filesystem::path *)v69;
  }
  else {
    std::string::size_type v41 = (const std::__fs::filesystem::path *)v69[0];
  }
  if (remove(v41, v39))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v42 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      long long v43 = v70 >= 0 ? v69 : (void **)v69[0];
      int v44 = *__error();
      long long v45 = __error();
      int v46 = strerror(*v45);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v43;
      __int16 v79 = 1026;
      int v80 = v44;
      __int16 v81 = 2082;
      long long v82 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    int v47 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      if (v70 >= 0) {
        std::string::size_type v48 = v69;
      }
      else {
        std::string::size_type v48 = (void **)v69[0];
      }
      int v49 = *__error();
      long long v50 = __error();
      uint64_t v51 = strerror(*v50);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v48;
      __int16 v79 = 1026;
      int v80 = v49;
      __int16 v81 = 2082;
      long long v82 = v51;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v52 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v52 = *(void *)(a2 + 8);
  }
  __int16 v53 = __p;
  sub_1001110E4((uint64_t)__p, v52 + 4);
  if (v68 < 0) {
    __int16 v53 = (void **)__p[0];
  }
  if (v52)
  {
    if (*(char *)(a2 + 23) >= 0) {
      char v55 = (const void *)a2;
    }
    else {
      char v55 = *(const void **)a2;
    }
    memmove(v53, v55, v52);
  }
  strcpy((char *)v53 + v52, "-shm");
  if (v68 >= 0) {
    long long v56 = (const std::__fs::filesystem::path *)__p;
  }
  else {
    long long v56 = (const std::__fs::filesystem::path *)__p[0];
  }
  if (remove(v56, v54))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v57 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      int v58 = v68 >= 0 ? __p : (void **)__p[0];
      int v59 = *__error();
      int v60 = __error();
      __int16 v61 = strerror(*v60);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v58;
      __int16 v79 = 1026;
      int v80 = v59;
      __int16 v81 = 2082;
      long long v82 = v61;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    char v62 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      if (v68 >= 0) {
        int v63 = __p;
      }
      else {
        int v63 = (void **)__p[0];
      }
      int v64 = *__error();
      long long v65 = __error();
      int v66 = strerror(*v65);
      *(_DWORD *)stat buf = 68289794;
      int v74 = 0;
      __int16 v75 = 2082;
      int v76 = "";
      __int16 v77 = 2082;
      std::string::size_type v78 = v63;
      __int16 v79 = 1026;
      int v80 = v64;
      __int16 v81 = 2082;
      long long v82 = v66;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v62, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not remove file", "{\"msg%{public}.0s\":\"could not remove file\", \"path\":%{public, location:escape_only}s, \"errno\":%{public}d, \"error\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
}

void sub_1005FAC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

sqlite3 *sub_1005FAC94(uint64_t a1)
{
  __n128 result = *(sqlite3 **)(a1 + 8);
  if (result)
  {
    __n128 result = (sqlite3 *)sqlite3_extended_errcode(result);
    if (result)
    {
      if ((int)result > 538)
      {
        if ((int)result > 2569)
        {
          if ((int)result <= 5129)
          {
            if ((int)result <= 3593)
            {
              if ((int)result <= 2825)
              {
                if (result == 2570) {
                  sub_1005ECE30();
                }
                if (result == 2579) {
                  sub_1005F3714();
                }
              }
              else
              {
                switch(result)
                {
                  case 0xB0A:
                    sub_1005ED054();
                  case 0xC0A:
                    sub_1005ED278();
                  case 0xD0A:
                    sub_1005ED49C();
                }
              }
            }
            else if ((int)result > 4361)
            {
              switch(result)
              {
                case 0x110A:
                  sub_1005EDD2C();
                case 0x120A:
                  sub_1005EDF50();
                case 0x130A:
                  sub_1005EE174();
              }
            }
            else
            {
              switch(result)
              {
                case 0xE0A:
                  sub_1005ED6C0();
                case 0xF0A:
                  sub_1005ED8E4();
                case 0x100A:
                  sub_1005EDB08();
              }
            }
          }
          else if ((int)result > 6665)
          {
            if ((int)result > 7433)
            {
              switch(result)
              {
                case 0x1D0A:
                  sub_1005EF6DC();
                case 0x1E0A:
                  sub_1005EF900();
                case 0x1F0A:
                  sub_1005EFB24();
              }
            }
            else
            {
              switch(result)
              {
                case 0x1A0A:
                  sub_1005EF070();
                case 0x1B0A:
                  sub_1005EF294();
                case 0x1C0A:
                  sub_1005EF4B8();
              }
            }
          }
          else if ((int)result > 5897)
          {
            switch(result)
            {
              case 0x170A:
                sub_1005EEA04();
              case 0x180A:
                sub_1005EEC28();
              case 0x190A:
                sub_1005EEE4C();
            }
          }
          else
          {
            switch(result)
            {
              case 0x140A:
                sub_1005EE398();
              case 0x150A:
                sub_1005EE5BC();
              case 0x160A:
                sub_1005EE7E0();
            }
          }
        }
        else if ((int)result <= 1289)
        {
          if ((int)result <= 786)
          {
            if ((int)result <= 775)
            {
              if (result == 539) {
                sub_1005F3B5C();
              }
              if (result == 769) {
                sub_1005EB8C8();
              }
            }
            else
            {
              switch(result)
              {
                case 0x308:
                  sub_1005F191C();
                case 0x30A:
                  sub_1005EBF34();
                case 0x30E:
                  sub_1005F0A20();
              }
            }
          }
          else if ((int)result > 1037)
          {
            switch(result)
            {
              case 0x40E:
                sub_1005F0C44();
              case 0x413:
                sub_1005F2A3C();
              case 0x508:
                sub_1005F1D64();
            }
          }
          else
          {
            switch(result)
            {
              case 0x313:
                sub_1005F2818();
              case 0x408:
                sub_1005F1B40();
              case 0x40A:
                sub_1005EC158();
            }
          }
        }
        else if ((int)result > 1801)
        {
          if ((int)result > 2066)
          {
            switch(result)
            {
              case 0x813:
                sub_1005F32CC();
              case 0x90A:
                sub_1005ECC0C();
              case 0x913:
                sub_1005F34F0();
            }
          }
          else
          {
            switch(result)
            {
              case 0x70A:
                sub_1005EC7C4();
              case 0x713:
                sub_1005F30A8();
              case 0x80A:
                sub_1005EC9E8();
            }
          }
        }
        else if ((int)result > 1543)
        {
          switch(result)
          {
            case 0x608:
              sub_1005F1F88();
            case 0x60A:
              sub_1005EC5A0();
            case 0x613:
              sub_1005F2E84();
          }
        }
        else
        {
          switch(result)
          {
            case 0x50A:
              sub_1005EC37C();
            case 0x50E:
              sub_1005F0E68();
            case 0x513:
              sub_1005F2C60();
          }
        }
      }
      else if ((int)result > 100)
      {
        switch((int)result)
        {
          case 256:
            sub_1005F41C8();
          case 257:
            sub_1005EB480();
          case 258:
          case 259:
          case 260:
          case 263:
          case 265:
          case 268:
          case 269:
          case 271:
          case 272:
          case 273:
          case 274:
          case 276:
          case 277:
          case 278:
          case 280:
          case 281:
          case 282:
            break;
          case 261:
            sub_1005F0190();
          case 262:
            sub_1005EFD48();
          case 264:
            sub_1005F14D4();
          case 266:
            sub_1005EBAEC();
          case 267:
            sub_1005F108C();
          case 270:
            sub_1005F05D8();
          case 275:
            sub_1005F23D0();
          case 279:
            sub_1005F3FA4();
          case 283:
            sub_1005F3938();
          case 284:
            sub_1005F3D80();
          default:
            switch((int)result)
            {
              case 513:
                sub_1005EB6A4();
              case 514:
              case 515:
              case 519:
              case 521:
              case 524:
              case 525:
              case 527:
              case 528:
              case 529:
              case 530:
                goto LABEL_169;
              case 516:
                sub_1005F21AC();
              case 517:
                sub_1005F03B4();
              case 518:
                sub_1005EFF6C();
              case 520:
                sub_1005F16F8();
              case 522:
                sub_1005EBD10();
              case 523:
                sub_1005F12B0();
              case 526:
                sub_1005F07FC();
              case 531:
                sub_1005F25F4();
              default:
                if (result == 101) {
                  sub_1005EB25C();
                }
                return result;
            }
        }
      }
      else
      {
        switch((int)result)
        {
          case 1:
            sub_1005E7448();
          case 2:
            sub_1005E766C();
          case 3:
            sub_1005E7890();
          case 4:
            sub_1005E7AB4();
          case 5:
            sub_1005E7CD8();
          case 6:
            sub_1005E7EFC();
          case 7:
            sub_1005E8120();
          case 8:
            sub_1005E8344();
          case 9:
            sub_1005E8568();
          case 10:
            sub_1005E878C();
          case 11:
            sub_1005E89B0();
          case 12:
            sub_1005E8BD4();
          case 13:
            sub_1005E8DF8();
          case 14:
            sub_1005E901C();
          case 15:
            sub_1005E9240();
          case 16:
            sub_1005E9464();
          case 17:
            sub_1005E9688();
          case 18:
            sub_1005E98AC();
          case 19:
            sub_1005E9AD0();
          case 20:
            sub_1005E9CF4();
          case 21:
            sub_1005E9F18();
          case 22:
            sub_1005EA13C();
          case 23:
            sub_1005EA360();
          case 24:
            sub_1005EA584();
          case 25:
            sub_1005EA7A8();
          case 26:
            sub_1005EA9CC();
          case 27:
            sub_1005EABF0();
          case 28:
            sub_1005EAE14();
          default:
            if (result == 100) {
              sub_1005EB038();
            }
            return result;
        }
      }
LABEL_169:
      sub_1005F43EC();
    }
  }
  return result;
}

uint64_t sub_1005FB250(uint64_t result, const char *a2)
{
  if (*(unsigned char *)(result + 57))
  {
    uint64_t v3 = result;
    sub_1005FB2A4(result, a2);
    return sub_1005FB6D0(v3, a2);
  }
  return result;
}

uint64_t sub_1005FB2A4(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v25 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v26 = 256;
  sub_10010F274((uint64_t)v21);
  size_t v5 = strlen(a2);
  int v6 = sub_100132EFC(&v22, (uint64_t)a2, v5);
  sub_100132EFC(v6, (uint64_t)"IncrementRowCount", 17);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1005FD6B8(a1, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(v24, &__p);
  sub_100450DEC((uint64_t)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v8 = strlen(a2);
  NSObject v9 = sub_100132EFC(&v22, (uint64_t)a2, v8);
  sub_100132EFC(v9, (uint64_t)"DecrementRowCount", 17);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v10 = &__p;
  }
  else {
    int v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1005FD6B8(a1, (char *)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(v24, &__p);
  sub_100450DEC((uint64_t)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  size_t v11 = strlen(a2);
  uint64_t v12 = sub_100132EFC(&v22, (uint64_t)a2, v11);
  sub_100132EFC(v12, (uint64_t)"Counts", 6);
  std::stringbuf::str();
  if (v19 >= 0) {
    int v13 = (char *)&v18;
  }
  else {
    int v13 = (char *)v18;
  }
  sub_1005F9828(a1, "table", v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v14 = __p.__r_.__value_.__l.__size_ == 0;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
  }
  if (v19 < 0)
  {
    operator delete(v18);
    if (v14) {
      goto LABEL_30;
    }
  }
  else if (v14)
  {
    goto LABEL_30;
  }
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = &__p;
  }
  else {
    int v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1005FDAE0(a1, (char *)v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_30:
  *(void *)((char *)v21
  uint64_t v22 = v16;
  if (SHIBYTE(v24[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24[0].__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005FB65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a21);
  sub_1019DB560(v21 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FB6D0(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v36 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v37 = 256;
  int v39 = "Count";
  int v40 = 1;
  __int16 v41 = 0;
  char v42 = 0;
  char v43 = 0;
  uint64_t v44 = 0;
  int v45 = 5;
  __int16 v46 = 0;
  char v47 = 0;
  char v48 = 0;
  sub_10010F274((uint64_t)v32);
  size_t v5 = strlen(a2);
  int v6 = sub_100132EFC(&v33, (uint64_t)a2, v5);
  sub_100132EFC(v6, (uint64_t)"Counts", 6);
  std::stringbuf::str();
  if (__str[23] >= 0) {
    int v7 = __str;
  }
  else {
    int v7 = *(const char **)__str;
  }
  sub_1005FE264(a1, v7, &v39);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  memset(__str, 0, 24);
  std::string::operator=(__p, (const std::string *)__str);
  sub_100450DEC((uint64_t)v34);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  size_t v8 = sub_100132EFC(&v33, (uint64_t)"SELECT COUNT(*) FROM ", 21);
  size_t v9 = strlen(a2);
  sub_100132EFC(v8, (uint64_t)a2, v9);
  std::stringbuf::str();
  if (__str[23] >= 0) {
    int v10 = __str;
  }
  else {
    int v10 = *(unsigned char **)__str;
  }
  uint64_t v11 = sub_10014D630(a1, v10);
  uint64_t v12 = (sqlite3_stmt *)v11;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v12)
    {
LABEL_13:
      if (sqlite3_step(v12) == 100)
      {
        sqlite3_column_int(v12, 0);
        goto LABEL_31;
      }
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      int v17 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        *(void *)__str = 68289283;
        *(_WORD *)&__str[8] = 2082;
        *(void *)&__str[10] = "";
        *(_WORD *)&__str[18] = 2081;
        *(void *)&__str[20] = a2;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get row count for\", \"table\":%{private, location:escape_only}s}", __str, 0x1Cu);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
      }
      BOOL v14 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        *(void *)__str = 68289283;
        *(_WORD *)&__str[8] = 2082;
        *(void *)&__str[10] = "";
        *(_WORD *)&__str[18] = 2081;
        *(void *)&__str[20] = a2;
        int v15 = "Couldn't get row count for";
        uint64_t v16 = "{\"msg%{public}.0s\":\"Couldn't get row count for\", \"table\":%{private, location:escape_only}s}";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
  }
  else if (v11)
  {
    goto LABEL_13;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  int v13 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    *(void *)__str = 68289283;
    *(_WORD *)&__str[8] = 2082;
    *(void *)&__str[10] = "";
    *(_WORD *)&__str[18] = 2081;
    *(void *)&__str[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't create select count statement\", \"table\":%{private, location:escape_only}s}", __str, 0x1Cu);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  BOOL v14 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    *(void *)__str = 68289283;
    *(_WORD *)&__str[8] = 2082;
    *(void *)&__str[10] = "";
    *(_WORD *)&__str[18] = 2081;
    *(void *)&__str[20] = a2;
    int v15 = "Couldn't create select count statement";
    uint64_t v16 = "{\"msg%{public}.0s\":\"Couldn't create select count statement\", \"table\":%{private, location:escape_only}s}";
LABEL_30:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v15, v16, __str, 0x1Cu);
  }
LABEL_31:
  sub_10003D328(*(sqlite3 **)(a1 + 8), v12);
  memset(__str, 0, 24);
  std::string::operator=(__p, (const std::string *)__str);
  sub_100450DEC((uint64_t)v34);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  __int16 v18 = sub_100132EFC(&v33, (uint64_t)"INSERT INTO ", 12);
  size_t v19 = strlen(a2);
  __int16 v20 = sub_100132EFC(v18, (uint64_t)a2, v19);
  uint64_t v21 = sub_100132EFC(v20, (uint64_t)"Counts", 6);
  sub_100132EFC(v21, (uint64_t)" VALUES (", 9);
  uint64_t v22 = (void *)std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)")", 1);
  std::stringbuf::str();
  if (__str[23] >= 0) {
    uint64_t v23 = __str;
  }
  else {
    uint64_t v23 = *(unsigned char **)__str;
  }
  uint64_t v24 = sub_10014D630(a1, v23);
  uint64_t v25 = (sqlite3_stmt *)v24;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v25) {
      goto LABEL_38;
    }
  }
  else if (v24)
  {
LABEL_38:
    sub_10001FEB0(a1, v25);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v25);
    std::stringbuf::str();
    sub_1005FDD00(a1, a2, v26, 1);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    std::stringbuf::str();
    sub_1005FDD00(a1, a2, v27, 0);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    goto LABEL_50;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  __int16 v28 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    *(void *)__str = 68289026;
    *(_WORD *)&__str[8] = 2082;
    *(void *)&__str[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't prepare row count insertion statement\"}", __str, 0x12u);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  int v29 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    *(void *)__str = 68289026;
    *(_WORD *)&__str[8] = 2082;
    *(void *)&__str[10] = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't prepare row count insertion statement", "{\"msg%{public}.0s\":\"Couldn't prepare row count insertion statement\"}", __str, 0x12u);
  }
LABEL_50:
  *(void *)((char *)v32
  uint64_t v33 = v30;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005FBF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (*(char *)(v44 - 217) < 0) {
    operator delete(*(void **)(v44 - 240));
  }
  sub_101A129A8((uint64_t)&a9);
  sub_1019DB560((uint64_t)&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FBF80(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4, int a5)
{
  if (!a2)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v18 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v60 = 2082;
      *(void *)&v60[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Must provide a table name\"}", buf, 0x12u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    size_t v19 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)stat buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v60 = 2082;
      *(void *)&v60[2] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Must provide a table name", "{\"msg%{public}.0s\":\"Must provide a table name\"}", buf, 0x12u);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  uint64_t v57 = *(void *)(a1 + 16);
  uint64_t v47 = v57;
  (*(void (**)(void))(*(void *)v57 + 16))();
  __int16 v58 = 256;
  __s1 = 0;
  size_t __n = 0;
  uint64_t v56 = 0;
  std::string __p = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  BOOL v10 = sub_100601138(a1, a2, (uint64_t)&__s1, (uint64_t)&__p);
  BOOL v11 = sub_1005FE7D4(a1, a2);
  BOOL v12 = v11;
  if (!v11 && v10)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v21 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v60 = 2082;
      *(void *)&v60[2] = "";
      __int16 v61 = 2081;
      char v62 = a2;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Table does not exist but its metadata does\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v22 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)stat buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v60 = 2082;
      *(void *)&v60[2] = "";
      __int16 v61 = 2081;
      char v62 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Table does not exist but its metadata does", "{\"msg%{public}.0s\":\"Table does not exist but its metadata does\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_1006025A0(a1, a2);
    goto LABEL_37;
  }
  if (!a5) {
    goto LABEL_38;
  }
  if (!v10)
  {
    if (!v11)
    {
      BOOL v10 = 0;
      goto LABEL_38;
    }
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v36 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v60 = 2082;
      *(void *)&v60[2] = "";
      __int16 v61 = 2081;
      char v62 = a2;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Table was created by an unknown device (table info missing). Deleting\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_1005FDAE0(a1, a2);
LABEL_37:
    BOOL v10 = 0;
    BOOL v12 = 0;
    goto LABEL_38;
  }
  sub_100103240();
  sub_10073B95C((uint64_t)&v48);
  uint64_t v13 = v50;
  if ((v50 & 0x80u) == 0) {
    size_t v14 = v50;
  }
  else {
    size_t v14 = v49;
  }
  uint64_t v15 = HIBYTE(v53);
  if (v53 < 0) {
    uint64_t v15 = v52;
  }
  if (v14 != v15) {
    goto LABEL_98;
  }
  if (v53 >= 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v50 & 0x80) != 0)
  {
    if (!memcmp(v48, p_p, v49)) {
      goto LABEL_107;
    }
LABEL_98:
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    char v43 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v44 = (char *)&v48;
      if ((v50 & 0x80u) != 0) {
        uint64_t v44 = (char *)v48;
      }
      int v45 = &__p;
      if (v53 < 0) {
        int v45 = __p;
      }
      *(_DWORD *)stat buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v60 = 2082;
      *(void *)&v60[2] = "";
      __int16 v61 = 2081;
      char v62 = a2;
      __int16 v63 = 2081;
      int v64 = v44;
      __int16 v65 = 2081;
      int v66 = v45;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Table was created by a different device (serial numbers do not match). Deleting\", \"table\":%{private, location:escape_only}s, \"expected\":%{private, location:escape_only}s, \"actual\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    sub_1005FDAE0(a1, a2);
    BOOL v10 = 0;
    BOOL v12 = 0;
    goto LABEL_112;
  }
  if (v50)
  {
    int v17 = &v48;
    while (*(unsigned __int8 *)v17 == *p_p)
    {
      int v17 = (void **)((char *)v17 + 1);
      ++p_p;
      if (!--v13) {
        goto LABEL_107;
      }
    }
    goto LABEL_98;
  }
LABEL_107:
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  __int16 v46 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v60 = 2082;
    *(void *)&v60[2] = "";
    __int16 v61 = 2081;
    char v62 = a2;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Table was created by this device (serial numbers match). Keeping\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  BOOL v10 = 1;
LABEL_112:
  if ((char)v50 < 0) {
    operator delete(v48);
  }
LABEL_38:
  sub_100103240();
  sub_10073B6FC((uint64_t)buf);
  if (v56 >= 0) {
    size_t v23 = HIBYTE(v56);
  }
  else {
    size_t v23 = __n;
  }
  uint64_t v24 = BYTE3(v62);
  int v25 = SBYTE3(v62);
  if (SBYTE3(v62) < 0) {
    uint64_t v24 = *(void *)v60;
  }
  if (v23 != v24)
  {
    BOOL v35 = 0;
    if ((SBYTE3(v62) & 0x80000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_69;
  }
  if (SBYTE3(v62) >= 0) {
    uint64_t v26 = buf;
  }
  else {
    uint64_t v26 = *(uint8_t **)buf;
  }
  if (v56 < 0)
  {
    BOOL v35 = memcmp(__s1, v26, __n) == 0;
    goto LABEL_59;
  }
  if (HIBYTE(v56))
  {
    uint64_t v27 = HIBYTE(v56) - 1;
    p_s1 = &__s1;
    do
    {
      int v30 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v29 = v30;
      int v32 = *v26++;
      int v31 = v32;
      BOOL v34 = v27-- != 0;
      BOOL v35 = v29 == v31;
    }
    while (v29 == v31 && v34);
LABEL_59:
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_69;
  }
  BOOL v35 = 1;
  if ((SBYTE3(v62) & 0x80000000) == 0)
  {
LABEL_60:
    if (!v35) {
      goto LABEL_81;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(*(void **)buf);
  if (!v35) {
    goto LABEL_81;
  }
LABEL_70:
  size_t v37 = HIBYTE(v56);
  if (v56 < 0) {
    size_t v37 = __n;
  }
  if (v37 && v10 && v12)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v38 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      int v39 = (char *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v39 = *(char **)v39;
      }
      *(_DWORD *)stat buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v60 = 2082;
      *(void *)&v60[2] = "";
      __int16 v61 = 2082;
      char v62 = v39;
      __int16 v63 = 2081;
      int v64 = a2;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"The CL version has not changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair, so not creating table\", \"path\":%{public, location:escape_only}s, \"table\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_89;
  }
LABEL_81:
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  int v40 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v41 = (char *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v41 = *(char **)v41;
    }
    *(_DWORD *)stat buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v60 = 2082;
    *(void *)&v60[2] = "";
    __int16 v61 = 2082;
    char v62 = v41;
    __int16 v63 = 2081;
    int v64 = a2;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"The CL version has changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair. Checking schema\", \"path\":%{public, location:escape_only}s, \"table\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  sub_100601DF8(a1, a2);
  if (!sub_1005F588C(a1, a2, a3, a4, 0))
  {
LABEL_89:
    uint64_t v20 = 0;
    goto LABEL_90;
  }
  sub_100601DF8(a1, a2);
  uint64_t v20 = 1;
LABEL_90:
  if (SHIBYTE(v53) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(__s1);
  }
  (*(void (**)(uint64_t))(*(void *)v47 + 24))(v47);
  return v20;
}

void sub_1005FC86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_1019DB560((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FC8D8(uint64_t a1, const char *a2, const std::string::value_type **a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v68 = v6;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  __int16 v69 = 256;
  if (!a3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  memset(&v67, 0, sizeof(v67));
  sub_10010F274((uint64_t)v64);
  size_t v7 = strlen(a2);
  size_t v8 = sub_100132EFC(v65, (uint64_t)a2, v7);
  sub_100132EFC(v8, (uint64_t)"Index", 5);
  sub_1005FD2B0(a3, &v60);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  std::string v67 = v60;
  sub_10010F274((uint64_t)&v60);
  size_t v9 = sub_100132EFC(&v60.__r_.__value_.__r.__words[2], (uint64_t)"CREATE INDEX ", 13);
  std::stringbuf::str();
  if (SBYTE3(v73) >= 0) {
    BOOL v10 = buf;
  }
  else {
    BOOL v10 = *(uint8_t **)buf;
  }
  if (SBYTE3(v73) >= 0) {
    uint64_t v11 = BYTE3(v73);
  }
  else {
    uint64_t v11 = *(void *)v71;
  }
  sub_100132EFC(v9, (uint64_t)v10, v11);
  if (SBYTE3(v73) < 0) {
    operator delete(*(void **)buf);
  }
  BOOL v12 = sub_100132EFC(&v60.__r_.__value_.__r.__words[2], (uint64_t)" ON ", 4);
  size_t v13 = strlen(a2);
  size_t v14 = sub_100132EFC(v12, (uint64_t)a2, v13);
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)" (", 2);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &v67;
  }
  else {
    uint64_t v16 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v67.__r_.__value_.__l.__size_;
  }
  __int16 v18 = sub_100132EFC(v15, (uint64_t)v16, size);
  sub_100132EFC(v18, (uint64_t)")", 1);
  std::stringbuf::str();
  if (SBYTE3(v73) >= 0) {
    size_t v19 = (char *)buf;
  }
  else {
    size_t v19 = *(char **)buf;
  }
  sub_1005F9828(v5, "index", v19, &v57);
  if (SBYTE3(v73) < 0) {
    operator delete(*(void **)buf);
  }
  size_t v20 = v59;
  if ((v59 & 0x80u) != 0) {
    size_t v20 = v58;
  }
  if (v20)
  {
    uint64_t v52 = v5;
    std::stringbuf::str();
    int v21 = SBYTE3(v73);
    uint64_t v22 = *(uint8_t **)buf;
    if ((v59 & 0x80u) == 0) {
      size_t v23 = v59;
    }
    else {
      size_t v23 = v58;
    }
    if ((v59 & 0x80u) == 0) {
      uint64_t v24 = &v57;
    }
    else {
      uint64_t v24 = v57;
    }
    if (SBYTE3(v73) >= 0) {
      size_t v25 = BYTE3(v73);
    }
    else {
      size_t v25 = *(void *)v71;
    }
    if (SBYTE3(v73) >= 0) {
      uint64_t v26 = buf;
    }
    else {
      uint64_t v26 = *(uint8_t **)buf;
    }
    if (v25 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v25;
    }
    BOOL v28 = memcmp(v24, v26, v27) == 0;
    BOOL v29 = v25 == v23 && v28;
    if (v21 < 0) {
      operator delete(v22);
    }
    if (v29)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      int v30 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
      {
        std::stringbuf::str();
        int v31 = v56 >= 0 ? __p : (void **)__p[0];
        *(void *)stat buf = 68289283;
        *(_WORD *)__int16 v71 = 2082;
        *(void *)&void v71[2] = "";
        __int16 v72 = 2081;
        char v73 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index already exists; not re-creating\", \"index\":%{private, location:escape_only}s}",
          buf,
          0x1Cu);
        if (v56 < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_95;
    }
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v5 = v52;
    BOOL v35 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      int v36 = (char)v59;
      size_t v37 = (void **)v57;
      std::stringbuf::str();
      uint64_t v38 = &v57;
      if (v36 < 0) {
        uint64_t v38 = v37;
      }
      int v39 = __p;
      if (v56 < 0) {
        int v39 = (void **)__p[0];
      }
      *(_DWORD *)stat buf = 68289795;
      int v40 = &v53;
      if (v54 < 0) {
        int v40 = v53;
      }
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v71 = 2082;
      *(void *)&void v71[2] = "";
      __int16 v72 = 2081;
      char v73 = v39;
      __int16 v74 = 2081;
      __int16 v75 = (std::string *)v38;
      __int16 v76 = 2081;
      __int16 v77 = v40;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index already exists but is different; dropping\", \"index\":%{private, location:escape_o"
        "nly}s, \"actual\":%{private, location:escape_only}s, \"expected\":%{private, location:escape_only}s}",
        buf,
        0x30u);
      if (v54 < 0) {
        operator delete(v53);
      }
      uint64_t v5 = v52;
      if (v56 < 0) {
        operator delete(__p[0]);
      }
    }
    std::stringbuf::str();
    if (SBYTE3(v73) >= 0) {
      __int16 v41 = buf;
    }
    else {
      __int16 v41 = *(uint8_t **)buf;
    }
    sub_1005FD34C(v5, (const char *)v41);
    if (SBYTE3(v73) < 0)
    {
      BOOL v34 = *(uint8_t **)buf;
      goto LABEL_81;
    }
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v32 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      uint64_t v33 = v56 >= 0 ? __p : (void **)__p[0];
      *(void *)stat buf = 68289283;
      *(_WORD *)__int16 v71 = 2082;
      *(void *)&void v71[2] = "";
      __int16 v72 = 2081;
      char v73 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index does not exist; creating\", \"index\":%{private, location:escape_only}s}",
        buf,
        0x1Cu);
      if (v56 < 0)
      {
        BOOL v34 = (uint8_t *)__p[0];
LABEL_81:
        operator delete(v34);
      }
    }
  }
  std::stringbuf::str();
  if (SBYTE3(v73) >= 0) {
    char v42 = buf;
  }
  else {
    char v42 = *(uint8_t **)buf;
  }
  uint64_t v43 = sub_10014D630(v5, v42);
  uint64_t v44 = (sqlite3_stmt *)v43;
  if (SBYTE3(v73) < 0)
  {
    operator delete(*(void **)buf);
    if (v44) {
      goto LABEL_87;
    }
LABEL_89:
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v45 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v46 = &v67;
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v46 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      *(void *)stat buf = 68289539;
      *(_WORD *)__int16 v71 = 2082;
      *(void *)&void v71[2] = "";
      __int16 v72 = 2081;
      char v73 = (void *)a2;
      __int16 v74 = 2082;
      __int16 v75 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Couldn't create index statement\", \"table\":%{private, location:escape_only}s, \"columns\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_95;
  }
  if (!v43) {
    goto LABEL_89;
  }
LABEL_87:
  sub_10001FEB0(v5, v44);
  sub_10003D328(*(sqlite3 **)(v5 + 8), v44);
LABEL_95:
  if ((char)v59 < 0) {
    operator delete(v57);
  }
  *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words
                                        - 24)) = v49;
  std::string::size_type v50 = v48;
  v60.__r_.__value_.__r.__words[2] = v48;
  if (v63 < 0) {
    operator delete(v62);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v64[0] = v47;
  *(void *)((char *)v64 + *(void *)(v47 - 24)) = v49;
  v65[0] = v50;
  if (v66 < 0) {
    operator delete((void *)v65[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_1005FD1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  sub_101A129A8((uint64_t)&a27);
  sub_101A129A8((uint64_t)&a62);
  if (*(char *)(v62 - 185) < 0) {
    operator delete(*(void **)(v62 - 208));
  }
  sub_1019DB560(v62 - 184);
  _Unwind_Resume(a1);
}

std::string *sub_1005FD2B0@<X0>(const std::string::value_type **a1@<X0>, std::string *a2@<X8>)
{
  __n128 result = (std::string *)sub_100134750(a2, "");
  if (a1)
  {
    uint64_t v5 = *a1;
    if (*a1)
    {
      uint64_t v6 = 0;
      do
      {
        if (v6)
        {
          std::string::append(a2, ", ");
          uint64_t v5 = a1[v6];
        }
        __n128 result = std::string::append(a2, v5);
        size_t v7 = &a1[v6++];
        uint64_t v5 = v7[1];
      }
      while (v5);
    }
  }
  return result;
}

void sub_1005FD330(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005FD34C(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v16 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v17 = 256;
  sub_10010F274((uint64_t)v13);
  uint64_t v5 = sub_100132EFC(v14, (uint64_t)"DROP INDEX ", 11);
  size_t v6 = strlen(a2);
  sub_100132EFC(v5, (uint64_t)a2, v6);
  std::stringbuf::str();
  if (SBYTE3(v22) >= 0) {
    size_t v7 = buf;
  }
  else {
    size_t v7 = *(uint8_t **)buf;
  }
  uint64_t v8 = sub_10014D630(a1, v7);
  size_t v9 = (sqlite3_stmt *)v8;
  if (SBYTE3(v22) < 0)
  {
    operator delete(*(void **)buf);
    if (v9) {
      goto LABEL_6;
    }
  }
  else if (v8)
  {
LABEL_6:
    sub_10001FEB0(a1, v9);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v9);
    goto LABEL_12;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  BOOL v10 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)stat buf = 68289283;
    __int16 v19 = 2082;
    size_t v20 = "";
    __int16 v21 = 2081;
    uint64_t v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Couldn't create drop index statement\", \"index\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
LABEL_12:
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005FD664(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005FD6B8(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v21 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v22 = 256;
  sub_10010F274((uint64_t)v18);
  uint64_t v5 = sub_100132EFC(v19, (uint64_t)"DROP TRIGGER ", 13);
  size_t v6 = strlen(a2);
  sub_100132EFC(v5, (uint64_t)a2, v6);
  sub_1005F9828(a1, "trigger", a2, buf);
  if (SBYTE3(v26) < 0)
  {
    uint64_t v10 = *(void *)v24;
    operator delete(*(void **)buf);
    if (v10)
    {
LABEL_3:
      std::stringbuf::str();
      if (SBYTE3(v26) >= 0) {
        size_t v7 = buf;
      }
      else {
        size_t v7 = *(uint8_t **)buf;
      }
      uint64_t v8 = sub_10014D630(a1, v7);
      size_t v9 = (sqlite3_stmt *)v8;
      if (SBYTE3(v26) < 0)
      {
        operator delete(*(void **)buf);
        if (v9) {
          goto LABEL_8;
        }
      }
      else if (v8)
      {
LABEL_8:
        sub_10001FEB0(a1, v9);
        sub_10003D328(*(sqlite3 **)(a1 + 8), v9);
        goto LABEL_20;
      }
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      char v15 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        *(void *)stat buf = 68289282;
        *(_WORD *)uint64_t v24 = 2082;
        *(void *)&void v24[2] = "";
        __int16 v25 = 2082;
        uint64_t v26 = a2;
        BOOL v12 = "{\"msg%{public}.0s\":\"#warning Couldn't create drop trigger statement\", \"trigger\":%{public, location:escape_only}s}";
        size_t v13 = v15;
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  else if (BYTE3(v26))
  {
    goto LABEL_3;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v11 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)stat buf = 68289282;
    *(_WORD *)uint64_t v24 = 2082;
    *(void *)&void v24[2] = "";
    __int16 v25 = 2082;
    uint64_t v26 = a2;
    BOOL v12 = "{\"msg%{public}.0s\":\"Trigger does not exist\", \"trigger\":%{public, location:escape_only}s}";
    size_t v13 = v11;
    os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, buf, 0x1Cu);
  }
LABEL_20:
  *(void *)((char *)v18
  v19[0] = v16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005FDA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 89) < 0) {
    operator delete(*(void **)(v9 - 112));
  }
  sub_101A129A8((uint64_t)&a9);
  sub_1019DB560(v9 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FDAE0(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v5 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v11 = 2082;
    BOOL v12 = "";
    __int16 v13 = 2081;
    os_log_type_t v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1006025A0(a1, a2);
  sub_100134750(buf, "DROP TABLE IF EXISTS ");
  std::string::append((std::string *)buf, a2);
  if (SBYTE3(v14) >= 0) {
    size_t v6 = buf;
  }
  else {
    size_t v6 = *(uint8_t **)buf;
  }
  size_t v7 = (sqlite3_stmt *)sub_10014D630(a1, v6);
  sub_10001FEB0(a1, v7);
  sub_10003D328(*(sqlite3 **)(a1 + 8), v7);
  if (*(uint64_t *)(a1 + 88) <= 0) {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 88);
  }
  sub_10003CC68(a1, v8);
  if (SBYTE3(v14) < 0) {
    operator delete(*(void **)buf);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005FDCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005FDD00(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v38 = v7;
  (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  __int16 v39 = 256;
  sub_10010F274((uint64_t)v35);
  if (a4) {
    uint64_t v8 = "Increment";
  }
  else {
    uint64_t v8 = "Decrement";
  }
  if (a4) {
    uint64_t v9 = "INSERT";
  }
  else {
    uint64_t v9 = "DELETE";
  }
  if (a4) {
    uint64_t v10 = "+";
  }
  else {
    uint64_t v10 = "-";
  }
  sub_100132EFC(v36, (uint64_t)"CREATE TRIGGER IF NOT EXISTS ", 29);
  size_t v11 = strlen(a2);
  BOOL v12 = sub_100132EFC(v36, (uint64_t)a2, v11);
  __int16 v13 = sub_100132EFC(v12, (uint64_t)v8, 9);
  sub_100132EFC(v13, (uint64_t)"RowCount", 8);
  os_log_type_t v14 = sub_100132EFC(v36, (uint64_t)" AFTER ", 7);
  char v15 = sub_100132EFC(v14, (uint64_t)v9, 6);
  uint64_t v16 = sub_100132EFC(v15, (uint64_t)" ON ", 4);
  size_t v17 = strlen(a2);
  __int16 v18 = sub_100132EFC(v16, (uint64_t)a2, v17);
  sub_100132EFC(v18, (uint64_t)" FOR EACH ROW BEGIN", 19);
  __int16 v19 = sub_100132EFC(v36, (uint64_t)" UPDATE ", 8);
  size_t v20 = strlen(a2);
  uint64_t v21 = sub_100132EFC(v19, (uint64_t)a2, v20);
  __int16 v22 = sub_100132EFC(v21, (uint64_t)"Counts", 6);
  size_t v23 = sub_100132EFC(v22, (uint64_t)" SET ", 5);
  uint64_t v24 = sub_100132EFC(v23, (uint64_t)"Count", 5);
  __int16 v25 = sub_100132EFC(v24, (uint64_t)"=", 1);
  uint64_t v26 = sub_100132EFC(v25, (uint64_t)"Count", 5);
  size_t v27 = sub_100132EFC(v26, (uint64_t)v10, 1);
  sub_100132EFC(v27, (uint64_t)"1 WHERE rowid=1; END", 20);
  std::stringbuf::str();
  if (SBYTE3(v44) >= 0) {
    BOOL v28 = buf;
  }
  else {
    BOOL v28 = *(uint8_t **)buf;
  }
  uint64_t v29 = sub_10014D630(a1, v28);
  int v30 = (sqlite3_stmt *)v29;
  if (SBYTE3(v44) < 0)
  {
    operator delete(*(void **)buf);
    if (v30) {
      goto LABEL_15;
    }
  }
  else if (v29)
  {
LABEL_15:
    sub_10001FEB0(a1, v30);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v30);
    goto LABEL_24;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  int v31 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
  {
    *(void *)stat buf = 68289283;
    __int16 v41 = 2082;
    char v42 = "";
    __int16 v43 = 2081;
    uint64_t v44 = a2;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't create add count trigger statement\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
  }
  int v32 = off_1024195E8;
  if (os_signpost_enabled((os_log_t)off_1024195E8))
  {
    *(void *)stat buf = 68289283;
    __int16 v41 = 2082;
    char v42 = "";
    __int16 v43 = 2081;
    uint64_t v44 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't create add count trigger statement", "{\"msg%{public}.0s\":\"Couldn't create add count trigger statement\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
LABEL_24:
  *(void *)((char *)v35
  v36[0] = v33;
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_1005FE210(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005FE264(uint64_t a1, const char *a2, const char **a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v29 = v6;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  __int16 v30 = 256;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v36 = 2082;
    *(void *)char v37 = "";
    *(_WORD *)&v37[8] = 2081;
    *(void *)&v37[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Creating table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a3 && *a3)
  {
    unsigned int v8 = 0;
    uint64_t v9 = (uint64_t *)(a3 + 6);
    do
    {
      v8 += *((unsigned __int8 *)v9 - 36);
      uint64_t v10 = *v9;
      v9 += 6;
    }
    while (v10);
    sub_10010F274((uint64_t)buf);
    size_t v11 = sub_100132EFC(&v37[6], (uint64_t)"CREATE TABLE ", 13);
    size_t v12 = strlen(a2);
    __int16 v13 = sub_100132EFC(v11, (uint64_t)a2, v12);
    sub_100132EFC(v13, (uint64_t)" (", 2);
    sub_1006008D8(a3, 1, v8 < 2, (uint64_t)&__p);
    if (SBYTE3(v34) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (SBYTE3(v34) >= 0) {
      uint64_t v15 = BYTE3(v34);
    }
    else {
      uint64_t v15 = *(void *)v32;
    }
    sub_100132EFC(&v37[6], (uint64_t)p_p, v15);
    if (SBYTE3(v34) < 0) {
      operator delete(__p);
    }
    if (v8 >= 2)
    {
      uint64_t v16 = (const char *)&__p;
      sub_1005FFDF4((uint64_t)a3, &__p);
      if (SBYTE3(v34) < 0) {
        uint64_t v16 = (const char *)__p;
      }
      size_t v17 = strlen(v16);
      sub_100132EFC(&v37[6], (uint64_t)v16, v17);
      if (SBYTE3(v34) < 0) {
        operator delete(__p);
      }
    }
    sub_100600BF8(a1, (uint64_t)a3, &__p);
    if (SBYTE3(v34) >= 0) {
      __int16 v18 = &__p;
    }
    else {
      __int16 v18 = __p;
    }
    if (SBYTE3(v34) >= 0) {
      uint64_t v19 = BYTE3(v34);
    }
    else {
      uint64_t v19 = *(void *)v32;
    }
    sub_100132EFC(&v37[6], (uint64_t)v18, v19);
    if (SBYTE3(v34) < 0) {
      operator delete(__p);
    }
    sub_100132EFC(&v37[6], (uint64_t)")", 1);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    size_t v20 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      uint64_t v21 = v28 >= 0 ? &v27 : (void **)v27;
      std::string __p = (void *)68289282;
      *(_WORD *)int v32 = 2082;
      *(void *)&void v32[2] = "";
      __int16 v33 = 2082;
      BOOL v34 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Schema statement created\", \"schema\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      if (v28 < 0) {
        operator delete(v27);
      }
    }
    std::stringbuf::str();
    if (SBYTE3(v34) >= 0) {
      __int16 v22 = &__p;
    }
    else {
      __int16 v22 = __p;
    }
    uint64_t v23 = sub_10014D630(a1, v22);
    uint64_t v24 = (sqlite3_stmt *)v23;
    if (SBYTE3(v34) < 0)
    {
      operator delete(__p);
      if (!v24)
      {
LABEL_46:
        *(void *)&v37[6] = v25;
        if (v39 < 0) {
          operator delete(v38);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
    }
    else if (!v23)
    {
      goto LABEL_46;
    }
    sqlite3_step(v24);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v24);
    goto LABEL_46;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_1005FE764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
}

BOOL sub_1005FE7D4(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v20 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v21 = 256;
  sub_10010F274((uint64_t)v17);
  uint64_t v5 = sub_100132EFC(v18, (uint64_t)"SELECT name FROM ", 17);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)"sqlite_master", 13);
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)" WHERE name='", 13);
  size_t v8 = strlen(a2);
  uint64_t v9 = sub_100132EFC(v7, (uint64_t)a2, v8);
  sub_100132EFC(v9, (uint64_t)"';", 2);
  std::stringbuf::str();
  if (v16 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  size_t v11 = (sqlite3_stmt *)sub_10014D630(a1, p_p);
  if (v16 < 0) {
    operator delete(__p);
  }
  int v12 = sqlite3_step(v11);
  sub_10003D328(*(sqlite3 **)(a1 + 8), v11);
  *(void *)((char *)v17
  v18[0] = v13;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v12 == 100;
}

void sub_1005FEA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a16);
  sub_1019DB560(v16 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FEA9C(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  if (sub_1005FE7D4(a1, a2)) {
    sub_1005FEC4C(a1, a2, *a3, (uint64_t)a3);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    os_log_type_t v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Table doesn't exist in database\", \"table\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return 0;
}

void sub_1005FEC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005FEC4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = "";
  *(_DWORD *)(a4 + 8) = 5;
  *(_WORD *)(a4 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 40) = 0;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2081;
    __int16 v18 = a2;
    __int16 v19 = 2082;
    uint64_t v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getColumnInfo\", \"table\":%{private, location:escape_only}s, \"name\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  sub_10010F274((uint64_t)buf);
  size_t v8 = sub_100132EFC((const char **)((char *)&v16 + 6), (uint64_t)"PRAGMA table_info(", 18);
  size_t v9 = strlen(a2);
  int v10 = sub_100132EFC(v8, (uint64_t)a2, v9);
  LOBYTE(__p) = 41;
  sub_100132EFC(v10, (uint64_t)&__p, 1);
  std::stringbuf::str();
  if (v13 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1005FF180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

const char *sub_1005FF1FC(int a1)
{
  if (a1 == 1) {
    return "INTEGER";
  }
  uint64_t v2 = 0;
  do
  {
    uint64_t v3 = v2;
    v2 += 16;
  }
  while (v2 != 80 && *(_DWORD *)((char *)&unk_1022BE410 + v3 + 16) != a1);
  return *(const char **)((char *)&unk_1022BE410 + v3 + 24);
}

uint64_t sub_1005FF248(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v89 = v5;
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  __int16 v90 = 256;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v6 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v93 = 2082;
    *(void *)int v94 = "";
    *(_WORD *)&v94[8] = 2081;
    *(void *)&v94[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Re-recreating table to fix primary key\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a3 && *(void *)a3)
  {
    sub_10010F274((uint64_t)buf);
    size_t v7 = strlen(a2);
    size_t v8 = sub_100132EFC(&v94[6], (uint64_t)a2, v7);
    sub_100132EFC(v8, (uint64_t)"_tmp", 4);
    uint64_t v82 = v5;
    sub_10010F274((uint64_t)v85);
    size_t v9 = sub_100132EFC(&v86, (uint64_t)"CREATE TEMPORARY TABLE ", 23);
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v12 = sub_100132EFC(v9, (uint64_t)p_p, size);
    char v13 = sub_100132EFC(v12, (uint64_t)" (", 2);
    size_t v14 = strlen(*(const char **)a3);
    __int16 v15 = sub_100132EFC(v13, *(void *)a3, v14);
    char v91 = 32;
    uint64_t v16 = sub_100132EFC(v15, (uint64_t)&v91, 1);
    int v17 = *(_DWORD *)(a3 + 8);
    if (v17 == 1)
    {
      __int16 v18 = "INTEGER";
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = v20;
        v20 += 16;
      }
      while (v20 != 80 && *(_DWORD *)((char *)&unk_1022BE410 + v21 + 16) != v17);
      __int16 v18 = *(const char **)((char *)&unk_1022BE410 + v21 + 24);
    }
    size_t v22 = strlen(v18);
    sub_100132EFC(v16, (uint64_t)v18, v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v23 = a3 + 48;
    if (*(void *)(a3 + 48))
    {
      uint64_t v24 = 1;
      uint64_t v25 = (const char **)(a3 + 48);
      do
      {
        uint64_t v26 = sub_100132EFC(&v86, (uint64_t)", ", 2);
        size_t v27 = *v25;
        size_t v28 = strlen(v27);
        uint64_t v29 = sub_100132EFC(v26, (uint64_t)v27, v28);
        __p.__r_.__value_.__s.__data_[0] = 32;
        __int16 v30 = sub_100132EFC(v29, (uint64_t)&__p, 1);
        int v31 = *(_DWORD *)(a3 + 48 * v24 + 8);
        int v32 = "INTEGER";
        if (v31 != 1)
        {
          uint64_t v33 = 0;
          do
          {
            uint64_t v34 = v33;
            v33 += 16;
          }
          while (v33 != 80 && *(_DWORD *)((char *)&unk_1022BE410 + v34 + 16) != v31);
          int v32 = *(const char **)((char *)&unk_1022BE410 + v34 + 24);
        }
        size_t v35 = strlen(v32);
        sub_100132EFC(v30, (uint64_t)v32, v35);
        ++v24;
        uint64_t v25 = (const char **)(a3 + 48 * v24);
      }
      while (*v25);
    }
    sub_1005FFDF4(a3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v36 = &__p;
    }
    else {
      __int16 v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v38 = sub_100132EFC(&v86, (uint64_t)v36, v37);
    char v91 = 41;
    sub_100132EFC(v38, (uint64_t)&v91, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v39 = &__p;
    }
    else {
      char v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v40 = (sqlite3_stmt *)sub_10014D630(a1, v39);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_10001FEB0(a1, v40);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v40);
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(v88, &__p);
    sub_100450DEC((uint64_t)v87);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __int16 v41 = sub_100132EFC(&v86, (uint64_t)"INSERT INTO ", 12);
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v42 = &__p;
    }
    else {
      char v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = sub_100132EFC(v41, (uint64_t)v42, v43);
    int v45 = sub_100132EFC(v44, (uint64_t)" SELECT ", 8);
    size_t v46 = strlen(*(const char **)a3);
    sub_100132EFC(v45, *(void *)a3, v46);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(void *)v23)
    {
      uint64_t v47 = a3 + 48;
      do
      {
        std::string::size_type v48 = sub_100132EFC(&v86, (uint64_t)", ", 2);
        size_t v49 = strlen(*(const char **)v47);
        sub_100132EFC(v48, *(void *)v47, v49);
        uint64_t v50 = *(void *)(v47 + 48);
        v47 += 48;
      }
      while (v50);
    }
    uint64_t v51 = sub_100132EFC(&v86, (uint64_t)" FROM ", 6);
    size_t v52 = strlen(a2);
    sub_100132EFC(v51, (uint64_t)a2, v52);
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v53 = &__p;
    }
    else {
      uint64_t v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    char v54 = (sqlite3_stmt *)sub_10014D630(a1, v53);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_10001FEB0(a1, v54);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v54);
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(v88, &__p);
    sub_100450DEC((uint64_t)v87);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char v55 = sub_100132EFC(&v86, (uint64_t)"DROP TABLE ", 11);
    size_t v56 = strlen(a2);
    sub_100132EFC(v55, (uint64_t)a2, v56);
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v57 = &__p;
    }
    else {
      uint64_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v58 = (sqlite3_stmt *)sub_10014D630(a1, v57);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_10001FEB0(a1, v58);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v58);
    sub_1005FE264(a1, a2, (const char **)a3);
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(v88, &__p);
    sub_100450DEC((uint64_t)v87);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v59 = sub_100132EFC(&v86, (uint64_t)"INSERT INTO ", 12);
    size_t v60 = strlen(a2);
    __int16 v61 = sub_100132EFC(v59, (uint64_t)a2, v60);
    uint64_t v62 = sub_100132EFC(v61, (uint64_t)" SELECT ", 8);
    size_t v63 = strlen(*(const char **)a3);
    sub_100132EFC(v62, *(void *)a3, v63);
    if (*(void *)v23)
    {
      do
      {
        int v64 = sub_100132EFC(&v86, (uint64_t)", ", 2);
        size_t v65 = strlen(*(const char **)v23);
        sub_100132EFC(v64, *(void *)v23, v65);
        uint64_t v66 = *(void *)(v23 + 48);
        v23 += 48;
      }
      while (v66);
    }
    std::string v67 = sub_100132EFC(&v86, (uint64_t)" FROM ", 6);
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v68 = &__p;
    }
    else {
      uint64_t v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v69 = __p.__r_.__value_.__l.__size_;
    }
    sub_100132EFC(v67, (uint64_t)v68, v69);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v70 = &__p;
    }
    else {
      char v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    __int16 v71 = (sqlite3_stmt *)sub_10014D630(a1, v70);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_10001FEB0(a1, v71);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v71);
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(v88, &__p);
    sub_100450DEC((uint64_t)v87);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __int16 v72 = sub_100132EFC(&v86, (uint64_t)"DROP TABLE ", 11);
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v73 = &__p;
    }
    else {
      char v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v74 = __p.__r_.__value_.__l.__size_;
    }
    sub_100132EFC(v72, (uint64_t)v73, v74);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v75 = &__p;
    }
    else {
      __int16 v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    __int16 v76 = (sqlite3_stmt *)sub_10014D630(a1, v75);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_10001FEB0(a1, v76);
    sub_10003D328(*(sqlite3 **)(a1 + 8), v76);
    *(void *)((char *)v85
    uint64_t v80 = v78;
    uint64_t v86 = v78;
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88[0].__r_.__value_.__l.__data_);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    *(void *)stat buf = v77;
    *(void *)&buf[*(void *)(v77 - 24)] = v79;
    *(void *)&v94[6] = v80;
    if (v96 < 0) {
      operator delete(v95);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    uint64_t v19 = 1;
    uint64_t v5 = v82;
  }
  else
  {
    uint64_t v19 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v19;
}

void sub_1005FFD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a21);
  sub_101A129A8((uint64_t)&a60);
  sub_1019DB560((uint64_t)&a56);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FFDF4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 12))
  {
    int v6 = 1;
    uint64_t v5 = result;
    while (*(void *)v5)
    {
      int v7 = *(unsigned __int8 *)(v5 + 60);
      ++v6;
      v5 += 48;
      if (v7)
      {
        unsigned int v4 = v6;
        goto LABEL_7;
      }
    }
    goto LABEL_15;
  }
  unsigned int v4 = 1;
  uint64_t v5 = result;
LABEL_7:
  if (!*(void *)v5)
  {
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  sub_10010F274((uint64_t)v16);
  size_t v8 = sub_100132EFC(v17, (uint64_t)", PRIMARY KEY (", 15);
  size_t v9 = *(const char **)v5;
  size_t v10 = strlen(v9);
  sub_100132EFC(v8, (uint64_t)v9, v10);
  uint64_t v11 = v2 + 48 * v4;
  if (*(void *)v11)
  {
    do
    {
      if (*(unsigned char *)(v11 + 12))
      {
        int v12 = sub_100132EFC(v17, (uint64_t)", ", 2);
        size_t v13 = strlen(*(const char **)v11);
        sub_100132EFC(v12, *(void *)v11, v13);
      }
      uint64_t v14 = *(void *)(v11 + 48);
      v11 += 48;
    }
    while (v14);
  }
  char v19 = 41;
  sub_100132EFC(v17, (uint64_t)&v19, 1);
  std::stringbuf::str();
  *(void *)((char *)v16
  v17[0] = v15;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100600054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10060006C(uint64_t a1, const char *a2)
{
  uint64_t v5 = *(sqlite3 **)(a1 + 16);
  ppDb[1] = v5;
  (*(void (**)(sqlite3 *))(*(void *)v5 + 16))(v5);
  __int16 v14 = 256;
  if (!a2)
  {
    sub_101A67418();
    abort_report_np();
    __break(1u);
LABEL_21:
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
LABEL_4:
    int v6 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      char v18 = "";
      __int16 v19 = 2081;
      v20[0] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to open\", \"path\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (v2[188] != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    int v7 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)stat buf = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      char v18 = "";
      __int16 v19 = 2081;
      v20[0] = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to open", "{\"msg%{public}.0s\":\"Unable to open\", \"path\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    int v8 = 1;
    goto LABEL_19;
  }
  ppDb[0] = 0;
  if (sqlite3_open(a2, ppDb))
  {
    uint64_t v2 = &qword_102419000;
    if (qword_1024195E0 == -1) {
      goto LABEL_4;
    }
    goto LABEL_21;
  }
  int v12 = sqlite3_file_control(ppDb[0], 0, 102, *(void **)(a1 + 8));
  if (v12)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    size_t v9 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      char v18 = "";
      __int16 v19 = 1040;
      LODWORD(v20[0]) = 4;
      WORD2(v20[0]) = 2098;
      *(void *)((char *)v20 + 6) = &v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Did not successfully finish backup\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    size_t v10 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)stat buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      char v18 = "";
      __int16 v19 = 1040;
      LODWORD(v20[0]) = 4;
      WORD2(v20[0]) = 2098;
      *(void *)((char *)v20 + 6) = &v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Did not successfully finish backup", "{\"msg%{public}.0s\":\"Did not successfully finish backup\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
    }
  }
  sqlite3_close(ppDb[0]);
  int v8 = v12;
LABEL_19:
  (*(void (**)(sqlite3 *))(*(void *)v5 + 24))(v5);
  return v8 == 0;
}

void sub_100600438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100600468(uint64_t a1, const char *a2, const char *a3, const char *a4, sqlite3_int64 a5, int a6, uint64_t a7)
{
  __int16 v14 = *(sqlite3_blob **)(a1 + 16);
  ppBlob[1] = v14;
  (*(void (**)(sqlite3_blob *))(*(void *)v14 + 16))(v14);
  __int16 v24 = 256;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v15 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 68289795;
    int v26 = 0;
    __int16 v27 = 2082;
    size_t v28 = "";
    __int16 v29 = 2081;
    *(void *)__int16 v30 = a3;
    *(_WORD *)&v30[8] = 2081;
    *(void *)&unsigned char v30[10] = a4;
    __int16 v31 = 2049;
    sqlite3_int64 v32 = a5;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Opening a blob for read\", \"tableName\":%{private, location:escape_only}s, \"colname\":%{private, location:escape_only}s, \"row\":%{private}llu}", buf, 0x30u);
  }
  ppBlob[0] = 0;
  int v16 = sqlite3_blob_open(*(sqlite3 **)(a1 + 8), a2, a3, a4, a5, a6 ^ 1, ppBlob);
  unsigned int v22 = v16;
  if (v16)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v17 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)stat buf = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      size_t v28 = "";
      __int16 v29 = 1040;
      *(_DWORD *)__int16 v30 = 4;
      *(_WORD *)&v30[4] = 2098;
      *(void *)&v30[6] = &v22;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"failed to open blob\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      int v16 = v22;
    }
    sub_1005F9B94(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v16);
    sqlite3_blob_close(ppBlob[0]);
    uint64_t v18 = v22;
  }
  else
  {
    sub_100600884(a7, (uint64_t)ppBlob[0]);
    uint64_t v18 = sqlite3_blob_close(ppBlob[0]);
    if (v18)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      __int16 v19 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 68289282;
        int v26 = 0;
        __int16 v27 = 2082;
        size_t v28 = "";
        __int16 v29 = 1026;
        *(_DWORD *)__int16 v30 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"error when closing blob\", \"code\":%{public}d}", buf, 0x18u);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022BE480);
        }
      }
      uint64_t v20 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        *(_DWORD *)stat buf = 68289282;
        int v26 = 0;
        __int16 v27 = 2082;
        size_t v28 = "";
        __int16 v29 = 1026;
        *(_DWORD *)__int16 v30 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "error when closing blob", "{\"msg%{public}.0s\":\"error when closing blob\", \"code\":%{public}d}", buf, 0x18u);
      }
      sub_1005F9B94(*(sqlite3 **)(a1 + 8), (a1 + 96), *(unsigned __int8 *)(a1 + 56), v18);
    }
  }
  (*(void (**)(sqlite3_blob *))(*(void *)v14 + 24))(v14);
  return v18;
}

void sub_10060085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100600884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1006008D8(const char **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_100134750((void *)a4, "");
  int v7 = *a1;
  if (*a1)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    size_t v10 = a1;
    do
    {
      if (v8)
      {
        std::string::append((std::string *)a4, ", ");
        int v7 = *v10;
      }
      if (*(char *)(a4 + 23) >= 0) {
        size_t v11 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        size_t v11 = *(void *)(a4 + 8);
      }
      size_t v12 = strlen(v7);
      sub_1001110E4((uint64_t)&v27, v11 + v12);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v13 = &v27;
      }
      else {
        size_t v13 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        if (*(char *)(a4 + 23) >= 0) {
          __int16 v14 = (const void *)a4;
        }
        else {
          __int16 v14 = *(const void **)a4;
        }
        memmove(v13, v14, v11);
      }
      uint64_t v15 = (char *)v13 + v11;
      if (v12) {
        memmove(v15, v7, v12);
      }
      v15[v12] = 0;
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v27;
      if (a2)
      {
        if (*(char *)(a4 + 23) >= 0) {
          size_t v16 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          size_t v16 = *(void *)(a4 + 8);
        }
        sub_1001110E4((uint64_t)&v27, v16 + 1);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v17 = &v27;
        }
        else {
          __int16 v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
        }
        if (v16)
        {
          if (*(char *)(a4 + 23) >= 0) {
            uint64_t v18 = (const void *)a4;
          }
          else {
            uint64_t v18 = *(const void **)a4;
          }
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 32;
        int v19 = (int)a1[6 * v8 + 1];
        uint64_t v20 = "INTEGER";
        if (v19 != 1)
        {
          uint64_t v21 = 0;
          do
          {
            uint64_t v22 = v21;
            v21 += 16;
          }
          while (v21 != 80 && *(_DWORD *)((char *)&unk_1022BE410 + v22 + 16) != v19);
          uint64_t v20 = *(const std::string::value_type **)((char *)&unk_1022BE410 + v22 + 24);
        }
        uint64_t v23 = std::string::append(&v27, v20);
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
        v28[0] = v23->__r_.__value_.__l.__size_;
        *(void *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0) {
          operator delete(*(void **)a4);
        }
        *(void *)a4 = v24;
        *(void *)(a4 + 8) = v28[0];
        *(void *)(a4 + 15) = *(void *)((char *)v28 + 7);
        *(unsigned char *)(a4 + 23) = v25;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
      }
      if (((a3 ^ 1 | v9) & 1) == 0)
      {
        if (BYTE4(a1[6 * v8 + 1]))
        {
          std::string::append((std::string *)a4, " PRIMARY KEY");
          if (BYTE5(a1[6 * v8 + 1])) {
            std::string::append((std::string *)a4, " AUTOINCREMENT");
          }
          int v9 = 1;
        }
        else
        {
          int v9 = 0;
        }
      }
      ++v8;
      size_t v10 = &a1[6 * v8];
      int v7 = *v10;
    }
    while (*v10);
  }
}

void sub_100600BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100600BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_10010F274((uint64_t)v32);
  if (a2)
  {
    __int16 v31 = a3;
    if (*(void *)a2)
    {
      do
      {
        if (*(unsigned char *)(a2 + 40))
        {
          if (!sub_1006053A4(a1, a2))
          {
            if (qword_1024195E0 != -1) {
              dispatch_once(&qword_1024195E0, &stru_1022BE480);
            }
            a3 = v31;
            std::string v27 = off_1024195E8;
            if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
            {
              *(void *)stat buf = 68289026;
              *(_WORD *)__int16 v36 = 2082;
              *(void *)&v36[2] = "";
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Foreign key reference and index check failed\"}", buf, 0x12u);
              if (qword_1024195E0 != -1) {
                dispatch_once(&qword_1024195E0, &stru_1022BE480);
              }
            }
            size_t v28 = off_1024195E8;
            if (os_signpost_enabled((os_log_t)off_1024195E8))
            {
              *(void *)stat buf = 68289026;
              *(_WORD *)__int16 v36 = 2082;
              *(void *)&v36[2] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Foreign key reference and index check failed", "{\"msg%{public}.0s\":\"Foreign key reference and index check failed\"}", buf, 0x12u);
            }
            goto LABEL_34;
          }
          int v7 = *(const char **)(a2 + 16);
          int v6 = *(const char **)(a2 + 24);
          uint64_t v8 = *(int *)(a2 + 32);
          uint64_t v9 = *(int *)(a2 + 36);
          size_t v10 = sub_100132EFC(v33, (uint64_t)", FOREIGN KEY(", 14);
          size_t v11 = strlen(*(const char **)a2);
          size_t v12 = sub_100132EFC(v10, *(void *)a2, v11);
          size_t v13 = sub_100132EFC(v12, (uint64_t)") REFERENCES ", 13);
          size_t v14 = strlen(v7);
          uint64_t v15 = sub_100132EFC(v13, (uint64_t)v7, v14);
          size_t v16 = sub_100132EFC(v15, (uint64_t)"(", 1);
          size_t v17 = strlen(v6);
          uint64_t v18 = sub_100132EFC(v16, (uint64_t)v6, v17);
          sub_100132EFC(v18, (uint64_t)")", 1);
          int v19 = sub_100132EFC(v33, (uint64_t)" ON DELETE ", 11);
          sub_100134750(buf, (&off_1022BE500)[v8]);
          if ((v37 & 0x80u) == 0) {
            uint64_t v20 = buf;
          }
          else {
            uint64_t v20 = *(uint8_t **)buf;
          }
          if ((v37 & 0x80u) == 0) {
            uint64_t v21 = v37;
          }
          else {
            uint64_t v21 = *(void *)v36;
          }
          sub_100132EFC(v19, (uint64_t)v20, v21);
          if ((char)v37 < 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v22 = sub_100132EFC(v33, (uint64_t)" ON UPDATE ", 11);
          sub_100134750(buf, (&off_1022BE500)[v9]);
          if ((v37 & 0x80u) == 0) {
            uint64_t v23 = buf;
          }
          else {
            uint64_t v23 = *(uint8_t **)buf;
          }
          if ((v37 & 0x80u) == 0) {
            uint64_t v24 = v37;
          }
          else {
            uint64_t v24 = *(void *)v36;
          }
          sub_100132EFC(v22, (uint64_t)v23, v24);
          if ((char)v37 < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v25 = *(void *)(a2 + 48);
        a2 += 48;
      }
      while (v25);
    }
    std::stringbuf::str();
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v26 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      *(void *)stat buf = 68289026;
      *(_WORD *)__int16 v36 = 2082;
      *(void *)&v36[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getForeignKeyDefinitionString: NULL column definition\"}", buf, 0x12u);
    }
LABEL_34:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(void *)((char *)v32
  v33[0] = v29;
  if (v34 < 0) {
    operator delete((void *)v33[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1006010F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100601138(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v19 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  __int16 v20 = 256;
  uint64_t v9 = (sqlite3_stmt *)sub_10060140C(a1, (uint64_t)off_1022BE318, "TableInfo", "TableName");
  sub_100133F10(v9, 1, a2);
  int v10 = sqlite3_step(v9);
  int v18 = v10;
  if (v10 == 100)
  {
    size_t v11 = (char *)sqlite3_column_text(v9, 0);
    sub_100134750(buf, v11);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(void *)(a3 + 16) = *(void *)&buf[16];
    size_t v12 = (char *)sqlite3_column_text(v9, 1);
    sub_100134750(buf, v12);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(void *)(a4 + 16) = *(void *)&buf[16];
  }
  sub_10003D328(*(sqlite3 **)(a1 + 8), v9);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  size_t v13 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    size_t v14 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      size_t v14 = (void *)*v14;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v15 = (void *)a3;
    }
    else {
      uint64_t v15 = *(void **)a3;
    }
    if (*(char *)(a4 + 23) >= 0) {
      size_t v16 = (void *)a4;
    }
    else {
      size_t v16 = *(void **)a4;
    }
    *(_DWORD *)stat buf = 68290563;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = a2;
    __int16 v22 = 2082;
    uint64_t v23 = v14;
    __int16 v24 = 1040;
    int v25 = 4;
    __int16 v26 = 2098;
    std::string v27 = &v18;
    __int16 v28 = 2082;
    uint64_t v29 = v15;
    __int16 v30 = 2081;
    __int16 v31 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"version and serial number\", \"table\":%{private, location:escape_only}s, \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"version\":%{public, location:escape_only}s, \"serial number\":%{private, location:escape_only}s}", buf, 0x4Au);
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  return v10 == 100;
}

void sub_1006013D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10060140C(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v31 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  __int16 v32 = 256;
  if (a3 && a4 && *(void *)a2)
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v9 = sub_100132EFC(&v35[6], (uint64_t)"SELECT ", 7);
    size_t v10 = strlen(*(const char **)a2);
    sub_100132EFC(v9, *(void *)a2, v10);
    if (*(void *)(a2 + 8))
    {
      size_t v11 = (void *)(a2 + 16);
      do
      {
        size_t v12 = sub_100132EFC(&v35[6], (uint64_t)", ", 2);
        size_t v13 = strlen((const char *)*(v11 - 1));
        sub_100132EFC(v12, *(v11 - 1), v13);
      }
      while (*v11++);
    }
    uint64_t v15 = sub_100132EFC(&v35[6], (uint64_t)" FROM ", 6);
    size_t v16 = strlen(a3);
    size_t v17 = sub_100132EFC(v15, (uint64_t)a3, v16);
    int v18 = sub_100132EFC(v17, (uint64_t)" WHERE ", 7);
    size_t v19 = strlen(a4);
    __int16 v20 = sub_100132EFC(v18, (uint64_t)a4, v19);
    sub_100132EFC(v20, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v30 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    uint64_t v22 = sub_10014D630(a1, p_p);
    if (v30 < 0) {
      operator delete(__p);
    }
    *(void *)&v35[6] = v23;
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v24 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      int v25 = *(const char **)a2;
      *(_DWORD *)stat buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v34 = 2082;
      *(void *)size_t v35 = "";
      *(_WORD *)&v35[8] = 2081;
      *(void *)&v35[10] = a3;
      *(_WORD *)&v35[18] = 2082;
      *(void *)&v35[20] = v25;
      __int16 v36 = 2082;
      unsigned __int8 v37 = a4;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    __int16 v26 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      std::string v27 = *(const char **)a2;
      *(_DWORD *)stat buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v34 = 2082;
      *(void *)size_t v35 = "";
      *(_WORD *)&v35[8] = 2081;
      *(void *)&v35[10] = a3;
      *(_WORD *)&v35[18] = 2082;
      *(void *)&v35[20] = v27;
      __int16 v36 = 2082;
      unsigned __int8 v37 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    uint64_t v22 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  return v22;
}

void sub_1006018A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  sub_1019DB560((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100601900(uint64_t a1, char *a2, uint64_t a3)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  if (sub_100601138(a1, a2, (uint64_t)v9, (uint64_t)__p))
  {
    if (v10 >= 0) {
      uint64_t v4 = (char *)v9;
    }
    else {
      uint64_t v4 = (char *)v9[0];
    }
    uint64_t v5 = sub_1006019C0(v4, a3) >> 31;
  }
  else
  {
    uint64_t v5 = 1;
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  return v5;
}

void sub_100601994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006019C0(char *__s, uint64_t a2)
{
  sub_100134750(&__p, __s);
  sub_1004BAEC8(v15, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100134750(&v9, (char *)a2);
  sub_1004BAEC8((void (__cdecl ***)(std::basic_stringstream<char> *__hidden))&__p, &v9, 24);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  while (!*(_DWORD *)((char *)&v15[4] + (unint64_t)*(v15[0] - 3))
       || !*(_DWORD *)&v12[*(void *)(__p.__r_.__value_.__r.__words[0] - 24)])
  {
    LODWORD(v9.__r_.__value_.__l.__data_) = 0;
    std::istream::operator>>();
    std::istream::get();
    std::istream::operator>>();
    std::istream::get();
    if (SLODWORD(v9.__r_.__value_.__l.__data_) > 0) {
      unsigned int v3 = 1;
    }
    else {
      unsigned int v3 = a2;
    }
    if (SLODWORD(v9.__r_.__value_.__l.__data_) < 0) {
      a2 = 0xFFFFFFFFLL;
    }
    else {
      a2 = v3;
    }
    if (LODWORD(v9.__r_.__value_.__l.__data_)) {
      goto LABEL_16;
    }
  }
  a2 = 0;
LABEL_16:
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                        - 24)) = (std::string::size_type)v6;
  int v7 = (void (__cdecl **)(std::basic_stringstream<char> *__hidden))v5;
  __p.__r_.__value_.__r.__words[2] = v5;
  if (v14 < 0) {
    operator delete(v13);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v15[0] = v4;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v15 + (void)*(v4 - 3)) = v6;
  void v15[2] = v7;
  if (v16 < 0) {
    operator delete(v15[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a2;
}

void sub_100601CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a54);
  _Unwind_Resume(a1);
}

uint64_t sub_100601D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v4 = sub_10014D630(a1, a2);
  sub_1006033BC(a1, v4);
  sub_100F03BA0(&v7, a1, v4);
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v7;
}

void sub_100601DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100601DF8(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v14 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v15 = 256;
  sub_100103240();
  sub_10073B6FC((uint64_t)v12);
  sub_100103240();
  sub_10073B95C((uint64_t)__p);
  std::string::size_type v5 = (sqlite3_stmt *)sub_10060205C(a1, "TableInfo", (const char **)off_1022BE330, 1);
  sub_100133F10(v5, 1, a2);
  if (v13 >= 0) {
    uint64_t v6 = (char *)v12;
  }
  else {
    uint64_t v6 = (char *)v12[0];
  }
  sub_100133F10(v5, 2, v6);
  if (v11 >= 0) {
    uint64_t v7 = (char *)__p;
  }
  else {
    uint64_t v7 = (char *)__p[0];
  }
  sub_100133F10(v5, 3, v7);
  sub_10001FEB0(a1, v5);
  sub_10003D328(*(sqlite3 **)(a1 + 8), v5);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v8 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 68289283;
    int v17 = 0;
    __int16 v18 = 2082;
    size_t v19 = "";
    __int16 v20 = 2081;
    uint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Created row in TableInfo\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100602008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10060205C(uint64_t a1, const char *a2, const char **a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v30 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  __int16 v31 = 256;
  if (a2 && *a3)
  {
    sub_10010F274((uint64_t)buf);
    sub_100132EFC(&v34[6], (uint64_t)"INSERT ", 7);
    if (a4) {
      sub_100132EFC(&v34[6], (uint64_t)"OR REPLACE ", 11);
    }
    std::string v9 = sub_100132EFC(&v34[6], (uint64_t)"INTO ", 5);
    size_t v10 = strlen(a2);
    char v11 = sub_100132EFC(v9, (uint64_t)a2, v10);
    size_t v12 = sub_100132EFC(v11, (uint64_t)" (", 2);
    size_t v13 = strlen(*a3);
    sub_100132EFC(v12, (uint64_t)*a3, v13);
    if (a3[1])
    {
      uint64_t v14 = 0;
      do
      {
        __int16 v15 = sub_100132EFC(&v34[6], (uint64_t)", ", 2);
        size_t v16 = strlen(a3[v14 + 1]);
        sub_100132EFC(v15, (uint64_t)a3[v14 + 1], v16);
      }
      while (a3[v14++ + 2]);
      int v18 = v14 + 1;
    }
    else
    {
      int v18 = 1;
    }
    sub_100132EFC(&v34[6], (uint64_t)") VALUES (?", 11);
    if (v18 >= 2)
    {
      int v24 = v18 + 1;
      do
      {
        sub_100132EFC(&v34[6], (uint64_t)", ?", 3);
        --v24;
      }
      while (v24 > 2);
    }
    LOBYTE(__p[0]) = 41;
    sub_100132EFC(&v34[6], (uint64_t)__p, 1);
    std::stringbuf::str();
    if (v29 >= 0) {
      int v25 = __p;
    }
    else {
      int v25 = (void **)__p[0];
    }
    uint64_t v23 = sub_10014D630(a1, v25);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&v34[6] = v26;
    if (v36 < 0) {
      operator delete(v35);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    size_t v19 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      __int16 v20 = *a3;
      *(_DWORD *)stat buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v33 = 2082;
      *(void *)__int16 v34 = "";
      *(_WORD *)&void v34[8] = 2081;
      *(void *)&v34[10] = a2;
      *(_WORD *)&v34[18] = 2082;
      *(void *)&v34[20] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v21 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      uint64_t v22 = *a3;
      *(_DWORD *)stat buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v33 = 2082;
      *(void *)__int16 v34 = "";
      *(_WORD *)&void v34[8] = 2081;
      *(void *)&v34[10] = a2;
      *(_WORD *)&v34[18] = 2082;
      *(void *)&v34[20] = v22;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v23 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  return v23;
}

void sub_100602544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  sub_1019DB560((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1006025A0(uint64_t a1, char *a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v4 = (sqlite3_stmt *)sub_10060268C(a1, "TableInfo", "TableName");
  sub_100133F10(v4, 1, a2);
  sub_10001FEB0(a1, v4);
  sub_10003D328(*(sqlite3 **)(a1 + 8), v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100602678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060268C(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v21 = v6;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  __int16 v22 = 256;
  if (a2 && a3)
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v7 = sub_100132EFC(&v25[6], (uint64_t)"DELETE FROM ", 12);
    size_t v8 = strlen(a2);
    std::string v9 = sub_100132EFC(v7, (uint64_t)a2, v8);
    size_t v10 = sub_100132EFC(v9, (uint64_t)" WHERE ", 7);
    size_t v11 = strlen(a3);
    size_t v12 = sub_100132EFC(v10, (uint64_t)a3, v11);
    sub_100132EFC(v12, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v20 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    uint64_t v14 = sub_10014D630(a1, p_p);
    if (v20 < 0) {
      operator delete(__p);
    }
    *(void *)&void v25[6] = v15;
    if (v27 < 0) {
      operator delete(v26);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    size_t v16 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      *(void *)int v25 = "";
      *(_WORD *)&v25[8] = 2081;
      *(void *)&v25[10] = a2;
      *(_WORD *)&v25[18] = 2082;
      *(void *)&v25[20] = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    int v17 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)stat buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      *(void *)int v25 = "";
      *(_WORD *)&v25[8] = 2081;
      *(void *)&v25[10] = a2;
      *(_WORD *)&v25[18] = 2082;
      *(void *)&v25[20] = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v14 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v14;
}

void sub_100602A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  sub_1019DB560((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100602AC8(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v10 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v11 = 256;
  std::string::size_type v5 = (sqlite3_stmt *)sub_100602C20(a1, "TableInfo", (const char **)&off_1022BE350, "TableName");
  sub_100103240();
  sub_10073B6FC((uint64_t)__p);
  if (v9 >= 0) {
    uint64_t v6 = (char *)__p;
  }
  else {
    uint64_t v6 = (char *)__p[0];
  }
  sub_100133F10(v5, 1, v6);
  sub_100133F10(v5, 2, a2);
  sub_10001FEB0(a1, v5);
  sub_10003D328(*(sqlite3 **)(a1 + 8), v5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100602BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_100602C20(uint64_t a1, const char *a2, const char **a3, const char *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v33 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  __int16 v34 = 256;
  if (a2 && a4 && *a3)
  {
    sub_10010F274((uint64_t)buf);
    char v9 = sub_100132EFC(&v37[6], (uint64_t)"UPDATE ", 7);
    size_t v10 = strlen(a2);
    __int16 v11 = sub_100132EFC(v9, (uint64_t)a2, v10);
    size_t v12 = sub_100132EFC(v11, (uint64_t)" SET ", 5);
    size_t v13 = strlen(*a3);
    uint64_t v14 = sub_100132EFC(v12, (uint64_t)*a3, v13);
    sub_100132EFC(v14, (uint64_t)"=?", 2);
    if (a3[1])
    {
      uint64_t v15 = a3 + 2;
      do
      {
        size_t v16 = sub_100132EFC(&v37[6], (uint64_t)", ", 2);
        size_t v17 = strlen((const char *)*(v15 - 1));
        int v18 = sub_100132EFC(v16, *(v15 - 1), v17);
        sub_100132EFC(v18, (uint64_t)"=?", 2);
      }
      while (*v15++);
    }
    char v20 = sub_100132EFC(&v37[6], (uint64_t)"WHERE ", 6);
    size_t v21 = strlen(a4);
    __int16 v22 = sub_100132EFC(v20, (uint64_t)a4, v21);
    sub_100132EFC(v22, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v32 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    uint64_t v24 = sub_10014D630(a1, p_p);
    if (v32 < 0) {
      operator delete(__p);
    }
    *(void *)&v37[6] = v25;
    if (v41 < 0) {
      operator delete(v40);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v26 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      char v27 = *a3;
      *(_DWORD *)stat buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v36 = 2082;
      *(void *)unsigned __int8 v37 = "";
      *(_WORD *)&v37[8] = 2081;
      *(void *)&v37[10] = a2;
      *(_WORD *)&v37[18] = 2082;
      *(void *)&v37[20] = v27;
      __int16 v38 = 2082;
      char v39 = a4;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    __int16 v28 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      char v29 = *a3;
      *(_DWORD *)stat buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v36 = 2082;
      *(void *)unsigned __int8 v37 = "";
      *(_WORD *)&v37[8] = 2081;
      *(void *)&v37[10] = a2;
      *(_WORD *)&v37[18] = 2082;
      *(void *)&v37[20] = v29;
      __int16 v38 = 2082;
      char v39 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid parameters", "{\"msg%{public}.0s\":\"Invalid parameters\", \"table\":%{private, location:escape_only}s, \"columnNames[0]\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    uint64_t v24 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  return v24;
}

void sub_1006030E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  sub_1019DB560((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10060313C(uint64_t a1, char **a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  sub_10002B640(a1);
  if (*a2)
  {
    unsigned int v5 = 1;
    uint64_t v6 = a2;
    do
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
      uint64_t v7 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *v6;
        *(_DWORD *)stat buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v14 = 2082;
        uint64_t v15 = "";
        __int16 v16 = 2081;
        size_t v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping table\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_1006025A0(a1, *v6);
      sub_100134750(buf, "DROP TABLE IF EXISTS ");
      std::string::append((std::string *)buf, *v6);
      if (SBYTE3(v17) >= 0) {
        char v9 = buf;
      }
      else {
        char v9 = *(uint8_t **)buf;
      }
      size_t v10 = (sqlite3_stmt *)sub_10014D630(a1, v9);
      sub_10001FEB0(a1, v10);
      sub_10003D328(*(sqlite3 **)(a1 + 8), v10);
      if (SBYTE3(v17) < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v6 = &a2[v5++];
    }
    while (*v6);
  }
  sub_100028FB4(a1);
  if (*(uint64_t *)(a1 + 88) <= 0) {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 88);
  }
  sub_10003CC68(a1, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100603374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

#error "100603438: call analysis failed (funcsize=32)"

uint64_t sub_10060343C(uint64_t a1, const char *a2, const char **a3, int a4)
{
  uint64_t v10 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  uint64_t v8 = sub_10060205C(a1, a2, a3, a4);
  sub_1006033BC(a1, v8);
  sub_100F03BA0(&v11, a1, v8);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  return v11;
}

void sub_10060351C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100603530(uint64_t a1, const char *a2, const char **a3, int a4)
{
}

void sub_100603620()
{
}

#error "1006037B8: call analysis failed (funcsize=84)"

void sub_1006037C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1006037C8(uint64_t a1, uint64_t a2, sqlite3_stmt *a3)
{
  return sub_1005F55D8(a1, a3);
}

sqlite3_int64 sub_1006037D0(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  sqlite3_int64 insert_rowid = sqlite3_last_insert_rowid(*(sqlite3 **)(a1 + 8));
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return insert_rowid;
}

void sub_10060386C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100603880(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  LODWORD(v1) = sqlite3_changes(*(sqlite3 **)(v1 + 8));
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return (int)v1;
}

void sub_10060391C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100603930(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  BOOL v2 = sub_1006039F0(*(sqlite3_stmt **)(a1 + 8));
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v2;
}

void sub_1006039DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1006039F0(sqlite3_stmt *a1)
{
  sub_1000E1294((uint64_t *)v35, (uint64_t)"com.apple.locationd.CLSqliteDatabase.vacuum", 0);
  uint64_t v30 = 0;
  __int16 v31 = &v30;
  uint64_t v32 = 0x2020000000;
  sqlite3_int64 v33 = 0;
  sqlite3_int64 v34 = 0;
  BOOL v2 = sub_10003D2B8(a1, "pragma page_count;", &v34);
  sqlite3_int64 v3 = v34;
  if (!v2) {
    sqlite3_int64 v3 = -1;
  }
  sqlite3_int64 v33 = v3;
  uint64_t v26 = 0;
  char v27 = &v26;
  uint64_t v28 = 0x2020000000;
  sqlite3_int64 v29 = 0;
  BOOL v4 = sub_10003D2B8(a1, "pragma freelist_count;", &v34);
  sqlite3_int64 v5 = v34;
  if (!v4) {
    sqlite3_int64 v5 = -1;
  }
  sqlite3_int64 v29 = v5;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022BE4C0);
  }
  uint64_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (const char *)v31[3];
    uint64_t v8 = v27[3];
    char v9 = sqlite3_db_filename(a1, "main");
    uint64_t buf = 68289794;
    *(_WORD *)unsigned __int8 v37 = 2082;
    *(void *)&v37[2] = "";
    __int16 v38 = 2050;
    char v39 = v7;
    __int16 v40 = 2050;
    *(void *)char v41 = v8;
    *(_WORD *)&v41[8] = 2082;
    *(void *)&v41[10] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"start vacuum\", \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
  }
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  int v25 = 0;
  if (sub_100603EA0(a1))
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_100603F1C;
    v21[3] = &unk_1022BE368;
    v21[4] = &v30;
    v21[5] = &v26;
    v21[6] = a1;
    uint64_t buf = mach_absolute_time();
    *(void *)unsigned __int8 v37 = v21;
    BOOL v10 = sub_10060408C(a1, 0);
  }
  else
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_1006043FC;
    v20[3] = &unk_1022BE390;
    void v20[4] = &v22;
    v20[5] = &v30;
    v20[6] = &v26;
    v20[7] = a1;
    uint64_t buf = mach_absolute_time();
    *(void *)unsigned __int8 v37 = v20;
    int v11 = sqlite3_exec(a1, "VACUUM", 0, 0, 0);
    *((_DWORD *)v23 + 6) = v11;
    BOOL v10 = v11 == 0;
  }
  sub_1000E0900(&buf);
  int v19 = sqlite3_wal_checkpoint_v2(a1, 0, 3, 0, 0);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  size_t v12 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    size_t v13 = sqlite3_db_filename(a1, "main");
    uint64_t buf = 68289794;
    *(_WORD *)unsigned __int8 v37 = 2082;
    *(void *)&v37[2] = "";
    __int16 v38 = 2082;
    char v39 = v13;
    __int16 v40 = 1040;
    *(_DWORD *)char v41 = 4;
    *(_WORD *)&v41[4] = 2098;
    *(void *)&v41[6] = &v19;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wal_checkpoint\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P}", (uint8_t *)&buf, 0x2Cu);
  }
  BOOL v14 = sub_10003D2B8(a1, "pragma page_count;", &v34);
  sqlite3_int64 v15 = v34;
  if (!v14) {
    sqlite3_int64 v15 = -1;
  }
  void v31[3] = v15;
  BOOL v16 = sub_10003D2B8(a1, "pragma freelist_count;", &v34);
  sqlite3_int64 v17 = v34;
  if (!v16) {
    sqlite3_int64 v17 = -1;
  }
  void v27[3] = v17;
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  sub_1000E1098(v35);
  return v10;
}

void sub_100603E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 184), 8);
  sub_1000E1098((id *)(v30 - 144));
  _Unwind_Resume(a1);
}

BOOL sub_100603EA0(sqlite3_stmt *a1)
{
  BOOL v2 = sub_10014D824(a1, "pragma auto_vacuum;");
  if (!v2) {
    return 0;
  }
  sqlite3_int64 v3 = v2;
  BOOL v4 = sqlite3_step(v2) == 100 && sqlite3_column_int(v3, 0) == 2;
  sub_10003D328(a1, v3);
  return v4;
}

void sub_100603F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    BOOL v10 = sqlite3_db_filename(*(sqlite3 **)(a1 + 48), "main");
    v11[0] = 68290818;
    v11[1] = 0;
    __int16 v12 = 2082;
    size_t v13 = "";
    __int16 v14 = 2082;
    sqlite3_int64 v15 = "elapsed";
    __int16 v16 = 2050;
    uint64_t v17 = a2;
    __int16 v18 = 2050;
    uint64_t v19 = a3;
    __int16 v20 = 2050;
    double v21 = v6;
    __int16 v22 = 2050;
    uint64_t v23 = v8;
    __int16 v24 = 2050;
    uint64_t v25 = v9;
    __int16 v26 = 2082;
    char v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"incremental_vacuum\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)v11, 0x58u);
  }
}

BOOL sub_10060408C(sqlite3 *a1, uint64_t a2)
{
  sub_10010F274((uint64_t)v13);
  sub_100132EFC(v14, (uint64_t)"pragma incremental_vacuum(", 26);
  BOOL v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)");", 2);
  std::stringbuf::str();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100604650;
  void v10[3] = &unk_1022BE3B0;
  void v10[4] = a2;
  v10[5] = a1;
  v11[0] = mach_absolute_time();
  v11[1] = (uint64_t)v10;
  std::stringbuf::str();
  if (v20 >= 0) {
    sqlite3_int64 v5 = buf;
  }
  else {
    sqlite3_int64 v5 = *(uint8_t **)buf;
  }
  int v6 = sqlite3_exec(a1, (const char *)v5, 0, 0, 0);
  if (SHIBYTE(v20) < 0) {
    operator delete(*(void **)buf);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t buf = 68289282;
    __int16 v17 = 2082;
    __int16 v18 = "";
    __int16 v19 = 1026;
    int v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"incrementalVacuum\", \"result\":%{public}d}", buf, 0x18u);
  }
  sub_1000E0900(v11);
  if (v12 < 0) {
    operator delete((void *)v11[2]);
  }
  *(void *)((char *)v13
  v14[0] = v8;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return v6 == 0;
}

void sub_10060439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  sub_1000E0900(&a15);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1006043FC(void *a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1[4] + 8) + 24;
    uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 24);
    BOOL v10 = (sqlite3 *)a1[7];
    uint64_t v11 = *(void *)(*(void *)(a1[6] + 8) + 24);
    v12[0] = 68291330;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2082;
    __int16 v16 = "elapsed";
    __int16 v17 = 2050;
    uint64_t v18 = a2;
    __int16 v19 = 2050;
    uint64_t v20 = a3;
    __int16 v21 = 2050;
    double v22 = v6;
    __int16 v23 = 1040;
    int v24 = 4;
    __int16 v25 = 2098;
    uint64_t v26 = v8;
    __int16 v27 = 2050;
    uint64_t v28 = v9;
    __int16 v29 = 2050;
    uint64_t v30 = v11;
    __int16 v31 = 2082;
    uint64_t v32 = sqlite3_db_filename(v10, "main");
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"vacuum\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"rc\":%{public, location:SqliteResult}.*P, \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)v12, 0x68u);
  }
}

BOOL sub_100604590(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  BOOL v4 = sub_10060408C(*(sqlite3 **)(a1 + 8), a2);
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v4;
}

void sub_10060463C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100604650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = sqlite3_db_filename(*(sqlite3 **)(a1 + 40), "main");
    v10[0] = 68290562;
    v10[1] = 0;
    __int16 v11 = 2082;
    char v12 = "";
    __int16 v13 = 2082;
    __int16 v14 = "elapsed";
    __int16 v15 = 2050;
    uint64_t v16 = a2;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    __int16 v19 = 2050;
    double v20 = v6;
    __int16 v21 = 2050;
    uint64_t v22 = v8;
    __int16 v23 = 2082;
    int v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"incrementalVacuum\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"pages\":%{public}lld, \"path\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x4Eu);
  }
}

BOOL sub_1006047A4(sqlite3 *a1, _DWORD *a2, int a3)
{
  if (a3) {
    double v6 = "pragma auto_vacuum = 2;";
  }
  else {
    double v6 = "pragma auto_vacuum = 0;";
  }
  int v7 = sqlite3_exec(a1, v6, 0, 0, 0);
  int v18 = v7;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v8 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289794;
    int v20 = 0;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 1026;
    int v24 = a3;
    __int16 v25 = 1040;
    int v26 = 4;
    __int16 v27 = 2098;
    uint64_t v28 = &v18;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setIncrementalVacuumEnabled\", \"enabled\":%{public}hhd, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x28u);
    int v7 = v18;
  }
  BOOL v9 = v7 == 0;
  if (a3) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  __int16 v11 = sub_10014D824(a1, "pragma auto_vacuum;");
  if (v11)
  {
    char v12 = v11;
    if (sqlite3_step(v11) == 100)
    {
      int v13 = sqlite3_column_int(v12, 0);
      sub_10003D328(a1, v12);
      if (v13 == v10) {
        return v9;
      }
      goto LABEL_17;
    }
    sub_10003D328(a1, v12);
  }
  BOOL v9 = 0;
  int v13 = -1;
LABEL_17:
  uint64_t v14 = 0;
  while (dword_101D248F0[v14] != *a2 || dword_101D248F0[v14 + 1] != a2[1])
  {
    v14 += 2;
    if (v14 == 6)
    {
      int v15 = 1;
      goto LABEL_23;
    }
  }
  int v15 = 0;
LABEL_23:
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v16 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289794;
    int v20 = 0;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 1026;
    int v24 = v13;
    __int16 v25 = 1026;
    int v26 = v10;
    __int16 v27 = 1026;
    LODWORD(v28) = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Actual auto-vacuum state does not match desired state\", \"actual\":%{public}d, \"expected\":%{public}d, \"vacuumNow\":%{public}hhd}", buf, 0x24u);
  }
  if (v15) {
    sub_1006039F0(a1);
  }
  return v9;
}

BOOL sub_100604A68(uint64_t a1)
{
  sub_100134750(__p, "pragma foreign_keys");
  sqlite3_int64 v7 = 0;
  if (v9 >= 0) {
    BOOL v2 = (char *)__p;
  }
  else {
    BOOL v2 = (char *)__p[0];
  }
  if (!sub_10003D2B8(*(sqlite3_stmt **)(a1 + 8), v2, &v7))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    sqlite3_int64 v3 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#warning unable to read pragma foreign_keys\"}", buf, 0x12u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    BOOL v4 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning unable to read pragma foreign_keys", "{\"msg%{public}.0s\":\"#warning unable to read pragma foreign_keys\"}", buf, 0x12u);
    }
  }
  sqlite3_int64 v5 = v7;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v5 == 1;
}

void sub_100604C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100604C54(sqlite3_stmt *a1, int a2, void *a3)
{
  int v6 = sqlite3_bind_blob(a1, a2, [a3 bytes], (int)[a3 length], (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  int v11 = v6;
  if (v6)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    sqlite3_int64 v7 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68290307;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2113;
      __int16 v17 = a3;
      __int16 v18 = 1026;
      int v19 = a2;
      __int16 v20 = 1040;
      int v21 = 4;
      __int16 v22 = 2098;
      __int16 v23 = &v11;
      __int16 v24 = 2081;
      __int16 v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}@, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    uint64_t v8 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      char v9 = sqlite3_sql(a1);
      *(_DWORD *)uint64_t buf = 68290307;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2113;
      __int16 v17 = a3;
      __int16 v18 = 1026;
      int v19 = a2;
      __int16 v20 = 1040;
      int v21 = 4;
      __int16 v22 = 2098;
      __int16 v23 = &v11;
      __int16 v24 = 2081;
      __int16 v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}@, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v6 == 0;
}

BOOL sub_100604EB4(sqlite3_stmt *a1, int a2, const void *a3, int a4)
{
  int v7 = sqlite3_bind_blob(a1, a2, a3, a4, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  int v12 = v7;
  if (v7)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    uint64_t v8 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68290307;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2081;
      __int16 v18 = a3;
      __int16 v19 = 1026;
      int v20 = a2;
      __int16 v21 = 1040;
      int v22 = 4;
      __int16 v23 = 2098;
      __int16 v24 = &v12;
      __int16 v25 = 2081;
      int v26 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    char v9 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      int v10 = sqlite3_sql(a1);
      *(_DWORD *)uint64_t buf = 68290307;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2081;
      __int16 v18 = a3;
      __int16 v19 = 1026;
      int v20 = a2;
      __int16 v21 = 1040;
      int v22 = 4;
      __int16 v23 = 2098;
      __int16 v24 = &v12;
      __int16 v25 = 2081;
      int v26 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":%{private, location:escape_only}s, \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v7 == 0;
}

BOOL sub_1006050E8(sqlite3_stmt *a1, int a2, int a3)
{
  int v5 = sqlite3_bind_zeroblob(a1, a2, a3);
  int v10 = v5;
  if (v5)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    int v6 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68290051;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = a2;
      __int16 v17 = 1040;
      int v18 = 4;
      __int16 v19 = 2098;
      int v20 = &v10;
      __int16 v21 = 2081;
      int v22 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BE480);
      }
    }
    int v7 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      uint64_t v8 = sqlite3_sql(a1);
      *(_DWORD *)uint64_t buf = 68290051;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = a2;
      __int16 v17 = 1040;
      int v18 = 4;
      __int16 v19 = 2098;
      int v20 = &v10;
      __int16 v21 = 2081;
      int v22 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x32u);
    }
  }
  return v5 == 0;
}

uint64_t sub_1006052FC(const char *a1)
{
  if (!strcmp(a1, "INTEGER")) {
    return 1;
  }
  if (!strcmp(a1, "FLOAT")) {
    return 2;
  }
  if (!strcmp(a1, "BLOB")) {
    return 4;
  }
  uint64_t v2 = 5;
  if (strcmp(a1, "NULL"))
  {
    if (!strcmp(a1, "TEXT")) {
      return 3;
    }
    else {
      return 5;
    }
  }
  return v2;
}

uint64_t sub_1006053A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v37 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v38 = 256;
  if (*(void *)a2
    && ((v5 = *(const char **)(a2 + 24), *(unsigned char *)(a2 + 40)) ? (BOOL v6 = v5 == 0) : (BOOL v6 = 1),
        !v6 && (int v7 = *(const char **)(a2 + 16)) != 0))
  {
    sub_10010F274((uint64_t)v33);
    uint64_t v8 = sub_100132EFC(&v34, (uint64_t)"PRAGMA table_info(", 18);
    size_t v9 = strlen(v7);
    int v10 = sub_100132EFC(v8, (uint64_t)v7, v9);
    sub_100132EFC(v10, (uint64_t)")", 1);
    std::stringbuf::str();
    if (v40[15] >= 0) {
      int v11 = buf;
    }
    else {
      int v11 = *(uint8_t **)buf;
    }
    int v12 = (sqlite3_stmt *)sub_10014D630(a1, v11);
    if ((v40[15] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    while (1)
    {
      int v13 = sqlite3_step(v12);
      if (v13 != 100) {
        break;
      }
      int v14 = sqlite3_column_text(v12, 1);
      if (!strcmp(v5, (const char *)v14))
      {
        int v15 = *(_DWORD *)(a2 + 8);
        int v16 = "INTEGER";
        if (v15 != 1)
        {
          uint64_t v17 = 0;
          do
          {
            uint64_t v18 = v17;
            v17 += 16;
          }
          while (v17 != 80 && *(_DWORD *)((char *)&unk_1022BE410 + v18 + 16) != v15);
          int v16 = *(const char **)((char *)&unk_1022BE410 + v18 + 24);
        }
        __int16 v19 = sqlite3_column_text(v12, 2);
        if (!strcmp(v16, (const char *)v19))
        {
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022BE480);
          }
          int v20 = off_1024195E8;
          if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
          {
            *(void *)uint64_t buf = 68289538;
            *(_WORD *)__int16 v40 = 2082;
            *(void *)&v40[2] = "";
            *(_WORD *)&v40[10] = 2082;
            *(void *)&v40[12] = v7;
            *(_WORD *)&v40[20] = 2082;
            char v41 = v5;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Foreign key references are valid\", \"FK_Table\":%{public, location:escape_only}s, \"FK_Col\":%{public, location:escape_only}s}", buf, 0x26u);
          }
          break;
        }
      }
    }
    sub_10003D328(*(sqlite3 **)(a1 + 8), v12);
    *(void *)uint64_t buf = 0;
    *(void *)__int16 v40 = 0;
    *(void *)&v40[8] = 0;
    std::string::operator=(&__p, (const std::string *)buf);
    sub_100450DEC((uint64_t)&v35);
    if ((v40[15] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    __int16 v21 = sub_100132EFC(&v34, (uint64_t)"SELECT indexInfo.name FROM pragma_index_list('", 46);
    size_t v22 = strlen(v7);
    __int16 v23 = sub_100132EFC(v21, (uint64_t)v7, v22);
    sub_100132EFC(v23, (uint64_t)"') AS indexList, pragma_index_info(indexList.name) AS indexInfo", 63);
    std::stringbuf::str();
    if (v40[15] >= 0) {
      __int16 v24 = buf;
    }
    else {
      __int16 v24 = *(uint8_t **)buf;
    }
    __int16 v25 = (sqlite3_stmt *)sub_10014D630(a1, v24);
    if ((v40[15] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v13 == 100)
    {
      while (sqlite3_step(v25) == 100)
      {
        int v26 = sqlite3_column_text(v25, 0);
        if (!strcmp(v5, (const char *)v26))
        {
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022BE480);
          }
          __int16 v27 = off_1024195E8;
          if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
          {
            *(void *)uint64_t buf = 68289538;
            *(_WORD *)__int16 v40 = 2082;
            *(void *)&v40[2] = "";
            *(_WORD *)&v40[10] = 2082;
            *(void *)&v40[12] = v7;
            *(_WORD *)&v40[20] = 2082;
            char v41 = v5;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Index exist\", \"FK_Table\":%{public, location:escape_only}s, \"FK_Col\":%{public, location:escape_only}s}", buf, 0x26u);
          }
          unsigned int v28 = 1;
          goto LABEL_42;
        }
      }
    }
    unsigned int v28 = 0;
LABEL_42:
    sub_10003D328(*(sqlite3 **)(a1 + 8), v25);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BE480);
    }
    __int16 v31 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v40 = 2082;
      *(void *)&v40[2] = "";
      *(_WORD *)&v40[10] = 1026;
      *(_DWORD *)&v40[12] = v13 == 100;
      *(_WORD *)&v40[16] = 1026;
      *(_DWORD *)&v40[18] = v28;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ForeignKey reference\", \"isReferenceValid\":%{public}hhd, \"isIndexed\":%{public}hhd}", buf, 0x1Eu);
    }
    if (v13 == 100) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    *(void *)((char *)v33
    uint64_t v34 = v32;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    uint64_t v29 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v29;
}

void sub_1006059D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 - 121) < 0) {
    operator delete(*(void **)(v3 - 144));
  }
  sub_101A129A8((uint64_t)va);
  sub_1019DB560(v3 - 168);
  _Unwind_Resume(a1);
}

std::string *sub_100605A40@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (!*(void *)(a1 + 8)) {
    return std::string::assign(a2, "No database");
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16)))
  {
    uint64_t v4 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
    return std::string::assign(a2, v4);
  }
  else
  {
    sub_101A678A4();
    __n128 result = (std::string *)abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_100605B00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100605B1C(uint64_t a1, const char *a2, uint64_t *a3, void *a4)
{
  sub_1000A7BA0(a3);
  a4[1] = *a4;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  int v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    int v16 = "";
    __int16 v17 = 2081;
    uint64_t v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getColumnInfo\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_10010F274((uint64_t)buf);
  uint64_t v8 = sub_100132EFC((const char **)((char *)&v16 + 6), (uint64_t)"PRAGMA table_info(", 18);
  size_t v9 = strlen(a2);
  int v10 = sub_100132EFC(v8, (uint64_t)a2, v9);
  LOBYTE(__p) = 41;
  sub_100132EFC(v10, (uint64_t)&__p, 1);
  std::stringbuf::str();
  if (v13 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_100606104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100606198(uint64_t a1, const char *a2, uint64_t *a3)
{
  sub_1000A7BA0(a3);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  uint64_t v3 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v13 = 2082;
    int v14 = "";
    __int16 v15 = 2081;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"getTableIndexColumns\", \"table\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_10010F274((uint64_t)buf);
  uint64_t v4 = sub_100132EFC((const char **)((char *)&v14 + 6), (uint64_t)"PRAGMA index_list(", 18);
  size_t v5 = strlen(a2);
  BOOL v6 = sub_100132EFC(v4, (uint64_t)a2, v5);
  LOBYTE(__p) = 41;
  sub_100132EFC(v6, (uint64_t)&__p, 1);
  std::stringbuf::str();
  if (v11 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1, (uint64_t)p_p);
}

void sub_1006067CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_1006068B8(const char *a1, int a2, int a3)
{
  ppDb = 0;
  if (a3) {
    size_t v5 = "pragma quick_check;";
  }
  else {
    size_t v5 = "pragma integrity_check;";
  }
  sub_100134750(__p, v5);
  if ((a2 - 1) >= 3) {
    int v6 = 4325378;
  }
  else {
    int v6 = ((a2 - 1) << 20) + 1179650;
  }
  if (a1[23] >= 0) {
    int v7 = a1;
  }
  else {
    int v7 = *(const char **)a1;
  }
  int v18 = sqlite3_open_v2(v7, &ppDb, v6, 0);
  if (v18)
  {
    uint64_t v8 = 0;
  }
  else
  {
    ppStmt = 0;
    __int16 v17 = 0;
    if (v20 >= 0) {
      size_t v9 = __p;
    }
    else {
      size_t v9 = (void **)__p[0];
    }
    int v10 = strlen((const char *)v9);
    int v18 = sqlite3_prepare_v2(ppDb, (const char *)v9, v10, &ppStmt, &v17);
    if (v18 || (int v18 = sqlite3_step(ppStmt), v18 != 100))
    {
      BOOL v12 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      char v11 = sqlite3_column_text(ppStmt, 0);
      uint64_t v8 = v11;
      if (v11) {
        BOOL v12 = strcmp((const char *)v11, "ok") == 0;
      }
      else {
        BOOL v12 = 0;
      }
    }
    sqlite3_finalize(ppStmt);
    if (v12)
    {
      uint64_t v13 = 1;
      goto LABEL_29;
    }
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BE480);
  }
  int v14 = off_1024195E8;
  uint64_t v13 = 0;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    if (a1[23] >= 0) {
      __int16 v15 = a1;
    }
    else {
      __int16 v15 = *(const char **)a1;
    }
    ppStmt = (sqlite3_stmt *)68290050;
    __int16 v23 = 2082;
    __int16 v24 = "";
    __int16 v25 = 2082;
    int v26 = v15;
    __int16 v27 = 1040;
    int v28 = 4;
    __int16 v29 = 2098;
    uint64_t v30 = &v18;
    __int16 v31 = 2082;
    uint64_t v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning integrity check failed\", \"path\":%{public, location:escape_only}s, \"rc\":%{public, location:SqliteResult}.*P, \"integrtiy_result\":%{public, location:escape_only}s}", (uint8_t *)&ppStmt, 0x36u);
    uint64_t v13 = 0;
  }
LABEL_29:
  sqlite3_close(ppDb);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  return v13;
}

void sub_100606B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100606B48(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100606B78(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100606BA8(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100606BD8(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __int16 v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = &v10[24 * v4];
  __int16 v15 = v14;
  int v16 = &v10[24 * v9];
  sub_100134750(v14, *a2);
  __int16 v15 = v14 + 24;
  sub_1001D7FEC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1001D8184((uint64_t)&v13);
  return v11;
}

void sub_100606CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001D8184((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100606CE0()
{
  uint64_t v1 = off_1024195E8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_100607FE8(id a1, void *a2)
{
}

uint64_t sub_100607FF0(id *a1)
{
  [a1[14] setAirplaneMode:[a1[26] airplaneMode]];
  v4[0] = [a1[14] airplaneMode];
  int v3 = 8;
  return (*((uint64_t (**)(id *, int *, unsigned __int8 *, uint64_t, uint64_t, void))*a1 + 19))(a1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
}

void sub_10060810C(id a1)
{
  qword_10247C770 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDaemonStatusSilo"];
}

uint64_t sub_1006081CC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100608A8C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247C780 != -1) {
    dispatch_once(&qword_10247C780, block);
  }
  return qword_10248A0F0;
}

uint64_t sub_100608440(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BE738);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notifying clients that CLClientManager has completed its migration steps.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::migrationPerformed()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)uint64_t buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
}

uint64_t sub_100608670(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BE738);
  }
  unint64_t v8 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
  {
    unint64_t v9 = "remove";
    uint64_t v14 = 68289794;
    int v16 = "";
    __int16 v15 = 2082;
    if (a2) {
      unint64_t v9 = "add";
    }
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    __int16 v19 = 2082;
    uint64_t v20 = a4;
    __int16 v21 = 2082;
    size_t v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Updating keep-alive client registration\", \"client\":%{public}lu, \"debugMessage\":%{public, location:escape_only}s, \"registrationType\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
  }
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 248))
    {
      uint64_t v14 = a3;
      sub_100611BF4((uint64_t **)(a1 + 216), &v14, &v14);
LABEL_14:
      uint64_t v10 = 1;
      goto LABEL_16;
    }
  }
  else if (*(void *)(a1 + 232))
  {
    uint64_t v14 = a3;
    sub_100611CB0(a1 + 216, &v14);
    if (*(unsigned char *)(a1 + 248) && !*(void *)(a1 + 232)) {
      IOAllowPowerChange(*(_DWORD *)(a1 + 124), *(void *)(a1 + 272));
    }
    goto LABEL_14;
  }
  uint64_t v10 = 0;
LABEL_16:
  uint64_t v11 = *(void **)(a1 + 240);
  if (*(void *)(a1 + 232))
  {
    if (!v11)
    {
      BOOL v12 = [[CLOSTransaction alloc] initWithDescription:"CLDaemonStatus.keepalive"];
LABEL_21:
      *(void *)(a1 + 240) = v12;
    }
  }
  else if (v11)
  {

    BOOL v12 = 0;
    goto LABEL_21;
  }
  return v10;
}

uint64_t sub_100608864(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BE778);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MetricHeartbeat, notify", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BE778);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::notifyMetricHeartbeat()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)uint64_t buf = 16;
  return (*(uint64_t (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
}

void sub_100608A8C()
{
}

void sub_100608AD8()
{
}

uint64_t sub_100608AFC(uint64_t a1, void *a2)
{
  *(void *)sub_100609A3C(a1, "CLDaemonStatus", a2) = off_1022BE598;
  id v3 = [[CLDaemonStatusStateTracker alloc] initInSilo:*(void *)(a1 + 40) withIdentifier:a1];
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 112) = v3;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  [v3 setThermalLevel:0xFFFFFFFFLL];
  [*(id *)(a1 + 112) setThermalPressure:0xFFFFFFFFLL];
  io_connect_t v4 = IORegisterForSystemPower((void *)a1, (IONotificationPortRef *)(a1 + 128), (IOServiceInterestCallback)sub_100609AE8, (io_object_t *)(a1 + 120));
  *(_DWORD *)(a1 + 124) = v4;
  if (v4)
  {
    RunLoopSource = IONotificationPortCreate(kIOMainPortDefault);
    *(void *)(a1 + 144) = RunLoopSource;
    if (RunLoopSource) {
      RunLoopSource = IONotificationPortGetRunLoopSource(RunLoopSource);
    }
    *(void *)(a1 + 152) = RunLoopSource;
    CFRunLoopSourceRef v6 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(a1 + 128));
    *(void *)(a1 + 136) = v6;
    if (v6)
    {
      uint64_t v7 = (__CFRunLoop *)sub_1001C2710();
      CFRunLoopAddSource(v7, *(CFRunLoopSourceRef *)(a1 + 136), kCFRunLoopDefaultMode);
    }
  }
  sockaddr address = (sockaddr)xmmword_101D24A80;
  unint64_t v8 = SCNetworkReachabilityCreateWithAddress(kCFAllocatorDefault, &address);
  *(void *)(a1 + 160) = v8;
  if (!v8)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    __int16 v29 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "could not create network reachability", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return a1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    LOWORD(context.version) = 0;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v30);
LABEL_78:
    if (v30 != buf) {
      free(v30);
    }
    return a1;
  }
  context.version = 0;
  context.info = (void *)a1;
  memset(&context.retain, 0, 24);
  if (!SCNetworkReachabilitySetCallback(v8, (SCNetworkReachabilityCallBack)sub_100609D1C, &context))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    __int16 v31 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "could not set client callback for network reachability", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return a1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_77;
    }
    goto LABEL_80;
  }
  unint64_t v9 = *(const __SCNetworkReachability **)(a1 + 160);
  uint64_t v10 = (__CFRunLoop *)sub_1001C2710();
  if (SCNetworkReachabilityScheduleWithRunLoop(v9, v10, kCFRunLoopCommonModes))
  {
    SCNetworkReachabilityFlags flags = 0;
    if (SCNetworkReachabilityGetFlags(*(SCNetworkReachabilityRef *)(a1 + 160), &flags))
    {
      if ((flags & 0x40000) != 0) {
        int v11 = 1;
      }
      else {
        int v11 = 2;
      }
      sub_100609F44(a1, v11 & ((int)(flags << 30) >> 31));
      *(void *)uint64_t buf = 0;
      *(_WORD *)&uint8_t buf[8] = 0;
      *(_DWORD *)&uint8_t buf[4] = [*(id *)(a1 + 112) reachability];
      *(_WORD *)&uint8_t buf[8] = 0;
      LODWORD(v39.version) = 6;
      (*(void (**)(uint64_t, SCDynamicStoreContext *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v39, buf, 1, 0xFFFFFFFFLL, 0);
    }
    v39.version = 0;
    v39.info = (void *)a1;
    memset(&v39.retain, 0, 24);
    BOOL v12 = SCDynamicStoreCreate(kCFAllocatorDefault, @"com.apple.locationd", (SCDynamicStoreCallBack)sub_100609FB8, &v39);
    *(void *)(a1 + 168) = v12;
    *(void *)(a1 + 176) = SCDynamicStoreCreateRunLoopSource(kCFAllocatorDefault, v12, 0);
    sub_10060A1E0((SCDynamicStoreRef *)a1);
    CFArrayRef v13 = CFArrayCreate(kCFAllocatorDefault, (const void **)&off_1022BE668, 1, &kCFTypeArrayCallBacks);
    SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 168), v13, 0);
    uint64_t v14 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopAddSource(v14, *(CFRunLoopSourceRef *)(a1 + 176), kCFRunLoopDefaultMode);
    CFRelease(v13);
    if (notify_register_check("com.apple.springboard.hasBlankedScreen", (int *)(a1 + 288)))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      __int16 v15 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = "com.apple.springboard.hasBlankedScreen";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        int v42 = 136315138;
        std::string::size_type v43 = "com.apple.springboard.hasBlankedScreen";
        uint64_t v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v34);
        if (v34 != buf) {
          free(v34);
        }
      }
    }
    if (notify_register_check("com.apple.springboard.lockstate", (int *)(a1 + 292)))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v16 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = "com.apple.springboard.lockstate";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        int v42 = 136315138;
        std::string::size_type v43 = "com.apple.springboard.lockstate";
        size_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v35);
        if (v35 != buf) {
          free(v35);
        }
      }
    }
    if (notify_register_check("com.apple.system.lowpowermode", (int *)(a1 + 296)))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      __int16 v17 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = "com.apple.system.lowpowermode";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Could not register for notification %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        int v42 = 136315138;
        std::string::size_type v43 = "com.apple.system.lowpowermode";
        __int16 v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v36);
        if (v36 != buf) {
          free(v36);
        }
      }
    }
    if (notify_register_check("com.apple.system.thermalpressurelevel", (int *)(a1 + 300)))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      uint64_t v18 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "com.apple.system.thermalpressurelevel";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Could not register for notification %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        int v42 = 136446210;
        std::string::size_type v43 = "com.apple.system.thermalpressurelevel";
        uint64_t v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v37);
        if (v37 != buf) {
          free(v37);
        }
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_10060A5C8, @"com.apple.springboard.hasBlankedScreen", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    uint64_t v20 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v20, (const void *)a1, (CFNotificationCallback)sub_10060A804, @"com.apple.springboard.lockstate", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    __int16 v21 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v21, (const void *)a1, (CFNotificationCallback)sub_10060AA40, @"com.apple.system.lowpowermode", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    CFStringRef v22 = CFStringCreateWithCStringNoCopy(0, kOSThermalNotificationName, 0x8000100u, kCFAllocatorNull);
    __int16 v23 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v23, (const void *)a1, (CFNotificationCallback)sub_10060AC7C, v22, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    __int16 v24 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v24, (const void *)a1, (CFNotificationCallback)sub_10060AEB8, @"com.apple.system.thermalpressurelevel", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_10060B0F4((int *)a1);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_10060B424((int *)a1);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_10060B754(a1);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_10060B958((id *)a1);
    CFNotificationCenterGetDarwinNotifyCenter();
    sub_10060B9EC(a1);
    CFRelease(v22);
    id v25 = objc_alloc_init((Class)NSAutoreleasePool);
    *(void *)(a1 + 208) = objc_alloc_init((Class)RadiosPreferences);
    [*(id *)(a1 + 208) setDelegate:objc_alloc_init(CLDaemonStatusInternal)];
    [*(id *)(a1 + 112) setAirplaneMode:[*(id *)(a1 + 208) airplaneMode]];
    [v25 drain];
    sub_10060BBE8((void *)a1);
    sub_10060C0B4(a1, v26, 2);
    sub_10060C144((unsigned char *)a1);
    xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v27, XPC_ACTIVITY_INTERVAL, 14400);
    xpc_dictionary_set_int64(v27, XPC_ACTIVITY_GRACE_PERIOD, 1800);
    xpc_dictionary_set_string(v27, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v27, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    id v28 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLDaemonStatus"];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10060C398;
    handler[3] = &unk_1022B9CD0;
    handler[4] = v28;
    xpc_activity_register("com.apple.locationd.MetricHeartbeat", v27, handler);
    xpc_release(v27);
    return a1;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BE738);
  }
  uint64_t v32 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "could not schedule network reachability on run loop", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_77:
      LOWORD(v39.version) = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)", "%s\n", v30);
      goto LABEL_78;
    }
LABEL_80:
    dispatch_once(&qword_102419600, &stru_1022BE738);
    goto LABEL_77;
  }
  return a1;
}

void sub_1006099CC(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v2, *v3);
  sub_10060C584(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100609A3C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022BE7A8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100609ACC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100609AE8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onPowerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onPowerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v10 = [*(id *)(a1 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100611078;
  void v11[3] = &unk_1022B8680;
  int v12 = a2;
  int v13 = a3;
  uint64_t v11[4] = a1;
  v11[5] = a4;
  [v10 sync:v11];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100609CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100609D1C(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    CFRunLoopSourceRef v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onNetworkReachabilityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onNetworkReachabilityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1006110B8;
  v9[3] = &unk_1022BE758;
  void v9[4] = a3;
  v9[5] = a1;
  int v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100609F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100609F44(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 112) reachability];
  if (result != a2)
  {
    [*(id *)(a1 + 112) setReachability:a2];
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLNetworkLocationProvider"];
    return _[v5 setCurrentReachability:a2];
  }
  return result;
}

void sub_100609FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    CFRunLoopSourceRef v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onDynamicStore", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onDynamicStore\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1006110C8;
  v9[3] = &unk_1022B8680;
  void v9[4] = a3;
  v9[5] = a1;
  void v9[6] = a2;
  [v8 sync:v9];
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060A1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060A1E0(SCDynamicStoreRef *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1[21], @"com.apple.MobileInternetSharing");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v2, @"Hosts");
    if (Value)
    {
      CFDictionaryRef v5 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"Type");
      if (v5)
      {
        CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(v5, @"AirPort");
        if (v6)
        {
          valuePtr[0] = 0;
          if (CFNumberGetValue(v6, kCFNumberIntType, valuePtr))
          {
            v11[0] = 12;
            (*((void (**)(SCDynamicStoreRef *, int *, uint8_t *, uint64_t, uint64_t, void))*a1 + 19))(a1, v11, valuePtr, 1, 0xFFFFFFFFLL, 0);
          }
LABEL_28:
          CFRelease(v3);
          return;
        }
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        unint64_t v9 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)valuePtr = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "cannot get kMISPropHostsTypeAirPort", valuePtr, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_28;
        }
        bzero(valuePtr, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        LOWORD(v11[0]) = 0;
      }
      else
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        id v8 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)valuePtr = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "cannot get kMISPropHostsCurrentByType", valuePtr, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_28;
        }
        bzero(valuePtr, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        LOWORD(v11[0]) = 0;
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      uint64_t v7 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)valuePtr = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "cannot get kMISPropHosts", valuePtr, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_28;
      }
      bzero(valuePtr, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      LOWORD(v11[0]) = 0;
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::onDynamicStore(SCDynamicStoreRef, CFArrayRef)", "%s\n", v10);
    if (v10 != (char *)valuePtr) {
      free(v10);
    }
    goto LABEL_28;
  }
}

void sub_10060A5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onDisplayNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    char v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onDisplayNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1006110D0;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060A7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060A804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onLockNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    char v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onLockNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1006110D8;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060AA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060AA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onBatterySaverModeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    char v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onBatterySaverModeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1006110E0;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060AC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060AC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onThermalNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    char v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onThermalNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1006110E8;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060AE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060AEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onThermalPressureNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    char v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onThermalPressureNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1006110F0;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060B0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060B0F4(int *a1)
{
  uint64_t state64 = 0;
  if (notify_get_state(a1[72], &state64))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    CFDictionaryRef v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for com.apple.springboard.hasBlankedScreen", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      v5[0] = 0;
      CFDictionaryRef v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::onDisplayNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n");
LABEL_19:
      if (v3 != buf) {
        free(v3);
      }
    }
  }
  else
  {
    LOBYTE(v5[0]) = state64 == 0;
    *(_DWORD *)uint64_t buf = 10;
    (*(void (**)(int *, uint8_t *, _WORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v5, 1, 0xFFFFFFFFLL, 0);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    io_connect_t v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v10 = LOBYTE(v5[0]);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "display is %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v7 = 67109120;
      int v8 = LOBYTE(v5[0]);
      CFDictionaryRef v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onDisplayNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10060B424(int *a1)
{
  uint64_t state64 = 0;
  if (notify_get_state(a1[73], &state64))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    CFDictionaryRef v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for com.apple.springboard.lockstate", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      v5[0] = 0;
      CFDictionaryRef v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::onLockNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n");
LABEL_19:
      if (v3 != buf) {
        free(v3);
      }
    }
  }
  else
  {
    LOBYTE(v5[0]) = state64 != 0;
    *(_DWORD *)uint64_t buf = 11;
    (*(void (**)(int *, uint8_t *, _WORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v5, 1, 0xFFFFFFFFLL, 0);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    io_connect_t v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v10 = LOBYTE(v5[0]);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "lock screen is %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v7 = 67109120;
      int v8 = LOBYTE(v5[0]);
      CFDictionaryRef v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onLockNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10060B754(uint64_t a1)
{
  uint64_t state64 = 0;
  if (notify_get_state(*(_DWORD *)(a1 + 296), &state64))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    CFDictionaryRef v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Could not get state for com.apple.system.lowpowermode", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      LOWORD(v4) = 0;
      CFDictionaryRef v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::onBatterySaverModeNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 112) setBatterySaverModeEnabled:state64 != 0];
    buf[0] = [*(id *)(a1 + 112) batterySaverModeEnabled];
    int v4 = 15;
    (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v4, buf, 1, 0xFFFFFFFFLL, 0);
  }
}

id sub_10060B958(id *a1)
{
  v4[0] = OSThermalNotificationCurrentLevel();
  id result = [a1[14] thermalLevel];
  if (result != v4[0])
  {
    int v3 = 13;
    (*((void (**)(id *, int *, _DWORD *, uint64_t, uint64_t, void))*a1 + 19))(a1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
    return [a1[14] setThermalLevel:v4[0]];
  }
  return result;
}

void sub_10060B9EC(uint64_t a1)
{
  uint64_t state64 = 0;
  if (notify_get_state(*(_DWORD *)(a1 + 300), &state64))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    CFDictionaryRef v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Could not get state for thermal pressure", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      LOWORD(v4) = 0;
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::onThermalPressureNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 112) setThermalPressure:state64];
    *(_DWORD *)uint64_t buf = [*(id *)(a1 + 112) thermalPressure];
    int v4 = 18;
    (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v4, buf, 1, 0xFFFFFFFFLL, 0);
  }
}

void sub_10060BBE8(void *a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BE738);
  }
  CFDictionaryRef v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for restricted mode notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    LOWORD(context.version) = 0;
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::registerForRestrictedPowerModeNotifications()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  int v3 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.registerForAirplaneModeNotifications", @"com.apple.radios.plist");
  a1[38] = v3;
  if (v3)
  {
    context.version = 0;
    memset(&context.retain, 0, 24);
    context.info = a1;
    if (SCPreferencesSetCallback(v3, (SCPreferencesCallBack)sub_10060EE40, &context))
    {
      int v4 = (const __SCPreferences *)a1[38];
      CFDictionaryRef v5 = (__CFRunLoop *)sub_1001C2710();
      if (!SCPreferencesScheduleWithRunLoop(v4, v5, kCFRunLoopDefaultMode))
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        CFNumberRef v6 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Failed to schedule SCPreferences notification", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 == -1)
          {
LABEL_35:
            int v10 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::registerForRestrictedPowerModeNotifications()", "%s\n", v10);
            if (v10 != (char *)buf) {
              free(v10);
            }
            return;
          }
LABEL_37:
          dispatch_once(&qword_102419600, &stru_1022BE738);
          goto LABEL_35;
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v8 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to set SCPreferences callback", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 == -1) {
          goto LABEL_35;
        }
        goto LABEL_37;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    int v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to create SCPreferences", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      LOWORD(context.version) = 0;
      goto LABEL_35;
    }
  }
}

uint64_t sub_10060C0B4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 2) != 0)
  {
    int v3 = (id *)result;
    [*(id *)(result + 112) setRestrictedMode:sub_10060EDD0(result)];
    v5[0] = [v3[14] restrictedMode];
    int v4 = 14;
    return (*((uint64_t (**)(id *, int *, unsigned __int8 *, uint64_t, uint64_t, void))*v3 + 19))(v3, &v4, v5, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_10060C144(unsigned char *a1)
{
  BOOL v9 = 0;
  uint64_t v2 = sub_1000A6958();
  if (sub_1000D2988(v2, off_10241CD00, &v9)) {
    BOOL v3 = !v9;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    int v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "locationd was started after an unclean shutdown", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::isStartFromUncleanShutdown()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    a1[312] = 1;
    *(_DWORD *)uint64_t buf = 17;
    (*(void (**)(unsigned char *, uint8_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
  }
  uint64_t v5 = sub_1000A6958();
  buf[0] = 0;
  sub_1000EA238(v5, off_10241CD00, buf);
  uint64_t v6 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v6 + 944))();
}

id sub_10060C398(uint64_t a1, xpc_activity_t activity)
{
  id result = (id)xpc_activity_get_state(activity);
  if (result == (id)2)
  {
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BE778);
      }
      uint64_t v5 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        xpc_activity_state_t state = xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "failed to set MetricHeartbeat activity as DONE.  current state is %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BE778);
        }
        xpc_activity_get_state(activity);
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonStatus::CLDaemonStatus(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    return [*(id *)(a1 + 32) triggerMetricHeartbeatNotification];
  }
  return result;
}

uint64_t sub_10060C584(uint64_t a1)
{
  *(void *)a1 = off_1022BE7A8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10060C608(uint64_t a1)
{
  *(void *)a1 = off_1022BE598;
  [*(id *)(a1 + 264) invalidate];

  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 240) = 0;

  *(void *)(a1 + 256) = 0;
  if (*(void *)(a1 + 152))
  {
    uint64_t v2 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopRemoveSource(v2, *(CFRunLoopSourceRef *)(a1 + 152), kCFRunLoopDefaultMode);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 152));
    CFRelease(*(CFTypeRef *)(a1 + 152));
  }
  BOOL v3 = *(IONotificationPort **)(a1 + 144);
  if (v3) {
    IONotificationPortDestroy(v3);
  }
  if (*(void *)(a1 + 136))
  {
    int v4 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopRemoveSource(v4, *(CFRunLoopSourceRef *)(a1 + 136), kCFRunLoopDefaultMode);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 136));
    CFRelease(*(CFTypeRef *)(a1 + 136));
  }
  if (*(_DWORD *)(a1 + 120)) {
    IODeregisterForSystemPower((io_object_t *)(a1 + 120));
  }
  uint64_t v5 = *(IONotificationPort **)(a1 + 128);
  if (v5)
  {
    IONotificationPortDestroy(v5);
    *(void *)(a1 + 128) = 0;
  }
  io_connect_t v6 = *(_DWORD *)(a1 + 124);
  if (v6) {
    IOServiceClose(v6);
  }
  int v7 = *(const __SCNetworkReachability **)(a1 + 160);
  if (v7)
  {
    int v8 = (__CFRunLoop *)sub_1001C2710();
    if (SCNetworkReachabilityUnscheduleFromRunLoop(v7, v8, kCFRunLoopCommonModes))
    {
      CFRelease(*(CFTypeRef *)(a1 + 160));
      *(void *)(a1 + 160) = 0;
    }
  }
  if (*(void *)(a1 + 176))
  {
    BOOL v9 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopRemoveSource(v9, *(CFRunLoopSourceRef *)(a1 + 176), kCFRunLoopDefaultMode);
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 176));
    CFRelease(*(CFTypeRef *)(a1 + 176));
  }
  int v10 = *(const void **)(a1 + 168);
  if (v10) {
    CFRelease(v10);
  }
  char v11 = *(void **)(a1 + 208);
  if (v11)
  {
    id v12 = [v11 delegate];
    [*(id *)(a1 + 208) setDelegate:0];
  }
  sub_10060C7E4(a1);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, (const void *)a1);
  sub_10060C9CC(a1);

  *(void *)(a1 + 112) = 0;
  sub_1000F5BB0(a1 + 216, *(void **)(a1 + 224));

  return sub_10060C584(a1);
}

void sub_10060C7E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BE738);
    }
    uint64_t v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering for battery status changed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::unregisterForBatteryStatusChanges()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    io_object_t v3 = *(_DWORD *)(a1 + 200);
    if (v3)
    {
      IOObjectRelease(v3);
      *(_DWORD *)(a1 + 200) = 0;
    }
    int v4 = *(IONotificationPort **)(a1 + 192);
    if (v4)
    {
      CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(v4);
      if (RunLoopSource)
      {
        io_connect_t v6 = RunLoopSource;
        int v7 = (__CFRunLoop *)sub_1001C2710();
        CFRunLoopRemoveSource(v7, v6, kCFRunLoopDefaultMode);
      }
      IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 192));
      *(void *)(a1 + 192) = 0;
    }
    *(unsigned char *)(a1 + 184) = 0;
  }
}

void sub_10060C9CC(uint64_t a1)
{
  uint64_t v1 = *(const __SCPreferences **)(a1 + 304);
  if (v1)
  {
    io_object_t v3 = (__CFRunLoop *)sub_1001C2710();
    SCPreferencesUnscheduleFromRunLoop(v1, v3, kCFRunLoopDefaultMode);
    CFRelease(*(CFTypeRef *)(a1 + 304));
    *(void *)(a1 + 304) = 0;
  }
}

void sub_10060CA20(uint64_t a1)
{
  sub_10060C608(a1);

  operator delete();
}

void *sub_10060CA58@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_10060CAD4(unsigned char *a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 18)
  {
    if (v2 == 20)
    {
      io_object_t v3 = *(void (**)(void))(*(void *)a1 + 144);
      goto LABEL_11;
    }
    if (v2 == 19)
    {
      io_object_t v3 = *(void (**)(void))(*(void *)a1 + 144);
      goto LABEL_11;
    }
  }
  else if (v2 == 7)
  {
    sub_10060CBBC((uint64_t)a1);
  }
  else if (v2 == 17 && a1[312])
  {
    io_object_t v3 = *(void (**)(void))(*(void *)a1 + 144);
LABEL_11:
    v3();
  }
  return 1;
}

void sub_10060CBBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 184))
  {
    if (sub_100737EEC())
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v2 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for battery status changed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        char v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::registerForBatteryStatusChanges()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      *(_DWORD *)uint64_t buf = 0;
      io_object_t v3 = IONotificationPortCreate(kIOMainPortDefault);
      *(void *)(a1 + 192) = v3;
      if (v3)
      {
        CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(v3);
        if (RunLoopSource)
        {
          uint64_t v5 = RunLoopSource;
          io_connect_t v6 = (__CFRunLoop *)sub_1001C2710();
          CFRunLoopAddSource(v6, v5, kCFRunLoopDefaultMode);
          int v7 = *(IONotificationPort **)(a1 + 192);
          CFDictionaryRef v8 = IOServiceMatching("IOPMPowerSource");
          if (!IOServiceAddMatchingNotification(v7, "IOServiceFirstMatch", v8, (IOServiceMatchingCallback)sub_10060EBAC, (void *)a1, (io_iterator_t *)buf))sub_10060E8D8(a1, *(io_iterator_t *)buf); {
          IOObjectRelease(*(io_object_t *)buf);
          }
        }
        else
        {
          IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 192));
          *(void *)(a1 + 192) = 0;
        }
      }
      *(unsigned char *)(a1 + 184) = 1;
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      BOOL v9 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Attempting to register for battery status changes on a battery-less device, no-op", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::registerForBatteryStatusChanges()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

uint64_t sub_10060CF30(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 20)
  {
    int v2 = *(void (**)(void))(*(void *)a1 + 144);
    goto LABEL_5;
  }
  if (*a2 == 19)
  {
    int v2 = *(void (**)(void))(*(void *)a1 + 144);
LABEL_5:
    v2();
  }
  return 1;
}

void sub_10060CFC8(uint64_t a1, uint64_t a2, unsigned int a3, intptr_t a4)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BE738);
  }
  int v7 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 232);
    *(_DWORD *)uint64_t buf = 68289538;
    int v33 = 0;
    __int16 v34 = 2082;
    size_t v35 = "";
    __int16 v36 = 2050;
    uint64_t v37 = a3;
    __int16 v38 = 2050;
    uint64_t v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received IOKit notification\", \"sleepNotification\":%{public, location:IOMessage}lld, \"keepAliveClientCount\":%{public}lu}", buf, 0x26u);
  }
  HIDWORD(v9) = a3;
  LODWORD(v9) = a3 + 536870288;
  switch((v9 >> 4))
  {
    case 0u:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      int v10 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "system can sleep request", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        __int16 v31 = 0;
        char v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      goto LABEL_35;
    case 1u:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      id v12 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "system entering sleep", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        __int16 v31 = 0;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      *(_DWORD *)uint64_t buf = 2;
      (*(void (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
      *(unsigned char *)(a1 + 248) = 1;
      if (*(void *)(a1 + 264))
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        int v13 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Sleep transaction grace timer still pending on will sleep", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BE738);
          }
          __int16 v31 = 0;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        [*(id *)(a1 + 264) invalidate];

        *(void *)(a1 + 264) = 0;
      }
      __int16 v14 = [[CLOSTransaction alloc] initWithDescription:"CLDaemonStatus.sleeping"];
      if (*(void *)(a1 + 256))
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        char v15 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Already holding sleep state transaction on will sleep", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BE738);
          }
          __int16 v31 = 0;
          xpc_object_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
      }
      *(void *)(a1 + 256) = v14;
      *(void *)(a1 + 272) = a4;
      if (!*(void *)(a1 + 232)) {
LABEL_35:
      }
        IOAllowPowerChange(*(_DWORD *)(a1 + 124), a4);
      return;
    case 2u:
      goto LABEL_53;
    case 9u:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      __int16 v16 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "system has powered on", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        __int16 v31 = 0;
        __int16 v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      if (!*(void *)(a1 + 256))
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        int v17 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#warning No sleep state tranaction on has powered on", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BE738);
          }
          __int16 v31 = 0;
          id v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
      }
      id v18 = [*(id *)(a1 + 40) newTimer];
      *(void *)(a1 + 264) = v18;
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10060DD3C;
      v30[3] = &unk_1022A3020;
      v30[4] = a1;
      [v18 setHandler:v30];
      [*(id *)(a1 + 264) setNextFireDelay:5.0];
      return;
    case 0xBu:
      *(CFAbsoluteTime *)(a1 + 280) = CFAbsoluteTimeGetCurrent();
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      uint64_t v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "system will power on", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        __int16 v31 = 0;
        id v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
LABEL_53:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      __int16 v20 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "system exiting sleep", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        __int16 v31 = 0;
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      *(_DWORD *)uint64_t buf = 3;
      (*(void (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
      *(unsigned char *)(a1 + 248) = 0;
      if (a3 == -536870256)
      {
        if (!*(void *)(a1 + 256))
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BE738);
          }
          __int16 v21 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#warning No sleep state tranaction on will not sleep", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022BE738);
            }
            __int16 v31 = 0;
            __int16 v29 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::onPowerNotification(io_service_t, natural_t, void *)", "%s\n", v29);
            if (v29 != (char *)buf) {
              free(v29);
            }
          }
        }

        *(void *)(a1 + 256) = 0;
      }
      break;
    default:
      return;
  }
}

void sub_10060DD3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);

  *(void *)(v1 + 256) = 0;
}

void sub_10060DD68(uint64_t a1, uint64_t a2, int a3)
{
  double v5 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 280);
  unsigned int v6 = [*(id *)(a1 + 112) reachability];
  unsigned int v7 = v6;
  int v8 = a3 << 30;
  if ((a3 & 0x40000) != 0) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  uint64_t v10 = v9 & (v8 >> 31);
  v14[0] = v6;
  v14[1] = v9 & (v8 >> 31);
  int v11 = *(unsigned __int8 *)(a1 + 248);
  char v15 = *(unsigned char *)(a1 + 248);
  BOOL v12 = v5 >= 0.0;
  if (v5 >= 3.0) {
    BOOL v12 = 0;
  }
  BOOL v16 = v12;
  sub_100609F44(a1, v10);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BE738);
  }
  int v13 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68290050;
    __int16 v19 = 2082;
    int v18 = 0;
    __int16 v20 = "";
    __int16 v21 = 1026;
    int v22 = v11;
    __int16 v23 = 2050;
    uint64_t v24 = v10;
    __int16 v25 = 1026;
    int v26 = a3;
    __int16 v27 = 2050;
    double v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reachability information\", \"aboutToSleep\":%{public}hhd, \"reachability\":%{public, location:CLDaemonStatus_Type::Reachability}lld, \"reachabilityFlags\":%{public}d, \"timeSinceWake_s\":\"%{public}.09f\"}", buf, 0x32u);
  }
  if (v7 != v10)
  {
    *(_DWORD *)uint64_t buf = 6;
    (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v14, 1, 0xFFFFFFFFLL, 0);
  }
}

uint64_t sub_10060DF30(int a1)
{
  BOOL v2 = sub_1001B7CA8();
  if (a1 == 4 && v2) {
    return 1;
  }
  LODWORD(result) = sub_100743004();
  if (a1 == 3) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_10060DF74(void *a1, io_registry_entry_t entry)
{
  uint64_t v42 = 0;
  *((void *)&v41 + 1) = 0;
  int v4 = (id)IORegistryEntryCreateCFProperty(entry, @"CurrentCapacity", kCFAllocatorDefault, 0);
  double v5 = (id)IORegistryEntryCreateCFProperty(entry, @"MaxCapacity", kCFAllocatorDefault, 0);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BE6F8);
    }
    unsigned int v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "cannot find current or maximum capacity", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BE6F8);
      }
      __int16 v40 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v8 = [v5 intValue];
    int v9 = [v4 intValue];
    int v10 = v9;
    if (v8) {
      int v11 = v8;
    }
    else {
      int v11 = 100;
    }
    double v12 = fmin((float)v9 * 100.0 / (float)v11, 100.0);
    if (v12 >= 0.0) {
      double v13 = v12;
    }
    else {
      double v13 = 0.0;
    }
    *(double *)&long long v41 = v13;
    __int16 v14 = (id)IORegistryEntryCreateCFProperty(entry, @"ExternalConnected", kCFAllocatorDefault, 0);
    if (v14)
    {
      unsigned int v15 = [v14 BOOLValue];
      BYTE9(v41) = v15;
      HIDWORD(v41) = 0;
      BOOL v16 = (id)IORegistryEntryCreateCFProperty(entry, @"AdapterDetails", kCFAllocatorDefault, 0);
      int v17 = (__CFString *)[v16 objectForKeyedSubscript:@"Description"];
      if (v17)
      {
        int v18 = v17;
        if ([(__CFString *)v17 hasPrefix:@"batt"])
        {
          int v19 = 1;
        }
        else if ([(__CFString *)v18 hasPrefix:@"usb"])
        {
          int v19 = 2;
        }
        else if ([(__CFString *)v18 hasPrefix:@"external"])
        {
          int v19 = 3;
        }
        else
        {
          if (![(__CFString *)v18 hasSuffix:@"arcas"])
          {
            unsigned int v37 = 0;
            goto LABEL_42;
          }
          int v19 = 4;
        }
        unsigned int v37 = v19;
        HIDWORD(v41) = v19;
      }
      else
      {
        unsigned int v37 = 0;
        int v18 = @"none";
      }
LABEL_42:
      id v22 = [v16 objectForKeyedSubscript:@"FamilyCode"];
      if (v22)
      {
        unsigned int v23 = [v22 intValue];
      }
      else
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BE738);
        }
        uint64_t v24 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Failed to get charger family", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BE738);
          }
          __int16 v40 = 0;
          size_t v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)", "%s\n", v35);
          if (v35 != (char *)buf) {
            free(v35);
          }
        }
        unsigned int v23 = 0;
      }
      HIDWORD(v42) = v23;
      __int16 v25 = (id)IORegistryEntryCreateCFProperty(entry, @"FullyCharged", kCFAllocatorDefault, 0);
      if (v25)
      {
        unsigned int v26 = [v25 BOOLValue];
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022BE6F8);
        }
        __int16 v27 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "cannot find charged status\n", buf, 2u);
        }
        unsigned int v26 = 0;
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022BE6F8);
          }
          __int16 v40 = 0;
          __int16 v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)", "%s\n", v36);
          if (v36 != (char *)buf) {
            free(v36);
          }
          unsigned int v26 = 0;
        }
      }
      BYTE8(v41) = v26;
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      double v28 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68290818;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v44 = 2082;
        *(void *)&void v44[2] = "";
        *(_WORD *)&v44[10] = 2114;
        *(void *)&v44[12] = v18;
        *(_WORD *)&v44[20] = 2050;
        *(void *)&v44[22] = v37;
        *(_WORD *)&v44[30] = 1026;
        *(_DWORD *)int v45 = (int)v13;
        *(_WORD *)&v45[4] = 1026;
        *(_DWORD *)size_t v46 = v23;
        *(_WORD *)&v46[4] = 1026;
        unsigned int v47 = v26;
        __int16 v48 = 1026;
        unsigned int v49 = v15;
        __int16 v50 = 1026;
        int v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"adapter details\", \"adapterDescription\":%{public, location:escape_only}@, \"batteryChargerType\":%{public, location:CLBatteryChargerType}lld, \"level\":%{public}d, \"family\":%{public}u, \"fullyCharged\":%{public}hhd, \"connected\":%{public}hhd, \"wasConnected\":%{public}hhd}", buf, 0x44u);
      }
      __int16 v29 = (void *)a1[14];
      if (v29)
      {
        [v29 batteryData];
        int v30 = v44[1];
      }
      else
      {
        int v30 = 0;
        *(void *)uint64_t buf = 0;
        *(void *)uint64_t v44 = 0;
        *(void *)&v44[8] = 0;
      }
      BOOL v31 = 1;
      if (v30 == v15 && v44[0] == v26 && vabdd_f64(*(double *)buf, v13) < 1.0) {
        BOOL v31 = *(_DWORD *)&v44[4] != v37;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BE738);
      }
      uint64_t v32 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68290306;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v44 = 2082;
        *(void *)&void v44[2] = "";
        *(_WORD *)&v44[10] = 1040;
        *(_DWORD *)&v44[12] = 24;
        *(_WORD *)&v44[16] = 2098;
        *(void *)&v44[18] = &v41;
        *(_WORD *)&v44[26] = 1026;
        *(_DWORD *)&v44[28] = v10;
        *(_WORD *)int v45 = 1026;
        *(_DWORD *)&void v45[2] = v11;
        *(_WORD *)size_t v46 = 1026;
        *(_DWORD *)&v46[2] = v31;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"battery capacity info\", \"batteryStatus\":%{public, location:CLDaemonStatus_Type::Battery}.*P, \"currentCapacity\":%{public}d, \"maximumCapacity\":%{public}d, \"batteryIsDifferent\":%{public}hhd}", buf, 0x34u);
      }
      if (v31)
      {
        int v33 = (void *)a1[14];
        if (v33)
        {
          [v33 batteryData];
          char v34 = v44[1];
          int v33 = (void *)a1[14];
        }
        else
        {
          char v34 = 0;
        }
        LOBYTE(v42) = v34;
        long long v38 = v41;
        uint64_t v39 = v42;
        [v33 setBatteryData:&v38];
        *(_DWORD *)uint64_t buf = 7;
        (*(void (**)(void *, uint8_t *, long long *, uint64_t, uint64_t, void))(*a1 + 152))(a1, buf, &v41, 1, 0xFFFFFFFFLL, 0);
      }
      return;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BE6F8);
    }
    __int16 v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "cannot find connected status", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BE6F8);
      }
      __int16 v40 = 0;
LABEL_32:
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

uint64_t sub_10060E8D8(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_registry_entry_t v5 = result;
    do
    {
      if (!IOServiceAddInterestNotification(*(IONotificationPortRef *)(a1 + 192), v5, "IOGeneralInterest", (IOServiceInterestCallback)sub_10060E978, (void *)a1, (io_object_t *)(a1 + 200)))sub_10060DF74((void *)a1, v5); {
      IOObjectRelease(v5);
      }
      uint64_t result = IOIteratorNext(iterator);
      io_registry_entry_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_10060E978(uint64_t a1, int a2, int a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onBatteryStatusChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onBatteryStatusChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v10 = [*(id *)(a1 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100611128;
  void v11[3] = &unk_1022B8680;
  int v12 = a2;
  int v13 = a3;
  int v11[4] = a1;
  v11[5] = a4;
  [v10 sync:v11];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060EB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060EBAC(uint64_t a1, int a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    int v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onMatchedBatteries", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    io_registry_entry_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      BOOL v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onMatchedBatteries\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  id v6 = [*(id *)(a1 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10061114C;
  void v7[3] = &unk_1022B2410;
  void v7[4] = a1;
  int v8 = a2;
  [v6 sync:v7];
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060EDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

const __SCPreferences *sub_10060EDD0(uint64_t a1)
{
  uint64_t result = *(const __SCPreferences **)(a1 + 304);
  if (result)
  {
    SCPreferencesSynchronize(result);
    uint64_t result = (const __SCPreferences *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 304), @"LowPowerMode");
    if (result)
    {
      CFBooleanRef v3 = result;
      CFTypeID v4 = CFGetTypeID(result);
      if (v4 == CFBooleanGetTypeID()) {
        return (const __SCPreferences *)(CFBooleanGetValue(v3) != 0);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

void sub_10060EE40(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    id v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onRestrictedPowerMode", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    unsigned int v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onRestrictedPowerMode\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10061115C;
  v9[3] = &unk_1022BE758;
  void v9[4] = a3;
  v9[5] = a1;
  int v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10060F048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060F068()
{
}

void sub_10060F124(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_10060F160()
{
}

void sub_10060F220(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10060F25C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1022BE8F8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    char v12 = a3;
  }
  else {
    char v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_10060F340(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BE718);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022BE718);
        }
        char v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          char v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        __int16 v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10060F5D0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10060F684(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10060F6CC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10060F714(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10060F75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241CE28);
}

uint64_t sub_10060F788(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100611D9C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241CE29;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        BOOL v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        char v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    __int16 v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    unsigned int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unsigned int v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    long long v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10060FC2C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BE718);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10060FEB0(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BE718);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BE718);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                long long v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                BOOL v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100610284(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x30uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  uint64_t *v6 = (uint64_t)off_1022BE888;
  *(_OWORD *)(v6 + 3) = *(_OWORD *)a3;
  void v6[5] = *(void *)(a3 + 16);
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100610340(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100610354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1006103A8(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BE718);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&std::string v24[8] = 2082;
    *(void *)&unsigned char v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    __int16 v29 = v30;
    memset(v30, 0, sizeof(v30));
    BOOL v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x30uLL);
    v18[1] = 0;
    void v18[2] = 0;
    *BOOL v18 = (uint64_t)off_1022BE888;
    *(_OWORD *)(v18 + 3) = *(_OWORD *)a3;
    v18[5] = *(void *)(a3 + 16);
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_10061116C();
  }
  os_activity_scope_leave(&state);
}

void sub_100610994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1006109E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    BOOL v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BE718);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BE718);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BE718);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022BE718);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BE718);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100610F90(uint64_t a1)
{
  sub_100611D2C(a1);

  operator delete();
}

id sub_100610FC8(uint64_t a1, int a2, void *a3)
{
  id result = sub_1006117A4(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100611018(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100611048(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100611078(uint64_t a1, uint64_t a2)
{
}

void sub_100611088(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_1006110B8(uint64_t a1, uint64_t a2)
{
}

void sub_1006110C8(uint64_t a1)
{
}

void sub_1006110D0(uint64_t a1)
{
}

void sub_1006110D8(uint64_t a1)
{
}

void sub_1006110E0(uint64_t a1)
{
}

id sub_1006110E8(uint64_t a1)
{
  return sub_10060B958(*(id **)(a1 + 32));
}

void sub_1006110F0(uint64_t a1)
{
}

void sub_1006110F8(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100611128(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == -536723200) {
    sub_10060DF74(*(void **)(a1 + 32), *(_DWORD *)(a1 + 48));
  }
}

uint64_t sub_10061114C(uint64_t a1)
{
  return sub_10060E8D8(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

uint64_t sub_10061115C(uint64_t a1, uint64_t a2)
{
  return sub_10060C0B4(*(void *)(a1 + 32), a2, *(_DWORD *)(a1 + 48));
}

void sub_10061116C()
{
}

void sub_100611220(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        unsigned int v49 = v9;
        id v13 = sub_1006117A4(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v48 = v19;
              sub_100611610(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              unsigned int v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              __int16 v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BE718);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                char v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BE718);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100611610(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1006117A4(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

void sub_100611708(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BE888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100611728(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BE888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100611784(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1006117A4(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100611804(a1);
}

id sub_100611804(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BE8C8);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D24A48 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDaemonStatus_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BE8C8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D24A48 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BE8C8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100611BC4(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t *sub_100611BF4(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        id v8 = (uint64_t **)v5;
        uint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_100611CB0(uint64_t a1, uint64_t *a2)
{
  id v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v5 = v2[4];
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    id v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_1000F0A30((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t sub_100611D2C(uint64_t a1)
{
  *(void *)a1 = &off_1022BE8F8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100611D9C()
{
}

uint64_t sub_100611E50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

double sub_100611E70(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void sub_100611E80(_DWORD *a1, unsigned int a2, int a3, int a4)
{
  if (a4 + a3 <= a2)
  {
    ++a1[10];
    if (a2)
    {
      a1[4] += a2;
      if (a4 | a3)
      {
        ++a1[7];
        a1[1] += a4 + a3;
        if (a3)
        {
          ++a1[8];
          a1[2] += a3;
        }
        if (a4)
        {
          ++a1[9];
          a1[3] += a4;
        }
      }
    }
    else
    {
      ++a1[6];
    }
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BE910);
    }
    uint64_t v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240704;
      unsigned int v10 = a2;
      __int16 v11 = 1026;
      int v12 = a3;
      __int16 v13 = 1026;
      int v14 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid ap lookup/found counts: apLookupCount: %{public}u, foundInCacheCount: %{public}u, foundInTilesCount: %{public}u", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BE910);
      }
      id v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiApLocationLookupMetrics::scanBufferApLocationLookup(unsigned int, unsigned int, unsigned int)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

_DWORD *sub_1006120F4(_DWORD *result, int a2)
{
  result[5] += a2;
  return result;
}

uint64_t sub_100612110(unsigned int *a1)
{
  memset(v19, 0, 44);
  uint64_t result = sub_1006124DC(a1, v19);
  if ((result & 1) == 0)
  {
    unsigned int v5 = a1[10];
    double v6 = 0.0;
    double v7 = 0.0;
    if (v5)
    {
      LODWORD(v3) = *a1;
      double v3 = (double)*(unint64_t *)&v3;
      double v4 = (double)v5;
      double v7 = v3 / (double)v5;
    }
    unsigned int v8 = a1[4];
    unsigned int v9 = a1[1];
    if (v8)
    {
      double v3 = (double)v9;
      double v4 = (double)v8;
      double v6 = (double)v9 / (double)v8;
    }
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    if (v9)
    {
      LODWORD(v3) = a1[2];
      LODWORD(v4) = a1[3];
      double v11 = (double)*(unint64_t *)&v3 / (double)v9;
      double v3 = (double)*(unint64_t *)&v4;
      double v12 = (double)*(unint64_t *)&v4 / (double)v9;
    }
    if (v8)
    {
      LODWORD(v3) = a1[5];
      double v3 = (double)*(unint64_t *)&v3;
      double v4 = (double)v8;
      double v10 = v3 / (double)v8;
    }
    if (v5)
    {
      LODWORD(v3) = a1[6];
      double v4 = (double)v5;
      double v13 = (double)*(unint64_t *)&v3 / (double)v5;
      unsigned int v14 = a1[7];
      double v3 = (double)v14;
      double v15 = (double)v14 / v4;
      if (v14)
      {
LABEL_12:
        LODWORD(v3) = a1[8];
        LODWORD(v4) = a1[9];
        double v16 = (double)*(unint64_t *)&v3 / (double)v14;
        double v17 = (double)*(unint64_t *)&v4 / (double)v14;
LABEL_15:
        double v18 = v17;
        v20[0] = @"alsRequestResponseCount";
        v21[0] = +[NSNumber numberWithUnsignedInt:*a1];
        v20[1] = @"alsRequestResponseScanBufferFractionUpperBound";
        v21[1] = +[NSNumber numberWithDouble:v7];
        void v20[2] = @"apLocationFoundCount";
        void v21[2] = +[NSNumber numberWithUnsignedInt:a1[1]];
        v20[3] = @"apLocationFoundFraction";
        v21[3] = +[NSNumber numberWithDouble:v6];
        void v20[4] = @"apLocationFoundInAlsCacheCount";
        v21[4] = +[NSNumber numberWithUnsignedInt:a1[2]];
        v20[5] = @"apLocationFoundInAlsCacheFraction";
        v21[5] = +[NSNumber numberWithDouble:v11];
        v20[6] = @"apLocationFoundInTilesCount";
        v21[6] = +[NSNumber numberWithUnsignedInt:a1[3]];
        v20[7] = @"apLocationFoundInTilesFraction";
        void v21[7] = +[NSNumber numberWithDouble:v12];
        void v20[8] = @"apLocationLookupCount";
        v21[8] = +[NSNumber numberWithUnsignedInt:a1[4]];
        v20[9] = @"apLocationsInAlsRequestResponseCount";
        v21[9] = +[NSNumber numberWithUnsignedInt:a1[5]];
        v20[10] = @"apLocationsInAlsRequestResponseFractionUpperBound";
        unsigned char v21[10] = +[NSNumber numberWithDouble:v10];
        v20[11] = @"emptyScanBufferLookupCount";
        v21[11] = +[NSNumber numberWithUnsignedInt:a1[6]];
        v20[12] = @"emptyScanBufferLookupFraction";
        v21[12] = +[NSNumber numberWithDouble:v13];
        v20[13] = @"scanBufferFoundApLocationCount";
        v21[13] = +[NSNumber numberWithUnsignedInt:a1[7]];
        v20[14] = @"scanBufferFoundApLocationFraction";
        v21[14] = +[NSNumber numberWithDouble:v15];
        v20[15] = @"scanBufferFoundApLocationInAlsCacheCount";
        v21[15] = +[NSNumber numberWithUnsignedInt:a1[8]];
        v20[16] = @"scanBufferFoundApLocationInAlsCacheFraction";
        v21[16] = +[NSNumber numberWithDouble:v16];
        v20[17] = @"scanBufferFoundApLocationInTilesCount";
        v21[17] = +[NSNumber numberWithUnsignedInt:a1[9]];
        v20[18] = @"scanBufferFoundApLocationInTilesFraction";
        v21[18] = +[NSNumber numberWithDouble:v18];
        v20[19] = @"scanBufferLookupCount";
        v21[19] = +[NSNumber numberWithUnsignedInt:a1[10]];
        +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:20];
        uint64_t result = AnalyticsSendEvent();
        *(_OWORD *)(a1 + 7) = 0u;
        *(_OWORD *)a1 = 0u;
        *((_OWORD *)a1 + 1) = 0u;
        return result;
      }
    }
    else
    {
      unsigned int v14 = a1[7];
      double v13 = 0.0;
      double v15 = 0.0;
      if (v14) {
        goto LABEL_12;
      }
    }
    double v16 = 0.0;
    double v17 = 0.0;
    goto LABEL_15;
  }
  return result;
}

BOOL sub_1006124DC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10];
}

void sub_100612598(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100612A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100612FC0(CFDictionaryRef *a1, uint64_t a2)
{
  sub_10013FA80((int)v45, *a1);
  uint64_t v44 = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 172) = 0;
  *(void *)(a2 + 164) = 0;
  *(_DWORD *)(a2 + 180) = 0;
  *(void *)(a2 + 196) = 0;
  *(void *)(a2 + 212) = 0;
  *(void *)(a2 + 204) = 0;
  *(unsigned char *)(a2 + 220) = 0;
  *(_DWORD *)(a2 + 68) = 0xFFFF;
  *(_OWORD *)(a2 + 88) = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a2 + 104) = _Q1;
  *(_OWORD *)(a2 + 120) = _Q1;
  *(_OWORD *)(a2 + 136) = _Q1;
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a2 + 156) = 0xBFF0000000000000;
  *(void *)(a2 + 184) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 192) = 0x7FFFFFFF;
  *(void *)(a2 + 224) = 0x30000000BLL;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(void *)(a2 + 48) = -1;
  *(_DWORD *)a2 = -1;
  *(_DWORD *)(a2 + 232) = -1;
  *(_DWORD *)(a2 + 56) = -1;
  *(_OWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 376) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 400) = 0;
  *(void *)(a2 + 408) = 0;
  *(void *)(a2 + 392) = 0;
  *(unsigned char *)(a2 + 416) = 0;
  *(_DWORD *)(a2 + 264) = 0xFFFF;
  *(void *)(a2 + 268) = 0;
  *(void *)(a2 + 276) = 0;
  *(_OWORD *)(a2 + 284) = xmmword_101D1C320;
  *(_OWORD *)(a2 + 300) = _Q1;
  *(_OWORD *)(a2 + 316) = _Q1;
  *(_OWORD *)(a2 + 332) = _Q1;
  *(_DWORD *)(a2 + 348) = 0;
  *(void *)(a2 + 352) = 0xBFF0000000000000;
  *(void *)(a2 + 380) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 388) = 0x7FFFFFFF;
  if (qword_10247C788 != -1) {
    dispatch_once(&qword_10247C788, &stru_1022BE930);
  }
  if (byte_10247C790) {
    sub_10013FBD4((uint64_t)v45, "cdmaCellFromCellMonitorDict");
  }
  CFTypeRef cf = 0;
  if ((sub_10013F3C8((uint64_t)v45, kCTCellMonitorCellRadioAccessTechnology, &cf) & 1) == 0)
  {
    *(_DWORD *)(a2 + 224) = 11;
LABEL_23:
    BOOL v10 = 1;
    goto LABEL_24;
  }
  if (!cf)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE950);
    }
    unsigned int v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unsupported kCTCellMonitorCellRadioAccessTechnology, no cfstring", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE950);
      }
      LOWORD(v51.__r_.__value_.__l.__data_) = 0;
      uint64_t v35 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)", "%s\n", (const char *)v35);
      if (v35 != buf) {
        free(v35);
      }
    }
    goto LABEL_23;
  }
  *(_DWORD *)(a2 + 224) = sub_10013FDDC(cf);
  memset(&v51, 0, sizeof(v51));
  sub_10013D274((const __CFString *)cf, &v51);
  unsigned int v9 = *(_DWORD *)(a2 + 224) - 3;
  BOOL v10 = v9 < 3;
  if (v9 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE950);
    }
    double v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      double v12 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v12 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      int v13 = *(_DWORD *)(a2 + 224);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unsupported kCTCellMonitorCellRadioAccessTechnology, it's not CDMA! %{public}s %{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE950);
      }
      int v37 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v37 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      int v38 = *(_DWORD *)(a2 + 224);
      int v46 = 136446466;
      int v47 = v37;
      __int16 v48 = 1026;
      int v49 = v38;
      __int16 v39 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)", "%s\n", (const char *)v39);
      if (v39 != buf) {
        free(v39);
      }
    }
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
LABEL_24:
  sub_10013E418((uint64_t)v45, kCTCellMonitorBandClass, (_DWORD *)(a2 + 48));
  sub_10013E418((uint64_t)v45, kCTCellMonitorBaseStationId, (_DWORD *)(a2 + 44));
  if (sub_10013E418((uint64_t)v45, kCTCellMonitorBaseStationLat, (_DWORD *)&v44 + 1)
    && sub_10013E418((uint64_t)v45, kCTCellMonitorBaseStationLong, &v44))
  {
    *(void *)(a2 + 88) = 0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v16 = (double)SHIDWORD(v44);
    *(CFAbsoluteTime *)(a2 + 144) = Current;
    double v17 = (double)(int)v44 * 0.0000694444444;
    *(double *)(a2 + 72) = v16 * 0.0000694444444;
    *(double *)(a2 + 80) = v17;
    *(_DWORD *)(a2 + 200) = 1;
  }
  CFTypeRef v42 = 0;
  if (sub_10013F3C8((uint64_t)v45, kCTCellMonitorCellType, &v42))
  {
    if (v42)
    {
      *(_DWORD *)(a2 + 228) = sub_10013FF18(v42);
      memset(buf, 0, 24);
      sub_10013D274((const __CFString *)v42, buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE950);
      }
      double v18 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Unsupported kCTCellMonitorCellType, no cfstring", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BE950);
        }
        LOWORD(v51.__r_.__value_.__l.__data_) = 0;
        uint64_t v36 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)", "%s\n", (const char *)v36);
        if (v36 != buf) {
          free(v36);
        }
      }
    }
  }
  sub_10013E418((uint64_t)v45, kCTCellMonitorChannelNumber, (_DWORD *)(a2 + 52));
  sub_10013E418((uint64_t)v45, kCTCellMonitorMCC, (_DWORD *)a2);
  sub_10013E418((uint64_t)v45, kCTCellMonitorMNC, (_DWORD *)(a2 + 232));
  sub_10013E418((uint64_t)v45, kCTCellMonitorNID, (_DWORD *)(a2 + 36));
  sub_10013E418((uint64_t)v45, kCTCellMonitorPNOffset, (_DWORD *)(a2 + 56));
  sub_10013E418((uint64_t)v45, kCTCellMonitorSID, (_DWORD *)(a2 + 32));
  sub_10013E418((uint64_t)v45, kCTCellMonitorZoneId, (_DWORD *)(a2 + 40));
  sub_1000A7CF8((uint64_t)v45, kCTCellMonitorSectorId, (std::string *)(a2 + 240));
  if (sub_10013E418((uint64_t)v45, kCTCellMonitorSectorLat, (_DWORD *)&v44 + 1)
    && sub_10013E418((uint64_t)v45, kCTCellMonitorSectorLong, &v44)
    && v44)
  {
    *(void *)(a2 + 284) = 0;
    CFAbsoluteTime v19 = CFAbsoluteTimeGetCurrent();
    double v20 = (double)SHIDWORD(v44);
    *(CFAbsoluteTime *)(a2 + 340) = v19;
    double v21 = (double)(int)v44 * 0.0000694444444;
    *(double *)(a2 + 268) = v20 * 0.0000694444444;
    *(double *)(a2 + 276) = v21;
    *(_DWORD *)(a2 + 396) = 1;
  }
  sub_10013E418((uint64_t)v45, kCTCellMonitorLtmOffset, (_DWORD *)(a2 + 420));
  sub_10013E418((uint64_t)v45, kCTCellMonitorDayLightSaving, (_DWORD *)(a2 + 424));
  double v40 = 0.0;
  double v41 = 0.0;
  if (sub_1000A6A10((uint64_t)v45, kCTCellMonitorEcio, &v41))
  {
    *(_DWORD *)(a2 + 60) = (int)v41;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE950);
    }
    int v22 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v23 = *(_DWORD *)(a2 + 60);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v23;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v41;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "kCTCellMonitorEcio: %d, %.1lf", (uint8_t *)buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE950);
      }
      int v24 = *(_DWORD *)(a2 + 60);
      LODWORD(v51.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(v51.__r_.__value_.__r.__words[0]) = v24;
      LOWORD(v51.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v51.__r_.__value_.__r.__words[1] + 2) = v41;
      __int16 v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)", "%s\n", (const char *)v25);
      if (v25 != buf) {
        free(v25);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 60) = 0;
  }
  if (sub_1000A6A10((uint64_t)v45, kCTCellMonitorEcioFiltered, &v40))
  {
    *(_DWORD *)(a2 + 64) = (int)v40;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE950);
    }
    int v26 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v27 = *(_DWORD *)(a2 + 64);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v27;
      LOWORD(buf[0].__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 2) = v40;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "kCTCellMonitorEcioFiltered: %d, %.1lf", (uint8_t *)buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BE950);
      }
      int v28 = *(_DWORD *)(a2 + 64);
      LODWORD(v51.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(v51.__r_.__value_.__r.__words[0]) = v28;
      LOWORD(v51.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v51.__r_.__value_.__r.__words[1] + 2) = v40;
      __int16 v29 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)", "%s\n", (const char *)v29);
      if (v29 != buf) {
        free(v29);
      }
    }
  }
  else
  {
    *(_DWORD *)(a2 + 64) = 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BE950);
  }
  int v30 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_100613DB4(a2, buf);
    BOOL v31 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? buf
        : (std::string *)buf[0].__r_.__value_.__r.__words[0];
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CELL_LOC: got cell from dict, %s", (uint8_t *)&v51, 0xCu);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE950);
    }
    sub_100613DB4(a2, &v51);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v33 = &v51;
    }
    else {
      uint64_t v33 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    int v46 = 136315138;
    int v47 = v33;
    uint64_t v34 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::cdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::CdmaCell &)", "%s\n", (const char *)v34);
    if (v34 != buf) {
      free(v34);
    }
  }
  sub_10013F3C4(v45);
  return v10;
}

void sub_100613D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (*(char *)(v9 - 105) < 0) {
    operator delete(*(void **)(v9 - 128));
  }
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100613DB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10010F274((uint64_t)v30);
  double v4 = sub_100132EFC(v31, (uint64_t)"[", 1);
  sub_100132EFC(v4, (uint64_t)" MCC=", 5);
  unsigned int v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)" Derived=", 9);
  double v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)" AND SID=", 9);
  double v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)" AND NID=", 9);
  long long v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)" AND BSID=", 10);
  uint64_t v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)" AND ZONEID=", 12);
  BOOL v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)" AND PNOFFSET=", 14);
  double v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)" AND RSCP=", 10);
  double v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)" AND ECN0=", 10);
  int v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)" AND BANDCLASS=", 15);
  unsigned int v14 = (void *)std::ostream::operator<<();
  sub_100132EFC(v14, (uint64_t)" AND CHANNEL=", 13);
  double v15 = (void *)std::ostream::operator<<();
  double v16 = sub_100132EFC(v15, (uint64_t)" AND SectorID='", 15);
  uint64_t v19 = *(void *)(a1 + 240);
  uint64_t v18 = a1 + 240;
  uint64_t v17 = v19;
  int v20 = *(char *)(v18 + 23);
  if (v20 >= 0) {
    uint64_t v21 = v18;
  }
  else {
    uint64_t v21 = v17;
  }
  if (v20 >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    uint64_t v22 = *(void *)(v18 + 8);
  }
  int v23 = sub_100132EFC(v16, v21, v22);
  int v24 = sub_100132EFC(v23, (uint64_t)"'", 1);
  sub_100132EFC(v24, (uint64_t)" ]", 2);
  std::stringbuf::str();
  if (v29 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  sub_100134750(a2, p_p);
  if (v29 < 0) {
    operator delete(__p);
  }
  *(void *)((char *)v30
  v31[0] = v26;
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1006140C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_1006140F8(CFDictionaryRef *a1, _DWORD *a2)
{
  sub_10013FA80((int)v10, *a1);
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *((_OWORD *)a2 + 1) = v3;
  *(_OWORD *)a2 = v3;
  if (qword_10247C788 != -1) {
    dispatch_once(&qword_10247C788, &stru_1022BE930);
  }
  if (byte_10247C790) {
    sub_10013FBD4((uint64_t)v10, "gsmCellFromCellMonitorDict");
  }
  sub_10013E418((uint64_t)v10, kCTCellMonitorMCC, a2);
  sub_10013E418((uint64_t)v10, kCTCellMonitorMNC, a2 + 1);
  sub_10013E418((uint64_t)v10, kCTCellMonitorLAC, a2 + 2);
  sub_10013E418((uint64_t)v10, kCTCellMonitorCellId, a2 + 3);
  sub_10013E418((uint64_t)v10, kCTCellMonitorUARFCN, a2 + 4);
  sub_10013E418((uint64_t)v10, kCTCellMonitorARFCN, a2 + 4);
  sub_10013E418((uint64_t)v10, kCTCellMonitorPSC, a2 + 5);
  sub_10013E418((uint64_t)v10, kCTCellMonitorSCN, a2 + 5);
  sub_10013E418((uint64_t)v10, kCTCellMonitorRSCP, a2 + 6);
  sub_10013E418((uint64_t)v10, kCTCellMonitorECN0, a2 + 7);
  BOOL v4 = 0;
  if ((int)*a2 >= 1 && (a2[1] & 0x80000000) == 0) {
    BOOL v4 = a2[3] >= 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BE950);
  }
  unsigned int v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_100614504(__p);
    double v6 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v4;
    __int16 v12 = 2080;
    int v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CELL_LOC: got cell from dict, result, %d, %s", buf, 0x12u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE950);
    }
    sub_100614504(buf);
    if (v14 >= 0) {
      long long v8 = buf;
    }
    else {
      long long v8 = *(uint8_t **)buf;
    }
    int v15 = 67109378;
    BOOL v16 = v4;
    __int16 v17 = 2080;
    uint64_t v18 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::gsmCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::Cell &)", "%s\n", v9);
    if (v9 != (char *)__p) {
      free(v9);
    }
  }
  sub_10013F3C4(v10);
  return v4;
}

void sub_1006144DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100614504@<X0>(void *a1@<X8>)
{
  sub_10010F274((uint64_t)v16);
  id v2 = sub_100132EFC(v17, (uint64_t)"[", 1);
  sub_100132EFC(v2, (uint64_t)" MCC=", 5);
  long long v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)" AND MNC=", 9);
  BOOL v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)" AND LAC=", 9);
  unsigned int v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)" AND CI=", 8);
  double v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)" AND UARFCN=", 12);
  double v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)" AND PSC=", 9);
  long long v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)" AND RSCP=", 10);
  uint64_t v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)" AND ECN0=", 10);
  BOOL v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)" ]", 2);
  std::stringbuf::str();
  if (v15 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  sub_100134750(a1, p_p);
  if (v15 < 0) {
    operator delete(__p);
  }
  *(void *)((char *)v16
  v17[0] = v12;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10061477C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_1006147AC(CFDictionaryRef *a1, uint64_t a2)
{
  sub_10013FA80((int)v15, *a1);
  if (qword_10247C788 != -1) {
    dispatch_once(&qword_10247C788, &stru_1022BE930);
  }
  if (byte_10247C790) {
    sub_10013FBD4((uint64_t)v15, "nrCellFromCellMonitorDict");
  }
  *(_OWORD *)&__p[4] = 0uLL;
  *(void *)(a2 + 64) = -1;
  *(void *)(a2 + 72) = -1;
  *(_DWORD *)(a2 + 8) = -1;
  *(void *)(a2 + 16) = -1;
  *(void *)(a2 + 24) = -1;
  *(_DWORD *)(a2 + 32) = -1;
  *(void *)a2 = -1;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)__p;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&__p[16];
  *(void *)(a2 + 56) = -1;
  *(void *)(a2 + 80) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a2 + 88) = -1;
  sub_10013E418((uint64_t)v15, kCTCellMonitorMCC, (_DWORD *)a2);
  sub_10013E418((uint64_t)v15, kCTCellMonitorMNC, (_DWORD *)(a2 + 4));
  sub_10013E418((uint64_t)v15, kCTCellMonitorTAC, (_DWORD *)(a2 + 8));
  sub_1004D0C04((uint64_t)v15, kCTCellMonitorCellId, (void *)(a2 + 16));
  sub_10013E418((uint64_t)v15, kCTCellMonitorNRARFCN, (_DWORD *)(a2 + 24));
  CFTypeRef cf1 = 0;
  sub_10013F3C8((uint64_t)v15, kCTCellMonitorCellType, &cf1);
  if (CFEqual(cf1, kCTCellMonitorCellTypeServing)) {
    sub_10013E418((uint64_t)v15, kCTCellMonitorPID, (_DWORD *)(a2 + 28));
  }
  if (CFEqual(cf1, kCTCellMonitorCellTypeNeighbor)) {
    sub_10013E418((uint64_t)v15, kCTCellMonitorPCI, (_DWORD *)(a2 + 28));
  }
  sub_10013E418((uint64_t)v15, kCTCellMonitorRSRP, (_DWORD *)(a2 + 56));
  sub_10013E418((uint64_t)v15, kCTCellMonitorRSRQ, (_DWORD *)(a2 + 60));
  sub_10013E418((uint64_t)v15, kCTCellMonitorBandInfo, (_DWORD *)(a2 + 32));
  sub_10013E418((uint64_t)v15, kCTCellMonitorSCS, (_DWORD *)(a2 + 64));
  sub_10013E418((uint64_t)v15, kCTCellMonitorGSCN, (_DWORD *)(a2 + 68));
  sub_10013E418((uint64_t)v15, kCTCellMonitorBandwidth, (_DWORD *)(a2 + 72));
  sub_10013E418((uint64_t)v15, kCTCellMonitorNeighborType, (_DWORD *)(a2 + 84));
  sub_10013E418((uint64_t)v15, kCTCellMonitorPMax, (_DWORD *)(a2 + 76));
  sub_10013E418((uint64_t)v15, kCTCellMonitorThroughput, (_DWORD *)(a2 + 80));
  sub_10013E418((uint64_t)v15, kCTCellMonitorBWPSupport, (_DWORD *)(a2 + 88));
  uint64_t v13 = 0;
  if (sub_10013E418((uint64_t)v15, kCTCellMonitorSectorLat, (_DWORD *)&v13 + 1))
  {
    if (sub_10013E418((uint64_t)v15, kCTCellMonitorSectorLong, &v13))
    {
      int v3 = v13;
      if (v13)
      {
        *(double *)(a2 + 40) = (double)SHIDWORD(v13) * 0.0000694444444;
        *(double *)(a2 + 48) = (double)v3 * 0.0000694444444;
      }
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BE970);
  }
  BOOL v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    sub_100614EB8(__p);
    unsigned int v5 = v21 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "nrCell populated from CT: %s", buf, 0xCu);
    if (v21 < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BE970);
    }
    sub_100614EB8(buf);
    if (v17 >= 0) {
      BOOL v10 = buf;
    }
    else {
      BOOL v10 = *(unsigned char **)buf;
    }
    int v18 = 136315138;
    uint64_t v19 = v10;
    double v11 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::nrCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::NrCell &)", "%s\n", v11);
    if (v11 != __p) {
      free(v11);
    }
  }
  BOOL v7 = *(int *)a2 > 0 && *(int *)(a2 + 4) >= 0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BE970);
  }
  long long v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string __p = 67109120;
    *(_DWORD *)&__p[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "nrCell is valid from CT: %d", __p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BE970);
    }
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::nrCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::NrCell &)", "%s\n", v12);
    if (v12 != __p) {
      free(v12);
    }
  }
  sub_10013F3C4(v15);
  return v7;
}

void sub_100614E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100614EB8@<X0>(void *a1@<X8>)
{
  sub_10010F274((uint64_t)v20);
  id v2 = sub_100132EFC(v21, (uint64_t)"[", 1);
  sub_100132EFC(v2, (uint64_t)" MCC=", 5);
  int v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)" AND MNC=", 9);
  BOOL v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)" AND TAC=", 9);
  unsigned int v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)" AND CI=", 8);
  double v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)" AND NRARFCN=", 13);
  BOOL v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)" AND PID=", 9);
  long long v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)" AND RSCP=", 10);
  uint64_t v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)" AND ECN0=", 10);
  BOOL v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)" AND BANDINFO=", 14);
  double v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)" AND SCS=", 9);
  uint64_t v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)" AND GSCN=", 10);
  uint64_t v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)" AND BANDWIDTH=", 15);
  char v14 = (void *)std::ostream::operator<<();
  sub_100132EFC(v14, (uint64_t)" ]", 2);
  std::stringbuf::str();
  if (v19 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  sub_100134750(a1, p_p);
  if (v19 < 0) {
    operator delete(__p);
  }
  *(void *)((char *)v20
  v21[0] = v16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100615190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_1006151C0(CFDictionaryRef *a1, _DWORD *a2)
{
  sub_10013FA80((int)v10, *a1);
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *((_OWORD *)a2 + 1) = v3;
  *(_OWORD *)a2 = v3;
  if (qword_10247C788 != -1) {
    dispatch_once(&qword_10247C788, &stru_1022BE930);
  }
  if (byte_10247C790) {
    sub_10013FBD4((uint64_t)v10, "scdmaCellFromCellMonitorDict");
  }
  sub_10013E418((uint64_t)v10, kCTCellMonitorMCC, a2);
  sub_10013E418((uint64_t)v10, kCTCellMonitorMNC, a2 + 1);
  sub_10013E418((uint64_t)v10, kCTCellMonitorLAC, a2 + 2);
  sub_10013E418((uint64_t)v10, kCTCellMonitorCellId, a2 + 3);
  sub_10013E418((uint64_t)v10, kCTCellMonitorUARFCN, a2 + 4);
  sub_10013E418((uint64_t)v10, kCTCellMonitorARFCN, a2 + 4);
  sub_10013E418((uint64_t)v10, kCTCellMonitorPSC, a2 + 5);
  sub_10013E418((uint64_t)v10, kCTCellMonitorSCN, a2 + 5);
  sub_10013E418((uint64_t)v10, kCTCellMonitorRSCP, a2 + 6);
  sub_10013E418((uint64_t)v10, kCTCellMonitorECN0, a2 + 7);
  BOOL v4 = 0;
  if ((int)*a2 >= 1 && (a2[1] & 0x80000000) == 0) {
    BOOL v4 = a2[3] >= 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BE950);
  }
  unsigned int v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_100614504(__p);
    double v6 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v4;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CELL_LOC: got cell from dict, result, %d, %s", buf, 0x12u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BE950);
    }
    sub_100614504(buf);
    if (v14 >= 0) {
      long long v8 = buf;
    }
    else {
      long long v8 = *(uint8_t **)buf;
    }
    int v15 = 67109378;
    BOOL v16 = v4;
    __int16 v17 = 2080;
    int v18 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    if (v14 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellMonitor::scdmaCellFromCellMonitorDict(const CFDictionaryRef &, CLTelephonyService_Type::ScdmaCell &)", "%s\n", v9);
    if (v9 != (char *)__p) {
      free(v9);
    }
  }
  sub_10013F3C4(v10);
  return v4;
}

void sub_1006155A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1006155CC(id a1)
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  char v1 = sub_1000D2988(v3, "printCellMonitorCSV", &v5);
  if (v5) {
    char v2 = v1;
  }
  else {
    char v2 = 0;
  }
  byte_10247C790 = v2;
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100615634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10061564C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10061567C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

double sub_1006156AC(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1006156BC(int *a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BEA10);
  }
  char v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *a1;
    int v4 = a1[1];
    int v5 = a1[2];
    int v6 = a1[3];
    int v7 = a1[4];
    int v8 = a1[5];
    int v9 = a1[6];
    double v10 = (double)a1[7] * 0.0009765625;
    int v11 = a1[8];
    double v12 = (double)a1[9] * 0.0009765625;
    *(_DWORD *)uint64_t buf = 67242496;
    int v16 = v3;
    __int16 v17 = 1026;
    int v18 = v4;
    __int16 v19 = 1026;
    int v20 = v5;
    __int16 v21 = 1026;
    int v22 = v6;
    __int16 v23 = 1026;
    int v24 = v7;
    __int16 v25 = 1026;
    int v26 = v8;
    __int16 v27 = 1026;
    int v28 = v9;
    __int16 v29 = 2050;
    double v30 = v10;
    __int16 v31 = 1026;
    int v32 = v11;
    __int16 v33 = 2050;
    double v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "UclpMetric, celltileusage, attempts, %{public}d, als, %{public}d, tiles, %{public}d, unknown, %{public}d, alsreq, %{public}d, alscells, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f", buf, 0x46u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BEA10);
    }
    char v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationMetrics::sendMetrics()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return AnalyticsSendEventLazy();
}

NSDictionary *sub_1006159BC(uint64_t a1)
{
  char v1 = *(unsigned int **)(a1 + 32);
  v36[0] = @"attempts";
  unsigned int v2 = *v1;
  int v3 = 1;
  if ((int)*v1 >= 101)
  {
    unsigned int v4 = *v1;
    do
    {
      unsigned int v2 = v4 / 0xA;
      v3 *= 10;
      BOOL v5 = v4 > 0x3F1;
      v4 /= 0xAu;
    }
    while (v5);
  }
  v37[0] = +[NSNumber numberWithInt:v3 * v2];
  v36[1] = @"als";
  signed int v6 = v1[1];
  int v7 = 1;
  if (v6 >= 101)
  {
    unsigned int v8 = v1[1];
    do
    {
      signed int v6 = v8 / 0xA;
      v7 *= 10;
      BOOL v5 = v8 > 0x3F1;
      v8 /= 0xAu;
    }
    while (v5);
  }
  v37[1] = +[NSNumber numberWithInt:(v7 * v6)];
  v36[2] = @"tiles";
  signed int v9 = v1[2];
  int v10 = 1;
  if (v9 >= 101)
  {
    unsigned int v11 = v1[2];
    do
    {
      signed int v9 = v11 / 0xA;
      v10 *= 10;
      BOOL v5 = v11 > 0x3F1;
      v11 /= 0xAu;
    }
    while (v5);
  }
  v37[2] = +[NSNumber numberWithInt:(v10 * v9)];
  v36[3] = @"unknown";
  signed int v12 = v1[3];
  int v13 = 1;
  if (v12 >= 101)
  {
    unsigned int v14 = v1[3];
    do
    {
      signed int v12 = v14 / 0xA;
      v13 *= 10;
      BOOL v5 = v14 > 0x3F1;
      v14 /= 0xAu;
    }
    while (v5);
  }
  void v37[3] = +[NSNumber numberWithInt:(v13 * v12)];
  v36[4] = @"alsrequests";
  signed int v15 = v1[4];
  int v16 = 1;
  if (v15 >= 101)
  {
    unsigned int v17 = v1[4];
    do
    {
      signed int v15 = v17 / 0xA;
      v16 *= 10;
      BOOL v5 = v17 > 0x3F1;
      v17 /= 0xAu;
    }
    while (v5);
  }
  v37[4] = +[NSNumber numberWithInt:(v16 * v15)];
  v36[5] = @"alsreturned";
  signed int v18 = v1[5];
  int v19 = 1;
  if (v18 >= 101)
  {
    unsigned int v20 = v1[5];
    do
    {
      signed int v18 = v20 / 0xA;
      v19 *= 10;
      BOOL v5 = v20 > 0x3F1;
      v20 /= 0xAu;
    }
    while (v5);
  }
  v37[5] = +[NSNumber numberWithInt:(v19 * v18)];
  v36[6] = @"numdownloadcurrent";
  signed int v21 = v1[6];
  int v22 = 1;
  if (v21 >= 101)
  {
    unsigned int v23 = v1[6];
    do
    {
      signed int v21 = v23 / 0xA;
      v22 *= 10;
      BOOL v5 = v23 > 0x3F1;
      v23 /= 0xAu;
    }
    while (v5);
  }
  v37[6] = +[NSNumber numberWithInt:(v22 * v21)];
  v36[7] = @"kbcurrent";
  int v24 = v1[7];
  unsigned int v25 = v24 / 1024;
  if (v24 <= 103423)
  {
    int v26 = 1;
  }
  else
  {
    int v26 = 1;
    unsigned int v27 = v25;
    do
    {
      unsigned int v25 = v27 / 0xA;
      v26 *= 10;
      BOOL v5 = v27 > 0x3F1;
      v27 /= 0xAu;
    }
    while (v5);
  }
  v37[7] = +[NSNumber numberWithInt:v26 * v25];
  v36[8] = @"numdownloadneighbor";
  signed int v28 = v1[8];
  int v29 = 1;
  if (v28 >= 101)
  {
    unsigned int v30 = v1[8];
    do
    {
      signed int v28 = v30 / 0xA;
      v29 *= 10;
      BOOL v5 = v30 > 0x3F1;
      v30 /= 0xAu;
    }
    while (v5);
  }
  v37[8] = +[NSNumber numberWithInt:(v29 * v28)];
  v36[9] = @"kbneighbor";
  int v31 = v1[9];
  unsigned int v32 = v31 / 1024;
  if (v31 <= 103423)
  {
    int v33 = 1;
  }
  else
  {
    int v33 = 1;
    unsigned int v34 = v32;
    do
    {
      unsigned int v32 = v34 / 0xA;
      v33 *= 10;
      BOOL v5 = v34 > 0x3F1;
      v34 /= 0xAu;
    }
    while (v5);
  }
  v37[9] = +[NSNumber numberWithInt:v33 * v32];
  return +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:10];
}

void sub_100615DB4(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 20) + a2;
  ++*(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 20) = v3;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BEA10);
  }
  unsigned int v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)uint64_t buf = 67240448;
    int v9 = v5;
    __int16 v10 = 1026;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@Celltileusage, als, %{public}d, cells, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BEA10);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationMetrics::alsReply(int, CFAbsoluteTime)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100615F90(_DWORD *a1, int a2, int a3)
{
  if (a2)
  {
    ++a1[6];
    int v6 = a1 + 7;
  }
  else
  {
    ++a1[8];
    int v6 = a1 + 9;
  }
  *v6 += a3;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BEA10);
  }
  int v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    int v8 = a1[6];
    int v9 = a1[8];
    double v10 = (double)(int)a1[7] * 0.0009765625;
    double v11 = (double)(int)a1[9] * 0.0009765625;
    *(_DWORD *)uint64_t buf = 67241472;
    int v14 = a2;
    __int16 v15 = 1026;
    int v16 = a3;
    __int16 v17 = 1026;
    int v18 = v8;
    __int16 v19 = 2050;
    double v20 = v10;
    __int16 v21 = 1026;
    int v22 = v9;
    __int16 v23 = 2050;
    double v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@Celltileusage, download, isCurrent, %{public}d, size, %{public}d, nCurrent, %{public}d, kbCurrent, %{public}.1f, nNeighbor, %{public}d, kbNeighbor, %{public}.01f", buf, 0x2Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BEA10);
    }
    signed int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationMetrics::tileDownloaded(BOOL, int, CFAbsoluteTime)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100616220(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100616250(uint64_t a1@<X8>)
{
  sub_100134750(__p, "");
  *(void *)a1 = 0x100000003;
  *(_WORD *)(a1 + 8) = 0;
  unsigned int v2 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_1000DC48C(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v5);
    *(void *)(a1 + 40) = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)unsigned int v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = 0;
  }
}

void sub_1006162D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006162F4(uint64_t a1)
{
  sub_100616250((uint64_t)v3);
  sub_100616374(a1, (uint64_t)v3, (const char **)&off_1022BEA30);
  if (v5 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10061634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100616368(uint64_t a1, uint64_t a2)
{
  return sub_100616374(a1, a2, (const char **)&off_1022BEA30);
}

uint64_t sub_100616374(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5 = sub_1005F54CC(a1, a2);
  if (sub_10014C3C0(v5))
  {
    sub_1005F7B0C(a1, "Status", a3, 0, 0);
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    int v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Fence: No access to state DB", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLFenceMonitorDatabase::CLFenceMonitorDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return a1;
}

void sub_10061653C(_Unwind_Exception *a1)
{
  sub_1005F5850(v1);
  _Unwind_Resume(a1);
}

void sub_100616558(uint64_t a1)
{
  if (sub_10014C3C0(a1))
  {
    sub_10010F274((uint64_t)buf);
    unsigned int v2 = sub_100132EFC(&v9, (uint64_t)"DELETE FROM ", 12);
    sub_100132EFC(v2, (uint64_t)"Status", 6);
    std::stringbuf::str();
    if (v7 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
  }
  unsigned int v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    LOWORD(__p) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceMonitorDatabase::clearLocationData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1006168D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100616924(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (sub_10014C3C0(a1))
  {
    if (a3 < 2)
    {
      unint64_t v8 = sub_100C8D62C(a2);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
      }
      uint64_t v9 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        sub_100C8C864(a2);
        double v10 = SBYTE3(v26) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 134284035;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v30 = 1025;
        unsigned int v31 = a3;
        __int16 v32 = 2081;
        int v33 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: state store, %{private}lld, %{private}d, %{private}s", buf, 0x1Cu);
        if (SBYTE3(v26) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
        }
        sub_100C8C864(a2);
        if (v28 >= 0) {
          double v20 = &v27;
        }
        else {
          double v20 = v27;
        }
        *(_DWORD *)std::string __p = 134284035;
        *(void *)&__p[4] = v8;
        __int16 v23 = 1025;
        unsigned int v24 = a3;
        __int16 v25 = 2081;
        int v26 = v20;
        __int16 v21 = (char *)_os_log_send_and_compose_impl();
        if (v28 < 0) {
          operator delete(v27);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceMonitorDatabase::storeFenceState(const CLFenceManager_Type::Fence &, CLFenceManager_Type::FenceStatus)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      sub_10010F274((uint64_t)__p);
      double v11 = sub_100132EFC((unsigned int *)((char *)&v24 + 2), (uint64_t)"INSERT OR REPLACE INTO ", 23);
      signed int v12 = sub_100132EFC(v11, (uint64_t)"Status", 6);
      int v13 = sub_100132EFC(v12, (uint64_t)" (", 2);
      int v14 = sub_100132EFC(v13, (uint64_t)"Key", 3);
      __int16 v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
      int v16 = sub_100132EFC(v15, (uint64_t)"State", 5);
      sub_100132EFC(v16, (uint64_t)") VALUES (?, ?)", 15);
      std::stringbuf::str();
      if (SBYTE3(v33) >= 0) {
        __int16 v17 = buf;
      }
      else {
        __int16 v17 = *(unsigned char **)buf;
      }
      sub_10014D518(a1, (uint64_t)v17);
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    int v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Fence: state Invalid for DB", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 == -1)
      {
LABEL_30:
        *(_WORD *)std::string __p = 0;
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFenceMonitorDatabase::storeFenceState(const CLFenceManager_Type::Fence &, CLFenceManager_Type::FenceStatus)", "%s\n", v19);
        if (v19 != buf) {
          free(v19);
        }
        return 0;
      }
LABEL_41:
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
      goto LABEL_30;
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    char v7 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 == -1) {
        goto LABEL_30;
      }
      goto LABEL_41;
    }
  }
  return 0;
}

void sub_1006171F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100617268(uint64_t a1, uint64_t a2)
{
  if (sub_10014C3C0(a1))
  {
    unint64_t v4 = sub_100C8D62C(a2);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    uint64_t v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      sub_100C8C864(a2);
      int v6 = v25 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)uint64_t buf = 134283779;
      *(void *)&uint8_t buf[4] = v4;
      __int16 v18 = 2081;
      __int16 v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: state remove, %{private}lld, %{private}s", buf, 0x16u);
      if (v25 < 0) {
        operator delete(__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
      }
      sub_100C8C864(a2);
      if (v20 >= 0) {
        __int16 v15 = buf;
      }
      else {
        __int16 v15 = *(unsigned char **)buf;
      }
      v21[0] = 134283779;
      *(void *)&v21[1] = v4;
      __int16 v22 = 2081;
      __int16 v23 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v20 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceMonitorDatabase::removeFenceState(const CLFenceManager_Type::Fence &)", "%s\n", v16);
      if (v16 != (char *)&__p) {
        free(v16);
      }
    }
    sub_10010F274((uint64_t)buf);
    char v7 = sub_100132EFC((void ***)((char *)&v19 + 2), (uint64_t)"DELETE FROM ", 12);
    unint64_t v8 = sub_100132EFC(v7, (uint64_t)"Status", 6);
    uint64_t v9 = sub_100132EFC(v8, (uint64_t)" WHERE ", 7);
    double v10 = sub_100132EFC(v9, (uint64_t)"Key", 3);
    sub_100132EFC(v10, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v25 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
  }
  signed int v12 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", (uint8_t *)&__p, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    *(_WORD *)uint64_t buf = 0;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFenceMonitorDatabase::removeFenceState(const CLFenceManager_Type::Fence &)", "%s\n", v14);
    if (v14 != (char *)&__p) {
      free(v14);
    }
  }
  return 0;
}

void sub_1006179C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100617A38(uint64_t a1, uint64_t *a2)
{
  sub_10010F274((uint64_t)v8);
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    char v5 = 0;
    do
    {
      sub_100C8D62C(v3);
      if (v5) {
        sub_100132EFC(v9, (uint64_t)", ", 2);
      }
      std::ostream::operator<<();
      v3 += 248;
      char v5 = 1;
    }
    while (v3 != v4);
  }
  std::stringbuf::str();
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100617C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100617C1C(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = sub_10014C3C0(a1);
  if (v4)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    char v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v6 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      LODWORD(buf) = 134349056;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: state scrub, remaining, %{public}lu", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v7 = sub_10013D1A0(115, 2);
    if (v7)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
      }
      unint64_t v25 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      LODWORD(__p[0]) = 134349056;
      *(void **)((char *)__p + 4) = (void *)v25;
      int v26 = (char *)_os_log_send_and_compose_impl();
      uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceMonitorDatabase::scrubFenceStates(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v26);
      if (v26 != (char *)&buf) {
        free(v26);
      }
    }
    sub_100617A38(v7, a2);
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v34, "DELETE FROM ");
    unint64_t v8 = std::string::append(&v34, "Status");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    char v33 = 7;
    strcpy(__s, " WHERE ");
    char v10 = std::string::append(&v35, __s, 7uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    signed int v12 = std::string::append(&v36, "Key");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v31 = 9;
    strcpy((char *)v30, " NOT IN (");
    int v14 = std::string::append(&v37, (const std::string::value_type *)v30, 9uLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v43 & 0x80u) == 0) {
      p_long long buf = (const std::string::value_type *)&buf;
    }
    else {
      p_long long buf = (const std::string::value_type *)buf;
    }
    if ((v43 & 0x80u) == 0) {
      std::string::size_type v17 = v43;
    }
    else {
      std::string::size_type v17 = *((void *)&buf + 1);
    }
    __int16 v18 = std::string::append(&v38, p_buf, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    char v29 = 1;
    strcpy(v28, ")");
    char v20 = std::string::append(&v39, v28, 1uLL);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v41 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v29 < 0) {
      operator delete(*(void **)v28);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (v41 >= 0) {
      __int16 v22 = __p;
    }
    else {
      __int16 v22 = (void **)__p[0];
    }
    sub_10014D518(a1, (uint64_t)v22);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
  }
  __int16 v23 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Fence: state can't scrub DB", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    LOWORD(__p[0]) = 0;
    unsigned int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFenceMonitorDatabase::scrubFenceStates(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v27);
    if (v27 != (char *)&buf) {
      free(v27);
    }
  }
  return v4;
}

void sub_100618208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10061830C(uint64_t a1, uint64_t a2)
{
  if (sub_10014C3C0(a1))
  {
    sub_100C8D62C(a2);
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v26, "SELECT ");
    BOOL v4 = std::string::append(&v26, "State");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    char v25 = 6;
    strcpy(__s, " FROM ");
    unint64_t v6 = std::string::append(&v27, __s, 6uLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v28, "Status");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    char v23 = 7;
    strcpy(v22, " WHERE ");
    char v10 = std::string::append(&v29, v22, 7uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    signed int v12 = std::string::append(&v32, "Key");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v21 = 2;
    strcpy(v20, "=?");
    int v14 = std::string::append(&v33, v20, 2uLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    int64_t v31 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v21 < 0) {
      operator delete(*(void **)v20);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v23 < 0) {
      operator delete(*(void **)v22);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v25 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (v31 >= 0) {
      int v16 = __p;
    }
    else {
      int v16 = (void **)__p[0];
    }
    sub_10014D518(a1, (uint64_t)v16);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
  }
  std::string::size_type v17 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v33.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Fence: state No access to DB", (uint8_t *)&v33, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&v33, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEAC0);
    }
    LOWORD(v32.__r_.__value_.__l.__data_) = 0;
    long long v19 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLFenceManager_Type::FenceStatus CLFenceMonitorDatabase::getFenceState(const CLFenceManager_Type::Fence &)", "%s\n", (const char *)v19);
    if (v19 != &v33) {
      free(v19);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_100618EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100619024(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

double sub_100619054(double a1, float a2, float a3, float a4)
{
  return (fmax(fmin(a1, 2.16666675), 1.16666663) * 0.266799986 + 0.510867)
       * 0.414999992
       * a2
       * ((float)(a3 / (float)(a2 * a2)) * -0.003134 + 1.06246 + a4 * 0.003425 + (float)(a4 * a4) * -0.00004952);
}

double sub_1006190E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, float a5, float a6, float a7)
{
  float v8 = a7;
  float v9 = a6;
  float v10 = a5;
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  long long v13 = "nnectionMessageEEEEEMS4_FvbRK15CLNameValuePairEEUlRS1_S8_E_";
  if (*a1 == v11)
  {
    uint64_t v28 = a4;
    int v14 = 0;
    double v26 = 0.0;
    double v27 = 0.0;
  }
  else
  {
    int v14 = 0;
    double v84 = a5;
    double v81 = (float)(a6 / (float)(a5 * a5)) * -0.003134 + 1.06246 + a7 * 0.003425 + (float)(a7 * a7) * -0.00004952;
    double v15 = 0.0;
    double v16 = 0.0;
    do
    {
      double v17 = *(double *)(v12 + 8);
      if (v17 < 2.33333325)
      {
        int v18 = *(_DWORD *)(v12 + 16);
        if (v18 <= 1) {
          int v18 = 1;
        }
        int v19 = v18 - 1;
        if (v18 != 1)
        {
          double v20 = *(double *)(v12 + 24);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1022BEB00);
          }
          double v21 = v81 * ((fmax(fmin(v17, 2.16666675), 1.16666663) * 0.266799986 + 0.510867) * 0.414999992 * v84);
          __int16 v22 = qword_102419208;
          if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
          {
            int v23 = *(_DWORD *)(v12 + 16);
            double v24 = *(double *)(v12 + 24);
            *(_DWORD *)long long buf = 134284289;
            *(double *)int v87 = v17;
            *(_WORD *)&void v87[8] = 1025;
            *(_DWORD *)&v87[10] = v23;
            __int16 v88 = 2049;
            double v89 = v24;
            __int16 v90 = 2049;
            double v91 = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Type,WatchCals,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", buf, 0x26u);
          }
          double v15 = v15 + (double)v19 * (v20 - v21);
          int v14 = (int)((double)v14 + (double)v19);
          double v16 = v16 + (double)v19 * v17;
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419200 != -1) {
              dispatch_once(&qword_102419200, &stru_1022BEB00);
            }
            char v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
        }
      }
      v12 += 32;
    }
    while (v12 != v11);
    if (v14 <= 0)
    {
      double v26 = 0.0;
      double v27 = 0.0;
    }
    else
    {
      double v26 = v15 / (double)v14;
      double v27 = v16 / (double)v14;
    }
    uint64_t v28 = a4;
    float v8 = a7;
    float v10 = a5;
    float v9 = a6;
    long long v13 = "nnectionMessageEEEEEMS4_FvbRK15CLNameValuePairEEUlRS1_S8_E_";
  }
  *(_DWORD *)uint64_t v28 = v14;
  *(double *)(v28 + 16) = v26;
  *(double *)(v28 + 48) = v27;
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BEB00);
  }
  std::string v29 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)int v87 = v14;
    *(_WORD *)&v87[4] = 2048;
    *(double *)&v87[6] = v26;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "numCalsWatch,%d,offsetWatch,%.3f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BEB00);
    }
    std::string::size_type v69 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v69);
    if (v69 != (char *)buf) {
      free(v69);
    }
    long long v13 = "ZN27CLTransientSubscriptionBase19subscriptionHandlerI28CLMiLoConnectionSubscriptionEENSt3__18functionIFvRT_NS2"
          "_10shared_ptrI19CLConnectionMessageEEEEEMS4_FvbRK15CLNameValuePairEEUlRS1_S8_E_"
        + 130;
  }
  uint64_t v30 = *a2;
  uint64_t v31 = a2[1];
  double v75 = v26;
  int v32 = 0;
  if (*a2 == v31)
  {
    double v44 = 0.0;
    double v45 = 0.0;
    int v46 = byte_101D1BF2C + 212;
    int v47 = "ZN27CLTransientSubscriptionBase19subscriptionHandlerI28CLMiLoConnectionSubscriptionEENSt3__18functionIFvRT_NS2"
          "_10shared_ptrI19CLConnectionMessageEEEEEMS4_FvbRK15CLNameValuePairEEUlRS1_S8_E_"
        + 130;
  }
  else
  {
    double v85 = v10;
    double v82 = (float)(v9 / (float)(v10 * v10)) * -0.003134
        + 1.06246
        + v8 * 0.003425
        + (float)(v8 * v8) * *((double *)v13 + 349);
    double v33 = 0.0;
    double v34 = 0.0;
    do
    {
      double v35 = *(double *)(v30 + 8);
      if (v35 < 2.33333325)
      {
        int v36 = *(_DWORD *)(v30 + 16);
        if (v36 <= 1) {
          int v36 = 1;
        }
        int v37 = v36 - 1;
        if (v36 != 1)
        {
          double v38 = *(double *)(v30 + 24);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1022BEB00);
          }
          double v39 = v82 * ((fmax(fmin(v35, 2.16666675), 1.16666663) * 0.266799986 + 0.510867) * 0.414999992 * v85);
          uint64_t v40 = qword_102419208;
          if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
          {
            int v41 = *(_DWORD *)(v30 + 16);
            double v42 = *(double *)(v30 + 24);
            *(_DWORD *)long long buf = 134284289;
            *(double *)int v87 = v35;
            *(_WORD *)&void v87[8] = 1025;
            *(_DWORD *)&v87[10] = v41;
            __int16 v88 = 2049;
            double v89 = v42;
            __int16 v90 = 2049;
            double v91 = v39;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Type,PhoneCals,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", buf, 0x26u);
          }
          double v34 = v34 + (double)v37 * (v38 - v39);
          int v32 = (int)((double)v32 + (double)v37);
          double v33 = v33 + (double)v37 * v35;
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419200 != -1) {
              dispatch_once(&qword_102419200, &stru_1022BEB00);
            }
            unsigned __int8 v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v43);
            if (v43 != (char *)buf) {
              free(v43);
            }
          }
        }
      }
      v30 += 32;
    }
    while (v30 != v31);
    uint64_t v28 = a4;
    if (v32 <= 0)
    {
      double v44 = 0.0;
      double v45 = 0.0;
    }
    else
    {
      double v44 = v34 / (double)v32;
      double v45 = v33 / (double)v32;
    }
    double v26 = v75;
    int v46 = &byte_101D1BF2C[212];
    float v8 = a7;
    int v47 = "nnectionMessageEEEEEMS4_FvbRK15CLNameValuePairEEUlRS1_S8_E_";
    float v10 = a5;
    float v9 = a6;
  }
  *(_DWORD *)(v28 + 4) = v32;
  *(double *)(v28 + 24) = v44;
  *(double *)(v28 + 56) = v45;
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BEB00);
  }
  __int16 v48 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)int v87 = v32;
    *(_WORD *)&v87[4] = 2048;
    *(double *)&v87[6] = v44;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "numCalsPhone,%d,offsetPhone,%.3f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BEB00);
    }
    char v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v70);
    if (v70 != (char *)buf) {
      free(v70);
    }
  }
  uint64_t v50 = *a3;
  uint64_t v49 = a3[1];
  if (*a3 == v49)
  {
    int v51 = 0;
    *(_DWORD *)(v28 + 8) = 0;
    *(void *)(v28 + 32) = 0;
    double v62 = 0.0;
    double v63 = 0.0;
  }
  else
  {
    double v73 = v44;
    int v51 = 0;
    double v83 = (float)(v9 / (float)(v10 * v10)) * -0.003134 + 1.06246 + v8 * 0.003425 + (float)(v8 * v8) * -0.00004952;
    double v52 = 0.0;
    double v80 = *((double *)v47 + 342);
    int v78 = *((void *)v46 + 115);
    double v53 = 0.0;
    double v54 = 0.0;
    do
    {
      double v55 = *(double *)(v50 + 24);
      if (v55 < 2.33333325)
      {
        double v56 = *(double *)(v50 + 32);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BEB00);
        }
        double v57 = v83 * ((fmax(fmin(v55, 2.16666675), v80) * 0.266799986 + 0.510867) * 0.414999992 * v10);
        double v58 = v56 / v55;
        unsigned __int8 v59 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = v78;
          *(double *)int v87 = v55;
          *(_WORD *)&void v87[8] = 1025;
          *(_DWORD *)&v87[10] = 2;
          __int16 v88 = 2049;
          double v89 = v58;
          __int16 v90 = 2049;
          double v91 = v57;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "Type,WalkingSpeed,binCadenceCenter,%{private}.2f,binState,%{private}d,binValue,%{private}.3f,predictedStrideLength,%{private}.3f", buf, 0x26u);
        }
        double v60 = 1.0 / ((v58 - v57) / 0.07 * ((v58 - v57) / 0.07) + 1.0);
        double v54 = v54 + v60 * (v58 - v57);
        double v53 = v53 + v60;
        ++v51;
        double v52 = v52 + v55;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1022BEB00);
          }
          __int16 v61 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v61);
          if (v61 != (char *)buf) {
            free(v61);
          }
        }
      }
      v50 += 48;
    }
    while (v50 != v49);
    if (v51 <= 0) {
      double v62 = 0.0;
    }
    else {
      double v62 = v54 / v53;
    }
    uint64_t v28 = a4;
    *(_DWORD *)(a4 + 8) = v51;
    *(double *)(a4 + 32) = v62;
    double v63 = v52 / (double)v51;
    if (v51 <= 0) {
      double v63 = 0.0;
    }
    double v26 = v75;
    double v44 = v73;
  }
  *(double *)(v28 + 64) = v63;
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BEB00);
  }
  int v64 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)int v87 = v51;
    *(_WORD *)&v87[4] = 2048;
    *(double *)&v87[6] = v62;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "numCalsWalkingSpeed,%d,offsetWalkingSpeed,%.3f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BEB00);
    }
    __int16 v71 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLPredictedWalkDistanceUtils::calcCadenceStrideLengthOffset(const std::vector<P6MWDStrideCal> &, float, float, float, const std::vector<P6MWDStrideCal> &, const std::vector<WalkingSpeedStrideCal> &, StrideCalInfo &)", "%s\n", v71);
    if (v71 != (char *)buf) {
      free(v71);
    }
  }
  if (v14 >= 40) {
    int v65 = 0;
  }
  else {
    int v65 = 40 - v14;
  }
  if (v65 >= v32) {
    int v65 = v32;
  }
  int v66 = (40 - v14 - v65) & ~((40 - v14 - v65) >> 31);
  if (v66 >= v51) {
    int v66 = v51;
  }
  int v67 = v65 + v14 + v66;
  *(_DWORD *)(v28 + 40) = v67;
  if (v67 <= 13) {
    int v67 = 13;
  }
  return (v44 * (double)v65 + v26 * (double)v14 + v62 * (double)v66) / (double)v67;
}

uint64_t sub_100619F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *, double, double))(*(void *)a2 + 24))(a2, &v55, *(double *)(a1 + 8), *(double *)(a1 + 16));
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BEB00);
  }
  unint64_t v6 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    double v8 = *(double *)(a1 + 16);
    int v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)long long buf = 134284289;
    uint64_t v66 = v7;
    __int16 v67 = 2049;
    double v68 = v8;
    __int16 v69 = 1025;
    *(_DWORD *)char v70 = v9;
    *(_WORD *)&v70[4] = 2049;
    *(void *)&v70[6] = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 5);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Looking for metrics during bout,startTime,%{private}f,endTime,%{private}f,steps,%{private}u,metrics,%{private}lu", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BEB00);
    }
    uint64_t v48 = *(void *)(a1 + 8);
    double v49 = *(double *)(a1 + 16);
    int v50 = *(_DWORD *)(a1 + 24);
    int v58 = 134284289;
    uint64_t v59 = v48;
    __int16 v60 = 2049;
    double v61 = v49;
    __int16 v62 = 1025;
    *(_DWORD *)double v63 = v50;
    *(_WORD *)&v63[4] = 2049;
    *(void *)&v63[6] = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 5);
    int v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
  uint64_t v12 = v55;
  uint64_t v11 = v56;
  if (v56 != v55)
  {
    uint64_t v53 = a3;
    int v13 = 0;
    LODWORD(v10) = *(_DWORD *)(a1 + 24);
    double v14 = 0.0;
    double v15 = (double)v10 / *(double *)(a1 + 40);
    double v16 = 0.0;
    do
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BEB00);
      }
      double v17 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *(void *)(v12 + 8);
        double v19 = *(float *)(v12 + 24);
        *(_DWORD *)long long buf = 134218240;
        uint64_t v66 = v18;
        __int16 v67 = 2048;
        double v68 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "startTime,%.3f,walkingSpeed,%.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BEB00);
        }
        uint64_t v29 = *(void *)(v12 + 8);
        double v30 = *(float *)(v12 + 24);
        int v58 = 134218240;
        uint64_t v59 = v29;
        __int16 v60 = 2048;
        double v61 = v30;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      float v20 = *(float *)(v12 + 24);
      float v21 = *(float *)(v12 + 48);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BEB00);
      }
      __int16 v22 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void *)(v12 + 8);
        double v24 = *(float *)(v12 + 24);
        double v25 = *(float *)(v12 + 32);
        int v26 = *(_DWORD *)(a1 + 24);
        int v27 = *(_DWORD *)(a1 + 48);
        double v28 = *(float *)(v12 + 48);
        *(_DWORD *)long long buf = 134219520;
        uint64_t v66 = v23;
        __int16 v67 = 2048;
        double v68 = v24;
        __int16 v69 = 2048;
        *(double *)char v70 = v25;
        *(_WORD *)&v70[8] = 1024;
        *(_DWORD *)&v70[10] = v26;
        *(_WORD *)&v70[14] = 2048;
        *(double *)&v70[16] = v15;
        *(_WORD *)&v70[24] = 1024;
        *(_DWORD *)&v70[26] = v27;
        *(_WORD *)__int16 v71 = 2048;
        *(double *)&void v71[2] = v28;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "startTime,%.3f,walkingSpeed,%.4f,stepLength,%.4f,segmentSteps,%d,segmentCadence,%.4f,segmentEpochCadenceSD,%d,cycleTime,%.3f", buf, 0x40u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BEB00);
        }
        uint64_t v32 = *(void *)(v12 + 8);
        double v33 = *(float *)(v12 + 24);
        double v34 = *(float *)(v12 + 32);
        int v35 = *(_DWORD *)(a1 + 24);
        int v36 = *(_DWORD *)(a1 + 48);
        double v37 = *(float *)(v12 + 48);
        int v58 = 134219520;
        uint64_t v59 = v32;
        __int16 v60 = 2048;
        double v61 = v33;
        __int16 v62 = 2048;
        *(double *)double v63 = v34;
        *(_WORD *)&v63[8] = 1024;
        *(_DWORD *)&v63[10] = v35;
        *(_WORD *)&v63[14] = 2048;
        *(double *)&v63[16] = v15;
        *(_WORD *)&v63[24] = 1024;
        *(_DWORD *)&v63[26] = v36;
        *(_WORD *)int v64 = 2048;
        *(double *)&void v64[2] = v37;
        double v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      double v16 = v16 + v20;
      double v14 = v14 + v21;
      v12 += 96;
      ++v13;
    }
    while (v12 != v11);
    double v39 = v14 / (double)v13;
    double v40 = (double)v13 / (*(double *)(a1 + 40) / v39);
    uint64_t v5 = v5;
    if (v40 <= 0.6) {
      goto LABEL_37;
    }
    double v41 = 2.0 / v39;
    if (vabdd_f64(2.0 / v39, v15) / ((v15 + 2.0 / v39) * 0.5) >= 0.1) {
      goto LABEL_37;
    }
    uint64_t v43 = *(void *)(a1 + 8);
    double v42 = *(double *)(a1 + 16);
    v54[0] = v43;
    *(double *)&v54[1] = v42;
    *(double *)&void v54[2] = v15;
    *(double *)&v54[3] = 2.0 / v39;
    double v44 = v16 / (double)v13;
    *(double *)&v54[4] = v44;
    *(double *)&v54[5] = v40;
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BEB00);
    }
    uint64_t v45 = v53;
    int v46 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134350336;
      uint64_t v66 = v43;
      __int16 v67 = 2050;
      double v68 = v42;
      __int16 v69 = 2050;
      *(double *)char v70 = v15;
      *(_WORD *)&v70[8] = 2050;
      *(double *)&v70[10] = v41;
      *(_WORD *)&v70[18] = 2050;
      *(double *)&v70[20] = v44;
      *(_WORD *)&v70[28] = 2050;
      *(double *)__int16 v71 = v40;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Writing walkingSpeedCal,startTime,%{public}.3f,endTime,%{public}.3f,cadenceWatch,%{public}.3f,cadenceGaitCycle,%{public}.3f,meanWalkingSpeed,%{public}.3f,gaitCycleYield,%{public}.3f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BEB00);
      }
      int v58 = 134350336;
      uint64_t v59 = v43;
      __int16 v60 = 2050;
      double v61 = v42;
      __int16 v62 = 2050;
      *(double *)double v63 = v15;
      *(_WORD *)&v63[8] = 2050;
      *(double *)&v63[10] = v41;
      *(_WORD *)&unsigned char v63[18] = 2050;
      *(double *)&v63[20] = v44;
      *(_WORD *)&v63[28] = 2050;
      *(double *)int v64 = v40;
      double v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLPredictedWalkDistanceUtils::calculateWalkingSpeedStridecals(const CLPredictedWalkDistanceBoutEntry &, CLMobility::GaitMetricsDelegate *, WalkingStrideCalReportingDelegate *)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
      uint64_t v5 = v5;
      uint64_t v45 = v53;
      if (!v53) {
        goto LABEL_37;
      }
    }
    else if (!v53)
    {
LABEL_37:
      uint64_t v12 = v55;
      goto LABEL_38;
    }
    (*(void (**)(uint64_t, void *))(*(void *)v45 + 16))(v45, v54);
    goto LABEL_37;
  }
LABEL_38:
  if (v12)
  {
    uint64_t v56 = v12;
    operator delete((void *)v12);
  }
  return v5;
}

void sub_10061A81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10061A850(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int32x2_t *a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0xBFF0000000000000;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a7 + 64) = _Q0;
  *(void *)(a7 + 80) = -1082130432;
  *(_OWORD *)(a7 + 88) = _Q0;
  *(_DWORD *)(a7 + 104) = -1082130432;
  *(_DWORD *)(a7 + 8) = *(_DWORD *)(a1 + 16);
  *(void *)(a7 + 12) = *(void *)(a1 + 80);
  *(_DWORD *)(a7 + 20) = *(_DWORD *)(a1 + 88);
  *(float *)&_Q0 = *(double *)(a1 + 24);
  *(_DWORD *)(a7 + 36) = _Q0;
  *(float *)&_Q0 = *(double *)(a1 + 56);
  *(_DWORD *)(a7 + 24) = _Q0;
  *(float32x2_t *)(a7 + 28) = vcvt_f32_f64(*(float64x2_t *)(a1 + 32));
  *(_DWORD *)(a7 + 40) = a6->i32[1];
  *(_DWORD *)(a7 + 44) = a6[2].i32[1];
  *(int32x2_t *)(a7 + 48) = vrev64_s32(a6[1]);
  int v16 = a2[2];
  *(_DWORD *)(a7 + 56) = *a2;
  *(_DWORD *)(a7 + 60) = v16;
  sub_10061A970((float *)a7, a3);
  int v17 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a7 + 80) = 0;
  *(_DWORD *)(a7 + 84) = v17;
  *(int32x2_t *)(a7 + 88) = vrev64_s32((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 128)));
  float v18 = *(double *)(a4 + 16);
  if (*(int *)a4 <= 0) {
    float v18 = 0.0;
  }
  *(float *)(a7 + 96) = (float)*(int *)(a1 + 92);
  *(float *)(a7 + 100) = v18;
  float v19 = *(double *)(a5 + 16);
  if (*(int *)a5 <= 0) {
    float v19 = 0.0;
  }
  *(float *)(a7 + 104) = v19;
}

void sub_10061A970(float *a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  unsigned int v2 = a2[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a2);
  if (v4 >= 2)
  {
    a1[18] = (float)v4 / 13.0;
    std::string __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    if (v3 == v2)
    {
      double v26 = 0.0;
      float v10 = 0.0;
    }
    else
    {
      uint64_t v7 = 0;
      int v8 = 0;
      double v9 = 0.0;
      float v10 = 0.0;
      double v11 = 0.0;
      double v12 = 0.0;
      do
      {
        int v13 = v8;
        double v14 = *((double *)v3 + 2);
        ++v8;
        double v15 = 0.0;
        double v16 = v14;
        if (v13)
        {
          double v16 = v9 + (v14 - v9) / (double)v8;
          double v12 = v11 + (v14 - v9) * (v14 - v16);
          double v15 = v12;
        }
        double v17 = *(double *)v3;
        if (v7 >= v32)
        {
          float v18 = (double *)__p;
          uint64_t v19 = ((char *)v7 - (unsigned char *)__p) >> 4;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v21 = (char *)v32 - (unsigned char *)__p;
          if (((char *)v32 - (unsigned char *)__p) >> 3 > v20) {
            unint64_t v20 = v21 >> 3;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            uint64_t v23 = (char *)sub_1000C571C((uint64_t)&v32, v22);
            float v18 = (double *)__p;
            uint64_t v7 = v31;
          }
          else
          {
            uint64_t v23 = 0;
          }
          double v24 = (double *)&v23[16 * v19];
          *double v24 = v17;
          v24[1] = v14;
          double v25 = v24;
          if (v7 != v18)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v7 - 1);
              v25 -= 2;
              v7 -= 2;
            }
            while (v7 != v18);
            float v18 = (double *)__p;
          }
          uint64_t v7 = v24 + 2;
          std::string __p = v25;
          uint64_t v31 = v24 + 2;
          uint64_t v32 = (double *)&v23[16 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *uint64_t v7 = v17;
          v7[1] = v14;
          v7 += 2;
        }
        uint64_t v31 = v7;
        if (v3 != *a2) {
          float v10 = vabdd_f64(*((double *)v3 + 2), *((double *)v3 - 1)) + v10;
        }
        v3 += 3;
        double v9 = v16;
        double v11 = v15;
      }
      while (v3 != a2[1]);
      if (v13) {
        double v26 = v12 / (double)v13;
      }
      else {
        double v26 = 0.0;
      }
    }
    float v27 = sqrt(v26);
    a1[16] = v27;
    float v28 = sub_10126D5B4((double **)&__p, 0) * 86400.0;
    a1[19] = v28;
    float v29 = (*((double *)a2[1] - 1) - *((double *)*a2 + 2)) / v10;
    a1[17] = v29;
    if (__p)
    {
      uint64_t v31 = (double *)__p;
      operator delete(__p);
    }
  }
}

void sub_10061ABE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10061AC0C(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

BOOL sub_10061AC3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v63 = 0;
  int v64 = 0;
  uint64_t v65 = 0;
  sub_10061B0E8(*(double *)(a2 + 56), a1, a3, (uint64_t)&v63);
  uint64_t v53 = (double *)v63;
  int v51 = v64;
  if (v63 != v64)
  {
    double v5 = *(double *)(a2 + 56) + 120.0;
    double v6 = *(double *)(a2 + 64) - *(double *)(a2 + 72);
    do
    {
      std::string __p = 0;
      double v61 = 0;
      __int16 v62 = 0;
      uint64_t v57 = 0;
      int v58 = 0;
      uint64_t v59 = 0;
      uint64_t v8 = *a3;
      uint64_t v7 = a3[1];
      while (v8 != v7)
      {
        double v9 = *(double *)(v8 + 8);
        if (v9 > *v53 && v9 < v5)
        {
          double v11 = v9 - *v53;
          double v12 = v61;
          if (v61 >= v62)
          {
            unint64_t v4 = (double *)__p;
            uint64_t v14 = ((char *)v61 - (unsigned char *)__p) >> 3;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v16 = (char *)v62 - (unsigned char *)__p;
            if (((char *)v62 - (unsigned char *)__p) >> 2 > v15) {
              unint64_t v15 = v16 >> 2;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              float v18 = (char *)sub_1000DA54C((uint64_t)&v62, v17);
              unint64_t v4 = (double *)__p;
              double v12 = v61;
            }
            else
            {
              float v18 = 0;
            }
            uint64_t v19 = (double *)&v18[8 * v14];
            double *v19 = v11;
            int v13 = v19 + 1;
            while (v12 != v4)
            {
              uint64_t v20 = *((void *)v12-- - 1);
              *((void *)v19-- - 1) = v20;
            }
            std::string __p = v19;
            double v61 = v13;
            __int16 v62 = (double *)&v18[8 * v17];
            if (v4) {
              operator delete(v4);
            }
          }
          else
          {
            *double v61 = v11;
            int v13 = v12 + 1;
          }
          double v61 = v13;
          uint64_t v21 = (double *)v58;
          if (v58 >= v59)
          {
            unint64_t v4 = (double *)v57;
            uint64_t v23 = (v58 - (unsigned char *)v57) >> 3;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v25 = v59 - (unsigned char *)v57;
            if ((v59 - (unsigned char *)v57) >> 2 > v24) {
              unint64_t v24 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              float v27 = (char *)sub_1000DA54C((uint64_t)&v59, v26);
              unint64_t v4 = (double *)v57;
              uint64_t v21 = (double *)v58;
            }
            else
            {
              float v27 = 0;
            }
            float v28 = &v27[8 * v23];
            *(void *)float v28 = *(void *)(v8 + 16);
            unint64_t v22 = v28 + 8;
            while (v21 != v4)
            {
              uint64_t v29 = *((void *)v21-- - 1);
              *((void *)v28 - 1) = v29;
              v28 -= 8;
            }
            uint64_t v57 = v28;
            int v58 = v22;
            uint64_t v59 = &v27[8 * v26];
            if (v4) {
              operator delete(v4);
            }
          }
          else
          {
            *(void *)int v58 = *(void *)(v8 + 16);
            unint64_t v22 = (char *)(v21 + 1);
          }
          int v58 = v22;
        }
        v8 += 32;
      }
      double v30 = (float *)qword_10247C798;
      uint64_t v31 = qword_10247C7A0;
      while (v30 != (float *)v31)
      {
        float v32 = *v30;
        double v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        double v33 = (double *)__p;
        double v34 = v61;
        if (__p != v61)
        {
          int v35 = 0;
          do
          {
            double v36 = *(double *)(a2 + 72) + v6 * exp(*v33 * (float)-v32);
            if (v35 >= v56)
            {
              unint64_t v4 = (double *)v54;
              uint64_t v38 = ((char *)v35 - (unsigned char *)v54) >> 3;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61) {
                sub_1001D7FD4();
              }
              uint64_t v40 = (char *)v56 - (unsigned char *)v54;
              if (((char *)v56 - (unsigned char *)v54) >> 2 > v39) {
                unint64_t v39 = v40 >> 2;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                double v42 = (char *)sub_1000DA54C((uint64_t)&v56, v41);
                unint64_t v4 = (double *)v54;
                int v35 = v55;
              }
              else
              {
                double v42 = 0;
              }
              uint64_t v43 = (double *)&v42[8 * v38];
              double *v43 = v36;
              double v37 = v43 + 1;
              while (v35 != v4)
              {
                uint64_t v44 = *((void *)v35-- - 1);
                *((void *)v43-- - 1) = v44;
              }
              double v54 = v43;
              uint64_t v55 = v37;
              uint64_t v56 = (double *)&v42[8 * v41];
              if (v4) {
                operator delete(v4);
              }
            }
            else
            {
              double *v35 = v36;
              double v37 = v35 + 1;
            }
            uint64_t v55 = v37;
            ++v33;
            int v35 = v37;
          }
          while (v33 != v34);
        }
        double v46 = sub_10061B228((uint64_t)v4, (uint64_t *)&v57, &v54);
        if (v46 != -1.0)
        {
          double v47 = *(double *)(a2 + 88);
          if (v47 == -1.0 || v46 < v47)
          {
            *(double *)(a2 + 80) = v32;
            *(double *)(a2 + 88) = v46;
            *(double *)(a2 + 104) = *v53;
            *(double *)(a2 + 96) = sub_10061B2A8(v45, (uint64_t *)&v57, &v54);
          }
        }
        unint64_t v4 = (double *)v54;
        if (v54)
        {
          uint64_t v55 = (double *)v54;
          operator delete(v54);
        }
        ++v30;
      }
      if (v57)
      {
        int v58 = (char *)v57;
        operator delete(v57);
      }
      unint64_t v4 = (double *)__p;
      if (__p)
      {
        double v61 = (double *)__p;
        operator delete(__p);
      }
      ++v53;
    }
    while (v53 != v51);
  }
  double v49 = *(double *)(a2 + 80);
  if (v49 == 0.0) {
    *(_DWORD *)a2 = 17;
  }
  if (v63)
  {
    int v64 = (double *)v63;
    operator delete(v63);
  }
  return v49 != 0.0;
}

void sub_10061B078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10061B0E8(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    double v7 = a1 + -10.0;
    double v8 = a1 + 25.0;
    uint64_t v9 = a4 + 16;
    do
    {
      while (1)
      {
        double v10 = *(double *)(v4 + 8);
        if (v10 > v7 && v10 < v8) {
          break;
        }
        v4 += 32;
        if (v10 > v8 || v4 == v5) {
          return;
        }
      }
      uint64_t v14 = *(double **)(a4 + 8);
      unint64_t v13 = *(void *)(a4 + 16);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = *(double **)a4;
        uint64_t v17 = ((uint64_t)v14 - *(void *)a4) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_1000DA54C(v9, v20);
          uint64_t v16 = *(double **)a4;
          uint64_t v14 = *(double **)(a4 + 8);
          double v10 = *(double *)(v4 + 8);
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = (double *)&v21[8 * v17];
        double *v22 = v10;
        unint64_t v15 = v22 + 1;
        while (v14 != v16)
        {
          uint64_t v23 = *((void *)v14-- - 1);
          *((void *)v22-- - 1) = v23;
        }
        *(void *)a4 = v22;
        *(void *)(a4 + 8) = v15;
        *(void *)(a4 + 16) = &v21[8 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *uint64_t v14 = v10;
        unint64_t v15 = v14 + 1;
      }
      *(void *)(a4 + 8) = v15;
      v4 += 32;
    }
    while (v4 != v5);
  }
}

double sub_10061B228(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  double result = -1.0;
  if (*a2 != v4)
  {
    uint64_t v6 = (v4 - v3) >> 3;
    if (v6 == (uint64_t)(a3[1] - *a3) >> 3)
    {
      uint64_t v7 = 0;
      double v8 = (double)(unint64_t)v6;
      double v9 = 0.0;
      do
      {
        if (v6 == v7) {
          sub_100273D6C();
        }
        double v9 = v9
           + (*(double *)(v3 + 8 * v7) - *(double *)(*a3 + 8 * v7))
           * (*(double *)(v3 + 8 * v7) - *(double *)(*a3 + 8 * v7));
        ++v7;
      }
      while ((double)(int)v7 < v8);
      return v9 / v8;
    }
  }
  return result;
}

double sub_10061B2A8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  double result = -1.0;
  if (*a2 != v4)
  {
    uint64_t v6 = (v4 - v3) >> 3;
    if (v6 == (uint64_t)(a3[1] - *a3) >> 3)
    {
      unint64_t v7 = 0;
      double v8 = 0.0;
      double v9 = 0.0;
      double v10 = 0.0;
      double v11 = 0.0;
      do
      {
        if (v6 == v7) {
          sub_100273D6C();
        }
        double v12 = *(double *)(v3 + 8 * v7);
        double v13 = v12 - *(double *)(*a3 + 8 * v7);
        double v14 = v13 - v11;
        double v11 = v11 + (v13 - v11) / (double)++v7;
        double v10 = v10 + v14 * (v13 - v11);
        double v15 = v12 - v9;
        double v9 = v9 + (v12 - v9) / (double)v7;
        double v8 = v8 + v15 * (v12 - v9);
      }
      while ((double)(int)v7 < (double)(unint64_t)v6);
      unint64_t v16 = v7 - 1;
      if (v7 != 1)
      {
        double v17 = v8 / (double)v16;
        if (v17 != 0.0) {
          return 1.0 - v10 / (double)v16 / v17;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10061B37C()
{
  qword_10247C798 = 0;
  qword_10247C7A0 = 0;
  qword_10247C7A8 = 0;
  qword_10247C798 = (uint64_t)operator new(0x190uLL);
  uint64_t v0 = qword_10247C798 + 400;
  qword_10247C7A8 = qword_10247C798 + 400;
  memcpy((void *)qword_10247C798, &unk_101D24B00, 0x190uLL);
  qword_10247C7A0 = v0;

  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_10247C798, (void *)&_mh_execute_header);
}

void sub_10061B3FC(uint64_t a1@<X8>)
{
  sub_100134750(__p, "");
  *(void *)a1 = &_mh_execute_header;
  *(_WORD *)(a1 + 8) = 0;
  unsigned int v2 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_1000DC48C(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v5);
    *(void *)(a1 + 40) = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)unsigned int v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = 0;
  }
}

void sub_10061B484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061B4A0(uint64_t a1)
{
  sub_10061B3FC((uint64_t)v3);
  sub_10061B514(a1, (uint64_t)v3, (const char **)&off_1022BEB20);
  if (v5 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10061B4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061B514(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5 = sub_1005F54CC(a1, a2);
  if (sub_10014C3C0(v5))
  {
    sub_1005F7B0C(a1, off_10241CE30, a3, 0, 0);
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    uint64_t v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      double v10 = "CLFenceCentroidDatabase";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLFenceCentroidDatabase::CLFenceCentroidDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return a1;
}

void sub_10061B704(_Unwind_Exception *a1)
{
  sub_1005F5850(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10061B71C(uint64_t a1, int a2, double a3, double a4)
{
  if (sub_10014C3C0(a1))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    double v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315907;
      *(void *)&uint8_t buf[4] = "storeFenceCentroid";
      __int16 v31 = 1025;
      int v32 = a2;
      __int16 v33 = 2049;
      double v34 = a3;
      __int16 v35 = 2049;
      double v36 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s, foreignKey, %{private}d, coordinate, <%{private}f, %{private}f>", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
      }
      v23[0] = 136315907;
      *(void *)&v23[1] = "storeFenceCentroid";
      __int16 v24 = 1025;
      int v25 = a2;
      __int16 v26 = 2049;
      double v27 = a3;
      __int16 v28 = 2049;
      double v29 = a4;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::storeFenceCentroid(const CLClientLocationCoordinate, const int)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    sub_10010F274((uint64_t)v23);
    double v9 = sub_100132EFC((int *)((char *)&v25 + 2), (uint64_t)"INSERT OR REPLACE INTO ", 23);
    size_t v10 = strlen(off_10241CE30);
    double v11 = sub_100132EFC(v9, (uint64_t)off_10241CE30, v10);
    double v12 = sub_100132EFC(v11, (uint64_t)" (", 2);
    double v13 = sub_100132EFC(v12, (uint64_t)"ForeignKey", 10);
    double v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
    double v15 = sub_100132EFC(v14, (uint64_t)"Latitude", 8);
    unint64_t v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
    double v17 = sub_100132EFC(v16, (uint64_t)"Longitude", 9);
    sub_100132EFC(v17, (uint64_t)") VALUES (?, ?, ?)", 18);
    std::stringbuf::str();
    if ((SBYTE3(v34) & 0x80u) == 0) {
      unint64_t v18 = buf;
    }
    else {
      unint64_t v18 = *(unsigned char **)buf;
    }
    sub_10014D518(a1, (uint64_t)v18);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
  }
  uint64_t v19 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "storeFenceCentroid";
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    v23[0] = 136315138;
    *(void *)&v23[1] = "storeFenceCentroid";
    unint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFenceCentroidDatabase::storeFenceCentroid(const CLClientLocationCoordinate, const int)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  return 0;
}

void sub_10061BE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10061BF04(uint64_t a1, int a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67174657;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: Removing vertices, key, %{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    v17[0] = 67174657;
    v17[1] = a2;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::removeFenceCentroid(const int)", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  if (sub_10014C3C0(a1))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    uint64_t v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315395;
      *(void *)&uint8_t buf[4] = "removeFenceCentroid";
      __int16 v21 = 1025;
      int v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s, foreignKey, %{private}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
      }
      v17[0] = 136315395;
      *(void *)&v17[1] = "removeFenceCentroid";
      __int16 v18 = 1025;
      int v19 = a2;
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::removeFenceCentroid(const int)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    sub_10010F274((uint64_t)v17);
    uint64_t v6 = sub_100132EFC((int *)((char *)&v19 + 2), (uint64_t)"DELETE FROM ", 12);
    size_t v7 = strlen(off_10241CE30);
    double v8 = sub_100132EFC(v6, (uint64_t)off_10241CE30, v7);
    double v9 = sub_100132EFC(v8, (uint64_t)" WHERE ", 7);
    size_t v10 = sub_100132EFC(v9, (uint64_t)"ForeignKey", 10);
    sub_100132EFC(v10, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v23 >= 0) {
      double v11 = buf;
    }
    else {
      double v11 = *(unsigned char **)buf;
    }
    sub_10014D518(a1, (uint64_t)v11);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
  }
  double v12 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "removeFenceCentroid";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    v17[0] = 136315138;
    *(void *)&v17[1] = "removeFenceCentroid";
    unint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFenceCentroidDatabase::removeFenceCentroid(const int)", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  return 0;
}

void sub_10061C720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10061C790(uint64_t a1, uint64_t *a2)
{
  sub_10010F274((uint64_t)v8);
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    char v5 = 0;
    do
    {
      if (v5) {
        sub_100132EFC(v9, (uint64_t)", ", 2);
      }
      std::ostream::operator<<();
      v3 += 248;
      char v5 = 1;
    }
    while (v3 != v4);
  }
  std::stringbuf::str();
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10061C94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10061C964(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
  }
  uint64_t v6 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315395;
    *(void *)&uint8_t buf[4] = "getFenceCentroid";
    __int16 v24 = 1025;
    int v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s, Attempting to fetch centroid for key %{private}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    v20[0] = 136315395;
    *(void *)&v20[1] = "getFenceCentroid";
    __int16 v21 = 1025;
    int v22 = a2;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLDaemonLocation CLFenceCentroidDatabase::getFenceCentroid(const int)", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  if (sub_10014C3C0(a1))
  {
    sub_10010F274((uint64_t)v20);
    size_t v7 = sub_100132EFC((int *)((char *)&v22 + 2), (uint64_t)"SELECT ", 7);
    double v8 = sub_100132EFC(v7, (uint64_t)"Latitude", 8);
    double v9 = sub_100132EFC(v8, (uint64_t)", ", 2);
    char v10 = sub_100132EFC(v9, (uint64_t)"Longitude", 9);
    double v11 = sub_100132EFC(v10, (uint64_t)" FROM ", 6);
    size_t v12 = strlen(off_10241CE30);
    double v13 = sub_100132EFC(v11, (uint64_t)off_10241CE30, v12);
    double v14 = sub_100132EFC(v13, (uint64_t)" WHERE ", 7);
    double v15 = sub_100132EFC(v14, (uint64_t)"ForeignKey", 10);
    sub_100132EFC(v15, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v26 >= 0) {
      unint64_t v16 = buf;
    }
    else {
      unint64_t v16 = *(unsigned char **)buf;
    }
    sub_10014D518(a1, (uint64_t)v16);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
  }
  double v17 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "getFenceCentroid";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "%s, No access to DB", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    v20[0] = 136315138;
    *(void *)&v20[1] = "getFenceCentroid";
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonLocation CLFenceCentroidDatabase::getFenceCentroid(const int)", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 12) = 0;
  *(_OWORD *)(a3 + 100) = *(long long *)((char *)&xmmword_101D82F18 + 4);
  *(_OWORD *)(a3 + 116) = *(long long *)((char *)&xmmword_101D82F28 + 4);
  *(_OWORD *)(a3 + 132) = *(long long *)((char *)&xmmword_101D82F38 + 4);
  *(_OWORD *)(a3 + 36) = *(long long *)((char *)&xmmword_101D82ED8 + 4);
  *(_OWORD *)(a3 + 52) = *(long long *)((char *)&xmmword_101D82EE8 + 4);
  *(_OWORD *)(a3 + 68) = *(long long *)((char *)&xmmword_101D82EF8 + 4);
  *(_DWORD *)a3 = 0xFFFF;
  *(void *)(a3 + 148) = 0;
  *(_OWORD *)(a3 + 84) = *(long long *)((char *)&xmmword_101D82F08 + 4);
  *(_OWORD *)(a3 + 20) = *(long long *)((char *)&xmmword_101D82EC8 + 4);
}

void sub_10061D5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  sub_101A129A8((uint64_t)&a35);
  _Unwind_Resume(a1);
}

BOOL sub_10061D65C(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = sub_10014C3C0(a1);
  if (v4)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    char v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v6 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "scrubFenceCentroids";
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s, scrubbing centroids, number of valid foreign keys, %{public}lu", buf, 0x16u);
    }
    uint64_t v7 = sub_10013D1A0(115, 2);
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
      }
      unint64_t v25 = 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 3);
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "scrubFenceCentroids";
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = v25;
      char v26 = (char *)_os_log_send_and_compose_impl();
      uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFenceCentroidDatabase::scrubFenceCentroids(const std::vector<CLFenceManager_Type::Fence>)", "%s\n", v26);
      if (v26 != buf) {
        free(v26);
      }
    }
    sub_10061C790(v7, a2);
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v34, "DELETE FROM ");
    double v8 = std::string::append(&v34, off_10241CE30);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    char v33 = 7;
    strcpy(__s, " WHERE ");
    char v10 = std::string::append(&v35, __s, 7uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    size_t v12 = std::string::append(&v36, "ForeignKey");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v31 = 9;
    strcpy((char *)v30, " NOT IN (");
    double v14 = std::string::append(&v37, (const std::string::value_type *)v30, 9uLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v42 & 0x80u) == 0) {
      unint64_t v16 = buf;
    }
    else {
      unint64_t v16 = *(const std::string::value_type **)buf;
    }
    if ((v42 & 0x80u) == 0) {
      std::string::size_type v17 = v42;
    }
    else {
      std::string::size_type v17 = *(void *)&buf[8];
    }
    __int16 v18 = std::string::append(&v38, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    char v29 = 1;
    strcpy(v28, ")");
    unint64_t v20 = std::string::append(&v39, v28, 1uLL);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v20->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v29 < 0) {
      operator delete(*(void **)v28);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (__p[23] >= 0) {
      int v22 = __p;
    }
    else {
      int v22 = *(unsigned char **)__p;
    }
    sub_10014D518(a1, (uint64_t)v22);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
  }
  char v23 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "scrubFenceCentroids";
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "%s, can't scrub fence centroids, invalid database", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022BEBE0);
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = "scrubFenceCentroids";
    double v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLFenceCentroidDatabase::scrubFenceCentroids(const std::vector<CLFenceManager_Type::Fence>)", "%s\n", v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  return v4;
}

void sub_10061DC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

void sub_10061DD9C(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_10061DDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12)
{
  *(void *)a1 = 0x403E000000000000;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = a8;
  *(_OWORD *)(a1 + 64) = a9;
  *(_OWORD *)(a1 + 80) = a10;
  long long v13 = (_OWORD *)(a1 + 1352);
  *(void *)(a1 + 96) = a11;
  *(void *)(a1 + 104) = a12;
  bzero((void *)(a1 + 112), 0x4D8uLL);
  *long long v13 = xmmword_101D24D28;
  *(_OWORD *)(a1 + 1368) = unk_101D24D38;
  *(_OWORD *)(a1 + 1384) = xmmword_101D24D48;
  *(_OWORD *)(a1 + 1396) = *(long long *)((char *)&xmmword_101D24D48 + 12);
  *(void *)(a1 + 1416) = 0;
  int v53 = 0;
  uint64_t v14 = sub_1000D3E78();
  sub_10006B564(v14, &v51);
  int v15 = sub_1004D11B0(v51, "NatalimetryUserInfoAge", (float *)&v53);
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if (v15)
  {
    int v16 = v53;
    *(unsigned char *)(a1 + 1408) = 1;
    *(_DWORD *)(a1 + 1372) = v16;
  }
  int v50 = 0;
  uint64_t v17 = sub_1000D3E78();
  sub_10006B564(v17, &v51);
  int v18 = sub_1004D11B0(v51, "NatalimetryUserInfoHeightM", (float *)&v50);
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if (v18)
  {
    int v19 = v50;
    *(unsigned char *)(a1 + 1409) = 1;
    *(_DWORD *)(a1 + 1360) = v19;
  }
  int v49 = 0;
  uint64_t v20 = sub_1000D3E78();
  sub_10006B564(v20, &v51);
  int v21 = sub_1004D11B0(v51, "NatalimetryUserInfoWeightKG", (float *)&v49);
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if (v21)
  {
    int v22 = v49;
    *(unsigned char *)(a1 + 1410) = 1;
    *(_DWORD *)(a1 + 1364) = v22;
  }
  unsigned int v48 = 0;
  uint64_t v23 = sub_1000D3E78();
  sub_10006B564(v23, &v51);
  int v24 = sub_10006EF84(v51, "NatalimetryUserInfoGender", &v48);
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if (v24 && v48 <= 1) {
    *(_DWORD *)long long v13 = v48;
  }
  unsigned int v47 = 0;
  uint64_t v25 = sub_1000D3E78();
  sub_10006B564(v25, &v51);
  int v26 = sub_10006EF84(v51, "NatalimetryUserInfoBiologicalSex", &v47);
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if (v26) {
    *(_DWORD *)(a1 + 1356) = sub_10061E244(v47);
  }
  uint64_t v27 = sub_1000D3E78();
  sub_10006B564(v27, &v51);
  sub_1004D11B0(v51, "NatalimetryUserInfoHrmin", (float *)(a1 + 1376));
  if (v52) {
    sub_1000DB0A0(v52);
  }
  *(_DWORD *)(a1 + 1384) = *(_DWORD *)(a1 + 1376);
  uint64_t v28 = sub_1000D3E78();
  sub_10006B564(v28, &v51);
  char v29 = sub_1004D11B0(v51, "NatalimetryUserInfoHrmax", (float *)(a1 + 1380));
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if ((v29 & 1) == 0)
  {
    double v30 = *(float *)(a1 + 1372) * -0.699999988 + 208.0;
    if (*(unsigned char *)(a1 + 1400)) {
      double v30 = v30 + -44.0;
    }
    float v31 = v30;
    *(float *)(a1 + 1380) = v31;
  }
  uint64_t v32 = sub_1000D3E78();
  sub_10006B564(v32, &v51);
  sub_1004D11B0(v51, "NatalimetryUserInfoPal", (float *)(a1 + 1388));
  if (v52) {
    sub_1000DB0A0(v52);
  }
  uint64_t v33 = sub_1000D3E78();
  sub_10006B564(v33, &v51);
  char v34 = sub_1004D11B0(v51, "NatalimetryUserInfoRunVo2max", (float *)(a1 + 1396));
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if ((v34 & 1) == 0) {
    *(_DWORD *)(a1 + 1396) = 1088421888;
  }
  unsigned int v46 = 0;
  uint64_t v35 = sub_1000D3E78();
  sub_10006B564(v35, &v51);
  int v36 = sub_10006EF84(v51, "NatalimetryUserCondition", &v46);
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if (v36 && v46 <= 6) {
    *(_DWORD *)(a1 + 1392) = v46;
  }
  uint64_t v37 = sub_1000D3E78();
  sub_10006B564(v37, &v51);
  sub_1000D2988(v51, "NatalimetryUserInfoBetaBlockerUse", (BOOL *)(a1 + 1400));
  if (v52) {
    sub_1000DB0A0(v52);
  }
  uint64_t v38 = sub_1000D3E78();
  sub_10006B564(v38, &v51);
  sub_1004D11B0(v51, "NatalimetryAdaptiveExericseMinuteThreshold", (float *)(a1 + 1404));
  if (v52) {
    sub_1000DB0A0(v52);
  }
  uint64_t v39 = sub_1000D3E78();
  sub_10006B564(v39, &v51);
  char v40 = sub_1004D11B0(v51, "NatalimetryUserInfoVo2max", (float *)(a1 + 1368));
  if (v52) {
    sub_1000DB0A0(v52);
  }
  if ((v40 & 1) == 0)
  {
    long long v41 = *(_OWORD *)(a1 + 1368);
    v44[0] = *v13;
    v44[1] = v41;
    v45[0] = *(_OWORD *)(a1 + 1384);
    *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)(a1 + 1396);
    sub_10061E40C((uint64_t)v44);
    *(_DWORD *)(a1 + 1368) = v42;
  }
  return a1;
}

void sub_10061E1FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 48);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061E244(uint64_t result)
{
  int v1 = result;
  if (result >= 4)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    unsigned int v2 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67174657;
      int v6 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Unsupported CLHKBiologicalSex value: %{private}d", buf, 8u);
    }
    BOOL v3 = sub_10013D1A0(115, 0);
    double result = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022BEC00);
      }
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static CLHKBiologicalSex CLNatalieModelInput::intToBiologicalSex(int)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
      return 0;
    }
  }
  return result;
}

void sub_10061E40C(uint64_t a1)
{
  double v2 = *(float *)(a1 + 36);
  double v3 = *(float *)(a1 + 20);
  double v4 = (float)(*(float *)(a1 + 12) / (float)(*(float *)(a1 + 8) * *(float *)(a1 + 8)));
  float v5 = (v2 * 1.921 + 56.363 + v3 * -0.381 + v4 * -0.754 + (double)(1 - *(_DWORD *)a1) * 10.987) / 3.5;
  double v6 = v3 * -0.039 + 14.889 + v4 * -0.151 + (double)*(int *)a1 * -3.1391 + v2 * 0.429;
  float v7 = v6;
  if (v5 >= v7) {
    float v8 = v5;
  }
  else {
    float v8 = v6;
  }
  if (*(unsigned char *)(a1 + 48)) {
    float v9 = v8 * 0.65;
  }
  else {
    float v9 = v8;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  char v10 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)long long buf = 134219008;
    double v14 = v5;
    __int16 v15 = 2048;
    double v16 = v7;
    __int16 v17 = 2048;
    uint64_t v18 = 0x401C000000000000;
    __int16 v19 = 1024;
    int v20 = v11;
    __int16 v21 = 2048;
    double v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Derived Vo2max, %.1f, Revised Vo2max, %.1f, Minimum Vo2max, %.1f, Beta Blocker Use, %d, Beta Blocker Vo2max, %.1f", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    size_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static float CLNatalieModelInput::computeDerivedVo2max(const CLBodyMetrics)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

uint64_t sub_10061E720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12)
{
  return sub_10061DDCC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_10061E744(uint64_t a1)
{
  sub_10061E780(*(void **)(a1 + 16));
  double v2 = *(void **)(a1 + 24);

  return sub_10061E994(v2);
}

uint64_t sub_10061E780(void *a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling the %s buffer", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieInput<CLOdometerEntry>::disableSource() [Data_T = CLOdometerEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  if (!*((unsigned char *)a1 + 121))
  {
    *((unsigned char *)a1 + 80) = 0;
    a1[11] = 0;
  }
  return result;
}

uint64_t sub_10061E994(void *a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling the %s buffer", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieInput<CLElevationChangeEntry>::disableSource()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  if (!*((unsigned char *)a1 + 121))
  {
    *((unsigned char *)a1 + 80) = 0;
    a1[11] = 0;
  }
  return result;
}

uint64_t sub_10061EBA8(uint64_t a1)
{
  sub_10061EBE4(*(void **)(a1 + 16));
  double v2 = *(void **)(a1 + 24);

  return sub_10061EDC0(v2);
}

uint64_t sub_10061EBE4(void *a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling the spectators for %s buffer", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieInput<CLOdometerEntry>::enableSource() [Data_T = CLOdometerEntry]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return (*(uint64_t (**)(void *))(*a1 + 80))(a1);
}

uint64_t sub_10061EDC0(void *a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling the spectators for %s buffer", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieInput<CLElevationChangeEntry>::enableSource()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return (*(uint64_t (**)(void *))(*a1 + 80))(a1);
}

float sub_10061EF9C(float *a1, double a2)
{
  float result = -1.0;
  if (a1[344] + -10.0 > a2)
  {
    float v4 = a1[346];
    if (vabdd_f64(a2, v4) < 0.001) {
      return (float)((float)(a1[345] * 2.6232) / v4) + 3.9865;
    }
  }
  return result;
}

void sub_10061EFFC(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v2;
  v10[0] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)(a1 + 44);
  sub_10061E40C((uint64_t)v9);
  float v3 = *(float *)(a1 + 28) * 15.3;
  float v5 = v4 * 3.5;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v6 = qword_102418FF8;
  float v7 = v3 / v5;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    double v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Estimated HRmin, %.1f ", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    int v11 = 134217984;
    double v12 = v7;
    float v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static float CLNatalieModelInput::estimateHRmin(const CLBodyMetrics &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_10061F1FC(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 1396) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 1368) = v4;
  *(_OWORD *)(a1 + 1384) = v5;
  *(_OWORD *)(a1 + 1352) = v3;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *((float *)a2 + 2);
    double v8 = *((float *)a2 + 3);
    double v9 = *((float *)a2 + 4);
    double v10 = *((float *)a2 + 5);
    double v11 = *((float *)a2 + 6);
    double v12 = *((float *)a2 + 7);
    double v13 = *((float *)a2 + 8);
    double v14 = *((float *)a2 + 9);
    int v15 = *((_DWORD *)a2 + 10);
    double v16 = *((float *)a2 + 11);
    int v17 = *((unsigned __int8 *)a2 + 48);
    int v18 = *(_DWORD *)a2;
    int v19 = *((_DWORD *)a2 + 1);
    int v20 = *((unsigned __int8 *)a2 + 56);
    int v21 = *((unsigned __int8 *)a2 + 57);
    int v22 = *((unsigned __int8 *)a2 + 58);
    double v23 = *((float *)a2 + 13);
    *(_DWORD *)long long buf = 67113216;
    int v26 = v18;
    __int16 v27 = 2048;
    double v28 = v7;
    __int16 v29 = 2048;
    double v30 = v8;
    __int16 v31 = 2048;
    double v32 = v9;
    __int16 v33 = 2048;
    double v34 = v10;
    __int16 v35 = 2048;
    double v36 = v11;
    __int16 v37 = 2048;
    double v38 = v12;
    __int16 v39 = 2048;
    double v40 = v13;
    __int16 v41 = 2048;
    double v42 = v14;
    __int16 v43 = 1024;
    int v44 = v15;
    __int16 v45 = 2048;
    double v46 = v16;
    __int16 v47 = 1024;
    int v48 = v17;
    __int16 v49 = 1024;
    int v50 = v19;
    __int16 v51 = 1024;
    int v52 = v20;
    __int16 v53 = 1024;
    int v54 = v21;
    __int16 v55 = 1024;
    int v56 = v22;
    __int16 v57 = 2048;
    double v58 = v23;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "ModelInput,gender,%d,height,%f,weight,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%d,runVo2max,%f,betaBlockerUse,%d,biologicalSex,%d,isAgeSet,%d,isHeightSet,%d,isWeightSet,%d,adaptiveEMThresh,%f", buf, 0x90u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieModelInput::updateBodyMetrics(const CLBodyMetrics &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
}

void sub_10061F58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != 19)
  {
    if (v3 == 1)
    {
LABEL_8:
      sub_10061F868(*(double **)(a1 + 40), 10.0, 0.1);
      sub_10061F64C(*(double **)(a1 + 8), 35.0, 8.0);
      *(void *)a1 = 0x403E000000000000;
      return;
    }
    if (v3) {
      return;
    }
  }
  if (*(void *)(a2 + 224) != 1) {
    goto LABEL_8;
  }
  *(void *)a1 = 0x4050400000000000;
  sub_10061F64C(*(double **)(a1 + 8), 65.0, 65.0);
  long long v4 = *(double **)(a1 + 40);

  sub_10061F868(v4, 150.0, 150.0);
}

void sub_10061F64C(double *a1, double a2, double a3)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 1);
    uint64_t v9 = *((void *)a1 + 2);
    *(_DWORD *)long long buf = 136316162;
    uint64_t v12 = v8;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    __int16 v15 = 2048;
    double v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    __int16 v19 = 2048;
    double v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieInput<CLCatherineData>::modifyTimeouts(CFTimeInterval, CFTimeInterval) [Data_T = CLCatherineData]", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  a1[12] = a2;
  a1[2] = a3;
}

void sub_10061F868(double *a1, double a2, double a3)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BEC00);
  }
  double v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 1);
    uint64_t v9 = *((void *)a1 + 2);
    *(_DWORD *)long long buf = 136316162;
    uint64_t v12 = v8;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    __int16 v15 = 2048;
    double v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    __int16 v19 = 2048;
    double v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BEC00);
    }
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieInput<CLStepCountEntry>::modifyTimeouts(CFTimeInterval, CFTimeInterval) [Data_T = CLStepCountEntry]", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  a1[12] = a2;
  a1[2] = a3;
}

void sub_10061FA84(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10061FAB4(uint64_t a1, const void *a2, int a3)
{
  bzero((void *)a1, 0x658uLL);
  *(_OWORD *)__int16 v17 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)__int16 v15 = 0u;
  *(_OWORD *)double v16 = 0u;
  long long v13 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  double v6 = malloc_type_malloc(a3 + 1, 0x210E367BuLL);
  memcpy(v6, a2, a3);
  *((unsigned char *)v6 + a3) = 0;
  if (sub_100621F24((uint64_t)v12, 14, (char *)v6) == 14)
  {
    if (sub_10062222C((int *)a1, v12[0])) {
      *(void *)(a1 + 96) |= 1uLL;
    }
    if (sub_1006222F0(a1 + 16, v12[1], (unsigned char *)v13)) {
      *(void *)(a1 + 96) |= 2uLL;
    }
    if (sub_1006222F0(a1 + 40, *((char **)&v13 + 1), v14[0])) {
      *(void *)(a1 + 96) |= 4uLL;
    }
    if (v14[1])
    {
      int v7 = *v14[1];
      if ((v7 - 48) <= 9) {
        int v7 = atoi(v14[1]);
      }
      *(_DWORD *)(a1 + 64) = v7;
      *(void *)(a1 + 96) |= 8uLL;
    }
    if (v15[0])
    {
      int v8 = *v15[0];
      if ((v8 - 48) <= 9) {
        int v8 = atoi(v15[0]);
      }
      *(_DWORD *)(a1 + 68) = v8;
      *(void *)(a1 + 96) |= 0x10uLL;
    }
    if (v15[1])
    {
      *(_DWORD *)(a1 + 72) = (int)(atof(v15[1]) * 10.0);
      *(void *)(a1 + 96) |= 0x20uLL;
    }
    if (v16[0])
    {
      *(_DWORD *)(a1 + 76) = (int)(atof(v16[0]) * 10.0);
      *(void *)(a1 + 96) |= 0x40uLL;
    }
    if (v17[0])
    {
      *(_DWORD *)(a1 + 80) = (int)(atof(v17[0]) * 10.0);
      *(void *)(a1 + 96) |= 0x80uLL;
    }
    if (v18[0])
    {
      *(_DWORD *)(a1 + 84) = (int)(atof(v18[0]) * 10.0);
      *(void *)(a1 + 96) |= 0x100uLL;
    }
    if (v18[1])
    {
      int v9 = *v18[1];
      if ((v9 - 48) <= 9) {
        int v9 = atoi(v18[1]);
      }
      uint64_t v10 = 0;
      *(_DWORD *)(a1 + 88) = v9;
      *(void *)(a1 + 96) |= 0x200uLL;
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 8;
  }
  free(v6);
  return v10;
}

uint64_t sub_10061FD18(int *a1, const void *a2, int a3)
{
  bzero(a1, 0x658uLL);
  *(_OWORD *)__int16 v15 = 0u;
  *(_OWORD *)double v16 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)long long v13 = 0u;
  double v6 = malloc_type_malloc(a3 + 1, 0x21098E2uLL);
  memcpy(v6, a2, a3);
  *((unsigned char *)v6 + a3) = 0;
  if (sub_100621F24((uint64_t)v13, 18, (char *)v6) == 18)
  {
    if (v13[0])
    {
      int v7 = *v13[0];
      if ((v7 - 48) <= 9) {
        int v7 = atoi(v13[0]);
      }
      *a1 = v7;
      *((void *)a1 + 9) |= 1uLL;
    }
    if (v13[1])
    {
      int v8 = *v13[1];
      if ((v8 - 48) <= 9) {
        int v8 = atoi(v13[1]);
      }
      a1[1] = v8;
      *((void *)a1 + 9) |= 2uLL;
    }
    for (uint64_t i = 0; i != 12; ++i)
    {
      uint64_t v10 = (const char *)*((void *)v14 + i);
      if (v10)
      {
        int v11 = *v10;
        if ((v11 - 48) <= 9) {
          int v11 = atoi(v10);
        }
        a1[i + 2] = v11;
        *((void *)a1 + 9) |= (4 << i);
      }
    }
    if (v15[0])
    {
      a1[14] = (int)(atof(v15[0]) * 10.0);
      *((void *)a1 + 9) |= 0x4000uLL;
    }
    if (v15[1])
    {
      a1[15] = (int)(atof(v15[1]) * 10.0);
      *((void *)a1 + 9) |= 0x8000uLL;
    }
    if (v16[0])
    {
      a1[16] = (int)(atof(v16[0]) * 10.0);
      *((void *)a1 + 9) |= 0x10000uLL;
    }
    free(v6);
    return 1;
  }
  else
  {
    free(v6);
    return 8;
  }
}

uint64_t sub_10061FF2C(int *a1, const void *a2, int a3)
{
  bzero(a1, 0x658uLL);
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)__int16 v17 = 0u;
  double v6 = malloc_type_malloc(a3 + 1, 0xE6BD8924uLL);
  memcpy(v6, a2, a3);
  *((unsigned char *)v6 + a3) = 0;
  int v7 = sub_100621F24((uint64_t)v17, 19, (char *)v6);
  if (v7 > 2)
  {
    unsigned int v9 = v7;
    if (v17[0])
    {
      int v10 = *v17[0];
      if ((v10 - 48) <= 9) {
        int v10 = atoi(v17[0]);
      }
      *a1 = v10;
      *((void *)a1 + 10) |= 1uLL;
    }
    if (v17[1])
    {
      int v11 = *v17[1];
      if ((v11 - 48) <= 9) {
        int v11 = atoi(v17[1]);
      }
      a1[1] = v11;
      *((void *)a1 + 10) |= 2uLL;
    }
    if (v18[0])
    {
      int v12 = *v18[0];
      if ((v12 - 48) <= 9) {
        int v12 = atoi(v18[0]);
      }
      a1[2] = v12;
      *((void *)a1 + 10) |= 4uLL;
    }
    if (v9 >= 7)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      __int16 v15 = a1 + 3;
      do
      {
        if ((uint64_t)v14 >= a1[2]) {
          break;
        }
        sub_100622400(v15, v18[v13 * 2 + 1], *(const char **)&v20[v13 - 1], *((const char **)&v19 + v13 * 2 + 1), *(const char **)&v20[v13]);
        *((void *)a1 + 10) |= (8 << v14);
        if (v13 * 2 + 11 > (unint64_t)v9) {
          break;
        }
        v13 += 2;
        v15 += 4;
      }
      while (v14++ < 3);
    }
    free(v6);
    return 2;
  }
  else
  {
    free(v6);
    return 8;
  }
}

uint64_t sub_100620128(uint64_t a1, const void *a2, int a3)
{
  bzero((void *)a1, 0x658uLL);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  double v6 = malloc_type_malloc(a3 + 1, 0xD3D3C496uLL);
  memcpy(v6, a2, a3);
  *((unsigned char *)v6 + a3) = 0;
  unsigned int v7 = sub_100621F24((uint64_t)&v18, 13, (char *)v6);
  if (v7 > 0xD || (unsigned int v8 = v7, ((1 << v7) & 0x3400) == 0))
  {
    __int16 v15 = (char *)v6;
    goto LABEL_44;
  }
  if (sub_10062222C((int *)a1, (char *)v18)) {
    *(void *)(a1 + 96) |= 1uLL;
  }
  if (*((void *)&v18 + 1))
  {
    int v9 = (char)**((unsigned char **)&v18 + 1);
    if ((v9 - 48) <= 9) {
      int v9 = atoi(*((const char **)&v18 + 1));
    }
    *(_DWORD *)(a1 + 12) = v9;
    *(void *)(a1 + 96) |= 2uLL;
  }
  if (sub_1006222F0(a1 + 16, (char *)v19, *((unsigned char **)&v19 + 1))) {
    *(void *)(a1 + 96) |= 4uLL;
  }
  if (sub_1006222F0(a1 + 40, (char *)v20, *((unsigned char **)&v20 + 1))) {
    *(void *)(a1 + 96) |= 8uLL;
  }
  if ((void)v21)
  {
    *(_DWORD *)(a1 + 64) = (int)(atof((const char *)v21) * 10.0);
    *(void *)(a1 + 96) |= 0x10uLL;
  }
  if (*((void *)&v21 + 1))
  {
    *(_DWORD *)(a1 + 68) = (int)(atof(*((const char **)&v21 + 1)) * 10.0);
    *(void *)(a1 + 96) |= 0x20uLL;
  }
  if ((void)v22)
  {
    int v10 = atoi((const char *)v22);
    *(_DWORD *)(a1 + 72) = v10 / 10000;
    *(_DWORD *)(a1 + 76) = v10 / 100 % 100;
    *(_DWORD *)(a1 + 80) = v10 % 100;
    *(void *)(a1 + 96) |= 0x40uLL;
  }
  if (v8 >= 0xB)
  {
    if (*((void *)&v22 + 1))
    {
      *(_DWORD *)(a1 + 84) = (int)(atof(*((const char **)&v22 + 1)) * 10.0);
      *(void *)(a1 + 96) |= 0x80uLL;
    }
    if (v8 >= 0xC)
    {
      if ((void)v23)
      {
        int v11 = *(char *)v23;
        if ((v11 - 48) <= 9) {
          int v11 = atoi((const char *)v23);
        }
        *(_DWORD *)(a1 + 88) = v11;
        *(void *)(a1 + 96) |= 0x100uLL;
      }
      if (v8 >= 0xD && *((void *)&v23 + 1))
      {
        int v12 = (char)**((unsigned char **)&v23 + 1);
        if ((v12 - 48) <= 9) {
          int v12 = atoi(*((const char **)&v23 + 1));
        }
        *(_DWORD *)(a1 + 92) = v12;
        *(void *)(a1 + 96) |= 0x200uLL;
      }
    }
  }
  free(v6);
  if ((double)*(int *)(a1 + 64) / 10.0 * 0.514444444 <= 600.0) {
    return 3;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BED00);
  }
  uint64_t v13 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "invalid GPRMC,speed above max", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BED00);
    }
    unint64_t v14 = (const char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseRMC(CLNmeaData *, const char *, int)", "%s\n", v14);
    if (v14 != (const char *)buf)
    {
      __int16 v15 = (char *)v14;
LABEL_44:
      free(v15);
    }
  }
  return 8;
}

uint64_t sub_10062055C(CFAbsoluteTime *a1, const void *a2, int a3)
{
  double v6 = malloc_type_malloc(a3 + 1, 0xB309996BuLL);
  if (v6)
  {
    unsigned int v7 = v6;
    uint64_t v8 = 8;
    if (!a1 || !a2) {
      goto LABEL_70;
    }
    long long v66 = 0u;
    long long v65 = 0u;
    long long v64 = 0u;
    long long v63 = 0u;
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    long long v59 = 0u;
    long long v58 = 0u;
    long long v57 = 0u;
    long long v56 = 0u;
    long long v55 = 0u;
    long long v54 = 0u;
    long long v53 = 0u;
    long long v52 = 0u;
    long long v51 = 0u;
    long long v50 = 0u;
    long long v49 = 0u;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v45 = 0u;
    long long v44 = 0u;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v41 = 0u;
    long long v40 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    *(_OWORD *)__int16 v37 = 0u;
    *(_OWORD *)double v36 = 0u;
    *(_OWORD *)__int16 v35 = 0u;
    bzero(a1, 0x658uLL);
    memcpy(v7, a2, a3);
    *((unsigned char *)v7 + a3) = 0;
    if ((int)sub_100621F24((uint64_t)v35, 107, (char *)v7) > 5)
    {
      if (v35[0])
      {
        a1[3] = atof(v35[0]);
        *a1 = CFAbsoluteTimeGetCurrent();
        a1[1] = sub_10016C458();
        a1[2] = sub_1000D3E50();
        if (v35[1])
        {
          int v10 = *v35[1];
          if ((v10 - 48) <= 9) {
            int v10 = atoi(v35[1]);
          }
          *((_DWORD *)a1 + 8) = v10;
          if (v36[0])
          {
            int v11 = *v36[0];
            if ((v11 - 48) <= 9) {
              int v11 = atoi(v36[0]);
            }
            *((_DWORD *)a1 + 9) = v11;
            if (v36[1])
            {
              int v12 = *v36[1];
              if ((v12 - 48) <= 9) {
                int v12 = atoi(v36[1]);
              }
              *((_DWORD *)a1 + 10) = v12;
            }
            if (v37[0])
            {
              unsigned int v13 = *v37[0];
              if (v13 - 48 <= 9) {
                unsigned int v13 = atoi(v37[0]);
              }
              *((_DWORD *)a1 + 11) = v13;
              if (v13)
              {
                if (v13 <= 0x32)
                {
                  uint64_t v22 = 0;
                  uint64_t v23 = 2 * v13;
                  uint64_t v8 = 4;
                  while (1)
                  {
                    uint64_t v24 = v37[v22 + 1];
                    if (!v24) {
                      break;
                    }
                    a1[6] = atof(v24);
                    uint64_t v25 = v35[(v22 + 6) & 0xFFFFFFFE];
                    if (!v25)
                    {
                      if (qword_102419630 != -1) {
                        dispatch_once(&qword_102419630, &stru_1022BED40);
                      }
                      double v28 = qword_102419638;
                      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "STARK,PASCD,unexpected empty sample field", buf, 2u);
                      }
                      if (!sub_10013D1A0(115, 2)) {
                        goto LABEL_69;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_102419630 != -1) {
                        goto LABEL_102;
                      }
                      goto LABEL_100;
                    }
                    double v26 = atof(v25);
                    a1[56] = v26;
                    if (v26 > 600.0)
                    {
                      if (qword_102419630 != -1) {
                        dispatch_once(&qword_102419630, &stru_1022BED40);
                      }
                      __int16 v29 = qword_102419638;
                      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid speed,above max", buf, 2u);
                      }
                      if (!sub_10013D1A0(115, 2)) {
                        goto LABEL_69;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_102419630 != -1) {
                        goto LABEL_102;
                      }
                      goto LABEL_100;
                    }
                    v22 += 2;
                    ++a1;
                    if (v23 == v22) {
                      goto LABEL_70;
                    }
                  }
                  if (qword_102419630 != -1) {
                    dispatch_once(&qword_102419630, &stru_1022BED40);
                  }
                  __int16 v27 = qword_102419638;
                  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "STARK,PASCD,unexpected empty timeOffset field", buf, 2u);
                  }
                  if (!sub_10013D1A0(115, 2)) {
                    goto LABEL_69;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_102419630 != -1) {
                    goto LABEL_102;
                  }
                  goto LABEL_100;
                }
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_1022BED40);
                }
                unint64_t v14 = qword_102419638;
                if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
                {
                  int v15 = *((_DWORD *)a1 + 11);
                  *(_DWORD *)long long buf = 67109376;
                  int v32 = v15;
                  __int16 v33 = 1024;
                  int v34 = 50;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning STARK,PASCD,invalid sampleCount,%d,max,%d", buf, 0xEu);
                }
                if (!sub_10013D1A0(115, 2)) {
                  goto LABEL_69;
                }
                bzero(buf, 0x65CuLL);
                if (qword_102419630 == -1) {
                  goto LABEL_100;
                }
              }
              else
              {
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_1022BED40);
                }
                long long v20 = qword_102419638;
                if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "STARK,PASCD,sampleCount==0", buf, 2u);
                }
                if (!sub_10013D1A0(115, 2)) {
                  goto LABEL_69;
                }
                bzero(buf, 0x65CuLL);
                if (qword_102419630 == -1) {
                  goto LABEL_100;
                }
              }
            }
            else
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_1022BED40);
              }
              long long v19 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid sampleCount", buf, 2u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_69;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419630 == -1) {
                goto LABEL_100;
              }
            }
          }
          else
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BED40);
            }
            long long v18 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid transmissionState", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_69;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419630 == -1) {
              goto LABEL_100;
            }
          }
        }
        else
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BED40);
          }
          __int16 v17 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid sensorType", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_69;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419630 == -1) {
            goto LABEL_100;
          }
        }
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BED40);
        }
        double v16 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid timestamp", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_69;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_100;
        }
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BED40);
      }
      int v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "STARK,PASCD,invalid fields", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_69;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_100:
        double v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseSCD(CLNmeaData *, const char *, int)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
LABEL_69:
        uint64_t v8 = 8;
LABEL_70:
        free(v7);
        return v8;
      }
    }
LABEL_102:
    dispatch_once(&qword_102419630, &stru_1022BED40);
    goto LABEL_100;
  }
  return 8;
}

uint64_t sub_1006210F4(double *a1, const void *a2, int a3)
{
  double v6 = malloc_type_malloc(a3 + 1, 0x185ABB37uLL);
  if (v6)
  {
    unsigned int v7 = v6;
    uint64_t v8 = 8;
    if (!a1 || !a2) {
      goto LABEL_38;
    }
    memset(v35, 0, 496);
    *(_OWORD *)int v34 = 0u;
    bzero(a1, 0x658uLL);
    memcpy(v7, a2, a3);
    *((unsigned char *)v7 + a3) = 0;
    if ((int)sub_100621F24((uint64_t)v34, 205, (char *)v7) > 2)
    {
      if (v34[0])
      {
        *a1 = atof(v34[0]);
        if (v34[1])
        {
          int v10 = *v34[1];
          if ((v10 - 48) <= 9) {
            int v10 = atoi(v34[1]);
          }
          *((_DWORD *)a1 + 2) = v10;
          if (*((_DWORD *)a1 + 11) <= 0x32u)
          {
            if (v10 < 1)
            {
              uint64_t v8 = 5;
              goto LABEL_38;
            }
            double v16 = (const char **)v35 + 1;
            __int16 v17 = a1 + 6;
            uint64_t v18 = 0x500000000;
            uint64_t v19 = 0x400000000;
            uint64_t v20 = v10;
            while (1)
            {
              long long v21 = *(v16 - 1);
              if (!v21) {
                break;
              }
              *(v17 - 3) = atof(v21);
              uint64_t v22 = *v16;
              if (*v16)
              {
                *(v17 - 2) = atof(*v16);
                int v23 = 1;
              }
              else
              {
                int v23 = 0;
              }
              *((_DWORD *)a1 + 3) = v23;
              uint64_t v24 = *(uint64_t *)((char *)v34 + (v19 >> 29));
              if (v24)
              {
                *(v17 - 1) = atof(*(char **)((char *)v34 + (v19 >> 29)));
                int v25 = 1;
              }
              else
              {
                int v25 = 0;
              }
              *((_DWORD *)a1 + 4) = v25;
              double v26 = *(char **)((char *)v34 + (v18 >> 29));
              if (v26)
              {
                *__int16 v17 = atof(v26);
                *((_DWORD *)a1 + 5) = 1;
              }
              else
              {
                *((_DWORD *)a1 + 5) = 0;
                if (!((unint64_t)v22 | v24))
                {
                  if (qword_102419630 != -1) {
                    dispatch_once(&qword_102419630, &stru_1022BED40);
                  }
                  double v28 = qword_102419638;
                  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sample set, all empty", buf, 2u);
                  }
                  if (!sub_10013D1A0(115, 2)) {
                    goto LABEL_37;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_102419630 != -1) {
                    goto LABEL_72;
                  }
                  goto LABEL_70;
                }
              }
              v18 += 0x400000000;
              v19 += 0x400000000;
              v16 += 4;
              v17 += 4;
              uint64_t v8 = 5;
              if (!--v20) {
                goto LABEL_38;
              }
            }
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BED40);
            }
            __int16 v27 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sample time offset", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_37;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              goto LABEL_72;
            }
            goto LABEL_70;
          }
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BED40);
          }
          int v11 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            int v12 = *((_DWORD *)a1 + 11);
            *(_DWORD *)long long buf = 67109376;
            int v31 = v12;
            __int16 v32 = 1024;
            int v33 = 50;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sampleCount,%d,max,%d", buf, 0xEu);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_37;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419630 == -1) {
            goto LABEL_70;
          }
        }
        else
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BED40);
          }
          unint64_t v14 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid sampleCount", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_37;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419630 == -1) {
            goto LABEL_70;
          }
        }
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BED40);
        }
        unsigned int v13 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid timestamp", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_37;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_70;
        }
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BED40);
      }
      int v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "STARK,PAGCD,invalid fields", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_70:
        __int16 v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseGCD(CLNmeaData *, const char *, int)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
LABEL_37:
        uint64_t v8 = 8;
LABEL_38:
        free(v7);
        return v8;
      }
    }
LABEL_72:
    dispatch_once(&qword_102419630, &stru_1022BED40);
    goto LABEL_70;
  }
  return 8;
}

uint64_t sub_100621914(CFAbsoluteTime *a1, const void *a2, int a3)
{
  double v6 = malloc_type_malloc(a3 + 1, 0xB5CE28FCuLL);
  if (v6)
  {
    unsigned int v7 = v6;
    uint64_t v8 = 8;
    if (!a1 || !a2) {
      goto LABEL_32;
    }
    double v16 = 0;
    __int16 v17 = 0;
    uint64_t v18 = 0;
    bzero(a1, 0x658uLL);
    memcpy(v7, a2, a3);
    *((unsigned char *)v7 + a3) = 0;
    if ((int)sub_100621F24((uint64_t)&v16, 3, (char *)v7) > 2)
    {
      if (v16)
      {
        a1[1] = atof(v16);
        if (v17)
        {
          int v10 = *v17;
          if ((v10 - 48) <= 9) {
            int v10 = atoi(v17);
          }
          if (v10 == 84)
          {
            *a1 = CFAbsoluteTimeGetCurrent();
            uint64_t v8 = 7;
LABEL_32:
            free(v7);
            return v8;
          }
        }
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BED40);
        }
        int v11 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "STARK,GPHDT,invalid degrees true indication", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2))
        {
LABEL_31:
          uint64_t v8 = 8;
          goto LABEL_32;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1)
        {
LABEL_35:
          unint64_t v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNmeaSentenceType CLNmeaParserParseHDT(CLNmeaData *, const char *, int)", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
          goto LABEL_31;
        }
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BED40);
        }
        int v12 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "STARK,GPHDT,invalid heading", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_31;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BED40);
      }
      int v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "STARK,GPHDT,invalid fields", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_31;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_35;
      }
    }
    dispatch_once(&qword_102419630, &stru_1022BED40);
    goto LABEL_35;
  }
  return 8;
}

uint64_t sub_100621D20(uint64_t a1, int a2)
{
  if (a2 < 5)
  {
    return 0;
  }
  else
  {
    char v2 = 0;
    uint64_t v3 = (char *)(a1 + 1);
    uint64_t v4 = (a2 - 3) - 1;
    do
    {
      char v5 = *v3++;
      v2 ^= v5;
      --v4;
    }
    while (v4);
  }
  return v2;
}

BOOL sub_100621D58(uint64_t a1, int a2)
{
  if (a2 < 5)
  {
    unsigned int v4 = 0;
  }
  else
  {
    LOBYTE(v4) = 0;
    uint64_t v5 = (a2 - 3) - 1;
    double v6 = (char *)(a1 + 1);
    do
    {
      char v7 = *v6++;
      LOBYTE(v4) = v7 ^ v4;
      --v5;
    }
    while (v5);
    unsigned int v4 = v4;
  }
  __sprintf_chk(__s1, 0, 3uLL, "%X%X", v4 >> 4, v4 & 0xF);
  return strncmp(__s1, (const char *)(a1 + a2 - 2), 2uLL) == 0;
}

unint64_t sub_100621DF8(unint64_t *a1, unint64_t *a2, char *__s, int a4)
{
  uint64_t v7 = a4;
  unint64_t result = (unint64_t)memchr(__s, 36, a4);
  *a1 = result;
  if (result)
  {
    int v9 = &__s[v7];
    unint64_t result = (unint64_t)memchr((void *)(result + 1), 42, (size_t)&v9[~result]);
    *a2 = result;
    if (result)
    {
      unint64_t v10 = result + 2;
      if (result + 2 >= (unint64_t)v9)
      {
        return 0;
      }
      else
      {
        *a2 = v10;
        unint64_t v11 = *a1;
        int v12 = (void *)(*a1 + 1);
        while ((unint64_t)v12 < v10)
        {
          unsigned int v13 = (char *)memchr(v12, 36, v10 - (void)v12 + 1);
          if (!v13) {
            break;
          }
          LODWORD(v11) = v13;
          *a1 = (unint64_t)v13;
          int v12 = v13 + 1;
          unint64_t v10 = *a2;
        }
        return (v10 - v11 + 1);
      }
    }
  }
  return result;
}

BOOL sub_100621EC0(const char *a1)
{
  return strlen(a1) == 3 && __tolower(*a1) == 110 && __tolower(a1[1]) == 97 && __tolower(a1[2]) == 110;
}

uint64_t sub_100621F24(uint64_t a1, int a2, char *__str)
{
  double v6 = strtok(__str, ",*");
  if (!v6) {
    return 0;
  }
  int v7 = (int)v6;
  int v8 = strlen(v6);
  int v9 = strtok(0, ",*");
  uint64_t v10 = 0;
  if (v9)
  {
    uint64_t v11 = (a2 - 1);
    if (a2 >= 1)
    {
      int v12 = v9;
      LODWORD(v10) = 0;
      int v13 = v7 + v8;
      int v26 = a2 - 2;
      while (1)
      {
        int v14 = ~v13 + v12;
        BOOL v15 = v14 >= 1 && (int)v10 < (int)v11;
        if (v15)
        {
          int v16 = v12 - v13;
          unint64_t v17 = (v16 - 2);
          if ((v26 - v10) >= v17) {
            uint64_t v18 = (v16 - 2);
          }
          else {
            uint64_t v18 = (v26 - v10);
          }
          bzero((void *)(a1 + 8 * (int)v10), 8 * v18 + 8);
          uint64_t v19 = (int)v10 + 1;
          unint64_t v20 = v11 - 1 - (int)v10;
          if (v20 >= v17) {
            LODWORD(v20) = v17;
          }
          LODWORD(v10) = v10 + v20 + 1;
          do
          {
            if (v14 < 2) {
              break;
            }
            --v14;
            BOOL v15 = v19++ < v11;
          }
          while (v15);
        }
        *(void *)(a1 + 8 * (int)v10) = v12;
        if (sub_100621EC0(v12)) {
          break;
        }
        uint64_t v10 = (v10 + 1);
        int v21 = strlen(v12);
        uint64_t v22 = strtok(0, ",*");
        if (v22)
        {
          int v13 = v12 + v21;
          int v12 = v22;
          if ((int)v10 < a2) {
            continue;
          }
        }
        return v10;
      }
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022BECC0);
      }
      int v23 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109378;
        int v28 = 0;
        __int16 v29 = 2080;
        double v30 = __str;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Field,%d,received with NAN, rejecting, %s", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419470 != -1) {
          dispatch_once(&qword_102419470, &stru_1022BECC0);
        }
        int v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "int CLNmeaParserGetFields(char **, int, char *, int)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_10062222C(int *a1, char *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*a2)
    {
      double v4 = atof(a2);
      int v5 = (int)(floor(v4) + 0.5);
      *a1 = v5 / 10000;
      a1[1] = v5 / 100 % 100;
      *(float *)&double v4 = v4 - (double)v5 + (float)(v5 % 100);
      a1[2] = LODWORD(v4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1006222F0(uint64_t a1, char *a2, unsigned char *a3)
{
  uint64_t result = 0;
  if (a1 && a2 && a3)
  {
    if (*a2 && *a3)
    {
      double v6 = atof(a2);
      uint64_t result = 0;
      *(_DWORD *)a1 = (int)v6 / 100;
      *(_DWORD *)(a1 + 4) = (int)v6 % 100;
      *(double *)(a1 + 8) = (v6 - (double)(int)v6) * 60.0;
      int v7 = (char)*a3;
      if ((v7 - 69) <= 0x12 && ((1 << (v7 - 69)) & 0x44201) != 0)
      {
        *(_DWORD *)(a1 + 16) = v7;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double sub_1006223B8(uint64_t a1)
{
  double v1 = *(double *)(a1 + 8) + (double)(3600 * *(_DWORD *)a1 + 60 * *(_DWORD *)(a1 + 4));
  if ((*(_DWORD *)(a1 + 16) | 4) == 0x57) {
    double v1 = 0.0 - v1;
  }
  return v1 / 3600.0;
}

uint64_t sub_100622400(int *a1, char *a2, const char *a3, const char *a4, const char *a5)
{
  if (a2) {
    int v9 = atoi(a2);
  }
  else {
    int v9 = -1;
  }
  *a1 = v9;
  if (a3) {
    int v10 = atoi(a3);
  }
  else {
    int v10 = -1;
  }
  a1[1] = v10;
  if (a4) {
    int v11 = atoi(a4);
  }
  else {
    int v11 = -1;
  }
  a1[2] = v11;
  if (a5) {
    int v12 = atoi(a5);
  }
  else {
    int v12 = -1;
  }
  a1[3] = v12;
  return 1;
}

uint64_t sub_100622498(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 96) & a2;
}

uint64_t sub_1006224A4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v7 = "$GPGGA";
  while (1)
  {
    size_t v8 = strlen(v7);
    if (!strncmp(v7, a2, v8)) {
      break;
    }
    int v7 = (&off_1022BEC20)[v6 + 2];
    v6 += 2;
    if (v6 == 14) {
      return 8;
    }
  }
  int v10 = (&off_1022BEC20)[v6 + 1];

  return ((uint64_t (*)(uint64_t, const char *, uint64_t))v10)(a1, a2, a3);
}

void sub_10062255C(id a1)
{
  qword_102419478 = (uint64_t)os_log_create("com.apple.locationd.Position", "NMEA");
}

void sub_10062258C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1006225BC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

id sub_1006225EC(void *a1, uint64_t a2)
{
  sub_10062288C(a2);
  if ([a1 manufacturer])
  {
    sub_100134750(&__str, (char *)[a1 manufacturer]);
    std::string::operator=((std::string *)a2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if ([a1 name])
  {
    sub_100134750(&v10, (char *)[a1 name]);
    std::string::operator=((std::string *)(a2 + 24), &v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  if ([a1 modelNumber])
  {
    sub_100134750(&v9, (char *)[a1 modelNumber]);
    std::string::operator=((std::string *)(a2 + 48), &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  if ([a1 serialNumber])
  {
    sub_100134750(&v8, (char *)[objc_msgSend(objc_msgSend(a1, "serialNumber"), "UTF8String") UTF8String]);
    std::string::operator=((std::string *)(a2 + 72), &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  if ([a1 firmwareRevision])
  {
    sub_100134750(&v7, (char *)[a1 firmwareRevision]);
    std::string::operator=((std::string *)(a2 + 96), &v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
  if ([a1 hardwareRevision])
  {
    sub_100134750(&v6, (char *)[objc_msgSend(objc_msgSend(a1, "hardwareRevision"), "UTF8String") UTF8String]);
    std::string::operator=((std::string *)(a2 + 120), &v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  if ([a1 ppid])
  {
    sub_100134750(&v5, (char *)[[[a1 ppid] UTF8String];
    std::string::operator=((std::string *)(a2 + 144), &v5);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
  *(_WORD *)(a2 + 168) = 256;
  id result = [a1 supportsCarPlay];
  *(unsigned char *)(a2 + 170) = (_BYTE)result;
  return result;
}

void sub_1006227F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10062288C(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  *(_OWORD *)std::string v7 = 0u;
  *(_OWORD *)double v4 = 0u;
  *(_OWORD *)std::string v5 = 0u;
  *(_OWORD *)char v2 = 0u;
  long long v3 = 0u;
  *(_OWORD *)double v1 = 0u;
  *(_WORD *)((char *)&v11 + 9) = 257;
  sub_100627C24(a1, (long long *)v1);
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v8[0]) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
  if (SHIBYTE(v5[0]) < 0) {
    operator delete(v4[0]);
  }
  if (SHIBYTE(v3) < 0) {
    operator delete(v2[1]);
  }
  if (SHIBYTE(v2[0]) < 0) {
    operator delete(v1[0]);
  }
}

void sub_1006230C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_10062332C(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  if (v2 == *(void **)(*(void *)(a1 + 40) + 8))
  {
    long long v129 = 0uLL;
    memset(v130, 0, sizeof(v130));
    *(_OWORD *)__int16 v127 = 0uLL;
    *(_OWORD *)BOOL v128 = 0uLL;
    *(_OWORD *)__int16 v125 = 0uLL;
    long long v126 = 0uLL;
    long long v123 = 0uLL;
    *(_OWORD *)std::string v124 = 0uLL;
    *(_OWORD *)__int16 v121 = 0uLL;
    *(_OWORD *)std::string v122 = 0uLL;
    __int16 v131 = 257;
    sub_1006225EC(v2, (uint64_t)v121);
    uint64_t v8 = *(void *)(a1 + 40);
    long long v9 = *(void (**)(uint64_t, void **))(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 16);
    sub_100627DD8((char *)v107, (long long *)v121);
    v9(v10, v107);
    if (v120 < 0) {
      operator delete(v119);
    }
    if (v118 < 0) {
      operator delete(v117);
    }
    if (v116 < 0) {
      operator delete(v115);
    }
    if (v114 < 0) {
      operator delete(v113);
    }
    if (v112 < 0) {
      operator delete(v111);
    }
    if (v110 < 0) {
      operator delete(v109);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }

    *(void *)(*(void *)(a1 + 40) + 8) = 0;
    long long v11 = [+[EAAccessoryManager sharedAccessoryManager] connectedAccessories];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BEDA0);
    }
    int v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = v133;
      sub_1000FECE0((const __CFString *)[*(id *)(a1 + 32) manufacturer], (uint64_t)v133);
      if (v136 < 0) {
        int v13 = *(unsigned char **)v133;
      }
      sub_1000FECE0((const __CFString *)[*(id *)(a1 + 32) modelNumber], (uint64_t)v105);
      int v14 = v106;
      BOOL v15 = (void **)v105[0];
      NSUInteger v16 = [(NSArray *)v11 count];
      unint64_t v17 = v105;
      *(_DWORD *)long long buf = 136315650;
      if (v14 < 0) {
        unint64_t v17 = v15;
      }
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v17;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@ClxAccessory, state, 0, model, %s, %s, count, %lu", buf, 0x20u);
      if (v106 < 0) {
        operator delete(v105[0]);
      }
      if (SHIBYTE(v136) < 0) {
        operator delete(*(void **)v133);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BEDA0);
      }
      long long v39 = v105;
      sub_1000FECE0((const __CFString *)[*(id *)(a1 + 32) manufacturer], (uint64_t)v105);
      if (v106 < 0) {
        long long v39 = (void **)v105[0];
      }
      sub_1000FECE0((const __CFString *)[*(id *)(a1 + 32) modelNumber], (uint64_t)v103);
      int v40 = v104;
      long long v41 = (void **)v103[0];
      NSUInteger v42 = [(NSArray *)v11 count];
      long long v43 = v103;
      *(_DWORD *)v133 = 136315650;
      if (v40 < 0) {
        long long v43 = v41;
      }
      *(void *)&v133[4] = v39;
      __int16 v134 = 2080;
      v135 = v43;
      __int16 v136 = 2048;
      v137 = (void **)v42;
      long long v44 = (char *)_os_log_send_and_compose_impl();
      if (v104 < 0) {
        operator delete(v103[0]);
      }
      if (v106 < 0) {
        operator delete(v105[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDidDisconnect:]_block_invoke", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    uint64_t v18 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEFAULT))
    {
      int v70 = SHIBYTE(v122[0]);
      double v68 = (void **)v121[0];
      int v66 = SHIBYTE(v125[0]);
      long long v64 = (void **)v124[0];
      int v62 = SHIBYTE(v123);
      long long v60 = (void **)v122[1];
      int v19 = SHIBYTE(v126);
      unint64_t v20 = (void **)v125[1];
      int v21 = SHIBYTE(v128[0]);
      uint64_t v22 = (void **)v127[0];
      int v23 = SHIBYTE(v129);
      uint64_t v24 = (void **)v128[1];
      unsigned int v25 = [(NSArray *)v11 count];
      int v26 = v121;
      __int16 v27 = v124;
      int v28 = &v122[1];
      __int16 v29 = &v125[1];
      double v30 = v127;
      int v31 = &v128[1];
      if (v23 < 0) {
        int v31 = v24;
      }
      *(_DWORD *)long long buf = 136382211;
      if (v21 < 0) {
        double v30 = v22;
      }
      if (v19 < 0) {
        __int16 v29 = v20;
      }
      if (v62 < 0) {
        int v28 = v60;
      }
      if (v66 < 0) {
        __int16 v27 = v64;
      }
      if (v70 < 0) {
        int v26 = v68;
      }
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v27;
      *(_WORD *)&unsigned char buf[22] = 2081;
      *(void *)&unsigned char buf[24] = v28;
      *(_WORD *)&uint8_t buf[32] = 2081;
      *(void *)&buf[34] = v29;
      *(_WORD *)&buf[42] = 2081;
      *(void *)&buf[44] = v30;
      *(_WORD *)&buf[52] = 2081;
      *(void *)&buf[54] = v31;
      *(_WORD *)&buf[62] = 1025;
      LODWORD(v147[0]) = v25;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "AccessoryObserver,Accessory disconnected,%{private}s,model,%{private}s,name,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,connected,%{private}d", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022BED80);
      }
      int v69 = SHIBYTE(v122[0]);
      __int16 v67 = (void **)v121[0];
      int v65 = SHIBYTE(v125[0]);
      long long v63 = (void **)v124[0];
      int v61 = SHIBYTE(v123);
      long long v45 = (void **)v122[1];
      int v46 = SHIBYTE(v126);
      long long v47 = (void **)v125[1];
      int v48 = SHIBYTE(v128[0]);
      long long v49 = (void **)v127[0];
      int v50 = SHIBYTE(v129);
      long long v51 = (void **)v128[1];
      unsigned int v52 = [(NSArray *)v11 count];
      long long v53 = v121;
      long long v54 = v124;
      long long v55 = &v122[1];
      long long v56 = &v125[1];
      long long v57 = v127;
      long long v58 = &v128[1];
      if (v50 < 0) {
        long long v58 = v51;
      }
      *(_DWORD *)v133 = 136382211;
      if (v48 < 0) {
        long long v57 = v49;
      }
      if (v46 < 0) {
        long long v56 = v47;
      }
      if (v61 < 0) {
        long long v55 = v45;
      }
      if (v65 < 0) {
        long long v54 = v63;
      }
      if (v69 < 0) {
        long long v53 = v67;
      }
      *(void *)&v133[4] = v53;
      __int16 v134 = 2081;
      v135 = v54;
      __int16 v136 = 2081;
      v137 = v55;
      __int16 v138 = 2081;
      __int16 v139 = v56;
      __int16 v140 = 2081;
      std::string v141 = v57;
      __int16 v142 = 2081;
      v143 = v58;
      __int16 v144 = 1025;
      unsigned int v145 = v52;
      long long v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDidDisconnect:]_block_invoke", "%s\n", v59);
      if (v59 != (char *)buf) {
        free(v59);
      }
    }
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    id v32 = [(NSArray *)v11 countByEnumeratingWithState:&v99 objects:v132 count:16];
    if (v32)
    {
      uint64_t v33 = *(void *)v100;
      do
      {
        for (uint64_t i = 0; i != v32; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v100 != v33) {
            objc_enumerationMutation(v11);
          }
          __int16 v35 = *(void **)(*((void *)&v99 + 1) + 8 * i);
          if ([*(id *)(a1 + 40) setupAccessory:v35 withListenerCall:1])
          {
            memset(v152, 0, sizeof(v152));
            long long v151 = 0u;
            *(_OWORD *)v150 = 0u;
            *(_OWORD *)v149 = 0u;
            long long v148 = 0u;
            *(_OWORD *)v147 = 0u;
            memset(buf, 0, sizeof(buf));
            __int16 v153 = 257;
            sub_1006225EC(v35, (uint64_t)buf);
            uint64_t v36 = *(void *)(a1 + 40);
            uint64_t v37 = *(void *)(v36 + 16);
            long long v38 = *(void (**)(uint64_t, void **, uint64_t))(v36 + 24);
            sub_100627DD8((char *)v85, (long long *)buf);
            v38(v37, v85, 1);
            if (v98 < 0) {
              operator delete(v97);
            }
            if (v96 < 0) {
              operator delete(v95);
            }
            if (v94 < 0) {
              operator delete(v93);
            }
            if (v92 < 0) {
              operator delete(v91);
            }
            if (v90 < 0) {
              operator delete(v89);
            }
            if (v88 < 0) {
              operator delete(v87);
            }
            if (v86 < 0) {
              operator delete(v85[0]);
            }
            if ((v152[23] & 0x80000000) != 0) {
              operator delete(*(void **)v152);
            }
            if (SHIBYTE(v151) < 0) {
              operator delete(v150[1]);
            }
            if (SHIBYTE(v150[0]) < 0) {
              operator delete(v149[0]);
            }
            if (SHIBYTE(v148) < 0) {
              operator delete(v147[1]);
            }
            if (SHIBYTE(v147[0]) < 0) {
              operator delete(*(void **)&buf[48]);
            }
            if ((char)buf[47] < 0) {
              operator delete(*(void **)&buf[24]);
            }
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        id v32 = [(NSArray *)v11 countByEnumeratingWithState:&v99 objects:v132 count:16];
      }
      while (v32);
    }
  }
  else
  {
    long long v129 = 0uLL;
    memset(v130, 0, sizeof(v130));
    *(_OWORD *)__int16 v127 = 0uLL;
    *(_OWORD *)BOOL v128 = 0uLL;
    *(_OWORD *)__int16 v125 = 0uLL;
    long long v126 = 0uLL;
    long long v123 = 0uLL;
    *(_OWORD *)std::string v124 = 0uLL;
    *(_OWORD *)__int16 v121 = 0uLL;
    *(_OWORD *)std::string v122 = 0uLL;
    __int16 v131 = 257;
    sub_1006225EC(v2, (uint64_t)v121);
    uint64_t v3 = *(void *)(a1 + 40);
    double v4 = *(void (**)(uint64_t, void **))(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 16);
    sub_100627DD8((char *)__dst, (long long *)v121);
    v4(v5, __dst);
    if (v84 < 0) {
      operator delete(__p);
    }
    if (v82 < 0) {
      operator delete(v81);
    }
    if (v80 < 0) {
      operator delete(v79);
    }
    if (v78 < 0) {
      operator delete(v77);
    }
    if (v76 < 0) {
      operator delete(v75);
    }
    if (v74 < 0) {
      operator delete(v73);
    }
    if (v72 < 0) {
      operator delete(__dst[0]);
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    long long v6 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "AccessoryObserver,unknown accessory disconnceted", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022BED80);
      }
      *(_WORD *)v133 = 0;
      std::string v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDidDisconnect:]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  if ((v130[23] & 0x80000000) != 0) {
    operator delete(*(void **)v130);
  }
  if (SHIBYTE(v129) < 0) {
    operator delete(v128[1]);
  }
  if (SHIBYTE(v128[0]) < 0) {
    operator delete(v127[0]);
  }
  if (SHIBYTE(v126) < 0) {
    operator delete(v125[1]);
  }
  if (SHIBYTE(v125[0]) < 0) {
    operator delete(v124[0]);
  }
  if (SHIBYTE(v123) < 0) {
    operator delete(v122[1]);
  }
  if (SHIBYTE(v122[0]) < 0) {
    operator delete(v121[0]);
  }
}

void sub_100623E54(_Unwind_Exception *a1)
{
}

void sub_100625B28(_Unwind_Exception *a1)
{
}

void sub_100625C10(uint64_t *a1, uint64_t *a2)
{
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022BED80);
  }
  double v4 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v5 = (uint64_t *)*a2;
    }
    long long v6 = a1;
    if (*((char *)a1 + 23) < 0) {
      long long v6 = (uint64_t *)*a1;
    }
    std::string v7 = a1 + 3;
    if (*((char *)a1 + 47) < 0) {
      std::string v7 = (void *)*v7;
    }
    uint64_t v8 = a1 + 6;
    if (*((char *)a1 + 71) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    long long v9 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      long long v9 = (void *)*v9;
    }
    uint64_t v10 = a1 + 12;
    if (*((char *)a1 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    long long v11 = a1 + 15;
    if (*((char *)a1 + 143) < 0) {
      long long v11 = (void *)*v11;
    }
    int v12 = a1 + 18;
    if (*((char *)a1 + 167) < 0) {
      int v12 = (void *)*v12;
    }
    int v13 = *((unsigned __int8 *)a1 + 168);
    int v14 = *((unsigned __int8 *)a1 + 170);
    int v15 = *((unsigned __int8 *)a1 + 169);
    *(_DWORD *)long long buf = 136317699;
    uint64_t v18 = v5;
    __int16 v19 = 2081;
    unint64_t v20 = v6;
    __int16 v21 = 2081;
    uint64_t v22 = v7;
    __int16 v23 = 2081;
    uint64_t v24 = v8;
    __int16 v25 = 2081;
    int v26 = v9;
    __int16 v27 = 2081;
    int v28 = v10;
    __int16 v29 = 2081;
    double v30 = v11;
    __int16 v31 = 2081;
    id v32 = v12;
    __int16 v33 = 1026;
    int v34 = v13;
    __int16 v35 = 1026;
    int v36 = v14;
    __int16 v37 = 1026;
    int v38 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s,manufacturer,%{private}s,name,%{private}s,model,%{private}s,serial,%{private}s,fw,%{private}s,hw,%{private}s,ppid,%{private}s,onDenyList,%{public}d,supportsCarPlay,%{public}d,supportsLocation,%{public}d", buf, 0x64u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    NSUInteger v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryUtils::CLAccessoryInfo::log(std::string) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
}

void sub_1006264D8(uint64_t a1)
{
  id v2 = [[objc_msgSend(*(id *)(a1 + 32), "userInfo") objectForKey:@"EAAccessoryKey"];
  id v3 = v2;
  if ([*(id *)(a1 + 40) setupAccessory:v2 withListenerCall:1])
  {
    long long v29 = 0u;
    memset(v30, 0, sizeof(v30));
    *(_OWORD *)__int16 v27 = 0u;
    *(_OWORD *)int v28 = 0u;
    *(_OWORD *)__int16 v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)__int16 v21 = 0u;
    *(_OWORD *)uint64_t v22 = 0u;
    __int16 v31 = 257;
    sub_1006225EC(v2, (uint64_t)v21);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(v4 + 16);
    long long v6 = *(void (**)(uint64_t, void **, uint64_t))(v4 + 24);
    sub_100627DD8((char *)v7, (long long *)v21);
    v6(v5, v7, 1);
    if (v20 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if ((v30[23] & 0x80000000) != 0) {
      operator delete(*(void **)v30);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[1]);
    }
    if (SHIBYTE(v28[0]) < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[1]);
    }
    if (SHIBYTE(v25[0]) < 0) {
      operator delete(v24[0]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[1]);
    }
    if (SHIBYTE(v22[0]) < 0) {
      operator delete(v21[0]);
    }
  }
}

void sub_100626678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1006266AC(id a1)
{
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022BED80);
  }
  double v1 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "accessory disconnected, no action taken", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLAccessoryObserver accessoryDisconnected:]_block_invoke", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_1006268A8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  if (v2)
  {
    uint64_t v7 = 0;
    if ([v2 accessoryHasNMEASentencesAvailable])
    {
      do
      {
        [*(id *)(*(void *)(a1 + 32) + 8) getNMEASentence:&v7];
        if (v7)
        {
          (*(void (**)(void))(*(void *)(a1 + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 16));
        }
        else
        {
          if (qword_102419360 != -1) {
            dispatch_once(&qword_102419360, &stru_1022BED80);
          }
          id v3 = qword_102419368;
          if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "nmea data is null", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419360 != -1) {
              dispatch_once(&qword_102419360, &stru_1022BED80);
            }
            uint64_t v4 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "-[CLAccessoryObserver nmeaReceived:]_block_invoke", "%s\n", v4);
            if (v4 != (char *)buf) {
              free(v4);
            }
          }
        }
      }
      while (([*(id *)(*(void *)(a1 + 32) + 8) accessoryHasNMEASentencesAvailable] & 1) != 0);
    }
  }
  else
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    uint64_t v5 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "no location accessory available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022BED80);
      }
      LOWORD(v7) = 0;
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLAccessoryObserver nmeaReceived:]_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

uint64_t sub_100626C54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 48))(*(void *)(*(void *)(a1 + 32) + 16));
}

uint64_t sub_100626CD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 56))(*(void *)(*(void *)(a1 + 32) + 16));
}

void sub_100626D5C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) setupEphemeris] & 1) == 0)
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    double v1 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "could not get ephemeris url", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022BED80);
      }
      id v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLAccessoryObserver ephemerisURLRequested:]_block_invoke", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
}

void sub_100626F64(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  if (!*(void *)(*(void *)(a1 + 40) + 8))
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    int v13 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "STARK,unexpected,fAccessory is NULL", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022BED80);
      }
      char v14 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLAccessoryObserver onStarkTimeSyncNotification:]_block_invoke", "%s\n");
      goto LABEL_34;
    }
    return;
  }
  id v3 = v2;
  id v4 = [v2 objectForKey:EATimeSyncInfoOffsetEstimate];
  if (!v4)
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    int v15 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning STARK,unexpected,time sync estimate is NULL", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419360 == -1) {
      goto LABEL_33;
    }
LABEL_36:
    dispatch_once(&qword_102419360, &stru_1022BED80);
    goto LABEL_33;
  }
  [v4 doubleValue];
  double v6 = v5;
  id v7 = [v3 objectForKey:EATimeSyncInfoOffsetUncertainty];
  if (!v7)
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022BED80);
    }
    char v16 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning STARK,unexpected,time sync unc is NULL", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419360 == -1)
    {
LABEL_33:
      char v14 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLAccessoryObserver onStarkTimeSyncNotification:]_block_invoke", "%s\n");
LABEL_34:
      if (v14 != buf) {
        free(v14);
      }
      return;
    }
    goto LABEL_36;
  }
  [v7 doubleValue];
  if (qword_102419360 != -1)
  {
    double v17 = v8;
    dispatch_once(&qword_102419360, &stru_1022BED80);
    double v8 = v17;
  }
  double v9 = v6 / 1000.0;
  char v10 = qword_102419368;
  double v11 = v8 / 1000.0;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    *(_DWORD *)long long buf = 134218496;
    uint64_t v19 = v12;
    __int16 v20 = 2048;
    double v21 = v9;
    __int16 v22 = 2048;
    double v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "STARK,fAccessory,%p,timeSyncOffset,%.6lf,timeSyncUnc,%.6lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 == -1) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
}

uint64_t sub_100627C24(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  double v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)double v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  id v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)id v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  double v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)double v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  double v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)double v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  int v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)int v13 = v14;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  int v15 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v15);
  }
  long long v16 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)int v15 = v16;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  __int16 v17 = *((_WORD *)a2 + 84);
  *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
  *(_WORD *)(a1 + 168) = v17;
  return a1;
}

void sub_100627DA8(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

char *sub_100627DD8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_1000DC48C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_1000DC48C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_1000DC48C(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  long long v10 = __dst + 144;
  if (*((char *)a2 + 167) < 0)
  {
    sub_1000DC48C(v10, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v11 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *(_OWORD *)long long v10 = v11;
  }
  __int16 v12 = *((_WORD *)a2 + 84);
  __dst[170] = *((unsigned char *)a2 + 170);
  *((_WORD *)__dst + 84) = v12;
  return __dst;
}

void sub_100627F6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100628000(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100628094(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1006280C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006280C4(a1, *a2);
    sub_1006280C4(a1, a2[1]);
    sub_100628120((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100628120(uint64_t a1)
{
  sub_100628000(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    id v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100628184()
{
  sub_100134750(qword_10247C7B0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247C7B0, (void *)&_mh_execute_header);
}

void sub_10062853C(id a1)
{
  qword_10247C7C8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBackgroundInertialOdometryServiceSilo"];
}

void sub_100628958()
{
}

id sub_100628984(uint64_t a1, void *a2)
{
  return _[a2 onBackgroundBatchData:a1 + 8];
}

uint64_t sub_100629648(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  else {
    return a2;
  }
}

void sub_100629A74(id a1)
{
  qword_1024192E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_100629AA4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    operator delete();
  }
}

uint64_t sub_100629B20()
{
  if (qword_10248A0F8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A0F8 + 8))(qword_10248A0F8);
  }
  if (qword_10248A100) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A100 + 8))(qword_10248A100);
  }
  if (qword_10248A108) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A108 + 8))(qword_10248A108);
  }
  if (qword_10248A110) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A110 + 8))(qword_10248A110);
  }
  if (qword_10248A118) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A118 + 8))(qword_10248A118);
  }
  if (qword_10248A120) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A120 + 8))(qword_10248A120);
  }
  if (qword_10248A128) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A128 + 8))(qword_10248A128);
  }
  uint64_t result = qword_10248A130;
  if (qword_10248A130)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248A130 + 8);
    return v1();
  }
  return result;
}

void sub_100629CC8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10247C7D8 & 1) == 0)
  {
    byte_10247C7D8 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRayTracingTilesAvailability.pb.cc", a4);
    operator new();
  }
}

void *sub_10062A01C(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &off_1022BEE70;
  return result;
}

void sub_10062A040(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A0F8 + 8);
    }
    sub_10062A618(v4, v5);
  }
}

void sub_10062A130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10062A148(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022BEE70;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A0F8 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10062A1D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10062A148(a1);

  operator delete();
}

uint64_t sub_10062A210(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A0F8;
  if (!qword_10248A0F8)
  {
    sub_100629CC8(0, a2, a3, a4);
    return qword_10248A0F8;
  }
  return result;
}

void sub_10062A240()
{
}

uint64_t sub_10062A28C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_10062A2C4(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_10062A2C4(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 52);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 52))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(a1 + 52);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4) {
        sub_10062B418(v4);
      }
    }
  }
  uint64_t result = sub_10026DEDC(a1 + 24);
  *(_DWORD *)(a1 + 52) = 0;
  return result;
}

uint64_t sub_10062A328(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      long long v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_10062D62C(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_10062A4F4(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A0F8 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_10062A520(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248A0F8 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062DB60(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_10062A590(uint64_t a1, void *lpsrc)
{
  sub_10062A040(a1, (uint64_t)lpsrc);
}

void sub_10062A618(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 24) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 36);
      uint64_t v7 = *(int *)(a1 + 32);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v7 + 1;
      sub_10062CA34(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 32));
  }
  LOBYTE(v9) = *(unsigned char *)(a2 + 52);
  if ((_BYTE)v9)
  {
    if (*(unsigned char *)(a2 + 52))
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      int v10 = *(_DWORD **)(a1 + 8);
      if (!v10) {
        operator new();
      }
      uint64_t v11 = *(void *)(a2 + 8);
      if (!v11) {
        uint64_t v11 = *(void *)(qword_10248A130 + 8);
      }
      sub_10062ABD8(v10, v11);
      int v9 = *(_DWORD *)(a2 + 52);
    }
    if ((v9 & 2) != 0)
    {
      *(_DWORD *)(a1 + 52) |= 2u;
      uint64_t v12 = *(void *)(a1 + 16);
      if (!v12) {
        operator new();
      }
      uint64_t v13 = *(void *)(a2 + 16);
      if (!v13) {
        uint64_t v13 = *(void *)(qword_10248A130 + 16);
      }
      sub_10062B114(v12, v13);
    }
  }
}

void sub_10062A868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10062A880()
{
  return 1;
}

void *sub_10062A888@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.LogEntry");
}

double sub_10062A898(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    double result = *(double *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void sub_10062A924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10062A93C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BEEE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10062A95C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BEEE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10062A9B0()
{
}

uint64_t sub_10062A9FC(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_10062AA10(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 9) {
        break;
      }
      unint64_t v8 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v8) & 1) == 0) {
        return 0;
      }
      *(void *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_10062AB04(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(unsigned char *)(result + 20)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  }
  return result;
}

uint64_t sub_10062AB1C(uint64_t a1)
{
  uint64_t v1 = ((int)(*(_DWORD *)(a1 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

double sub_10062AB38(uint64_t a1, void *lpsrc)
{
  return sub_10062A898(a1, (uint64_t)lpsrc);
}

uint64_t sub_10062ABC0()
{
  return 1;
}

void *sub_10062ABC8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.AvailabilityFileTimestamp");
}

void sub_10062ABD8(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 20);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 20))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v5;
      int v4 = *(_DWORD *)(a2 + 20);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v6;
    }
  }
}

void sub_10062AC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10062AC9C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BEF60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10062ACBC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BEF60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10062AD10()
{
}

uint64_t sub_10062AD5C(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_10062AD70(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = a1 + 2;
  int v6 = a1 + 3;
  while (1)
  {
    while (1)
    {
      uint64_t v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v7;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v7 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_16;
      }
      uint64_t v12 = (char *)*((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!result) {
          return result;
        }
        uint64_t v13 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
      }
      else
      {
        unsigned int *v5 = *v12;
        uint64_t v13 = v12 + 1;
        *((void *)this + 1) = v13;
      }
      a1[5] |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        uint64_t v11 = v13 + 1;
        *((void *)this + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          BOOL v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v6 = *v11;
          BOOL v14 = (unsigned __int8 *)(v11 + 1);
          *((void *)this + 1) = v14;
        }
        a1[5] |= 2u;
        if (v14 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10062AF10(uint64_t result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(_DWORD *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t sub_10062AF7C(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 20);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 20))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 20) & 2) == 0) {
        goto LABEL_14;
      }
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if (v6 >= 0x80) {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else {
      int v7 = 2;
    }
    uint64_t v4 = (v7 + v4);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_14:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_10062B00C(_DWORD *a1, void *lpsrc)
{
  sub_10062ABD8(a1, (uint64_t)lpsrc);
}

uint64_t sub_10062B094()
{
  return 1;
}

void *sub_10062B09C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.AvailabilityFileCommonHeader");
}

uint64_t sub_10062B0AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1022BEFD8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  sub_10062B114(a1, a2);
  return a1;
}

void sub_10062B100(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_10062B114(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248A110 + 8);
      }
      sub_10062A898(v6, v7);
      int v4 = *(_DWORD *)(a2 + 48);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_20;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 16) = v8;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
LABEL_20:
    int v9 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 20) = v9;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
LABEL_21:
    int v10 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 24) = v10;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
LABEL_22:
    int v11 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    *(_DWORD *)(a1 + 28) = v11;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_10:
      if ((v4 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }
LABEL_23:
    int v12 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_DWORD *)(a1 + 32) = v12;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        return;
      }
      goto LABEL_12;
    }
LABEL_24:
    int v13 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 48) |= 0x40u;
    *(_DWORD *)(a1 + 36) = v13;
    if ((*(_DWORD *)(a2 + 48) & 0x80) == 0) {
      return;
    }
LABEL_12:
    int v5 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x80u;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void sub_10062B2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10062B2F8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022BEFD8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A110 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10062B388(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10062B2F8(a1);

  operator delete();
}

void sub_10062B3C0()
{
}

uint64_t sub_10062B418(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    if (*(unsigned char *)(result + 48))
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)(result + 32) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10062B450(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 16);
  uint64_t v6 = (unsigned int *)(a1 + 20);
  uint64_t v7 = (unsigned int *)(a1 + 24);
  int v8 = (unsigned int *)(a1 + 28);
  int v9 = (unsigned int *)(a1 + 32);
  int v10 = (unsigned int *)(a1 + 36);
  int v11 = (unsigned int *)(a1 + 40);
  while (2)
  {
    int v12 = (char *)*((void *)this + 1);
    if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v12;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v12 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v14 = TagFallback & 7;
        if (v14 != 2) {
          goto LABEL_28;
        }
        long long v47 = v11;
        int v15 = v10;
        long long v16 = v9;
        unsigned int v17 = v8;
        char v18 = v7;
        uint64_t v19 = v6;
        *(_DWORD *)(a1 + 48) |= 1u;
        uint64_t v20 = *(void *)(a1 + 8);
        if (!v20) {
          operator new();
        }
        double v21 = v5;
        unsigned int v48 = 0;
        __int16 v22 = (char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v22;
          *((void *)this + 1) = v22 + 1;
        }
        int v31 = *((_DWORD *)this + 14);
        int v32 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v31 + 1;
        if (v31 >= v32) {
          return 0;
        }
        int v33 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v48);
        if (!sub_10062AA10(v20, this, v34) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v33);
        int v35 = *((_DWORD *)this + 14);
        BOOL v36 = __OFSUB__(v35, 1);
        int v37 = v35 - 1;
        if (v37 < 0 == v36) {
          *((_DWORD *)this + 14) = v37;
        }
        int v38 = (unsigned char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        int v5 = v21;
        uint64_t v6 = v19;
        uint64_t v7 = v18;
        int v8 = v17;
        int v9 = v16;
        int v10 = v15;
        int v11 = v47;
        if ((unint64_t)v38 >= v23 || *v38 != 16) {
          continue;
        }
        uint64_t v24 = v38 + 1;
        *((void *)this + 1) = v24;
        goto LABEL_41;
      case 2u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v24 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
LABEL_41:
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          long long v39 = (unsigned char *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v5 = *v24;
          long long v39 = v24 + 1;
          *((void *)this + 1) = v39;
        }
        *(_DWORD *)(a1 + 48) |= 2u;
        if ((unint64_t)v39 >= v23 || *v39 != 24) {
          continue;
        }
        __int16 v25 = v39 + 1;
        *((void *)this + 1) = v25;
LABEL_49:
        if ((unint64_t)v25 >= v23 || *v25 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          long long v41 = (unsigned char *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v6 = *v25;
          long long v41 = v25 + 1;
          *((void *)this + 1) = v41;
        }
        *(_DWORD *)(a1 + 48) |= 4u;
        if ((unint64_t)v41 >= v23 || *v41 != 32) {
          continue;
        }
        long long v26 = v41 + 1;
        *((void *)this + 1) = v26;
LABEL_57:
        if ((unint64_t)v26 >= v23 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          NSUInteger v42 = (unsigned char *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v7 = *v26;
          NSUInteger v42 = v26 + 1;
          *((void *)this + 1) = v42;
        }
        *(_DWORD *)(a1 + 48) |= 8u;
        if ((unint64_t)v42 >= v23 || *v42 != 40) {
          continue;
        }
        __int16 v27 = v42 + 1;
        *((void *)this + 1) = v27;
LABEL_65:
        if ((unint64_t)v27 >= v23 || *v27 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!result) {
            return result;
          }
          long long v43 = (unsigned char *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          *int v8 = *v27;
          long long v43 = v27 + 1;
          *((void *)this + 1) = v43;
        }
        *(_DWORD *)(a1 + 48) |= 0x10u;
        if ((unint64_t)v43 >= v23 || *v43 != 48) {
          continue;
        }
        int v28 = v43 + 1;
        *((void *)this + 1) = v28;
LABEL_73:
        if ((unint64_t)v28 >= v23 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!result) {
            return result;
          }
          long long v44 = (unsigned char *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v9 = *v28;
          long long v44 = v28 + 1;
          *((void *)this + 1) = v44;
        }
        *(_DWORD *)(a1 + 48) |= 0x20u;
        if ((unint64_t)v44 >= v23 || *v44 != 56) {
          continue;
        }
        long long v29 = v44 + 1;
        *((void *)this + 1) = v29;
LABEL_81:
        if ((unint64_t)v29 >= v23 || *v29 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!result) {
            return result;
          }
          long long v45 = (unsigned char *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          unsigned int *v10 = *v29;
          long long v45 = v29 + 1;
          *((void *)this + 1) = v45;
        }
        *(_DWORD *)(a1 + 48) |= 0x40u;
        if ((unint64_t)v45 >= v23 || *v45 != 64) {
          continue;
        }
        double v30 = v45 + 1;
        *((void *)this + 1) = v30;
LABEL_89:
        if ((unint64_t)v30 >= v23 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!result) {
            return result;
          }
          int v46 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
        }
        else
        {
          *int v11 = *v30;
          int v46 = (unsigned __int8 *)(v30 + 1);
          *((void *)this + 1) = v46;
        }
        *(_DWORD *)(a1 + 48) |= 0x80u;
        if (v46 != (unsigned __int8 *)v23 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        __int16 v25 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_49;
      case 4u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        long long v26 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_57;
      case 5u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        __int16 v27 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_65;
      case 6u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v28 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_73;
      case 7u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        long long v29 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_81;
      case 8u:
        int v14 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        double v30 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        goto LABEL_89;
      default:
        int v14 = TagFallback & 7;
LABEL_28:
        if (v14 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_10062B9E4(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = (int *)result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A110 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = v5[12];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], a2, a4);
  int v6 = v5[12];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], a2, a4);
  int v6 = v5[12];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], a2, a4);
  int v6 = v5[12];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], a2, a4);
  int v6 = v5[12];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v5[9], a2, a4);
    if ((v5[12] & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], a2, a4);
  int v6 = v5[12];
  if ((v6 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return result;
  }
LABEL_19:
  int v8 = v5[10];

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v8, a2, a4);
}

uint64_t sub_10062BB0C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_44;
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A110 + 8);
  }
  int v6 = ((int)(*(_DWORD *)(v5 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v5 + 16) = v6;
  uint64_t v4 = v6 | 2u;
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 2) != 0)
  {
LABEL_9:
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v8 = 2;
    }
    uint64_t v4 = (v8 + v4);
  }
LABEL_13:
  if ((v3 & 4) != 0)
  {
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }
    else
    {
      int v10 = 2;
    }
    uint64_t v4 = (v10 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_15:
      if ((v3 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_28;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_15;
  }
  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    int v12 = 2;
  }
  uint64_t v4 = (v12 + v4);
  if ((v3 & 0x10) == 0)
  {
LABEL_16:
    if ((v3 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_28:
  int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    int v14 = 2;
  }
  uint64_t v4 = (v14 + v4);
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_32:
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    int v16 = 2;
  }
  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_18:
    if ((v3 & 0x80) == 0) {
      goto LABEL_44;
    }
    goto LABEL_40;
  }
LABEL_36:
  unsigned int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v17 >= 0x80)
  {
    int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    int v18 = 2;
  }
  uint64_t v4 = (v18 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_40:
    uint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v19 >= 0x80) {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 1;
    }
    else {
      int v20 = 2;
    }
    uint64_t v4 = (v20 + v4);
  }
LABEL_44:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_10062BCB0(uint64_t a1, void *lpsrc)
{
  sub_10062B114(a1, (uint64_t)lpsrc);
}

uint64_t sub_10062BD38()
{
  return 1;
}

void *sub_10062BD40@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.RayTracingTilesAvailabilityHeader");
}

double sub_10062BD50(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_10062BDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10062BE14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BF050;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10062BE34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BF050;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10062BE88()
{
}

uint64_t sub_10062BED4(uint64_t result)
{
  if (*(unsigned char *)(result + 28))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_10062BEE8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_21;
        }
        unint64_t v10 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 28) |= 1u;
        int v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && *v8 == 17)
        {
          *((void *)this + 1) = v8 + 1;
          goto LABEL_15;
        }
      }
      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_21;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_21:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_15:
    unint64_t v10 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v10) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 28) |= 2u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_10062C050(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 28);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 28);
  }
  if ((v5 & 2) != 0)
  {
    double v6 = *(double *)(v4 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return result;
}

uint64_t sub_10062C0BC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_10062C0E8(uint64_t a1, void *lpsrc)
{
  return sub_10062BD50(a1, (uint64_t)lpsrc);
}

uint64_t sub_10062C170()
{
  return 1;
}

void *sub_10062C178@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.LatLonGeodetic");
}

double sub_10062C188(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248A120 + 8);
      }
      double result = sub_10062BD50(v6, v7);
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v8 = *(void *)(a1 + 16);
      if (!v8) {
        operator new();
      }
      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_10248A120 + 16);
      }
      return sub_10062BD50(v8, v9);
    }
  }
  return result;
}

void sub_10062C2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_10062C2F4(void *result)
{
  if ((void *)qword_10248A120 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    double result = (void *)v1[2];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_10062C394(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BF0C8;
  sub_10062C2F4(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10062C3E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022BF0C8;
  sub_10062C2F4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10062C450()
{
}

uint64_t sub_10062C49C(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 28);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 28))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 28) = 0;
        int v1 = *(_DWORD *)(result + 28);
      }
    }
    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 28))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_10062C4E8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v27 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0; {
        }
          }
        else
        {
          unsigned int v27 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_10062BEE8(v8, this, v13) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        unsigned int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 18)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_17;
      }
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v18 = *(void *)(a1 + 16);
      if (!v18) {
        operator new();
      }
      unsigned int v28 = 0;
      uint64_t v19 = (char *)*((void *)this + 1);
      if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0; {
      }
        }
      else
      {
        unsigned int v28 = *v19;
        *((void *)this + 1) = v19 + 1;
      }
      int v20 = *((_DWORD *)this + 14);
      int v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21) {
        return 0;
      }
      int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_10062BEE8(v18, this, v23) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      int v24 = *((_DWORD *)this + 14);
      BOOL v15 = __OFSUB__(v24, 1);
      int v25 = v24 - 1;
      if (v25 < 0 == v15) {
        *((_DWORD *)this + 14) = v25;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10062C7D8(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A120 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A120 + 16);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_10062C868(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 28))
  {
    uint64_t v1 = 0;
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    uint64_t v2 = *(void *)(qword_10248A120 + 8);
  }
  int v3 = *(unsigned __int8 *)(v2 + 28);
  if (*(unsigned char *)(v2 + 28))
  {
    if ((v3 & 2) != 0) {
      int v3 = ((v3 << 31 >> 31) & 9) + 9;
    }
    else {
      int v3 = (v3 << 31 >> 31) & 9;
    }
  }
  *(_DWORD *)(v2 + 24) = v3;
  uint64_t v1 = (v3 + 2);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_13:
    uint64_t v4 = *(void *)(a1 + 16);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248A120 + 16);
    }
    int v5 = *(unsigned __int8 *)(v4 + 28);
    if (*(unsigned char *)(v4 + 28))
    {
      if ((v5 & 2) != 0) {
        int v5 = ((v5 << 31 >> 31) & 9) + 9;
      }
      else {
        int v5 = (v5 << 31 >> 31) & 9;
      }
    }
    *(_DWORD *)(v4 + 24) = v5;
    uint64_t v1 = (v1 + v5 + 2);
  }
LABEL_20:
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

double sub_10062C918(uint64_t a1, void *lpsrc)
{
  return sub_10062C188(a1, (uint64_t)lpsrc);
}

uint64_t sub_10062C9A0()
{
  return 1;
}

void *sub_10062C9A8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.BoundingBox");
}

uint64_t sub_10062C9B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)a1 = &off_1022BF140;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_10062CA34(a1, a2);
  return a1;
}

void sub_10062CA04(_Unwind_Exception *a1)
{
  if (*((void *)v1 + 2)) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double sub_10062CA34(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  int v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_10026DE30(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(void *)(a1 + 16) + 8 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 8 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  if (*(unsigned char *)(a2 + 40))
  {
    *(_DWORD *)(a1 + 40) |= 1u;
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      operator new();
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A128 + 8);
    }
    return sub_10062C188(v6, v7);
  }
  return result;
}

void sub_10062CB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10062CB74(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022BF140;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A128 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  if (*((void *)this + 2)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10062CC20(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10062CB74(a1);

  operator delete();
}

void sub_10062CC58()
{
}

uint64_t sub_10062CCA8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 40))
  {
    double result = *(void *)(result + 8);
    if (result) {
      double result = sub_10062C49C(result);
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_10062CCE4(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_19;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v11 = *(void *)(a1 + 8);
      if (!v11) {
        operator new();
      }
      v28[0] = 0;
      int v12 = (char *)*((void *)this + 1);
      if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, (unsigned int *)v28))return 0; {
      }
        }
      else
      {
        v28[0] = *v12;
        *((void *)this + 1) = v12 + 1;
      }
      int v14 = *((_DWORD *)this + 14);
      int v15 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v14 + 1;
      if (v14 >= v15) {
        return 0;
      }
      int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28[0]);
      if (!sub_10062C4E8(v11, this, v17) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
      int v18 = *((_DWORD *)this + 14);
      BOOL v19 = __OFSUB__(v18, 1);
      int v20 = v18 - 1;
      if (v20 < 0 == v19) {
        *((_DWORD *)this + 14) = v20;
      }
      int v21 = (unsigned char *)*((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
      if ((unint64_t)v21 < v10 && *v21 == 18)
      {
        uint64_t v9 = v21 + 1;
        *((void *)this + 1) = v9;
LABEL_33:
        unsigned int v29 = 0;
        if ((unint64_t)v9 >= v10 || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0; {
          unsigned int v22 = v29;
          }
        }
        else
        {
          unsigned int v22 = *v9;
          unsigned int v29 = v22;
          *((void *)this + 1) = v9 + 1;
        }
        int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v22);
        while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
        {
          *(void *)unsigned int v28 = 0;
          int v24 = (char *)*((void *)this + 1);
          if ((unint64_t)v24 >= *((void *)this + 2) || *v24 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v28))return 0; {
          }
            }
          else
          {
            *(void *)unsigned int v28 = *v24;
            *((void *)this + 1) = v24 + 1;
          }
          int v25 = *(_DWORD *)(a1 + 24);
          if (v25 == *(_DWORD *)(a1 + 28))
          {
            sub_10026DE30(v5, v25 + 1);
            int v25 = *(_DWORD *)(a1 + 24);
          }
          uint64_t v26 = *(void *)v28;
          uint64_t v27 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v25 + 1;
          *(void *)(v27 + 8 * v25) = v26;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
LABEL_48:
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t result = sub_10062CFF0(1, 0x12u, this, v5);
        if (!result) {
          return result;
        }
        goto LABEL_48;
      }
      if (v8 == 2)
      {
        uint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_33;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_19:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10062CFF0(int a1, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a4)
{
  unint64_t v21 = 0;
  uint64_t v7 = (char *)*((void *)this + 1);
  if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v21);
    if (!result) {
      return result;
    }
  }
  else
  {
    unint64_t v21 = *v7;
    *((void *)this + 1) = v7 + 1;
  }
  int v9 = *(_DWORD *)(a4 + 8);
  int v10 = *(_DWORD *)(a4 + 12);
  if (v9 == v10)
  {
    sub_10026DE30(a4, v9 + 1);
    int v9 = *(_DWORD *)(a4 + 8);
    int v10 = *(_DWORD *)(a4 + 12);
  }
  unint64_t v11 = v21;
  uint64_t v12 = *(void *)a4;
  int v13 = v9 + 1;
  *(_DWORD *)(a4 + 8) = v9 + 1;
  *(void *)(v12 + 8 * v9) = v11;
  if (v10 - (v9 + 1) >= 1)
  {
    int v14 = v10 - v9;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14) {
          return 1;
        }
        int v18 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((int)v15 - (int)v18 < 2 || (a2 & 0x7F | 0x80) != *v18 || v18[1] != (a2 >> 7)) {
          return 1;
        }
        unsigned int v17 = (char *)(v18 + 2);
      }
      else
      {
        int v16 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v16 >= v15 || *v16 != a2) {
          return 1;
        }
        unsigned int v17 = (char *)(v16 + 1);
      }
      *((void *)this + 1) = v17;
      if ((unint64_t)v17 >= v15 || *v17 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v21);
        if (!result) {
          return result;
        }
        int v13 = *(_DWORD *)(a4 + 8);
      }
      else
      {
        unint64_t v21 = *v17;
        *((void *)this + 1) = v17 + 1;
      }
      if (v13 >= *(_DWORD *)(a4 + 12))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
        int v13 = *(_DWORD *)(a4 + 8);
      }
      unint64_t v19 = v21;
      uint64_t v20 = *(void *)a4;
      *(_DWORD *)(a4 + 8) = v13 + 1;
      *(void *)(v20 + 8 * v13) = v19;
      --v14;
      ++v13;
    }
    while (v14 > 1);
  }
  return 1;
}

void sub_10062D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10062D1EC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 40))
  {
    uint64_t v6 = *(void *)(result + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A128 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, 0x12u);
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32(a2, *(_DWORD *)(v5 + 32));
    if (*(int *)(v5 + 24) >= 1)
    {
      uint64_t v7 = 0;
      do
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64(a2, *(void *)(*(void *)(v5 + 16) + 8 * v7++));
      while (v7 < *(int *)(v5 + 24));
    }
  }
  return result;
}

uint64_t sub_10062D294(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248A128 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062C868(v4);
    int v6 = (int)v5;
    if (v5 >= 0x80) {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    }
    else {
      int v7 = 1;
    }
    int v3 = v6 + v7 + 1;
  }
  else
  {
    int v3 = 0;
  }
  if (*(int *)(a1 + 24) < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    do
      int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(*(void *)(a1 + 16) + 8 * v8++), a2)+ v9);
    while (v8 < *(int *)(a1 + 24));
    if ((int)v9 > 0)
    {
      if (v9 >= 0x80) {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
      }
      else {
        int v10 = 2;
      }
      v3 += v10;
    }
  }
  uint64_t result = (v3 + v9);
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

double sub_10062D374(uint64_t a1, void *lpsrc)
{
  return sub_10062CA34(a1, (uint64_t)lpsrc);
}

uint64_t sub_10062D3FC()
{
  return 1;
}

void *sub_10062D404@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.RegionSpecificAvailableTiles");
}

uint64_t sub_10062D414(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022BF1B8;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  sub_10062A618(a1, a2);
  return a1;
}

void sub_10062D46C(_Unwind_Exception *a1)
{
  sub_10016B2E8(v1 + 3);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void sub_10062D490(uint64_t *a1)
{
  *a1 = (uint64_t)off_1022BF1B8;
  uint64_t v2 = a1 + 3;
  sub_10062D4F4(a1);
  sub_10016B2E8(v2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void *sub_10062D4F4(void *result)
{
  if ((void *)qword_10248A130 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_10062D598(uint64_t *a1)
{
  sub_10062D490(a1);

  operator delete();
}

void sub_10062D5D0()
{
}

uint64_t sub_10062D62C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v6 = (char *)*((void *)this + 1);
          if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v6;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v6 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v8 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v9 = TagFallback & 7;
          if (v9 != 2) {
            goto LABEL_21;
          }
          *(_DWORD *)(a1 + 52) |= 1u;
          int v10 = *(unsigned int **)(a1 + 8);
          if (!v10) {
            operator new();
          }
          unsigned int v42 = 0;
          unint64_t v11 = (char *)*((void *)this + 1);
          if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v42))return 0; {
          }
            }
          else
          {
            unsigned int v42 = *v11;
            *((void *)this + 1) = v11 + 1;
          }
          int v12 = *((_DWORD *)this + 14);
          int v13 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v12 + 1;
          if (v12 >= v13) {
            return 0;
          }
          int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v42);
          if (!sub_10062AD70(v10, this, v15) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
          int v16 = *((_DWORD *)this + 14);
          BOOL v17 = __OFSUB__(v16, 1);
          int v18 = v16 - 1;
          if (v18 < 0 == v17) {
            *((_DWORD *)this + 14) = v18;
          }
          unint64_t v19 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v19 < *((void *)this + 2) && *v19 == 18)
          {
            *((void *)this + 1) = v19 + 1;
            goto LABEL_33;
          }
        }
        if (v8 != 2) {
          break;
        }
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_21;
        }
LABEL_33:
        *(_DWORD *)(a1 + 52) |= 2u;
        uint64_t v20 = *(void *)(a1 + 16);
        if (!v20) {
          operator new();
        }
        unsigned int v43 = 0;
        unint64_t v21 = (char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v21;
          *((void *)this + 1) = v21 + 1;
        }
        int v22 = *((_DWORD *)this + 14);
        int v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23) {
          return 0;
        }
        int v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_10062B450(v20, this, v25) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        int v26 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v26, 1);
        int v27 = v26 - 1;
        if (v27 < 0 == v17) {
          *((_DWORD *)this + 14) = v27;
        }
        unsigned int v28 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v28 < *((void *)this + 2) && *v28 == 26) {
          goto LABEL_46;
        }
      }
      if (v8 != 3) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_21;
      }
      while (1)
      {
        int v29 = *(_DWORD *)(a1 + 36);
        uint64_t v30 = *(int *)(a1 + 32);
        if ((int)v30 >= v29)
        {
          if (v29 == *(_DWORD *)(a1 + 40))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v29 + 1);
            int v29 = *(_DWORD *)(a1 + 36);
          }
          *(_DWORD *)(a1 + 36) = v29 + 1;
          operator new();
        }
        uint64_t v31 = *(void *)(a1 + 24);
        *(_DWORD *)(a1 + 32) = v30 + 1;
        uint64_t v32 = *(void *)(v31 + 8 * v30);
        unsigned int v44 = 0;
        int v33 = (char *)*((void *)this + 1);
        if ((unint64_t)v33 >= *((void *)this + 2) || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v44))return 0; {
        }
          }
        else
        {
          unsigned int v44 = *v33;
          *((void *)this + 1) = v33 + 1;
        }
        int v34 = *((_DWORD *)this + 14);
        int v35 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v34 + 1;
        if (v34 >= v35) {
          return 0;
        }
        int v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v44);
        if (!sub_10062CCE4(v32, this, v37) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
        int v38 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v38, 1);
        int v39 = v38 - 1;
        if (v39 < 0 == v17) {
          *((_DWORD *)this + 14) = v39;
        }
        unsigned int v28 = (unsigned char *)*((void *)this + 1);
        int v40 = (unsigned char *)*((void *)this + 2);
        if (v28 >= v40 || *v28 != 26) {
          break;
        }
LABEL_46:
        *((void *)this + 1) = v28 + 1;
      }
      if (v28 == v40 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v9 = TagFallback & 7;
LABEL_21:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10062DAB0(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 52);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A130 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 52);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A130 + 16);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v9 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  return result;
}

uint64_t sub_10062DB60(uint64_t a1, unint64_t a2)
{
  if (!*(unsigned char *)(a1 + 52))
  {
    int v3 = 0;
    goto LABEL_18;
  }
  if ((*(unsigned char *)(a1 + 52) & 1) == 0)
  {
    int v3 = 0;
    if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248A130 + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062AF7C(v4, a2);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  }
  else {
    int v7 = 1;
  }
  int v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 52) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A130 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062BB0C(v8, a2);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    }
    else {
      int v11 = 1;
    }
    v3 += v10 + v11 + 1;
  }
LABEL_18:
  int v12 = *(_DWORD *)(a1 + 32);
  uint64_t v13 = (v12 + v3);
  if (v12 >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      unsigned int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062D294(*(void *)(*(void *)(a1 + 24) + 8 * v14), a2);
      int v16 = (int)v15;
      if (v15 >= 0x80) {
        int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      }
      else {
        int v17 = 1;
      }
      uint64_t v13 = (v16 + v13 + v17);
      ++v14;
    }
    while (v14 < *(int *)(a1 + 32));
  }
  *(_DWORD *)(a1 + 48) = v13;
  return v13;
}

void sub_10062DC88(uint64_t a1, void *lpsrc)
{
  sub_10062A618(a1, (uint64_t)lpsrc);
}

uint64_t sub_10062DD10()
{
  return 1;
}

void *sub_10062DD18@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.RayTracingTilesAvailability.RayTracingTilesAvailabilityData");
}

uint64_t sub_10062DD2C()
{
  uint64_t result = sub_1000EB1B0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_10062DDA8()
{
}

uint64_t sub_10062DDCC()
{
  if (qword_10247C7E0 != -1) {
    dispatch_once(&qword_10247C7E0, &stru_1022BF2E0);
  }
  return qword_10248A138;
}

void sub_10062DE18(void *a1)
{
  sub_1012F6FF8(a1);

  operator delete();
}

double sub_10062DE50(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022BF368);
    }
    uint64_t v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryHeartRate] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022BF368);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryHeartRate::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    double v9 = *a3;
    if (*a3 > 0.0) {
      *(unsigned char *)(a1 + 30) = 0;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022BF368);
    }
    double v5 = fmax(v9, 1.0);
    int v10 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134349056;
      double v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[AccessoryHeartRate] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022BF368);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryHeartRate::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100A29D64(*(void *)(a1 + 32), v5);
  }
  return v5;
}

void sub_10062E188(uint64_t a1)
{
  DataCFDictionaryRef Value = IOHIDEventGetDataValue();
  IntegerCFDictionaryRef Value = IOHIDEventGetIntegerValue();
  if (!DataValue)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022BF368);
    }
    int v18 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[AccessoryHeartRate] Invalid payload", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022BF368);
    }
    LOWORD(v28) = 0;
LABEL_30:
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAccessoryHeartRate::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
    return;
  }
  int v4 = IntegerValue;
  if (IntegerValue == 16)
  {
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v6 = sub_1000D3D90(TimeStamp);
    double v23 = v6;
    int v7 = *(unsigned __int8 *)(DataValue + 13);
    int v24 = v7;
    _H9 = *(_WORD *)(DataValue + 14);
    __asm { FCVT            S0, H9 }
    int v25 = _S0;
    uint64_t v14 = *(void *)(DataValue + 5);
    uint64_t v26 = v14;
    int v15 = *(_DWORD *)(DataValue + 1);
    int v27 = v15;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022BF368);
    }
    int v16 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      __asm { FCVT            D1, H9 }
      *(_DWORD *)long long buf = 67241731;
      int v41 = v15;
      __int16 v42 = 1025;
      *(_DWORD *)unsigned int v43 = v7;
      *(_WORD *)&v43[4] = 2050;
      *(void *)&v43[6] = _D1;
      __int16 v44 = 2050;
      uint64_t v45 = v14;
      __int16 v46 = 2050;
      double v47 = v6;
      __int16 v48 = 1040;
      int v49 = 16;
      __int16 v50 = 2097;
      uint64_t v51 = DataValue;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[AccessoryHeartRate] seq,%{public}d,heartrate,%{private}u,confidence,%{public}10.10f,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022BF368);
      }
      __asm { FCVT            D0, H9 }
      int v28 = 67241731;
      int v29 = v15;
      __int16 v30 = 1025;
      *(_DWORD *)uint64_t v31 = v7;
      *(_WORD *)&v31[4] = 2050;
      *(void *)&v31[6] = _D0;
      __int16 v32 = 2050;
      uint64_t v33 = v14;
      __int16 v34 = 2050;
      double v35 = v6;
      __int16 v36 = 1040;
      int v37 = 16;
      __int16 v38 = 2097;
      uint64_t v39 = DataValue;
      unint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryHeartRate::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    sub_1000E7BA0(a1, 0, (uint64_t)&v23, 32);
    return;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022BF368);
  }
  unint64_t v19 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 68157955;
    int v41 = v4;
    __int16 v42 = 2097;
    *(void *)unsigned int v43 = DataValue;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[AccessoryHeartRate] Invalid payload: %{private}.*P", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022BF368);
    }
    int v28 = 68157955;
    int v29 = v4;
    __int16 v30 = 2097;
    *(void *)uint64_t v31 = DataValue;
    goto LABEL_30;
  }
}

void sub_10062E6A4(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

uint64_t sub_10062E6D4(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  return sub_10051310C(a1);
}

void sub_10062F530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10062F590(uint64_t a1, int a2, int a3, uint64_t a4)
{
  double v5 = *(void **)(a1 + 160);
  if (v5)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100639D90;
    v8[3] = &unk_1022BF4F0;
    int v9 = a2;
    int v10 = a3;
    void v8[4] = a4;
    v8[5] = a1;
    return [v5 async:v8];
  }
  else
  {
    uint64_t v7 = sub_101A67E8C();
    return (id)sub_10062F610(v7);
  }
}

id sub_10062F610(uint64_t a1)
{
  uint64_t v2 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
  }
  int v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    id v4 = [*(id *)(a1 + 32) count];
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "AlsCell, cdma, rx, %{public}lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    id v56 = [*(id *)(a1 + 32) count];
    int v90 = 134349056;
    *(void *)double v91 = v56;
    long long v57 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v57);
    if (v57 != buf) {
      free(v57);
    }
  }
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v58 = _Q0;
    do
    {
      id v13 = [*(id *)(a1 + 32) objectAtIndex:v6];
      sub_10013FA84((uint64_t)&v90);
      if ([v13 hasSid]) {
        unsigned int v14 = [v13 sid];
      }
      else {
        unsigned int v14 = -1;
      }
      unsigned int v94 = v14;
      if ([v13 hasNid]) {
        unsigned int v15 = [v13 nid];
      }
      else {
        unsigned int v15 = -1;
      }
      unsigned int v95 = v15;
      if ([v13 hasMcc]) {
        unsigned int v16 = [v13 mcc];
      }
      else {
        unsigned int v16 = -1;
      }
      int v90 = v16;
      if ([v13 hasBsid]) {
        unsigned int v17 = [v13 bsid];
      }
      else {
        unsigned int v17 = -1;
      }
      unsigned int v97 = v17;
      if ([v13 hasZoneid]) {
        unsigned int v18 = [v13 zoneid];
      }
      else {
        unsigned int v18 = -1;
      }
      unsigned int v96 = v18;
      if ([v13 hasBandclass]) {
        unsigned int v19 = [v13 bandclass];
      }
      else {
        unsigned int v19 = -1;
      }
      unsigned int v98 = v19;
      if ([v13 hasChannel]) {
        unsigned int v20 = [v13 channel];
      }
      else {
        unsigned int v20 = -1;
      }
      unsigned int v99 = v20;
      if ([v13 hasPnoffset]) {
        unsigned int v21 = [v13 pnoffset];
      }
      else {
        unsigned int v21 = -1;
      }
      unsigned int v100 = v21;
      uint64_t v22 = *(void *)&v91[4];
      char v92 = *(char **)&v91[4];
      if (v90 != -1)
      {
        if (*(void *)&v91[4] >= (unint64_t)v93)
        {
          unint64_t v24 = ((uint64_t)v93 - *(void *)&v91[4]) >> 1;
          if (v24 <= 1) {
            unint64_t v24 = 1;
          }
          if ((unint64_t)v93 - *(void *)&v91[4] >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          int v27 = sub_10017EA34((uint64_t)&v93, v25);
          int v28 = *(char **)&v91[4];
          int v29 = v92;
          _DWORD *v27 = v90;
          double v23 = (char *)(v27 + 1);
          __int16 v30 = v27;
          while (v29 != v28)
          {
            int v31 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *--__int16 v30 = v31;
          }
          *(void *)&v91[4] = v30;
          char v92 = (char *)(v27 + 1);
          __int16 v93 = &v27[v26];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          **(_DWORD **)&v91[4] = v90;
          double v23 = (char *)(v22 + 4);
        }
        char v92 = v23;
      }
      sub_100613DB4((uint64_t)&v90, &v79);
      int v61 = 0xFFFF;
      double v62 = 0.0;
      double v63 = 0.0;
      long long v64 = xmmword_101D1C320;
      long long v65 = v58;
      long long v66 = v58;
      long long v67 = v58;
      unsigned int v68 = 0;
      unint64_t v69 = 0xBFF0000000000000;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      int v72 = 0;
      unint64_t v73 = 0xBFF0000000000000;
      int v74 = 0x7FFFFFFF;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      uint64_t v75 = 0;
      char v78 = 0;
      if ((objc_msgSend(objc_msgSend(v13, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (v2[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        uint64_t v33 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10063009C();
          __int16 v34 = (void **)buf;
          if (SBYTE3(v105) < 0) {
            __int16 v34 = *(void ***)buf;
          }
          *(_DWORD *)double v81 = 67240451;
          *(_DWORD *)&v81[4] = v7;
          __int16 v82 = 2081;
          double v83 = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "AlsCell, cdma, %{public}d, unknown, %{private}s", v81, 0x12u);
          if (SBYTE3(v105) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v2[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10063009C();
          long long v54 = v81;
          if (SBYTE3(v85) < 0) {
            long long v54 = *(uint8_t **)v81;
          }
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v7;
          __int16 v87 = 2081;
          char v88 = v54;
          long long v55 = (char *)_os_log_send_and_compose_impl();
          if (SBYTE3(v85) < 0) {
            operator delete(*(void **)v81);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v55);
          if (v55 != buf) {
            free(v55);
          }
        }
        uint64_t v35 = *(void *)(*(void *)(a1 + 40) + 16);
        id v36 = [*(id *)(a1 + 48) type];
        id v37 = [*(id *)(a1 + 48) tag];
        __int16 v38 = *(void (**)(uint64_t, int *, id, id, void))(v35 + 256);
        if (v38) {
          v38(v35, &v90, v36, v37, *(void *)(v35 + 152));
        }
      }
      else
      {
        if ((int)objc_msgSend(objc_msgSend(v13, "location"), "accuracy") < 1000000) {
          double v32 = (double)[v13 location].accuracy;
        }
        else {
          double v32 = (double)[v13 location].accuracy / 1000000.0;
        }
        *(double *)&long long v64 = v32;
        *((void *)&v67 + 1) = *(void *)(a1 + 56);
        double v62 = (double)(uint64_t)[[v13 location] latitude] / 100000000.0;
        double v63 = (double)(uint64_t)[[v13 location] longitude] / 100000000.0;
        HIDWORD(v75) = 1;
        if (objc_msgSend(objc_msgSend(v13, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v13, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v64 + 1) = (double)(int)[v13 location].altitude;
          *(double *)&long long v65 = (double)[v13 location].verticalAccuracy;
        }
        if (objc_msgSend(objc_msgSend(v13, "location"), "hasConfidence")) {
          unsigned int v39 = [v13 location].confidence;
        }
        else {
          unsigned int v39 = 70;
        }
        unsigned int v68 = v39;
        if (v2[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        int v40 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_10063009C();
          int v41 = SBYTE3(v85);
          __int16 v42 = *(uint8_t **)v81;
          sub_100B9B6EC();
          unsigned int v43 = v81;
          if (v41 < 0) {
            unsigned int v43 = v42;
          }
          p_p = &__p;
          if (v89 < 0) {
            p_p = __p;
          }
          *(_DWORD *)long long buf = 67240707;
          *(_DWORD *)&uint8_t buf[4] = v7;
          *(_WORD *)&uint8_t buf[8] = 2081;
          *(void *)&buf[10] = v43;
          __int16 v104 = 2081;
          long long v105 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "AlsCell, cdma, %{public}d, valid, %{private}s, location, %{private}s", buf, 0x1Cu);
          if (v89 < 0) {
            operator delete(__p);
          }
          uint64_t v2 = &qword_102419000;
          if (SBYTE3(v85) < 0) {
            operator delete(*(void **)v81);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v2[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10063009C();
          int v49 = v89;
          __int16 v50 = (void **)__p;
          sub_100B9B6EC();
          uint64_t v51 = &__p;
          if (v49 < 0) {
            uint64_t v51 = v50;
          }
          unsigned int v52 = &v59;
          if (v60 < 0) {
            unsigned int v52 = v59;
          }
          *(_DWORD *)double v81 = 67240707;
          *(_DWORD *)&v81[4] = v7;
          __int16 v82 = 2081;
          double v83 = v51;
          __int16 v84 = 2081;
          double v85 = v52;
          long long v53 = (char *)_os_log_send_and_compose_impl();
          if (v60 < 0) {
            operator delete(v59);
          }
          uint64_t v2 = &qword_102419000;
          if (v89 < 0) {
            operator delete(__p);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v53);
          if (v53 != buf) {
            free(v53);
          }
        }
        uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 16);
        id v46 = [*(id *)(a1 + 48) type];
        id v47 = [*(id *)(a1 + 48) tag];
        __int16 v48 = *(void (**)(uint64_t, int *, int *, id, id, void))(v45 + 248);
        if (v48) {
          v48(v45, &v90, &v61, v46, v47, *(void *)(v45 + 152));
        }
      }
      if (v80 < 0) {
        operator delete(v79);
      }
      if (v102 < 0) {
        operator delete(v101);
      }
      if (*(void *)&v91[4])
      {
        char v92 = *(char **)&v91[4];
        operator delete(*(void **)&v91[4]);
      }
      id result = [*(id *)(a1 + 32) count];
      uint64_t v6 = ++v7;
    }
    while ((unint64_t)result > v7);
  }
  return result;
}

void sub_100630020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  sub_1006302A8((uint64_t)&a58);
  _Unwind_Resume(a1);
}

uint64_t sub_10063009C()
{
  sub_10010F274((uint64_t)v5);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)".", 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)".", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v5[2] = v3;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10063026C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100630280(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 256);
  if (v4) {
    return v4(result, a2, a3, a4, *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_100630294(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 248);
  if (v5) {
    return v5(result, a2, a3, a4, a5, *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_1006302A8(uint64_t a1)
{
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

id sub_1006302EC(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [*(id *)(a1 + 32) count];
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "AlsCell, lte, rx, %{public}lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    id v43 = [*(id *)(a1 + 32) count];
    int v67 = 134349056;
    double v68 = *(double *)&v43;
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v44);
    if (v44 != buf) {
      free(v44);
    }
  }
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    unint64_t v5 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v45 = _Q0;
    unsigned int v11 = 1;
    do
    {
      id v12 = [*(id *)(a1 + 32) objectAtIndex:v5];
      uint64_t v49 = -1;
      uint64_t v50 = -1;
      uint64_t v48 = -1;
      int v51 = -1;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = -1;
      uint64_t v55 = -1;
      int v56 = -1;
      long long v57 = xmmword_101D23030;
      LODWORD(v48) = [v12 mcc];
      HIDWORD(v48) = [v12 mnc];
      LODWORD(v49) = [v12 tacID];
      HIDWORD(v49) = [v12 cellID];
      if ([v12 hasUarfcn]) {
        unsigned int v13 = [v12 uarfcn];
      }
      else {
        unsigned int v13 = -1;
      }
      LODWORD(v50) = v13;
      if ([v12 hasPid]) {
        unsigned int v14 = [v12 pid];
      }
      else {
        unsigned int v14 = -1;
      }
      HIDWORD(v50) = v14;
      double v68 = 0.0;
      double v69 = 0.0;
      long long v70 = xmmword_101D1C320;
      long long v71 = v45;
      long long v72 = v45;
      long long v73 = v45;
      int v67 = 0xFFFF;
      unsigned int v74 = 0;
      unint64_t v75 = 0xBFF0000000000000;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      int v78 = 0;
      unint64_t v79 = 0xBFF0000000000000;
      int v80 = 0x7FFFFFFF;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      uint64_t v81 = 0;
      char v84 = 0;
      unsigned int v15 = v11 - 1;
      if ((objc_msgSend(objc_msgSend(v12, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        unsigned int v20 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10010F0A4();
          unsigned int v21 = (void **)buf;
          if (SBYTE3(v87) < 0) {
            unsigned int v21 = *(void ***)buf;
          }
          *(_DWORD *)long long v58 = 67240451;
          *(_DWORD *)&v58[4] = v11 - 1;
          __int16 v59 = 2081;
          char v60 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "AlsCell, lte, %{public}d, unknown, %{private}s", v58, 0x12u);
          if (SBYTE3(v87) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10010F0A4();
          int v41 = v58;
          if (SBYTE3(v62) < 0) {
            int v41 = *(uint8_t **)v58;
          }
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v11 - 1;
          __int16 v64 = 2081;
          long long v65 = v41;
          __int16 v42 = (char *)_os_log_send_and_compose_impl();
          if (SBYTE3(v62) < 0) {
            operator delete(*(void **)v58);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v42);
          if (v42 != buf) {
            free(v42);
          }
        }
        uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 16);
        id v23 = [*(id *)(a1 + 48) type];
        id v24 = [*(id *)(a1 + 48) tag];
        unint64_t v25 = *(void (**)(uint64_t, uint64_t *, id, id, void))(v22 + 272);
        if (v25) {
          v25(v22, &v48, v23, v24, *(void *)(v22 + 152));
        }
      }
      else
      {
        BOOL v16 = (int)[v12 location].accuracy > 999999;
        int v17 = [v12 location].accuracy;
        double v18 = (double)v17;
        if (v16) {
          double v18 = (double)v17 / 1000000.0;
        }
        *(double *)&long long v70 = v18;
        *((void *)&v73 + 1) = *(void *)(a1 + 56);
        double v68 = (double)(uint64_t)[v12 location].latitude / 100000000.0;
        double v69 = (double)(uint64_t)[v12 location].longitude / 100000000.0;
        HIDWORD(v81) = 1;
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v12, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v70 + 1) = (double)(int)[v12 location].altitude;
          *(double *)&long long v71 = (double)[v12 location].verticalAccuracy;
        }
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasConfidence")) {
          unsigned int v19 = [objc_msgSend(v12, "location") confidence];
        }
        else {
          unsigned int v19 = 70;
        }
        unsigned int v74 = v19;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        uint64_t v26 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_10010F0A4();
          int v27 = SBYTE3(v62);
          int v28 = *(uint8_t **)v58;
          sub_100B9B6EC();
          int v29 = v58;
          if (v27 < 0) {
            int v29 = v28;
          }
          p_p = &__p;
          if (v66 < 0) {
            p_p = __p;
          }
          *(_DWORD *)long long buf = 67240707;
          unsigned int v15 = v11 - 1;
          *(_DWORD *)&uint8_t buf[4] = v11 - 1;
          *(_WORD *)&uint8_t buf[8] = 2081;
          *(void *)&buf[10] = v29;
          __int16 v86 = 2081;
          __int16 v87 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "AlsCell, lte, %{public}d, valid, %{private}s, location, %{private}s", buf, 0x1Cu);
          if (v66 < 0) {
            operator delete(__p);
          }
          if (SBYTE3(v62) < 0) {
            operator delete(*(void **)v58);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10010F0A4();
          unsigned int v35 = v15;
          int v36 = v66;
          id v37 = (void **)__p;
          sub_100B9B6EC();
          __int16 v38 = &__p;
          if (v36 < 0) {
            __int16 v38 = v37;
          }
          unsigned int v39 = &v46;
          if (v47 < 0) {
            unsigned int v39 = v46;
          }
          *(_DWORD *)long long v58 = 67240707;
          *(_DWORD *)&v58[4] = v35;
          __int16 v59 = 2081;
          char v60 = v38;
          __int16 v61 = 2081;
          double v62 = v39;
          int v40 = (char *)_os_log_send_and_compose_impl();
          if (v47 < 0) {
            operator delete(v46);
          }
          if (v66 < 0) {
            operator delete(__p);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v40);
          if (v40 != buf) {
            free(v40);
          }
        }
        uint64_t v31 = *(void *)(*(void *)(a1 + 40) + 16);
        id v32 = [*(id *)(a1 + 48) type];
        id v33 = [*(id *)(a1 + 48) tag];
        __int16 v34 = *(void (**)(uint64_t, uint64_t *, int *, id, id, void))(v31 + 264);
        if (v34) {
          v34(v31, &v48, &v67, v32, v33, *(void *)(v31 + 152));
        }
      }
      id result = [*(id *)(a1 + 32) count];
      unint64_t v5 = v11++;
    }
    while ((unint64_t)result > v5);
  }
  return result;
}

void sub_100630C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100630C48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 272);
  if (v4) {
    return v4(result, a2, a3, a4, *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_100630C5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 264);
  if (v5) {
    return v5(result, a2, a3, a4, a5, *(void *)(result + 152));
  }
  return result;
}

id sub_100630C70(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [*(id *)(a1 + 32) count];
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "AlsCell, nr, rx, %{public}lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    id v46 = [*(id *)(a1 + 32) count];
    int v72 = 134349056;
    double v73 = *(double *)&v46;
    char v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
  }
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    unint64_t v5 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v48 = _Q0;
    unsigned int v11 = 1;
    do
    {
      id v12 = [*(id *)(a1 + 32) objectAtIndex:v5];
      uint64_t v51 = -1;
      int v52 = -1;
      uint64_t v53 = -1;
      uint64_t v54 = -1;
      int v55 = -1;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = -1;
      uint64_t v59 = -1;
      uint64_t v60 = -1;
      unint64_t v61 = 0xFFFFFFFF00000000;
      int v62 = -1;
      if ([v12 hasMcc]) {
        unsigned int v13 = [v12 mcc];
      }
      else {
        unsigned int v13 = -1;
      }
      LODWORD(v51) = v13;
      if ([v12 hasMnc]) {
        unsigned int v14 = [v12 mnc];
      }
      else {
        unsigned int v14 = -1;
      }
      HIDWORD(v51) = v14;
      if ([v12 hasTacID]) {
        unsigned int v15 = [v12 tacID];
      }
      else {
        unsigned int v15 = -1;
      }
      int v52 = v15;
      if ([v12 hasCellID]) {
        uint64_t v16 = (uint64_t)[v12 cellID];
      }
      else {
        uint64_t v16 = -1;
      }
      uint64_t v53 = v16;
      if ([v12 hasNrarfcn]) {
        unsigned int v17 = [v12 nrarfcn];
      }
      else {
        unsigned int v17 = -1;
      }
      LODWORD(v54) = v17;
      double v73 = 0.0;
      double v74 = 0.0;
      long long v75 = xmmword_101D1C320;
      long long v76 = v48;
      long long v77 = v48;
      long long v78 = v48;
      int v72 = 0xFFFF;
      unsigned int v79 = 0;
      unint64_t v80 = 0xBFF0000000000000;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      int v83 = 0;
      unint64_t v84 = 0xBFF0000000000000;
      int v85 = 0x7FFFFFFF;
      uint64_t v87 = 0;
      uint64_t v88 = 0;
      uint64_t v86 = 0;
      char v89 = 0;
      unsigned int v18 = v11 - 1;
      if ((objc_msgSend(objc_msgSend(v12, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        id v23 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100631600();
          id v24 = (void **)buf;
          if (SBYTE3(v92) < 0) {
            id v24 = *(void ***)buf;
          }
          *(_DWORD *)double v63 = 67240451;
          *(_DWORD *)&v63[4] = v11 - 1;
          __int16 v64 = 2081;
          long long v65 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "AlsCell, nr, %{public}d, unknown, %{private}s", v63, 0x12u);
          if (SBYTE3(v92) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100631600();
          __int16 v44 = v63;
          if (SBYTE3(v67) < 0) {
            __int16 v44 = *(uint8_t **)v63;
          }
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v11 - 1;
          __int16 v69 = 2081;
          long long v70 = v44;
          long long v45 = (char *)_os_log_send_and_compose_impl();
          if (SBYTE3(v67) < 0) {
            operator delete(*(void **)v63);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v45);
          if (v45 != buf) {
            free(v45);
          }
        }
        uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 16);
        id v26 = [*(id *)(a1 + 48) type];
        id v27 = [*(id *)(a1 + 48) tag];
        int v28 = *(void (**)(uint64_t, uint64_t *, id, id, void))(v25 + 288);
        if (v28) {
          v28(v25, &v51, v26, v27, *(void *)(v25 + 152));
        }
      }
      else
      {
        BOOL v19 = [(int)[v12 location] accuracy] > 999999;
        int v20 = [v12 location].accuracy;
        double v21 = (double)v20;
        if (v19) {
          double v21 = (double)v20 / 1000000.0;
        }
        *(double *)&long long v75 = v21;
        *((void *)&v78 + 1) = *(void *)(a1 + 56);
        double v73 = (double)(uint64_t)[v12 location].latitude / 100000000.0;
        double v74 = (double)(uint64_t)[v12 location].longitude / 100000000.0;
        HIDWORD(v86) = 1;
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v12, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v75 + 1) = (double)(int)[v12 location].altitude;
          *(double *)&long long v76 = (double)[v12 location].verticalAccuracy;
        }
        if (objc_msgSend(objc_msgSend(v12, "location"), "hasConfidence")) {
          unsigned int v22 = [v12 location].confidence;
        }
        else {
          unsigned int v22 = 70;
        }
        unsigned int v79 = v22;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        int v29 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100631600();
          int v30 = SBYTE3(v67);
          uint64_t v31 = *(uint8_t **)v63;
          sub_100B9B6EC();
          id v32 = v63;
          if (v30 < 0) {
            id v32 = v31;
          }
          p_p = &__p;
          if (v71 < 0) {
            p_p = __p;
          }
          *(_DWORD *)long long buf = 67240707;
          unsigned int v18 = v11 - 1;
          *(_DWORD *)&uint8_t buf[4] = v11 - 1;
          *(_WORD *)&uint8_t buf[8] = 2081;
          *(void *)&buf[10] = v32;
          __int16 v91 = 2081;
          char v92 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "AlsCell, nr, %{public}d, valid, %{private}s, location, %{private}s", buf, 0x1Cu);
          if (v71 < 0) {
            operator delete(__p);
          }
          if (SBYTE3(v67) < 0) {
            operator delete(*(void **)v63);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100631600();
          unsigned int v38 = v18;
          int v39 = v71;
          int v40 = (void **)__p;
          sub_100B9B6EC();
          int v41 = &__p;
          if (v39 < 0) {
            int v41 = v40;
          }
          __int16 v42 = &v49;
          if (v50 < 0) {
            __int16 v42 = v49;
          }
          *(_DWORD *)double v63 = 67240707;
          *(_DWORD *)&v63[4] = v38;
          __int16 v64 = 2081;
          long long v65 = v41;
          __int16 v66 = 2081;
          int v67 = v42;
          id v43 = (char *)_os_log_send_and_compose_impl();
          if (v50 < 0) {
            operator delete(v49);
          }
          if (v71 < 0) {
            operator delete(__p);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke", "%s\n", v43);
          if (v43 != buf) {
            free(v43);
          }
        }
        uint64_t v34 = *(void *)(*(void *)(a1 + 40) + 16);
        id v35 = [*(id *)(a1 + 48) type];
        id v36 = [*(id *)(a1 + 48) tag];
        id v37 = *(void (**)(uint64_t, uint64_t *, int *, id, id, void))(v34 + 280);
        if (v37) {
          v37(v34, &v51, &v72, v35, v36, *(void *)(v34 + 152));
        }
      }
      id result = [*(id *)(a1 + 32) count];
      unint64_t v5 = v11++;
    }
    while ((unint64_t)result > v5);
  }
  return result;
}

void sub_1006315C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100631600()
{
  sub_10010F274((uint64_t)v5);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)".", 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)".", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)".", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v5[2] = v3;
  if (v6 < 0) {
    operator delete((void *)v5[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1006317BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006317D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 288);
  if (v4) {
    return v4(result, a2, a3, a4, *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_1006317E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 280);
  if (v5) {
    return v5(result, a2, a3, a4, a5, *(void *)(result + 152));
  }
  return result;
}

void sub_100631BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100632360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10063239C(uint64_t a1, int a2, int a3)
{
  id v4 = *(void **)(a1 + 160);
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100639E74;
    void v7[3] = &unk_1022B8660;
    void v7[4] = a1;
    int v8 = a2;
    int v9 = a3;
    return [v4 async:v7];
  }
  else
  {
    uint64_t v6 = sub_101A67FF8();
    return (id)sub_10063241C(v6);
  }
}

void sub_10063241C(uint64_t a1, int a2, int a3)
{
  id v4 = *(void **)(a1 + 160);
  if (v4)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100639E94;
    v8[3] = &unk_1022B8660;
    void v8[4] = a1;
    int v9 = a2;
    int v10 = a3;
    [v4 async:v8];
  }
  else
  {
    unint64_t v5 = (ALSLocationDelegate *)sub_101A68164();
    [(ALSLocationDelegate *)v5 finished:v7];
  }
}

void sub_1006326AC(uint64_t a1, int a2, int a3)
{
  id v4 = *(void **)(a1 + 160);
  if (v4)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_100639EE4;
    void v11[3] = &unk_1022B8660;
    int v11[4] = a1;
    int v12 = a2;
    int v13 = a3;
    [v4 async:v11];
  }
  else
  {
    unint64_t v5 = (ALSLocationDelegate *)sub_101A682D0();
    [(ALSLocationDelegate *)v5 processCells:v7 inRange:v14 timeReceived:v10 requestType:v8 tag:v9];
  }
}

void *sub_100632974(void *result)
{
  unint64_t v1 = result[6];
  if (v1 < result[7] + v1)
  {
    uint64_t v2 = result;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v32 = _Q0;
    do
    {
      id v8 = [(id)v2[4] objectAtIndex:v1];
      *(void *)&long long v9 = -1;
      *((void *)&v9 + 1) = -1;
      long long v54 = v9;
      long long v53 = v9;
      LODWORD(v53) = [v8 mcc];
      DWORD1(v53) = [v8 mnc];
      DWORD2(v53) = [v8 lacID];
      HIDWORD(v53) = [v8 cellID];
      if ([v8 hasArfcn]) {
        unsigned int v10 = [v8 arfcn];
      }
      else {
        unsigned int v10 = -1;
      }
      LODWORD(v54) = v10;
      if ([v8 hasPsc]) {
        unsigned int v11 = [v8 psc];
      }
      else {
        unsigned int v11 = -1;
      }
      DWORD1(v54) = v11;
      int v35 = 0xFFFF;
      double v36 = 0.0;
      double v37 = 0.0;
      long long v38 = xmmword_101D1C320;
      long long v39 = v32;
      long long v40 = v32;
      long long v41 = v32;
      unsigned int v42 = 0;
      unint64_t v43 = 0xBFF0000000000000;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      int v46 = 0;
      unint64_t v47 = 0xBFF0000000000000;
      int v48 = 0x7FFFFFFF;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      char v52 = 0;
      if ((objc_msgSend(objc_msgSend(v8, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        uint64_t v16 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10010F0A4();
          unsigned int v17 = __p;
          if (v67 < 0) {
            unsigned int v17 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 134349315;
          *(void *)&uint8_t buf[4] = v1;
          __int16 v56 = 2081;
          uint64_t v57 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "AlsCell, gsm, %{public}lu, unknown, %{private}s", buf, 0x16u);
          if (SHIBYTE(v67) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10010F0A4();
          int v30 = buf;
          if (v58 < 0) {
            int v30 = *(unsigned char **)buf;
          }
          *(_DWORD *)uint64_t v60 = 134349315;
          *(void *)&v60[4] = v1;
          __int16 v61 = 2081;
          int v62 = v30;
          uint64_t v31 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v58) < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v31);
          if (v31 != __p) {
            free(v31);
          }
        }
        id result = *(void **)(v2[5] + 16);
        unsigned int v18 = (uint64_t (*)(void *, long long *, void, void, void))result[23];
        if (v18) {
          id result = (void *)v18(result, &v53, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
        }
      }
      else
      {
        BOOL v12 = (int)[v8 location].accuracy > 999999;
        int v13 = [v8 location].accuracy;
        double v14 = (double)v13;
        if (v12) {
          double v14 = (double)v13 / 1000000.0;
        }
        *(double *)&long long v38 = v14;
        *((void *)&v41 + 1) = v2[8];
        double v36 = (double)(uint64_t)[v8 location].latitude / 100000000.0;
        double v37 = (double)(uint64_t)[v8 location].longitude / 100000000.0;
        HIDWORD(v49) = 1;
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v8, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v38 + 1) = (double)(int)[v8 location].altitude;
          *(double *)&long long v39 = (double)(int)[v8 location].verticalAccuracy;
        }
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasConfidence")) {
          unsigned int v15 = [[[v8 location] confidence];
        }
        else {
          unsigned int v15 = 70;
        }
        unsigned int v42 = v15;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        BOOL v19 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_10010F0A4();
          int v20 = SHIBYTE(v58);
          double v21 = *(unsigned char **)buf;
          sub_100B9B6EC();
          unsigned int v22 = buf;
          if (v20 < 0) {
            unsigned int v22 = v21;
          }
          id v23 = v60;
          if (v63 < 0) {
            id v23 = *(unsigned char **)v60;
          }
          *(_DWORD *)std::string __p = 134349571;
          *(void *)&__p[4] = v1;
          __int16 v65 = 2081;
          __int16 v66 = v22;
          __int16 v67 = 2081;
          double v68 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AlsCell, gsm, %{public}lu, valid, %{private}s, location, %{private}s", __p, 0x20u);
          if (v63 < 0) {
            operator delete(*(void **)v60);
          }
          if (SHIBYTE(v58) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10010F0A4();
          int v25 = v63;
          id v26 = *(unsigned char **)v60;
          sub_100B9B6EC();
          id v27 = v60;
          if (v25 < 0) {
            id v27 = v26;
          }
          int v28 = &v33;
          if (v34 < 0) {
            int v28 = v33;
          }
          *(_DWORD *)long long buf = 134349571;
          *(void *)&uint8_t buf[4] = v1;
          __int16 v56 = 2081;
          uint64_t v57 = v27;
          __int16 v58 = 2081;
          uint64_t v59 = v28;
          int v29 = (char *)_os_log_send_and_compose_impl();
          if (v34 < 0) {
            operator delete(v33);
          }
          if (v63 < 0) {
            operator delete(*(void **)v60);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v29);
          if (v29 != __p) {
            free(v29);
          }
        }
        id result = *(void **)(v2[5] + 16);
        id v24 = (uint64_t (*)(void *, long long *, int *, void, void, void))result[22];
        if (v24) {
          id result = (void *)v24(result, &v53, &v35, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
        }
      }
      ++v1;
    }
    while (v1 < v2[7] + v2[6]);
  }
  return result;
}

void sub_100633080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006330B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 184);
  if (v4) {
    return v4(result, a2, a3, a4, *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_1006330CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 176);
  if (v5) {
    return v5(result, a2, a3, a4, a5, *(void *)(result + 152));
  }
  return result;
}

void *sub_100633328(void *result)
{
  unint64_t v1 = result[6];
  if (v1 < result[7] + v1)
  {
    uint64_t v2 = result;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v32 = _Q0;
    do
    {
      id v8 = [(id)v2[4] objectAtIndex:v1];
      *(void *)&long long v9 = -1;
      *((void *)&v9 + 1) = -1;
      long long v54 = v9;
      long long v53 = v9;
      LODWORD(v53) = [v8 mcc];
      DWORD1(v53) = [v8 mnc];
      DWORD2(v53) = [v8 lacID];
      HIDWORD(v53) = [v8 cellID];
      if ([v8 hasArfcn]) {
        unsigned int v10 = [v8 arfcn];
      }
      else {
        unsigned int v10 = -1;
      }
      LODWORD(v54) = v10;
      if ([v8 hasPsc]) {
        unsigned int v11 = [v8 psc];
      }
      else {
        unsigned int v11 = -1;
      }
      DWORD1(v54) = v11;
      int v35 = 0xFFFF;
      double v36 = 0.0;
      double v37 = 0.0;
      long long v38 = xmmword_101D1C320;
      long long v39 = v32;
      long long v40 = v32;
      long long v41 = v32;
      unsigned int v42 = 0;
      unint64_t v43 = 0xBFF0000000000000;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      int v46 = 0;
      unint64_t v47 = 0xBFF0000000000000;
      int v48 = 0x7FFFFFFF;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      char v52 = 0;
      if ((objc_msgSend(objc_msgSend(v8, "location"), "accuracy") & 0x80000000) != 0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        uint64_t v16 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10010F0A4();
          unsigned int v17 = __p;
          if (v67 < 0) {
            unsigned int v17 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 134349315;
          *(void *)&uint8_t buf[4] = v1;
          __int16 v56 = 2081;
          uint64_t v57 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "AlsCell, scdma, %{public}lu, unknown, %{private}s", buf, 0x16u);
          if (SHIBYTE(v67) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10010F0A4();
          int v30 = buf;
          if (v58 < 0) {
            int v30 = *(unsigned char **)buf;
          }
          *(_DWORD *)uint64_t v60 = 134349315;
          *(void *)&v60[4] = v1;
          __int16 v61 = 2081;
          int v62 = v30;
          uint64_t v31 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v58) < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate processScdmaCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v31);
          if (v31 != __p) {
            free(v31);
          }
        }
        id result = *(void **)(v2[5] + 16);
        unsigned int v18 = (uint64_t (*)(void *, long long *, void, void, void))result[25];
        if (v18) {
          id result = (void *)v18(result, &v53, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
        }
      }
      else
      {
        BOOL v12 = [(int)[v8 location] accuracy] > 999999;
        int v13 = [v8 location].accuracy;
        double v14 = (double)v13;
        if (v12) {
          double v14 = (double)v13 / 1000000.0;
        }
        *(double *)&long long v38 = v14;
        *((void *)&v41 + 1) = v2[8];
        double v36 = (double)(uint64_t)[[v8 location] latitude] / 100000000.0;
        double v37 = (double)(uint64_t)[v8 location].longitude / 100000000.0;
        HIDWORD(v49) = 1;
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasAltitude")
          && objc_msgSend(objc_msgSend(v8, "location"), "hasVerticalAccuracy"))
        {
          *((double *)&v38 + 1) = (double)(int)[v8 location].altitude;
          *(double *)&long long v39 = (double)(int)[[v8 location] verticalAccuracy];
        }
        if (objc_msgSend(objc_msgSend(v8, "location"), "hasConfidence")) {
          unsigned int v15 = [v8 location].confidence;
        }
        else {
          unsigned int v15 = 70;
        }
        unsigned int v42 = v15;
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        BOOL v19 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_10010F0A4();
          int v20 = SHIBYTE(v58);
          double v21 = *(unsigned char **)buf;
          sub_100B9B6EC();
          unsigned int v22 = buf;
          if (v20 < 0) {
            unsigned int v22 = v21;
          }
          id v23 = v60;
          if (v63 < 0) {
            id v23 = *(unsigned char **)v60;
          }
          *(_DWORD *)std::string __p = 134349571;
          *(void *)&__p[4] = v1;
          __int16 v65 = 2081;
          __int16 v66 = v22;
          __int16 v67 = 2081;
          double v68 = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AlsCell, scdma, %{public}lu, valid, %{private}s, location, %{private}s", __p, 0x20u);
          if (v63 < 0) {
            operator delete(*(void **)v60);
          }
          if (SHIBYTE(v58) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10010F0A4();
          int v25 = v63;
          id v26 = *(unsigned char **)v60;
          sub_100B9B6EC();
          id v27 = v60;
          if (v25 < 0) {
            id v27 = v26;
          }
          int v28 = &v33;
          if (v34 < 0) {
            int v28 = v33;
          }
          *(_DWORD *)long long buf = 134349571;
          *(void *)&uint8_t buf[4] = v1;
          __int16 v56 = 2081;
          uint64_t v57 = v27;
          __int16 v58 = 2081;
          uint64_t v59 = v28;
          int v29 = (char *)_os_log_send_and_compose_impl();
          if (v34 < 0) {
            operator delete(v33);
          }
          if (v63 < 0) {
            operator delete(*(void **)v60);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "-[ALSLocationDelegate processScdmaCells:inRange:timeReceived:requestType:tag:]_block_invoke", "%s\n", v29);
          if (v29 != __p) {
            free(v29);
          }
        }
        id result = *(void **)(v2[5] + 16);
        id v24 = (uint64_t (*)(void *, long long *, int *, void, void, void))result[24];
        if (v24) {
          id result = (void *)v24(result, &v53, &v35, *((unsigned int *)v2 + 18), *((unsigned int *)v2 + 19), result[19]);
        }
      }
      ++v1;
    }
    while (v1 < v2[7] + v2[6]);
  }
  return result;
}

void sub_100633A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100633A6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 200);
  if (v4) {
    return v4(result, a2, a3, a4, *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_100633A80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 192);
  if (v5) {
    return v5(result, a2, a3, a4, a5, *(void *)(result + 152));
  }
  return result;
}

void sub_100634AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46)
{
  if (__p) {
    operator delete(__p);
  }
  if (a46) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_100634BA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v25 = 0;
  id v26 = 0;
  uint64_t v27 = 0;
  sub_1000E39FC(&v25, *(const void **)a2, *(void *)(a2 + 8), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  unsigned int v22 = 0;
  id v23 = 0;
  uint64_t v24 = 0;
  sub_1000E39FC(&v22, *(const void **)a3, *(void *)(a3 + 8), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  unsigned int v11 = *(void **)(a1 + 160);
  if (v11)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3321888768;
    _DWORD v12[2] = sub_100639F04;
    void v12[3] = &unk_1022BF570;
    void v12[4] = a1;
    int v13 = 0;
    double v14 = 0;
    uint64_t v15 = 0;
    sub_1000E39FC(&v13, v25, (uint64_t)v26, 0xD37A6F4DE9BD37A7 * ((v26 - (unsigned char *)v25) >> 3));
    std::string __p = 0;
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    sub_1000E39FC(&__p, v22, (uint64_t)v23, 0xD37A6F4DE9BD37A7 * ((v23 - (unsigned char *)v22) >> 3));
    int v19 = a4;
    int v20 = a5;
    int v21 = a6;
    [v11 async:v12];
    if (__p)
    {
      unsigned int v17 = __p;
      operator delete(__p);
    }
    if (v13)
    {
      double v14 = v13;
      operator delete(v13);
    }
    if (v22)
    {
      id v23 = v22;
      operator delete(v22);
    }
    if (v25)
    {
      id v26 = v25;
      operator delete(v25);
    }
  }
  else
  {
    sub_101A6843C();
    abort_report_np();
    __break(1u);
  }
}

void sub_100634D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  id v23 = *(void **)(v21 - 96);
  if (v23)
  {
    *(void *)(v21 - 88) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(v21 - 72);
  if (v24)
  {
    *(void *)(v21 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100634DC8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  *(void *)a1 = off_1022BF5B0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = *a2;
  long long v6 = a2[1];
  long long v7 = a2[2];
  long long v8 = a2[3];
  *(_OWORD *)(a1 + 216) = a2[4];
  *(_OWORD *)(a1 + 200) = v8;
  *(_OWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 168) = v6;
  long long v9 = a2[5];
  long long v10 = a2[6];
  long long v11 = a2[8];
  *(_OWORD *)(a1 + 264) = a2[7];
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 248) = v10;
  *(_OWORD *)(a1 + 232) = v9;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = a3;
  *(void *)a1 = off_1022BF3C0;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 10;
  BOOL v12 = (std::string *)(a1 + 352);
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  sub_100134750((void *)(a1 + 352), off_10241CEF8);
  *(unsigned char *)(a1 + 376) = 0;
  uint64_t v13 = *a4;
  *a4 = 0;
  *(void *)(a1 + 384) = v13;
  sub_100AC12C4(a1 + 392);
  *(_DWORD *)(a1 + 472) = 0;
  [*(id *)(a1 + 304) silo];
  *(void *)(a1 + 312) = [[ALSLocationDelegate alloc] initWithRequester:a1];
  sub_1000C7F88(buf);
  *(unsigned char *)(a1 + 376) = sub_1004D1284(*(uint64_t *)buf, "AppleLocationServer", v12);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  char v14 = sub_10006EF84(*(uint64_t *)buf, "AppleLocationServerTimeout", (_DWORD *)(a1 + 320));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v14 & 1) == 0) {
    *(_DWORD *)(a1 + 320) = 10;
  }
  sub_1000C7F88(buf);
  char v15 = sub_1004D12F8(*(uint64_t *)buf, "AppleLocationServerRequestLog", (CFTypeRef *)(a1 + 328));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v15 & 1) == 0) {
    *(void *)(a1 + 328) = 0;
  }
  sub_1000C7F88(buf);
  char v16 = sub_1004D12F8(*(uint64_t *)buf, "AppleLocationServerResponseLog", (CFTypeRef *)(a1 + 336));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v16 & 1) == 0) {
    *(void *)(a1 + 336) = 0;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
  }
  unsigned int v17 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = v12;
    if (*(char *)(a1 + 375) < 0) {
      uint64_t v18 = (std::string *)v12->__r_.__value_.__r.__words[0];
    }
    int v19 = *(unsigned __int8 *)(a1 + 376);
    int v20 = *(_DWORD *)(a1 + 320);
    BOOL v21 = *(void *)(a1 + 328) != 0;
    BOOL v22 = *(void *)(a1 + 336) != 0;
    *(_DWORD *)long long buf = 136381699;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v19;
    __int16 v26 = 1026;
    int v27 = v20;
    __int16 v28 = 1026;
    BOOL v29 = v21;
    __int16 v30 = 1026;
    BOOL v31 = v22;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AlsInit, server, %{private}s, override, %{public}d, timeout, %{public}d, log request/response, %{public}d, %{public}d", buf, 0x24u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLNetworkLocationRequesterALS::CLNetworkLocationRequesterALS(const Listener &, id<CLIntersiloUniverse>, std::unique_ptr<CLINetworkLocationRequesterALSExternal>)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  return a1;
}

void sub_100635210(_Unwind_Exception *a1)
{
  sub_100AC12C8(v3);
  uint64_t v5 = *(void *)(v1 + 384);
  *(void *)(v1 + 384) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(char *)(v1 + 375) < 0) {
    operator delete(*v2);
  }
  sub_1006352B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006352B0(uint64_t a1)
{
  *(void *)a1 = off_1022BF5B0;
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(void *)(a1 + 136) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  id v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  long long v8 = (void **)(a1 + 56);
  sub_10063A340(&v8);
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(void *)(a1 + 40) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_100635358()
{
}

void sub_1006353E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A685C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100635400(uint64_t a1)
{
  *(void *)a1 = off_1022BF3C0;

  uint64_t v2 = *(const void **)(a1 + 328);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 336);
  if (v3) {
    CFRelease(v3);
  }
  sub_100134750(__p, "final");
  sub_100D3B360((uint64_t)&qword_10247C7E8, (uint64_t *)__p, *(_DWORD *)(a1 + 472));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_100AC12C8(a1 + 392);
  uint64_t v4 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  return sub_1006352B0(a1);
}

void sub_1006354F0(uint64_t a1)
{
  sub_100635400(a1);

  operator delete();
}

uint64_t sub_100635528(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_1014CAB58();
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BF550);
  }
  long long v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a2 + 4);
    uint64_t v8 = *(void *)(a2 + 12);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "query: queryLocation, location, %14.8lf, %14.8lf, timeout, %d", buf, 0x1Cu);
  }
  int v53 = a3;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF550);
    }
    uint64_t v38 = *(void *)(a2 + 4);
    uint64_t v39 = *(void *)(a2 + 12);
    int v60 = 134218496;
    *(void *)__int16 v61 = v38;
    *(_WORD *)&v61[8] = 2048;
    *(void *)&v61[10] = v39;
    *(_WORD *)&v61[18] = 1024;
    *(_DWORD *)&v61[20] = a3;
    long long v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int)", "%s\n", v40);
    if (v40 != buf) {
      free(v40);
    }
  }
  [(ALSNearbyRequest *)v5 setLatitude:(uint64_t)(*(double *)(a2 + 4) * 100000000.0)];
  [(ALSNearbyRequest *)v5 setLongitude:(uint64_t)(*(double *)(a2 + 12) * 100000000.0)];
  [(ALSNearbyRequest *)v5 setNeedCellsTowers:0];
  [(ALSNearbyRequest *)v5 setNumberOfSurroundingWifis:0xFFFFFFFFLL];
  id v9 = +[GEOCountryConfiguration sharedConfiguration];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v10 = [[objc_msgSend(v9, "defaultForKey:defaultValue:", @"CLAppleLocationServiceNearbyRequestWifiBands", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", qword_10248A148)) componentsSeparatedByString:@","];
  id v11 = [v10 countByEnumeratingWithState:&v56 objects:v68 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v57;
    do
    {
      for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v57 != v12) {
          objc_enumerationMutation(v10);
        }
        char v14 = *(void **)(*((void *)&v56 + 1) + 8 * i);
        if ([v14 isEqualToString:@"k2dot4GHZ"])
        {
          uint64_t v15 = 1;
        }
        else if ([v14 isEqualToString:@"k5GHZ"])
        {
          uint64_t v15 = 2;
        }
        else
        {
          uint64_t v15 = 1;
        }
        [(ALSNearbyRequest *)v5 addWifiBands:v15];
      }
      id v11 = [v10 countByEnumeratingWithState:&v56 objects:v68 count:16];
    }
    while (v11);
  }
  [(ALSNearbyRequest *)v5 setWifiAltitudeScale:2];
  if (*(unsigned char *)(a1 + 376))
  {
    char v16 = (void *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0) {
      char v16 = (void *)*v16;
    }
    unsigned int v17 = +[NSString stringWithUTF8String:v16];
  }
  else
  {
    id v18 = +[GEOCountryConfiguration sharedConfiguration];
    int v19 = (void *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0) {
      int v19 = (void *)*v19;
    }
    unsigned int v17 = (NSString *)[v18 defaultForKey:@"CLAppleLocationServer" defaultValue:[NSString stringWithUTF8String:v19]];
  }
  int v20 = v17;
  BOOL v21 = [[CLALSRequester alloc] initWithURL:[NSURL URLWithString:v17] delegate:*(void *)(a1 + 312) queue:objc_msgSend(objc_msgSend(*(id *)(a1 + 304), "silo"), "operationQueue")];
  uint64_t v22 = *(unsigned int *)(a1 + 344);
  *(_DWORD *)(a1 + 344) = v22 + 1;
  [(CLALSRequester *)v21 setTag:v22];
  [(CLALSRequester *)v21 setType:1];
  [(CLALSRequester *)v21 setTimestamp:CFAbsoluteTimeGetCurrent()];
  [(CLALSRequester *)v21 setTimeoutSeconds:(double)*(int *)(a1 + 320)];
  sub_1000E9354(v55);
  char v52 = v20;
  sub_1004D34AC((uint64_t)v55, "Connection", "close");
  [(CLALSRequester *)v21 setHttpRequestHeaders:sub_1000E9358((uint64_t)v55)];
  [(CLALSRequester *)v21 addRequest:v5];
  if (*(void *)(a1 + 328)) {
    -[CLALSRequester setLogRequestToFile:](v21, "setLogRequestToFile:");
  }
  if (*(void *)(a1 + 336)) {
    -[CLALSRequester setLogResponseToFile:](v21, "setLogResponseToFile:");
  }
  if ((v53 & 0x80000000) == 0) {
    [(CLALSRequester *)v21 setTimeoutSeconds:(double)v53];
  }
  int v23 = *(_DWORD *)(a1 + 472);
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 16))(&qword_10247C7E8);
  ++dword_10247C818;
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 24))(&qword_10247C7E8);
  unsigned int v24 = [(CLALSRequester *)v21 uploadPayloadSize];
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 16))(&qword_10247C7E8);
  dword_10247C810 += v24;
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 24))(&qword_10247C7E8);
  sub_100134750(buf, "queryLocation");
  sub_100D3B360((uint64_t)&qword_10247C7E8, (uint64_t *)buf, v23);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BF550);
  }
  int v25 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *(void *)(a2 + 4);
    uint64_t v27 = *(void *)(a2 + 12);
    id v28 = [(CLALSRequester *)v21 uploadPayloadSize];
    id v29 = sub_100636018(v5);
    *(_DWORD *)long long buf = 67110658;
    *(_DWORD *)&uint8_t buf[4] = v22;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = v26;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v27;
    __int16 v70 = 1024;
    *(_DWORD *)char v71 = v53;
    *(_WORD *)&v71[4] = 2048;
    *(void *)&v71[6] = v28;
    __int16 v72 = 1024;
    int v73 = v23;
    __int16 v74 = 2114;
    id v75 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "query: queryLocation, tag, %d, location, %14.8lf, %14.8lf, timeout, %d, payload, %lu, reachability, %d, bands, %{public}@", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF550);
    }
    uint64_t v41 = *(void *)(a2 + 4);
    uint64_t v42 = *(void *)(a2 + 12);
    id v43 = [(CLALSRequester *)v21 uploadPayloadSize];
    id v44 = sub_100636018(v5);
    int v60 = 67110658;
    *(_DWORD *)__int16 v61 = v22;
    *(_WORD *)&v61[4] = 2048;
    *(void *)&v61[6] = v41;
    *(_WORD *)&v61[14] = 2048;
    *(void *)&v61[16] = v42;
    __int16 v62 = 1024;
    *(_DWORD *)char v63 = v53;
    *(_WORD *)&v63[4] = 2048;
    *(void *)&v63[6] = v43;
    __int16 v64 = 1024;
    int v65 = v23;
    __int16 v66 = 2114;
    id v67 = v44;
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int)", "%s\n", v45);
    if (v45 != buf) {
      free(v45);
    }
  }
  [(CLALSRequester *)v21 setNwActivityDomain:24];
  [(CLALSRequester *)v21 setNwActivityLabel:2];
  [(CLALSRequester *)v21 start];
  [*(id *)(a1 + 312) addRequesterWithOutstandingRequest:v21];
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
  }
  __int16 v30 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = v23;
    uint64_t v32 = *(void *)(a2 + 4);
    uint64_t v33 = *(void *)(a2 + 12);
    char v34 = [(NSString *)v52 UTF8String];
    int v35 = *(unsigned __int8 *)(a1 + 376);
    sub_100103240();
    int v36 = sub_10010145C();
    *(_DWORD *)long long buf = 67241731;
    *(_DWORD *)&uint8_t buf[4] = v22;
    *(_WORD *)&uint8_t buf[8] = 2049;
    *(void *)&buf[10] = v32;
    *(_WORD *)&unsigned char buf[18] = 2049;
    *(void *)&buf[20] = v33;
    __int16 v70 = 2081;
    *(void *)char v71 = v34;
    *(_WORD *)&v71[8] = 1026;
    *(_DWORD *)&unsigned char v71[10] = v35;
    __int16 v72 = 1026;
    int v23 = v31;
    int v73 = v31;
    __int16 v74 = 1026;
    LODWORD(v75) = v36;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "@AlsFlow, request, tag, %{public}d, location, %{private}0.2lf, %{private}0.2lf, server, %{private}s, override, %{public}d, reach, %{public}d, watch, %{public}d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    uint64_t v46 = *(void *)(a2 + 4);
    uint64_t v47 = *(void *)(a2 + 12);
    int v48 = [(NSString *)v52 UTF8String];
    int v49 = *(unsigned __int8 *)(a1 + 376);
    sub_100103240();
    int v50 = sub_10010145C();
    int v60 = 67241731;
    *(_DWORD *)__int16 v61 = v22;
    *(_WORD *)&v61[4] = 2049;
    *(void *)&v61[6] = v46;
    *(_WORD *)&v61[14] = 2049;
    *(void *)&v61[16] = v47;
    __int16 v62 = 2081;
    *(void *)char v63 = v48;
    *(_WORD *)&uint8_t v63[8] = 1026;
    *(_DWORD *)&v63[10] = v49;
    __int16 v64 = 1026;
    int v65 = v23;
    __int16 v66 = 1026;
    LODWORD(v67) = v50;
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int)", "%s\n", v51);
    if (v51 != buf) {
      free(v51);
    }
  }
  AnalyticsSendEventLazy();

  sub_10013F3C4(v55);
  return v22;
}

void sub_100635FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
}

id sub_100636018(void *a1)
{
  id v2 = +[NSMutableArray array];
  if ([a1 wifiBandsCount])
  {
    unint64_t v3 = 0;
    do
      [v2 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)objc_msgSend(a1, "wifiBands") + v3++)) stringValue]];
    while (v3 < (unint64_t)[a1 wifiBandsCount]);
  }

  return [v2 componentsJoinedByString:@", "];
}

NSDictionary *__cdecl sub_1006360B8(id a1)
{
  return (NSDictionary *)&off_1023971F8;
}

uint64_t sub_1006360C4(uint64_t a1, void *a2, void *a3, uint64_t *a4, void *a5, void *a6, void *a7, int *a8, int a9)
{
  id v11 = sub_100636CEC(a1, a2, a3, a4, a5, a6, a7, a8);
  if (a7[1] != *a7)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    uint64_t v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v13 = [(ALSLocationRequest *)v11 wirelessAPsCount];
      uint64_t v14 = (uint64_t)(a7[1] - *a7) >> 3;
      *(_DWORD *)long long buf = 134349824;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v14;
      *(_WORD *)&unsigned char buf[22] = 1026;
      *(_DWORD *)&unsigned char buf[24] = [(ALSLocationRequest *)v11 numberOfSurroundingWifis];
      *(_WORD *)&unsigned char buf[28] = 1026;
      LODWORD(v73) = 1000;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "AlsWifi, tx, %{public}lu, %{public}lu, surronding, %{public}d, max, %{public}d", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
      }
      unint64_t v54 = [(ALSLocationRequest *)v11 wirelessAPsCount];
      long long v57 = a7;
      uint64_t v55 = *a7;
      uint64_t v56 = v57[1];
      int v65 = 134349824;
      *(void *)__int16 v66 = v54;
      *(_WORD *)&v66[8] = 2050;
      *(void *)&v66[10] = (v56 - v55) >> 3;
      *(_WORD *)&v66[18] = 1026;
      *(_DWORD *)&v66[20] = [(ALSLocationRequest *)v11 numberOfSurroundingWifis];
      *(_WORD *)&v66[24] = 1026;
      LODWORD(v67) = 1000;
      long long v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v58);
      if (v58 != buf) {
        free(v58);
      }
    }
  }
  if (*(unsigned char *)(a1 + 376))
  {
    uint64_t v15 = (void *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    char v16 = +[NSString stringWithUTF8String:v15];
  }
  else
  {
    id v17 = +[GEOCountryConfiguration sharedConfiguration];
    id v18 = (void *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0) {
      id v18 = (void *)*v18;
    }
    char v16 = (NSString *)[v17 defaultForKey:@"CLAppleLocationServer" defaultValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18)];
  }
  int v19 = v16;
  int v20 = -[CLALSRequester initWithURL:delegate:queue:]([CLALSRequester alloc], "initWithURL:delegate:queue:", +[NSURL URLWithString:](NSURL, "URLWithString:", v16), *(void *)(a1 + 312), [objc_msgSend(objc_msgSend(*(id *)(a1 + 304), "silo"), "operationQueue")]);
  int v21 = *(_DWORD *)(a1 + 472);
  unsigned int v22 = *(_DWORD *)(a1 + 344);
  *(_DWORD *)(a1 + 344) = v22 + 1;
  unsigned int v63 = v22;
  -[CLALSRequester setTag:](v20, "setTag:");
  [(CLALSRequester *)v20 setType:0];
  [(CLALSRequester *)v20 setTimestamp:CFAbsoluteTimeGetCurrent()];
  [(CLALSRequester *)v20 setTimeoutSeconds:(double)*(int *)(a1 + 320)];
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
  }
  int v23 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v24 = [(NSString *)v19 UTF8String];
    int v25 = *(unsigned __int8 *)(a1 + 376);
    sub_100103240();
    int v26 = sub_10010145C();
    *(_DWORD *)long long buf = 136381699;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v63;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v25;
    *(_WORD *)&unsigned char buf[24] = 1026;
    *(_DWORD *)&buf[26] = v21;
    LOWORD(v73) = 1026;
    *(_DWORD *)((char *)&v73 + 2) = v26;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "@AlsFlow, server, %{private}s, tag, %{public}d, override, %{public}d, reach, %{public}d, watch, %{public}d", buf, 0x24u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    uint64_t v42 = [(NSString *)v19 UTF8String];
    int v43 = *(unsigned __int8 *)(a1 + 376);
    sub_100103240();
    int v65 = 136381699;
    *(void *)__int16 v66 = v42;
    *(_WORD *)&v66[8] = 1026;
    *(_DWORD *)&v66[10] = v63;
    *(_WORD *)&v66[14] = 1026;
    *(_DWORD *)&v66[16] = v43;
    *(_WORD *)&v66[20] = 1026;
    *(_DWORD *)&v66[22] = v21;
    LOWORD(v67) = 1026;
    *(_DWORD *)((char *)&v67 + 2) = sub_10010145C();
    id v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v44);
    if (v44 != buf) {
      free(v44);
    }
  }
  sub_1000E9354(v64);
  sub_1004D34AC((uint64_t)v64, "Connection", "close");
  [(CLALSRequester *)v20 setHttpRequestHeaders:sub_1000E9358((uint64_t)v64)];
  [(CLALSRequester *)v20 addRequest:v11];
  if (*(void *)(a1 + 328)) {
    -[CLALSRequester setLogRequestToFile:](v20, "setLogRequestToFile:");
  }
  if (*(void *)(a1 + 336)) {
    -[CLALSRequester setLogResponseToFile:](v20, "setLogResponseToFile:");
  }
  if ((a9 & 0x80000000) == 0) {
    [(CLALSRequester *)v20 setTimeoutSeconds:(double)a9];
  }
  [(CLALSRequester *)v20 setNwActivityDomain:24];
  [(CLALSRequester *)v20 setNwActivityLabel:1];
  [(CLALSRequester *)v20 start];
  [*(id *)(a1 + 312) addRequesterWithOutstandingRequest:v20];
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 16))(&qword_10247C7E8);
  ++dword_10247C818;
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 24))(&qword_10247C7E8);
  unsigned int v27 = [(CLALSRequester *)v20 uploadPayloadSize];
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 16))(&qword_10247C7E8);
  dword_10247C810 += v27;
  (*(void (**)(uint64_t *))(qword_10247C7E8 + 24))(&qword_10247C7E8);
  sub_100134750(buf, "unifiedQuery");
  sub_100D3B360((uint64_t)&qword_10247C7E8, (uint64_t *)buf, v21);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if ([(ALSLocationRequest *)v11 wirelessAPsCount])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    id v28 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v29 = [(ALSLocationRequest *)v11 wirelessAPsCount];
      signed int v30 = [(ALSLocationRequest *)v11 numberOfSurroundingWifis];
      id v31 = sub_100639494(v11);
      *(_DWORD *)long long buf = 67240962;
      *(_DWORD *)&uint8_t buf[4] = v63;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v29;
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v30;
      *(_WORD *)&unsigned char buf[28] = 2114;
      unint64_t v73 = (unint64_t)v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "@AlsFlow, request, tag, %{public}d, wifi, %{public}lu, surrounding, %{public}lu, bands, %{public}@", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
      }
      unint64_t v59 = [(ALSLocationRequest *)v11 wirelessAPsCount];
      signed int v60 = [(ALSLocationRequest *)v11 numberOfSurroundingWifis];
      id v61 = sub_100639494(v11);
      int v65 = 67240962;
      *(_DWORD *)__int16 v66 = v63;
      *(_WORD *)&v66[4] = 2050;
      *(void *)&v66[6] = v59;
      *(_WORD *)&v66[14] = 2050;
      *(void *)&v66[16] = v60;
      *(_WORD *)&v66[24] = 2114;
      unint64_t v67 = (unint64_t)v61;
      __int16 v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v62);
      if (v62 != buf) {
        free(v62);
      }
    }
  }
  if ([(ALSLocationRequest *)v11 cellTowersCount]
    || [(ALSLocationRequest *)v11 lteCellTowersCount]
    || [(ALSLocationRequest *)v11 cdmaCellTowersCount]
    || [(ALSLocationRequest *)v11 nr5GCellTowersCount])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    uint64_t v32 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v33 = [(ALSLocationRequest *)v11 cellTowersCount];
      unint64_t v34 = [(ALSLocationRequest *)v11 lteCellTowersCount];
      unint64_t v35 = [(ALSLocationRequest *)v11 cdmaCellTowersCount];
      unint64_t v36 = [(ALSLocationRequest *)v11 nr5GCellTowersCount];
      unsigned int v37 = [(ALSLocationRequest *)v11 numberOfSurroundingCells];
      unsigned int v38 = [(ALSLocationRequest *)v11 numberOfSurroundingCdmaCells];
      unsigned int v39 = [(ALSLocationRequest *)v11 numberOfSurroundingLteCells];
      unsigned int v40 = [(ALSLocationRequest *)v11 numberOfSurroundingNr5GCells];
      *(_DWORD *)long long buf = 67241472;
      *(_DWORD *)&uint8_t buf[4] = v63;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v33;
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v34;
      *(_WORD *)&unsigned char buf[28] = 2050;
      unint64_t v73 = v35;
      __int16 v74 = 2050;
      unint64_t v75 = v36;
      __int16 v76 = 2050;
      uint64_t v77 = (int)(v38 + v37 + v39 + v40);
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "@AlsFlow, request, tag, %{public}d, cell, gsm, %{public}lu, lte, %{public}lu, cdma, %{public}lu, nr, %{public}lu, surrounding, %{public}lu", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
      }
      unint64_t v45 = [(ALSLocationRequest *)v11 cellTowersCount];
      unint64_t v46 = [(ALSLocationRequest *)v11 lteCellTowersCount];
      unint64_t v47 = [(ALSLocationRequest *)v11 cdmaCellTowersCount];
      unint64_t v48 = [(ALSLocationRequest *)v11 nr5GCellTowersCount];
      unsigned int v49 = [(ALSLocationRequest *)v11 numberOfSurroundingCells];
      unsigned int v50 = [(ALSLocationRequest *)v11 numberOfSurroundingCdmaCells];
      unsigned int v51 = [(ALSLocationRequest *)v11 numberOfSurroundingLteCells];
      unsigned int v52 = [(ALSLocationRequest *)v11 numberOfSurroundingNr5GCells];
      int v65 = 67241472;
      *(_DWORD *)__int16 v66 = v63;
      *(_WORD *)&v66[4] = 2050;
      *(void *)&v66[6] = v45;
      *(_WORD *)&v66[14] = 2050;
      *(void *)&v66[16] = v46;
      *(_WORD *)&v66[24] = 2050;
      unint64_t v67 = v47;
      __int16 v68 = 2050;
      unint64_t v69 = v48;
      __int16 v70 = 2050;
      uint64_t v71 = (int)(v50 + v49 + v51 + v52);
      int v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v53);
      if (v53 != buf) {
        free(v53);
      }
    }
  }
  AnalyticsSendEventLazy();

  sub_10013F3C4(v64);
  return v63;
}

void sub_100636C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

ALSLocationRequest *sub_100636CEC(uint64_t a1, void *a2, void *a3, uint64_t *a4, void *a5, void *a6, void *a7, int *a8)
{
  __int16 v140 = sub_1014CA9E4();
  v135 = a4;
  __int16 v138 = a3;
  __int16 v139 = a2;
  __int16 v136 = a6;
  v137 = a5;
  if (0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4)
     + ((uint64_t)(a2[1] - *a2) >> 5)
     + ((uint64_t)(a3[1] - *a3) >> 5)
     + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a5[1] - *a5) >> 3) != 0x5555555555555555 * ((uint64_t)(a6[1] - *a6) >> 5))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
    }
    unint64_t v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v14 = 0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4);
      uint64_t v15 = (uint64_t)(a2[1] - *a2) >> 5;
      uint64_t v16 = (uint64_t)(a3[1] - *a3) >> 5;
      uint64_t v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v137[1] - *v137) >> 3);
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134350336;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v14;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v15;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      uint64_t v152 = v16;
      __int16 v153 = 2050;
      uint64_t v154 = v17;
      __int16 v155 = 2050;
      unint64_t v156 = v18;
      __int16 v157 = 1026;
      int v158 = 100;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AlsCell, query, cdma, %{public}lu, gsm, %{public}lu, scdma, %{public}lu, lte, %{public}lu, nr, %{public}lu, max, %{public}d", (uint8_t *)&buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
      }
      unint64_t v126 = 0x84BDA12F684BDA13 * ((a4[1] - *a4) >> 4);
      uint64_t v127 = (uint64_t)(a2[1] - *a2) >> 5;
      uint64_t v128 = (uint64_t)(a3[1] - *a3) >> 5;
      uint64_t v129 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v137[1] - *v137) >> 3);
      unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 5);
      LODWORD(v143.__r_.__value_.__l.__data_) = 134350336;
      *(std::string::size_type *)((char *)v143.__r_.__value_.__r.__words + 4) = v126;
      WORD2(v143.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 6) = v127;
      HIWORD(v143.__r_.__value_.__r.__words[2]) = 2050;
      uint64_t v144 = v128;
      __int16 v145 = 2050;
      uint64_t v146 = v129;
      __int16 v147 = 2050;
      unint64_t v148 = v130;
      __int16 v149 = 1026;
      int v150 = 100;
      __int16 v131 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v131);
      if (v131 != &buf) {
        free(v131);
      }
    }
  }
  if (a4[1] != *a4)
  {
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    do
    {
      if (v20 > 0x63)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        unsigned int v37 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100639778(*v135 + 432 * v19, &buf);
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v20;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_buf;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "AlsCell, cdma, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100639778(*v135 + 432 * v19, &v143);
          unsigned int v39 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unsigned int v39 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v20;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v39;
          unsigned int v40 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v40);
          if (v40 != &buf) {
            free(v40);
          }
        }
      }
      else
      {
        int v21 = objc_alloc_init(ALSCdmaCellTower);
        uint64_t v22 = *v135;
        int v23 = (unsigned int *)(*v135 + 432 * v19);
        [(ALSCdmaCellTower *)v21 setSid:v23[8]];
        [(ALSCdmaCellTower *)v21 setNid:*(unsigned int *)(v22 + 432 * v19 + 36)];
        [(ALSCdmaCellTower *)v21 setBsid:*(unsigned int *)(v22 + 432 * v19 + 44)];
        [(ALSCdmaCellTower *)v21 setZoneid:*(unsigned int *)(v22 + 432 * v19 + 40)];
        [(ALSCdmaCellTower *)v21 setBandclass:*(unsigned int *)(v22 + 432 * v19 + 48)];
        [(ALSCdmaCellTower *)v21 setChannel:*(unsigned int *)(v22 + 432 * v19 + 52)];
        [(ALSCdmaCellTower *)v21 setPnoffset:*(unsigned int *)(v22 + 432 * v19 + 56)];
        uint64_t v24 = v22 + 432 * v19;
        unsigned int v27 = *(unsigned int **)(v24 + 8);
        int v26 = (void *)(v24 + 8);
        int v25 = v27;
        id v28 = v26 + 1;
        if ((unsigned int *)v26[1] == v27)
        {
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BF530);
          }
          unint64_t v29 = qword_1024195F8;
          if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v30 = *v23;
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v30;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning query: don't have derivedMcc - using %d", (uint8_t *)&buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024195F0 != -1) {
              dispatch_once(&qword_1024195F0, &stru_1022BF530);
            }
            unsigned int v47 = *v23;
            LODWORD(v143.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v143.__r_.__value_.__r.__words[0]) = v47;
            unint64_t v48 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v48);
            if (v48 != &buf) {
              free(v48);
            }
          }
          int v25 = v23;
        }
        [(ALSCdmaCellTower *)v21 setMcc:*v25];
        if (*v26 == *v28)
        {
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022BF530);
          }
          uint64_t v41 = qword_1024195F8;
          if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v42 = [(ALSCdmaCellTower *)v21 mcc];
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v42;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "query: Adding single derivedMcc %d", (uint8_t *)&buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024195F0 != -1) {
              dispatch_once(&qword_1024195F0, &stru_1022BF530);
            }
            unsigned int v49 = [(ALSCdmaCellTower *)v21 mcc];
            LODWORD(v143.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v143.__r_.__value_.__r.__words[0]) = v49;
            unsigned int v50 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v50);
            if (v50 != &buf) {
              free(v50);
            }
          }
          [(ALSLocationRequest *)v140 addCdmaCellTower:v21];
        }
        else
        {
          unint64_t v31 = 0;
          do
          {
            uint64_t v32 = objc_alloc_init(ALSCdmaCellTower);
            [(ALSCdmaCellTower *)v32 setSid:[(ALSCdmaCellTower *)v21 sid]];
            [(ALSCdmaCellTower *)v32 setNid:[(ALSCdmaCellTower *)v21 nid]];
            [(ALSCdmaCellTower *)v32 setBsid:[(ALSCdmaCellTower *)v21 bsid]];
            [(ALSCdmaCellTower *)v32 setZoneid:[(ALSCdmaCellTower *)v21 zoneid]];
            [(ALSCdmaCellTower *)v32 setBandclass:[(ALSCdmaCellTower *)v21 bandclass]];
            [(ALSCdmaCellTower *)v32 setChannel:[(ALSCdmaCellTower *)v21 channel]];
            [(ALSCdmaCellTower *)v32 setPnoffset:[(ALSCdmaCellTower *)v21 pnoffset]];
            [(ALSCdmaCellTower *)v32 setMcc:*(unsigned int *)(*v26 + 4 * v31)];
            if (qword_1024195F0 != -1) {
              dispatch_once(&qword_1024195F0, &stru_1022BF530);
            }
            unint64_t v33 = qword_1024195F8;
            if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v34 = [(ALSCdmaCellTower *)v32 mcc];
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "query: Adding multi derivedMcc %d", (uint8_t *)&buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1024195F0 != -1) {
                dispatch_once(&qword_1024195F0, &stru_1022BF530);
              }
              unsigned int v35 = [(ALSCdmaCellTower *)v32 mcc];
              LODWORD(v143.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v143.__r_.__value_.__r.__words[0]) = v35;
              unint64_t v36 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v36);
              if (v36 != &buf) {
                free(v36);
              }
            }
            [(ALSLocationRequest *)v140 addCdmaCellTower:v32];

            ++v31;
          }
          while (v31 < (uint64_t)(*v28 - *v26) >> 2);
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        int v43 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100639778(*v135 + 432 * v19, &buf);
          id v44 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            id v44 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v20;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "AlsCell, cdma, query, %{public}d, key, %{private}s", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100639778(*v135 + 432 * v19, &v143);
          unint64_t v45 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v45 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v20;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v45;
          unint64_t v46 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v46);
          if (v46 != &buf) {
            free(v46);
          }
        }
      }
      uint64_t v19 = ++v20;
    }
    while (0x84BDA12F684BDA13 * ((v135[1] - *v135) >> 4) > v20);
  }
  if (v139[1] != *v139)
  {
    unint64_t v51 = 0;
    unsigned int v52 = 1;
    do
    {
      if (v52 - 1 > 0x63)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        uint64_t v56 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100639BE8((_DWORD *)(*v139 + 32 * v51), &buf);
          long long v57 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v52 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v57;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "AlsCell, gsm, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100639BE8((_DWORD *)(*v139 + 32 * v51), &v143);
          long long v58 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v58 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v52 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v58;
          unint64_t v59 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v59);
          if (v59 != &buf) {
            free(v59);
          }
        }
      }
      else
      {
        int v53 = objc_alloc_init(ALSCellTower);
        [(ALSCellTower *)v53 setMcc:*(unsigned int *)(*v139 + 32 * v51)];
        [(ALSCellTower *)v53 setMnc:*(unsigned int *)(*v139 + 32 * v51 + 4)];
        [(ALSCellTower *)v53 setLacID:*(unsigned int *)(*v139 + 32 * v51 + 8)];
        [(ALSCellTower *)v53 setCellID:*(unsigned int *)(*v139 + 32 * v51 + 12)];
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        unint64_t v54 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100639BE8((_DWORD *)(*v139 + 32 * v51), &buf);
          uint64_t v55 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v52 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v55;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "AlsCell, gsm, query, %{public}d, key, %{private}s", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100639BE8((_DWORD *)(*v139 + 32 * v51), &v143);
          signed int v60 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            signed int v60 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v52 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v60;
          id v61 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v61);
          if (v61 != &buf) {
            free(v61);
          }
        }
        [(ALSLocationRequest *)v140 addCellTower:v53];
      }
      unint64_t v51 = v52++;
    }
    while (v51 < (uint64_t)(v139[1] - *v139) >> 5);
  }
  if (v138[1] != *v138)
  {
    unint64_t v62 = 0;
    unsigned int v63 = 1;
    do
    {
      if (v63 - 1 > 0x63)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        unint64_t v67 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100639BE8((_DWORD *)(*v138 + 32 * v62), &buf);
          __int16 v68 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v63 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v68;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "AlsCell. scdma, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100639BE8((_DWORD *)(*v138 + 32 * v62), &v143);
          unint64_t v69 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v69 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v63 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v69;
          __int16 v70 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v70);
          if (v70 != &buf) {
            free(v70);
          }
        }
      }
      else
      {
        __int16 v64 = objc_alloc_init(ALSScdmaCellTower);
        [(ALSScdmaCellTower *)v64 setMcc:*(unsigned int *)(*v138 + 32 * v62)];
        [(ALSScdmaCellTower *)v64 setMnc:*(unsigned int *)(*v138 + 32 * v62 + 4)];
        [(ALSScdmaCellTower *)v64 setLacID:*(unsigned int *)(*v138 + 32 * v62 + 8)];
        [(ALSScdmaCellTower *)v64 setCellID:*(unsigned int *)(*v138 + 32 * v62 + 12)];
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        int v65 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100639BE8((_DWORD *)(*v138 + 32 * v62), &buf);
          __int16 v66 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v63 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v66;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "AlsCell, scdma, query, %{public}d, key, %{private}s", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100639BE8((_DWORD *)(*v138 + 32 * v62), &v143);
          uint64_t v71 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v71 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v63 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v71;
          __int16 v72 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v72);
          if (v72 != &buf) {
            free(v72);
          }
        }
        [(ALSLocationRequest *)v140 addScdmaCellTower:v64];
      }
      unint64_t v62 = v63++;
    }
    while (v62 < (uint64_t)(v138[1] - *v138) >> 5);
  }
  if (v137[1] != *v137)
  {
    uint64_t v73 = 0;
    unsigned int v74 = 1;
    do
    {
      if (v74 - 1 > 0x63)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        long long v78 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000AAEBC(&buf);
          unsigned int v79 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v74 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v79;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "AlsCell. lte, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_1000AAEBC(&v143);
          uint64_t v81 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v81 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v74 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v81;
          uint64_t v82 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v82);
          if (v82 != &buf) {
            free(v82);
          }
        }
      }
      else
      {
        unint64_t v75 = objc_alloc_init(ALSLteCellTower);
        [(ALSLteCellTower *)v75 setMcc:*(unsigned int *)(*v137 + 88 * v73)];
        [(ALSLteCellTower *)v75 setMnc:*(unsigned int *)(*v137 + 88 * v73 + 4)];
        [(ALSLteCellTower *)v75 setTacID:*(unsigned int *)(*v137 + 88 * v73 + 8)];
        [(ALSLteCellTower *)v75 setCellID:*(unsigned int *)(*v137 + 88 * v73 + 12)];
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        __int16 v76 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_10010F0A4();
          uint64_t v77 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v74 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v77;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "AlsCell, lte, query, %{public}d, key, %{private}s", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_10010F0A4();
          int v83 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v83 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v74 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v83;
          unint64_t v84 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v84);
          if (v84 != &buf) {
            free(v84);
          }
        }
        [(ALSLocationRequest *)v140 addLteCellTower:v75];
      }
      uint64_t v73 = v74;
      BOOL v80 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v137[1] - *v137) >> 3) > (unint64_t)v74++;
    }
    while (v80);
  }
  if (v136[1] != *v136)
  {
    uint64_t v85 = 0;
    unsigned int v86 = 1;
    do
    {
      if (v86 - 1 > 0x63)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        int v90 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100614EB8(&buf);
          __int16 v91 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v86 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v91;
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "AlsCell. nr, dropping, %{public}u, key, %{private}s, #CloneMe", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100614EB8(&v143);
          char v92 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v92 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v86 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v92;
          __int16 v93 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v93);
          if (v93 != &buf) {
            free(v93);
          }
        }
      }
      else
      {
        uint64_t v87 = objc_alloc_init(ALSNr5GCellTower);
        [(ALSNr5GCellTower *)v87 setMcc:*(unsigned int *)(*v136 + 96 * v85)];
        [(ALSNr5GCellTower *)v87 setMnc:*(unsigned int *)(*v136 + 96 * v85 + 4)];
        [(ALSNr5GCellTower *)v87 setTacID:*(unsigned int *)(*v136 + 96 * v85 + 8)];
        [(ALSNr5GCellTower *)v87 setCellID:*(void *)(*v136 + 96 * v85 + 16)];
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        uint64_t v88 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100631600();
          char v89 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(v143.__r_.__value_.__r.__words[0]) = v86 - 1;
          LOWORD(v143.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v143.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v89;
          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "AlsCell, nr, query, %{public}d, key, %{private}s", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100631600();
          unsigned int v94 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unsigned int v94 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 67240451;
          *(_DWORD *)&v142[4] = v86 - 1;
          *(_WORD *)&v142[8] = 2081;
          *(void *)&v142[10] = v94;
          unsigned int v95 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v95);
          if (v95 != &buf) {
            free(v95);
          }
        }
        [(ALSLocationRequest *)v140 addNr5GCellTower:v87];
      }
      uint64_t v85 = v86;
      BOOL v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136[1] - *v136) >> 5) > v86++;
    }
    while (v80);
  }
  sub_100103240();
  if (sub_1001073D0()) {
    uint64_t v96 = *(unsigned int *)(a1 + 296);
  }
  else {
    uint64_t v96 = 0;
  }
  [(ALSLocationRequest *)v140 setNumberOfSurroundingCells:v96];
  if (a7[1] != *a7)
  {
    unsigned int v97 = 1;
    do
    {
      if (v97 - 1 > 0x3E7)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        uint64_t v103 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278(&buf);
          __int16 v104 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &buf
               : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)v143.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
          WORD2(v143.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&v143.__r_.__value_.__r.__words[1] + 6) = v97 - 1;
          _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "AlsWifi, dropping, %{private}s, %{public}u, #CloneMe", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100B39278(&v143);
          char v108 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v108 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 136380931;
          *(void *)&v142[4] = v108;
          *(_WORD *)&v142[12] = 1026;
          *(_DWORD *)&v142[14] = v97 - 1;
          std::string v109 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v109);
          if (v109 != &buf) {
            free(v109);
          }
        }
      }
      else
      {
        unsigned int v98 = objc_alloc_init(ALSWirelessAP);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
        }
        unsigned int v99 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100B39278(&buf);
          unsigned int v100 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &buf
               : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v143.__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)v143.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
          WORD2(v143.__r_.__value_.__r.__words[1]) = 1026;
          *(_DWORD *)((char *)&v143.__r_.__value_.__r.__words[1] + 6) = v97 - 1;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "AlsWifi, query, %{private}s, %{public}d", (uint8_t *)&v143, 0x12u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF4C8);
          }
          sub_100B39278(&v143);
          char v106 = &v143;
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v106 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v142 = 136380931;
          *(void *)&v142[4] = v106;
          *(_WORD *)&v142[12] = 1026;
          *(_DWORD *)&v142[14] = v97 - 1;
          std::string v107 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "ALSLocationRequest *CLNetworkLocationRequesterALS::createUnifiedQueryRequest(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &)", "%s\n", (const char *)v107);
          if (v107 != &buf) {
            free(v107);
          }
        }
        sub_10006DE8C(&buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v101 = &buf;
        }
        else {
          long long v101 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        CFStringRef v102 = sub_1000B73E0((char *)v101);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        [(ALSWirelessAP *)v98 setMacID:v102];
        CFRelease(v102);
        [(ALSLocationRequest *)v140 addWirelessAP:v98];
      }
      unint64_t v105 = v97++;
    }
    while (v105 < (uint64_t)(a7[1] - *a7) >> 3);
  }
  int v110 = *a8;
  memset(&buf, 0, sizeof(buf));
  if (v110 == 3)
  {
    double v113 = operator new(4uLL);
    *double v113 = 1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v113 + 1);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v113 + 1);
    uint64_t v115 = sub_10017EA34((uint64_t)&buf.__r_.__value_.__r.__words[2], 2uLL);
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    char v116 = (void *)buf.__r_.__value_.__r.__words[0];
    v115[1] = 2;
    std::string v111 = v115 + 1;
    char v118 = v115 + 2;
    while ((void *)size != v116)
    {
      unsigned int v119 = *(_DWORD *)(size - 4);
      size -= 4;
      *--std::string v111 = v119;
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v115 + 2);
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&v115[v114];
    if (v116)
    {
      operator delete(v116);
      std::string v111 = (unsigned int *)buf.__r_.__value_.__r.__words[0];
    }
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
    if (v111 == v118) {
      goto LABEL_301;
    }
  }
  else
  {
    if (v110 == 2)
    {
      std::string v111 = (unsigned int *)operator new(4uLL);
      int v112 = 2;
    }
    else
    {
      if (v110 != 1) {
        goto LABEL_302;
      }
      std::string v111 = (unsigned int *)operator new(4uLL);
      int v112 = 1;
    }
    *std::string v111 = v112;
    char v118 = v111 + 1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v111 + 1);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v111 + 1);
  }
  do
    [(ALSLocationRequest *)v140 addSurroundingWifiBands:*v111++];
  while (v111 != v118);
  char v118 = (unsigned int *)buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0])
  {
LABEL_301:
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v118;
    operator delete(v118);
  }
LABEL_302:
  [(ALSLocationRequest *)v140 setWifiAltitudeScale:2];
  sub_100103240();
  if ((sub_1001073D0() & 2) != 0) {
    uint64_t v120 = *(unsigned int *)(a1 + 300);
  }
  else {
    uint64_t v120 = 0;
  }
  [(ALSLocationRequest *)v140 setNumberOfSurroundingWifis:v120];
  if ([(ALSLocationRequest *)v140 wirelessAPsCount]) {
    sub_100AC22F4((void *)(a1 + 392), [(ALSLocationRequest *)v140 wirelessAPsCount], [(ALSLocationRequest *)v140 numberOfSurroundingWifis]);
  }
  if ([(ALSLocationRequest *)v140 cellTowersCount]
    || [(ALSLocationRequest *)v140 lteCellTowersCount]
    || [(ALSLocationRequest *)v140 cdmaCellTowersCount]
    || [(ALSLocationRequest *)v140 nr5GCellTowersCount])
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
    unint64_t v121 = [(ALSLocationRequest *)v140 cellTowersCount];
    sub_100AC2410(&v143);
    *(void *)__int16 v142 = &v143;
    *((void *)sub_1002A196C((uint64_t **)&buf, (const void **)&v143.__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (_OWORD **)v142)+ 7) = v121;
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    unint64_t v122 = [(ALSLocationRequest *)v140 cdmaCellTowersCount];
    sub_100AC2420(&v143);
    *(void *)__int16 v142 = &v143;
    *((void *)sub_1002A196C((uint64_t **)&buf, (const void **)&v143.__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (_OWORD **)v142)+ 7) = v122;
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    unint64_t v123 = [(ALSLocationRequest *)v140 lteCellTowersCount];
    sub_100AC2430(&v143);
    *(void *)__int16 v142 = &v143;
    *((void *)sub_1002A196C((uint64_t **)&buf, (const void **)&v143.__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (_OWORD **)v142)+ 7) = v123;
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    unint64_t v124 = [(ALSLocationRequest *)v140 nr5GCellTowersCount];
    sub_100AC2440(&v143);
    *(void *)__int16 v142 = &v143;
    *((void *)sub_1002A196C((uint64_t **)&buf, (const void **)&v143.__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (_OWORD **)v142)+ 7) = v124;
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    std::string v141 = buf;
    if (buf.__r_.__value_.__r.__words[2])
    {
      *(void *)(buf.__r_.__value_.__l.__size_ + 16) = &v141.__r_.__value_.__l.__size_;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141.__r_.__value_.__l.__size_;
    }
    sub_100AC1E3C(a1 + 392, &v141, [(ALSLocationRequest *)v140 numberOfSurroundingWifis]);
    sub_1000DB264((uint64_t)&v141, (char *)v141.__r_.__value_.__l.__size_);
    sub_1000DB264((uint64_t)&buf, (char *)buf.__r_.__value_.__l.__size_);
  }
  return v140;
}

void sub_1006393FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100639494(void *a1)
{
  id v2 = +[NSMutableArray array];
  if ([a1 surroundingWifiBandsCount])
  {
    unint64_t v3 = 0;
    do
      [v2 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)objc_msgSend(a1, "surroundingWifiBands") + v3++)) stringValue]];
    while (v3 < (unint64_t)[a1 surroundingWifiBandsCount]);
  }

  return [v2 componentsJoinedByString:@", "];
}

NSDictionary *sub_100639534(uint64_t a1)
{
  v3[0] = @"cdmaRequestCount";
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) cdmaCellTowersCount] != 0);
  v3[1] = @"cdmaTowerCount";
  v4[1] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) cdmaCellTowersCount]);
  v3[2] = @"cellRequestCount";
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) cellTowersCount] != 0);
  v3[3] = @"cellTowerCount";
  v4[3] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) cellTowersCount]);
  void v4[4] = &off_102392948;
  v3[4] = @"locationCount";
  v3[5] = @"lteRequestCount";
  void v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) lteCellTowersCount] != 0);
  v3[6] = @"lteTowerCount";
  _DWORD v4[6] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) lteCellTowersCount]);
  v3[7] = @"nr5gRequestCount";
  v4[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) nr5GCellTowersCount] != 0);
  v3[8] = @"nr5gTowerCount";
  v4[8] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) nr5GCellTowersCount]);
  v4[9] = &off_102392960;
  v3[9] = @"totalRequestCount";
  v3[10] = @"wifiAPCount";
  v4[10] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) wirelessAPsCount]);
  v3[11] = @"wifiRequestCount";
  v4[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) wirelessAPsCount] != 0);
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:12];
}

uint64_t sub_100639770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 472) = a2;
  return result;
}

uint64_t sub_100639778@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_10010F274((uint64_t)v43);
  sub_100132EFC(v44, (uint64_t)"Band Class ", 11);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)", ", 2);
  sub_100132EFC(v5, (uint64_t)"BSID ", 5);
  long long v6 = (void *)std::ostream::operator<<();
  uint64_t v7 = sub_100132EFC(v6, (uint64_t)", ", 2);
  sub_100132EFC(v7, (uint64_t)"RAT ", 4);
  uint64_t v8 = (void *)std::ostream::operator<<();
  id v9 = sub_100132EFC(v8, (uint64_t)", ", 2);
  sub_100132EFC(v9, (uint64_t)"CellType ", 9);
  id v10 = (void *)std::ostream::operator<<();
  id v11 = sub_100132EFC(v10, (uint64_t)", ", 2);
  sub_100132EFC(v11, (uint64_t)"Channel ", 8);
  uint64_t v12 = (void *)std::ostream::operator<<();
  unint64_t v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
  sub_100132EFC(v13, (uint64_t)"MCC ", 4);
  unint64_t v14 = (void *)std::ostream::operator<<();
  uint64_t v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
  sub_100132EFC(v15, (uint64_t)"MNC ", 4);
  uint64_t v16 = (void *)std::ostream::operator<<();
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
  sub_100132EFC(v17, (uint64_t)"NID ", 4);
  unint64_t v18 = (void *)std::ostream::operator<<();
  uint64_t v19 = sub_100132EFC(v18, (uint64_t)", ", 2);
  sub_100132EFC(v19, (uint64_t)"PN offset ", 10);
  unsigned int v20 = (void *)std::ostream::operator<<();
  int v21 = sub_100132EFC(v20, (uint64_t)", ", 2);
  sub_100132EFC(v21, (uint64_t)"SID ", 4);
  uint64_t v22 = (void *)std::ostream::operator<<();
  int v23 = sub_100132EFC(v22, (uint64_t)", ", 2);
  sub_100132EFC(v23, (uint64_t)"Zone ID ", 8);
  uint64_t v24 = (void *)std::ostream::operator<<();
  int v25 = sub_100132EFC(v24, (uint64_t)", ", 2);
  int v26 = sub_100132EFC(v25, (uint64_t)"Sector ID ", 10);
  int v27 = *(char *)(a1 + 263);
  if (v27 >= 0) {
    uint64_t v28 = a1 + 240;
  }
  else {
    uint64_t v28 = *(void *)(a1 + 240);
  }
  if (v27 >= 0) {
    uint64_t v29 = *(unsigned __int8 *)(a1 + 263);
  }
  else {
    uint64_t v29 = *(void *)(a1 + 248);
  }
  unsigned int v30 = sub_100132EFC(v26, v28, v29);
  unint64_t v31 = sub_100132EFC(v30, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"ltmOffset ", 10);
  uint64_t v32 = (void *)std::ostream::operator<<();
  unint64_t v33 = sub_100132EFC(v32, (uint64_t)", ", 2);
  sub_100132EFC(v33, (uint64_t)"dayLightSaving ", 15);
  unsigned int v34 = (void *)std::ostream::operator<<();
  unsigned int v35 = sub_100132EFC(v34, (uint64_t)", ", 2);
  sub_100132EFC(v35, (uint64_t)"derivedMccNum ", 14);
  unint64_t v36 = (void *)std::ostream::operator<<();
  unsigned int v37 = sub_100132EFC(v36, (uint64_t)", ", 2);
  sub_100132EFC(v37, (uint64_t)"derivedMCC ", 11);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v42 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  sub_100134750(a2, p_p);
  if (v42 < 0) {
    operator delete(__p);
  }
  *(void *)((char *)v43
  v44[0] = v39;
  if (v45 < 0) {
    operator delete((void *)v44[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100639BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_100639BE8@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  snprintf(__str, 0x40uLL, "%03d,%03d,0x%x,0x%x", *a1, a1[1], a1[2], a1[3]);
  return sub_100134750(a2, __str);
}

uint64_t sub_100639C6C(uint64_t a1)
{
  return sub_100AC1310((void *)(a1 + 392));
}

void sub_100639C74(uint64_t a1)
{
}

uint64_t sub_100639C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*(void *)a1 + 24))(a1, a2, a1 + 32, a1 + 56, a1 + 80, a1 + 104, a3, a4, a5);
}

void sub_100639CDC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  long long v6 = *(void **)(a1 + 160);
  if (v6)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10063A430;
    v8[3] = &unk_1022BB368;
    void v8[4] = a1;
    void v8[5] = a2;
    void v8[6] = a3;
    int v9 = a4;
    int v10 = a5;
    [v6 async:v8];
  }
  else
  {
    uint64_t v7 = (void *)sub_101A68600();
    sub_100639D60(v7);
  }
}

void sub_100639D60(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100639D90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void (**)(void, uint64_t, void, void, void))(v2 + 168);
  if (v3) {
    v3(*(void *)(a1 + 40), 1, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(void *)(v2 + 152));
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v2 + 168);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 48);
    uint64_t v7 = *(unsigned int *)(a1 + 52);
    uint64_t v8 = *(void *)(v2 + 152);
    return v5(v2, 0, v6, v7, v8);
  }
  return result;
}

void sub_100639E14(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100639E44(id a1)
{
  qword_1024195F8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

uint64_t sub_100639E74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v3 = *(uint64_t (**)(uint64_t, void, void, void))(result + 224);
  if (v3) {
    return v3(result, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_100639E94(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v3 = *(uint64_t (**)(uint64_t, void, void, void))(result + 232);
  if (v3) {
    return v3(result, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(void *)(result + 152));
  }
  return result;
}

void sub_100639EB4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100639EE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v3 = *(uint64_t (**)(uint64_t, void, void, void))(result + 240);
  if (v3) {
    return v3(result, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_100639F04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, void))(result + 208);
  if (v3) {
    return v3(result, a1 + 40, a1 + 64, *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), *(unsigned int *)(a1 + 96), *(void *)(result + 152));
  }
  return result;
}

void *sub_100639F30(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_1000E39FC(a1 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  return sub_1000E39FC(a1 + 8, *(const void **)(a2 + 64), *(void *)(a2 + 72), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
}

void sub_100639FB4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100639FD0(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

uint64_t sub_10063A028()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BF550);
  }
  uint64_t v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unimplemented CDMA NetworkLocationRequester", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF550);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLNetworkLocationRequester::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLTelephonyService_Type::NrCell> &, const std::vector<CLMacAddress> &, const CLNetworkLocationRequest_Type::CLNetworkLocationRequestConfig &, int)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_10063A1B4()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BF550);
  }
  uint64_t v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "nearby data query not supported", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF550);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLNetworkLocationRequester::queryLocation(const CLDaemonLocation &, int)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_10063A340(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 432;
        sub_10063A3D8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10063A3D8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 263) < 0) {
    operator delete(*(void **)(a2 + 240));
  }
  unint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t sub_10063A430(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v3 = *(uint64_t (**)(uint64_t, void, void, void, void, void))(result + 216);
  if (v3) {
    return v3(result, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void *)(result + 152));
  }
  return result;
}

uint64_t sub_10063A454()
{
  qword_10248A140 = (uint64_t)[@"k2dot4GHZ" UTF8String];
  qword_10248A148 = (uint64_t)[@"k2dot4GHZ" UTF8String];
  sub_100D3B35C(&qword_10247C7E8, "ALS");

  return __cxa_atexit((void (*)(void *))sub_10062E6D4, &qword_10247C7E8, (void *)&_mh_execute_header);
}

void sub_10063A4DC(double *a1, double a2, double a3, double a4, double a5)
{
  if (a5 >= 0.0) {
    double v5 = a5;
  }
  else {
    double v5 = 0.0;
  }
  if (a1[8] > v5)
  {
    double v7 = a1[2];
    if (v7 < a2) {
      a2 = a1[2];
    }
    if (a2 >= a1[3]) {
      double v8 = a2;
    }
    else {
      double v8 = a1[3];
    }
    double v9 = *a1;
    if (*a1 > a4) {
      a4 = *a1;
    }
    if (a1[1] <= a3) {
      double v10 = a3;
    }
    else {
      double v10 = a1[1];
    }
    exp(-(a4 - v9) / a1[4]);
    exp(-(v10 - v9) / a1[5]);
    double v11 = -(v7 - v8);
    double v12 = a1[6];
    double v13 = a1[9];
    double v14 = v11 / v12;
    if (v13 <= v5)
    {
      exp(-(v5 - v13) / a1[7]);
      exp(v14);
    }
    else
    {
      exp(v11 / v12);
    }
  }
}

double sub_10063A5EC(uint64_t *a1, double a2)
{
  if (*a1 == a1[1])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    unsigned int v34 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, empty accessPointWithWeights", buf, 2u);
    }
    double v32 = -1.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      LOWORD(v55) = 0;
      unsigned int v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
      *(_DWORD *)std::string buf = 67174657;
      LODWORD(v64) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, num accessPointWithWeights, %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      int v46 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
      int v55 = 67174657;
      LODWORD(v56) = v46;
      unsigned int v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    std::string __p = 0;
    int v53 = 0;
    unint64_t v54 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    if (*a1 == v7) {
      goto LABEL_38;
    }
    double v8 = 0;
    do
    {
      if (*(float *)(v6 + 84) > 0.0)
      {
        if (v8 >= v54)
        {
          double v13 = __p;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (char *)__p) >> 5);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v54 - (char *)__p) >> 5) > v15) {
            unint64_t v15 = 0x5555555555555556 * ((v54 - (char *)__p) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v54 - (char *)__p) >> 5) >= 0x155555555555555) {
            unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            uint64_t v17 = (char *)sub_100642EA8((uint64_t)&v54, v16);
            double v13 = __p;
            double v8 = v53;
          }
          else
          {
            uint64_t v17 = 0;
          }
          unint64_t v18 = &v17[96 * v14];
          long long v19 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v6;
          *((_OWORD *)v18 + 1) = v19;
          long long v20 = *(_OWORD *)(v6 + 32);
          long long v21 = *(_OWORD *)(v6 + 48);
          long long v22 = *(_OWORD *)(v6 + 80);
          *((_OWORD *)v18 + 4) = *(_OWORD *)(v6 + 64);
          *((_OWORD *)v18 + 5) = v22;
          *((_OWORD *)v18 + 2) = v20;
          *((_OWORD *)v18 + 3) = v21;
          if (v8 == (char *)v13)
          {
            uint64_t v28 = (double *)&v17[96 * v14];
          }
          else
          {
            int v23 = &v17[96 * v14];
            do
            {
              long long v24 = *((_OWORD *)v8 - 5);
              *((_OWORD *)v23 - 6) = *((_OWORD *)v8 - 6);
              *((_OWORD *)v23 - 5) = v24;
              long long v25 = *((_OWORD *)v8 - 4);
              long long v26 = *((_OWORD *)v8 - 3);
              long long v27 = *((_OWORD *)v8 - 2);
              uint64_t v28 = (double *)(v23 - 96);
              *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 - 23);
              *((_OWORD *)v23 - 3) = v26;
              *((_OWORD *)v23 - 2) = v27;
              *((_OWORD *)v23 - 4) = v25;
              v8 -= 96;
              v23 -= 96;
            }
            while (v8 != (char *)v13);
          }
          double v8 = v18 + 96;
          std::string __p = v28;
          unint64_t v54 = &v17[96 * v16];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)(v6 + 16);
          *(_OWORD *)double v8 = *(_OWORD *)v6;
          *((_OWORD *)v8 + 1) = v9;
          long long v10 = *(_OWORD *)(v6 + 32);
          long long v11 = *(_OWORD *)(v6 + 48);
          long long v12 = *(_OWORD *)(v6 + 80);
          *((_OWORD *)v8 + 4) = *(_OWORD *)(v6 + 64);
          *((_OWORD *)v8 + 5) = v12;
          *((_OWORD *)v8 + 2) = v10;
          *((_OWORD *)v8 + 3) = v11;
          v8 += 96;
        }
        int v53 = v8;
      }
      v6 += 96;
    }
    while (v6 != v7);
    if (__p == (double *)v8)
    {
LABEL_38:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      unint64_t v33 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, accessPointsWithValidWeights is empty", buf, 2u);
      }
      double v32 = -1.0;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        LOWORD(v55) = 0;
        unint64_t v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      uint64_t v29 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67174657;
        LODWORD(v64) = -1431655765 * ((unint64_t)(v53 - (char *)__p) >> 5);
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, num accessPointsWithValidWeights, %{private}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        int v55 = 67174657;
        LODWORD(v56) = -1431655765 * ((unint64_t)(v53 - (char *)__p) >> 5);
        unsigned int v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
      }
      unsigned int v30 = __p;
      if (v53 - (char *)__p == 96)
      {
        double v31 = __p[5];
        double v32 = v31 * *((double *)sub_1000DBFA0() + 32);
      }
      else
      {
        if (__p == (double *)v53)
        {
          double v38 = 0.0;
          double v37 = 0.0;
          double v36 = 0.0;
        }
        else
        {
          double v36 = 0.0;
          double v37 = 0.0;
          double v38 = 0.0;
          do
          {
            double v39 = *((float *)v30 + 21);
            double v38 = v38 + v39;
            double v37 = v37 + v39 * v39;
            double v36 = v36 + v39 * ((v30[2] - a2) * (v30[2] - a2));
            v30 += 12;
          }
          while (v30 != (double *)v53);
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        double v40 = v37 / v38;
        double v41 = v38 - v37 / v38;
        char v42 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134284289;
          double v64 = v38;
          __int16 v65 = 2049;
          double v66 = v37;
          __int16 v67 = 2049;
          double v68 = v36;
          __int16 v69 = 2049;
          double v70 = v38 - v40;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, calculate uncertainty, dSumWeightV, %{private}.2f, dSumWeightVSquare, %{private}.2f, dSumWeightedDeviation, %{private}.2f, altVarianceDivisor, %{private}.2f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF670);
          }
          int v55 = 134284289;
          double v56 = v38;
          __int16 v57 = 2049;
          double v58 = v37;
          __int16 v59 = 2049;
          double v60 = v36;
          __int16 v61 = 2049;
          double v62 = v38 - v40;
          unint64_t v51 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static double CLLocationCalculator::calculateWifiVerticalAccuracy(const std::vector<CLWifiAccessPoint> &, double)", "%s\n", v51);
          if (v51 != (char *)buf) {
            free(v51);
          }
        }
        double v32 = -1.0;
        if (v38 > 0.0 && v41 > 0.0)
        {
          double v43 = *((double *)sub_1000DBFA0() + 32);
          id v44 = sub_1000DBFA0();
          double v45 = sqrt(v36 / v41) * v43;
          if (v45 >= *((double *)v44 + 27)) {
            double v32 = v45;
          }
          else {
            double v32 = *((double *)v44 + 27);
          }
        }
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  return v32;
}

void sub_10063AF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10063AFD4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (v5 - *a1 != a2[1] - *a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF690);
    }
    uint64_t v29 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      id v44 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      __int16 v45 = 1024;
      int v46 = 482;
      __int16 v47 = 2080;
      unint64_t v48 = "values.size() == weights.size()";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF690);
      }
      int v37 = 136315650;
      double v38 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      __int16 v39 = 1024;
      int v40 = 482;
      __int16 v41 = 2080;
      char v42 = "values.size() == weights.size()";
      double v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static double CLLocationCalculator::findWeightedMedian(const std::vector<double> &, const std::vector<double> &)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    sub_1004BA578();
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  if (v5 == v4)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF690);
    }
    unsigned int v30 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      id v44 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      __int16 v45 = 1024;
      int v46 = 483;
      __int16 v47 = 2080;
      unint64_t v48 = "values.size() > 0";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF690);
      }
      int v37 = 136315650;
      double v38 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      __int16 v39 = 1024;
      int v40 = 483;
      __int16 v41 = 2080;
      char v42 = "values.size() > 0";
      unint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static double CLLocationCalculator::findWeightedMedian(const std::vector<double> &, const std::vector<double> &)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    sub_1004BA578();
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  std::string __p = 0;
  unsigned int v35 = 0;
  double v36 = 0;
  if (v5 == v4)
  {
    uint64_t v6 = 0;
    long long v19 = 0;
    double v20 = 0.0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = *a2;
    double v9 = 0.0;
    do
    {
      uint64_t v10 = *(void *)(v4 + 8 * v7);
      uint64_t v11 = *(void *)(v8 + 8 * v7);
      if (v6 >= (double *)v36)
      {
        uint64_t v12 = ((char *)v6 - (char *)__p) >> 4;
        if ((unint64_t)(v12 + 1) >> 60) {
          sub_1001D7FD4();
        }
        unint64_t v13 = (v36 - (char *)__p) >> 3;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)(v36 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v15 = (char *)sub_1000C571C((uint64_t)&v36, v14);
        }
        else {
          unint64_t v15 = 0;
        }
        unint64_t v16 = &v15[16 * v12];
        *(void *)unint64_t v16 = v10;
        *((void *)v16 + 1) = v11;
        uint64_t v17 = v35;
        unint64_t v18 = v16;
        if (v35 != __p)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
            v18 -= 16;
            v17 -= 2;
          }
          while (v17 != __p);
          uint64_t v17 = __p;
        }
        uint64_t v6 = (double *)(v16 + 16);
        std::string __p = (double *)v18;
        double v36 = &v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v6 = v10;
        *((void *)v6 + 1) = v11;
        v6 += 2;
      }
      unsigned int v35 = v6;
      uint64_t v8 = *a2;
      double v9 = v9 + *(double *)(*a2 + 8 * v7++);
      uint64_t v4 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 3);
    long long v19 = __p;
    double v20 = v9 * 0.5;
  }
  unint64_t v21 = 126 - 2 * __clz(((char *)v6 - (char *)v19) >> 4);
  if (v6 == v19) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  sub_100642EF0(v19, v6, (uint64_t)buf, v22, 1);
  int v23 = __p;
  if (__p == v35)
  {
LABEL_31:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF690);
    }
    long long v26 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      id v44 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      __int16 v45 = 1024;
      int v46 = 503;
      __int16 v47 = 2080;
      unint64_t v48 = "false";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF690);
      }
      int v37 = 136315650;
      double v38 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLLocationCalculator.mm";
      __int16 v39 = 1024;
      int v40 = 503;
      __int16 v41 = 2080;
      char v42 = "false";
      double v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static double CLLocationCalculator::findWeightedMedian(const std::vector<double> &, const std::vector<double> &)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    sub_1004BA578();
    int v23 = __p;
    double v27 = 1.79769313e308;
    if (!__p) {
      return v27;
    }
LABEL_37:
    operator delete(v23);
    return v27;
  }
  double v24 = 0.0;
  long long v25 = __p;
  while (1)
  {
    double v24 = v24 + v25[1];
    if (v24 >= v20) {
      break;
    }
    v25 += 2;
    if (v25 == v35) {
      goto LABEL_31;
    }
  }
  double v27 = *v25;
  if (__p) {
    goto LABEL_37;
  }
  return v27;
}

void sub_10063B724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063B758(void *a1)
{
  uint64_t v154 = 0;
  __int16 v155 = 0;
  unint64_t v156 = 0;
  long long v151 = 0;
  uint64_t v152 = 0;
  unint64_t v153 = 0;
  unint64_t v148 = 0;
  __int16 v149 = 0;
  int v150 = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    unsigned int v30 = 0;
    uint64_t v29 = 0;
  }
  else
  {
    do
    {
      uint64_t v4 = v155;
      if (v155 >= v156)
      {
        uint64_t v6 = (char *)v154;
        uint64_t v7 = (v155 - (unsigned char *)v154) >> 3;
        unint64_t v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v9 = v156 - (unsigned char *)v154;
        if ((v156 - (unsigned char *)v154) >> 2 > v8) {
          unint64_t v8 = v9 >> 2;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v8;
        }
        if (v10)
        {
          uint64_t v11 = (char *)sub_1000DA54C((uint64_t)&v156, v10);
          uint64_t v6 = (char *)v154;
          uint64_t v4 = v155;
        }
        else
        {
          uint64_t v11 = 0;
        }
        uint64_t v12 = &v11[8 * v7];
        *(void *)uint64_t v12 = *(void *)(v2 + 16);
        uint64_t v5 = v12 + 8;
        while (v4 != v6)
        {
          uint64_t v13 = *((void *)v4 - 1);
          v4 -= 8;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }
        uint64_t v154 = v12;
        __int16 v155 = v5;
        unint64_t v156 = &v11[8 * v10];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *(void *)__int16 v155 = *(void *)(v2 + 16);
        uint64_t v5 = v4 + 8;
      }
      __int16 v155 = v5;
      uint64_t v14 = *(void *)(v2 + 16);
      unint64_t v15 = operator new(8uLL);
      *(void *)std::string __p = v15;
      *unint64_t v15 = v14;
      *(void *)&std::string __p[8] = v15 + 1;
      *(void *)&__p[16] = v15 + 1;
      unint64_t v16 = v152;
      if ((unint64_t)v152 >= v153)
      {
        uint64_t v17 = sub_1001DD01C((uint64_t *)&v151, (uint64_t)__p);
      }
      else
      {
        *uint64_t v152 = 0;
        v16[1] = 0;
        void v16[2] = 0;
        sub_1001DD364(v16, *(const void **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3);
        uint64_t v17 = (uint64_t)(v16 + 3);
      }
      uint64_t v152 = (uint64_t *)v17;
      double v18 = *(float *)(v2 + 84);
      long long v19 = v149;
      if (v149 >= v150)
      {
        unint64_t v21 = (double *)v148;
        uint64_t v22 = ((char *)v149 - (unsigned char *)v148) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v24 = (char *)v150 - (unsigned char *)v148;
        if (((char *)v150 - (unsigned char *)v148) >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          long long v26 = (char *)sub_1000DA54C((uint64_t)&v150, v25);
          unint64_t v21 = (double *)v148;
          long long v19 = v149;
        }
        else
        {
          long long v26 = 0;
        }
        double v27 = (double *)&v26[8 * v22];
        double *v27 = v18;
        double v20 = v27 + 1;
        while (v19 != v21)
        {
          uint64_t v28 = *((void *)v19-- - 1);
          *((void *)v27-- - 1) = v28;
        }
        unint64_t v148 = v27;
        __int16 v149 = v20;
        int v150 = (double *)&v26[8 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *__int16 v149 = v18;
        double v20 = v19 + 1;
      }
      __int16 v149 = v20;
      if (*(void *)__p)
      {
        *(void *)&std::string __p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      v2 += 96;
    }
    while (v2 != v3);
    uint64_t v29 = (double *)v154;
    unsigned int v30 = (double *)v155;
  }
  sub_1006440B8((uint64_t)v145, v29, v30);
  double v31 = (double *)v154;
  double v32 = (double *)((char *)v154 + 8);
  double v33 = *(double *)v154;
  if (v154 != v155 && v32 != (double *)v155)
  {
    double v34 = *(double *)v154;
    unsigned int v35 = (double *)((char *)v154 + 8);
    double v36 = (double *)v154;
    int v37 = (double *)((char *)v154 + 8);
    do
    {
      double v38 = *v37++;
      double v39 = v38;
      if (v34 < v38)
      {
        double v34 = v39;
        double v36 = v35;
      }
      unsigned int v35 = v37;
    }
    while (v37 != (double *)v155);
    double v40 = *v36;
    __int16 v41 = (double *)((char *)v154 + 8);
    do
    {
      double v42 = *v41++;
      double v43 = v42;
      if (v42 < v33)
      {
        double v33 = v43;
        double v31 = v32;
      }
      double v32 = v41;
    }
    while (v41 != (double *)v155);
    double v33 = v40;
  }
  double v44 = *v31;
  if (v33 - v44 >= *((double *)sub_1000DBFA0() + 25)) {
    int v45 = *((_DWORD *)sub_1000DBFA0() + 44);
  }
  else {
    int v45 = 2;
  }
  unint64_t v46 = (unint64_t)(v155 - (unsigned char *)v154) >> 3;
  if (v147 < v45) {
    int v45 = v147;
  }
  if (v45 >= (int)v46) {
    unint64_t v47 = (v46 - 1);
  }
  else {
    unint64_t v47 = v45;
  }
  if ((int)v47 < 2)
  {
    uint64_t v48 = 0;
    goto LABEL_105;
  }
  __int16 v136 = a1;
  sub_100644360(&v143, v47);
  uint64_t v49 = v143;
  uint64_t v50 = v144;
  if (v143 != v144)
  {
    int v51 = 0;
    unint64_t v52 = (0xAAAAAAAAAAAAAAABLL * (((char *)v152 - v151) >> 3) - 1) / v47;
    do
    {
      int v53 = *(void **)&v151[24 * (++v51 * v52)];
      unint64_t v54 = *(void *)(v49 + 16);
      int v55 = *(void **)(v49 + 8);
      if ((unint64_t)v55 >= v54)
      {
        __int16 v57 = *(void **)v49;
        uint64_t v58 = ((uint64_t)v55 - *(void *)v49) >> 3;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v60 = v54 - (void)v57;
        if (v60 >> 2 > v59) {
          unint64_t v59 = v60 >> 2;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          double v62 = (char *)sub_1000DA54C(v49 + 16, v61);
          __int16 v57 = *(void **)v49;
          int v55 = *(void **)(v49 + 8);
        }
        else
        {
          double v62 = 0;
        }
        unsigned int v63 = &v62[8 * v58];
        *(void *)unsigned int v63 = *v53;
        double v56 = v63 + 8;
        while (v55 != v57)
        {
          uint64_t v64 = *--v55;
          *((void *)v63 - 1) = v64;
          v63 -= 8;
        }
        *(void *)uint64_t v49 = v63;
        *(void *)(v49 + 8) = v56;
        *(void *)(v49 + 16) = &v62[8 * v61];
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        *int v55 = *v53;
        double v56 = v55 + 1;
      }
      *(void *)(v49 + 8) = v56;
      v49 += 24;
    }
    while (v49 != v50);
  }
  __int16 v140 = 0;
  std::string v141 = 0;
  uint64_t v142 = 0;
  memset(v139, 0, sizeof(v139));
  if (!sub_1001DE65C((uint64_t)__p, (uint64_t)&v143, (uint64_t **)&v151, &v148, v47, v139, (uint64_t)&v140))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    unsigned int v74 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, MultiModal, detection failed", __p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      LOWORD(v157[0]) = 0;
      __int16 v132 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLLocationCalculator::detectMultiModalDistribution(const std::vector<CLWifiAccessPoint> &)", "%s\n", v132);
      if (v132 != __p) {
        free(v132);
      }
    }
    uint64_t v48 = 0;
    goto LABEL_102;
  }
  *(void *)std::string __p = 0;
  sub_1001DCEDC(&v137, v47, __p);
  __int16 v65 = (double *)v137;
  if (v152 != (uint64_t *)v151)
  {
    unint64_t v66 = ((char *)v152 - v151) / 24;
    __int16 v67 = (double *)v148;
    double v68 = v140;
    if (v66 <= 1) {
      unint64_t v66 = 1;
    }
    do
    {
      double v69 = *v67++;
      double v70 = v69;
      LODWORD(v69) = *v68++;
      v65[LODWORD(v69)] = v70 + v65[LODWORD(v69)];
      --v66;
    }
    while (v66);
  }
  if (v65 == v138) {
    goto LABEL_93;
  }
  unsigned int v71 = 0;
  __int16 v72 = v65;
  do
  {
    double v73 = *v72++;
    if (v73 != 0.0) {
      ++v71;
    }
  }
  while (v72 != v138);
  if (v71 < 2) {
    goto LABEL_93;
  }
  if (v71 != 2)
  {
    if (v65 == v138)
    {
      char v89 = v65;
    }
    else
    {
      uint64_t v88 = v65 + 1;
      char v89 = v65;
      if (v65 + 1 != v138)
      {
        double v90 = *v65;
        char v89 = v65;
        __int16 v91 = v65 + 1;
        do
        {
          double v92 = *v91++;
          double v93 = v92;
          if (v90 < v92)
          {
            double v90 = v93;
            char v89 = v88;
          }
          uint64_t v88 = v91;
        }
        while (v91 != v138);
      }
    }
    v157[0] = 0;
    sub_1001DCEDC(__p, v47, v157);
    uint64_t v94 = 0;
    unsigned int v95 = *(double **)__p;
    uint64_t v96 = (double **)v139[0];
    unsigned int v97 = *(double **)(v139[0] + 24 * (int)((unint64_t)((char *)v89 - (char *)v65) >> 3));
    do
    {
      unsigned int v98 = *v96;
      v96 += 3;
      v95[v94++] = vabdd_f64(*v98, *v97);
    }
    while (v47 != v94);
    unsigned int v99 = v95 + 1;
    BOOL v100 = v95 == *(double **)&__p[8] || v99 == *(double **)&__p[8];
    long long v101 = v95;
    if (!v100)
    {
      double v102 = *v95;
      long long v101 = v95;
      uint64_t v103 = v95 + 1;
      do
      {
        double v104 = *v103++;
        double v105 = v104;
        if (v102 < v104)
        {
          double v102 = v105;
          long long v101 = v99;
        }
        unsigned int v99 = v103;
      }
      while (v103 != *(double **)&__p[8]);
    }
    memset(v157, 0, 24);
    std::string v107 = (uint64_t *)v151;
    char v106 = v152;
    if (v152 != (uint64_t *)v151)
    {
      char v108 = 0;
      unint64_t v109 = 0;
      unint64_t v110 = (unint64_t)((char *)v101 - (char *)v95) >> 3;
      do
      {
        if (*((_DWORD *)v140 + v109) != v110)
        {
          std::string v111 = (_OWORD *)(*v136 + 96 * v109);
          if (v108 >= v157[2])
          {
            char v116 = (char *)v157[0];
            unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((v108 - (char *)v157[0]) >> 5);
            unint64_t v118 = v117 + 1;
            if (v117 + 1 > 0x2AAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            if (0x5555555555555556 * (((char *)v157[2] - (char *)v157[0]) >> 5) > v118) {
              unint64_t v118 = 0x5555555555555556 * (((char *)v157[2] - (char *)v157[0]) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v157[2] - (char *)v157[0]) >> 5) >= 0x155555555555555) {
              unint64_t v119 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v119 = v118;
            }
            if (v119)
            {
              uint64_t v120 = (char *)sub_100642EA8((uint64_t)&v157[2], v119);
              char v116 = (char *)v157[0];
              char v108 = (char *)v157[1];
            }
            else
            {
              uint64_t v120 = 0;
            }
            unint64_t v121 = &v120[96 * v117];
            long long v122 = v111[1];
            *(_OWORD *)unint64_t v121 = *v111;
            *((_OWORD *)v121 + 1) = v122;
            long long v123 = v111[2];
            long long v124 = v111[3];
            long long v125 = v111[5];
            *((_OWORD *)v121 + 4) = v111[4];
            *((_OWORD *)v121 + 5) = v125;
            *((_OWORD *)v121 + 2) = v123;
            *((_OWORD *)v121 + 3) = v124;
            if (v108 == v116)
            {
              __int16 v131 = &v120[96 * v117];
            }
            else
            {
              unint64_t v126 = &v120[96 * v117];
              do
              {
                long long v127 = *((_OWORD *)v108 - 5);
                *((_OWORD *)v126 - 6) = *((_OWORD *)v108 - 6);
                *((_OWORD *)v126 - 5) = v127;
                long long v128 = *((_OWORD *)v108 - 4);
                long long v129 = *((_OWORD *)v108 - 3);
                long long v130 = *((_OWORD *)v108 - 2);
                __int16 v131 = v126 - 96;
                *(_OWORD *)(v126 - 23) = *(_OWORD *)(v108 - 23);
                *((_OWORD *)v126 - 3) = v129;
                *((_OWORD *)v126 - 2) = v130;
                *((_OWORD *)v126 - 4) = v128;
                v108 -= 96;
                v126 -= 96;
              }
              while (v108 != v116);
            }
            char v108 = v121 + 96;
            v157[0] = v131;
            v157[1] = v121 + 96;
            v157[2] = &v120[96 * v119];
            if (v116) {
              operator delete(v116);
            }
          }
          else
          {
            long long v112 = v111[1];
            *(_OWORD *)char v108 = *v111;
            *((_OWORD *)v108 + 1) = v112;
            long long v113 = v111[2];
            long long v114 = v111[3];
            long long v115 = v111[5];
            *((_OWORD *)v108 + 4) = v111[4];
            *((_OWORD *)v108 + 5) = v115;
            *((_OWORD *)v108 + 2) = v113;
            *((_OWORD *)v108 + 3) = v114;
            v108 += 96;
          }
          v157[1] = v108;
          std::string v107 = (uint64_t *)v151;
          char v106 = v152;
        }
        ++v109;
      }
      while (0xAAAAAAAAAAAAAAABLL * (v106 - v107) > v109);
    }
    uint64_t v48 = sub_10063B758(v157);
    if (v157[0])
    {
      v157[1] = v157[0];
      operator delete(v157[0]);
    }
    if (*(void *)__p)
    {
      *(void *)&std::string __p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    goto LABEL_94;
  }
  if (vabdd_f64(**(double **)v139[0], **(double **)(v139[0] + 24)) < *((double *)sub_1000DBFA0() + 23))
  {
    double v76 = *(double *)v137;
    double v77 = *((double *)v137 + 1);
    if (v76 + v77 >= *((double *)sub_1000DBFA0() + 24)) {
      goto LABEL_93;
    }
  }
  long long v78 = (double *)v137;
  if (v137 != v138)
  {
    unsigned int v79 = (double *)((char *)v137 + 8);
    if ((char *)v137 + 8 != (char *)v138)
    {
      double v80 = *(double *)v137;
      uint64_t v81 = (double *)((char *)v137 + 8);
      do
      {
        double v82 = *v81++;
        double v83 = v82;
        if (v80 < v82)
        {
          double v80 = v83;
          long long v78 = v79;
        }
        unsigned int v79 = v81;
      }
      while (v81 != v138);
    }
  }
  double v84 = *v78;
  if (v84 >= *((double *)sub_1000DBFA0() + 24))
  {
LABEL_93:
    uint64_t v48 = 0;
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    uint64_t v85 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v86 = **(void **)v139[0];
      uint64_t v87 = **(void **)(v139[0] + 24);
      *(_DWORD *)std::string __p = 134349568;
      *(void *)&__p[4] = v86;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = v87;
      *(_WORD *)&__p[22] = 2050;
      double v159 = v84;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, MultiModal, detected, max cluster centers, %{public}0.3f, %{public}0.3f, max weight, %{public}0.3f", __p, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      v133 = **(void ***)v139[0];
      __int16 v134 = **(void ***)(v139[0] + 24);
      LODWORD(v157[0]) = 134349568;
      *(void **)((char *)v157 + 4) = v133;
      WORD2(v157[1]) = 2050;
      *(void **)((char *)&v157[1] + 6) = v134;
      HIWORD(v157[2]) = 2050;
      v157[3] = *(void **)&v84;
      v135 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLLocationCalculator::detectMultiModalDistribution(const std::vector<CLWifiAccessPoint> &)", "%s\n", v135);
      if (v135 != __p) {
        free(v135);
      }
    }
    uint64_t v48 = 1;
  }
LABEL_94:
  if (v137)
  {
    __int16 v138 = (double *)v137;
    operator delete(v137);
  }
LABEL_102:
  *(void *)std::string __p = v139;
  sub_1001DCABC((void ***)__p);
  if (v140)
  {
    std::string v141 = v140;
    operator delete(v140);
  }
  *(void *)std::string __p = &v143;
  sub_1001DCABC((void ***)__p);
LABEL_105:
  sub_1000F5BB0((uint64_t)v145, v146);
  if (v148)
  {
    __int16 v149 = (double *)v148;
    operator delete(v148);
  }
  *(void *)std::string __p = &v151;
  sub_1001DCABC((void ***)__p);
  if (v154)
  {
    __int16 v155 = (char *)v154;
    operator delete(v154);
  }
  return v48;
}

void sub_10063C354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42)
{
  if (__p) {
    operator delete(__p);
  }
  a41 = &a16;
  sub_1001DCABC((void ***)&a41);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  a41 = &a22;
  sub_1001DCABC((void ***)&a41);
  sub_1000F5BB0((uint64_t)&a25, a26);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a41 = &a31;
  sub_1001DCABC((void ***)&a41);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void sub_10063C484(uint64_t *a1, void **a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF670);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
    *(_DWORD *)std::string buf = 67174657;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, num input accessPointWithWeights, %{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    int v132 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 5);
    int v151 = 67174657;
    LODWORD(v152) = v132;
    v133 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v133);
    if (v133 != buf) {
      free(v133);
    }
  }
  std::string __p = 0;
  __int16 v149 = 0;
  int v150 = 0;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7) {
    goto LABEL_71;
  }
  unint64_t v8 = 0;
  do
  {
    if (*(float *)(v6 + 84) > 0.0)
    {
      if (v8 >= v150)
      {
        uint64_t v13 = (char *)__p;
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)__p) >> 5);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((v150 - (unsigned char *)__p) >> 5) > v15) {
          unint64_t v15 = 0x5555555555555556 * ((v150 - (unsigned char *)__p) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v150 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
          unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          uint64_t v17 = (char *)sub_100642EA8((uint64_t)&v150, v16);
          uint64_t v13 = (char *)__p;
          unint64_t v8 = v149;
        }
        else
        {
          uint64_t v17 = 0;
        }
        double v18 = &v17[96 * v14];
        long long v19 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)double v18 = *(_OWORD *)v6;
        *((_OWORD *)v18 + 1) = v19;
        long long v20 = *(_OWORD *)(v6 + 32);
        long long v21 = *(_OWORD *)(v6 + 48);
        long long v22 = *(_OWORD *)(v6 + 80);
        *((_OWORD *)v18 + 4) = *(_OWORD *)(v6 + 64);
        *((_OWORD *)v18 + 5) = v22;
        *((_OWORD *)v18 + 2) = v20;
        *((_OWORD *)v18 + 3) = v21;
        if (v8 == v13)
        {
          uint64_t v28 = &v17[96 * v14];
        }
        else
        {
          unint64_t v23 = &v17[96 * v14];
          do
          {
            long long v24 = *((_OWORD *)v8 - 5);
            *((_OWORD *)v23 - 6) = *((_OWORD *)v8 - 6);
            *((_OWORD *)v23 - 5) = v24;
            long long v25 = *((_OWORD *)v8 - 4);
            long long v26 = *((_OWORD *)v8 - 3);
            long long v27 = *((_OWORD *)v8 - 2);
            uint64_t v28 = v23 - 96;
            *(_OWORD *)(v23 - 23) = *(_OWORD *)(v8 - 23);
            *((_OWORD *)v23 - 3) = v26;
            *((_OWORD *)v23 - 2) = v27;
            *((_OWORD *)v23 - 4) = v25;
            v8 -= 96;
            v23 -= 96;
          }
          while (v8 != v13);
        }
        unint64_t v8 = v18 + 96;
        std::string __p = v28;
        __int16 v149 = v18 + 96;
        int v150 = &v17[96 * v16];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        long long v9 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)unint64_t v8 = *(_OWORD *)v6;
        *((_OWORD *)v8 + 1) = v9;
        long long v10 = *(_OWORD *)(v6 + 32);
        long long v11 = *(_OWORD *)(v6 + 48);
        long long v12 = *(_OWORD *)(v6 + 80);
        *((_OWORD *)v8 + 4) = *(_OWORD *)(v6 + 64);
        *((_OWORD *)v8 + 5) = v12;
        *((_OWORD *)v8 + 2) = v10;
        *((_OWORD *)v8 + 3) = v11;
        v8 += 96;
      }
      __int16 v149 = v8;
    }
    v6 += 96;
  }
  while (v6 != v7);
  if (__p == v8)
  {
LABEL_71:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    unint64_t v54 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, accessPointsWithValidWeights is empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      LOWORD(v151) = 0;
      int v55 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v55);
      if (v55 != buf) {
        free(v55);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    uint64_t v29 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = -1431655765 * ((unint64_t)(v149 - (unsigned char *)__p) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, num accessPointsWithValidWeights, %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      int v151 = 67174657;
      LODWORD(v152) = -1431655765 * ((unint64_t)(v149 - (unsigned char *)__p) >> 5);
      __int16 v134 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v134);
      if (v134 != buf) {
        free(v134);
      }
    }
    __int16 v145 = 0;
    uint64_t v146 = 0;
    int v147 = 0;
    uint64_t v142 = 0;
    uint64_t v143 = 0;
    uint64_t v144 = 0;
    unsigned int v30 = (float *)__p;
    double v31 = (float *)v149;
    if (__p == v149)
    {
      double v32 = 0.0;
    }
    else
    {
      double v32 = 0.0;
      do
      {
        double v33 = v146;
        if (v146 >= v147)
        {
          unsigned int v35 = (char *)v145;
          uint64_t v36 = (v146 - (unsigned char *)v145) >> 3;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v38 = v147 - (unsigned char *)v145;
          if ((v147 - (unsigned char *)v145) >> 2 > v37) {
            unint64_t v37 = v38 >> 2;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            double v40 = (char *)sub_1000DA54C((uint64_t)&v147, v39);
            unsigned int v35 = (char *)v145;
            double v33 = v146;
          }
          else
          {
            double v40 = 0;
          }
          __int16 v41 = &v40[8 * v36];
          *(void *)__int16 v41 = *((void *)v30 + 2);
          double v34 = v41 + 8;
          while (v33 != v35)
          {
            uint64_t v42 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v41 - 1) = v42;
            v41 -= 8;
          }
          __int16 v145 = v41;
          uint64_t v146 = v34;
          int v147 = &v40[8 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(void *)uint64_t v146 = *((void *)v30 + 2);
          double v34 = v33 + 8;
        }
        uint64_t v146 = v34;
        double v43 = v30[21];
        double v44 = v143;
        if (v143 >= v144)
        {
          unint64_t v46 = (double *)v142;
          uint64_t v47 = ((char *)v143 - (unsigned char *)v142) >> 3;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v49 = (char *)v144 - (unsigned char *)v142;
          if (((char *)v144 - (unsigned char *)v142) >> 2 > v48) {
            unint64_t v48 = v49 >> 2;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            int v51 = (char *)sub_1000DA54C((uint64_t)&v144, v50);
            unint64_t v46 = (double *)v142;
            double v44 = v143;
          }
          else
          {
            int v51 = 0;
          }
          unint64_t v52 = (double *)&v51[8 * v47];
          *unint64_t v52 = v43;
          int v45 = v52 + 1;
          while (v44 != v46)
          {
            uint64_t v53 = *((void *)v44-- - 1);
            *((void *)v52-- - 1) = v53;
          }
          uint64_t v142 = v52;
          uint64_t v143 = v45;
          uint64_t v144 = (double *)&v51[8 * v50];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *uint64_t v143 = v43;
          int v45 = v44 + 1;
        }
        uint64_t v143 = v45;
        double v32 = v32 + v30[21];
        v30 += 24;
      }
      while (v30 != v31);
    }
    double v56 = sub_10063AFD4((uint64_t *)&v145, (uint64_t *)&v142);
    __int16 v139 = 0;
    __int16 v140 = 0;
    std::string v141 = 0;
    __int16 v136 = 0;
    unint64_t v137 = 0;
    __int16 v138 = 0;
    __int16 v57 = (double *)__p;
    uint64_t v58 = (double *)v149;
    if (__p != v149)
    {
      do
      {
        double v59 = vabdd_f64(v57[2], v56);
        long long v160 = *((_OWORD *)v57 + 2);
        long long v161 = *((_OWORD *)v57 + 3);
        long long v162 = *((_OWORD *)v57 + 4);
        long long v163 = *((_OWORD *)v57 + 5);
        *(_OWORD *)std::string buf = *(_OWORD *)v57;
        *(_OWORD *)&uint8_t buf[16] = *((_OWORD *)v57 + 1);
        if (v137 >= (unint64_t)v138)
        {
          unint64_t v61 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v137 - (void)v136) >> 3) + 1;
          if (v61 > 0x276276276276276) {
            sub_1001D7FD4();
          }
          if (0x9D89D89D89D89D8ALL * ((v138 - v136) >> 3) > v61) {
            unint64_t v61 = 0x9D89D89D89D89D8ALL * ((v138 - v136) >> 3);
          }
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v138 - v136) >> 3)) >= 0x13B13B13B13B13BLL) {
            unint64_t v62 = 0x276276276276276;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v62) {
            unsigned int v63 = (char *)sub_100644404((uint64_t)&v138, v62);
          }
          else {
            unsigned int v63 = 0;
          }
          uint64_t v64 = &v63[8 * ((uint64_t)(v137 - (void)v136) >> 3)];
          *(double *)uint64_t v64 = v59;
          *(_OWORD *)(v64 + 8) = *(_OWORD *)buf;
          *(_OWORD *)(v64 + 40) = v160;
          *(_OWORD *)(v64 + 56) = v161;
          *(_OWORD *)(v64 + 72) = v162;
          *(_OWORD *)(v64 + 88) = v163;
          *(_OWORD *)(v64 + 24) = *(_OWORD *)&buf[16];
          __int16 v65 = (char *)v137;
          unint64_t v66 = v64;
          if ((char *)v137 != v136)
          {
            do
            {
              long long v67 = *(_OWORD *)(v65 - 104);
              long long v68 = *(_OWORD *)(v65 - 88);
              *(_OWORD *)(v66 - 72) = *(_OWORD *)(v65 - 72);
              *(_OWORD *)(v66 - 88) = v68;
              *(_OWORD *)(v66 - 104) = v67;
              long long v69 = *(_OWORD *)(v65 - 56);
              long long v70 = *(_OWORD *)(v65 - 40);
              long long v71 = *(_OWORD *)(v65 - 24);
              *((void *)v66 - 1) = *((void *)v65 - 1);
              *(_OWORD *)(v66 - 24) = v71;
              *(_OWORD *)(v66 - 40) = v70;
              *(_OWORD *)(v66 - 56) = v69;
              v66 -= 104;
              v65 -= 104;
            }
            while (v65 != v136);
            __int16 v65 = v136;
          }
          unint64_t v60 = (unint64_t)(v64 + 104);
          __int16 v136 = v66;
          __int16 v138 = &v63[104 * v62];
          if (v65) {
            operator delete(v65);
          }
        }
        else
        {
          *(double *)unint64_t v137 = v59;
          *(_OWORD *)(v137 + 40) = v160;
          *(_OWORD *)(v137 + 56) = v161;
          *(_OWORD *)(v137 + 72) = v162;
          *(_OWORD *)(v137 + 88) = v163;
          *(_OWORD *)(v137 + 8) = *(_OWORD *)buf;
          *(_OWORD *)(v137 + 24) = *(_OWORD *)&buf[16];
          unint64_t v60 = v137 + 104;
        }
        unint64_t v137 = v60;
        __int16 v72 = v140;
        if (v140 >= v141)
        {
          unsigned int v74 = (double *)v139;
          uint64_t v75 = ((char *)v140 - (unsigned char *)v139) >> 3;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v77 = (char *)v141 - (unsigned char *)v139;
          if (((char *)v141 - (unsigned char *)v139) >> 2 > v76) {
            unint64_t v76 = v77 >> 2;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78)
          {
            unsigned int v79 = (char *)sub_1000DA54C((uint64_t)&v141, v78);
            unsigned int v74 = (double *)v139;
            __int16 v72 = v140;
          }
          else
          {
            unsigned int v79 = 0;
          }
          double v80 = (double *)&v79[8 * v75];
          double *v80 = v59;
          double v73 = v80 + 1;
          while (v72 != v74)
          {
            uint64_t v81 = *((void *)v72-- - 1);
            *((void *)v80-- - 1) = v81;
          }
          __int16 v139 = v80;
          __int16 v140 = v73;
          std::string v141 = (double *)&v79[8 * v78];
          if (v74) {
            operator delete(v74);
          }
        }
        else
        {
          *__int16 v140 = v59;
          double v73 = v72 + 1;
        }
        __int16 v140 = v73;
        v57 += 12;
      }
      while (v57 != v58);
    }
    double v82 = sub_10063AFD4((uint64_t *)&v139, (uint64_t *)&v142);
    unint64_t v83 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v137 - (void)v136) >> 3));
    double v84 = v82 + v82;
    if ((char *)v137 == v136) {
      uint64_t v85 = 0;
    }
    else {
      uint64_t v85 = v83;
    }
    if (v84 >= 5.0) {
      double v86 = v84;
    }
    else {
      double v86 = 5.0;
    }
    sub_100644450((unint64_t)v136, v137, v85, 1);
    double v87 = (double)(0xAAAAAAAAAAAAAAABLL * ((v149 - (unsigned char *)__p) >> 5)) * 0.5;
    double v88 = v32 * 0.5;
    char v89 = v136;
    if (v136 != (char *)v137)
    {
      int v90 = 0;
      double v91 = 0.0;
      while (1)
      {
        double v92 = v89 + 8;
        if (vabdd_f64(*((double *)v89 + 3), v56) <= v86) {
          break;
        }
        if (v87 <= (double)v90 || v91 >= v88)
        {
          uint64_t v94 = a2[1];
          unint64_t v95 = (unint64_t)a2[2];
          if ((unint64_t)v94 >= v95)
          {
            unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (unsigned char *)*a2) >> 5);
            unint64_t v97 = v96 + 1;
            if (v96 + 1 > 0x2AAAAAAAAAAAAAALL) {
              goto LABEL_193;
            }
            unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (void)*a2) >> 5);
            if (2 * v98 > v97) {
              unint64_t v97 = 2 * v98;
            }
            if (v98 >= 0x155555555555555) {
              unint64_t v99 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v99 = v97;
            }
            if (v99) {
              BOOL v100 = (char *)sub_100642EA8((uint64_t)(a2 + 2), v99);
            }
            else {
              BOOL v100 = 0;
            }
            unint64_t v110 = &v100[96 * v96];
            long long v122 = *(_OWORD *)(v89 + 24);
            *(_OWORD *)unint64_t v110 = *v92;
            *((_OWORD *)v110 + 1) = v122;
            long long v123 = *(_OWORD *)(v89 + 40);
            long long v124 = *(_OWORD *)(v89 + 56);
            long long v125 = *(_OWORD *)(v89 + 88);
            *((_OWORD *)v110 + 4) = *(_OWORD *)(v89 + 72);
            *((_OWORD *)v110 + 5) = v125;
            *((_OWORD *)v110 + 2) = v123;
            *((_OWORD *)v110 + 3) = v124;
            unint64_t v126 = (char *)*a2;
            long long v115 = (char *)a2[1];
            unint64_t v117 = v110;
            if (v115 != *a2)
            {
              do
              {
                long long v127 = *((_OWORD *)v115 - 5);
                *(v117 - 6) = *((_OWORD *)v115 - 6);
                *(v117 - 5) = v127;
                long long v128 = *((_OWORD *)v115 - 4);
                long long v129 = *((_OWORD *)v115 - 3);
                long long v130 = *((_OWORD *)v115 - 2);
                *(_OWORD *)((char *)v117 - 23) = *(_OWORD *)(v115 - 23);
                *(v117 - 3) = v129;
                *(v117 - 2) = v130;
                *(v117 - 4) = v128;
                v117 -= 6;
                v115 -= 96;
              }
              while (v115 != v126);
              goto LABEL_155;
            }
            goto LABEL_156;
          }
LABEL_138:
          long long v102 = *(_OWORD *)(v89 + 24);
          *uint64_t v94 = *v92;
          v94[1] = v102;
          long long v103 = *(_OWORD *)(v89 + 40);
          long long v104 = *(_OWORD *)(v89 + 56);
          long long v105 = *(_OWORD *)(v89 + 88);
          v94[4] = *(_OWORD *)(v89 + 72);
          v94[5] = v105;
          v94[2] = v103;
          v94[3] = v104;
          char v106 = v94 + 6;
          goto LABEL_158;
        }
        ++v90;
        double v91 = v91 + *((float *)v89 + 23);
LABEL_159:
        v89 += 104;
        if (v89 == (char *)v137) {
          goto LABEL_160;
        }
      }
      uint64_t v94 = a2[1];
      unint64_t v101 = (unint64_t)a2[2];
      if ((unint64_t)v94 < v101) {
        goto LABEL_138;
      }
      unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (unsigned char *)*a2) >> 5);
      unint64_t v108 = v107 + 1;
      if (v107 + 1 > 0x2AAAAAAAAAAAAAALL) {
LABEL_193:
      }
        sub_1001D7FD4();
      unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)*a2) >> 5);
      if (2 * v109 > v108) {
        unint64_t v108 = 2 * v109;
      }
      if (v109 >= 0x155555555555555) {
        unint64_t v99 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v99 = v108;
      }
      if (v99) {
        BOOL v100 = (char *)sub_100642EA8((uint64_t)(a2 + 2), v99);
      }
      else {
        BOOL v100 = 0;
      }
      unint64_t v110 = &v100[96 * v107];
      long long v111 = *(_OWORD *)(v89 + 24);
      *(_OWORD *)unint64_t v110 = *v92;
      *((_OWORD *)v110 + 1) = v111;
      long long v112 = *(_OWORD *)(v89 + 40);
      long long v113 = *(_OWORD *)(v89 + 56);
      long long v114 = *(_OWORD *)(v89 + 88);
      *((_OWORD *)v110 + 4) = *(_OWORD *)(v89 + 72);
      *((_OWORD *)v110 + 5) = v114;
      *((_OWORD *)v110 + 2) = v112;
      *((_OWORD *)v110 + 3) = v113;
      char v116 = (char *)*a2;
      long long v115 = (char *)a2[1];
      unint64_t v117 = v110;
      if (v115 != *a2)
      {
        do
        {
          long long v118 = *((_OWORD *)v115 - 5);
          *(v117 - 6) = *((_OWORD *)v115 - 6);
          *(v117 - 5) = v118;
          long long v119 = *((_OWORD *)v115 - 4);
          long long v120 = *((_OWORD *)v115 - 3);
          long long v121 = *((_OWORD *)v115 - 2);
          *(_OWORD *)((char *)v117 - 23) = *(_OWORD *)(v115 - 23);
          *(v117 - 3) = v120;
          *(v117 - 2) = v121;
          *(v117 - 4) = v119;
          v117 -= 6;
          v115 -= 96;
        }
        while (v115 != v116);
LABEL_155:
        long long v115 = (char *)*a2;
      }
LABEL_156:
      char v106 = v110 + 96;
      *a2 = v117;
      a2[1] = v110 + 96;
      a2[2] = &v100[96 * v99];
      if (v115) {
        operator delete(v115);
      }
LABEL_158:
      a2[1] = v106;
      goto LABEL_159;
    }
LABEL_160:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    __int16 v131 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134284289;
      *(double *)&uint8_t buf[4] = v56;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&buf[14] = v86;
      *(_WORD *)&unsigned char buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v87;
      LOWORD(v160) = 2049;
      *(double *)((char *)&v160 + 2) = v88;
      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, reject outlier, medianAltitude, %{private}.2f, maxDeviationFromMedian, %{private}.2f, maxNumApsToReject, %{private}.1f, maxWeightsToReject, %{private}.2f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      int v151 = 134284289;
      double v152 = v56;
      __int16 v153 = 2049;
      double v154 = v86;
      __int16 v155 = 2049;
      double v156 = v87;
      __int16 v157 = 2049;
      double v158 = v88;
      v135 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::rejectOutlierAltitudes(const std::vector<CLWifiAccessPoint> &, std::vector<CLWifiAccessPoint> &)", "%s\n", v135);
      if (v135 != buf) {
        free(v135);
      }
    }
    if (v136) {
      operator delete(v136);
    }
    if (v139)
    {
      __int16 v140 = (double *)v139;
      operator delete(v139);
    }
    if (v142)
    {
      uint64_t v143 = (double *)v142;
      operator delete(v142);
    }
    if (v145)
    {
      uint64_t v146 = (char *)v145;
      operator delete(v145);
    }
  }
  if (__p)
  {
    __int16 v149 = (char *)__p;
    operator delete(__p);
  }
}

void sub_10063D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063D488(void *a1@<X0>, unsigned char *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  v42[0] = 0;
  v42[1] = 0;
  __int16 v41 = v42;
  unint64_t v8 = (_OWORD *)*a1;
  long long v9 = (_OWORD *)a1[1];
  while (v8 != v9)
  {
    sub_100B39278(&v38);
    int v10 = *((_DWORD *)v8 + 18);
    std::string __p = v38;
    memset(&v38, 0, sizeof(v38));
    int v40 = v10;
    sub_100645AD8((uint64_t **)&v41, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    v8 += 6;
  }
  sub_10063D7A8((const void ***)&v41, a2, a3, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  long long v11 = (_OWORD *)*a1;
  long long v12 = (_OWORD *)a1[1];
  if ((_OWORD *)*a1 != v12)
  {
    do
    {
      sub_100B39278(&v38);
      uint64_t v13 = (std::string *)sub_10012FFE0((uint64_t)&__p, (const void **)&v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (&__p.__r_.__value_.__r.__words[1] != (std::string::size_type *)v13)
      {
        unint64_t v15 = a4[1];
        unint64_t v14 = (unint64_t)a4[2];
        if ((unint64_t)v15 >= v14)
        {
          long long v21 = *a4;
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a4) >> 5);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v21) >> 5);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x155555555555555) {
            unint64_t v25 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            long long v26 = (char *)sub_100642EA8((uint64_t)(a4 + 2), v25);
            long long v21 = *a4;
            unint64_t v15 = a4[1];
          }
          else
          {
            long long v26 = 0;
          }
          long long v27 = &v26[96 * v22];
          long long v28 = v11[1];
          *(_OWORD *)long long v27 = *v11;
          *((_OWORD *)v27 + 1) = v28;
          long long v29 = v11[2];
          long long v30 = v11[3];
          long long v31 = v11[5];
          *((_OWORD *)v27 + 4) = v11[4];
          *((_OWORD *)v27 + 5) = v31;
          *((_OWORD *)v27 + 2) = v29;
          *((_OWORD *)v27 + 3) = v30;
          if (v15 == v21)
          {
            unint64_t v37 = &v26[96 * v22];
          }
          else
          {
            double v32 = &v26[96 * v22];
            do
            {
              long long v33 = *((_OWORD *)v15 - 5);
              *((_OWORD *)v32 - 6) = *((_OWORD *)v15 - 6);
              *((_OWORD *)v32 - 5) = v33;
              long long v34 = *((_OWORD *)v15 - 4);
              long long v35 = *((_OWORD *)v15 - 3);
              long long v36 = *((_OWORD *)v15 - 1);
              unint64_t v37 = v32 - 96;
              *((_OWORD *)v32 - 2) = *((_OWORD *)v15 - 2);
              *((_OWORD *)v32 - 1) = v36;
              *((_OWORD *)v32 - 4) = v34;
              *((_OWORD *)v32 - 3) = v35;
              v15 -= 96;
              v32 -= 96;
            }
            while (v15 != v21);
          }
          long long v20 = v27 + 96;
          *a4 = v37;
          a4[1] = v27 + 96;
          a4[2] = &v26[96 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          long long v16 = v11[1];
          *(_OWORD *)unint64_t v15 = *v11;
          *((_OWORD *)v15 + 1) = v16;
          long long v17 = v11[2];
          long long v18 = v11[3];
          long long v19 = v11[5];
          *((_OWORD *)v15 + 4) = v11[4];
          *((_OWORD *)v15 + 5) = v19;
          *((_OWORD *)v15 + 2) = v17;
          *((_OWORD *)v15 + 3) = v18;
          long long v20 = v15 + 96;
        }
        a4[1] = v20;
      }
      v11 += 6;
    }
    while (v11 != v12);
  }
  sub_1000DB264((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  sub_1000DB264((uint64_t)&v41, v42[0]);
}

void sub_10063D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
}

void sub_10063D7A8(const void ***a1@<X0>, unsigned char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v40 = 0;
  uint64_t v41 = 0;
  unint64_t v39 = (uint64_t *)&v40;
  int v5 = a1 + 1;
  uint64_t v6 = *a1;
  if (*a1 == (const void **)(a1 + 1)) {
    goto LABEL_22;
  }
  do
  {
    if ((v6[7] & 0x80000000) != 0) {
      sub_100645AD8(&v39, v6 + 4, (uint64_t)(v6 + 4));
    }
    long long v9 = (const void **)v6[1];
    if (v9)
    {
      do
      {
        int v10 = (const void ***)v9;
        long long v9 = (const void **)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        int v10 = (const void ***)v6[2];
        BOOL v11 = *v10 == v6;
        uint64_t v6 = (const void **)v10;
      }
      while (!v11);
    }
    uint64_t v6 = (const void **)v10;
  }
  while (v10 != v5);
  if (!v41)
  {
LABEL_22:
    long long v18 = v40;
    *(void *)(a4 + 8) = v40;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = a4 + 8;
    goto LABEL_84;
  }
  *(void *)(a4 + 8) = 0;
  long long v12 = (uint64_t *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  uint64_t v13 = v39;
  if (v39 == (uint64_t *)&v40)
  {
    long long v17 = (unint64_t *)(a4 + 16);
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)v13 + 14);
      if (*((double *)sub_1000DBFA0() + 33) <= (double)v14) {
        sub_100645AD8((uint64_t **)a4, (const void **)v13 + 4, (uint64_t)(v13 + 4));
      }
      unint64_t v15 = (uint64_t *)v13[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          unint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (uint64_t *)v13[2];
          BOOL v11 = *v16 == (void)v13;
          uint64_t v13 = v16;
        }
        while (!v11);
      }
      uint64_t v13 = v16;
    }
    while (v16 != (uint64_t *)&v40);
    long long v17 = (unint64_t *)(a4 + 16);
    if (*(void *)(a4 + 16)) {
      goto LABEL_37;
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF670);
  }
  long long v19 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, all aps filtered out due to weak rssi, add them back to yield a fix", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    LOWORD(__p[0]) = 0;
    std::string v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::map<std::string, int> CLLocationCalculator::filterWifiApsBasedOnRssiCriteria(const std::map<std::string, int> &, BOOL &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  long long v20 = v39;
  if (v39 != (uint64_t *)&v40)
  {
    do
    {
      sub_100645AD8((uint64_t **)a4, (const void **)v20 + 4, (uint64_t)(v20 + 4));
      long long v21 = (uint64_t *)v20[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          long long v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unint64_t v22 = (uint64_t *)v20[2];
          BOOL v11 = *v22 == (void)v20;
          long long v20 = v22;
        }
        while (!v11);
      }
      long long v20 = v22;
    }
    while (v22 != (uint64_t *)&v40);
  }
  *a2 = 1;
LABEL_37:
  while (1)
  {
    unint64_t v23 = *v17;
    if (v23 <= (int)sub_10063DD4C(a3)) {
      break;
    }
    unint64_t v24 = *(uint64_t **)a4;
    unint64_t v25 = (uint64_t *)(a4 + 8);
    long long v26 = (uint64_t *)(a4 + 8);
    if (*(uint64_t **)a4 != v12)
    {
      unint64_t v25 = *(uint64_t **)a4;
      while (1)
      {
        long long v27 = (uint64_t *)v24[1];
        long long v28 = v24;
        if (v27)
        {
          do
          {
            unint64_t v24 = v27;
            long long v27 = (uint64_t *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            unint64_t v24 = (uint64_t *)v28[2];
            BOOL v11 = *v24 == (void)v28;
            long long v28 = v24;
          }
          while (!v11);
        }
        if (v24 == v12) {
          break;
        }
        if (*((char *)v25 + 55) < 0)
        {
          sub_1000DC48C(buf, (void *)v25[4], v25[5]);
        }
        else
        {
          *(_OWORD *)std::string buf = *((_OWORD *)v25 + 2);
          uint64_t v46 = v25[6];
        }
        int v29 = *((_DWORD *)v25 + 14);
        int v47 = v29;
        if (*((char *)v24 + 55) < 0)
        {
          sub_1000DC48C(__p, (void *)v24[4], v24[5]);
          int v29 = v47;
        }
        else
        {
          *(_OWORD *)std::string __p = *((_OWORD *)v24 + 2);
          uint64_t v43 = v24[6];
        }
        int v30 = *((_DWORD *)v24 + 14);
        int v44 = v30;
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v46) < 0) {
          operator delete(*(void **)buf);
        }
        if (v29 < v30) {
          unint64_t v25 = v24;
        }
      }
      long long v26 = *(uint64_t **)a4;
      if (*(uint64_t **)a4 == v12)
      {
        long long v26 = (uint64_t *)(a4 + 8);
      }
      else
      {
        long long v31 = *(uint64_t **)a4;
        while (1)
        {
          double v32 = (uint64_t *)v31[1];
          long long v33 = v31;
          if (v32)
          {
            do
            {
              long long v31 = v32;
              double v32 = (uint64_t *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v31 = (uint64_t *)v33[2];
              BOOL v11 = *v31 == (void)v33;
              long long v33 = v31;
            }
            while (!v11);
          }
          if (v31 == v12) {
            break;
          }
          if (*((char *)v31 + 55) < 0)
          {
            sub_1000DC48C(buf, (void *)v31[4], v31[5]);
          }
          else
          {
            *(_OWORD *)std::string buf = *((_OWORD *)v31 + 2);
            uint64_t v46 = v31[6];
          }
          int v34 = *((_DWORD *)v31 + 14);
          int v47 = v34;
          if (*((char *)v26 + 55) < 0)
          {
            sub_1000DC48C(__p, (void *)v26[4], v26[5]);
            int v34 = v47;
          }
          else
          {
            *(_OWORD *)std::string __p = *((_OWORD *)v26 + 2);
            uint64_t v43 = v26[6];
          }
          int v35 = *((_DWORD *)v26 + 14);
          int v44 = v35;
          if (SHIBYTE(v43) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v46) < 0) {
            operator delete(*(void **)buf);
          }
          if (v34 < v35) {
            long long v26 = v31;
          }
        }
      }
    }
    int v36 = *((_DWORD *)v25 + 14);
    int v37 = *((_DWORD *)v26 + 14);
    if (v36 - v37 <= *((_DWORD *)sub_1000DBFA0() + 72)) {
      break;
    }
    sub_100645C00((uint64_t **)a4, (uint64_t)v26);
  }
  long long v18 = v40;
LABEL_84:
  sub_1000DB264((uint64_t)&v39, v18);
}

void sub_10063DCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_1000DB264(v24, *(char **)(v24 + 8));
  sub_1000DB264((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10063DD4C(int a1)
{
  uint64_t v2 = *((unsigned int *)sub_1000DBFA0() + 58);
  switch(a1)
  {
    case 0:
      uint64_t v2 = *((unsigned int *)sub_1000DBFA0() + 58);
      break;
    case 1:
      uint64_t v2 = *((unsigned int *)sub_1000DBFA0() + 60);
      break;
    case 2:
      uint64_t v2 = *((unsigned int *)sub_1000DBFA0() + 61);
      break;
    case 3:
      uint64_t v2 = *((unsigned int *)sub_1000DBFA0() + 62);
      break;
    case 4:
      uint64_t v2 = *((unsigned int *)sub_1000DBFA0() + 63);
      break;
    case 6:
      uint64_t v2 = *((unsigned int *)sub_1000DBFA0() + 59);
      break;
    default:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      uint64_t v3 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled signal environment type: %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static int CLLocationCalculator::getSufficientZaxisInputApThreshold(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
      break;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF670);
  }
  int v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v9 = a1;
    __int16 v10 = 1024;
    int v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, signal environment, %d, sufficient ap threshold, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static int CLLocationCalculator::getSufficientZaxisInputApThreshold(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v2;
}

void sub_10063E0F0(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)std::string __p = 0uLL;
  double v88 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      if (*(double *)(v5 + 40) > 0.0 && (*(void *)(v5 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        if (v7 >= v88)
        {
          uint64_t v13 = (char *)__p[0];
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 5);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v88 - (char *)__p[0]) >> 5) > v15) {
            unint64_t v15 = 0x5555555555555556 * ((v88 - (char *)__p[0]) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v88 - (char *)__p[0]) >> 5) >= 0x155555555555555) {
            unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16)
          {
            long long v17 = (char *)sub_100642EA8((uint64_t)&v88, v16);
            uint64_t v7 = (char *)__p[1];
            uint64_t v13 = (char *)__p[0];
          }
          else
          {
            long long v17 = 0;
          }
          long long v18 = &v17[96 * v14];
          long long v19 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)long long v18 = *(_OWORD *)v5;
          *((_OWORD *)v18 + 1) = v19;
          long long v20 = *(_OWORD *)(v5 + 32);
          long long v21 = *(_OWORD *)(v5 + 48);
          long long v22 = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v18 + 4) = *(_OWORD *)(v5 + 64);
          *((_OWORD *)v18 + 5) = v22;
          *((_OWORD *)v18 + 2) = v20;
          *((_OWORD *)v18 + 3) = v21;
          if (v7 == v13)
          {
            long long v28 = &v17[96 * v14];
          }
          else
          {
            unint64_t v23 = &v17[96 * v14];
            do
            {
              long long v24 = *((_OWORD *)v7 - 5);
              *((_OWORD *)v23 - 6) = *((_OWORD *)v7 - 6);
              *((_OWORD *)v23 - 5) = v24;
              long long v25 = *((_OWORD *)v7 - 4);
              long long v26 = *((_OWORD *)v7 - 3);
              long long v27 = *((_OWORD *)v7 - 1);
              long long v28 = v23 - 96;
              *((_OWORD *)v23 - 2) = *((_OWORD *)v7 - 2);
              *((_OWORD *)v23 - 1) = v27;
              *((_OWORD *)v23 - 4) = v25;
              *((_OWORD *)v23 - 3) = v26;
              v7 -= 96;
              v23 -= 96;
            }
            while (v7 != v13);
          }
          uint64_t v7 = v18 + 96;
          __p[0] = v28;
          double v88 = &v17[96 * v16];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v5;
          *((_OWORD *)v7 + 1) = v9;
          long long v10 = *(_OWORD *)(v5 + 32);
          long long v11 = *(_OWORD *)(v5 + 48);
          long long v12 = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v7 + 4) = *(_OWORD *)(v5 + 64);
          *((_OWORD *)v7 + 5) = v12;
          *((_OWORD *)v7 + 2) = v10;
          *((_OWORD *)v7 + 3) = v11;
          v7 += 96;
        }
        __p[1] = v7;
      }
      v5 += 96;
    }
    while (v5 != v6);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF670);
  }
  int v29 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    *(_DWORD *)std::string buf = 134218240;
    unint64_t v94 = v30;
    __int16 v95 = 2048;
    unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 5);
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, num input aps, %lu, num valid unc aps, %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    int v89 = 134218240;
    unint64_t v90 = v82;
    __int16 v91 = 2048;
    unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 5);
    unint64_t v83 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::vector<CLWifiAPLocation> CLLocationCalculator::filterWifiApsBasedOnVerticalUncCriteria(const std::vector<CLWifiAPLocation> &, BOOL &)", "%s\n", v83);
    if (v83 != (char *)buf) {
      free(v83);
    }
  }
  long long v31 = (double *)__p[0];
  if (__p[0] == __p[1])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    uint64_t v81 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, validUncApCollection is empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      LOWORD(v89) = 0;
      double v84 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::vector<CLWifiAPLocation> CLLocationCalculator::filterWifiApsBasedOnVerticalUncCriteria(const std::vector<CLWifiAPLocation> &, BOOL &)", "%s\n", v84);
      if (v84 != (char *)buf) {
        free(v84);
      }
    }
    *a2 = 1;
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v88;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    double v32 = (void *)(a3 + 16);
    do
    {
      double v33 = v31[5];
      if (v33 < *((double *)sub_1000DBFA0() + 34))
      {
        int v35 = *(_OWORD **)(a3 + 8);
        unint64_t v34 = *(void *)(a3 + 16);
        if ((unint64_t)v35 >= v34)
        {
          uint64_t v41 = *(_OWORD **)a3;
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *(void *)a3) >> 5);
          unint64_t v43 = v42 + 1;
          if (v42 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)v41) >> 5);
          if (2 * v44 > v43) {
            unint64_t v43 = 2 * v44;
          }
          if (v44 >= 0x155555555555555) {
            unint64_t v45 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            uint64_t v46 = (char *)sub_100642EA8(a3 + 16, v45);
            uint64_t v41 = *(_OWORD **)a3;
            int v35 = *(_OWORD **)(a3 + 8);
          }
          else
          {
            uint64_t v46 = 0;
          }
          int v47 = &v46[96 * v42];
          long long v48 = *((_OWORD *)v31 + 1);
          *(_OWORD *)int v47 = *(_OWORD *)v31;
          *((_OWORD *)v47 + 1) = v48;
          long long v49 = *((_OWORD *)v31 + 2);
          long long v50 = *((_OWORD *)v31 + 3);
          long long v51 = *((_OWORD *)v31 + 5);
          *((_OWORD *)v47 + 4) = *((_OWORD *)v31 + 4);
          *((_OWORD *)v47 + 5) = v51;
          *((_OWORD *)v47 + 2) = v49;
          *((_OWORD *)v47 + 3) = v50;
          if (v35 == v41)
          {
            __int16 v57 = &v46[96 * v42];
          }
          else
          {
            unint64_t v52 = &v46[96 * v42];
            do
            {
              long long v53 = *(v35 - 5);
              *((_OWORD *)v52 - 6) = *(v35 - 6);
              *((_OWORD *)v52 - 5) = v53;
              long long v54 = *(v35 - 4);
              long long v55 = *(v35 - 3);
              long long v56 = *(v35 - 1);
              __int16 v57 = v52 - 96;
              *((_OWORD *)v52 - 2) = *(v35 - 2);
              *((_OWORD *)v52 - 1) = v56;
              *((_OWORD *)v52 - 4) = v54;
              *((_OWORD *)v52 - 3) = v55;
              v35 -= 6;
              v52 -= 96;
            }
            while (v35 != v41);
          }
          int v40 = v47 + 96;
          *(void *)a3 = v57;
          *(void *)(a3 + 8) = v47 + 96;
          *(void *)(a3 + 16) = &v46[96 * v45];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          long long v36 = *((_OWORD *)v31 + 1);
          _OWORD *v35 = *(_OWORD *)v31;
          v35[1] = v36;
          long long v37 = *((_OWORD *)v31 + 2);
          long long v38 = *((_OWORD *)v31 + 3);
          long long v39 = *((_OWORD *)v31 + 5);
          v35[4] = *((_OWORD *)v31 + 4);
          v35[5] = v39;
          id v35[2] = v37;
          void v35[3] = v38;
          int v40 = v35 + 6;
        }
        *(void *)(a3 + 8) = v40;
      }
      v31 += 12;
    }
    while (v31 != __p[1]);
    if (*(void *)a3 == *(void *)(a3 + 8))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      uint64_t v58 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, all aps were non-slam, add them back to yield a fix", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        LOWORD(v89) = 0;
        uint64_t v85 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static std::vector<CLWifiAPLocation> CLLocationCalculator::filterWifiApsBasedOnVerticalUncCriteria(const std::vector<CLWifiAPLocation> &, BOOL &)", "%s\n", v85);
        if (v85 != (char *)buf) {
          free(v85);
        }
      }
      double v59 = __p[0];
      if (__p[0] != __p[1])
      {
        unint64_t v60 = *(_OWORD **)(a3 + 8);
        do
        {
          if ((unint64_t)v60 >= *v32)
          {
            __int16 v65 = *(_OWORD **)a3;
            unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v60 - *(void *)a3) >> 5);
            unint64_t v67 = v66 + 1;
            if (v66 + 1 > 0x2AAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            if (0x5555555555555556 * ((uint64_t)(*v32 - (void)v65) >> 5) > v67) {
              unint64_t v67 = 0x5555555555555556 * ((uint64_t)(*v32 - (void)v65) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v32 - (void)v65) >> 5) >= 0x155555555555555) {
              unint64_t v68 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v68 = v67;
            }
            if (v68)
            {
              long long v69 = (char *)sub_100642EA8(a3 + 16, v68);
              __int16 v65 = *(_OWORD **)a3;
              unint64_t v60 = *(_OWORD **)(a3 + 8);
            }
            else
            {
              long long v69 = 0;
            }
            long long v70 = &v69[96 * v66];
            long long v71 = v59[1];
            *(_OWORD *)long long v70 = *v59;
            *((_OWORD *)v70 + 1) = v71;
            long long v72 = v59[2];
            long long v73 = v59[3];
            long long v74 = v59[5];
            *((_OWORD *)v70 + 4) = v59[4];
            *((_OWORD *)v70 + 5) = v74;
            *((_OWORD *)v70 + 2) = v72;
            *((_OWORD *)v70 + 3) = v73;
            if (v60 == v65)
            {
              double v80 = &v69[96 * v66];
            }
            else
            {
              uint64_t v75 = &v69[96 * v66];
              do
              {
                long long v76 = *(v60 - 5);
                *((_OWORD *)v75 - 6) = *(v60 - 6);
                *((_OWORD *)v75 - 5) = v76;
                long long v77 = *(v60 - 4);
                long long v78 = *(v60 - 3);
                long long v79 = *(v60 - 1);
                double v80 = v75 - 96;
                *((_OWORD *)v75 - 2) = *(v60 - 2);
                *((_OWORD *)v75 - 1) = v79;
                *((_OWORD *)v75 - 4) = v77;
                *((_OWORD *)v75 - 3) = v78;
                v60 -= 6;
                v75 -= 96;
              }
              while (v60 != v65);
            }
            unint64_t v60 = v70 + 96;
            *(void *)a3 = v80;
            *(void *)(a3 + 8) = v70 + 96;
            *(void *)(a3 + 16) = &v69[96 * v68];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            long long v61 = v59[1];
            *unint64_t v60 = *v59;
            v60[1] = v61;
            long long v62 = v59[2];
            long long v63 = v59[3];
            long long v64 = v59[5];
            v60[4] = v59[4];
            v60[5] = v64;
            v60[2] = v62;
            v60[3] = v63;
            v60 += 6;
          }
          *(void *)(a3 + 8) = v60;
          v59 += 6;
        }
        while (v59 != __p[1]);
      }
      *a2 = 1;
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
}

void sub_10063E9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063EA1C(uint64_t ***a1, const void ***a2, int *a3, int *a4, double *a5, long double *a6)
{
  v30[0] = 0;
  v30[1] = 0;
  int v29 = v30;
  long long v11 = *a1;
  long long v12 = a1[1];
  while (v11 != v12)
  {
    long long v27 = (const void **)*v11;
    sub_100B39278(&__p);
    sub_100645C44((uint64_t **)&v29, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v11 += 12;
  }
  v28[0] = 0;
  v28[1] = 0;
  long long v27 = v28;
  uint64_t v13 = *a2;
  uint64_t v14 = v28;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      sub_10010702C((uint64_t **)&v27, v13 + 4, (uint64_t)(v13 + 4));
      unint64_t v15 = (const void **)v13[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = (const void ***)v15;
          unint64_t v15 = (const void **)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (const void ***)v13[2];
          BOOL v17 = *v16 == v13;
          uint64_t v13 = (const void **)v16;
        }
        while (!v17);
      }
      uint64_t v13 = (const void **)v16;
    }
    while (v16 != a2 + 1);
    uint64_t v14 = v27;
  }
  long long v25 = 0;
  unint64_t v26 = 0;
  long long v24 = &v25;
  sub_100645CD8(v29, v30, v14, v28, (uint64_t)&v24, (uint64_t)&v25, (uint64_t)&v31, (uint64_t)&__p);
  *a5 = 1.0 - (double)v26 / (double)(unint64_t)a2[2];
  int v18 = *a4;
  int v19 = *a3;
  double v20 = *((double *)sub_1000DBFA0() + 37);
  double v21 = *a5;
  long long v22 = sub_1000DBFA0();
  double v23 = exp((double)(v18 - v19) / v20);
  *a6 = v23 * exp(v21 * *((double *)v22 + 38));
  sub_1000DB264((uint64_t)&v24, v25);
  sub_1000DB264((uint64_t)&v27, (char *)v28[0]);
  sub_1000DB264((uint64_t)&v29, v30[0]);
}

void sub_10063EBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, char a12, char *a13, uint64_t a14, char a15, char *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_10063EC54(uint64_t a1, uint64_t *a2, std::string::size_type *a3, double *a4, int *a5, double *a6, BOOL *a7, int *a8, double a9, uint64_t a10, int a11)
{
  uint64_t v246 = 0;
  int v244 = 0;
  *(double *)&uint64_t v243 = 1.0;
  *a7 = 0;
  *a8 = 0;
  *a6 = -200.0;
  if (*a2 != a2[1])
  {
    unsigned __int8 v242 = 0;
    sub_10063E0F0(a2, &v242, (uint64_t)&v240);
    double v21 = v240;
    double v20 = v241;
    if (v242) {
      int v22 = 0;
    }
    else {
      int v22 = -1431655765 * ((unint64_t)((unsigned char *)v241 - (unsigned char *)v240) >> 5);
    }
    *(_DWORD *)(a10 + 116) = -1431655765 * ((unint64_t)((unsigned char *)v241 - (unsigned char *)v240) >> 5);
    *(_DWORD *)(a10 + 152) = v22;
    if (v20 == v21)
    {
LABEL_200:
      if (v20)
      {
        v241 = v20;
        operator delete(v20);
      }
      return;
    }
    v225 = a5;
    v229 = a6;
    v230 = a7;
    v227 = a4;
    v228 = a8;
    sub_10063D488(&v240, &v242, a11, (char **)&v238);
    long long v24 = (char *)v238;
    double v23 = v239;
    if (v238 == v239)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      int v35 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, validRssiApCollection is empty", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        long long v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v36);
        if (v36 != buf) {
          free(v36);
        }
      }
      goto LABEL_197;
    }
    v224 = a2;
    long long v25 = (char *)v238 + 96;
    unint64_t v26 = v238;
    if ((char *)v238 + 96 != v239)
    {
      unint64_t v26 = v238;
      do
      {
        if (v26[18] < *((_DWORD *)v25 + 18)) {
          unint64_t v26 = v25;
        }
        v25 += 96;
      }
      while (v25 != v239);
    }
    int v245 = v26[18];
    if (a1)
    {
      *(_DWORD *)(a10 + 112) = *(void *)(a1 + 16);
      sub_10063D7A8((const void ***)a1, &v232, a11, (uint64_t)&v235);
      long long v27 = (char *)v235;
      if (v235 != &v236)
      {
        long long v28 = (char **)v235;
        while (1)
        {
          int v29 = v28[1];
          unint64_t v30 = v28;
          if (v29)
          {
            do
            {
              long long v28 = (char **)v29;
              int v29 = *(char **)v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              long long v28 = (char **)v30[2];
              BOOL v70 = *v28 == (char *)v30;
              unint64_t v30 = v28;
            }
            while (!v70);
          }
          if (v28 == &v236) {
            break;
          }
          if (v27[55] < 0)
          {
            sub_1000DC48C(buf, *((void **)v27 + 4), *((void *)v27 + 5));
          }
          else
          {
            *(_OWORD *)std::string buf = *((_OWORD *)v27 + 2);
            *(void *)&uint8_t buf[16] = *((void *)v27 + 6);
          }
          int v31 = *((_DWORD *)v27 + 14);
          *(_DWORD *)&unsigned char buf[24] = v31;
          if (*((char *)v28 + 55) < 0)
          {
            sub_1000DC48C(&__p, v28[4], (unint64_t)v28[5]);
            int v31 = *(_DWORD *)&buf[24];
          }
          else
          {
            std::string __p = *(std::string *)(v28 + 4);
          }
          int v32 = *((_DWORD *)v28 + 14);
          LODWORD(v248) = v32;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v31 < v32) {
            long long v27 = (char *)v28;
          }
        }
      }
      int v244 = *((_DWORD *)v27 + 14);
      sub_10063EA1C((uint64_t ***)&v238, (const void ***)&v235, &v245, &v244, (double *)&v246, (long double *)&v243);
      sub_1000DB264((uint64_t)&v235, v236);
      long long v24 = (char *)v238;
      double v23 = v239;
    }
    else
    {
      *(double *)&uint64_t v243 = 1.0;
      uint64_t v246 = 0;
    }
    v235 = 0;
    v236 = 0;
    for (unint64_t i = 0; v24 != v23; v24 += 96)
    {
      sub_100640940((uint64_t)v24, (uint64_t)buf);
      long long v37 = v236;
      if ((unint64_t)v236 >= i)
      {
        unint64_t v43 = (char *)v235;
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
        unint64_t v45 = v44 + 1;
        if (v44 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((uint64_t)(i - (void)v235) >> 5) > v45) {
          unint64_t v45 = 0x5555555555555556 * ((uint64_t)(i - (void)v235) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - (void)v235) >> 5) >= 0x155555555555555) {
          unint64_t v46 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46)
        {
          int v47 = (char *)sub_100642EA8((uint64_t)&i, v46);
          unint64_t v43 = (char *)v235;
          long long v37 = v236;
        }
        else
        {
          int v47 = 0;
        }
        long long v48 = &v47[96 * v44];
        long long v49 = *(_OWORD *)&buf[16];
        *(_OWORD *)long long v48 = *(_OWORD *)buf;
        *((_OWORD *)v48 + 1) = v49;
        long long v50 = v253;
        long long v51 = v254;
        long long v52 = v256;
        *((_OWORD *)v48 + 4) = v255;
        *((_OWORD *)v48 + 5) = v52;
        *((_OWORD *)v48 + 2) = v50;
        *((_OWORD *)v48 + 3) = v51;
        if (v37 == v43)
        {
          uint64_t v58 = &v47[96 * v44];
        }
        else
        {
          long long v53 = &v47[96 * v44];
          do
          {
            long long v54 = *((_OWORD *)v37 - 5);
            *((_OWORD *)v53 - 6) = *((_OWORD *)v37 - 6);
            *((_OWORD *)v53 - 5) = v54;
            long long v55 = *((_OWORD *)v37 - 4);
            long long v56 = *((_OWORD *)v37 - 3);
            long long v57 = *((_OWORD *)v37 - 2);
            uint64_t v58 = v53 - 96;
            *(_OWORD *)(v53 - 23) = *(_OWORD *)(v37 - 23);
            *((_OWORD *)v53 - 3) = v56;
            *((_OWORD *)v53 - 2) = v57;
            *((_OWORD *)v53 - 4) = v55;
            v37 -= 96;
            v53 -= 96;
          }
          while (v37 != v43);
        }
        unint64_t v42 = v48 + 96;
        v235 = v58;
        v236 = v48 + 96;
        unint64_t i = (unint64_t)&v47[96 * v46];
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        long long v38 = *(_OWORD *)&buf[16];
        *(_OWORD *)v236 = *(_OWORD *)buf;
        *((_OWORD *)v37 + 1) = v38;
        long long v39 = v253;
        long long v40 = v254;
        long long v41 = v256;
        *((_OWORD *)v37 + 4) = v255;
        *((_OWORD *)v37 + 5) = v41;
        *((_OWORD *)v37 + 2) = v39;
        *((_OWORD *)v37 + 3) = v40;
        unint64_t v42 = v37 + 96;
      }
      v236 = v42;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    double v59 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134283521;
      *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "@WifiCalc, zaxis, num accessPointsToUseInCalculation, %{private}lu", buf, 0xCu);
    }
    unint64_t v60 = v227;
    long long v61 = v228;
    long long v62 = v229;
    long long v63 = v230;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                             * ((v236 - (unsigned char *)v235) >> 5);
      v210 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v210);
      if (v210 != buf) {
        free(v210);
      }
      unint64_t v60 = v227;
      long long v61 = v228;
      long long v62 = v229;
      long long v63 = v230;
    }
    int v64 = v242;
    *long long v63 = v242 ^ 1;
    int v223 = v64;
    if (!v64)
    {
      *long long v63 = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5) >= (int)sub_10063DD4C(a11);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      __int16 v65 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        BOOL v66 = *v63;
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v66;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "@WifiCalc, zaxis, hasSufficientData, %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        BOOL v215 = *v230;
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v215;
        v216 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v216);
        if (v216 != buf) {
          free(v216);
        }
        unint64_t v60 = v227;
        long long v61 = v228;
        long long v62 = v229;
        long long v63 = v230;
      }
    }
    unint64_t v67 = v235;
    if (v236 - (unsigned char *)v235 == 96)
    {
      *a3 = *((void *)v235 + 2);
      double v68 = *((double *)v67 + 5);
      double v69 = v68 * *((double *)sub_1000DBFA0() + 32);
      *unint64_t v60 = v69;
      BOOL v70 = v69 > 0.0 && !*v63;
      if (v70)
      {
        long long v71 = sub_1000DBFA0();
        double v72 = *v60;
        if (*v60 < *((double *)v71 + 28)) {
          double v72 = *((double *)v71 + 28);
        }
        *unint64_t v60 = v72;
      }
      long long v73 = (int *)v235;
      *long long v61 = -1431655765 * ((unint64_t)(v236 - (unsigned char *)v235) >> 5);
      *long long v62 = (double)v73[14];
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      long long v74 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v75 = *a3;
        double v76 = *v60;
        unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((v224[1] - *v224) >> 5);
        *(_DWORD *)std::string buf = 134284545;
        *(void *)&uint8_t buf[4] = v75;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v76;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v77;
        LOWORD(v253) = 2048;
        *(void *)((char *)&v253 + 2) = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
        WORD5(v253) = 1024;
        HIDWORD(v253) = v223 == 0;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "WifiCalc, est, %{private}0.3f, vunc, %{public}0.1f, numInputAps, %lu, numApsUsed, %lu, isSLAM, %d", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        std::string::size_type v211 = *a3;
        double v212 = *v227;
        unint64_t v213 = 0xAAAAAAAAAAAAAAABLL * ((v224[1] - *v224) >> 5);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134284545;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v211;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v212;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v248 = (char *)v213;
        *(_WORD *)v249 = 2048;
        *(void *)&v249[2] = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
        __int16 v250 = 1024;
        BOOL v251 = v223 == 0;
        v214 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v214);
        if (v214 != buf) {
          free(v214);
        }
        long long v61 = v228;
        long long v63 = v230;
      }
      *((_DWORD *)v235 + 21) = 1065353216;
      sub_100B39278(&__p);
      unint64_t v78 = *(void *)(a10 + 200);
      unint64_t v79 = *(void *)(a10 + 192);
      if (v79 >= v78)
      {
        uint64_t v127 = *(void *)(a10 + 184);
        unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - v127) >> 3);
        unint64_t v129 = v128 + 1;
        if (v128 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - v127) >> 3);
        if (2 * v130 > v129) {
          unint64_t v129 = 2 * v130;
        }
        if (v130 >= 0x555555555555555) {
          unint64_t v131 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v131 = v129;
        }
        *(void *)&long long v253 = a10 + 200;
        if (v131) {
          int v132 = (char *)sub_1000DA5D8(a10 + 200, v131);
        }
        else {
          int v132 = 0;
        }
        __int16 v155 = &v132[24 * v128];
        *(void *)std::string buf = v132;
        *(void *)&uint8_t buf[8] = v155;
        *(void *)&unsigned char buf[24] = &v132[24 * v131];
        long long v156 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v155 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)__int16 v155 = v156;
        memset(&__p, 0, sizeof(__p));
        *(void *)&uint8_t buf[16] = v155 + 24;
        sub_1001D7FEC((uint64_t *)(a10 + 184), buf);
        uint64_t v157 = *(void *)(a10 + 192);
        sub_1001D8184((uint64_t)buf);
        int v158 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a10 + 192) = v157;
        if (v158 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v80 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v79 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v79 = v80;
        *(void *)(a10 + 192) = v79 + 24;
      }
      if ((void **)(a10 + 160) != &v235) {
        sub_1006460C8((char *)(a10 + 160), (char *)v235, (uint64_t)v236, 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5));
      }
      int v159 = v245;
      int v160 = *((_DWORD *)v67 + 14);
      uint64_t v161 = v246;
      int v162 = *v61;
      BOOL v163 = *v63;
      *(_DWORD *)(a10 + 40) = v244;
      *(_DWORD *)(a10 + 44) = v159;
      *(_DWORD *)(a10 + 48) = v160;
      *(double *)(a10 + 56) = (double)v160;
      *(unsigned char *)(a10 + 64) = 0;
      *(void *)(a10 + 72) = 0;
      *(void *)(a10 + 80) = v161;
      *(_DWORD *)(a10 + 108) = v162;
      *(unsigned char *)(a10 + 144) = v163;
      goto LABEL_194;
    }
    unint64_t v81 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5));
    if (v236 == v235) {
      uint64_t v82 = 0;
    }
    else {
      uint64_t v82 = v81;
    }
    sub_100646260((unint64_t)v235, v236, v82, 1);
    unint64_t v83 = v236;
    while (1)
    {
      double v84 = v235;
      if (0xAAAAAAAAAAAAAAABLL * ((v83 - v84) >> 5) <= *((unsigned int *)sub_1000DBFA0() + 52)) {
        break;
      }
      unint64_t v83 = v236 - 96;
      v236 -= 96;
    }
    double v86 = (char *)v235;
    uint64_t v85 = v236;
    if (v235 == v236) {
      goto LABEL_195;
    }
    do
    {
      double v87 = *((double *)v86 + 8);
      *((_DWORD *)v86 + 21) = 0;
      double v88 = *((double *)v86 + 5);
      if (v88 > 0.0)
      {
        int v90 = *((_DWORD *)v86 + 13);
        int v89 = *((_DWORD *)v86 + 14);
        __int16 v91 = sub_1000DBFA0();
        sub_10063A4DC((double *)v91 + 45, (double)v89, (double)v90, v88, a9 - v87);
        *(float *)&double v92 = v92;
        *((_DWORD *)v86 + 21) = LODWORD(v92);
      }
      v86 += 96;
    }
    while (v86 != v85);
    double v93 = (char *)v235;
    double v86 = v236;
    if (v235 == v236) {
      goto LABEL_195;
    }
    double v94 = 0.0;
    __int16 v95 = (float *)v235;
    do
    {
      double v94 = v94 + v95[21];
      v95 += 24;
    }
    while (v95 != (float *)v236);
    if (v94 <= 0.0)
    {
LABEL_194:
      double v86 = (char *)v235;
LABEL_195:
      if (v86)
      {
        v236 = v86;
        operator delete(v86);
      }
LABEL_197:
      if (v238)
      {
        v239 = (char *)v238;
        operator delete(v238);
      }
      double v20 = v240;
      goto LABEL_200;
    }
    unint64_t v96 = (float *)v235;
    do
    {
      float v97 = v96[21] / v94;
      v96[21] = v97;
      v96 += 24;
    }
    while (v96 != (float *)v86);
    if ((void **)(a10 + 160) != &v235) {
      sub_1006460C8((char *)(a10 + 160), v93, (uint64_t)v86, 0xAAAAAAAAAAAAAAABLL * ((v86 - v93) >> 5));
    }
    int v226 = sub_10063B758(&v235);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    unint64_t v98 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = v226;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, isMultimodal, %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 67174657;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v226;
      v217 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v217);
      if (v217 != buf) {
        free(v217);
      }
    }
    v232 = 0;
    v233 = 0;
    uint64_t v234 = 0;
    sub_10063C484((uint64_t *)&v235, &v232);
    if (v232 != v233) {
      sub_1006460C8((char *)&v235, (char *)v232, (uint64_t)v233, 0xAAAAAAAAAAAAAAABLL * ((v233 - (unsigned char *)v232) >> 5));
    }
    unint64_t v99 = (char *)v235;
    BOOL v100 = v236;
    if (v235 != v236)
    {
      unint64_t v101 = (void *)(a10 + 184);
      do
      {
        long long v102 = *((_OWORD *)v99 + 1);
        *(_OWORD *)std::string buf = *(_OWORD *)v99;
        *(_OWORD *)&uint8_t buf[16] = v102;
        long long v103 = *((_OWORD *)v99 + 2);
        long long v104 = *((_OWORD *)v99 + 3);
        long long v105 = *((_OWORD *)v99 + 5);
        long long v255 = *((_OWORD *)v99 + 4);
        long long v256 = v105;
        long long v253 = v103;
        long long v254 = v104;
        sub_100B39278(&v231);
        unint64_t v107 = *(void *)(a10 + 192);
        unint64_t v106 = *(void *)(a10 + 200);
        if (v107 >= v106)
        {
          unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - *v101) >> 3);
          unint64_t v110 = v109 + 1;
          if (v109 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - *v101) >> 3);
          if (2 * v111 > v110) {
            unint64_t v110 = 2 * v111;
          }
          if (v111 >= 0x555555555555555) {
            unint64_t v112 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v112 = v110;
          }
          *(void *)v249 = a10 + 200;
          if (v112) {
            long long v113 = (char *)sub_1000DA5D8(a10 + 200, v112);
          }
          else {
            long long v113 = 0;
          }
          std::string::size_type v114 = (std::string::size_type)&v113[24 * v109];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
          __p.__r_.__value_.__l.__size_ = v114;
          v248 = &v113[24 * v112];
          long long v115 = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
          *(void *)(v114 + 16) = *((void *)&v231.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v114 = v115;
          memset(&v231, 0, sizeof(v231));
          __p.__r_.__value_.__r.__words[2] = v114 + 24;
          sub_1001D7FEC((uint64_t *)(a10 + 184), &__p);
          uint64_t v116 = *(void *)(a10 + 192);
          sub_1001D8184((uint64_t)&__p);
          int v117 = SHIBYTE(v231.__r_.__value_.__r.__words[2]);
          *(void *)(a10 + 192) = v116;
          if (v117 < 0) {
            operator delete(v231.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v108 = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
          *(void *)(v107 + 16) = *((void *)&v231.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v107 = v108;
          *(void *)(a10 + 192) = v107 + 24;
        }
        v99 += 96;
      }
      while (v99 != v100);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    long long v118 = &qword_102419000;
    long long v119 = qword_1024193A8;
    long long v121 = v229;
    long long v120 = v230;
    long long v122 = v225;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, num aps after outlier rejection, %lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                             * ((v236 - (unsigned char *)v235) >> 5);
      v218 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v218);
      if (v218 != buf) {
        free(v218);
      }
      long long v121 = v229;
      long long v120 = v230;
      long long v122 = v225;
    }
    long long v123 = (float *)v235;
    double v124 = 0.0;
    double v125 = 0.0;
    while (v123 != (float *)v236)
    {
      double v126 = v123[21];
      double v125 = v125 + v126 * *((double *)v123 + 2);
      double v124 = v124 + v126;
      v123 += 24;
    }
    double v133 = v125 / v124;
    if (v124 <= 0.0) {
      double v134 = 0.0;
    }
    else {
      double v134 = v133;
    }
    v135 = &qword_102419000;
    double v136 = sub_10063A5EC((uint64_t *)&v235, v134);
    if (v136 < 0.0)
    {
LABEL_265:
      if (v232)
      {
        v233 = v232;
        operator delete(v232);
      }
      goto LABEL_194;
    }
    unint64_t v137 = (char *)v235;
    __int16 v138 = v236;
    __int16 v139 = v235;
    if (v235 != v236)
    {
      __int16 v140 = (char *)v235 + 96;
      __int16 v139 = v235;
      if ((char *)v235 + 96 != v236)
      {
        __int16 v139 = v235;
        do
        {
          if (v139[14] < *((_DWORD *)v140 + 14)) {
            __int16 v139 = v140;
          }
          v140 += 96;
        }
        while (v140 != v236);
      }
    }
    int v141 = v139[14];
    *long long v122 = v141;
    double v142 = 0.0;
    if (v137 != v138)
    {
      uint64_t v143 = (int *)v137;
      do
      {
        double v142 = v142 + (double)v143[14];
        v143 += 24;
      }
      while (v143 != (int *)v138);
    }
    double *v121 = v142 / (double)(0xAAAAAAAAAAAAAAABLL * ((v138 - v137) >> 5));
    if (*(double *)sub_1000DBFA0() >= (double)v141
      || (int v144 = *v122, v145 = *v121, (double)v144 - v145 > *((double *)sub_1000DBFA0() + 2))
      && (double v146 = *v121, v146 < *((double *)sub_1000DBFA0() + 1)))
    {
      *long long v120 = 0;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    int v147 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v148 = *v122;
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v148;
      _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, maxRssi, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      int v219 = *v225;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v219;
      v220 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v220);
      if (v220 != buf) {
        free(v220);
      }
      long long v122 = v225;
      long long v118 = &qword_102419000;
      v135 = &qword_102419000;
    }
    int v149 = v245;
    if (*v122 != v245) {
      BOOL *v230 = 0;
    }
    int v150 = (double *)v235;
    int v151 = v236;
    if (v235 == v236)
    {
      int v152 = 0;
      double v154 = (char *)v235;
    }
    else
    {
      int v152 = 0;
      do
      {
        double v153 = v150[5];
        if (v153 > *((double *)sub_1000DBFA0() + 45)) {
          ++v152;
        }
        v150 += 12;
      }
      while (v150 != (double *)v151);
      int v150 = (double *)v235;
      double v154 = v236;
    }
    double v164 = *((double *)sub_1000DBFA0() + 39);
    double v165 = *((double *)sub_1000DBFA0() + 28);
    double v166 = *(double *)&v243;
    v167 = sub_1000DBFA0();
    double v168 = (double)v152 / (double)(0xAAAAAAAAAAAAAAABLL * ((v154 - (char *)v150) >> 5));
    double v169 = v136 * exp(v168 * v164);
    if (v136 >= v169) {
      double v169 = v136;
    }
    if (v165 < v169) {
      double v169 = v165;
    }
    double v170 = v169 * v166;
    if (*((double *)v167 + 28) >= v170) {
      double v171 = v170;
    }
    else {
      double v171 = *((double *)v167 + 28);
    }
    if (!v226)
    {
LABEL_253:
      char v202 = *v230;
      if (v171 >= 0.0)
      {
        if (*v230)
        {
          char v202 = 1;
        }
        else
        {
          v203 = sub_1000DBFA0();
          if (v171 < *((double *)v203 + 28)) {
            double v171 = *((double *)v203 + 28);
          }
          char v202 = *v230;
        }
        double *v227 = v171;
        *(double *)a3 = v134;
      }
      int v204 = -1431655765 * ((unint64_t)(v236 - (unsigned char *)v235) >> 5);
      int *v228 = v204;
      int v205 = *v225;
      double v206 = *v229;
      uint64_t v207 = v246;
      *(_DWORD *)(a10 + 40) = v244;
      *(_DWORD *)(a10 + 44) = v149;
      *(_DWORD *)(a10 + 48) = v205;
      *(double *)(a10 + 56) = v206;
      *(unsigned char *)(a10 + 64) = v226;
      *(double *)(a10 + 72) = v168;
      *(void *)(a10 + 80) = v207;
      *(_DWORD *)(a10 + 108) = v204;
      *(unsigned char *)(a10 + 144) = v202;
      if (v135[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      v208 = v118[117];
      if (os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v209 = 0xAAAAAAAAAAAAAAABLL * ((v224[1] - *v224) >> 5);
        *(_DWORD *)std::string buf = 134284545;
        *(double *)&uint8_t buf[4] = v134;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v171;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v209;
        LOWORD(v253) = 2048;
        *(void *)((char *)&v253 + 2) = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
        WORD5(v253) = 1024;
        HIDWORD(v253) = v223 == 0;
        _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEBUG, "WifiCalc, est, %{private}0.3f, vunc, %{public}0.1f, numInputAps, %lu, numApsUsed, %lu, isSLAM, %d", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v135[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        unint64_t v221 = 0xAAAAAAAAAAAAAAABLL * ((v224[1] - *v224) >> 5);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134284545;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v134;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v171;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v248 = (char *)v221;
        *(_WORD *)v249 = 2048;
        *(void *)&v249[2] = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
        __int16 v250 = 1024;
        BOOL v251 = v223 == 0;
        v222 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v222);
        if (v222 != buf) {
          free(v222);
        }
      }
      goto LABEL_265;
    }
    memset(buf, 0, 24);
    v172 = (char *)v238;
    v173 = v239;
    if (v238 == v239)
    {
      v185 = 0;
    }
    else
    {
      v174 = 0;
      do
      {
        uint64_t v175 = *((void *)v172 + 3);
        if ((unint64_t)v174 >= *(void *)&buf[16])
        {
          v176 = *(void **)buf;
          uint64_t v177 = ((uint64_t)v174 - *(void *)buf) >> 3;
          unint64_t v178 = v177 + 1;
          if ((unint64_t)(v177 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v179 = *(void *)&buf[16] - *(void *)buf;
          if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2 > v178) {
            unint64_t v178 = v179 >> 2;
          }
          if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v180 = v178;
          }
          if (v180)
          {
            v181 = (char *)sub_1000DA54C((uint64_t)&buf[16], v180);
            v176 = *(void **)buf;
            v174 = *(void **)&buf[8];
          }
          else
          {
            v181 = 0;
          }
          v182 = &v181[8 * v177];
          *(void *)v182 = v175;
          v183 = v182 + 8;
          while (v174 != v176)
          {
            uint64_t v184 = *--v174;
            *((void *)v182 - 1) = v184;
            v182 -= 8;
          }
          *(void *)std::string buf = v182;
          *(void *)&uint8_t buf[8] = v183;
          *(void *)&uint8_t buf[16] = &v181[8 * v180];
          if (v176) {
            operator delete(v176);
          }
          v174 = v183;
          v135 = &qword_102419000;
        }
        else
        {
          *v174++ = v175;
        }
        *(void *)&uint8_t buf[8] = v174;
        v172 += 96;
      }
      while (v172 != v173);
      v185 = *(double **)buf;
      uint64_t v186 = *(void *)buf + 8;
      if (*(void **)buf != v174 && v186 != (void)v174)
      {
        double v188 = **(double **)buf;
        double v189 = **(double **)buf;
        uint64_t v190 = *(void *)buf + 8;
        v191 = *(double **)buf;
        v192 = (double *)(*(void *)buf + 8);
        do
        {
          double v193 = *v192++;
          double v194 = v193;
          if (v189 < v193)
          {
            double v189 = v194;
            v191 = (double *)v190;
          }
          uint64_t v190 = (uint64_t)v192;
        }
        while (v192 != (double *)v174);
        double v195 = *v191;
        v196 = (double *)(*(void *)buf + 8);
        do
        {
          double v197 = *v196++;
          double v198 = v197;
          if (v197 < v188)
          {
            double v188 = v198;
            v185 = (double *)v186;
          }
          uint64_t v186 = (uint64_t)v196;
        }
        while (v196 != (double *)v174);
        goto LABEL_247;
      }
    }
    double v195 = *v185;
LABEL_247:
    double v199 = *v185;
    v200 = sub_1000DBFA0();
    double v201 = v195 - v199;
    if (*((double *)v200 + 28) < v195 - v199) {
      double v201 = *((double *)v200 + 28);
    }
    if (v171 < v201) {
      double v171 = v201;
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    goto LABEL_253;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF670);
  }
  double v33 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, apCollection is empty", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    unint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidAltitude(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, double &, double &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v34);
    if (v34 != buf) {
      free(v34);
    }
  }
}

void sub_1006407D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a35) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t sub_100640940@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_10106EBF0(a1)) {
    int v4 = sub_10106EC00(a1);
  }
  else {
    int v4 = -1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(_DWORD *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)a1;
  BOOL v9 = *(unsigned char *)(a1 + 88) != 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  int32x2_t result = vrev64_s32(*(int32x2_t *)(a1 + 48));
  *(int32x2_t *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v7;
  *(void *)(a2 + 72) = v8;
  *(unsigned char *)(a2 + 88) = v9;
  return result;
}

void sub_1006409CC(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, int *a10, int *a11, double *a12, uint64_t a13, uint64_t a14, int *a15, double *a16, BOOL *a17, int *a18, uint64_t *a19, uint64_t a20,int a21)
{
  *(void *)(a14 + 96) = 0;
  *(void *)(a14 + 104) = 0;
  *(_DWORD *)(a14 + 112) = 0;
  *(void *)(a14 + 136) = 0;
  *(void *)(a14 + 144) = 0;
  *(void *)(a14 + 128) = 0;
  *(unsigned char *)(a14 + 152) = 0;
  *(_DWORD *)a14 = 0xFFFF;
  *(void *)(a14 + 12) = 0;
  *(void *)(a14 + 4) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a14 + 36) = _Q0;
  *(_OWORD *)(a14 + 52) = _Q0;
  *(_OWORD *)(a14 + 68) = _Q0;
  *(_DWORD *)(a14 + 84) = 0;
  *(void *)(a14 + 88) = 0xBFF0000000000000;
  *(void *)(a14 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a14 + 124) = 0x7FFFFFFF;
  *(_OWORD *)(a14 + 20) = xmmword_101D250A0;
  *a11 = -1;
  *a10 = -1;
  std::string __p = 0;
  long long v80 = 0;
  unint64_t v81 = 0;
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  if (*a2 != v27)
  {
    unint64_t v78 = (double *)(a14 + 36);
    std::string::size_type v75 = (std::string::size_type *)(a14 + 28);
    do
    {
      if (sub_10106EB1C((double *)v26) && *(double *)(v26 + 32) > 0.0)
      {
        int v31 = v80;
        if (v80 >= v81)
        {
          long long v37 = (char *)__p;
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (unsigned char *)__p) >> 5);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v81 - (unsigned char *)__p) >> 5) > v39) {
            unint64_t v39 = 0x5555555555555556 * ((v81 - (unsigned char *)__p) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v81 - (unsigned char *)__p) >> 5) >= 0x155555555555555) {
            unint64_t v40 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40)
          {
            long long v41 = (char *)sub_100642EA8((uint64_t)&v81, v40);
            long long v37 = (char *)__p;
            int v31 = v80;
          }
          else
          {
            long long v41 = 0;
          }
          unint64_t v42 = &v41[32 * ((v80 - (unsigned char *)__p) >> 5)];
          long long v43 = *(_OWORD *)(v26 + 16);
          *(_OWORD *)unint64_t v42 = *(_OWORD *)v26;
          *((_OWORD *)v42 + 1) = v43;
          long long v44 = *(_OWORD *)(v26 + 32);
          long long v45 = *(_OWORD *)(v26 + 48);
          long long v46 = *(_OWORD *)(v26 + 80);
          *((_OWORD *)v42 + 4) = *(_OWORD *)(v26 + 64);
          *((_OWORD *)v42 + 5) = v46;
          *((_OWORD *)v42 + 2) = v44;
          *((_OWORD *)v42 + 3) = v45;
          if (v31 == v37)
          {
            long long v52 = &v41[96 * v38];
          }
          else
          {
            int v47 = &v41[96 * v38];
            do
            {
              long long v48 = *((_OWORD *)v31 - 5);
              *((_OWORD *)v47 - 6) = *((_OWORD *)v31 - 6);
              *((_OWORD *)v47 - 5) = v48;
              long long v49 = *((_OWORD *)v31 - 4);
              long long v50 = *((_OWORD *)v31 - 3);
              long long v51 = *((_OWORD *)v31 - 1);
              long long v52 = v47 - 96;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v31 - 2);
              *((_OWORD *)v47 - 1) = v51;
              *((_OWORD *)v47 - 4) = v49;
              *((_OWORD *)v47 - 3) = v50;
              v31 -= 96;
              v47 -= 96;
            }
            while (v31 != v37);
          }
          long long v36 = v42 + 96;
          std::string __p = v52;
          long long v80 = v42 + 96;
          unint64_t v81 = &v41[96 * v40];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)(v26 + 16);
          *(_OWORD *)long long v80 = *(_OWORD *)v26;
          *((_OWORD *)v31 + 1) = v32;
          long long v33 = *(_OWORD *)(v26 + 32);
          long long v34 = *(_OWORD *)(v26 + 48);
          long long v35 = *(_OWORD *)(v26 + 80);
          *((_OWORD *)v31 + 4) = *(_OWORD *)(v26 + 64);
          *((_OWORD *)v31 + 5) = v35;
          *((_OWORD *)v31 + 2) = v33;
          *((_OWORD *)v31 + 3) = v34;
          long long v36 = v31 + 96;
        }
        long long v80 = v36;
      }
      v26 += 96;
    }
    while (v26 != v27);
    long long v53 = v80;
    if (__p != v80)
    {
      if (a1 && *(void *)(a1 + 16) < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5)) {
        __assert_rtn("calculateWifiCentroidRssiMaxreach", "CLLocationCalculator.mm", 1153, "allScannedExcludingMovingWifiApsMacToRssiVertical->size() >= apCollectionVertical.size()");
      }
      long long v54 = (uint64_t *)(a14 + 28);
      long long v55 = (double *)(a14 + 36);
      sub_10063EC54(a1, a3, v75, v78, a15, a16, a17, a18, a5, a20, a21);
      long long v56 = a11;
      if (sub_1012F1E20((double *)v75, v78))
      {
        long long v57 = sub_1000DBFA0();
        double v61 = *v78;
        if (*v78 < *((double *)v57 + 27)) {
          double v61 = *((double *)v57 + 27);
        }
        double *v78 = v61;
        std::string::size_type v62 = *v75;
        *(unsigned char *)(a20 + 104) = 1;
        *(void *)a20 = v62;
        *(double *)(a20 + 8) = v61;
      }
      else
      {
        double v63 = *v78;
        if ((*(void *)v78 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF670);
          }
          int v64 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "WifiCalc, zaxis, inf unc", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BF670);
            }
            LOWORD(v82) = 0;
            long long v73 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, LatLonDebuggingData &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double)", "%s\n", v73);
            if (v73 != (char *)buf) {
              free(v73);
            }
            long long v56 = a11;
            long long v55 = (double *)(a14 + 36);
            long long v54 = (uint64_t *)(a14 + 28);
          }
          double v63 = *v55;
        }
        if (v63 != -1.0)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF670);
          }
          __int16 v65 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
          {
            uint64_t v66 = *v54;
            double v67 = *v55;
            *(_DWORD *)std::string buf = 134283777;
            uint64_t v87 = v66;
            __int16 v88 = 2049;
            double v89 = v67;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "WifiCalc, zaxis, invalid signleshot alt, %{private}.2f, unc, %{private}.2f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BF670);
            }
            std::string::size_type v70 = *v75;
            double v71 = *v78;
            int v82 = 134283777;
            std::string::size_type v83 = v70;
            __int16 v84 = 2049;
            double v85 = v71;
            double v72 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, LatLonDebuggingData &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double)", "%s\n", v72);
            if (v72 != (char *)buf) {
              free(v72);
            }
            long long v56 = a11;
            long long v55 = (double *)(a14 + 36);
          }
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        double v68 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, invalid vertical accuracy!", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BF670);
          }
          LOWORD(v82) = 0;
          double v69 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, LatLonDebuggingData &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double)", "%s\n", v69);
          if (v69 != (char *)buf) {
            free(v69);
          }
          long long v56 = a11;
          long long v55 = (double *)(a14 + 36);
        }
        *long long v55 = -1.0;
      }
      sub_1006411B4((uint64_t *)&__p, v61, a5, a6, v58, v59, v60, a10, v56, a12, a13, a14, a19);
      long long v53 = (char *)__p;
    }
    if (v53)
    {
      long long v80 = v53;
      operator delete(v53);
    }
  }
}

void sub_100641184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006411B4(uint64_t *a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, int *a9, double *a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  unint64_t v16 = a10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247C848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247C848))
  {
    sub_101171D90((uint64_t)dbl_10247C820);
    __cxa_guard_release(&qword_10247C848);
    unint64_t v16 = a10;
  }
  double v17 = *(double *)(a12 + 28);
  v235 = 0;
  v236 = 0;
  unint64_t v237 = 0;
  double v18 = *(double *)(a11 + 76);
  double v19 = *(double *)(a11 + 20);
  *unint64_t v16 = -1.0;
  if (v19 >= 0.0 && v19 < *((double *)sub_101412290() + 12)) {
    double v19 = *((double *)sub_101412290() + 12);
  }
  uint64_t v21 = *a1;
  uint64_t v20 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 5) > *((unsigned int *)sub_101412290() + 26) || v19 < 0.0)
  {
    if (*(_DWORD *)(a11 + 96) != 4) {
      goto LABEL_66;
    }
    BOOL v23 = 0;
  }
  else
  {
    double v22 = *((double *)sub_101412290() + 14);
    BOOL v23 = a3 - v18 <= v22;
    if (*(_DWORD *)(a11 + 96) != 4)
    {
      if (a3 - v18 > v22) {
        goto LABEL_66;
      }
      goto LABEL_16;
    }
  }
  unsigned int v24 = *(_DWORD *)(a11 + 84);
  if (v24 <= *((_DWORD *)sub_101412290() + 27) || !v23)
  {
LABEL_66:
    uint64_t v64 = *a1;
    uint64_t v63 = a1[1];
    if (*a1 != v63)
    {
      do
      {
        sub_100640940(v64, (uint64_t)v254);
        __int16 v65 = v236;
        if ((unint64_t)v236 >= v237)
        {
          double v71 = (char *)v235;
          unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
          unint64_t v73 = v72 + 1;
          if (v72 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((uint64_t)(v237 - (void)v235) >> 5) > v73) {
            unint64_t v73 = 0x5555555555555556 * ((uint64_t)(v237 - (void)v235) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - (void)v235) >> 5) >= 0x155555555555555) {
            unint64_t v74 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v74 = v73;
          }
          if (v74)
          {
            std::string::size_type v75 = (char *)sub_100642EA8((uint64_t)&v237, v74);
            double v71 = (char *)v235;
            __int16 v65 = v236;
          }
          else
          {
            std::string::size_type v75 = 0;
          }
          double v76 = &v75[32 * ((v236 - (unsigned char *)v235) >> 5)];
          long long v77 = *(_OWORD *)&v254[16];
          *(_OWORD *)double v76 = *(_OWORD *)v254;
          *((_OWORD *)v76 + 1) = v77;
          long long v78 = *(_OWORD *)v255;
          long long v79 = *(_OWORD *)&v255[16];
          long long v80 = v257;
          *((_OWORD *)v76 + 4) = v256;
          *((_OWORD *)v76 + 5) = v80;
          *((_OWORD *)v76 + 2) = v78;
          *((_OWORD *)v76 + 3) = v79;
          if (v65 == v71)
          {
            double v86 = &v75[96 * v72];
          }
          else
          {
            unint64_t v81 = &v75[96 * v72];
            do
            {
              long long v82 = *((_OWORD *)v65 - 5);
              *((_OWORD *)v81 - 6) = *((_OWORD *)v65 - 6);
              *((_OWORD *)v81 - 5) = v82;
              long long v83 = *((_OWORD *)v65 - 4);
              long long v84 = *((_OWORD *)v65 - 3);
              long long v85 = *((_OWORD *)v65 - 2);
              double v86 = v81 - 96;
              *(_OWORD *)(v81 - 23) = *(_OWORD *)(v65 - 23);
              *((_OWORD *)v81 - 3) = v84;
              *((_OWORD *)v81 - 2) = v85;
              *((_OWORD *)v81 - 4) = v83;
              v65 -= 96;
              v81 -= 96;
            }
            while (v65 != v71);
          }
          std::string::size_type v70 = v76 + 96;
          v235 = v86;
          v236 = v76 + 96;
          unint64_t v237 = (unint64_t)&v75[96 * v74];
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          long long v66 = *(_OWORD *)&v254[16];
          *(_OWORD *)v236 = *(_OWORD *)v254;
          *((_OWORD *)v65 + 1) = v66;
          long long v67 = *(_OWORD *)v255;
          long long v68 = *(_OWORD *)&v255[16];
          long long v69 = v257;
          *((_OWORD *)v65 + 4) = v256;
          *((_OWORD *)v65 + 5) = v69;
          *((_OWORD *)v65 + 2) = v67;
          *((_OWORD *)v65 + 3) = v68;
          std::string::size_type v70 = v65 + 96;
        }
        v236 = v70;
        v64 += 96;
      }
      while (v64 != v63);
    }
LABEL_86:
    int v87 = 0;
    goto LABEL_91;
  }
LABEL_16:
  uint64_t v26 = *a1;
  uint64_t v27 = a1[1];
  if (*a1 == v27)
  {
    uint64_t v88 = *a1;
  }
  else
  {
    long long v28 = &qword_102419000;
    do
    {
      double v29 = sub_1000F1648(dbl_10247C820, *(double *)(a11 + 4), *(double *)(a11 + 12), *(double *)(v26 + 8), *(double *)(v26 + 16), 0.0);
      double v30 = (double)*(int *)(v26 + 48);
      if (*(double *)(v26 + 32) >= v30) {
        double v30 = *(double *)(v26 + 32);
      }
      if (v29 - v30 - v19 <= 0.0)
      {
        sub_100640940(v26, (uint64_t)v254);
        long long v41 = v236;
        if ((unint64_t)v236 >= v237)
        {
          int v47 = (char *)v235;
          unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
          unint64_t v49 = v48 + 1;
          if (v48 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((uint64_t)(v237 - (void)v235) >> 5) > v49) {
            unint64_t v49 = 0x5555555555555556 * ((uint64_t)(v237 - (void)v235) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - (void)v235) >> 5) >= 0x155555555555555) {
            unint64_t v50 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v50 = v49;
          }
          if (v50)
          {
            long long v51 = (char *)sub_100642EA8((uint64_t)&v237, v50);
            int v47 = (char *)v235;
            long long v41 = v236;
          }
          else
          {
            long long v51 = 0;
          }
          long long v52 = &v51[32 * ((v236 - (unsigned char *)v235) >> 5)];
          long long v53 = *(_OWORD *)&v254[16];
          *(_OWORD *)long long v52 = *(_OWORD *)v254;
          *((_OWORD *)v52 + 1) = v53;
          long long v54 = *(_OWORD *)v255;
          long long v55 = *(_OWORD *)&v255[16];
          long long v56 = v257;
          *((_OWORD *)v52 + 4) = v256;
          *((_OWORD *)v52 + 5) = v56;
          *((_OWORD *)v52 + 2) = v54;
          *((_OWORD *)v52 + 3) = v55;
          if (v41 == v47)
          {
            std::string::size_type v62 = &v51[96 * v48];
          }
          else
          {
            long long v57 = &v51[96 * v48];
            do
            {
              long long v58 = *((_OWORD *)v41 - 5);
              *((_OWORD *)v57 - 6) = *((_OWORD *)v41 - 6);
              *((_OWORD *)v57 - 5) = v58;
              long long v59 = *((_OWORD *)v41 - 4);
              long long v60 = *((_OWORD *)v41 - 3);
              long long v61 = *((_OWORD *)v41 - 2);
              std::string::size_type v62 = v57 - 96;
              *(_OWORD *)(v57 - 23) = *(_OWORD *)(v41 - 23);
              *((_OWORD *)v57 - 3) = v60;
              *((_OWORD *)v57 - 2) = v61;
              *((_OWORD *)v57 - 4) = v59;
              v41 -= 96;
              v57 -= 96;
            }
            while (v41 != v47);
          }
          long long v46 = v52 + 96;
          v235 = v62;
          v236 = v52 + 96;
          unint64_t v237 = (unint64_t)&v51[96 * v50];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          long long v42 = *(_OWORD *)&v254[16];
          *(_OWORD *)v236 = *(_OWORD *)v254;
          *((_OWORD *)v41 + 1) = v42;
          long long v43 = *(_OWORD *)v255;
          long long v44 = *(_OWORD *)&v255[16];
          long long v45 = v257;
          *((_OWORD *)v41 + 4) = v256;
          *((_OWORD *)v41 + 5) = v45;
          *((_OWORD *)v41 + 2) = v43;
          *((_OWORD *)v41 + 3) = v44;
          long long v46 = v41 + 96;
        }
        v236 = v46;
      }
      else
      {
        if (v28[198] != -1) {
          dispatch_once(&qword_102419630, &stru_1022BF690);
        }
        int v31 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
        {
          CFAbsoluteTimeGetCurrent();
          sub_10106E024(v26);
          int v32 = v254[23];
          long long v33 = *(unsigned char **)v254;
          sub_1000AB340(a11);
          long long v34 = v254;
          if (v32 < 0) {
            long long v34 = v33;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v34;
          __int16 v247 = 2080;
          v248 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning WIFI_LOC: filtered by location hint, ap, %s, hint, %s", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          long long v28 = &qword_102419000;
          if ((v254[23] & 0x80000000) != 0) {
            operator delete(*(void **)v254);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v254, 0x65CuLL);
          if (v28[198] != -1) {
            dispatch_once(&qword_102419630, &stru_1022BF690);
          }
          CFAbsoluteTimeGetCurrent();
          sub_10106E024(v26);
          int v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v37 = __p.__r_.__value_.__r.__words[0];
          sub_1000AB340(a11);
          unint64_t v38 = &__p;
          if (v36 < 0) {
            unint64_t v38 = (std::string *)v37;
          }
          unint64_t v39 = buf;
          if (v249 < 0) {
            unint64_t v39 = *(unsigned char **)buf;
          }
          int v250 = 136315394;
          BOOL v251 = v38;
          __int16 v252 = 2080;
          long long v253 = v39;
          unint64_t v40 = (char *)_os_log_send_and_compose_impl();
          if (v249 < 0) {
            operator delete(*(void **)buf);
          }
          long long v28 = &qword_102419000;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v40);
          if (v40 != v254) {
            free(v40);
          }
        }
      }
      v26 += 96;
    }
    while (v26 != v27);
    uint64_t v26 = *a1;
    uint64_t v88 = a1[1];
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v88 - v26) >> 5) >= *((unsigned int *)sub_101412290() + 22) && v235 == v236)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF690);
    }
    uint64_t v186 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
      *(_DWORD *)long long v254 = 134218240;
      *(void *)&v254[4] = v187;
      *(_WORD *)&v254[12] = 2048;
      *(void *)&v254[14] = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "#Warning WIFI_LOC: revert hint, %lu, %lu", v254, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v254, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF690);
      }
      unint64_t v226 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v226;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 0xAAAAAAAAAAAAAAABLL
                                                                                 * ((v236 - (unsigned char *)v235) >> 5);
      v227 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v227);
      if (v227 != v254) {
        free(v227);
      }
    }
    uint64_t v189 = *a1;
    uint64_t v188 = a1[1];
    if (*a1 != v188)
    {
      do
      {
        sub_100640940(v189, (uint64_t)v254);
        uint64_t v190 = v236;
        if ((unint64_t)v236 >= v237)
        {
          v196 = (char *)v235;
          unint64_t v197 = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
          unint64_t v198 = v197 + 1;
          if (v197 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((uint64_t)(v237 - (void)v235) >> 5) > v198) {
            unint64_t v198 = 0x5555555555555556 * ((uint64_t)(v237 - (void)v235) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - (void)v235) >> 5) >= 0x155555555555555) {
            unint64_t v199 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v199 = v198;
          }
          if (v199)
          {
            v200 = (char *)sub_100642EA8((uint64_t)&v237, v199);
            v196 = (char *)v235;
            uint64_t v190 = v236;
          }
          else
          {
            v200 = 0;
          }
          double v201 = &v200[32 * ((v236 - (unsigned char *)v235) >> 5)];
          long long v202 = *(_OWORD *)&v254[16];
          *(_OWORD *)double v201 = *(_OWORD *)v254;
          *((_OWORD *)v201 + 1) = v202;
          long long v203 = *(_OWORD *)v255;
          long long v204 = *(_OWORD *)&v255[16];
          long long v205 = v257;
          *((_OWORD *)v201 + 4) = v256;
          *((_OWORD *)v201 + 5) = v205;
          *((_OWORD *)v201 + 2) = v203;
          *((_OWORD *)v201 + 3) = v204;
          if (v190 == v196)
          {
            std::string::size_type v211 = &v200[96 * v197];
          }
          else
          {
            double v206 = &v200[96 * v197];
            do
            {
              long long v207 = *((_OWORD *)v190 - 5);
              *((_OWORD *)v206 - 6) = *((_OWORD *)v190 - 6);
              *((_OWORD *)v206 - 5) = v207;
              long long v208 = *((_OWORD *)v190 - 4);
              long long v209 = *((_OWORD *)v190 - 3);
              long long v210 = *((_OWORD *)v190 - 2);
              std::string::size_type v211 = v206 - 96;
              *(_OWORD *)(v206 - 23) = *(_OWORD *)(v190 - 23);
              *((_OWORD *)v206 - 3) = v209;
              *((_OWORD *)v206 - 2) = v210;
              *((_OWORD *)v206 - 4) = v208;
              v190 -= 96;
              v206 -= 96;
            }
            while (v190 != v196);
          }
          double v195 = v201 + 96;
          v235 = v211;
          v236 = v201 + 96;
          unint64_t v237 = (unint64_t)&v200[96 * v199];
          if (v196) {
            operator delete(v196);
          }
        }
        else
        {
          long long v191 = *(_OWORD *)&v254[16];
          *(_OWORD *)v236 = *(_OWORD *)v254;
          *((_OWORD *)v190 + 1) = v191;
          long long v192 = *(_OWORD *)v255;
          long long v193 = *(_OWORD *)&v255[16];
          long long v194 = v257;
          *((_OWORD *)v190 + 4) = v256;
          *((_OWORD *)v190 + 5) = v194;
          *((_OWORD *)v190 + 2) = v192;
          *((_OWORD *)v190 + 3) = v193;
          double v195 = v190 + 96;
        }
        v236 = v195;
        v189 += 96;
      }
      while (v189 != v188);
    }
    goto LABEL_86;
  }
  int v87 = 1;
LABEL_91:
  unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v236 - (unsigned char *)v235) >> 5);
  unint64_t v90 = 126 - 2 * __clz(v89);
  if (v236 == v235) {
    uint64_t v91 = 0;
  }
  else {
    uint64_t v91 = v90;
  }
  sub_100647DE0((unint64_t)v235, v236, v91, 1);
  double v92 = v236;
  while (1)
  {
    double v93 = sub_101412290();
    unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v92 - (unsigned char *)v235) >> 5);
    __int16 v95 = v236;
    if (v94 <= *((unsigned int *)v93 + 21)) {
      break;
    }
    double v92 = v236 - 96;
    v236 -= 96;
  }
  unint64_t v96 = (char *)v235;
  int64_t v97 = v236 - (unsigned char *)v235;
  if (v236 == v235) {
    goto LABEL_116;
  }
  do
  {
    double v98 = *((double *)v96 + 8);
    int v100 = *((_DWORD *)v96 + 13);
    int v99 = *((_DWORD *)v96 + 14);
    double v101 = *((double *)v96 + 4);
    long long v102 = sub_101412290();
    sub_10063A4DC((double *)v102, (double)v99, (double)v100, v101, a3 - v98);
    *(float *)&double v103 = v103;
    *((_DWORD *)v96 + 20) = LODWORD(v103);
    v96 += 96;
  }
  while (v96 != v95);
  long long v104 = (double *)v235;
  if (v235 == v236)
  {
LABEL_116:
    char v230 = 1;
  }
  else
  {
    double v105 = -360.0;
    double v106 = 360.0;
    do
    {
      double v107 = v104[1];
      if (v107 > v105) {
        double v105 = v104[1];
      }
      if (v107 < v106) {
        double v106 = v104[1];
      }
      v104 += 12;
    }
    while (v104 != (double *)v236);
    char v230 = 1;
    if (v105 > 179.9 && v106 < -179.9)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      long long v108 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long v254 = 134349312;
        *(double *)&v254[4] = v106;
        *(_WORD *)&v254[12] = 2050;
        *(double *)&v254[14] = v105;
        _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "WifiCalc, b360repr, min, %{public}.1lf, max, %{public}.1lf", v254, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v254, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v106;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v105;
        v225 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v225);
        if (v225 != v254) {
          free(v225);
        }
      }
      unint64_t v109 = (long double *)v235;
      unint64_t v110 = v236;
      if (v235 != v236)
      {
        do
        {
          v109[1] = fmod(v109[1] + 360.0, 360.0);
          v109 += 12;
        }
        while (v109 != (long double *)v110);
      }
      char v230 = 0;
    }
  }
  unint64_t v111 = sub_101412290();
  int v232 = sub_100ACCD4C((double **)&v235, v17, a4, *((unsigned __int8 *)v111 + 120));
  int64_t v112 = (v236 - (unsigned char *)v235) >> 5;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF670);
  }
  unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * (v97 >> 5);
  std::string::size_type v114 = qword_1024193A8;
  unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * v112;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    uint64_t v117 = *(void *)(a11 + 20);
    *(_DWORD *)long long v254 = 134350592;
    *(void *)&v254[4] = v116;
    *(_WORD *)&v254[12] = 2050;
    *(void *)&v254[14] = v89;
    *(_WORD *)&v254[22] = 2050;
    *(void *)&v254[24] = v113;
    *(_WORD *)long long v255 = 2050;
    *(void *)&v255[2] = v115;
    *(_WORD *)&v255[10] = 1026;
    *(_DWORD *)&v255[12] = v232;
    *(_WORD *)&v255[16] = 2050;
    *(void *)&v255[18] = v117;
    *(_WORD *)&v255[26] = 1026;
    *(_DWORD *)&v255[28] = v87;
    _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "WifiCalc, counts, %{public}ld, %{public}ld, %{public}ld, %{public}ld, verified, %{public}d, hint, %{public}.1f, %{public}d", v254, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v254, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    unint64_t v212 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    uint64_t v213 = *(void *)(a11 + 20);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134350592;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v212;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v89;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
    double v239 = *(double *)&v113;
    __int16 v240 = 2050;
    double v241 = *(double *)&v115;
    __int16 v242 = 1026;
    *(_DWORD *)uint64_t v243 = v232;
    *(_WORD *)&v243[4] = 2050;
    *(void *)&v243[6] = v213;
    __int16 v244 = 1026;
    int v245 = v87;
    v214 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v214);
    if (v214 != v254) {
      free(v214);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247C878, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247C878))
  {
    sub_101171D90((uint64_t)dbl_10247C850);
    __cxa_guard_release(&qword_10247C878);
  }
  long long v118 = (double *)v235;
  unint64_t v119 = (v236 - (unsigned char *)v235) / 96;
  if (v236 == v235)
  {
    int v121 = 0;
  }
  else
  {
    uint64_t v120 = 0;
    int v121 = 0;
    uint64_t v122 = 0;
    unint64_t v123 = v119 - 1;
    if (v119 <= 1) {
      int64_t v124 = 1;
    }
    else {
      int64_t v124 = (v236 - (unsigned char *)v235) / 96;
    }
    int64_t v234 = v124;
    do
    {
      uint64_t v125 = v122 + 1;
      unint64_t v126 = v119;
      if (v122 + 1 < v119)
      {
        uint64_t v127 = v120;
        unint64_t v128 = v123;
        do
        {
          long double v129 = sub_1000F1648(dbl_10247C850, v118[12 * v122], v118[12 * v122 + 1], *(double *)((char *)v118 + v127 + 96), *(double *)((char *)v118 + v127 + 104), 0.0);
          long long v118 = (double *)v235;
          if (v129 <= (double)(*(_DWORD *)((char *)v235 + v127 + 148) + *((_DWORD *)v235 + 24 * v122 + 13))) {
            ++v121;
          }
          v127 += 96;
          --v128;
        }
        while (v128);
      }
      --v123;
      v120 += 96;
      ++v122;
      unint64_t v119 = v126;
    }
    while (v125 != v234);
  }
  unint64_t v130 = (v119 - 1) * v119;
  if (v130 >= 2) {
    double v131 = (double)v121 * 100.0 / (double)(v130 >> 1);
  }
  else {
    double v131 = 100.0;
  }
  int v132 = a13;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BF670);
  }
  double v133 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long v254 = 134283521;
    *(double *)&v254[4] = v131;
    _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEBUG, "WifiCalc, apReachOverlapPercentage, %{private}f", v254, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v254, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v131;
    BOOL v215 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void analyzeApCentroidReachOverlap(const std::vector<CLWifiAccessPoint> &)", "%s\n", v215);
    if (v215 != v254) {
      free(v215);
    }
  }
  HIDWORD(v134) = -1775253149 * rand() + 28633112;
  LODWORD(v134) = HIDWORD(v134);
  if ((v134 >> 2) <= 0xDA740C)
  {
    *(void *)long long v254 = _NSConcreteStackBlock;
    *(void *)&v254[8] = 3221225472;
    *(void *)&v254[16] = sub_100642E00;
    *(void *)&v254[24] = &unk_1022AE8E0;
    *(double *)long long v255 = v131;
    *(void *)&v255[8] = v119;
    AnalyticsSendEventLazy();
  }
  v135 = v236;
  if (v235 != v236)
  {
    double v136 = (char *)v235 + 72;
    do
    {
      sub_100B39278(&__p);
      unint64_t v138 = v132[1];
      unint64_t v137 = v132[2];
      if (v138 >= v137)
      {
        uint64_t v140 = *v132;
        unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - *v132) >> 3);
        unint64_t v142 = v141 + 1;
        if (v141 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v137 - v140) >> 3);
        if (2 * v143 > v142) {
          unint64_t v142 = 2 * v143;
        }
        if (v143 >= 0x555555555555555) {
          unint64_t v144 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v144 = v142;
        }
        *(void *)long long v255 = a13 + 2;
        if (v144) {
          double v145 = (char *)sub_1000DA5D8((uint64_t)(a13 + 2), v144);
        }
        else {
          double v145 = 0;
        }
        double v146 = &v145[24 * v141];
        *(void *)long long v254 = v145;
        *(void *)&v254[8] = v146;
        *(void *)&v254[24] = &v145[24 * v144];
        long long v147 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v146 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)double v146 = v147;
        memset(&__p, 0, sizeof(__p));
        *(void *)&v254[16] = v146 + 24;
        sub_1001D7FEC(a13, v254);
        uint64_t v148 = a13[1];
        sub_1001D8184((uint64_t)v254);
        int v149 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a13[1] = v148;
        int v132 = a13;
        if (v149 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v139 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v138 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v138 = v139;
        v132[1] = v138 + 24;
      }
      if (v136[16]) {
        ++*((_DWORD *)v132 + 6);
      }
      int v150 = v136 + 24;
      v136 += 96;
    }
    while (v150 != v135);
  }
  uint64_t v151 = a12;
  if (v232)
  {
    int v152 = (double *)v235;
    double v153 = v236;
    if (v235 == v236)
    {
      double v162 = 0.0;
      double v163 = 1.79769313e308;
      double v161 = 0.0;
      double v154 = 0.0;
    }
    else
    {
      double v154 = 0.0;
      double v155 = 0.0;
      double v156 = 0.0;
      uint64_t v157 = (char *)v235;
      do
      {
        double v158 = *((float *)v157 + 20);
        double v159 = *(double *)v157;
        double v160 = *((double *)v157 + 1);
        v157 += 96;
        double v156 = v156 + v158 * v159;
        double v155 = v155 + v158 * v160;
        double v154 = v154 + v158;
      }
      while (v157 != v236);
      double v161 = 0.0;
      double v162 = 0.0;
      if (v154 > 0.0)
      {
        double v161 = v156 / v154;
        double v162 = v155 / v154;
      }
      double v163 = 1.79769313e308;
      if (v235 != v236)
      {
        do
        {
          if (v152[4] > 0.0)
          {
            double v164 = sub_1000F1648(dbl_10247C820, v161, v162, *v152, v152[1], v17);
            double v165 = v152[4];
            if (v165 < v164) {
              double v165 = v164;
            }
            if (v165 < v163) {
              double v163 = v165;
            }
            double v166 = v164 + (double)*((int *)v152 + 13);
            if (v166 >= *a10 && *a10 != -1.0) {
              double v166 = *a10;
            }
            *a10 = v166;
          }
          v152 += 12;
        }
        while (v152 != (double *)v153);
        int v152 = (double *)v235;
        double v168 = v236;
        uint64_t v151 = a12;
        goto LABEL_191;
      }
    }
    double v168 = (char *)v235;
LABEL_191:
    if (v163 >= 1.79769313e308) {
      double v172 = -1.0;
    }
    else {
      double v172 = v163;
    }
    *(double *)(v151 + 20) = v172;
    *(double *)(v151 + 4) = v161;
    *(double *)(v151 + 12) = v162;
    *(_DWORD *)(v151 + 132) = 1;
    *a9 = -1431655765 * ((unint64_t)(v168 - (char *)v152) >> 5);
    v173 = a8;
    *a8 = 0;
    if (*a10 < v172)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      v174 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        double v175 = *a10;
        *(_DWORD *)long long v254 = 134349312;
        *(double *)&v254[4] = v175;
        *(_WORD *)&v254[12] = 2050;
        *(double *)&v254[14] = v172;
        _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEBUG, "WifiCalc, invalid estimatedWorstCaseErrorMeters, estimatedWorstCaseErrorMeters, %{public}0.1f, hunc, %{public}0.1f, #Warning", v254, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v254, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BF670);
        }
        double v223 = *a10;
        LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v223;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v172;
        v224 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v224);
        if (v224 != v254) {
          free(v224);
        }
        v173 = a8;
      }
      *a10 = -1.0;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    v176 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      double v177 = *a10;
      int v178 = *a9;
      int v179 = *v173;
      *(_DWORD *)long long v254 = 134350593;
      *(double *)&v254[4] = v154;
      *(_WORD *)&v254[12] = 2049;
      *(double *)&v254[14] = v161;
      *(_WORD *)&v254[22] = 2049;
      *(double *)&v254[24] = v162;
      *(_WORD *)long long v255 = 2050;
      *(double *)&v255[2] = v172;
      *(_WORD *)&v255[10] = 2050;
      *(double *)&v255[12] = v177;
      *(_WORD *)&v255[20] = 1026;
      *(_DWORD *)&v255[22] = v178;
      *(_WORD *)&v255[26] = 1026;
      *(_DWORD *)&v255[28] = v179;
      _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEBUG, "WifiCalc, est, %{public}.1f, %{private}0.3f, %{private}0.3f, hunc, %{public}0.1f, estWorstError, %{public}0.1f, n, %{public}d, x, %{public}d", v254, 0x40u);
    }
    BOOL v180 = sub_10013D1A0(115, 2);
    uint64_t v151 = a12;
    if (v180)
    {
      bzero(v254, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      double v219 = *a10;
      int v220 = *a9;
      int v221 = *v173;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134350593;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v154;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v161;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
      double v239 = v162;
      __int16 v240 = 2050;
      double v241 = v172;
      __int16 v242 = 2050;
      *(double *)uint64_t v243 = v219;
      *(_WORD *)&v243[8] = 1026;
      *(_DWORD *)&v243[10] = v220;
      __int16 v244 = 1026;
      int v245 = v221;
      v222 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v222);
      if (v222 != v254) {
        free(v222);
      }
      uint64_t v151 = a12;
    }
    goto LABEL_206;
  }
  uint64_t v169 = *a1;
  if (a1[1] - *a1 == 96)
  {
    *(_OWORD *)(a12 + 4) = *(_OWORD *)(v169 + 8);
    *(_DWORD *)(a12 + 132) = 1;
    double v170 = *(double *)(v169 + 32);
    int v171 = *(_DWORD *)(v169 + 48);
    if (v170 < (double)v171 / 3.0) {
      double v170 = (double)v171 / 3.0;
    }
    *(double *)(a12 + 20) = v170;
    *a10 = (double)v171;
    *a9 = 1;
    *a8 = 1;
  }
  else
  {
    *a9 = 0;
    *a8 = 0;
  }
LABEL_206:
  char v181 = v230;
  if (*(double *)(v151 + 20) < 180.0) {
    char v181 = 1;
  }
  if ((v181 & 1) == 0)
  {
    double v182 = *(double *)(v151 + 12);
    if (v182 > 180.0)
    {
      do
        double v182 = v182 + -360.0;
      while (v182 > 180.0);
      *(double *)(v151 + 12) = v182;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BF670);
    }
    v183 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v184 = *(void *)(a12 + 4);
      uint64_t v185 = *(void *)(a12 + 12);
      *(_DWORD *)long long v254 = 134283777;
      *(void *)&v254[4] = v184;
      *(_WORD *)&v254[12] = 2049;
      *(void *)&v254[14] = v185;
      _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEBUG, "WifiCalc, b360repr, %{private}14.8lf, %{private}14.8lf", v254, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v254, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BF670);
      }
      std::string::size_type v216 = *(void *)(a12 + 4);
      std::string::size_type v217 = *(void *)(a12 + 12);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v216;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v217;
      v218 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v218);
      if (v218 != v254) {
        free(v218);
      }
    }
  }
  if (v235)
  {
    v236 = (char *)v235;
    operator delete(v235);
  }
}

void sub_100642CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100642DA0(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100642DD0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

NSDictionary *sub_100642E00(uint64_t a1)
{
  v4[0] = @"apReachOverlapPercentage";
  uint64_t v2 = +[NSNumber numberWithInt:(int)*(double *)(a1 + 32)];
  v4[1] = @"numOfAps";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

void *sub_100642EA8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_1001D7FA0();
  }
  return operator new(96 * a2);
}

void sub_100642EF0(double *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
double *sub_1006432E8(double *result, double *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  int v4 = result;
  do
  {
    char v5 = v4;
    int v4 = v2;
    double v6 = v5[2];
    double v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      double v8 = v5[3];
      if (v8 >= v5[1]) {
        goto LABEL_19;
      }
    }
    else
    {
      double v8 = v5[3];
    }
    void v5[2] = v7;
    v2[1] = v5[1];
    BOOL v9 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v10 = v3;
    while (1)
    {
      double v11 = *(double *)((char *)result + v10 - 16);
      if (v6 >= v11) {
        break;
      }
      double v12 = *(double *)((char *)result + v10 - 8);
LABEL_12:
      v5 -= 2;
      uint64_t v13 = (double *)((char *)result + v10);
      *uint64_t v13 = v11;
      v13[1] = v12;
      v10 -= 16;
      if (!v10)
      {
        BOOL v9 = result;
        goto LABEL_18;
      }
    }
    if (v11 >= v6)
    {
      BOOL v9 = (double *)((char *)result + v10);
      double v12 = *(double *)((char *)result + v10 - 8);
      if (v8 >= v12) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    BOOL v9 = v5;
LABEL_18:
    double *v9 = v6;
    v9[1] = v8;
LABEL_19:
    uint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

double *sub_1006433C0(double *result, double *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      for (unint64_t i = result + 1; ; i += 2)
      {
        int v4 = result;
        int32x2_t result = v2;
        double v5 = v4[2];
        double v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          double v7 = v4[3];
          if (v7 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }
      double v7 = v4[3];
LABEL_6:
      for (uint64_t j = i; ; j -= 2)
      {
        double v9 = *j;
        j[1] = v6;
        j[2] = v9;
        double v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2))) {
          break;
        }
      }
      *(j - 1) = v5;
      *uint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_10064345C(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    double v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    uint64_t v10 = a2 + 1;
    uint64_t v11 = *((void *)a2 + 1);
    a2[1] = a3[1];
    *((void *)a3 + 1) = v11;
    double v12 = *a2;
    double v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v10 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    double v6 = (uint64_t *)(a1 + 1);
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    double v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      double v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      double v7 = a3 + 1;
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      double v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      double v15 = *a3;
      double v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      double v7 = a3 + 1;
      uint64_t v8 = 2;
      double v6 = (uint64_t *)(a2 + 1);
    }
    uint64_t v10 = v7;
  }
  uint64_t v17 = *v6;
  uint64_t *v6 = *(void *)v10;
  *(void *)uint64_t v10 = v17;
  return v8;
}

double *sub_1006435B0(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (unint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      double v6 = i[2];
      i += 2;
      double v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      double v8 = *(a2 - 2);
      double v4 = v8;
    }
  }
  if (i < a2)
  {
    double v9 = *i;
    double v10 = *a2;
    do
    {
      *unint64_t i = v10;
      *a2 = v9;
      uint64_t v11 = *((void *)i + 1);
      i[1] = a2[1];
      *((void *)a2 + 1) = v11;
      do
      {
        double v12 = i[2];
        i += 2;
        double v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          double v13 = *(a2 - 2);
          a2 -= 2;
          double v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t sub_1006436F4(double *a1, double *a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  while (1)
  {
    double v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      double v7 = *(a2 - 2);
      a2 -= 2;
      double v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        double v9 = *(a2 - 2);
        a2 -= 2;
        double v10 = v9;
        if (v9 < v3) {
          break;
        }
        if (v3 < v10) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v13 = (unint64_t)&a1[v2 + 2];
  }
  else
  {
    double v12 = *a2;
    unint64_t v13 = (unint64_t)&a1[v2 + 2];
    double v14 = a2;
    do
    {
      *(double *)unint64_t v13 = v12;
      *double v14 = v5;
      uint64_t v15 = *(void *)(v13 + 8);
      *(double *)(v13 + 8) = v14[1];
      *((void *)v14 + 1) = v15;
      do
      {
        do
        {
          double v16 = *(double *)(v13 + 16);
          v13 += 16;
          double v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(double *)(v13 + 8) < v4);
      do
      {
        double v17 = *(v14 - 2);
        v14 -= 2;
        double v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < (unint64_t)v14);
  }
  if ((double *)(v13 - 16) != a1)
  {
    *a1 = *(double *)(v13 - 16);
    a1[1] = *(double *)(v13 - 8);
  }
  *(double *)(v13 - 16) = v3;
  *(double *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL sub_100643838(uint64_t a1, double *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 2);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1 || v7 >= v6 && *(a2 - 1) < *(double *)(a1 + 8))
      {
        *(double *)a1 = v6;
        *(a2 - 2) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(double *)(a1 + 8) = *(a2 - 1);
        *((void *)a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_10064345C((double *)a1, (double *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_100643A5C((double *)a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_100643B60((double *)a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 2));
      return 1;
    default:
      double v9 = (double *)(a1 + 32);
      sub_10064345C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      double v10 = (double *)(a1 + 48);
      if ((double *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    double v13 = *v10;
    double v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      double v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      double v15 = v10[1];
    }
    double *v10 = v14;
    v10[1] = v9[1];
    double v16 = (double *)a1;
    if (v9 == (double *)a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      uint64_t v18 = a1 + v17;
      double v19 = *(double *)(a1 + v17 + 16);
      if (v13 < v19)
      {
        double v20 = *(double *)(v18 + 24);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        double v16 = v9;
        goto LABEL_22;
      }
      double v20 = *(double *)(a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *(double *)(v18 + 32) = v19;
      *(double *)(a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        double v16 = (double *)a1;
        goto LABEL_22;
      }
    }
    double v16 = (double *)(a1 + v17 + 32);
LABEL_22:
    *double v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    double v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

double sub_100643A5C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10064345C(a1, (double *)a2, (double *)a3);
  double result = *(double *)a4;
  double v9 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3 || v9 >= result && *(double *)(a4 + 8) < *(double *)(a3 + 8))
  {
    *(double *)a3 = result;
    *(double *)a4 = v9;
    uint64_t v10 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    double result = *(double *)a3;
    double v11 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2 || v11 >= result && *(double *)(a3 + 8) < *(double *)(a2 + 8))
    {
      *(double *)a2 = result;
      *(double *)a3 = v11;
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v12;
      double result = *(double *)a2;
      double v13 = *a1;
      if (*(double *)a2 < *a1 || v13 >= result && *(double *)(a2 + 8) < a1[1])
      {
        *a1 = result;
        *(double *)a2 = v13;
        double result = a1[1];
        a1[1] = *(double *)(a2 + 8);
        *(double *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

double sub_100643B60(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100643A5C(a1, a2, a3, a4);
  double result = *(double *)a5;
  double v11 = *(double *)a4;
  if (*(double *)a5 < *(double *)a4 || v11 >= result && *(double *)(a5 + 8) < *(double *)(a4 + 8))
  {
    *(double *)a4 = result;
    *(double *)a5 = v11;
    uint64_t v12 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v12;
    double result = *(double *)a4;
    double v13 = *(double *)a3;
    if (*(double *)a4 < *(double *)a3 || v13 >= result && *(double *)(a4 + 8) < *(double *)(a3 + 8))
    {
      *(double *)a3 = result;
      *(double *)a4 = v13;
      uint64_t v14 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v14;
      double result = *(double *)a3;
      double v15 = *(double *)a2;
      if (*(double *)a3 < *(double *)a2 || v15 >= result && *(double *)(a3 + 8) < *(double *)(a2 + 8))
      {
        *(double *)a2 = result;
        *(double *)a3 = v15;
        uint64_t v16 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v16;
        double result = *(double *)a2;
        double v17 = *a1;
        if (*(double *)a2 < *a1 || v17 >= result && *(double *)(a2 + 8) < a1[1])
        {
          *a1 = result;
          *(double *)a2 = v17;
          double result = a1[1];
          a1[1] = *(double *)(a2 + 8);
          *(double *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100643CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (double *)(a1 + 16 * v10);
      do
      {
        sub_100643E3C(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        double v15 = *(double *)v14;
        double v16 = *(double *)a1;
        if (*(double *)v14 < *(double *)a1 || v16 >= v15 && *(double *)(v14 + 8) < *(double *)(a1 + 8))
        {
          *(double *)uint64_t v14 = v16;
          *(double *)a1 = v15;
          uint64_t v17 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v17;
          sub_100643E3C(a1, a4, v9, (double *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      double v19 = (double *)(a2 - 16);
      do
      {
        double v21 = *(double *)a1;
        uint64_t v20 = *(void *)(a1 + 8);
        sub_100643F80((double *)a1, a4, v18);
        if (v19 == v22)
        {
          double *v22 = v21;
          *((void *)v22 + 1) = v20;
        }
        else
        {
          double *v22 = *v19;
          v22[1] = v19[1];
          double *v19 = v21;
          *((void *)v19 + 1) = v20;
          sub_100644010(a1, (uint64_t)(v22 + 2), a4, ((uint64_t)v22 - a1 + 16) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_100643E3C(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (double *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && v8[1] < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      double v11 = *v8;
      double v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          double v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          double v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v14 = (double *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              double v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && v14[1] < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            double v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }
        uint64_t v14 = v8;
LABEL_23:
        *uint64_t v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

double sub_100643F80(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 2 * v3 + 2;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3)
    {
      double v9 = a1[2];
      if (*a1 < v9 || v9 >= *a1 && a1[1] < a1[3])
      {
        a1 += 2;
        uint64_t v3 = v8;
      }
    }
    double *v6 = *a1;
    double result = a1[1];
    v6[1] = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_100644010(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (double *)(result + 16 * (v4 >> 1));
    double v7 = *v6;
    double v8 = *(double *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      double v9 = *(double *)(a2 - 8);
      if (v6[1] >= v9) {
        return result;
      }
    }
    else
    {
      double v9 = *(double *)(a2 - 8);
    }
    *(double *)(a2 - 16) = v7;
    *(double *)(a2 - 8) = v6[1];
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        double v10 = (double *)(result + 16 * v5);
        double v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12) {
            break;
          }
          double v13 = v10[1];
          if (v13 >= v9) {
            break;
          }
        }
        else
        {
          double v13 = v10[1];
        }
        double *v6 = v12;
        v6[1] = v13;
        uint64_t v6 = (double *)(result + 16 * v5);
        if (v11 <= 1) {
          goto LABEL_13;
        }
      }
    }
    double v10 = v6;
LABEL_13:
    double *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

uint64_t sub_1006440B8(uint64_t a1, double *a2, double *a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10064413C((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_100644124(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10064413C(uint64_t **a1, double *a2, double *a3, uint64_t *a4)
{
  uint64_t v6 = sub_1006441C4(a1, a2, &v11, &v10, a3);
  double v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    double v8 = (uint64_t **)v6;
    double v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_1000EDF90(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

double *sub_1006441C4(void *a1, double *a2, double **a3, double *a4, double *a5)
{
  unint64_t v5 = (double *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (v6 = *a5, double v7 = a2[4], *a5 < v7))
  {
    double v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      double v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      double v9 = *(uint64_t **)a2;
      do
      {
        double v10 = (double *)v9;
        double v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      double v13 = a2;
      do
      {
        double v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        double v13 = v10;
      }
      while (v14);
    }
    double v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          double v17 = v16;
          double v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *(double **)v16;
          unint64_t v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v16 + 1;
        uint64_t v16 = (double *)*((void *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    double v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    double v12 = (double *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      double v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    double v19 = a2;
    do
    {
      a4 = (double *)*((void *)v19 + 2);
      BOOL v14 = *(void *)a4 == (void)v19;
      double v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          double v17 = v20;
          double v21 = v20[4];
          if (v6 >= v21) {
            break;
          }
          uint64_t v20 = *(double **)v20;
          unint64_t v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v21 >= v6) {
          break;
        }
        unint64_t v5 = v20 + 1;
        uint64_t v20 = (double *)*((void *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_100644360(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000DA584(a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1006443F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_100644404(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    sub_1001D7FA0();
  }
  return operator new(104 * a2);
}

void sub_100644450(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
__n128 sub_100645230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  result.n128_u64[0] = *(void *)a2;
  double v4 = *(double *)a1;
  double v5 = *(double *)a3;
  if (*(double *)a2 <= *(double *)a1)
  {
    if (v5 > result.n128_f64[0])
    {
      *(double *)a2 = v5;
      *(void *)a3 = result.n128_u64[0];
      long long v33 = *(_OWORD *)(a2 + 40);
      long long v37 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)unint64_t v41 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 88);
      long long v25 = *(_OWORD *)(a2 + 8);
      long long v29 = *(_OWORD *)(a2 + 24);
      long long v7 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v7;
      long long v8 = *(_OWORD *)(a3 + 56);
      long long v9 = *(_OWORD *)(a3 + 72);
      long long v10 = *(_OWORD *)(a3 + 81);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 81) = v10;
      *(_OWORD *)(a2 + 72) = v9;
      *(_OWORD *)(a2 + 56) = v8;
      *(_OWORD *)(a3 + 40) = v33;
      *(_OWORD *)(a3 + 56) = v37;
      *(_OWORD *)(a3 + 72) = *(_OWORD *)v41;
      *(_OWORD *)(a3 + 81) = *(_OWORD *)&v41[9];
      result.n128_u64[1] = *((void *)&v25 + 1);
      *(_OWORD *)(a3 + 8) = v25;
      *(_OWORD *)(a3 + 24) = v29;
      result.n128_u64[0] = *(void *)a2;
      double v11 = *(double *)a1;
      if (*(double *)a2 > *(double *)a1)
      {
        *(void *)a1 = result.n128_u64[0];
        *(double *)a2 = v11;
        long long v34 = *(_OWORD *)(a1 + 40);
        long long v38 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)unint64_t v42 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v42[16] = *(_OWORD *)(a1 + 88);
        __n128 v26 = *(__n128 *)(a1 + 8);
        long long v30 = *(_OWORD *)(a1 + 24);
        long long v12 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = v12;
        long long v14 = *(_OWORD *)(a2 + 56);
        long long v13 = *(_OWORD *)(a2 + 72);
        long long v15 = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 81) = v15;
        *(_OWORD *)(a1 + 72) = v13;
        *(_OWORD *)(a1 + 56) = v14;
        *(_OWORD *)(a2 + 72) = *(_OWORD *)v42;
        *(_OWORD *)(a2 + 81) = *(_OWORD *)&v42[9];
        *(_OWORD *)(a2 + 40) = v34;
        *(_OWORD *)(a2 + 56) = v38;
        __n128 result = v26;
        *(__n128 *)(a2 + 8) = v26;
        *(_OWORD *)(a2 + 24) = v30;
      }
    }
  }
  else
  {
    double v6 = (_OWORD *)(a1 + 8);
    if (v5 <= result.n128_f64[0])
    {
      *(void *)a1 = result.n128_u64[0];
      *(double *)a2 = v4;
      long long v35 = *(_OWORD *)(a1 + 40);
      long long v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)double v43 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 88);
      __n128 v27 = *(__n128 *)v6;
      long long v31 = *(_OWORD *)(a1 + 24);
      long long v16 = *(_OWORD *)(a2 + 24);
      _OWORD *v6 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v16;
      long long v17 = *(_OWORD *)(a2 + 56);
      long long v18 = *(_OWORD *)(a2 + 72);
      long long v19 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
      *(_OWORD *)(a1 + 56) = v17;
      *(_OWORD *)(a1 + 72) = v18;
      *(_OWORD *)(a1 + 40) = v19;
      *(_OWORD *)(a2 + 40) = v35;
      *(_OWORD *)(a2 + 56) = v39;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)v43;
      *(_OWORD *)(a2 + 81) = *(_OWORD *)&v43[9];
      result.n128_u64[1] = v27.n128_u64[1];
      *(__n128 *)(a2 + 8) = v27;
      *(_OWORD *)(a2 + 24) = v31;
      result.n128_u64[0] = *(void *)a3;
      unint64_t v20 = *(void *)a2;
      if (*(double *)a3 <= *(double *)a2) {
        return result;
      }
      double v6 = (_OWORD *)(a2 + 8);
      *(void *)a2 = result.n128_u64[0];
      *(void *)a3 = v20;
    }
    else
    {
      *(double *)a1 = v5;
      *(double *)a3 = v4;
    }
    long long v36 = v6[2];
    long long v40 = v6[3];
    *(_OWORD *)double v44 = v6[4];
    *(_OWORD *)&v44[16] = v6[5];
    __n128 v28 = *(__n128 *)v6;
    long long v32 = v6[1];
    long long v21 = *(_OWORD *)(a3 + 24);
    _OWORD *v6 = *(_OWORD *)(a3 + 8);
    v6[1] = v21;
    long long v22 = *(_OWORD *)(a3 + 56);
    long long v23 = *(_OWORD *)(a3 + 72);
    long long v24 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)((char *)v6 + 73) = *(_OWORD *)(a3 + 81);
    v6[3] = v22;
    void v6[4] = v23;
    _DWORD v6[2] = v24;
    *(_OWORD *)(a3 + 40) = v36;
    *(_OWORD *)(a3 + 56) = v40;
    *(_OWORD *)(a3 + 72) = *(_OWORD *)v44;
    *(_OWORD *)(a3 + 81) = *(_OWORD *)&v44[9];
    __n128 result = v28;
    *(__n128 *)(a3 + 8) = v28;
    *(_OWORD *)(a3 + 24) = v32;
  }
  return result;
}

BOOL sub_100645474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4EC4EC4EC4EC4EC5 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)(a2 - 104);
      double v7 = *(double *)a1;
      if (v6 > *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 104) = v7;
        long long v55 = *(_OWORD *)(a1 + 40);
        long long v61 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)long long v67 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v67[16] = *(_OWORD *)(a1 + 88);
        long long v43 = *(_OWORD *)(a1 + 8);
        long long v49 = *(_OWORD *)(a1 + 24);
        long long v8 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 24) = v8;
        long long v10 = *(_OWORD *)(a2 - 48);
        long long v9 = *(_OWORD *)(a2 - 32);
        long long v11 = *(_OWORD *)(a2 - 23);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 81) = v11;
        *(_OWORD *)(a1 + 72) = v9;
        *(_OWORD *)(a1 + 56) = v10;
        *(_OWORD *)(a2 - 64) = v55;
        *(_OWORD *)(a2 - 48) = v61;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v67;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v67[9];
        *(_OWORD *)(a2 - 96) = v43;
        *(_OWORD *)(a2 - 80) = v49;
      }
      return result;
    case 3:
      sub_100645230(a1, a1 + 104, a2 - 104);
      return 1;
    case 4:
      sub_1006458F4(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      sub_1006458F4(a1, a1 + 104, a1 + 208, a1 + 312);
      double v26 = *(double *)(a2 - 104);
      double v27 = *(double *)(a1 + 312);
      if (v26 <= v27) {
        return 1;
      }
      *(double *)(a1 + 312) = v26;
      *(double *)(a2 - 104) = v27;
      long long v57 = *(_OWORD *)(a1 + 352);
      long long v63 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)double v69 = *(_OWORD *)(a1 + 384);
      *(_OWORD *)&v69[16] = *(_OWORD *)(a1 + 400);
      long long v45 = *(_OWORD *)(a1 + 320);
      long long v51 = *(_OWORD *)(a1 + 336);
      long long v28 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 336) = v28;
      long long v30 = *(_OWORD *)(a2 - 48);
      long long v29 = *(_OWORD *)(a2 - 32);
      long long v31 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 393) = *(_OWORD *)(a2 - 23);
      *(_OWORD *)(a1 + 368) = v30;
      *(_OWORD *)(a1 + 384) = v29;
      *(_OWORD *)(a1 + 352) = v31;
      *(_OWORD *)(a2 - 64) = v57;
      *(_OWORD *)(a2 - 48) = v63;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v69;
      *(_OWORD *)(a2 - 23) = *(_OWORD *)&v69[9];
      *(_OWORD *)(a2 - 96) = v45;
      *(_OWORD *)(a2 - 80) = v51;
      double v32 = *(double *)(a1 + 312);
      double v33 = *(double *)(a1 + 208);
      if (v32 <= v33) {
        return 1;
      }
      *(double *)(a1 + 208) = v32;
      *(double *)(a1 + 312) = v33;
      long long v58 = *(_OWORD *)(a1 + 248);
      long long v64 = *(_OWORD *)(a1 + 264);
      *(_OWORD *)long long v70 = *(_OWORD *)(a1 + 280);
      *(_OWORD *)&v70[16] = *(_OWORD *)(a1 + 296);
      long long v46 = *(_OWORD *)(a1 + 216);
      long long v52 = *(_OWORD *)(a1 + 232);
      long long v34 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 264) = v34;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 289) = *(_OWORD *)(a1 + 393);
      long long v35 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 232) = v35;
      *(_OWORD *)(a1 + 320) = v46;
      *(_OWORD *)(a1 + 336) = v52;
      *(_OWORD *)(a1 + 393) = *(_OWORD *)&v70[9];
      *(_OWORD *)(a1 + 368) = v64;
      *(_OWORD *)(a1 + 384) = *(_OWORD *)v70;
      *(_OWORD *)(a1 + 352) = v58;
      double v36 = *(double *)(a1 + 104);
      if (v32 <= v36) {
        return 1;
      }
      *(double *)(a1 + 208) = v36;
      long long v59 = *(_OWORD *)(a1 + 144);
      long long v65 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)long long v71 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)&v71[16] = *(_OWORD *)(a1 + 192);
      long long v47 = *(_OWORD *)(a1 + 112);
      long long v53 = *(_OWORD *)(a1 + 128);
      long long v37 = *(_OWORD *)(a1 + 264);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 248);
      *(_OWORD *)(a1 + 160) = v37;
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 280);
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a1 + 289);
      long long v38 = *(_OWORD *)(a1 + 232);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 216);
      *(_OWORD *)(a1 + 128) = v38;
      *(_OWORD *)(a1 + 216) = v47;
      *(_OWORD *)(a1 + 232) = v53;
      *(_OWORD *)(a1 + 289) = *(_OWORD *)&v71[9];
      *(_OWORD *)(a1 + 264) = v65;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)v71;
      *(_OWORD *)(a1 + 248) = v59;
      double v39 = *(double *)a1;
      BOOL v40 = v32 <= *(double *)a1;
      *(double *)(a1 + 104) = v32;
      if (v40) {
        return 1;
      }
      *(double *)a1 = v32;
      *(double *)(a1 + 104) = v39;
      long long v60 = *(_OWORD *)(a1 + 40);
      long long v66 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)double v72 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v72[16] = *(_OWORD *)(a1 + 88);
      long long v48 = *(_OWORD *)(a1 + 8);
      long long v54 = *(_OWORD *)(a1 + 24);
      long long v41 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 56) = v41;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a1 + 185);
      long long v42 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 24) = v42;
      *(_OWORD *)(a1 + 112) = v48;
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 185) = *(_OWORD *)&v72[9];
      BOOL result = 1;
      *(_OWORD *)(a1 + 160) = v66;
      *(_OWORD *)(a1 + 176) = *(_OWORD *)v72;
      *(_OWORD *)(a1 + 144) = v60;
      return result;
    default:
      long long v12 = (double *)(a1 + 208);
      sub_100645230(a1, a1 + 104, a1 + 208);
      uint64_t v13 = a1 + 312;
      if (a1 + 312 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    double v16 = *(double *)v13;
    if (*(double *)v13 > *v12)
    {
      long long v44 = *(_OWORD *)(v13 + 8);
      long long v50 = *(_OWORD *)(v13 + 24);
      *(_OWORD *)&v68[9] = *(_OWORD *)(v13 + 81);
      long long v62 = *(_OWORD *)(v13 + 56);
      *(_OWORD *)double v68 = *(_OWORD *)(v13 + 72);
      long long v56 = *(_OWORD *)(v13 + 40);
      uint64_t v17 = v14;
      double v18 = *v12;
      while (1)
      {
        uint64_t v19 = a1 + v17;
        *(double *)(v19 + 312) = v18;
        unint64_t v20 = (_OWORD *)(a1 + v17 + 216);
        long long v21 = *(_OWORD *)(a1 + v17 + 248);
        long long v22 = *(_OWORD *)(a1 + v17 + 232);
        *(_OWORD *)(v19 + 320) = *v20;
        *(_OWORD *)(v19 + 336) = v22;
        long long v23 = *(_OWORD *)(a1 + v17 + 264);
        long long v24 = *(_OWORD *)(a1 + v17 + 280);
        *(_OWORD *)(v19 + 352) = v21;
        *(_OWORD *)(v19 + 368) = v23;
        *(_OWORD *)(v19 + 384) = v24;
        *(_OWORD *)(a1 + v17 + 393) = *(_OWORD *)(a1 + v17 + 289);
        if (v17 == -208) {
          break;
        }
        double v18 = *(double *)(v19 + 104);
        v17 -= 104;
        if (v16 <= v18)
        {
          long long v25 = (double *)(a1 + v17 + 312);
          goto LABEL_13;
        }
      }
      long long v25 = (double *)a1;
LABEL_13:
      double *v25 = v16;
      *(_OWORD *)(v19 + 248) = v56;
      *(_OWORD *)(v19 + 216) = v44;
      *(_OWORD *)(v19 + 232) = v50;
      _DWORD v20[3] = v62;
      void v20[4] = *(_OWORD *)v68;
      ++v15;
      *(_OWORD *)((char *)v20 + 73) = *(_OWORD *)&v68[9];
      if (v15 == 8) {
        return v13 + 104 == a2;
      }
    }
    long long v12 = (double *)v13;
    v14 += 104;
    v13 += 104;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_1006458F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100645230(a1, a2, a3);
  result.n128_u64[0] = *(void *)a4;
  double v9 = *(double *)a3;
  if (*(double *)a4 > *(double *)a3)
  {
    *(void *)a3 = result.n128_u64[0];
    *(double *)a4 = v9;
    long long v30 = *(_OWORD *)(a3 + 40);
    long long v33 = *(_OWORD *)(a3 + 56);
    *(_OWORD *)double v36 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)&v36[16] = *(_OWORD *)(a3 + 88);
    long long v24 = *(_OWORD *)(a3 + 8);
    long long v27 = *(_OWORD *)(a3 + 24);
    long long v10 = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a3 + 24) = v10;
    long long v11 = *(_OWORD *)(a4 + 56);
    long long v12 = *(_OWORD *)(a4 + 72);
    long long v13 = *(_OWORD *)(a4 + 81);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(a3 + 81) = v13;
    *(_OWORD *)(a3 + 72) = v12;
    *(_OWORD *)(a3 + 56) = v11;
    *(_OWORD *)(a4 + 40) = v30;
    *(_OWORD *)(a4 + 56) = v33;
    *(_OWORD *)(a4 + 72) = *(_OWORD *)v36;
    *(_OWORD *)(a4 + 81) = *(_OWORD *)&v36[9];
    result.n128_u64[1] = *((void *)&v24 + 1);
    *(_OWORD *)(a4 + 8) = v24;
    *(_OWORD *)(a4 + 24) = v27;
    result.n128_u64[0] = *(void *)a3;
    double v14 = *(double *)a2;
    if (*(double *)a3 > *(double *)a2)
    {
      *(void *)a2 = result.n128_u64[0];
      *(double *)a3 = v14;
      long long v31 = *(_OWORD *)(a2 + 40);
      long long v34 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)long long v37 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 88);
      long long v25 = *(_OWORD *)(a2 + 8);
      long long v28 = *(_OWORD *)(a2 + 24);
      long long v15 = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = v15;
      long long v17 = *(_OWORD *)(a3 + 56);
      long long v16 = *(_OWORD *)(a3 + 72);
      long long v18 = *(_OWORD *)(a3 + 81);
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a2 + 81) = v18;
      *(_OWORD *)(a2 + 72) = v16;
      *(_OWORD *)(a2 + 56) = v17;
      *(_OWORD *)(a3 + 72) = *(_OWORD *)v37;
      *(_OWORD *)(a3 + 81) = *(_OWORD *)&v37[9];
      *(_OWORD *)(a3 + 40) = v31;
      *(_OWORD *)(a3 + 56) = v34;
      result.n128_u64[1] = *((void *)&v25 + 1);
      *(_OWORD *)(a3 + 8) = v25;
      *(_OWORD *)(a3 + 24) = v28;
      result.n128_u64[0] = *(void *)a2;
      double v19 = *(double *)a1;
      if (*(double *)a2 > *(double *)a1)
      {
        *(void *)a1 = result.n128_u64[0];
        *(double *)a2 = v19;
        long long v32 = *(_OWORD *)(a1 + 40);
        long long v35 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)long long v38 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v38[16] = *(_OWORD *)(a1 + 88);
        __n128 v26 = *(__n128 *)(a1 + 8);
        long long v29 = *(_OWORD *)(a1 + 24);
        long long v20 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 24) = v20;
        long long v22 = *(_OWORD *)(a2 + 56);
        long long v21 = *(_OWORD *)(a2 + 72);
        long long v23 = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 81) = v23;
        *(_OWORD *)(a1 + 72) = v21;
        *(_OWORD *)(a1 + 56) = v22;
        *(_OWORD *)(a2 + 72) = *(_OWORD *)v38;
        *(_OWORD *)(a2 + 81) = *(_OWORD *)&v38[9];
        *(_OWORD *)(a2 + 40) = v32;
        *(_OWORD *)(a2 + 56) = v35;
        __n128 result = v26;
        *(__n128 *)(a2 + 8) = v26;
        *(_OWORD *)(a2 + 24) = v29;
      }
    }
  }
  return result;
}

uint64_t *sub_100645AD8(uint64_t **a1, const void **a2, uint64_t a3)
{
  double v5 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v8, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    sub_100645B58((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000EDF90(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

unsigned char *sub_100645B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    __n128 result = sub_1000DC48C(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100645BE4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100645C00(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_1000F0A30(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

_OWORD *sub_100645C44(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1001070AC((uint64_t)a1, &v9, a2);
  double v6 = *v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    double v6 = operator new(0x38uLL);
    _DWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_1000EDF90(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

double sub_100645CD8@<D0>(void *a1@<X0>, void *a2@<X1>, const void **a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)&long long v22 = a5;
  *((void *)&v22 + 1) = a6;
  if (a1 != a2)
  {
    long long v11 = a3;
    if (a3 != a4)
    {
      long long v13 = a1;
      do
      {
        if (sub_100130070(a7, (const void **)v13 + 4, v11 + 4))
        {
          double v14 = (void *)v13[1];
          if (v14)
          {
            do
            {
              long long v13 = v14;
              double v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              long long v15 = v13;
              long long v13 = (void *)v13[2];
            }
            while ((void *)*v13 != v15);
          }
        }
        else
        {
          if (sub_100130070(a7, v11 + 4, (const void **)v13 + 4))
          {
            long long v16 = v13;
          }
          else
          {
            sub_100645E2C((uint64_t)&v22, (const void **)v13 + 4);
            long long v17 = (void *)v13[1];
            if (v17)
            {
              do
              {
                long long v16 = v17;
                long long v17 = (void *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                long long v16 = (void *)v13[2];
                BOOL v18 = *v16 == (void)v13;
                long long v13 = v16;
              }
              while (!v18);
            }
          }
          double v19 = (const void **)v11[1];
          if (v19)
          {
            do
            {
              long long v11 = v19;
              double v19 = (const void **)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              long long v20 = v11;
              long long v11 = (const void **)v11[2];
            }
            while (*v11 != v20);
          }
          long long v13 = v16;
        }
      }
      while (v13 != a2 && v11 != a4);
    }
  }
  *(void *)a8 = a2;
  *(void *)(a8 + 8) = a4;
  double result = *(double *)&v22;
  *(_OWORD *)(a8 + 16) = v22;
  return result;
}

uint64_t sub_100645E2C(uint64_t a1, const void **a2)
{
  uint64_t v3 = sub_100645E98(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_100645E98(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  BOOL v6 = (uint64_t **)sub_100645F1C(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_100124D18((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **sub_100645F1C(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !sub_100130070((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!sub_100130070((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      double v14 = (const void **)a2[1];
      do
      {
        long long v15 = v14;
        double v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      BOOL v18 = (const void **)a2;
      do
      {
        long long v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        BOOL v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100130070((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    long long v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  long long v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      long long v12 = v11;
      long long v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    long long v16 = a2;
    do
    {
      long long v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      long long v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_100130070((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)sub_1001070AC((uint64_t)a1, a3, a5);
}

char *sub_1006460C8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 5) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *double v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v12 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = sub_10064620C(v7, v12);
    double v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 7;
      double v19 = v9;
      long long v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 5) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[32 * ((v15 - v9) >> 5)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9 - 7);
    uint64_t v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 7;
    double v19 = v9;
    long long v20 = v16;
LABEL_18:
    double result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

char *sub_10064620C(void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_1001D7FD4();
  }
  double result = (char *)sub_100642EA8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void sub_100646260(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
double sub_100647364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&double result = sub_100647BF0(a1, a2, a3, a4).n128_u64[0];
  int v11 = *(_DWORD *)(a5 + 56);
  int v12 = *(_DWORD *)(a4 + 56);
  if (v11 > v12
    || v11 == v12
    && ((int v41 = *(_DWORD *)(a5 + 24), v42 = *(_DWORD *)(a4 + 24), v41 > v42)
     || v41 == v42 && (double result = *(double *)(a5 + 40), result < *(double *)(a4 + 40))))
  {
    long long v51 = *(_OWORD *)(a4 + 32);
    long long v55 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)double v59 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a4 + 80);
    long long v43 = *(_OWORD *)a4;
    long long v47 = *(_OWORD *)(a4 + 16);
    long long v13 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v13;
    long long v15 = *(_OWORD *)(a5 + 48);
    long long v14 = *(_OWORD *)(a5 + 64);
    long long v16 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 73) = *(_OWORD *)(a5 + 73);
    *(_OWORD *)(a4 + 48) = v15;
    *(_OWORD *)(a4 + 64) = v14;
    *(_OWORD *)(a4 + 32) = v16;
    *(_OWORD *)(a5 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a5 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a5 + 32) = v51;
    *(_OWORD *)(a5 + 48) = v55;
    double result = *(double *)&v43;
    *(_OWORD *)a5 = v43;
    *(_OWORD *)(a5 + 16) = v47;
    int v17 = *(_DWORD *)(a4 + 56);
    int v18 = *(_DWORD *)(a3 + 56);
    if (v17 > v18
      || v17 == v18
      && ((int v19 = *(_DWORD *)(a4 + 24), v20 = *(_DWORD *)(a3 + 24), v19 > v20)
       || v19 == v20 && (double result = *(double *)(a4 + 40), result < *(double *)(a3 + 40))))
    {
      long long v52 = *(_OWORD *)(a3 + 32);
      long long v56 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)uint64_t v60 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a3 + 80);
      long long v44 = *(_OWORD *)a3;
      long long v48 = *(_OWORD *)(a3 + 16);
      long long v21 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v21;
      long long v23 = *(_OWORD *)(a4 + 48);
      long long v22 = *(_OWORD *)(a4 + 64);
      long long v24 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
      *(_OWORD *)(a3 + 48) = v23;
      *(_OWORD *)(a3 + 64) = v22;
      *(_OWORD *)(a3 + 32) = v24;
      *(_OWORD *)(a4 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a4 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a4 + 32) = v52;
      *(_OWORD *)(a4 + 48) = v56;
      double result = *(double *)&v44;
      *(_OWORD *)a4 = v44;
      *(_OWORD *)(a4 + 16) = v48;
      int v25 = *(_DWORD *)(a3 + 56);
      int v26 = *(_DWORD *)(a2 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a3 + 24), int v28 = *(_DWORD *)(a2 + 24), v27 > v28)
         || v27 == v28 && (double result = *(double *)(a3 + 40), result < *(double *)(a2 + 40))))
      {
        long long v53 = *(_OWORD *)(a2 + 32);
        long long v57 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)int v61 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)&v61[16] = *(_OWORD *)(a2 + 80);
        long long v45 = *(_OWORD *)a2;
        long long v49 = *(_OWORD *)(a2 + 16);
        long long v29 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v29;
        long long v31 = *(_OWORD *)(a3 + 48);
        long long v30 = *(_OWORD *)(a3 + 64);
        long long v32 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
        *(_OWORD *)(a2 + 48) = v31;
        *(_OWORD *)(a2 + 64) = v30;
        *(_OWORD *)(a2 + 32) = v32;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)v61;
        *(_OWORD *)(a3 + 73) = *(_OWORD *)&v61[9];
        *(_OWORD *)(a3 + 32) = v53;
        *(_OWORD *)(a3 + 48) = v57;
        double result = *(double *)&v45;
        *(_OWORD *)a3 = v45;
        *(_OWORD *)(a3 + 16) = v49;
        int v33 = *(_DWORD *)(a2 + 56);
        int v34 = *(_DWORD *)(a1 + 56);
        if (v33 > v34
          || v33 == v34
          && ((v35 = *(_DWORD *)(a2 + 24), int v36 = *(_DWORD *)(a1 + 24), v35 > v36)
           || v35 == v36 && (double result = *(double *)(a2 + 40), result < *(double *)(a1 + 40))))
        {
          long long v54 = *(_OWORD *)(a1 + 32);
          long long v58 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)int v62 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 80);
          long long v46 = *(_OWORD *)a1;
          long long v50 = *(_OWORD *)(a1 + 16);
          long long v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          long long v39 = *(_OWORD *)(a2 + 48);
          long long v38 = *(_OWORD *)(a2 + 64);
          long long v40 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
          *(_OWORD *)(a1 + 48) = v39;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 32) = v40;
          *(_OWORD *)(a2 + 64) = *(_OWORD *)v62;
          *(_OWORD *)(a2 + 73) = *(_OWORD *)&v62[9];
          *(_OWORD *)(a2 + 32) = v54;
          *(_OWORD *)(a2 + 48) = v58;
          double result = *(double *)&v46;
          *(_OWORD *)a2 = v46;
          *(_OWORD *)(a2 + 16) = v50;
        }
      }
    }
  }
  return result;
}

__n128 sub_1006475F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 56);
  int v4 = *(_DWORD *)(a1 + 56);
  if (v3 > v4
    || v3 == v4
    && ((v10 = *(_DWORD *)(a2 + 24), int v11 = *(_DWORD *)(a1 + 24), v10 > v11)
     || v10 == v11 && (result.n128_u64[0] = *(void *)(a2 + 40), result.n128_f64[0] < *(double *)(a1 + 40))))
  {
    int v5 = *(_DWORD *)(a3 + 56);
    if (v5 > v3
      || v5 == v3
      && ((int v28 = *(_DWORD *)(a3 + 24), v29 = *(_DWORD *)(a2 + 24), v28 > v29)
       || v28 == v29 && *(double *)(a3 + 40) < *(double *)(a2 + 40)))
    {
      long long v50 = *(_OWORD *)(a1 + 32);
      long long v54 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)long long v58 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a1 + 80);
      __n128 v42 = *(__n128 *)a1;
      long long v46 = *(_OWORD *)(a1 + 16);
      long long v6 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)(a3 + 48);
      long long v7 = *(_OWORD *)(a3 + 64);
      long long v9 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 64) = v7;
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      long long v53 = *(_OWORD *)(a1 + 32);
      long long v57 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)int v61 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 80);
      __n128 v45 = *(__n128 *)a1;
      long long v49 = *(_OWORD *)(a1 + 16);
      long long v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v30;
      long long v32 = *(_OWORD *)(a2 + 48);
      long long v31 = *(_OWORD *)(a2 + 64);
      long long v33 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v32;
      *(_OWORD *)(a1 + 64) = v31;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v61;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v61[9];
      *(_OWORD *)(a2 + 32) = v53;
      *(_OWORD *)(a2 + 48) = v57;
      __n128 result = v45;
      *(__n128 *)a2 = v45;
      *(_OWORD *)(a2 + 16) = v49;
      int v34 = *(_DWORD *)(a3 + 56);
      int v35 = *(_DWORD *)(a2 + 56);
      if (v34 <= v35)
      {
        if (v34 != v35) {
          return result;
        }
        int v36 = *(_DWORD *)(a3 + 24);
        int v37 = *(_DWORD *)(a2 + 24);
        if (v36 <= v37)
        {
          if (v36 != v37) {
            return result;
          }
          result.n128_u64[0] = *(void *)(a3 + 40);
          if (result.n128_f64[0] >= *(double *)(a2 + 40)) {
            return result;
          }
        }
      }
      long long v50 = *(_OWORD *)(a2 + 32);
      long long v54 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)long long v58 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a2 + 80);
      __n128 v42 = *(__n128 *)a2;
      long long v46 = *(_OWORD *)(a2 + 16);
      long long v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v38;
      long long v40 = *(_OWORD *)(a3 + 48);
      long long v39 = *(_OWORD *)(a3 + 64);
      long long v41 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v40;
      *(_OWORD *)(a2 + 64) = v39;
      *(_OWORD *)(a2 + 32) = v41;
    }
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v58;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v58[9];
    *(_OWORD *)(a3 + 32) = v50;
    *(_OWORD *)(a3 + 48) = v54;
    __n128 result = v42;
    *(__n128 *)a3 = v42;
    *(_OWORD *)(a3 + 16) = v46;
    return result;
  }
  int v13 = *(_DWORD *)(a3 + 56);
  if (v13 > v3
    || v13 == v3
    && ((int v14 = *(_DWORD *)(a3 + 24), v15 = *(_DWORD *)(a2 + 24), v14 > v15)
     || v14 == v15 && (result.n128_u64[0] = *(void *)(a3 + 40), result.n128_f64[0] < *(double *)(a2 + 40))))
  {
    long long v51 = *(_OWORD *)(a2 + 32);
    long long v55 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)double v59 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a2 + 80);
    __n128 v43 = *(__n128 *)a2;
    long long v47 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v16;
    long long v18 = *(_OWORD *)(a3 + 48);
    long long v17 = *(_OWORD *)(a3 + 64);
    long long v19 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
    *(_OWORD *)(a2 + 48) = v18;
    *(_OWORD *)(a2 + 64) = v17;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a3 + 32) = v51;
    *(_OWORD *)(a3 + 48) = v55;
    __n128 result = v43;
    *(__n128 *)a3 = v43;
    *(_OWORD *)(a3 + 16) = v47;
    int v20 = *(_DWORD *)(a2 + 56);
    int v21 = *(_DWORD *)(a1 + 56);
    if (v20 > v21
      || v20 == v21
      && ((int v22 = *(_DWORD *)(a2 + 24), v23 = *(_DWORD *)(a1 + 24), v22 > v23)
       || v22 == v23 && (result.n128_u64[0] = *(void *)(a2 + 40), result.n128_f64[0] < *(double *)(a1 + 40))))
    {
      long long v52 = *(_OWORD *)(a1 + 32);
      long long v56 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)uint64_t v60 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 80);
      __n128 v44 = *(__n128 *)a1;
      long long v48 = *(_OWORD *)(a1 + 16);
      long long v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v24;
      long long v26 = *(_OWORD *)(a2 + 48);
      long long v25 = *(_OWORD *)(a2 + 64);
      long long v27 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v26;
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 32) = v27;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a2 + 32) = v52;
      *(_OWORD *)(a2 + 48) = v56;
      __n128 result = v44;
      *(__n128 *)a2 = v44;
      *(_OWORD *)(a2 + 16) = v48;
    }
  }
  return result;
}

BOOL sub_1006478B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = *(_DWORD *)(a2 - 40);
      int v7 = *(_DWORD *)(a1 + 56);
      if (v6 > v7
        || v6 == v7
        && ((int v36 = *(_DWORD *)(a2 - 72), v37 = *(_DWORD *)(a1 + 24), v36 > v37)
         || v36 == v37 && *(double *)(a2 - 56) < *(double *)(a1 + 40)))
      {
        long long v8 = (_OWORD *)(a2 - 96);
        long long v45 = *(_OWORD *)(a1 + 32);
        long long v46 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)long long v47 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 80);
        long long v42 = *(_OWORD *)a1;
        long long v44 = *(_OWORD *)(a1 + 16);
        long long v9 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v9;
        long long v11 = *(_OWORD *)(a2 - 48);
        long long v10 = *(_OWORD *)(a2 - 32);
        long long v12 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 - 23);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)(a1 + 64) = v10;
        *(_OWORD *)(a1 + 32) = v12;
        void v8[4] = *(_OWORD *)v47;
        *(_OWORD *)((char *)v8 + 73) = *(_OWORD *)&v47[9];
        void v8[2] = v45;
        v8[3] = v46;
        *long long v8 = v42;
        v8[1] = v44;
      }
      return result;
    case 3uLL:
      sub_1006475F4(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100647BF0(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      sub_100647364(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      uint64_t v13 = a1 + 192;
      sub_1006475F4(a1, a1 + 96, a1 + 192);
      uint64_t v14 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    int v17 = *(_DWORD *)(v14 + 56);
    int v18 = *(_DWORD *)(v13 + 56);
    if (v17 > v18) {
      break;
    }
    if (v17 == v18)
    {
      int v19 = *(_DWORD *)(v14 + 24);
      int v35 = *(_DWORD *)(v13 + 24);
      if (v19 > v35 || v19 == v35 && *(double *)(v14 + 40) < *(double *)(v13 + 40)) {
        goto LABEL_9;
      }
    }
LABEL_26:
    uint64_t v13 = v14;
    v15 += 96;
    v14 += 96;
    if (v14 == a2) {
      return 1;
    }
  }
  int v19 = *(_DWORD *)(v14 + 24);
LABEL_9:
  uint64_t v41 = *(void *)(v14 + 16);
  long long v40 = *(_OWORD *)v14;
  uint64_t v38 = *(void *)(v14 + 28);
  int v39 = *(_DWORD *)(v14 + 36);
  double v20 = *(double *)(v14 + 40);
  uint64_t v21 = *(void *)(v14 + 48);
  *(_OWORD *)__n128 v43 = *(_OWORD *)(v14 + 60);
  *(_OWORD *)&v43[16] = *(_OWORD *)(v14 + 76);
  long long v22 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
  *(_OWORD *)(v14 + 16) = v22;
  long long v23 = *(_OWORD *)(v13 + 32);
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v14 + 73) = *(_OWORD *)(v13 + 73);
  long long v25 = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(v14 + 48) = v24;
  *(_OWORD *)(v14 + 64) = v25;
  uint64_t v26 = a1;
  *(_OWORD *)(v14 + 32) = v23;
  if (v13 != a1)
  {
    uint64_t v27 = v15;
    while (1)
    {
      uint64_t v28 = a1 + v27;
      int v29 = *(_DWORD *)(a1 + v27 + 152);
      if (v17 <= v29)
      {
        if (v17 != v29) {
          goto LABEL_23;
        }
        int v30 = *(_DWORD *)(a1 + v27 + 120);
        if (v19 <= v30)
        {
          if (v19 != v30)
          {
LABEL_23:
            uint64_t v26 = v13;
            goto LABEL_25;
          }
          if (v20 >= *(double *)(a1 + v27 + 136)) {
            break;
          }
        }
      }
      long long v31 = (_OWORD *)(v28 + 192);
      v13 -= 96;
      long long v32 = (_OWORD *)(v28 + 96);
      long long v33 = v32[3];
      v31[2] = v32[2];
      void v31[3] = v33;
      v31[4] = v32[4];
      *(_OWORD *)((char *)v31 + 73) = *(_OWORD *)((char *)v32 + 73);
      long long v34 = v32[1];
      *long long v31 = *v32;
      v31[1] = v34;
      v27 -= 96;
      if (v27 == -192)
      {
        uint64_t v26 = a1;
        goto LABEL_25;
      }
    }
    uint64_t v26 = a1 + v27 + 192;
  }
LABEL_25:
  *(void *)(v26 + 16) = v41;
  *(_OWORD *)uint64_t v26 = v40;
  *(_DWORD *)(v26 + 24) = v19;
  *(void *)(v26 + 28) = v38;
  *(_DWORD *)(v26 + 36) = v39;
  *(double *)(v26 + 40) = v20;
  *(void *)(v26 + 48) = v21;
  *(_DWORD *)(v26 + 56) = v17;
  *(_OWORD *)(v26 + 60) = *(_OWORD *)v43;
  *(_OWORD *)(v26 + 73) = *(_OWORD *)&v43[13];
  if (++v16 != 8) {
    goto LABEL_26;
  }
  return v14 + 96 == a2;
}

__n128 sub_100647BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = sub_1006475F4(a1, a2, a3).n128_u64[0];
  int v9 = *(_DWORD *)(a4 + 56);
  int v10 = *(_DWORD *)(a3 + 56);
  if (v9 > v10
    || v9 == v10
    && ((int v11 = *(_DWORD *)(a4 + 24), v12 = *(_DWORD *)(a3 + 24), v11 > v12)
     || v11 == v12 && (result.n128_u64[0] = *(void *)(a4 + 40), result.n128_f64[0] < *(double *)(a3 + 40))))
  {
    long long v39 = *(_OWORD *)(a3 + 32);
    long long v42 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)long long v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&unsigned char v45[16] = *(_OWORD *)(a3 + 80);
    __n128 v33 = *(__n128 *)a3;
    long long v36 = *(_OWORD *)(a3 + 16);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    long long v15 = *(_OWORD *)(a4 + 48);
    long long v14 = *(_OWORD *)(a4 + 64);
    long long v16 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
    *(_OWORD *)(a3 + 48) = v15;
    *(_OWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 32) = v16;
    *(_OWORD *)(a4 + 64) = *(_OWORD *)v45;
    *(_OWORD *)(a4 + 73) = *(_OWORD *)&v45[9];
    *(_OWORD *)(a4 + 32) = v39;
    *(_OWORD *)(a4 + 48) = v42;
    __n128 result = v33;
    *(__n128 *)a4 = v33;
    *(_OWORD *)(a4 + 16) = v36;
    int v17 = *(_DWORD *)(a3 + 56);
    int v18 = *(_DWORD *)(a2 + 56);
    if (v17 > v18
      || v17 == v18
      && ((int v19 = *(_DWORD *)(a3 + 24), v20 = *(_DWORD *)(a2 + 24), v19 > v20)
       || v19 == v20 && (result.n128_u64[0] = *(void *)(a3 + 40), result.n128_f64[0] < *(double *)(a2 + 40))))
    {
      long long v40 = *(_OWORD *)(a2 + 32);
      long long v43 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)long long v46 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 80);
      __n128 v34 = *(__n128 *)a2;
      long long v37 = *(_OWORD *)(a2 + 16);
      long long v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      long long v23 = *(_OWORD *)(a3 + 48);
      long long v22 = *(_OWORD *)(a3 + 64);
      long long v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v46;
      *(_OWORD *)(a3 + 73) = *(_OWORD *)&v46[9];
      *(_OWORD *)(a3 + 32) = v40;
      *(_OWORD *)(a3 + 48) = v43;
      __n128 result = v34;
      *(__n128 *)a3 = v34;
      *(_OWORD *)(a3 + 16) = v37;
      int v25 = *(_DWORD *)(a2 + 56);
      int v26 = *(_DWORD *)(a1 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a2 + 24), int v28 = *(_DWORD *)(a1 + 24), v27 > v28)
         || v27 == v28 && (result.n128_u64[0] = *(void *)(a2 + 40), result.n128_f64[0] < *(double *)(a1 + 40))))
      {
        long long v41 = *(_OWORD *)(a1 + 32);
        long long v44 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)long long v47 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 80);
        __n128 v35 = *(__n128 *)a1;
        long long v38 = *(_OWORD *)(a1 + 16);
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        long long v31 = *(_OWORD *)(a2 + 48);
        long long v30 = *(_OWORD *)(a2 + 64);
        long long v32 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v30;
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v47;
        *(_OWORD *)(a2 + 73) = *(_OWORD *)&v47[9];
        *(_OWORD *)(a2 + 32) = v41;
        *(_OWORD *)(a2 + 48) = v44;
        __n128 result = v35;
        *(__n128 *)a2 = v35;
        *(_OWORD *)(a2 + 16) = v38;
      }
    }
  }
  return result;
}

void sub_100647DE0(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
double sub_100648E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&double result = sub_1006496E4(a1, a2, a3, a4).n128_u64[0];
  int v11 = *(_DWORD *)(a5 + 56);
  int v12 = *(_DWORD *)(a4 + 56);
  if (v11 > v12
    || v11 == v12
    && ((int v41 = *(_DWORD *)(a5 + 24), v42 = *(_DWORD *)(a4 + 24), v41 > v42)
     || v41 == v42 && (double result = *(double *)(a5 + 32), result < *(double *)(a4 + 32))))
  {
    long long v51 = *(_OWORD *)(a4 + 32);
    long long v55 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)double v59 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a4 + 80);
    long long v43 = *(_OWORD *)a4;
    long long v47 = *(_OWORD *)(a4 + 16);
    long long v13 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v13;
    long long v15 = *(_OWORD *)(a5 + 48);
    long long v14 = *(_OWORD *)(a5 + 64);
    long long v16 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 73) = *(_OWORD *)(a5 + 73);
    *(_OWORD *)(a4 + 48) = v15;
    *(_OWORD *)(a4 + 64) = v14;
    *(_OWORD *)(a4 + 32) = v16;
    *(_OWORD *)(a5 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a5 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a5 + 32) = v51;
    *(_OWORD *)(a5 + 48) = v55;
    double result = *(double *)&v43;
    *(_OWORD *)a5 = v43;
    *(_OWORD *)(a5 + 16) = v47;
    int v17 = *(_DWORD *)(a4 + 56);
    int v18 = *(_DWORD *)(a3 + 56);
    if (v17 > v18
      || v17 == v18
      && ((int v19 = *(_DWORD *)(a4 + 24), v20 = *(_DWORD *)(a3 + 24), v19 > v20)
       || v19 == v20 && (double result = *(double *)(a4 + 32), result < *(double *)(a3 + 32))))
    {
      long long v52 = *(_OWORD *)(a3 + 32);
      long long v56 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)int v60 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a3 + 80);
      long long v44 = *(_OWORD *)a3;
      long long v48 = *(_OWORD *)(a3 + 16);
      long long v21 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v21;
      long long v23 = *(_OWORD *)(a4 + 48);
      long long v22 = *(_OWORD *)(a4 + 64);
      long long v24 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
      *(_OWORD *)(a3 + 48) = v23;
      *(_OWORD *)(a3 + 64) = v22;
      *(_OWORD *)(a3 + 32) = v24;
      *(_OWORD *)(a4 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a4 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a4 + 32) = v52;
      *(_OWORD *)(a4 + 48) = v56;
      double result = *(double *)&v44;
      *(_OWORD *)a4 = v44;
      *(_OWORD *)(a4 + 16) = v48;
      int v25 = *(_DWORD *)(a3 + 56);
      int v26 = *(_DWORD *)(a2 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a3 + 24), int v28 = *(_DWORD *)(a2 + 24), v27 > v28)
         || v27 == v28 && (double result = *(double *)(a3 + 32), result < *(double *)(a2 + 32))))
      {
        long long v53 = *(_OWORD *)(a2 + 32);
        long long v57 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)int v61 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)&v61[16] = *(_OWORD *)(a2 + 80);
        long long v45 = *(_OWORD *)a2;
        long long v49 = *(_OWORD *)(a2 + 16);
        long long v29 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v29;
        long long v31 = *(_OWORD *)(a3 + 48);
        long long v30 = *(_OWORD *)(a3 + 64);
        long long v32 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
        *(_OWORD *)(a2 + 48) = v31;
        *(_OWORD *)(a2 + 64) = v30;
        *(_OWORD *)(a2 + 32) = v32;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)v61;
        *(_OWORD *)(a3 + 73) = *(_OWORD *)&v61[9];
        *(_OWORD *)(a3 + 32) = v53;
        *(_OWORD *)(a3 + 48) = v57;
        double result = *(double *)&v45;
        *(_OWORD *)a3 = v45;
        *(_OWORD *)(a3 + 16) = v49;
        int v33 = *(_DWORD *)(a2 + 56);
        int v34 = *(_DWORD *)(a1 + 56);
        if (v33 > v34
          || v33 == v34
          && ((v35 = *(_DWORD *)(a2 + 24), int v36 = *(_DWORD *)(a1 + 24), v35 > v36)
           || v35 == v36 && (double result = *(double *)(a2 + 32), result < *(double *)(a1 + 32))))
        {
          long long v54 = *(_OWORD *)(a1 + 32);
          long long v58 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)unint64_t v62 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 80);
          long long v46 = *(_OWORD *)a1;
          long long v50 = *(_OWORD *)(a1 + 16);
          long long v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          long long v39 = *(_OWORD *)(a2 + 48);
          long long v38 = *(_OWORD *)(a2 + 64);
          long long v40 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
          *(_OWORD *)(a1 + 48) = v39;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 32) = v40;
          *(_OWORD *)(a2 + 64) = *(_OWORD *)v62;
          *(_OWORD *)(a2 + 73) = *(_OWORD *)&v62[9];
          *(_OWORD *)(a2 + 32) = v54;
          *(_OWORD *)(a2 + 48) = v58;
          double result = *(double *)&v46;
          *(_OWORD *)a2 = v46;
          *(_OWORD *)(a2 + 16) = v50;
        }
      }
    }
  }
  return result;
}

__n128 sub_100649100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 56);
  int v4 = *(_DWORD *)(a1 + 56);
  if (v3 > v4
    || v3 == v4
    && ((v10 = *(_DWORD *)(a2 + 24), int v11 = *(_DWORD *)(a1 + 24), v10 > v11)
     || v10 == v11 && (result.n128_u64[0] = *(void *)(a2 + 32), result.n128_f64[0] < *(double *)(a1 + 32))))
  {
    int v5 = *(_DWORD *)(a3 + 56);
    if (v5 > v3
      || v5 == v3
      && ((int v28 = *(_DWORD *)(a3 + 24), v29 = *(_DWORD *)(a2 + 24), v28 > v29)
       || v28 == v29 && *(double *)(a3 + 32) < *(double *)(a2 + 32)))
    {
      long long v50 = *(_OWORD *)(a1 + 32);
      long long v54 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)long long v58 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a1 + 80);
      __n128 v42 = *(__n128 *)a1;
      long long v46 = *(_OWORD *)(a1 + 16);
      long long v6 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)(a3 + 48);
      long long v7 = *(_OWORD *)(a3 + 64);
      long long v9 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 64) = v7;
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      long long v53 = *(_OWORD *)(a1 + 32);
      long long v57 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)int v61 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 80);
      __n128 v45 = *(__n128 *)a1;
      long long v49 = *(_OWORD *)(a1 + 16);
      long long v30 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v30;
      long long v32 = *(_OWORD *)(a2 + 48);
      long long v31 = *(_OWORD *)(a2 + 64);
      long long v33 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v32;
      *(_OWORD *)(a1 + 64) = v31;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v61;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v61[9];
      *(_OWORD *)(a2 + 32) = v53;
      *(_OWORD *)(a2 + 48) = v57;
      __n128 result = v45;
      *(__n128 *)a2 = v45;
      *(_OWORD *)(a2 + 16) = v49;
      int v34 = *(_DWORD *)(a3 + 56);
      int v35 = *(_DWORD *)(a2 + 56);
      if (v34 <= v35)
      {
        if (v34 != v35) {
          return result;
        }
        int v36 = *(_DWORD *)(a3 + 24);
        int v37 = *(_DWORD *)(a2 + 24);
        if (v36 <= v37)
        {
          if (v36 != v37) {
            return result;
          }
          result.n128_u64[0] = *(void *)(a3 + 32);
          if (result.n128_f64[0] >= *(double *)(a2 + 32)) {
            return result;
          }
        }
      }
      long long v50 = *(_OWORD *)(a2 + 32);
      long long v54 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)long long v58 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v58[16] = *(_OWORD *)(a2 + 80);
      __n128 v42 = *(__n128 *)a2;
      long long v46 = *(_OWORD *)(a2 + 16);
      long long v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v38;
      long long v40 = *(_OWORD *)(a3 + 48);
      long long v39 = *(_OWORD *)(a3 + 64);
      long long v41 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v40;
      *(_OWORD *)(a2 + 64) = v39;
      *(_OWORD *)(a2 + 32) = v41;
    }
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v58;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v58[9];
    *(_OWORD *)(a3 + 32) = v50;
    *(_OWORD *)(a3 + 48) = v54;
    __n128 result = v42;
    *(__n128 *)a3 = v42;
    *(_OWORD *)(a3 + 16) = v46;
    return result;
  }
  int v13 = *(_DWORD *)(a3 + 56);
  if (v13 > v3
    || v13 == v3
    && ((int v14 = *(_DWORD *)(a3 + 24), v15 = *(_DWORD *)(a2 + 24), v14 > v15)
     || v14 == v15 && (result.n128_u64[0] = *(void *)(a3 + 32), result.n128_f64[0] < *(double *)(a2 + 32))))
  {
    long long v51 = *(_OWORD *)(a2 + 32);
    long long v55 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)double v59 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&v59[16] = *(_OWORD *)(a2 + 80);
    __n128 v43 = *(__n128 *)a2;
    long long v47 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v16;
    long long v18 = *(_OWORD *)(a3 + 48);
    long long v17 = *(_OWORD *)(a3 + 64);
    long long v19 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
    *(_OWORD *)(a2 + 48) = v18;
    *(_OWORD *)(a2 + 64) = v17;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v59;
    *(_OWORD *)(a3 + 73) = *(_OWORD *)&v59[9];
    *(_OWORD *)(a3 + 32) = v51;
    *(_OWORD *)(a3 + 48) = v55;
    __n128 result = v43;
    *(__n128 *)a3 = v43;
    *(_OWORD *)(a3 + 16) = v47;
    int v20 = *(_DWORD *)(a2 + 56);
    int v21 = *(_DWORD *)(a1 + 56);
    if (v20 > v21
      || v20 == v21
      && ((int v22 = *(_DWORD *)(a2 + 24), v23 = *(_DWORD *)(a1 + 24), v22 > v23)
       || v22 == v23 && (result.n128_u64[0] = *(void *)(a2 + 32), result.n128_f64[0] < *(double *)(a1 + 32))))
    {
      long long v52 = *(_OWORD *)(a1 + 32);
      long long v56 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)int v60 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 80);
      __n128 v44 = *(__n128 *)a1;
      long long v48 = *(_OWORD *)(a1 + 16);
      long long v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v24;
      long long v26 = *(_OWORD *)(a2 + 48);
      long long v25 = *(_OWORD *)(a2 + 64);
      long long v27 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v26;
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 32) = v27;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v60;
      *(_OWORD *)(a2 + 73) = *(_OWORD *)&v60[9];
      *(_OWORD *)(a2 + 32) = v52;
      *(_OWORD *)(a2 + 48) = v56;
      __n128 result = v44;
      *(__n128 *)a2 = v44;
      *(_OWORD *)(a2 + 16) = v48;
    }
  }
  return result;
}

BOOL sub_1006493BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = *(_DWORD *)(a2 - 40);
      int v7 = *(_DWORD *)(a1 + 56);
      if (v6 > v7
        || v6 == v7
        && ((v35 = *(_DWORD *)(a2 - 72), int v36 = *(_DWORD *)(a1 + 24), v35 > v36)
         || v35 == v36 && *(double *)(a2 - 64) < *(double *)(a1 + 32)))
      {
        long long v8 = (_OWORD *)(a2 - 96);
        long long v43 = *(_OWORD *)(a1 + 32);
        long long v44 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)__n128 v45 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&unsigned char v45[16] = *(_OWORD *)(a1 + 80);
        long long v40 = *(_OWORD *)a1;
        long long v42 = *(_OWORD *)(a1 + 16);
        long long v9 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v9;
        long long v11 = *(_OWORD *)(a2 - 48);
        long long v10 = *(_OWORD *)(a2 - 32);
        long long v12 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 - 23);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)(a1 + 64) = v10;
        *(_OWORD *)(a1 + 32) = v12;
        void v8[4] = *(_OWORD *)v45;
        *(_OWORD *)((char *)v8 + 73) = *(_OWORD *)&v45[9];
        void v8[2] = v43;
        v8[3] = v44;
        *long long v8 = v40;
        v8[1] = v42;
      }
      return result;
    case 3uLL:
      sub_100649100(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_1006496E4(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      sub_100648E70(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96);
      return 1;
    default:
      uint64_t v13 = a1 + 192;
      sub_100649100(a1, a1 + 96, a1 + 192);
      uint64_t v14 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    int v17 = *(_DWORD *)(v14 + 56);
    int v18 = *(_DWORD *)(v13 + 56);
    if (v17 > v18) {
      break;
    }
    if (v17 == v18)
    {
      int v19 = *(_DWORD *)(v14 + 24);
      int v34 = *(_DWORD *)(v13 + 24);
      if (v19 > v34 || v19 == v34 && *(double *)(v14 + 32) < *(double *)(v13 + 32)) {
        goto LABEL_9;
      }
    }
LABEL_26:
    uint64_t v13 = v14;
    v15 += 96;
    v14 += 96;
    if (v14 == a2) {
      return 1;
    }
  }
  int v19 = *(_DWORD *)(v14 + 24);
LABEL_9:
  uint64_t v39 = *(void *)(v14 + 16);
  int v20 = *(_DWORD *)(v14 + 28);
  double v21 = *(double *)(v14 + 32);
  long long v37 = *(_OWORD *)(v14 + 40);
  long long v38 = *(_OWORD *)v14;
  *(_OWORD *)long long v41 = *(_OWORD *)(v14 + 60);
  *(_OWORD *)&v41[16] = *(_OWORD *)(v14 + 76);
  *(_OWORD *)(v14 + 73) = *(_OWORD *)(v13 + 73);
  long long v22 = *(_OWORD *)(v13 + 64);
  long long v23 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
  *(_OWORD *)(v14 + 16) = v23;
  long long v24 = *(_OWORD *)(v13 + 48);
  uint64_t v25 = a1;
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v14 + 48) = v24;
  *(_OWORD *)(v14 + 64) = v22;
  if (v13 != a1)
  {
    uint64_t v26 = v15;
    while (1)
    {
      uint64_t v27 = a1 + v26;
      int v28 = *(_DWORD *)(a1 + v26 + 152);
      if (v17 <= v28)
      {
        if (v17 != v28) {
          goto LABEL_23;
        }
        int v29 = *(_DWORD *)(a1 + v26 + 120);
        if (v19 <= v29)
        {
          if (v19 != v29)
          {
LABEL_23:
            uint64_t v25 = v13;
            goto LABEL_25;
          }
          if (v21 >= *(double *)(a1 + v26 + 128)) {
            break;
          }
        }
      }
      long long v30 = (_OWORD *)(v27 + 192);
      v13 -= 96;
      long long v31 = (_OWORD *)(v27 + 96);
      long long v32 = v31[3];
      void v30[2] = v31[2];
      v30[3] = v32;
      v30[4] = v31[4];
      *(_OWORD *)((char *)v30 + 73) = *(_OWORD *)((char *)v31 + 73);
      long long v33 = v31[1];
      *long long v30 = *v31;
      v30[1] = v33;
      v26 -= 96;
      if (v26 == -192)
      {
        uint64_t v25 = a1;
        goto LABEL_25;
      }
    }
    uint64_t v25 = a1 + v26 + 192;
  }
LABEL_25:
  *(_OWORD *)uint64_t v25 = v38;
  *(void *)(v25 + 16) = v39;
  *(_DWORD *)(v25 + 24) = v19;
  *(_DWORD *)(v25 + 28) = v20;
  *(double *)(v25 + 32) = v21;
  *(_OWORD *)(v25 + 40) = v37;
  *(_DWORD *)(v25 + 56) = v17;
  *(_OWORD *)(v25 + 60) = *(_OWORD *)v41;
  *(_OWORD *)(v25 + 73) = *(_OWORD *)&v41[13];
  if (++v16 != 8) {
    goto LABEL_26;
  }
  return v14 + 96 == a2;
}

__n128 sub_1006496E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  result.n128_u64[0] = sub_100649100(a1, a2, a3).n128_u64[0];
  int v9 = *(_DWORD *)(a4 + 56);
  int v10 = *(_DWORD *)(a3 + 56);
  if (v9 > v10
    || v9 == v10
    && ((int v11 = *(_DWORD *)(a4 + 24), v12 = *(_DWORD *)(a3 + 24), v11 > v12)
     || v11 == v12 && (result.n128_u64[0] = *(void *)(a4 + 32), result.n128_f64[0] < *(double *)(a3 + 32))))
  {
    long long v39 = *(_OWORD *)(a3 + 32);
    long long v42 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)__n128 v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&unsigned char v45[16] = *(_OWORD *)(a3 + 80);
    __n128 v33 = *(__n128 *)a3;
    long long v36 = *(_OWORD *)(a3 + 16);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    long long v15 = *(_OWORD *)(a4 + 48);
    long long v14 = *(_OWORD *)(a4 + 64);
    long long v16 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 73) = *(_OWORD *)(a4 + 73);
    *(_OWORD *)(a3 + 48) = v15;
    *(_OWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 32) = v16;
    *(_OWORD *)(a4 + 64) = *(_OWORD *)v45;
    *(_OWORD *)(a4 + 73) = *(_OWORD *)&v45[9];
    *(_OWORD *)(a4 + 32) = v39;
    *(_OWORD *)(a4 + 48) = v42;
    __n128 result = v33;
    *(__n128 *)a4 = v33;
    *(_OWORD *)(a4 + 16) = v36;
    int v17 = *(_DWORD *)(a3 + 56);
    int v18 = *(_DWORD *)(a2 + 56);
    if (v17 > v18
      || v17 == v18
      && ((int v19 = *(_DWORD *)(a3 + 24), v20 = *(_DWORD *)(a2 + 24), v19 > v20)
       || v19 == v20 && (result.n128_u64[0] = *(void *)(a3 + 32), result.n128_f64[0] < *(double *)(a2 + 32))))
    {
      long long v40 = *(_OWORD *)(a2 + 32);
      long long v43 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)long long v46 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v46[16] = *(_OWORD *)(a2 + 80);
      __n128 v34 = *(__n128 *)a2;
      long long v37 = *(_OWORD *)(a2 + 16);
      long long v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      long long v23 = *(_OWORD *)(a3 + 48);
      long long v22 = *(_OWORD *)(a3 + 64);
      long long v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v46;
      *(_OWORD *)(a3 + 73) = *(_OWORD *)&v46[9];
      *(_OWORD *)(a3 + 32) = v40;
      *(_OWORD *)(a3 + 48) = v43;
      __n128 result = v34;
      *(__n128 *)a3 = v34;
      *(_OWORD *)(a3 + 16) = v37;
      int v25 = *(_DWORD *)(a2 + 56);
      int v26 = *(_DWORD *)(a1 + 56);
      if (v25 > v26
        || v25 == v26
        && ((v27 = *(_DWORD *)(a2 + 24), int v28 = *(_DWORD *)(a1 + 24), v27 > v28)
         || v27 == v28 && (result.n128_u64[0] = *(void *)(a2 + 32), result.n128_f64[0] < *(double *)(a1 + 32))))
      {
        long long v41 = *(_OWORD *)(a1 + 32);
        long long v44 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)long long v47 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 80);
        __n128 v35 = *(__n128 *)a1;
        long long v38 = *(_OWORD *)(a1 + 16);
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        long long v31 = *(_OWORD *)(a2 + 48);
        long long v30 = *(_OWORD *)(a2 + 64);
        long long v32 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v30;
        *(_OWORD *)(a1 + 32) = v32;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v47;
        *(_OWORD *)(a2 + 73) = *(_OWORD *)&v47[9];
        *(_OWORD *)(a2 + 32) = v41;
        *(_OWORD *)(a2 + 48) = v44;
        __n128 result = v35;
        *(__n128 *)a2 = v35;
        *(_OWORD *)(a2 + 16) = v38;
      }
    }
  }
  return result;
}

void sub_1006498D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10064998C(_Unwind_Exception *a1)
{
}

void sub_1006499A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100649A4C(_Unwind_Exception *a1)
{
}

uint64_t sub_100649B00(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_1011C08D4(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = off_1022BF6C0;
  *(_DWORD *)(v8 + 184) = 0;
  *(void *)(v8 + 192) = 0;
  *(void *)(v8 + 216) = 0;
  *(void *)(v8 + 224) = 0;
  *(void *)(v8 + 232) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(v8 + 241) = 0;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(void *)(v8 + 280) = 0x7FEFFFFFFFFFFFFFLL;
  *(int64x2_t *)(v8 + 288) = vdupq_n_s64(0xC069000000000000);
  sub_1000C7F88(buf);
  char v9 = sub_1000D2988(*(uint64_t *)buf, "ForceMapMatching", (BOOL *)(a1 + 240));
  if (*(void *)v27) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v27);
  }
  if ((v9 & 1) == 0) {
    *(unsigned char *)(a1 + 240) = 0;
  }
  unsigned int v10 = [[objc_msgSend(a4, "objectForKey:", @"config") integerValue];
  if (v10 - 1 >= 4 && v10 != 0x7FFFFFFF) {
    unsigned int v10 = 0;
  }
  *(_DWORD *)(a1 + 184) = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_100649FC0;
  void v25[3] = &unk_1022BF730;
  v25[4] = a1;
  sub_1007B39D0(v11, (uint64_t)v25);
  int v20 = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472;
  long long v22 = sub_10064A284;
  long long v23 = &unk_1022A6368;
  uint64_t v24 = a1;
  AnalyticsSendEventLazy();
  int v12 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonLocationUpdaterLive(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v12, &v19);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022BF818);
  }
  long long v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 16);
    int v15 = *(_DWORD *)(a1 + 184);
    int v16 = *(unsigned __int8 *)(a1 + 240);
    *(_DWORD *)std::string buf = 68290306;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v27 = 2082;
    *(void *)&void v27[2] = "";
    __int16 v28 = 2082;
    long long v29 = "activity";
    __int16 v30 = 2114;
    uint64_t v31 = v14;
    __int16 v32 = 2050;
    uint64_t v33 = a1;
    __int16 v34 = 1026;
    int v35 = v15;
    __int16 v36 = 1026;
    int v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonLocationUpdaterLive(ctor)\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"LiveUpdateConfiguration\":%{public}d, \"fForceMapMatching\":%{public}hhd}", buf, 0x3Cu);
  }
  sub_10064A358(a1);
  if (*(_DWORD *)(a1 + 184) != 4) {
    sub_1005AEEAC();
  }
  *(void *)(a1 + 248) = objc_alloc_init(CLDaemonLocationUpdaterLiveAdapter);
  id v17 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLStreamingAwareLocationProvider"];
  *(void *)(a1 + 256) = v17;
  [v17 registerDelegate:*(void *)(a1 + 248) inSilo:[*(id *)(a1 + 32) silo]];
  *(void *)(a1 + 200) = sub_10064A684;
  *(void *)(a1 + 208) = a1;
  *(_DWORD *)(a1 + 244) = 48;
  sub_10064A860(a1, 0);
  os_activity_scope_leave(&v19);
  return a1;
}

void sub_100649F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_activity_scope_state_s a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  os_activity_scope_leave(&a9);
  uint64_t v25 = *(void *)(v21 + 264);
  *(void *)(v21 + 264) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  sub_10064BEC4(v23, 0);
  sub_10064BE74(v22, 0);
  uint64_t v26 = *(void *)(v21 + 192);
  *(void *)(v21 + 192) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  sub_1011C0F50(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_100649FC0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *lpsrc;
  if ((*(unsigned int (**)(uint64_t *))(v4 + 24))(lpsrc) != 1 || v5[46] != *(_DWORD *)(v3 + 184)) {
    return 0;
  }
  uint64_t result = (uint64_t)[*(id *)(v3 + 16) isEqual:sub_10014D19C((uint64_t)lpsrc)];
  if (result)
  {
    *(void *)(v3 + 280) = *((void *)v5 + 35);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BF7F8);
    }
    int v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = (*(uint64_t (**)(uint64_t *))(*lpsrc + 24))(lpsrc);
      uint64_t v9 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v8;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
    }
    unsigned int v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v11 = (*(uint64_t (**)(uint64_t *))(*lpsrc + 24))(lpsrc);
      uint64_t v12 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#luLive consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
    }
    return 1;
  }
  return result;
}

NSDictionary *sub_10064A284(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v2 = (const __CFString *)[*(id *)(v1 + 16) clientAnchorWithType];
  if (v2) {
    CFStringRef v3 = v2;
  }
  else {
    CFStringRef v3 = &stru_10234F018;
  }
  CFStringRef v4 = (const __CFString *)[*(id *)(v1 + 16) subIdentityIdWithType];
  if (v4) {
    CFStringRef v5 = v4;
  }
  else {
    CFStringRef v5 = &stru_10234F018;
  }
  v7[0] = @"Anchor";
  v7[1] = @"SubIdentity";
  v8[0] = v3;
  v8[1] = v5;
  v7[2] = @"LiveConfigIndex";
  void v8[2] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 184)];
  return +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];
}

void sub_10064A358(uint64_t a1)
{
  *(void *)(a1 + 272) = 0x4056800000000000;
  int v2 = *(_DWORD *)(a1 + 184);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 4) {
      goto LABEL_6;
    }
    uint64_t v3 = 0x417E133800000000;
  }
  else
  {
    uint64_t v3 = 0x407E000000000000;
  }
  *(void *)(a1 + 272) = v3;
LABEL_6:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022BF7F8);
  }
  CFStringRef v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = *(_DWORD *)(a1 + 184);
    uint64_t v7 = *(void *)(a1 + 272);
    v8[0] = 68290050;
    v8[1] = 0;
    __int16 v9 = 2082;
    unsigned int v10 = "";
    __int16 v11 = 2114;
    uint64_t v12 = v5;
    __int16 v13 = 2050;
    uint64_t v14 = a1;
    __int16 v15 = 1026;
    int v16 = v6;
    __int16 v17 = 2050;
    uint64_t v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive stationary duration threshold\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"LiveUpdateConfiguration\":%{public}d, \"fStationaryDurationThreshold\":\"%{public}f\"}", (uint8_t *)v8, 0x36u);
  }
}

void sub_10064A4A8(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BF838);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonLocationUpdaterLive::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BF838);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonLocationUpdaterLive::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10064D318(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064A664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064A684(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BF838);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonLocationUpdaterLive::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BF838);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonLocationUpdaterLive::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10064CC18(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10064A840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064A860(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_10064BE74((id **)(a1 + 216), 0);
  sub_10064BEC4((id **)(a1 + 224), 0);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022BF7F8);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    std::string __p = (void *)68289538;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2114;
    uint64_t v24 = v6;
    __int16 v25 = 2050;
    *(void *)uint64_t v26 = a1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive manageSubscription releaseAccuracyEnablementAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", (uint8_t *)&__p, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BF7F8);
    }
  }
  uint64_t v7 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    std::string __p = (void *)68289538;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2114;
    uint64_t v24 = v8;
    __int16 v25 = 2050;
    *(void *)uint64_t v26 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive manageSubscription releaseAccuracyEnablementAssertion", "{\"msg%{public}.0s\":\"#luLive manageSubscription releaseAccuracyEnablementAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", (uint8_t *)&__p, 0x26u);
  }
  [*(id *)(a1 + 256) releaseAccuracyEnablementAssertionForClient:*(void *)(a1 + 248)];
  if (sub_1011C38AC(a1)) {
    sub_1011C3A24(a1);
  }
  sub_1011C3B0C((id *)a1);
  if ([*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:524304] && (a2 & 1) == 0)
  {
    *(unsigned char *)(a1 + 241) = 1;
    unsigned int v9 = [*(id *)(a1 + 40) isAuthorizedForServiceType:12];
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9)
    {
      if (v10 != 4) {
        [*(id *)(*(void *)(a1 + 264) + 16) register:*(void *)(*(void *)(a1 + 264) + 8) forNotification:1 registrationInfo:0];
      }
      sub_1000067EC();
    }
    if (v10 != 4)
    {
      [*(id *)(*(void *)(a1 + 264) + 16) unregister:*(void *)(*(void *)(a1 + 264) + 8) forNotification:1];
      *(void *)(a1 + 280) = 0x7FEFFFFFFFFFFFFFLL;
      *(void *)(a1 + 88) &= ~8uLL;
    }
    sub_10000973C();
  }
  *(unsigned char *)(a1 + 241) = 0;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = sub_10014D19C(a1);
  sub_100148BB0(v11, v12, 0);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022BF7F8);
  }
  int v13 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 16);
    std::string __p = (void *)68289794;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2114;
    uint64_t v24 = v14;
    __int16 v25 = 2050;
    *(void *)uint64_t v26 = a1;
    *(_WORD *)&v26[8] = 1026;
    *(_DWORD *)&v26[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive skip starting location-updates\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"lapseSubscriptionDueToStationary\":%{public}hhd}", (uint8_t *)&__p, 0x2Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BF7F8);
    }
  }
  __int16 v15 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v16 = *(void *)(a1 + 16);
    std::string __p = (void *)68289794;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2114;
    uint64_t v24 = v16;
    __int16 v25 = 2050;
    *(void *)uint64_t v26 = a1;
    *(_WORD *)&v26[8] = 1026;
    *(_DWORD *)&v26[10] = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive skip starting location-updates", "{\"msg%{public}.0s\":\"#luLive skip starting location-updates\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"lapseSubscriptionDueToStationary\":%{public}hhd}", (uint8_t *)&__p, 0x2Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BF7F8);
    }
  }
  __int16 v17 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a1 + 16);
    int v19 = *(_DWORD *)(a1 + 184);
    std::string __p = (void *)68290050;
    __int16 v21 = 2082;
    uint64_t v22 = "";
    __int16 v23 = 2114;
    uint64_t v24 = v18;
    __int16 v25 = 1026;
    *(_DWORD *)uint64_t v26 = v19;
    *(_WORD *)&v26[4] = 2050;
    *(void *)&v26[6] = a1;
    __int16 v27 = 1026;
    int v28 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pwrlog not authorized for locations; stopping liveUpdates if started\", \"ClientKeyPath\":"
      "%{public, location:escape_only}@, \"LiveUpdateConfiguration\":%{public}d, \"self\":\"%{public}p\", \"lapseSubscrip"
      "tionDueToStationary\":%{public}hhd}",
      (uint8_t *)&__p,
      0x32u);
  }
  if (*(_DWORD *)(a1 + 184) != 4 && (a2 & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 264) + 16) unregister:*(void *)(*(void *)(a1 + 264) + 8) forNotification:1];
    *(void *)(a1 + 280) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(a1 + 88) &= ~8uLL;
  }
  sub_1011C3CD8(a1);
}

void sub_10064B704(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10064B750(uint64_t a1)
{
  *(void *)a1 = off_1022BF6C0;
  [*(id *)(a1 + 256) releaseAccuracyEnablementAssertionForClient:*(void *)(a1 + 248)];

  *(void *)(a1 + 256) = 0;
  [*(id *)(a1 + 248) invalidate];

  *(void *)(a1 + 248) = 0;
  sub_1011C135C(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_1011C2B50();
  uint64_t v2 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10064BEC4((id **)(a1 + 224), 0);
  sub_10064BE74((id **)(a1 + 216), 0);
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_1011C0F50(a1);
}

void sub_10064B888(uint64_t a1)
{
  sub_10064B750(a1);

  operator delete();
}

void sub_10064B8C0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44) {
      goto LABEL_7;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(unsigned char *)(a1 + 48) = 1;
    return;
  }
LABEL_7:
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022BF818);
  }
  uint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = CLConnectionMessage::name(*a2);
    uint64_t v9 = *(char *)(v8 + 23) >= 0 ? v8 : *(void *)v8;
    int v14 = 68289794;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v7;
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    __int16 v22 = 2082;
    uint64_t v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #luLive received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BF818);
    }
  }
  int v10 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = CLConnectionMessage::name(*a2);
    if (*(char *)(v12 + 23) >= 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = *(void *)v12;
    }
    int v14 = 68289794;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v11;
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    __int16 v22 = 2082;
    uint64_t v23 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning #luLive received unhandled message", "{\"msg%{public}.0s\":\"#Warning #luLive received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
  }
}

void sub_10064BB08(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022BF7F8);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    [*(id *)(a1 + 40) registrationResult];
    unsigned int v3 = [*(id *)(a1 + 40) registrationResult];
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2050;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#luLive updateAuthContext change\", \"RegistrationResult\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v4, 0x1Cu);
  }
  sub_10064A860(a1, 0);
}

uint64_t sub_10064BC10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_10064BC18(uint64_t a1)
{
  v4[0] = @"config";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 184)];
  v4[1] = @"SDKAtLeast2024";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

uint64_t sub_10064BCBC()
{
  return 1;
}

uint64_t sub_10064BCC4()
{
  return 12415;
}

uint64_t sub_10064BCCC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 184);
  if (v1 > 3)
  {
    if (v1 == 0x7FFFFFFF) {
      unsigned int v3 = 5;
    }
    else {
      unsigned int v3 = 48;
    }
    if (v1 == 4) {
      return 29;
    }
    else {
      return v3;
    }
  }
  else if ((v1 - 1) >= 2)
  {
    if (v1 == 3) {
      return 28;
    }
    else {
      return 48;
    }
  }
  else if ([*(id *)(a1 + 40) inUseLevelIsAtLeast:5])
  {
    return 35;
  }
  else
  {
    return 48;
  }
}

uint64_t sub_10064BD48(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 184);
  if (v2 > 4)
  {
    if (v2 != 0x7FFFFFFF) {
      return 17;
    }
    goto LABEL_6;
  }
  if (((1 << v2) & 0xB) == 0)
  {
LABEL_6:
    if (![*(id *)(a1 + 40) isAuthorizedForServiceType:12] || !*(unsigned char *)(a1 + 240)) {
      return 48;
    }
    return 17;
  }
  if ([*(id *)(a1 + 40) isAuthorizedForServiceType:12]) {
    return 17;
  }
  return 48;
}

uint64_t sub_10064BDCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 241)) {
    return 0;
  }
  unsigned __int8 v3 = [*(id *)(a1 + 40) diagnosticMask];
  if ((int)[*(id *)(a1 + 40) inUseLevel] >= 1) {
    uint64_t v1 = v3 & 3;
  }
  else {
    uint64_t v1 = v3 & 3 | 0x10;
  }
  uint64_t v4 = *(void *)(a1 + 88);
  unsigned int v5 = [*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:16];
  BOOL v6 = (v4 & 8) == 0;
  uint64_t v7 = v1 | 0x1000;
  if ((v5 & v6) != 0) {
    v1 |= 0x1000uLL;
  }
  if (([*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:0x100000] & 1) == 0
    && [*(id *)(a1 + 40) transientAwareRegistrationResult] == 4)
  {
    return v7;
  }
  return v1;
}

id *sub_10064BE74(id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10064DC10(result);
    operator delete();
  }
  return result;
}

id *sub_10064BEC4(id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10064DC50(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10064BF14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(int64x2_t *)(a2 + 8) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 27) = 0;
  int v2 = *(_DWORD *)(result + 244);
  *(unsigned char *)(a2 + 29) = v2 == 5;
  *(unsigned char *)a2 = v2 != 48;
  if (v2 != 48) {
    *(_DWORD *)(a2 + 24) = v2;
  }
  return result;
}

void sub_10064BF54(uint64_t a1, uint64_t a2)
{
  sub_1000EF97C((uint64_t)v28, a2);
  uint64_t v3 = *(void *)(a1 + 232);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  __int16 v16 = sub_10064C250;
  __int16 v17 = &unk_1022BF750;
  uint64_t v18 = a1;
  sub_1000EF97C((uint64_t)&v19, (uint64_t)v28);
  int v26 = 0x1000000;
  uint64_t v27 = v3;
  if ([*(id *)(a1 + 40) isNonProvisionallyAuthorizedForServiceTypeMask:524304])
  {
    v16((uint64_t)v15);
  }
  else
  {
    id v4 = [*(id *)(a1 + 16) legacyClientKey];
    id v5 = objc_alloc((Class)CLLocation);
    v13[6] = v28[6];
    v13[7] = v28[7];
    v14[0] = v29[0];
    *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)v29 + 12);
    void v13[2] = v28[2];
    v13[3] = v28[3];
    void v13[4] = v28[4];
    v13[5] = v28[5];
    v13[0] = v28[0];
    v13[1] = v28[1];
    id v6 = [v5 initWithClientLocation:v13];
    id v7 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLClientManager" forClient:@"CLClientManager"];
    id v8 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLApplicationLifecycleManager"];
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000DB0A0(v9);
    }
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768;
    _DWORD v11[2] = sub_10064C7F0;
    void v11[3] = &unk_1022BF7B0;
    v11[7] = a1;
    v11[8] = v10;
    uint64_t v12 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v11[5] = v8;
    void v11[6] = v15;
    int v11[4] = v4;
    [v7 handleProvisionalIntermediationForService:4 forClientKey:v4 at:v6 withReply:v11];
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v24) {
    sub_1000DB0A0(v24);
  }
  if (v23 < 0) {
    operator delete(__p);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v20) {
    sub_1000DB0A0(v20);
  }

  if (v34) {
    sub_1000DB0A0(v34);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31) {
    sub_1000DB0A0(v31);
  }
  if (v30) {
    sub_1000DB0A0(v30);
  }
}

void sub_10064C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  sub_100458658(v18);
  sub_100458658((uint64_t)&STACK[0x728]);
  _Unwind_Resume(a1);
}

uint64_t sub_10064C250(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000E9354(v20);
  uint64_t v3 = a1 + 40;
  int v4 = sub_1000E9B98((UInt8 *)(a1 + 40), (uint64_t)v20, a1 + 1568);
  if (v4)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BF818);
    }
    id v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(v2 + 16);
      *(_DWORD *)std::string buf = 68290307;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v22 = 2082;
      *(void *)&void v22[2] = "";
      __int16 v23 = 2114;
      uint64_t v24 = v6;
      __int16 v25 = 2050;
      uint64_t v26 = v2;
      __int16 v27 = 1026;
      int v28 = v4;
      __int16 v29 = 1040;
      int v30 = 156;
      __int16 v31 = 2097;
      uint64_t v32 = a1 + 40;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive sending location\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BF818);
      }
    }
    id v7 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v8 = *(void *)(v2 + 16);
      *(_DWORD *)std::string buf = 68290307;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v22 = 2082;
      *(void *)&void v22[2] = "";
      __int16 v23 = 2114;
      uint64_t v24 = v8;
      __int16 v25 = 2050;
      uint64_t v26 = v2;
      __int16 v27 = 1026;
      int v28 = v4;
      __int16 v29 = 1040;
      int v30 = 156;
      __int16 v31 = 2097;
      uint64_t v32 = a1 + 40;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive sending location", "{\"msg%{public}.0s\":\"#luLive sending location\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
    }
    if (v4 == 1)
    {
      *(_DWORD *)std::string buf = sub_1011C3B48(v2);
      sub_1000EA838((uint64_t)v20, "kCLConnectionMessageDiagnosticsKey", buf);
      uint64_t v19 = sub_1000E9358((uint64_t)v20);
      if (*(_DWORD *)(a1 + 136) == 12)
      {
        sub_10064DD20("kCLConnectionMessageCompensatedLocation", buf);
        uint64_t v9 = *(void *)buf;
        uint64_t v10 = *(std::__shared_weak_count **)v22;
        double v11 = 0.0;
      }
      else
      {
        double v11 = *(double *)(a1 + 128);
        sub_10064DD84("kCLConnectionMessageLocation", buf);
        uint64_t v9 = *(void *)buf;
        uint64_t v10 = *(std::__shared_weak_count **)v22;
      }
      uint64_t v17 = v9;
      uint64_t v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1011C187C(v2, (uint64_t)&v17, 16, 0, v11);
      if (v18) {
        sub_1000DB0A0(v18);
      }
      if (v10) {
        sub_1000DB0A0(v10);
      }
      return sub_10013F3C4(v20);
    }
    sub_101A6876C();
    abort_report_np();
    __break(1u);
  }
  else if (qword_102419520 == -1)
  {
    goto LABEL_13;
  }
  dispatch_once(&qword_102419520, &stru_1022BF818);
LABEL_13:
  uint64_t v12 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(v2 + 16);
    *(_DWORD *)std::string buf = 68290307;
    *(_WORD *)__int16 v22 = 2082;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&void v22[2] = "";
    __int16 v23 = 2114;
    uint64_t v24 = v13;
    __int16 v25 = 2050;
    uint64_t v26 = v2;
    __int16 v27 = 1026;
    int v28 = 0;
    __int16 v29 = 1040;
    int v30 = 156;
    __int16 v31 = 2097;
    uint64_t v32 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive locationData does not have any entries\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BF818);
    }
  }
  int v14 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v15 = *(void *)(v2 + 16);
    *(_DWORD *)std::string buf = 68290307;
    *(_WORD *)__int16 v22 = 2082;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(void *)&void v22[2] = "";
    __int16 v23 = 2114;
    uint64_t v24 = v15;
    __int16 v25 = 2050;
    uint64_t v26 = v2;
    __int16 v27 = 1026;
    int v28 = 0;
    __int16 v29 = 1040;
    int v30 = 156;
    __int16 v31 = 2097;
    uint64_t v32 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive locationData does not have any entries", "{\"msg%{public}.0s\":\"#luLive locationData does not have any entries\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"locationCountAfterSerialization\":%{public}d, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Cu);
  }
  return sub_10013F3C4(v20);
}

void sub_10064C71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10064C76C(uint64_t a1, uint64_t a2)
{
  return sub_1000EF97C(a1 + 40, a2 + 40);
}

void sub_10064C778(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1208);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (*(char *)(a1 + 967) < 0) {
    operator delete(*(void **)(a1 + 944));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 848);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 728);
  if (v4)
  {
    sub_1000DB0A0(v4);
  }
}

void sub_10064C7F0(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2020000000;
    char v20 = 0;
    uint64_t v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    uint64_t v15 = sub_10064CBB0;
    __int16 v16 = &unk_1022BF788;
    uint64_t v4 = *(void *)(a1 + 72);
    if (!v4 || *(void *)(v4 + 8) == -1) {
      goto LABEL_15;
    }
    if (!sub_1011C0EB4(v3)) {
      *((unsigned char *)v18 + 24) = 1;
    }
    if (*((unsigned char *)v18 + 24))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
      id v5 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = [[*(id *)(a1 + 32) UTF8String:_NSConcreteStackBlock:3221225472:sub_10064CBB0:&unk_1022BF788];
        *(_DWORD *)std::string buf = 68289282;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        id v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation delievering location block\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022BF7F8);
        }
      }
      id v7 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        id v8 = [*(id *)(a1 + 32) UTF8String];
        *(_DWORD *)std::string buf = 68289282;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        id v26 = v8;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive ProvisionalIntermediation delievering location block", "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation delievering location block\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
LABEL_15:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
      uint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [[*(id *)(a1 + 32) UTF8String:_NSConcreteStackBlock:3221225472:sub_10064CBB0:&unk_1022BF788];
        *(_DWORD *)std::string buf = 68289282;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        id v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation launching app\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022BF7F8);
        }
      }
      double v11 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        id v12 = [*(id *)(a1 + 32) UTF8String];
        *(_DWORD *)std::string buf = 68289282;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        id v26 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive ProvisionalIntermediation launching app", "{\"msg%{public}.0s\":\"#luLive ProvisionalIntermediation launching app\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      [*(id *)(a1 + 40) launchApplication:requiringAuthForServiceMask:*(void *)(a1 + 32), 16, v13, v14, v15, v16];
    }
    _Block_object_dispose(&v17, 8);
  }
}

void sub_10064CB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10064CBB0(uint64_t a1)
{
  BOOL result = sub_1011C0EB4(*(void *)(a1 + 40));
  if (!result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_10064CBEC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10064CC08(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10064CC18(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  [*(id *)(a1 + 32) silo];
  int v7 = *a3;
  if (*a3 < 2)
  {
LABEL_4:
    *(void *)(a1 + 88) &= ~0x20uLL;
    sub_10064D04C(a1, a4);
    [objc_msgSend(*(id *)(a1 + 32), "silo") currentLatchedAbsoluteTimestamp];
    if (v8 - *(double *)(a1 + 280) <= *(double *)(a1 + 272))
    {
      *(void *)(a1 + 88) &= ~8uLL;
      sub_10064BF54(a1, a4);
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
      uint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 16);
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v21 = 2082;
        *(void *)&void v21[2] = "";
        __int16 v22 = 2114;
        uint64_t v23 = v10;
        __int16 v24 = 2050;
        uint64_t v25 = a1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive sending #stationary true\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
      }
      *(void *)(a1 + 88) |= 8uLL;
      sub_10064BF54(a1, a4);
      sub_10064A860(a1, 1);
    }
    return;
  }
  if (v7 == 9)
  {
    *(void *)(a1 + 88) |= 0x20uLL;
    id v19 = +[NSMutableDictionary dictionary];
    [v19 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", sub_1011C3B48(a1)) forKeyedSubscript:@"kCLConnectionMessageDiagnosticsKey"];
    sub_10064DDE8("kCLConnectionMessageLocationUnavailable", buf);
    uint64_t v17 = *(void *)buf;
    uint64_t v18 = *(std::__shared_weak_count **)v21;
    if (*(void *)v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v21 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1011C187C(a1, (uint64_t)&v17, 16, 1, 0.0);
    if (v18) {
      sub_1000DB0A0(v18);
    }
    if (*(void *)v21) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v21);
    }
  }
  else
  {
    if (v7 == 5) {
      goto LABEL_4;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BF7F8);
    }
    double v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v12 = *(void *)(a1 + 16);
      int v13 = *a3;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v21 = 2082;
      *(void *)&void v21[2] = "";
      __int16 v22 = 2114;
      uint64_t v23 = v12;
      __int16 v24 = 2050;
      uint64_t v25 = a1;
      __int16 v26 = 1026;
      int v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#luLive unkown location notification\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}", buf, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
    }
    uint64_t v14 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *a3;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v21 = 2082;
      *(void *)&void v21[2] = "";
      __int16 v22 = 2114;
      uint64_t v23 = v15;
      __int16 v24 = 2050;
      uint64_t v25 = a1;
      __int16 v26 = 1026;
      int v27 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive unkown location notification", "{\"msg%{public}.0s\":\"#luLive unkown location notification\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}", buf, 0x2Cu);
    }
  }
}

void sub_10064D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064D04C(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 280);
  if (v4 == 1.79769313e308)
  {
    id v5 = (_OWORD *)(a2 + 4);
    double v8 = (_OWORD *)(a1 + 288);
LABEL_14:
    *double v8 = *v5;
    return;
  }
  if (sub_1011C24AC(*(double *)(a1 + 288), *(double *)(a1 + 296)))
  {
    id v5 = (_OWORD *)(a2 + 4);
    double v6 = sub_1000A3D9C(*(double *)(a1 + 288), *(double *)(a1 + 296), *(double *)(a2 + 4), *(double *)(a2 + 12));
    if (v6 > 20.0)
    {
      [objc_msgSend(*(id *)(a1 + 32), "silo") currentLatchedAbsoluteTimestamp];
      if (*(double *)(a1 + 280) >= v7) {
        double v7 = *(double *)(a1 + 280);
      }
      *(double *)(a1 + 280) = v7;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
      double v8 = (_OWORD *)(a1 + 288);
      uint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 16);
        uint64_t v11 = *(void *)(a1 + 280);
        uint64_t v12 = *(void *)(a1 + 288);
        uint64_t v13 = *(void *)(a1 + 296);
        uint64_t v14 = *(void *)(a2 + 4);
        uint64_t v15 = *(void *)(a2 + 12);
        int v23 = 68291330;
        int v24 = 0;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2114;
        uint64_t v28 = v10;
        __int16 v29 = 2050;
        uint64_t v30 = a1;
        __int16 v31 = 2050;
        double v32 = v6;
        __int16 v33 = 2050;
        double v34 = v4;
        __int16 v35 = 2050;
        uint64_t v36 = v11;
        __int16 v37 = 2050;
        uint64_t v38 = v12;
        __int16 v39 = 2050;
        uint64_t v40 = v13;
        __int16 v41 = 2050;
        uint64_t v42 = v14;
        __int16 v43 = 2050;
        uint64_t v44 = v15;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive unmarking #stationary by location-wandering\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"wander\":\"%{public}f\", \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\", \"refLat\":\"%{public}f\", \"refLon\":\"%{public}f\", \"lat\":\"%{public}f\", \"lon\":\"%{public}f\"}", (uint8_t *)&v23, 0x6Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022BF7F8);
        }
      }
      int v16 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 280);
        uint64_t v19 = *(void *)(a1 + 288);
        uint64_t v20 = *(void *)(a1 + 296);
        uint64_t v21 = *(void *)(a2 + 4);
        uint64_t v22 = *(void *)(a2 + 12);
        int v23 = 68291330;
        int v24 = 0;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2114;
        uint64_t v28 = v17;
        __int16 v29 = 2050;
        uint64_t v30 = a1;
        __int16 v31 = 2050;
        double v32 = v6;
        __int16 v33 = 2050;
        double v34 = v4;
        __int16 v35 = 2050;
        uint64_t v36 = v18;
        __int16 v37 = 2050;
        uint64_t v38 = v19;
        __int16 v39 = 2050;
        uint64_t v40 = v20;
        __int16 v41 = 2050;
        uint64_t v42 = v21;
        __int16 v43 = 2050;
        uint64_t v44 = v22;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive unmarking #stationary by location-wandering", "{\"msg%{public}.0s\":\"#luLive unmarking #stationary by location-wandering\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"wander\":\"%{public}f\", \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\", \"refLat\":\"%{public}f\", \"refLon\":\"%{public}f\", \"lat\":\"%{public}f\", \"lon\":\"%{public}f\"}", (uint8_t *)&v23, 0x6Cu);
      }
      goto LABEL_14;
    }
  }
}

void sub_10064D318(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  sub_1000C7F88(buf);
  BOOL v44 = 0;
  int v7 = sub_1000D2988(*(uint64_t *)buf, "DisableStationaryTracking", &v44);
  if (v44) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  if (*(void *)v46) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v46);
  }
  if (v8)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BF7F8);
    }
    uint64_t v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)long long v46 = 2082;
      *(void *)&v46[2] = "";
      __int16 v47 = 2114;
      uint64_t v48 = v10;
      __int16 v49 = 2050;
      uint64_t v50 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive #stationary tracking disbaled by defaults\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
    }
    uint64_t v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v12 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)long long v46 = 2082;
      *(void *)&v46[2] = "";
      __int16 v47 = 2114;
      uint64_t v48 = v12;
      __int16 v49 = 2050;
      uint64_t v50 = a1;
      uint64_t v13 = "#luLive #stationary tracking disbaled by defaults";
      uint64_t v14 = "{\"msg%{public}.0s\":\"#luLive #stationary tracking disbaled by defaults\", \"ClientKeyPath\":%{public, loca"
            "tion:escape_only}@, \"self\":\"%{public}p\"}";
LABEL_33:
      __int16 v25 = v11;
      uint32_t v26 = 38;
      goto LABEL_34;
    }
  }
  else
  {
    [*(id *)(a1 + 32) silo];
    if ([*(id *)(a1 + 40) isAuthorizedForServiceType:12])
    {
      if (*a3 == 1)
      {
        double v15 = *(double *)(a1 + 280);
        if ((*a4 - 1) > 1)
        {
          *(void *)(a1 + 280) = 0x7FEFFFFFFFFFFFFFLL;
          *(void *)(a1 + 88) &= ~8uLL;
          if (v15 != 1.79769313e308)
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022BF7F8);
            }
            uint64_t v36 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v37 = *(void *)(a1 + 16);
              int v38 = *a4;
              uint64_t v39 = *(void *)(a1 + 280);
              *(_DWORD *)std::string buf = 68290306;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)long long v46 = 2082;
              *(void *)&v46[2] = "";
              __int16 v47 = 2114;
              uint64_t v48 = v37;
              __int16 v49 = 2050;
              uint64_t v50 = a1;
              __int16 v51 = 1026;
              int v52 = v38;
              __int16 v53 = 2050;
              double v54 = v15;
              __int16 v55 = 2050;
              uint64_t v56 = v39;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive motion state non #stationary\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}", buf, 0x40u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022BF7F8);
              }
            }
            uint64_t v40 = qword_102419538;
            if (os_signpost_enabled((os_log_t)qword_102419538))
            {
              uint64_t v41 = *(void *)(a1 + 16);
              int v42 = *a4;
              uint64_t v43 = *(void *)(a1 + 280);
              *(_DWORD *)std::string buf = 68290306;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)long long v46 = 2082;
              *(void *)&v46[2] = "";
              __int16 v47 = 2114;
              uint64_t v48 = v41;
              __int16 v49 = 2050;
              uint64_t v50 = a1;
              __int16 v51 = 1026;
              int v52 = v42;
              __int16 v53 = 2050;
              double v54 = v15;
              __int16 v55 = 2050;
              uint64_t v56 = v43;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive motion state non #stationary", "{\"msg%{public}.0s\":\"#luLive motion state non #stationary\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}", buf, 0x40u);
            }
            sub_10064A860(a1, 0);
          }
        }
        else
        {
          [objc_msgSend(*(id *)(a1 + 32), "silo") currentLatchedAbsoluteTimestamp];
          if (v16 >= *(double *)(a1 + 280)) {
            double v16 = *(double *)(a1 + 280);
          }
          *(double *)(a1 + 280) = v16;
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022BF7F8);
          }
          uint64_t v17 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v18 = *(void *)(a1 + 16);
            int v19 = *a4;
            uint64_t v20 = *(void *)(a1 + 280);
            *(_DWORD *)std::string buf = 68290306;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)long long v46 = 2082;
            *(void *)&v46[2] = "";
            __int16 v47 = 2114;
            uint64_t v48 = v18;
            __int16 v49 = 2050;
            uint64_t v50 = a1;
            __int16 v51 = 1026;
            int v52 = v19;
            __int16 v53 = 2050;
            double v54 = v15;
            __int16 v55 = 2050;
            uint64_t v56 = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive motion state #stationary\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}", buf, 0x40u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022BF7F8);
            }
          }
          uint64_t v21 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            uint64_t v22 = *(void *)(a1 + 16);
            int v23 = *a4;
            uint64_t v24 = *(void *)(a1 + 280);
            *(_DWORD *)std::string buf = 68290306;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)long long v46 = 2082;
            *(void *)&v46[2] = "";
            __int16 v47 = 2114;
            uint64_t v48 = v22;
            __int16 v49 = 2050;
            uint64_t v50 = a1;
            __int16 v51 = 1026;
            int v52 = v23;
            __int16 v53 = 2050;
            double v54 = v15;
            __int16 v55 = 2050;
            uint64_t v56 = v24;
            uint64_t v13 = "#luLive motion state #stationary";
            uint64_t v14 = "{\"msg%{public}.0s\":\"#luLive motion state #stationary\", \"ClientKeyPath\":%{public, location:escape"
                  "_only}@, \"self\":\"%{public}p\", \"Type\":%{public}d, \"OldTS\":\"%{public}f\", \"NewTS\":\"%{public}f\"}";
            __int16 v25 = v21;
            uint32_t v26 = 64;
LABEL_34:
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v13, v14, buf, v26);
          }
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022BF7F8);
        }
        uint64_t v30 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(void *)(a1 + 16);
          int v32 = *a3;
          *(_DWORD *)std::string buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)long long v46 = 2082;
          *(void *)&v46[2] = "";
          __int16 v47 = 2114;
          uint64_t v48 = v31;
          __int16 v49 = 2050;
          uint64_t v50 = a1;
          __int16 v51 = 1026;
          int v52 = v32;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #luLive unkown motion state notification\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}", buf, 0x2Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022BF7F8);
          }
        }
        uint64_t v33 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          uint64_t v34 = *(void *)(a1 + 16);
          int v35 = *a3;
          *(_DWORD *)std::string buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)long long v46 = 2082;
          *(void *)&v46[2] = "";
          __int16 v47 = 2114;
          uint64_t v48 = v34;
          __int16 v49 = 2050;
          uint64_t v50 = a1;
          __int16 v51 = 1026;
          int v52 = v35;
          uint64_t v13 = "#Warning #luLive unkown motion state notification";
          uint64_t v14 = "{\"msg%{public}.0s\":\"#Warning #luLive unkown motion state notification\", \"ClientKeyPath\":%{public, "
                "location:escape_only}@, \"self\":\"%{public}p\", \"Notification\":%{public}d}";
          __int16 v25 = v33;
          uint32_t v26 = 44;
          goto LABEL_34;
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BF7F8);
      }
      __int16 v27 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = *(void *)(a1 + 16);
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)long long v46 = 2082;
        *(void *)&v46[2] = "";
        __int16 v47 = 2114;
        uint64_t v48 = v28;
        __int16 v49 = 2050;
        uint64_t v50 = a1;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luLive stationary-tracking skip motion state update - coarse client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022BF7F8);
        }
      }
      uint64_t v11 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v29 = *(void *)(a1 + 16);
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)long long v46 = 2082;
        *(void *)&v46[2] = "";
        __int16 v47 = 2114;
        uint64_t v48 = v29;
        __int16 v49 = 2050;
        uint64_t v50 = a1;
        uint64_t v13 = "#luLive stationary-tracking skip motion state update - coarse client";
        uint64_t v14 = "{\"msg%{public}.0s\":\"#luLive stationary-tracking skip motion state update - coarse client\", \"ClientKey"
              "Path\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}";
        goto LABEL_33;
      }
    }
  }
}

void sub_10064DB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064DB80(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10064DBB0(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_10064DBE0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

id *sub_10064DC10(id *a1)
{
  *a1 = 0;
  return a1;
}

id *sub_10064DC50(id *a1)
{
  *a1 = 0;
  return a1;
}

void *sub_10064DC84(void *a1)
{
  *a1 = 0;
  std::operator+<char>();
  uint64_t v2 = [CLOSTransaction alloc];
  if (v6 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  *a1 = [(CLOSTransaction *)v2 initWithDescription:p_p];
  if (v6 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10064DD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10064DD20@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  BOOL result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10064DD70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10064DD84@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  BOOL result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10064DDD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10064DDE8@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  BOOL result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10064DE38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10064DE4C(uint64_t a1, uint64_t *a2, void *a3)
{
  *(void *)a1 = off_1022BF8D0;
  uint64_t v6 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 8) = v6;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), (void *)a2[2], a2[3]);
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 40) = a2[4];
    *(_OWORD *)(a1 + 24) = v7;
  }
  *(void *)(a1 + 48) = a2[5];
  *(void *)(a1 + 56) = *a3;
  sub_1005F54CC(a1 + 64, a2);
  sub_100F03BA0((void *)(a1 + 200), 0, 0);
  sub_100F03BA0((void *)(a1 + 216), 0, 0);
  return a1;
}

void sub_10064DF1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10064DF48(uint64_t a1)
{
  *(void *)a1 = off_1022BF8D0;
  sub_1005F5850(a1 + 64);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_10064DFA4(uint64_t a1)
{
  if (sub_10014C3C0(a1 + 64))
  {
    sub_10010F274((uint64_t)v13);
    char v12 = 1;
    sub_1000C7F88(&v23);
    int v2 = sub_1000D2988((uint64_t)v23, "ClearDatabaseTablesByAge", (BOOL *)&v12);
    if (v24) {
      sub_1000DB0A0(v24);
    }
    if (v2)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF918);
      }
      uint64_t v3 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = v12;
        (*(void (**)(void ***__return_ptr, uint64_t))(*(void *)a1 + 16))(&v23, a1);
        id v5 = v25 >= 0 ? (void **)&v23 : v23;
        LODWORD(buf) = 67109378;
        HIDWORD(buf) = v4;
        __int16 v16 = 2080;
        uint64_t v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Overriding clear tables by age to %d for %s", (uint8_t *)&buf, 0x12u);
        if (v25 < 0) {
          operator delete(v23);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v23, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BF918);
        }
        int v9 = v12;
        (*(void (**)(void ***__return_ptr, uint64_t))(*(void *)a1 + 16))(&buf, a1);
        if (v18 >= 0) {
          p_std::string buf = (void **)&buf;
        }
        else {
          p_std::string buf = buf;
        }
        int v19 = 67109378;
        int v20 = v9;
        __int16 v21 = 2080;
        uint64_t v22 = p_buf;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        if (v18 < 0) {
          operator delete(buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationDatabase::prepareStatements()", "%s\n", v11);
        if (v11 != (char *)&v23) {
          free(v11);
        }
      }
    }
    if (v12 && !*(unsigned char *)(a1 + 16) && *(double *)(a1 + 56) > 0.0 && (int)sub_10064E540(a1) >= 200001) {
      sub_10064E5D0(a1, a1 + 56);
    }
    *(void *)((char *)v13
    void v13[2] = v6;
    if (v14 < 0) {
      operator delete((void *)v13[11]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
    }
    long long v7 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call prepareStatements() without a backing database in CLLocationDatabase!", (uint8_t *)&v23, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v23, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
      }
      LOWORD(v13[0]) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationDatabase::prepareStatements()", "%s\n", v8);
      if (v8 != (char *)&v23) {
        free(v8);
      }
    }
  }
}

void sub_10064E4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10064E538(uint64_t a1)
{
  return sub_10014C3C0(a1 + 64);
}

uint64_t sub_10064E540(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  uint64_t v2 = sub_10064E688(v1, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_10064E5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10064E5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 64;
  uint64_t v4 = a1 + 8;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  sub_100650A4C(a2, v3, v4, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10064E654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10064E670(uint64_t a1)
{
  return sub_10002B640(a1 + 64);
}

uint64_t sub_10064E678(uint64_t a1)
{
  return sub_100028FB4(a1 + 64);
}

uint64_t sub_10064E680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001B0D0C(a1 + 64, a2);
}

uint64_t sub_10064E688(uint64_t a1, uint64_t a2)
{
  if (sub_10014C3C0(a1))
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v4 = sub_100132EFC(&v21, (uint64_t)"SELECT ", 7);
    size_t v5 = strlen("Count");
    char v6 = sub_100132EFC(v4, (uint64_t)"Count", v5);
    long long v7 = sub_100132EFC(v6, (uint64_t)" FROM ", 6);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = sub_100132EFC(v7, v9, v10);
    size_t v12 = strlen("Counts");
    uint64_t v13 = sub_100132EFC(v11, (uint64_t)"Counts", v12);
    sub_100132EFC(v13, (uint64_t)" WHERE rowid=", 13);
    std::ostream::operator<<();
    std::stringbuf::str();
    if (v19 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
  }
  double v15 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getCountFromTriggerTable() without a backing database in CLLocationDatabase!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
    }
    LOWORD(__p) = 0;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static int CLLocationDatabase::getCountFromTriggerTable(CLSqliteDatabase &, const std::string &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return 0;
}

void sub_10064EAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_10064EAFC(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  BOOL v3 = sub_10014C3C0(a1 + 64);
  if (v3)
  {
    int v38 = 0xFFFF;
    uint64_t v40 = 0;
    uint64_t v39 = 0;
    long long v41 = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v42 = _Q0;
    long long v43 = _Q0;
    long long v44 = _Q0;
    int v45 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unint64_t v46 = 0xBFF0000000000000;
    int v49 = 0;
    unint64_t v50 = 0xBFF0000000000000;
    int v51 = 0x7FFFFFFF;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v52 = 0;
    char v55 = 0;
    sub_10010F274((uint64_t)buf);
    uint64_t v9 = sub_100132EFC(&v57, (uint64_t)"SELECT ", 7);
    uint64_t v10 = sub_100132EFC(v9, (uint64_t)"Timestamp", 9);
    uint64_t v11 = sub_100132EFC(v10, (uint64_t)", ", 2);
    size_t v12 = sub_100132EFC(v11, (uint64_t)"Latitude", 8);
    uint64_t v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
    char v14 = sub_100132EFC(v13, (uint64_t)"Longitude", 9);
    double v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
    __int16 v16 = sub_100132EFC(v15, (uint64_t)"HorizontalAccuracy", 18);
    uint64_t v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
    char v18 = sub_100132EFC(v17, (uint64_t)"Altitude", 8);
    char v19 = sub_100132EFC(v18, (uint64_t)", ", 2);
    int v20 = sub_100132EFC(v19, (uint64_t)"VerticalAccuracy", 16);
    uint64_t v21 = sub_100132EFC(v20, (uint64_t)", ", 2);
    uint64_t v22 = sub_100132EFC(v21, (uint64_t)"Speed", 5);
    int v23 = sub_100132EFC(v22, (uint64_t)", ", 2);
    uint64_t v24 = sub_100132EFC(v23, (uint64_t)"Course", 6);
    char v25 = sub_100132EFC(v24, (uint64_t)", ", 2);
    uint32_t v26 = sub_100132EFC(v25, (uint64_t)"Confidence", 10);
    __int16 v27 = sub_100132EFC(v26, (uint64_t)", ", 2);
    uint64_t v28 = sub_100132EFC(v27, (uint64_t)"ROWID", 5);
    uint64_t v29 = sub_100132EFC(v28, (uint64_t)" FROM ", 6);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    if ((v37 & 0x80u) == 0) {
      uint64_t v30 = __p;
    }
    else {
      uint64_t v30 = (void **)__p[0];
    }
    if ((v37 & 0x80u) == 0) {
      uint64_t v31 = v37;
    }
    else {
      uint64_t v31 = (uint64_t)__p[1];
    }
    sub_100132EFC(v29, (uint64_t)v30, v31);
    if ((char)v37 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    if ((v37 & 0x80u) == 0) {
      int v32 = __p;
    }
    else {
      int v32 = (void **)__p[0];
    }
    sub_10014D518(v2, (uint64_t)v32);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
  }
  uint64_t v33 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getLocations() without a backing database in CLLocationDatabase!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
    }
    LOWORD(v38) = 0;
    uint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationDatabase::getLocations(OnLocation) const", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  return v3;
}

void sub_10064F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_10064F1E8(void *a1, sqlite3_int64 *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)(a1 + 8);
  if (!sub_10014C3C0((uint64_t)(a1 + 8)))
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
    }
    int v51 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call setLocation() without a backing database in CLLocationDatabase!", __p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
      }
      *(_WORD *)std::string buf = 0;
      double v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v59);
      if (v59 != __p) {
        free(v59);
      }
    }
    return 0;
  }
  long long v7 = a1 + 27;
  if (!sub_100F03BA8(a1 + 27))
  {
    sub_10010F274((uint64_t)buf);
    int v8 = sub_100132EFC(&buf[16], (uint64_t)"UPDATE OR REPLACE ", 18);
    (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 16))(__p, a1);
    if (v81 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = *(unsigned char **)__p;
    }
    if (v81 >= 0) {
      uint64_t v10 = HIBYTE(v81);
    }
    else {
      uint64_t v10 = *(void *)&__p[8];
    }
    uint64_t v11 = sub_100132EFC(v8, (uint64_t)v9, v10);
    size_t v12 = sub_100132EFC(v11, (uint64_t)" SET ", 5);
    uint64_t v13 = sub_100132EFC(v12, (uint64_t)"Timestamp", 9);
    char v14 = sub_100132EFC(v13, (uint64_t)"=?, ", 4);
    double v15 = sub_100132EFC(v14, (uint64_t)"Latitude", 8);
    __int16 v16 = sub_100132EFC(v15, (uint64_t)"=?, ", 4);
    uint64_t v17 = sub_100132EFC(v16, (uint64_t)"Longitude", 9);
    char v18 = sub_100132EFC(v17, (uint64_t)"=?, ", 4);
    char v19 = sub_100132EFC(v18, (uint64_t)"HorizontalAccuracy", 18);
    int v20 = sub_100132EFC(v19, (uint64_t)"=?, ", 4);
    uint64_t v21 = sub_100132EFC(v20, (uint64_t)"Altitude", 8);
    uint64_t v22 = sub_100132EFC(v21, (uint64_t)"=?, ", 4);
    int v23 = sub_100132EFC(v22, (uint64_t)"VerticalAccuracy", 16);
    uint64_t v24 = sub_100132EFC(v23, (uint64_t)"=?, ", 4);
    char v25 = sub_100132EFC(v24, (uint64_t)"Speed", 5);
    uint32_t v26 = sub_100132EFC(v25, (uint64_t)"=?, ", 4);
    __int16 v27 = sub_100132EFC(v26, (uint64_t)"Course", 6);
    uint64_t v28 = sub_100132EFC(v27, (uint64_t)"=?, ", 4);
    uint64_t v29 = sub_100132EFC(v28, (uint64_t)"Confidence", 10);
    uint64_t v30 = sub_100132EFC(v29, (uint64_t)"=?", 2);
    uint64_t v31 = sub_100132EFC(v30, (uint64_t)" WHERE ", 7);
    int v32 = sub_100132EFC(v31, (uint64_t)"ROWID", 5);
    sub_100132EFC(v32, (uint64_t)"=?", 2);
    if (SHIBYTE(v81) < 0) {
      operator delete(*(void **)__p);
    }
    std::stringbuf::str();
    if (v81 >= 0) {
      uint64_t v33 = __p;
    }
    else {
      uint64_t v33 = *(unsigned char **)__p;
    }
    a1[27] = sub_100601D1C(v6, (uint64_t)v33);
    a1[28] = v34;
    if (SHIBYTE(v81) < 0) {
      operator delete(*(void **)__p);
    }
    BOOL v35 = sub_100F03BA8(a1 + 27);
    if (!v35)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF918);
      }
      uint64_t v36 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Could not prepare cached update statement", __p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BF918);
        }
        LOWORD(v70) = 0;
        int v68 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v68);
        if (v68 != __p) {
          free(v68);
        }
      }
    }
    *(void *)&uint8_t buf[16] = v37;
    if (v79 < 0) {
      operator delete(v78);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    if (!v35) {
      return 0;
    }
  }
  sub_100082068(v7, &v69);
  int v38 = (sqlite3_stmt *)sub_10014D19C(v69);
  if (!sub_100055D58(v38, 1, *(double *)(a3 + 76))) {
    goto LABEL_43;
  }
  uint64_t v39 = (sqlite3_stmt *)sub_10014D19C(v69);
  if (!sub_100055D58(v39, 2, *(double *)(a3 + 4))) {
    goto LABEL_43;
  }
  uint64_t v40 = (sqlite3_stmt *)sub_10014D19C(v69);
  if (!sub_100055D58(v40, 3, *(double *)(a3 + 12))
    || (long long v41 = (sqlite3_stmt *)sub_10014D19C(v69), !sub_100055D58(v41, 4, *(double *)(a3 + 20)))
    || (long long v42 = (sqlite3_stmt *)sub_10014D19C(v69), !sub_100055D58(v42, 5, *(double *)(a3 + 28)))
    || (long long v43 = (sqlite3_stmt *)sub_10014D19C(v69), !sub_100055D58(v43, 6, *(double *)(a3 + 36)))
    || (long long v44 = (sqlite3_stmt *)sub_10014D19C(v69), !sub_100055D58(v44, 7, *(double *)(a3 + 44)))
    || (int v45 = (sqlite3_stmt *)sub_10014D19C(v69), !sub_100055D58(v45, 8, *(double *)(a3 + 60)))
    || (unint64_t v46 = (sqlite3_stmt *)sub_10014D19C(v69), !sub_10014D1A4(v46, 9, *(_DWORD *)(a3 + 84)))
    || (uint64_t v47 = (sqlite3_stmt *)sub_10014D19C(v69), !sub_10014DBB4(v47, 10, *a2)))
  {
LABEL_43:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF918);
    }
    uint64_t v52 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v53 = *(void *)(a3 + 76);
      uint64_t v54 = *(void *)(a3 + 4);
      uint64_t v55 = *(void *)(a3 + 12);
      uint64_t v56 = *(void *)(a3 + 20);
      *(_DWORD *)std::string __p = 134218752;
      *(void *)&__p[4] = v53;
      *(_WORD *)&unsigned char __p[12] = 2048;
      *(void *)&__p[14] = v54;
      __int16 v81 = 2048;
      uint64_t v82 = v55;
      __int16 v83 = 2048;
      uint64_t v84 = v56;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "could not bind %.3f <%+.8f,%+.8f> %.2f", __p, 0x2Au);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_48;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF918);
    }
    uint64_t v60 = *(void *)(a3 + 76);
    uint64_t v61 = *(void *)(a3 + 4);
    unint64_t v62 = *(void (__cdecl ***)(std::stringbuf *__hidden))(a3 + 12);
    uint64_t v63 = *(void *)(a3 + 20);
    *(_DWORD *)std::string buf = 134218752;
    *(void *)&uint8_t buf[4] = v60;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v61;
    *(_WORD *)&unsigned char buf[22] = 2048;
    int v75 = v62;
    __int16 v76 = 2048;
    uint64_t v77 = v63;
    int v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v64);
    if (v64 == __p) {
      goto LABEL_48;
    }
    goto LABEL_59;
  }
  uint64_t v48 = (sqlite3_stmt *)sub_10014D19C(v69);
  sub_10001FEB0(v6, v48);
  int v49 = sub_100603880(v6);
  if (v49 > 0)
  {
    uint64_t v50 = 1;
    goto LABEL_49;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BF918);
  }
  long long v65 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    sub_1000AB340(a3);
    int v66 = v81 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v49;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "failed to setLocation, numModRows, %d, %s", buf, 0x12u);
    if (SHIBYTE(v81) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF918);
    }
    sub_1000AB340(a3);
    if (buf[23] >= 0) {
      int v67 = buf;
    }
    else {
      int v67 = *(unsigned char **)buf;
    }
    int v70 = 67109378;
    int v71 = v49;
    __int16 v72 = 2080;
    long long v73 = v67;
    int v64 = (char *)_os_log_send_and_compose_impl();
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)", "%s\n", v64);
    if (v64 != __p) {
LABEL_59:
    }
      free(v64);
  }
LABEL_48:
  uint64_t v50 = 0;
LABEL_49:
  uint64_t v57 = v69;
  uint64_t v69 = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  return v50;
}

void sub_10064FCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10064FD88(unsigned char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 64);
  if (sub_10014C3C0((uint64_t)(a1 + 64)))
  {
    if (!a1[16])
    {
      sub_10010F274((uint64_t)&v14);
      long long v7 = sub_100132EFC(&v15, (uint64_t)"DELETE FROM ", 12);
      (*(void (**)(uint8_t *__return_ptr, unsigned char *))(*(void *)a1 + 16))(buf, a1);
      if ((v18 & 0x80u) == 0) {
        int v8 = buf;
      }
      else {
        int v8 = *(uint8_t **)buf;
      }
      if ((v18 & 0x80u) == 0) {
        uint64_t v9 = v18;
      }
      else {
        uint64_t v9 = v17;
      }
      uint64_t v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
      uint64_t v11 = sub_100132EFC(v10, (uint64_t)" WHERE ", 7);
      size_t v12 = sub_100132EFC(v11, (uint64_t)"ROWID", 5);
      sub_100132EFC(v12, (uint64_t)"=?", 2);
      if ((char)v18 < 0) {
        operator delete(*(void **)buf);
      }
      std::stringbuf::str();
      if ((v18 & 0x80u) == 0) {
        uint64_t v13 = buf;
      }
      else {
        uint64_t v13 = *(uint8_t **)buf;
      }
      sub_10014D518(v2, (uint64_t)v13);
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF918);
    }
    BOOL v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Can't clear location for read-only database", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF918);
      }
      LOWORD(v14) = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLLocationDatabase::clearLocation(const sqlite3_int64 &)", "%s\n", v4);
LABEL_32:
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
    }
    size_t v5 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call clearLocation() without a backing database in CLLocationDatabase!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
      }
      LOWORD(v14) = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLLocationDatabase::clearLocation(const sqlite3_int64 &)", "%s\n", v4);
      goto LABEL_32;
    }
  }
  return 0;
}

void sub_100650440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1006504B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_10014C3C0(a1))
  {
    if (!*(unsigned char *)(a2 + 8))
    {
      sub_10010F274((uint64_t)buf);
      uint64_t v9 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        uint64_t v11 = a3;
      }
      else {
        uint64_t v11 = *(void *)a3;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v12 = *(void *)(a3 + 8);
      }
      sub_100132EFC(v9, v11, v12);
      std::stringbuf::str();
      if (v15 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      sub_10014D518(a1, (uint64_t)p_p);
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF918);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Can't clear locations in read-only database", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF918);
      }
      LOWORD(__p) = 0;
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLLocationDatabase::clearLocations(CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v7);
LABEL_19:
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
    }
    int v8 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call clearLocations() without a backing database in CLLocationDatabase!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
      }
      LOWORD(__p) = 0;
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationDatabase::clearLocations(CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v7);
      goto LABEL_19;
    }
  }
}

void sub_100650970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1006509BC(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  uint64_t v2 = a1 + 8;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  sub_1006504B8(v1, v2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100650A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id *sub_100650A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000E1294((uint64_t *)v25, (uint64_t)"CLLocationDatabase::clearLocationsByAge", 0);
  if (sub_10014C3C0(a2))
  {
    if (!*(unsigned char *)(a3 + 8))
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      void v24[2] = sub_100651658;
      v24[3] = &unk_1022BE3B0;
      void v24[4] = a1;
      v24[5] = a4;
      v24[6] = mach_absolute_time();
      v24[7] = v24;
      sub_10010F274((uint64_t)&v22);
      uint64_t v11 = sub_100132EFC(&v23, (uint64_t)"DELETE FROM ", 12);
      int v12 = *(char *)(a4 + 23);
      if (v12 >= 0) {
        uint64_t v13 = a4;
      }
      else {
        uint64_t v13 = *(void *)a4;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        uint64_t v14 = *(void *)(a4 + 8);
      }
      char v15 = sub_100132EFC(v11, v13, v14);
      __int16 v16 = sub_100132EFC(v15, (uint64_t)" WHERE ", 7);
      uint64_t v17 = sub_100132EFC(v16, (uint64_t)"Timestamp", 9);
      unsigned __int8 v18 = sub_100132EFC(v17, (uint64_t)" < ? OR ", 8);
      char v19 = sub_100132EFC(v18, (uint64_t)"Timestamp", 9);
      sub_100132EFC(v19, (uint64_t)" > ?", 4);
      std::stringbuf::str();
      if (v27 >= 0) {
        int v20 = buf;
      }
      else {
        int v20 = *(uint8_t **)buf;
      }
      sub_10014D518(a2, (uint64_t)v20);
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BF918);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Can't clear locations by age in read-only database", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BF918);
      }
      LOWORD(v22) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLLocationDatabase::clearLocationsByAge(const CFTimeInterval &, CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v9);
LABEL_19:
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
    }
    int v10 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call clearLocationsByAge() without a backing database in CLLocationDatabase!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022BF8F8);
      }
      LOWORD(v22) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationDatabase::clearLocationsByAge(const CFTimeInterval &, CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)", "%s\n", v9);
      goto LABEL_19;
    }
  }
  return sub_1000E1098(v25);
}

void sub_1006515A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55)
{
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  sub_101A129A8((uint64_t)&a11);
  sub_1000E0900(&a53);
  sub_1000E1098(&a55);
  _Unwind_Resume(a1);
}

void sub_100651658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BF938);
  }
  long long v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v8 = *(uint64_t **)(a1 + 40);
    uint64_t v9 = **(void **)(a1 + 32);
    if (*((char *)v8 + 23) < 0) {
      int v8 = (uint64_t *)*v8;
    }
    v10[0] = 68290563;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = "elapsed";
    __int16 v15 = 2050;
    uint64_t v16 = a2;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    __int16 v19 = 2050;
    double v20 = v6;
    __int16 v21 = 2050;
    uint64_t v22 = v9;
    __int16 v23 = 2081;
    uint64_t v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLLocationDatabase::clearLocationsByAge\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"age_s\":\"%{public}.09f\", \"tableName\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x4Eu);
  }
}

void sub_1006517AC(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_1006517DC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10065180C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10065183C()
{
  uint64_t result = sub_10074157C();
  if ((result & 0x20) != 0) {
    operator new();
  }
  return result;
}

void sub_1006518B8()
{
}

uint64_t sub_1006518DC()
{
  if (qword_10247C880 != -1) {
    dispatch_once(&qword_10247C880, &stru_1022BF958);
  }
  return qword_10248A150;
}

double sub_100651924(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190C0 != -1) {
      dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
    }
    BOOL v3 = qword_1024190C8;
    if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Invalid notification", buf, 2u);
    }
    double v4 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
      }
      size_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLHA::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    double v4 = 0.0;
    if (sub_100651C50(a1))
    {
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
      }
      int v8 = qword_1024190C8;
      if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_INFO))
      {
        double v9 = *a3;
        *(_DWORD *)std::string buf = 134349056;
        double v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Setting HA interval to %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
        }
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLHA::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_100A29D64(*(void *)(a1 + 32), *a3);
      sub_100A29E04(*(void *)(a1 + 32), *a3 * 16.0);
      return *a3;
    }
  }
  return v4;
}

uint64_t sub_100651C50(uint64_t a1)
{
  unsigned int v2 = sub_10074157C();
  if ((v2 & 0x20) != 0)
  {
    if (!*(void *)(a1 + 32))
    {
      BOOL v3 = (uint64_t *)sub_100A26784();
      uint64_t v9 = 0x1E0000FF00;
      char v10 = 0;
      sub_101A46D60(v3, (uint64_t)&v9, (uint64_t *)buf);
      long long v4 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      size_t v5 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = v4;
      if (v5)
      {
        sub_1000DB0A0(v5);
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      sub_100A29EB0(*(void *)(a1 + 32), &off_102397220);
      sub_100A2932C(*(uint64_t **)(a1 + 32), (uint64_t)sub_100651E78, a1);
    }
  }
  else
  {
    if (qword_1024190C0 != -1) {
      dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
    }
    double v6 = qword_1024190C8;
    if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "HA unavailable, unable to establish hid interface", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
      }
      __int16 v11 = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLHA::openHidDevice()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return (v2 >> 5) & 1;
}

void sub_100651E78(uint64_t a1)
{
  if (IOHIDEventGetType() == 13)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      if (qword_1024190C0 != -1) {
        dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
      }
      unsigned int v2 = qword_1024190C8;
      if (os_log_type_enabled((os_log_t)qword_1024190C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Received shake data, discarding.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190C0 != -1) {
          dispatch_once(&qword_1024190C0, &stru_1022BF9D0);
        }
        BOOL v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLHA::onIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
    }
    else
    {
      IOHIDEventGetFloatValue();
      float v5 = v4;
      IOHIDEventGetFloatValue();
      float v7 = v6;
      IOHIDEventGetFloatValue();
      float v9 = v8;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      *(void *)std::string buf = sub_1000D3D90(TimeStamp);
      float v12 = v5;
      float v13 = v7;
      float v14 = v9;
      sub_1000E7BA0(a1, 0, (uint64_t)buf, 24);
    }
  }
}

void sub_1006520AC(void *a1)
{
  sub_100652114(a1);

  operator delete();
}

void sub_1006520E4(id a1)
{
  qword_1024190C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accel");
}

void *sub_100652114(void *a1)
{
  *a1 = off_1022BF988;
  unsigned int v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4(a1);
}

void *sub_100652170(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100652270((uint64_t)a1, "VO2MaxHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022BFA00;
  a1[9] = off_1022BFAC0;
  a1[56] = off_1022BFB10;
  sub_1006539B8((uint64_t)a1);
  return a1;
}

void sub_100652244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100652728(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100652270(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  float v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *float v12 = off_1022ADB08;
  *(void *)a1 = off_1022BFF38;
  *(void *)(a1 + 72) = off_1022BFFE0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022BFF38;
  *(void *)(a1 + 72) = off_1022BFFE0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 12000;
  *(void *)(a1 + 376) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 384));
  *(void *)(a1 + 384) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 248) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_10065268C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1006585C8(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100652720()
{
}

void *sub_100652728(void *a1)
{
  *a1 = off_1022BFF38;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022BFFE0;
  a1[47] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 48);
  sub_1006585C8(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1006527EC(uint64_t a1)
{
  return sub_100652728((void *)(a1 - 72));
}

void *sub_1006527F4(uint64_t a1)
{
  return sub_100652728((void *)(a1 - 448));
}

void sub_1006527FC(void *a1)
{
  sub_100652728(a1);

  operator delete();
}

void sub_100652834(uint64_t a1)
{
  sub_100652728((void *)(a1 - 72));

  operator delete();
}

void sub_100652870(uint64_t a1)
{
  sub_100652728((void *)(a1 - 448));

  operator delete();
}

uint64_t sub_1006528AC(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxHistory WHERE estimatedVo2Max IS NULL OR startTime < ?");
  }
  return -1;
}

void sub_1006529F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100652A10(uint64_t a1, uint64_t a2)
{
  return sub_1006528AC(a1 - 72, a2);
}

uint64_t sub_100652A18(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxHistory ORDER BY id ASC");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
  }
  double v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getAllRecordsWithErrorCode, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxOutputRecorderDb::getAllRecordsWithErrorCode(std::vector<VO2MaxOutput> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_100652DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100652E3C(uint64_t a1, unsigned __int8 *a2)
{
  CFStringRef v3 = (const __CFString *)sub_1005F93E8(*(void *)(a1 + 80));
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);

  return uuid_parse(CStringPtr, a2);
}

uint64_t sub_100652E84(uint64_t *a1, uint64_t a2)
{
  double v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  float v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  double v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 40) = sqlite3_column_int(v8, 2);
  float v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v9, 3);
  char v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 4);
  __int16 v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 5);
  float v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 6);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v14 = sqlite3_column_text(v13, 7);
  uuid_parse((const char *)v14, (unsigned __int8 *)(a2 + 72));
  __int16 v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v15, 8);
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v16, 9);
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v17, 10);
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 108) = sqlite3_column_int(v18, 11) != 0;
  __int16 v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 109) = sqlite3_column_int(v19, 12) != 0;
  double v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 112) = sqlite3_column_int(v20, 13);
  __int16 v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v21, 14);
  uint64_t v22 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v22, 15);
  __int16 v23 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v24 = sqlite3_column_double(v23, 16);
  uint64_t result = 0;
  *(double *)(a2 + 136) = v24;
  return result;
}

uint64_t sub_10065304C(uint64_t a1, void *a2, int a3)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    if (a3) {
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxHistory WHERE estimatedVo2Max IS NOT NULL AND eligibleForHealthKit = 1 AND startTime > ? ORDER BY startTime DESC LIMIT ?");
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxHistory WHERE estimatedVo2Max IS NOT NULL AND startTime > ? ORDER BY startTime DESC LIMIT ?");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
  }
  char v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxOutputRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<VO2MaxOutput> &, BOOL, int) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return 109;
}

void sub_100653448(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10065348C(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  if (sub_100082064(a1 + 72))
  {
    a3[1] = *a3;
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxHistory WHERE sessionId = ?");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
  }
  char v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "VO2MaxHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
    }
    *(_WORD *)out = 0;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxOutputRecorderDb::queryBySessionId(unsigned char *, std::vector<VO2MaxOutput> &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return 109;
}

void sub_100653854(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100653898(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM VO2MaxHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100653954(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100653990(uint64_t a1)
{
  return sub_100653898(a1 - 72);
}

void *sub_100653998@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxHistory");
}

void *sub_1006539A8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxHistory");
}

uint64_t sub_1006539B8(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_100653A28(a1);
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "VO2MaxHistory", (const char **)&off_1022BFBC8, (const std::string::value_type **)&off_10241CFC0, 0);
  }
  return result;
}

uint64_t sub_100653A28(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxHistory");
  if (result)
  {
    uint64_t v3 = "sessionType";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxHistory", (uint64_t)"sessionType", (uint64_t)&v3);
  }
  return result;
}

void sub_100653F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_10065402C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxHistory");
  }
  return result;
}

void sub_1006540DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006540F4(uint64_t a1)
{
  return sub_10065402C(a1 - 72);
}

uint64_t sub_1006540FC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM VO2MaxHistory WHERE startTime > ?");
  }
  return result;
}

void sub_1006541F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100654210(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE VO2MaxHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_1006542C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006542DC(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxHistory (startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin, sessionId, variance, filteredVo2Max, sessionType, eligibleForHealthKit, eligibleForCalorimetry, numWorkoutsContrToEstimate, estimatedHRResponseParam, estimatedHRRecoveryParam, sessionVo2Max) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_10065453C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10065455C()
{
  return 0;
}

uint64_t sub_100654564(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_100654654(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100654698(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022C0020);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C0020);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      double v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__int16 v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    float v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      float v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        char v10 = __p;
      }
      else {
        char v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      __int16 v11 = v21;
    }
    else {
      __int16 v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    float v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      float v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1006558C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

double sub_100655C24(uint64_t a1)
{
  uint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  sub_10065304C(a1, &v3, 1);
  if (v4 != v3)
  {
    double v1 = v3[4];
LABEL_4:
    int v4 = v3;
    operator delete(v3);
    return v1;
  }
  double v1 = NAN;
  if (v4) {
    goto LABEL_4;
  }
  return v1;
}

void sub_100655C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100655CB0(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxHistory WHERE estimatedVo2Max IS NOT NULL AND startTime > ? AND startTime < ? ORDER BY startTime");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
  }
  uint64_t v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "VO2MaxHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BFBA8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLVO2MaxOutputRecorderDb::queryVO2MaxOutputInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<VO2MaxOutput> &) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 109;
}

void sub_100656084(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1006560C8(uint64_t a1)
{
  return sub_100655CB0(a1 - 448);
}

uint64_t sub_1006560D0(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A68934(v2);
    __break(1u);
  }
  float v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      int v4 = v13;
    }
    else {
      int v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    long long v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = v13;
    }
    else {
      size_t v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1006565AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 - 233) < 0) {
    operator delete(*(void **)(v4 - 256));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100656634(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100658700(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022C0020);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022C0020);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C0020);
      }
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100656DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100656DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v3 = *(_OWORD *)(a3 + 16);
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  __n128 result = *(__n128 *)(a3 + 80);
  long long v7 = *(_OWORD *)(a3 + 96);
  long long v8 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v8;
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v7;
  return result;
}

id *sub_100656E1C(uint64_t a1, uint64_t a2, char a3)
{
  v33[0] = (id)os_transaction_create();
  v33[1] = 0;
  if (*(double *)(a1 + 248) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v33);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  double v43 = 0.0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v42);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C0020);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022C0020);
        }
        LOWORD(v34) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 24);
    double v8 = v43;
    double v9 = v7 - v43;
    if (v7 - v43 < 0.0) {
      double v9 = -(v7 - v43);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C0020);
      }
      char v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 24);
        *(_DWORD *)std::string buf = 134349312;
        double v39 = v43;
        __int16 v40 = 2050;
        uint64_t v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022C0020);
        }
        uint64_t v27 = *(void *)(a2 + 24);
        int v34 = 134349312;
        double v35 = v43;
        __int16 v36 = 2050;
        uint64_t v37 = v27;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 24);
      double v8 = v43;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022C0020);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 24);
          *(_DWORD *)std::string buf = 134217984;
          double v39 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022C0020);
          }
          double v29 = *(double *)(a2 + 24);
          int v34 = 134217984;
          double v35 = v29;
          uint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022C0020);
        double v17 = v32;
      }
      double v18 = v16 - v17;
      __int16 v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v39 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022C0020);
        }
        int v34 = 134217984;
        double v35 = v18;
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v42, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  long long v20 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 288) = v22;
  *(_OWORD *)(a1 + 240) = v20;
  *(_OWORD *)(a1 + 256) = v21;
  long long v23 = *(_OWORD *)(a2 + 80);
  long long v24 = *(_OWORD *)(a2 + 96);
  long long v25 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 352) = v25;
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 320) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v33);
}

void sub_100657648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100657674(uint64_t a1)
{
  return sub_100656634(a1 - 72);
}

void sub_10065767C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1006576AC(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A68AA4(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = v15;
    }
    else {
      double v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100657B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100657BD4(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A68C14(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100657F48(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A68D84(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100658274(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A68EF4(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100658598(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1006585C8(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 14;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 28;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_100658670(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100658700(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100658780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10065879C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

int32x2_t sub_1006587CC(uint64_t a1, char a2)
{
  *(void *)a1 = off_1022C0070;
  *(void *)(a1 + 8) = 0x1E00000000;
  *(void *)(a1 + 376) = 0x1E00000000;
  *(_DWORD *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 748) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 796) = 0u;
  *(_DWORD *)(a1 + 812) = 998445679;
  int32x2_t result = vdup_n_s32(0x3B83126Fu);
  *(int32x2_t *)(a1 + 816) = result;
  *(unsigned char *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 844) = 0;
  *(void *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 856) = 0;
  *(unsigned char *)(a1 + 857) = a2;
  *(_WORD *)(a1 + 858) = 0;
  return result;
}

double sub_100658844(uint64_t a1)
{
  sub_100658878(a1, 0x6B49D200uLL);
  double result = 0.0;
  *(_OWORD *)(a1 + 784) = 0u;
  return result;
}

void sub_100658878(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 747) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  if (a2 < 0x6B49D200)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    unint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218240;
      double v17 = (float)((float)a2 * 0.000001);
      __int16 v18 = 2048;
      double v19 = 1800.0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::reset: warm start [%f < %f]", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C00E0);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CMGyroBiasEstimator::reset(const uint64_t)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *(float32x2_t *)(a1 + 812) = vadd_f32(*(float32x2_t *)(a1 + 812), 0);
    *(float *)(a1 + 820) = *(float *)(a1 + 820) + 0.0;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    long long v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::reset: cold start", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C00E0);
      }
      unsigned __int8 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CMGyroBiasEstimator::reset(const uint64_t)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *(_OWORD *)(a1 + 800) = xmmword_101D251E0;
    *(int32x2_t *)(a1 + 816) = vdup_n_s32(0x3B83126Fu);
    *(unsigned char *)(a1 + 824) = 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C00E0);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *(float *)(a1 + 800);
    double v8 = *(float *)(a1 + 804);
    double v9 = *(float *)(a1 + 808);
    double v10 = *(float *)(a1 + 812);
    double v11 = *(float *)(a1 + 816);
    double v12 = *(float *)(a1 + 820);
    *(_DWORD *)std::string buf = 134219264;
    double v17 = v7;
    __int16 v18 = 2048;
    double v19 = v8;
    __int16 v20 = 2048;
    double v21 = v9;
    __int16 v22 = 2048;
    double v23 = v10;
    __int16 v24 = 2048;
    double v25 = v11;
    __int16 v26 = 2048;
    double v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::reset: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CMGyroBiasEstimator::reset(const uint64_t)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

uint64_t sub_100658E04(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 858) && *(unsigned char *)(a1 + 859)) {
    return 0;
  }
  sub_100659A48((unsigned __int16 *)(a1 + 376), a2);
  return 1;
}

uint64_t sub_100658E3C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (*(unsigned char *)(a1 + 858) && *(unsigned char *)(a1 + 859)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 746))
  {
    if (*(unsigned char *)(a1 + 824))
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 744) = 1;
      return result;
    }
    return 0;
  }
  sub_100659A48((unsigned __int16 *)(a1 + 8), a2);
  unint64_t v6 = *(void *)(a1 + 752);
  unint64_t v7 = *a3;
  v8.i32[0] = 833342583;
  if (v6)
  {
    BOOL v9 = v7 >= v6;
    unint64_t v10 = v7 - v6;
    if (v10 != 0 && v9) {
      *(float *)v8.i32 = (float)(int)(float)((float)((float)((float)v10 * 0.000001) / 0.02) + 0.5) * 0.000000005;
    }
  }
  *(void *)(a1 + 752) = v7;
  *(float32x2_t *)(a1 + 812) = vadd_f32((float32x2_t)vdup_lane_s32(v8, 0), *(float32x2_t *)(a1 + 812));
  *(float *)(a1 + 820) = *(float *)v8.i32 + *(float *)(a1 + 820);
  if (!*(unsigned char *)(a1 + 824)) {
    return 0;
  }
  *(unsigned char *)(a1 + 744) = 1;
  if (*(_DWORD *)(a1 + 12) != *(unsigned __int16 *)(a1 + 10)
    || *(unsigned char *)(a1 + 857) && *(_DWORD *)(a1 + 380) != *(unsigned __int16 *)(a1 + 378))
  {
    return 0;
  }
  uint64_t result = sub_100658F64(a1);
  if (result)
  {
    sub_100659380((float32x2_t *)a1);
    return 1;
  }
  return result;
}

uint64_t sub_100658F64(uint64_t a1)
{
  uint64_t v2 = (unsigned __int16 *)(a1 + 8);
  float v3 = sub_100659AB4((unsigned __int16 *)(a1 + 8), 0, *(unsigned __int16 *)(a1 + 10));
  float v5 = v4;
  float v7 = v6;
  sub_100659F10(v2, 0, *(unsigned __int16 *)(a1 + 10));
  float v9 = v8;
  *(float *)int v49 = v8;
  v49[1] = v10;
  v49[2] = v11;
  sub_100659F10((unsigned __int16 *)(a1 + 376), 0, *(unsigned __int16 *)(a1 + 378));
  v48[0] = v12;
  v48[1] = v13;
  _DWORD v48[2] = v14;
  float v15 = v3 - *(float *)(a1 + 832);
  float v16 = v5 - *(float *)(a1 + 836);
  float v17 = v7 - *(float *)(a1 + 840);
  float v46 = v15;
  *(float *)uint64_t v47 = v16;
  *(float *)&v47[1] = v17;
  float v18 = v16 - *(float *)(a1 + 804);
  float v19 = *(float *)(a1 + 808);
  v45[0] = v15 - *(float *)(a1 + 800);
  v45[1] = v18;
  _OWORD v45[2] = v17 - v19;
  float v20 = -v9;
  if (v9 > 0.0) {
    float v20 = v9;
  }
  for (uint64_t i = 1; i != 3; ++i)
  {
    float v22 = *(float *)&v49[i];
    if (v22 <= 0.0) {
      float v22 = -v22;
    }
    if (v22 > v20) {
      float v20 = v22;
    }
  }
  if (v20 >= 0.0000025)
  {
    BOOL v25 = 0;
    float v26 = flt_101D251A0[*(unsigned char *)(a1 + 856) == 0];
    float v27 = 0.0001;
  }
  else
  {
    uint64_t v23 = 0;
    if (v15 <= 0.0) {
      float v15 = -v15;
    }
    do
    {
      float v24 = *(float *)&v47[v23];
      if (v24 <= 0.0) {
        float v24 = -v24;
      }
      if (v24 > v15) {
        float v15 = v24;
      }
      ++v23;
    }
    while (v23 != 2);
    BOOL v25 = v15 < 0.03;
    float v26 = flt_101D251A0[*(unsigned char *)(a1 + 856) == 0];
    float v27 = flt_101D251A8[v15 < 0.03];
  }
  char v28 = 0;
  for (unint64_t j = 0; j != 3; ++j)
  {
    if (*(unsigned char *)(a1 + 857))
    {
      float v30 = sub_1004E30E4((uint64_t)&v46, j);
      if (v30 <= 0.0) {
        float v30 = -v30;
      }
      if (v30 < v26 && sub_1004E30E4((uint64_t)v49, j) < 0.0000025)
      {
        float v31 = (float)((float)(sub_1004E30E4((uint64_t)v49, j) + -0.00000048739) * 8.9291) + 0.00000076154;
        if (v31 >= 0.00000076154) {
          float v32 = v31;
        }
        else {
          float v32 = 0.00000076154;
        }
        float v33 = (float)((float)(sub_1004E30E4((uint64_t)v48, j) + -0.0000005625) * 15.508) + 0.00000076154;
        if (v33 < 0.00000076154) {
          float v33 = 0.00000076154;
        }
        if (v32 <= v33) {
          float v34 = v33;
        }
        else {
          float v34 = v32;
        }
        float v35 = (float)((float)((float)(v34 * 0.5) / 0.00000076154) * 30.0) * 0.02;
        uint64_t v36 = *(void *)(a1 + 752);
        if ((unint64_t)(v36 - *(void *)sub_1006597D8(a1 + 760, j)) > 0x927BF) {
          float v37 = 0.6 / (float)(v35 + 0.6);
        }
        else {
          float v37 = 0.02 / (float)(v35 + 0.02);
        }
        goto LABEL_43;
      }
    }
    else
    {
      if (v25) {
        goto LABEL_36;
      }
      float v39 = sub_1004E30E4((uint64_t)&v46, j);
      if (v39 <= 0.0) {
        float v39 = -v39;
      }
      if (v39 < v26 && sub_1004E30E4((uint64_t)v49, j) < 0.00000125)
      {
LABEL_36:
        float v38 = *(float *)sub_1004E4930(a1 + 812, j);
        float v37 = v38 / (float)(v27 + *(float *)sub_1004E4930(a1 + 812, j));
        float v34 = 0.0;
LABEL_43:
        float v40 = sub_1004E30E4((uint64_t)v45, j);
        uint64_t v41 = (float *)sub_1004E4930(a1 + 800, j);
        *uint64_t v41 = *v41 + (float)(v37 * v40);
        float v42 = (float)(v34 * (float)(v37 * v37))
            + (float)(*(float *)sub_1004E4930(a1 + 812, j) * (float)((float)(1.0 - v37) * (float)(1.0 - v37)));
        *(float *)sub_1004E4930(a1 + 812, j) = v42;
        uint64_t v43 = *(void *)(a1 + 752);
        *(void *)sub_1006597D8(a1 + 760, j) = v43;
        char v28 = 1;
        continue;
      }
    }
  }
  return v28 & 1;
}

void sub_100659380(float32x2_t *a1)
{
  if (!a1[93].i8[1])
  {
    uint64_t v2 = 0;
    float v3 = a1[101].f32[1];
    if (v3 <= 0.0) {
      float v3 = -v3;
    }
    do
    {
      float v4 = a1[102].f32[v2];
      if (v4 <= 0.0) {
        float v4 = -v4;
      }
      if (v4 > v3) {
        float v3 = v4;
      }
      ++v2;
    }
    while (v2 != 2);
    a1[93].i8[1] = v3 < 0.000007;
    if (v3 < 0.000007)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C00E0);
      }
      float v5 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator::feedGyro: converged!", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C00E0);
        }
        float v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CMGyroBiasEstimator::notifyClients(uint64_t)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
  __int8 v6 = a1[103].i8[1];
  if (v6) {
    __int8 v6 = a1[93].i8[1] == 0;
  }
  a1[93].i8[3] = v6;
  float v7 = (void (*)(uint8_t *, __int32 *, float32x2_t *, void))a1[98];
  if (v7)
  {
    float v8 = a1[101].f32[0] + a1[105].f32[0];
    *(float32x2_t *)std::string buf = vadd_f32(a1[100], a1[104]);
    float v11 = v8;
    v7(buf, (__int32 *)&a1[101] + 1, a1 + 93, *(void *)&a1[99]);
  }
}

void sub_1006595C4(float32x2_t *a1, float32x2_t *a2, __int8 a3, float32_t a4)
{
  a1[103].i8[0] = 1;
  a1[103].i8[1] = a3;
  a1[103].f32[1] = a4;
  a1[104] = *a2;
  a1[105].i32[0] = a2[1].i32[0];
  sub_100659380(a1);
}

double sub_1006595F0(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C00E0);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CMGyroBiasEstimator: biasFitReset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    float v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CMGyroBiasEstimator::biasFitReset()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 800) = xmmword_101D251E0;
  *(int32x2_t *)(a1 + 816) = vdup_n_s32(0x3B83126Fu);
  *(unsigned char *)(a1 + 745) = 0;
  return result;
}

float sub_1006597A4(float *a1, float *a2)
{
  a1[200] = a1[200] - *a2;
  a1[201] = a1[201] - a2[1];
  float result = a1[202] - a2[2];
  a1[202] = result;
  return result;
}

uint64_t sub_1006597D8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    float v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C00E0);
      }
      __int8 v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMVector<unsigned long long, 3>::operator[](const size_t) [T = unsigned long long, N = 3]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 8 * a2;
}

uint64_t sub_1006599B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 784) = a2;
  *(void *)(result + 792) = a3;
  return result;
}

uint64_t sub_1006599C0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 748) = a2;
  return result;
}

void *sub_1006599C8(void *result)
{
  *float result = off_1022C0070;
  return result;
}

void sub_1006599E8(void *a1)
{
  *a1 = off_1022C0070;
  operator delete();
}

void sub_100659A18(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

unsigned __int16 *sub_100659A48(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  float v4 = &result[6 * (v3 - v2)];
  int v5 = *(_DWORD *)(a2 + 8);
  *((void *)v4 + 1) = *(void *)a2;
  *((_DWORD *)v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    *float result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

float sub_100659AB4(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  if (!a1[1])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    unint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 93,mean() on empty buffer.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C00E0);
      }
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const Element CMVectorBufferBase<float, 3>::mean(size_t, size_t) const [T = float, N = 3]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return sub_100659C84(a1, a2, a3) / (float)(a3 - a2);
}

float sub_100659C84(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  float v3 = 0.0;
  float v4 = 0.0;
  float v5 = 0.0;
  if (a2 < a3)
  {
    unint64_t v7 = a2;
    do
    {
      __int16 v9 = (float *)sub_100659D10(a1, v7);
      float v3 = v3 + *v9;
      float v4 = v4 + v9[1];
      float v5 = v5 + v9[2];
      ++v7;
    }
    while (a3 != v7);
  }
  return v3;
}

uint64_t sub_100659D10(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    unint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C00E0);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 3>>::operator[](const size_t) const [T = CMVector<float, 3>]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[6 * (v4 - v5) + 4];
}

float32x2_t *sub_100659F10(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  if (!a1[1])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C00E0);
    }
    float v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 210,variance() on empty buffer.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C00E0);
      }
      float v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const CMVector<T, N> CMVectorBufferBase<float, 3>::variance(size_t, size_t) const [T = float, N = 3]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  float v21 = 1.0 / (float)(a3 - a2);
  float result = (float32x2_t *)sub_100659D10(a1, a2);
  float v8 = v21;
  float32x2_t v9 = *result;
  float v10 = result[1].f32[0];
  float32x2_t v11 = vmul_n_f32(*result, v21);
  float v12 = v21 * v10;
  unint64_t v13 = a2 + 1;
  if (v13 < a3)
  {
    unint64_t v14 = v13;
    do
    {
      float result = (float32x2_t *)sub_100659D10(a1, v14);
      float v8 = v21;
      float32x2_t v11 = vadd_f32(v11, vmul_n_f32(*result, v21));
      float v12 = v12 + (float)(v21 * result[1].f32[0]);
      ++v14;
    }
    while (a3 != v14);
  }
  float32x2_t v15 = vsub_f32(v9, v11);
  *(float32x2_t *)&long long v7 = vmul_n_f32(vmul_f32(v15, v15), v8);
  float v16 = v8 * (float)((float)(v10 - v12) * (float)(v10 - v12));
  if (v13 < a3)
  {
    do
    {
      long long v20 = v7;
      float result = (float32x2_t *)sub_100659D10(a1, v13);
      *((void *)&v7 + 1) = *((void *)&v20 + 1);
      float32x2_t v17 = vsub_f32(*result, v11);
      *(float32x2_t *)&long long v7 = vadd_f32(*(float32x2_t *)&v20, vmul_n_f32(vmul_f32(v17, v17), v21));
      float v16 = v16 + (float)(v21 * (float)((float)(result[1].f32[0] - v12) * (float)(result[1].f32[0] - v12)));
      ++v13;
    }
    while (a3 != v13);
  }
  return result;
}

void *sub_10065A1B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v12, a3);
  sub_10065AB34((uint64_t)v11, a4);
  sub_10065AC50((uint64_t)v10, a5);
  sub_100DD5888((uint64_t)a1, a2, @"CLX", 0, 1, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10);
  sub_10065ACE8(v10);
  sub_10065ABCC(v11);
  sub_10065AAB0(v12);
  *a1 = off_1022C0110;
  sub_1000E9354(a1 + 17);
  return a1;
}

void sub_10065A2A8(_Unwind_Exception *a1)
{
  sub_100DD5960(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10065A2F8(void *a1)
{
  *a1 = off_1022C0110;
  sub_10013F3C4(a1 + 17);

  return sub_100DD5960((uint64_t)a1);
}

void sub_10065A34C(void *a1)
{
  *a1 = off_1022C0110;
  sub_10013F3C4(a1 + 17);
  sub_100DD5960((uint64_t)a1);

  operator delete();
}

uint64_t sub_10065A3B4(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C01B0);
  }
  unint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)std::string buf = 136446210;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C01B0);
    }
    [*(id *)(a1 + 16) UTF8String];
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLClxConfigAsset::clearOutAssetData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000E9354(buf);
  sub_1004CE798(a1 + 136, (uint64_t)buf);
  return sub_10013F3C4(buf);
}

void sub_10065A590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10065A5AC(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C01B0);
  }
  unint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    int v4 = sub_1007E72D8(*(void **)(a1 + 128));
    int v5 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationClxSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C01B0);
    }
    id v15 = [*(id *)(a1 + 16) UTF8String];
    int v16 = sub_1007E72D8(*(void **)(a1 + 128));
    int v17 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(v25.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(v25.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v16;
    WORD1(v25.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v25.__r_.__value_.__r.__words[2]) = v17;
    float v18 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLClxConfigAsset::sendNotifications()", "%s\n", (const char *)v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  sub_100134750(&v25, "#CLConfig,");
  unsigned int v6 = std::string::append(&v25, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(__p, ",kNotificationClxSettings,");
  if ((v23 & 0x80u) == 0) {
    float v8 = __p;
  }
  else {
    float v8 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v9 = v23;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  float v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  float32x2_t v11 = (void *)v10->__r_.__value_.__r.__words[0];
  unint64_t size = v10->__r_.__value_.__l.__size_;
  v24[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(void *)&long long __dst = v11;
    *((void *)&__dst + 1) = size;
    *(_DWORD *)long long v20 = v24[0];
    *(_DWORD *)&_DWORD v20[3] = *(_DWORD *)((char *)v24 + 3);
    char v21 = v13;
    goto LABEL_21;
  }
  sub_1000DC48C(&__dst, v11, size);
LABEL_21:
  unint64_t v14 = (void *)sub_1000E9358(a1 + 136);
  sub_1007E7320(&__dst, v14);
  if (v21 < 0) {
    operator delete((void *)__dst);
  }
  sub_100DD8718(a1, 3, a1 + 136);
  if (v13 < 0) {
    operator delete(v11);
  }
}

void sub_10065A908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10065A984(uint64_t a1)
{
  sub_100DD6DC0(a1, @"settings.plist", a1 + 136);
  unint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 120);

  return v2(a1);
}

void sub_10065A9E8(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_10065AA18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10065AAB0(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10065AB34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10065ABCC(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10065AC50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10065ACE8(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10065AD6C()
{
  if (qword_10247C888 != -1) {
    dispatch_once(&qword_10247C888, &stru_1022C01D0);
  }
  return qword_10248A158;
}

void sub_10065ADB0(id a1)
{
}

void sub_10065ADF4()
{
}

int64x2_t *sub_10065AE18(int64x2_t *a1)
{
  sub_100134750(v3, "");
  uint64_t v5 = 0x500000000;
  __int16 v6 = 1;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000DC48C(&__p, v3[0], (unint64_t)v3[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v3;
    uint64_t v8 = v4;
  }
  uint64_t v9 = 0;
  sub_10065EC18(a1, (uint64_t)&v5);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
  a1->i64[0] = (uint64_t)off_1022C0200;
  sub_100513074(&a1[16].u64[1], "CLTimeZoneDatabase", 0, 1);
  (*(void (**)(int64x2_t *))(a1->i64[0] + 24))(a1);
  return a1;
}

void sub_10065AF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10065AF7C(void *a1)
{
  *a1 = off_1022C0200;
  sub_10051310C(a1 + 33);

  return sub_10065ED68(a1);
}

void sub_10065AFD4(void *a1)
{
  *a1 = off_1022C0200;
  sub_10051310C(a1 + 33);
  sub_10065ED68(a1);

  operator delete();
}

uint64_t sub_10065B040(uint64_t a1)
{
  sub_1006617FC((void *)a1);
  sub_10010F274((uint64_t)v20);
  sub_1006037C8(a1 + 8, *(void *)(a1 + 176), *(sqlite3_stmt **)(a1 + 184));
  unint64_t v2 = sub_100132EFC(&v21, (uint64_t)"SELECT ", 7);
  size_t v3 = strlen("ROWID");
  uint64_t v4 = sub_100132EFC(v2, (uint64_t)"ROWID", v3);
  uint64_t v5 = sub_100132EFC(v4, (uint64_t)", ", 2);
  __int16 v6 = sub_100132EFC(v5, (uint64_t)"Latitude", 8);
  long long v7 = sub_100132EFC(v6, (uint64_t)", ", 2);
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)"Longitude", 9);
  uint64_t v9 = sub_100132EFC(v8, (uint64_t)" FROM ", 6);
  size_t v10 = strlen("Names");
  float32x2_t v11 = sub_100132EFC(v9, (uint64_t)"Names", v10);
  float v12 = sub_100132EFC(v11, (uint64_t)" WHERE ", 7);
  size_t v13 = strlen("ZoneName");
  unint64_t v14 = sub_100132EFC(v12, (uint64_t)"ZoneName", v13);
  sub_100132EFC(v14, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(void *)(a1 + 176) = sub_100601D1C(a1 + 8, (uint64_t)p_p);
  *(void *)(a1 + 184) = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&v23, &__p);
  sub_100450DEC((uint64_t)&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)((char *)v20
  uint64_t v21 = v17;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10065B314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10065B348(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v8 = a1 + 264;
  uint64_t v59 = a1 + 264;
  (*(void (**)(uint64_t))(*(void *)(a1 + 264) + 16))(a1 + 264);
  __int16 v60 = 256;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  *a4 = 0.0;
  uint64_t v9 = (sqlite3_int64 *)(a2 + 4);
  size_t v10 = (double *)(a2 + 12);
  double v55 = 0.0;
  if ((sub_10065EE84(a1, (double *)(a2 + 4), (double *)(a2 + 12), (sqlite3_int64 **)&v56) & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    id v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sqlite3_int64 v16 = *v9;
      double v17 = *v10;
      *(_DWORD *)std::string buf = 134218240;
      sqlite3_int64 v70 = v16;
      __int16 v71 = 2048;
      double v72 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Couldn't get time zone for point <%+.8f,%+.8f>", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_60;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    sqlite3_int64 v18 = *v9;
    double v19 = *v10;
    int v61 = 134218240;
    sqlite3_int64 v62 = v18;
    __int16 v63 = 2048;
    double v64 = v19;
    long long v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v20);
    goto LABEL_73;
  }
  if (v56 != v57)
  {
    if ((unint64_t)(v57 - (unsigned char *)v56) >= 0x11)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C0238);
      }
      float32x2_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v12 = *v9;
        double v13 = *v10;
        *(_DWORD *)std::string buf = 134218240;
        sqlite3_int64 v70 = v12;
        __int16 v71 = 2048;
        double v72 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Point <%+.8f,%+.8f> in multiple time zone polygons", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C0238);
        }
        sqlite3_int64 v44 = *v9;
        double v45 = *v10;
        int v61 = 134218240;
        sqlite3_int64 v62 = v44;
        __int16 v63 = 2048;
        double v64 = v45;
        float v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
    }
    uint64_t v14 = *((void *)v56 + 1);
    double v55 = *(double *)v56;
    *(void *)a4 = v14;
    goto LABEL_53;
  }
  std::string __p = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  double v21 = *(double *)(a2 + 20);
  if (v21 > 20000.0) {
    double v21 = 20000.0;
  }
  double v51 = v21;
  buf[0] = 1;
  uint64_t v22 = sub_10065EEB8(a1, (double *)(a2 + 4), (double *)(a2 + 12), &v51, (sqlite3_int64 **)&__p, buf);
  if (!v22 || (std::string v23 = (double *)__p, v53 == __p))
  {
    sub_10065BF08(v22, a2, a3, a4);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    float v35 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sqlite3_int64 v36 = *v9;
      double v37 = *v10;
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v38 = a3;
      }
      else {
        uint64_t v38 = *(void *)a3;
      }
      *(_DWORD *)std::string buf = 134218498;
      sqlite3_int64 v70 = v36;
      __int16 v71 = 2048;
      double v72 = v37;
      __int16 v73 = 2080;
      uint64_t v74 = v38;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Point <%+.8f,%+.8f> not in any time zone polygon; default time zone is %s, but we're not using it",
        buf,
        0x20u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_49;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    sqlite3_int64 v47 = *v9;
    double v48 = *v10;
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v49 = a3;
    }
    else {
      uint64_t v49 = *(void *)a3;
    }
    int v61 = 134218498;
    sqlite3_int64 v62 = v47;
    __int16 v63 = 2048;
    double v64 = v48;
    __int16 v65 = 2080;
    uint64_t v66 = v49;
    float v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v34);
    goto LABEL_85;
  }
  sqlite3_int64 v24 = *(void *)__p;
  double v55 = *(double *)__p;
  double v25 = 1.79769313e308;
  do
  {
    double v26 = v23[1];
    if (v26 < v25)
    {
      sqlite3_int64 v24 = *(void *)v23;
      double v55 = *v23;
      double v25 = v26;
    }
    v23 += 2;
  }
  while (v23 != v53);
  if (v25 > 1000.0)
  {
    sub_10065BF08(v22, a2, a3, a4);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    float v27 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sqlite3_int64 v28 = *v9;
      double v29 = *v10;
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v30 = a3;
      }
      else {
        uint64_t v30 = *(void *)a3;
      }
      *(_DWORD *)std::string buf = 134218754;
      sqlite3_int64 v70 = v28;
      __int16 v71 = 2048;
      double v72 = v29;
      __int16 v73 = 2048;
      uint64_t v74 = *(void *)&v25;
      __int16 v75 = 2080;
      uint64_t v76 = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Point <%+.8f,%+.8f> not in any time zone polygon; closest polygon is %f meters away; default time zone is %s, bu"
        "t we're not using it",
        buf,
        0x2Au);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_49;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    sqlite3_int64 v31 = *v9;
    double v32 = *v10;
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v33 = a3;
    }
    else {
      uint64_t v33 = *(void *)a3;
    }
    int v61 = 134218754;
    sqlite3_int64 v62 = v31;
    __int16 v63 = 2048;
    double v64 = v32;
    __int16 v65 = 2048;
    uint64_t v66 = *(void *)&v25;
    __int16 v67 = 2080;
    uint64_t v68 = v33;
    float v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v34);
LABEL_85:
    if (v34 != (char *)buf) {
      free(v34);
    }
LABEL_49:
    char v39 = 0;
    *a4 = 0.0;
    goto LABEL_50;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C0238);
  }
  uint64_t v43 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218496;
    sqlite3_int64 v70 = v24;
    __int16 v71 = 2048;
    double v72 = v25;
    __int16 v73 = 2048;
    uint64_t v74 = ((char *)v53 - (unsigned char *)__p) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Not in any polygons; falling back to closest nearby time zone ID %lld (distance %f, %ld possibilities)",
      buf,
      0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    int v61 = 134218496;
    sqlite3_int64 v62 = v24;
    __int16 v63 = 2048;
    double v64 = v25;
    __int16 v65 = 2048;
    uint64_t v66 = ((char *)v53 - (unsigned char *)__p) >> 4;
    uint64_t v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v50);
    if (v50 != (char *)buf) {
      free(v50);
    }
  }
  char v39 = 1;
LABEL_50:
  if (__p)
  {
    uint64_t v53 = (double *)__p;
    operator delete(__p);
  }
  if ((v39 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_53:
  if (sub_100660408(a1, (sqlite3_int64 *)&v55, (std::string *)a3))
  {
    uint64_t v40 = 1;
    goto LABEL_61;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C0238);
  }
  uint64_t v41 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 134349056;
    sqlite3_int64 v70 = *(void *)&v55;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "Could not get time zone name for zone ID %{public}lld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C0238);
    }
    int v61 = 134349056;
    sqlite3_int64 v62 = *(void *)&v55;
    long long v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)", "%s\n", v20);
LABEL_73:
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
LABEL_60:
  uint64_t v40 = 0;
LABEL_61:
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  return v40;
}

void sub_10065BE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  sub_1019DB560((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10065BF08(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  double v7 = *(double *)(a2 + 12);
  sub_10010F274((uint64_t)v15);
  uint64_t v8 = sub_100132EFC(v16, (uint64_t)"Etc/GMT", 7);
  if ((int)vcvtmd_s64_f64((v7 + 7.5) / 15.0) >= 1) {
    uint64_t v9 = "-";
  }
  else {
    uint64_t v9 = "+";
  }
  sub_100132EFC(v8, (uint64_t)v9, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  double v10 = *(double *)(a2 + 12) + 7.5 - floor((*(double *)(a2 + 12) + 7.5) / 15.0) * 15.0;
  if (v10 > 15.0 - v10) {
    double v10 = 15.0 - v10;
  }
  *a4 = v10;
  *(void *)((char *)v15
  v16[0] = v11;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 1;
}

void sub_10065C124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10065C13C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10065C258()
{
  uint64_t result = sub_1000A16E8();
  if ((result & 0x20) != 0) {
    operator new();
  }
  return result;
}

void sub_10065C2A4()
{
}

uint64_t sub_10065C2C8()
{
  if (qword_10247C890 != -1) {
    dispatch_once(&qword_10247C890, &stru_1022C0258);
  }
  return qword_10248A160;
}

uint64_t sub_10065C310(uint64_t a1)
{
  unint64_t v2 = (void *)sub_10074ED34(a1, 8);
  void *v2 = off_1022C0288;
  size_t v3 = (unsigned __int8 *)v2 + 36;
  *(unsigned char *)(a1 + 36) = sub_10074378C();
  unsigned __int8 v6 = 1;
  sub_10006ACBC((unsigned __int8 *)(a1 + 37), "EnableVisualLocalization", &v6, 0);
  sub_10006ACBC(v5, "AlwaysOnDeviceMotion10", v3, 0);
  *(unsigned char *)(a1 + 36) = v5[1];
  sub_10074EDB8((uint64_t *)a1);
  return a1;
}

void sub_10065C3B4(_Unwind_Exception *a1)
{
  sub_10074ED5C(v1);
  _Unwind_Resume(a1);
}

void sub_10065C3D4(void *a1)
{
  sub_10074ED5C(a1);

  operator delete();
}

BOOL sub_10065C40C(uint64_t a1)
{
  return (sub_1000A16E8() & 0x20) != 0 && *(unsigned char *)(a1 + 36) != 0;
}

BOOL sub_10065C448(uint64_t a1)
{
  return (sub_1000A16E8() & 0x20) != 0 && *(unsigned char *)(a1 + 38) != 0;
}

unint64_t sub_10065C484()
{
  return ((unint64_t)sub_1000A16E8() >> 5) & 1;
}

uint64_t sub_10065CBDC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    uint64_t v4 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v5 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v10 = v9 + 1;
        if (v9 == -1 || v10 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v9);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v12 = v7++ >= 9;
        if (v12)
        {
          unint64_t v8 = 0;
          int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v13 || (v8 & 7) == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          id v15 = v4;
          sqlite3_int64 v16 = v5;
          String = (void *)PBReaderReadString();

          id v18 = String;
          uint64_t v5 = v16;
          uint64_t v4 = v15;
          *(void *)(a1 + 56) = v18;
          continue;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(_WORD *)(a1 + v4[412]) |= 8u;
          while (2)
          {
            uint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v12 = v21++ >= 9;
                if (v12)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_83;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v22) = 0;
          }
LABEL_83:
          uint64_t v61 = v5[413];
          goto LABEL_104;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          *(_WORD *)(a1 + v4[412]) |= 0x10u;
          while (2)
          {
            uint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                BOOL v12 = v27++ >= 9;
                if (v12)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v22) = 0;
          }
LABEL_87:
          uint64_t v61 = 36;
          goto LABEL_104;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v22 = 0;
          *(_WORD *)(a1 + v4[412]) |= 0x100u;
          while (2)
          {
            uint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v34 = v33 + 1;
            if (v33 == -1 || v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
              v22 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                BOOL v12 = v32++ >= 9;
                if (v12)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v22) = 0;
          }
LABEL_91:
          uint64_t v61 = 64;
          goto LABEL_104;
        case 5u:
          *(_WORD *)(a1 + v4[412]) |= 1u;
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v37 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v37 = 0;
          }
          uint64_t v62 = 8;
          goto LABEL_115;
        case 6u:
          *(_WORD *)(a1 + v4[412]) |= 2u;
          unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v37 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v37 = 0;
          }
          uint64_t v62 = 16;
          goto LABEL_115;
        case 7u:
          *(_WORD *)(a1 + v4[412]) |= 4u;
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v37 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v37 = 0;
          }
          uint64_t v62 = 24;
LABEL_115:
          *(void *)(a1 + v62) = v37;
          continue;
        case 8u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v22 = 0;
          *(_WORD *)(a1 + v4[412]) |= 0x80u;
          while (2)
          {
            uint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v43 = v42 + 1;
            if (v42 == -1 || v43 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
              v22 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v12 = v41++ >= 9;
                if (v12)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v22) = 0;
          }
LABEL_95:
          uint64_t v61 = 48;
          goto LABEL_104;
        case 9u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v22 = 0;
          *(_WORD *)(a1 + v4[412]) |= 0x40u;
          while (2)
          {
            uint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v48 = v47 + 1;
            if (v47 == -1 || v48 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
              v22 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v12 = v46++ >= 9;
                if (v12)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v22) = 0;
          }
LABEL_99:
          uint64_t v61 = 44;
          goto LABEL_104;
        case 0xAu:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v22 = 0;
          *(_WORD *)(a1 + v4[412]) |= 0x20u;
          while (2)
          {
            uint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v53 = v52 + 1;
            if (v52 == -1 || v53 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53;
              v22 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                BOOL v12 = v51++ >= 9;
                if (v12)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v22) = 0;
          }
LABEL_103:
          uint64_t v61 = 40;
LABEL_104:
          *(_DWORD *)(a1 + v61) = v22;
          continue;
        case 0xBu:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v57 = 0;
          *(_WORD *)(a1 + v4[412]) |= 0x200u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v59 = v58 + 1;
        if (v58 == -1 || v59 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v60 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59;
        v57 |= (unint64_t)(v60 & 0x7F) << v55;
        if ((v60 & 0x80) == 0) {
          goto LABEL_106;
        }
        v55 += 7;
        BOOL v12 = v56++ >= 9;
        if (v12)
        {
          uint64_t v57 = 0;
          goto LABEL_108;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_106:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v57 = 0;
      }
LABEL_108:
      *(unsigned char *)(a1 + 68) = v57 != 0;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10065E020(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = a1 + 1;
  do
  {
    while (1)
    {
      char v12 = *(unsigned char *)(a1 + v4);
      memset(&__str, 0, sizeof(__str));
      char v6 = (unsigned __int8 *)(v5 + v4);
      for (v4 += 2; ; ++v4)
      {
        int v8 = *v6++;
        std::string::value_type v7 = v8;
        if (!v8) {
          break;
        }
        std::string::push_back(&__str, v7);
      }
      int v13 = &v12;
      uint64_t v9 = (std::string *)sub_10065E800(a2, &v12, (uint64_t)&unk_101D0B290, &v13);
      std::string::operator=(v9 + 1, &__str);
      int v10 = *(unsigned __int8 *)(a1 + v4);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (!*(unsigned char *)(a1 + v4)) {
        return;
      }
    }
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  while (v10);
}

void sub_10065E104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000DB114(v15);
  _Unwind_Resume(a1);
}

NSString *sub_10065E130(void *a1)
{
  sub_10065E4B8([a1 appleManufacturerData], (uint64_t)v33);
  id v2 = [[objc_msgSend(a1, "identifier") UTF8String];
  sub_10065E54C([a1 addressData], &v32);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v3 = &v32;
  }
  else {
    size_t v3 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  sub_10065E54C([a1 appleManufacturerData], &v31);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v31;
  }
  else {
    int v4 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  id v5 = [a1 rawRSSI];
  uint64_t v6 = v35;
  if (v34 >= 0) {
    std::string::value_type v7 = v33;
  }
  else {
    std::string::value_type v7 = (void **)v33[0];
  }
  unsigned int v8 = [a1 nearbyActivityLevel];
  if (v8 > 0xE) {
    uint64_t v9 = "?";
  }
  else {
    uint64_t v9 = off_1022C02C8[(char)v8];
  }
  sub_10065E658([a1 nearbyActionType], qword_10248A190, &v30);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v10 = &v30;
  }
  else {
    int v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  char v26 = v10;
  char v11 = &v29;
  sub_10065E658([a1 nearbyFlags], qword_10248A1B8, &v29);
  uint64_t v23 = v9;
  unint64_t v24 = v7;
  id v25 = v5;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  char v12 = &v28;
  sub_10065E658([a1 scanFlags], qword_10248A1E0, &v28);
  int v13 = v4;
  uint64_t v14 = v3;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  unsigned int v15 = [a1 objectDiscoveryMode];
  id v16 = v2;
  if (v15 > 2) {
    char v17 = "?";
  }
  else {
    char v17 = off_1022C0340[v15];
  }
  p_p = &__p;
  sub_10065E658([a1 objectSetupFlags], qword_10248A208, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unsigned int v19 = [a1 proximityPairingSubType];
  if (v19 > 5) {
    char v20 = "?";
  }
  else {
    char v20 = off_1022C0358[v19];
  }
  unsigned int v21 = +[NSString stringWithFormat:@"%s,%s,%s,%d,%u,%s,%s,%s,%s,%s,%s,%s,%s", v16, v14, v13, v25, v6, v24, v23, v26, v11, v12, v17, p_p, v20];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  return v21;
}

void sub_10065E400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v43 - 169) < 0) {
    operator delete(*(void **)(v43 - 192));
  }
  if (*(char *)(v43 - 145) < 0) {
    operator delete(*(void **)(v43 - 168));
  }
  if (*(char *)(v43 - 121) < 0) {
    operator delete(*(void **)(v43 - 144));
  }
  if (*(char *)(v43 - 97) < 0) {
    operator delete(*(void **)(v43 - 120));
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10065E4B8@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  if (result
    && (size_t v3 = result, result = [result length], (unint64_t)result > 2)
    && (uint64_t result = [v3 bytes], *result == 76)
    && !result[1])
  {
    unint64_t v5 = (char)result[2];
    char v4 = result[2];
    if (v5 > 0x12) {
      uint64_t v6 = "?";
    }
    else {
      uint64_t v6 = off_1022C0388[v5];
    }
    uint64_t result = sub_100134750((void *)a2, v6);
  }
  else
  {
    char v4 = 0;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

id sub_10065E54C@<X0>(id result@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (result)
  {
    id v2 = result;
    uint64_t result = [result length];
    if (result)
    {
      uint64_t result = [v2 bytes];
      if (result)
      {
        std::string::resize(a2, 2 * (void)[v2 length], 0);
        char v4 = (unsigned __int8 *)[v2 bytes];
        uint64_t v5 = 0;
        for (unint64_t i = 0; ; ++i)
        {
          uint64_t result = [v2 length];
          if ((unint64_t)result <= i) {
            break;
          }
          int v7 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
          unsigned int v8 = (char *)a2->__r_.__value_.__r.__words[0];
          id v9 = [v2 length];
          if (v7 >= 0) {
            int v10 = (char *)a2;
          }
          else {
            int v10 = v8;
          }
          snprintf(&v10[v5], 2 * (void)v9, "%02x", v4[i]);
          v5 += 2;
        }
      }
    }
  }
  return result;
}

void sub_10065E634(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10065E658@<X0>(void *result@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  unsigned int v4 = result;
  uint64_t v5 = a3;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (!result)
  {
    char v26 = 0;
    uint64_t result = sub_10065EA54(a2, &v26);
    if (result)
    {
      char v25 = 0;
      uint64_t v6 = sub_10065EA54(a2, &v25);
      if (!v6) {
        sub_10000EDDC("unordered_map::at: key not found");
      }
      id v9 = v6[3];
      int v7 = v6 + 3;
      unsigned int v8 = (const std::string::value_type *)v9;
      int v10 = *((char *)v7 + 23);
      if (v10 >= 0) {
        char v11 = (const std::string::value_type *)v7;
      }
      else {
        char v11 = v8;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v7[1];
      }
      std::string::append(v5, v11, v12);
      uint64_t result = std::string::append(v5, ";");
    }
  }
  for (int i = 0; i != 32; ++i)
  {
    if ((v4 >> i))
    {
      char v24 = i;
      uint64_t result = sub_10065EA54(a2, &v24);
      if (result)
      {
        char v23 = i;
        uint64_t v14 = sub_10065EA54(a2, &v23);
        if (!v14) {
          sub_10000EDDC("unordered_map::at: key not found");
        }
        char v17 = v14[3];
        unsigned int v15 = v14 + 3;
        id v16 = (const std::string::value_type *)v17;
        int v18 = *((char *)v15 + 23);
        if (v18 >= 0) {
          unsigned int v19 = (const std::string::value_type *)v15;
        }
        else {
          unsigned int v19 = v16;
        }
        if (v18 >= 0) {
          std::string::size_type v20 = *((unsigned __int8 *)v15 + 23);
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v15[1];
        }
        std::string::append(v5, v19, v20);
        uint64_t result = std::string::append(v5, ";");
      }
    }
  }
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v5->__r_.__value_.__l.__size_;
    if (!size) {
      return result;
    }
    uint64_t v21 = size - 1;
    v5->__r_.__value_.__l.__size_ = v21;
    uint64_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v5->__r_.__value_.__s + 23)) {
      return result;
    }
    uint64_t v21 = HIBYTE(v5->__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v5->__r_.__value_.__s + 23) = v21;
  }
  v5->__r_.__value_.__s.__data_[v21] = 0;
  return result;
}

void sub_10065E7CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10065E800(uint64_t a1, char *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      char v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          char v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  char v11 = operator new(0x30uLL);
  *char v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  void v11[4] = 0;
  void v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *char v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  *char v11 = *v13;
  *int v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10065EA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10050E97C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t **sub_10065EA54(void *a1, char *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10065EB08()
{
  sub_10065E020((uint64_t)&unk_101D25277, (uint64_t)&unk_10248A168);
  __cxa_atexit((void (*)(void *))sub_10065E12C, &unk_10248A168, (void *)&_mh_execute_header);
  sub_10065E020((uint64_t)&unk_101D2529B, (uint64_t)&unk_10248A190);
  __cxa_atexit((void (*)(void *))sub_10065E12C, &unk_10248A190, (void *)&_mh_execute_header);
  sub_10065E020((uint64_t)&unk_101D252C4, (uint64_t)&unk_10248A1B8);
  __cxa_atexit((void (*)(void *))sub_10065E12C, &unk_10248A1B8, (void *)&_mh_execute_header);
  sub_10065E020((uint64_t)&unk_101D2533C, (uint64_t)&unk_10248A1E0);
  __cxa_atexit((void (*)(void *))sub_10065E12C, &unk_10248A1E0, (void *)&_mh_execute_header);
  sub_10065E020((uint64_t)"\aNFC", (uint64_t)&unk_10248A208);

  return __cxa_atexit((void (*)(void *))sub_10065E12C, &unk_10248A208, (void *)&_mh_execute_header);
}

uint64_t sub_10065EC18(int64x2_t *a1, uint64_t a2)
{
  a1->i64[0] = (uint64_t)off_1022C04A8;
  uint8x8_t v4 = a1 + 9;
  sub_1005F54CC(&a1->u64[1], a2);
  sub_100F03BA0(v4, 0, 0);
  sub_100F03BA0((int64x2_t *)a1[10].i64, 0, 0);
  sub_100F03BA0((int64x2_t *)a1[11].i64, 0, 0);
  sub_100F03BA0((int64x2_t *)a1[12].i64, 0, 0);
  sub_100F03BA0((int64x2_t *)a1[13].i64, 0, 0);
  a1[14] = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[15].i64[0] = (uint64_t)a1[15].i64;
  a1[15].i64[1] = (uint64_t)a1[15].i64;
  a1[16].i64[0] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    (*(void (**)(int64x2_t *))(a1->i64[0] + 24))(a1);
    return (uint64_t)a1;
  }
  else
  {
    sub_101A69090();
    uint64_t result = abort_report_np();
    __break(1u);
  }
  return result;
}

void sub_10065ED44(_Unwind_Exception *a1)
{
  sub_1005F5850(v1);
  _Unwind_Resume(a1);
}

void *sub_10065ED68(void *a1)
{
  *a1 = off_1022C04A8;
  int8x8_t v2 = a1 + 1;
  sub_1003B2350(a1 + 30);
  sub_1005F5850(v2);
  return a1;
}

void *sub_10065EDBC(void *a1)
{
  *a1 = off_1022C04A8;
  int8x8_t v2 = a1 + 1;
  sub_1003B2350(a1 + 30);
  sub_1005F5850(v2);
  return a1;
}

void sub_10065EE10(void *a1)
{
  *a1 = off_1022C04A8;
  uint64_t v1 = a1 + 1;
  sub_1003B2350(a1 + 30);
  sub_1005F5850(v1);

  operator delete();
}

uint64_t sub_10065EE84(uint64_t a1, double *a2, double *a3, sqlite3_int64 **a4)
{
  uint64_t v6 = 0;
  unsigned __int8 v5 = 0;
  return sub_10065EEB8(a1, a2, a3, (double *)&v6, a4, &v5);
}

uint64_t sub_10065EEB8(uint64_t a1, double *a2, double *a3, double *a4, sqlite3_int64 **a5, unsigned __int8 *a6)
{
  unint64_t v8 = a3;
  uint8x8_t v9 = a2;
  uint64_t v10 = a1;
  std::string __p = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  if (sub_10065F428(a1, a2, a3, a4, (char **)&__p))
  {
    a5[1] = *a5;
    uint64_t v11 = (sqlite3_int64 *)__p;
    if (__p == v52)
    {
      LOBYTE(v12) = 1;
      if (!__p) {
        return v12 & 1;
      }
      goto LABEL_43;
    }
    uint64_t v12 = 1;
    int v13 = &qword_102419000;
    float v14 = &qword_102419000;
    uint64_t v47 = v10;
    do
    {
      sqlite3_int64 v15 = *v11;
      sqlite3_int64 v49 = 0;
      sqlite3_int64 v50 = v15;
      unsigned __int8 v48 = 0;
      if (sub_10065FC7C(v10, &v50, (char *)&v48, (double *)&v49, *v9, *v8))
      {
        if (*a6 | v48)
        {
          sqlite3_int64 v16 = v49;
          unint64_t v18 = a5[1];
          unint64_t v17 = (unint64_t)a5[2];
          if ((unint64_t)v18 >= v17)
          {
            char v23 = v9;
            char v24 = v8;
            uint64_t v25 = v12;
            char v26 = a6;
            unsigned int v27 = v14;
            std::string v28 = v13;
            std::string v29 = *a5;
            uint64_t v30 = ((char *)v18 - (char *)*a5) >> 4;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60) {
              sub_1001D7FD4();
            }
            uint64_t v32 = v17 - (void)v29;
            if (v32 >> 3 > v31) {
              unint64_t v31 = v32 >> 3;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              char v34 = (char *)sub_1000C571C((uint64_t)(a5 + 2), v33);
              std::string v29 = *a5;
              unint64_t v18 = a5[1];
            }
            else
            {
              char v34 = 0;
            }
            unsigned __int8 v35 = (sqlite3_int64 *)&v34[16 * v30];
            sqlite3_int64 *v35 = v15;
            v35[1] = v16;
            unint64_t v36 = v35;
            int v13 = v28;
            if (v18 != v29)
            {
              do
              {
                *((_OWORD *)v36 - 1) = *((_OWORD *)v18 - 1);
                v36 -= 2;
                v18 -= 2;
              }
              while (v18 != v29);
              std::string v29 = *a5;
            }
            float v14 = v27;
            size_t v19 = v35 + 2;
            *a5 = v36;
            a5[1] = v35 + 2;
            a5[2] = (sqlite3_int64 *)&v34[16 * v33];
            a6 = v26;
            if (v29) {
              operator delete(v29);
            }
            uint64_t v12 = v25;
            unint64_t v8 = v24;
            uint8x8_t v9 = v23;
            uint64_t v10 = v47;
          }
          else
          {
            *unint64_t v18 = v15;
            v18[1] = v16;
            size_t v19 = v18 + 2;
          }
          a5[1] = v19;
        }
      }
      else
      {
        if (v13[198] != -1) {
          dispatch_once(&qword_102419630, &stru_1022C04D8);
        }
        uint64_t v20 = v14[199];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        {
          double v21 = *v9;
          double v22 = *v8;
          *(_DWORD *)std::string buf = 134218496;
          double v61 = v21;
          __int16 v62 = 2048;
          double v63 = v22;
          __int16 v64 = 2048;
          sqlite3_int64 v65 = v15;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Couldn't determine if point <%+.8f,%+.8f> is in polygon %lld", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v13[198] != -1) {
            dispatch_once(&qword_102419630, &stru_1022C04D8);
          }
          double v37 = *v9;
          double v38 = *v8;
          int v54 = 134218496;
          double v55 = v37;
          __int16 v56 = 2048;
          double v57 = v38;
          __int16 v58 = 2048;
          sqlite3_int64 v59 = v15;
          unint64_t v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::polygonsAndDistancesForPointWithUncertainty(const double &, const double &, const double &, std::vector<std::pair<sqlite3_int64, double>> &, const BOOL &)", "%s\n", v39);
          if (v39 != (char *)buf) {
            free(v39);
          }
        }
        uint64_t v12 = 0;
      }
      ++v11;
    }
    while (v11 != v52);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    char v40 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      double v41 = *v9;
      double v42 = *v8;
      *(_DWORD *)std::string buf = 134218240;
      double v61 = v41;
      __int16 v62 = 2048;
      double v63 = v42;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "Couldn't get list of candidates for point <%+.8f,%+.8f>", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      double v44 = *v9;
      double v45 = *v8;
      int v54 = 134218240;
      double v55 = v44;
      __int16 v56 = 2048;
      double v57 = v45;
      unsigned int v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::polygonsAndDistancesForPointWithUncertainty(const double &, const double &, const double &, std::vector<std::pair<sqlite3_int64, double>> &, const BOOL &)", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    LOBYTE(v12) = 0;
  }
  uint64_t v11 = (sqlite3_int64 *)__p;
  if (__p)
  {
LABEL_43:
    uint64_t v52 = v11;
    operator delete(v11);
  }
  return v12 & 1;
}

void sub_10065F3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10065F428(uint64_t a1, double *a2, double *a3, double *a4, char **a5)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C04D8);
  }
  uint64_t v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v11 = *a2;
    double v12 = *a3;
    double v13 = *a4;
    *(_DWORD *)std::string buf = 134218496;
    double v66 = v11;
    __int16 v67 = 2048;
    double v68 = v12;
    __int16 v69 = 2048;
    double v70 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Getting polygons for point <%+.8f,%+.8f> acc %.2f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    double v45 = *a2;
    double v46 = *a3;
    double v47 = *a4;
    int v57 = 134218496;
    double v58 = v45;
    __int16 v59 = 2048;
    double v60 = v46;
    __int16 v61 = 2048;
    double v62 = v47;
    unsigned __int8 v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
  a5[1] = *a5;
  float v14 = (void *)(a1 + 208);
  if (!sub_100F03BA8(v14))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    unint64_t v36 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning fBoundingBoxesSelectNearbyStatement not available - rtree module missing or db unavailable", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    LOWORD(v57) = 0;
    double v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v37);
    goto LABEL_67;
  }
  if (!sub_1000EF68C(*a2, *a3))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    double v41 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      double v42 = *a2;
      double v43 = *a3;
      *(_DWORD *)std::string buf = 134218240;
      double v66 = v42;
      __int16 v67 = 2048;
      double v68 = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring bogus location <%+.8f,%+.8f>", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    double v50 = *a2;
    double v51 = *a3;
    int v57 = 134218240;
    double v58 = v50;
    __int16 v59 = 2048;
    double v60 = v51;
    double v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v37);
LABEL_67:
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 0;
  }
  double v15 = *a2;
  double v16 = *a3;
  double v55 = v16;
  double v56 = v15;
  double v53 = v16;
  double v54 = v15;
  if (*a4 > 0.0) {
    sub_1004BDD98(&v56, &v55, &v54, &v53, v15, v16, *a4);
  }
  sub_100082068(v14, &v52);
  unint64_t v17 = (sqlite3_stmt *)sub_10014D19C(v52);
  if (sub_100055D58(v17, 1, v56)
    && (unint64_t v18 = (sqlite3_stmt *)sub_10014D19C(v52), sub_100055D58(v18, 2, v54))
    && (size_t v19 = (sqlite3_stmt *)sub_10014D19C(v52), sub_100055D58(v19, 3, v55))
    && (uint64_t v20 = (sqlite3_stmt *)sub_10014D19C(v52), sub_100055D58(v20, 4, v53)))
  {
    while (1)
    {
      double v21 = (sqlite3_stmt *)sub_10014D19C(v52);
      if (sqlite3_step(v21) != 100) {
        break;
      }
      double v22 = (sqlite3_stmt *)sub_10014D19C(v52);
      int v23 = sqlite3_column_int(v22, 0);
      uint64_t v24 = v23;
      char v26 = a5[1];
      unint64_t v25 = (unint64_t)a5[2];
      if ((unint64_t)v26 >= v25)
      {
        std::string v28 = *a5;
        uint64_t v29 = (v26 - *a5) >> 3;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v31 = v25 - (void)v28;
        if (v31 >> 2 > v30) {
          unint64_t v30 = v31 >> 2;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          unint64_t v33 = (char *)sub_1000DA54C((uint64_t)(a5 + 2), v32);
          std::string v28 = *a5;
          char v26 = a5[1];
        }
        else
        {
          unint64_t v33 = 0;
        }
        char v34 = &v33[8 * v29];
        *(void *)char v34 = v24;
        unsigned int v27 = v34 + 8;
        while (v26 != v28)
        {
          uint64_t v35 = *((void *)v26 - 1);
          v26 -= 8;
          *((void *)v34 - 1) = v35;
          v34 -= 8;
        }
        *a5 = v34;
        a5[1] = v27;
        a5[2] = &v33[8 * v32];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(void *)char v26 = v23;
        unsigned int v27 = v26 + 8;
      }
      a5[1] = v27;
    }
    uint64_t v39 = 1;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    double v38 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218752;
      double v66 = v56;
      __int16 v67 = 2048;
      double v68 = v54;
      __int16 v69 = 2048;
      double v70 = v55;
      __int16 v71 = 2048;
      double v72 = v53;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "Could not bind <%+.8f,%+.8f> - <%+.8f,%+.8f>", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      int v57 = 134218752;
      double v58 = v56;
      __int16 v59 = 2048;
      double v60 = v54;
      __int16 v61 = 2048;
      double v62 = v55;
      __int16 v63 = 2048;
      double v64 = v53;
      sqlite3_int64 v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
    uint64_t v39 = 0;
  }
  uint64_t v40 = v52;
  uint64_t v52 = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  return v39;
}

void sub_10065FC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10065FC7C(uint64_t a1, sqlite3_int64 *a2, char *a3, double *a4, double a5, double a6)
{
  double v12 = (void *)(a1 + 192);
  if (!sub_100F03BA8((void *)(a1 + 192)))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    float v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning fPointsSelectStatement not available - rtree module missing or db unavailable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      LOWORD(v51) = 0;
      double v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::pointInPolygon(const sqlite3_int64 &, const double, const double, BOOL &, double &)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    return 0;
  }
  if (*(double *)(a1 + 224) != a5 || *(double *)(a1 + 232) != a6)
  {
    *(double *)(a1 + 224) = a5;
    *(double *)(a1 + 232) = a6;
    sub_1003B2350((void *)(a1 + 240));
LABEL_15:
    *a3 = 0;
    *a4 = -1.0;
    sub_100082068(v12, &v50);
    double v16 = (sqlite3_stmt *)sub_10014D19C(v50);
    if (sub_10014DBB4(v16, 1, *a2))
    {
      unint64_t v17 = (sqlite3_stmt *)sub_10014D19C(v50);
      if (sqlite3_step(v17) == 100)
      {
        unint64_t v18 = (sqlite3_stmt *)sub_10014D19C(v50);
        double v19 = sqlite3_column_double(v18, 0);
        uint64_t v20 = (sqlite3_stmt *)sub_10014D19C(v50);
        double v21 = sqlite3_column_double(v20, 1);
        while (1)
        {
          do
          {
            double v22 = (sqlite3_stmt *)sub_10014D19C(v50);
            if (sqlite3_step(v22) != 100)
            {
              sqlite3_int64 v39 = *a2;
              char v40 = *a3;
              double v41 = *a4;
              double v42 = (double *)operator new(0x28uLL);
              v42[3] = v41;
              *((unsigned char *)v42 + 32) = v40;
              double v43 = *(double ***)(a1 + 248);
              *(void *)double v42 = a1 + 240;
              *((void *)v42 + 1) = v43;
              *((void *)v42 + 2) = v39;
              NSObject *v43 = v42;
              uint64_t v44 = *(void *)(a1 + 256) + 1;
              *(void *)(a1 + 248) = v42;
              *(void *)(a1 + 256) = v44;
              uint64_t v15 = 1;
              goto LABEL_59;
            }
            int v23 = (sqlite3_stmt *)sub_10014D19C(v50);
            double v24 = sqlite3_column_double(v23, 0);
            unint64_t v25 = (sqlite3_stmt *)sub_10014D19C(v50);
            double v26 = sqlite3_column_double(v25, 1);
            double v27 = v26;
          }
          while (v24 == v19 && v26 == v21);
          if ((v19 > a5 && v24 < a5 || v19 < a5 && v24 > a5) && (v26 > a6 || v21 > a6)) {
            break;
          }
          if (v19 == a5 && v24 < a5 && v21 > a6 || v24 == a5 && v19 < a5 && v26 > a6) {
            goto LABEL_37;
          }
LABEL_38:
          double v29 = v24 - v19;
          double v30 = v27 - v21;
          double v31 = ((a6 - v21) * (v27 - v21) + (a5 - v19) * (v24 - v19)) / (v30 * v30 + v29 * v29);
          if (v31 <= 0.0)
          {
            double v32 = v19;
            double v33 = v21;
          }
          else
          {
            double v32 = v24;
            double v33 = v27;
            if (v31 < 1.0)
            {
              double v32 = v19 + v31 * v29;
              double v33 = v21 + v31 * v30;
            }
          }
          sub_1000A3D9C(a5, a6, v32, v33);
          if (*a4 >= 0.0)
          {
            double v19 = v24;
            double v21 = v27;
            if (v34 >= *a4) {
              continue;
            }
          }
          *a4 = v34;
          double v19 = v24;
          double v21 = v27;
        }
        if (v21 + (v26 - v21) * ((a5 - v19) / (v24 - v19)) <= a6) {
          goto LABEL_38;
        }
LABEL_37:
        *a3 ^= 1u;
        goto LABEL_38;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      double v37 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v38 = *a2;
        *(_DWORD *)std::string buf = 134217984;
        sqlite3_int64 v54 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning No points data found for polygon Id %lld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_57:
        uint64_t v15 = 0;
LABEL_59:
        uint64_t v45 = v50;
        uint64_t v50 = 0;
        if (v45) {
          (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
        }
        return v15;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_68:
        sqlite3_int64 v48 = *a2;
        int v51 = 134217984;
        sqlite3_int64 v52 = v48;
        sqlite3_int64 v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::pointInPolygon(const sqlite3_int64 &, const double, const double, BOOL &, double &)", "%s\n", v49);
        if (v49 != (char *)buf) {
          free(v49);
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      uint64_t v35 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v36 = *a2;
        *(_DWORD *)std::string buf = 134217984;
        sqlite3_int64 v54 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind %lld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_57;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_68;
      }
    }
    dispatch_once(&qword_102419630, &stru_1022C04D8);
    goto LABEL_68;
  }
  uint64_t v13 = *(void *)(a1 + 248);
  if (v13 == a1 + 240) {
    goto LABEL_15;
  }
  while (*(void *)(v13 + 16) != *a2)
  {
    uint64_t v13 = *(void *)(v13 + 8);
    if (v13 == a1 + 240) {
      goto LABEL_15;
    }
  }
  *a3 = *(unsigned char *)(v13 + 32);
  *a4 = *(double *)(v13 + 24);
  return 1;
}

void sub_1006603A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100660408(uint64_t a1, sqlite3_int64 *a2, std::string *a3)
{
  unsigned __int8 v5 = (void *)(a1 + 160);
  if (sub_100F03BA8((void *)(a1 + 160)))
  {
    sub_100082068(v5, &v23);
    uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v23);
    if (sub_10014DBB4(v6, 1, *a2))
    {
      unint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v23);
      if (sqlite3_step(v7) == 100)
      {
        unint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v23);
        uint8x8_t v9 = sqlite3_column_text(v8, 0);
        if (v9)
        {
          std::string::assign(a3, (const std::string::value_type *)v9);
          uint64_t v10 = 1;
          goto LABEL_34;
        }
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C04D8);
        }
        double v19 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Could not get polygon name", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0))
        {
LABEL_33:
          uint64_t v10 = 0;
LABEL_34:
          uint64_t v20 = v23;
          uint64_t v23 = 0;
          if (v20) {
            (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          }
          return v10;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C04D8);
        }
        LOWORD(v24) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v15);
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C04D8);
        }
        double v16 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
        {
          sqlite3_int64 v17 = *a2;
          *(_DWORD *)std::string buf = 134217984;
          sqlite3_int64 v27 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning No entry in names table for polygon ID %lld", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C04D8);
        }
        sqlite3_int64 v18 = *a2;
        int v24 = 134217984;
        sqlite3_int64 v25 = v18;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v15);
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      double v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        sqlite3_int64 v13 = *a2;
        *(_DWORD *)std::string buf = 134349056;
        sqlite3_int64 v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Could not bind %{public}lld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      sqlite3_int64 v14 = *a2;
      int v24 = 134349056;
      sqlite3_int64 v25 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v15);
    }
    if (v15 != (char *)buf) {
      free(v15);
    }
    goto LABEL_33;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C04D8);
  }
  double v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning fNamesSelectStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    LOWORD(v24) = 0;
    double v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  return 0;
}

void sub_100660A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100660A54(uint64_t a1, char *a2, void *a3)
{
  unsigned __int8 v5 = (void *)(a1 + 176);
  if (sub_100F03BA8((void *)(a1 + 176)))
  {
    sub_100082068(v5, &v21);
    uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v21);
    if (a2[23] >= 0) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *(char **)a2;
    }
    if (sub_100133F10(v6, 1, v7))
    {
      unint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v21);
      if (sqlite3_step(v8) == 100)
      {
        uint8x8_t v9 = (sqlite3_stmt *)sub_10014D19C(v21);
        *a3 = sqlite3_column_int(v9, 0);
        uint64_t v10 = 1;
        goto LABEL_36;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      uint64_t v15 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0) {
          double v16 = a2;
        }
        else {
          double v16 = *(char **)a2;
        }
        *(_DWORD *)std::string buf = 136315138;
        sqlite3_int64 v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Polygon %s not found in names table", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_35:
        uint64_t v10 = 0;
LABEL_36:
        uint64_t v17 = v21;
        uint64_t v21 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        return v10;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      if (a2[23] >= 0) {
        sqlite3_int64 v14 = a2;
      }
      else {
        sqlite3_int64 v14 = *(char **)a2;
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      double v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0) {
          sqlite3_int64 v13 = a2;
        }
        else {
          sqlite3_int64 v13 = *(char **)a2;
        }
        *(_DWORD *)std::string buf = 136315138;
        sqlite3_int64 v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind %s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      if (a2[23] >= 0) {
        sqlite3_int64 v14 = a2;
      }
      else {
        sqlite3_int64 v14 = *(char **)a2;
      }
    }
    int v22 = 136315138;
    uint64_t v23 = v14;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonId(const std::string &, sqlite3_int64 &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
    goto LABEL_35;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C04D8);
  }
  double v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    LOWORD(v22) = 0;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonId(const std::string &, sqlite3_int64 &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  return 0;
}

void sub_100660F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100660FAC(uint64_t a1, char *a2, char **a3)
{
  a3[1] = *a3;
  unsigned __int8 v5 = (void *)(a1 + 176);
  if (sub_100F03BA8((void *)(a1 + 176)))
  {
    sub_100082068(v5, &v34);
    uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v34);
    if (a2[23] >= 0) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = *(char **)a2;
    }
    if (sub_100133F10(v6, 1, v7))
    {
      while (1)
      {
        unint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v34);
        if (sqlite3_step(v8) != 100) {
          break;
        }
        uint8x8_t v9 = (sqlite3_stmt *)sub_10014D19C(v34);
        int v10 = sqlite3_column_int(v9, 0);
        uint64_t v11 = v10;
        sqlite3_int64 v13 = a3[1];
        unint64_t v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v15 = *a3;
          uint64_t v16 = (v13 - *a3) >> 3;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 2 > v17) {
            unint64_t v17 = v18 >> 2;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            uint64_t v20 = (char *)sub_1000DA54C((uint64_t)(a3 + 2), v19);
            uint64_t v15 = *a3;
            sqlite3_int64 v13 = a3[1];
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v20[8 * v16];
          *(void *)uint64_t v21 = v11;
          sqlite3_int64 v14 = v21 + 8;
          while (v13 != v15)
          {
            uint64_t v22 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v21 - 1) = v22;
            v21 -= 8;
          }
          *a3 = v21;
          a3[1] = v14;
          a3[2] = &v20[8 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)sqlite3_int64 v13 = v10;
          sqlite3_int64 v14 = v13 + 8;
        }
        a3[1] = v14;
      }
      if (a3[1] != *a3)
      {
        uint64_t v24 = 1;
        goto LABEL_54;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      std::string v28 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0) {
          double v29 = a2;
        }
        else {
          double v29 = *(char **)a2;
        }
        *(_DWORD *)std::string buf = 136315138;
        sqlite3_int64 v38 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning Polygon %s not found in names table", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_53:
        uint64_t v24 = 0;
LABEL_54:
        uint64_t v30 = v34;
        uint64_t v34 = 0;
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        return v24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      if (a2[23] >= 0) {
        sqlite3_int64 v27 = a2;
      }
      else {
        sqlite3_int64 v27 = *(char **)a2;
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      sqlite3_int64 v25 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[23] >= 0) {
          double v26 = a2;
        }
        else {
          double v26 = *(char **)a2;
        }
        *(_DWORD *)std::string buf = 136315138;
        sqlite3_int64 v38 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind %s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_53;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      if (a2[23] >= 0) {
        sqlite3_int64 v27 = a2;
      }
      else {
        sqlite3_int64 v27 = *(char **)a2;
      }
    }
    int v35 = 136315138;
    sqlite3_int64 v36 = v27;
    double v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonsForName(const std::string &, std::vector<sqlite3_int64> &)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
    goto LABEL_53;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C04D8);
  }
  uint64_t v23 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning fNamesSelectOnNameStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    LOWORD(v35) = 0;
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::polygonsForName(const std::string &, std::vector<sqlite3_int64> &)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  return 0;
}

void sub_100661588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006615E0(uint64_t a1, char *a2, double *a3, double *a4, char *a5, double *a6)
{
  sqlite3_int64 v17 = 0;
  if (sub_100660A54(a1, a2, &v17)) {
    return sub_10065FC7C(a1, &v17, a5, a6, *a3, *a4);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C04D8);
  }
  sqlite3_int64 v13 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0) {
      sqlite3_int64 v14 = a2;
    }
    else {
      sqlite3_int64 v14 = *(char **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning No bounding box found for polygon %s", buf, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    if (a2[23] >= 0) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = *(char **)a2;
    }
    int v18 = 136315138;
    unint64_t v19 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::pointInPolygon(const std::string &, const double &, const double &, BOOL &, double &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1006617FC(void *a1)
{
  sub_10010F274((uint64_t)v61);
  int8x8_t v2 = sub_100132EFC(&v62, (uint64_t)"SELECT ", 7);
  unint64_t v3 = sub_100132EFC(v2, (uint64_t)"MinimumLatitude", 15);
  uint8x8_t v4 = sub_100132EFC(v3, (uint64_t)", ", 2);
  unsigned __int8 v5 = sub_100132EFC(v4, (uint64_t)"MaximumLatitude", 15);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)", ", 2);
  unint64_t v7 = sub_100132EFC(v6, (uint64_t)"MinimumLongitude", 16);
  unint64_t v8 = sub_100132EFC(v7, (uint64_t)", ", 2);
  uint8x8_t v9 = sub_100132EFC(v8, (uint64_t)"MaximumLongitude", 16);
  int v10 = sub_100132EFC(v9, (uint64_t)" FROM ", 6);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)"BoundingBoxes", 13);
  unint64_t v12 = sub_100132EFC(v11, (uint64_t)" WHERE ", 7);
  sqlite3_int64 v13 = sub_100132EFC(v12, (uint64_t)"ROWID", 5);
  sub_100132EFC(v13, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  a1[18] = sub_100601D1C((uint64_t)(a1 + 1), (uint64_t)p_p);
  a1[19] = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(v64, &__p);
  sub_100450DEC((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = sub_100132EFC(&v62, (uint64_t)"SELECT ", 7);
  sqlite3_int64 v17 = sub_100132EFC(v16, (uint64_t)"ZoneName", 8);
  int v18 = sub_100132EFC(v17, (uint64_t)" FROM ", 6);
  unint64_t v19 = sub_100132EFC(v18, (uint64_t)"Names", 5);
  uint64_t v20 = sub_100132EFC(v19, (uint64_t)" WHERE ", 7);
  uint64_t v21 = sub_100132EFC(v20, (uint64_t)"ROWID", 5);
  sub_100132EFC(v21, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &__p;
  }
  else {
    uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  a1[20] = sub_100601D1C((uint64_t)(a1 + 1), (uint64_t)v22);
  a1[21] = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(v64, &__p);
  sub_100450DEC((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = sub_100132EFC(&v62, (uint64_t)"SELECT ", 7);
  sqlite3_int64 v25 = sub_100132EFC(v24, (uint64_t)"ROWID", 5);
  double v26 = sub_100132EFC(v25, (uint64_t)" FROM ", 6);
  sqlite3_int64 v27 = sub_100132EFC(v26, (uint64_t)"Names", 5);
  std::string v28 = sub_100132EFC(v27, (uint64_t)" WHERE ", 7);
  double v29 = sub_100132EFC(v28, (uint64_t)"ZoneName", 8);
  sub_100132EFC(v29, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v30 = &__p;
  }
  else {
    uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  a1[22] = sub_100601D1C((uint64_t)(a1 + 1), (uint64_t)v30);
  a1[23] = v31;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(v64, &__p);
  sub_100450DEC((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  double v32 = sub_100132EFC(&v62, (uint64_t)"SELECT ", 7);
  double v33 = sub_100132EFC(v32, (uint64_t)"Latitude", 8);
  uint64_t v34 = sub_100132EFC(v33, (uint64_t)", ", 2);
  int v35 = sub_100132EFC(v34, (uint64_t)"Longitude", 9);
  sqlite3_int64 v36 = sub_100132EFC(v35, (uint64_t)" FROM ", 6);
  double v37 = sub_100132EFC(v36, (uint64_t)"Points", 6);
  sqlite3_int64 v38 = sub_100132EFC(v37, (uint64_t)" WHERE ", 7);
  sqlite3_int64 v39 = sub_100132EFC(v38, (uint64_t)"ZoneID", 6);
  char v40 = sub_100132EFC(v39, (uint64_t)"=?", 2);
  double v41 = sub_100132EFC(v40, (uint64_t)" ORDER BY ", 10);
  sub_100132EFC(v41, (uint64_t)"PointID", 7);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v42 = &__p;
  }
  else {
    double v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  a1[24] = sub_100601D1C((uint64_t)(a1 + 1), (uint64_t)v42);
  a1[25] = v43;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(v64, &__p);
  sub_100450DEC((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v44 = sub_100132EFC(&v62, (uint64_t)"SELECT ", 7);
  uint64_t v45 = sub_100132EFC(v44, (uint64_t)"ROWID", 5);
  double v46 = sub_100132EFC(v45, (uint64_t)" FROM ", 6);
  double v47 = sub_100132EFC(v46, (uint64_t)"BoundingBoxes", 13);
  sqlite3_int64 v48 = sub_100132EFC(v47, (uint64_t)" WHERE ", 7);
  sqlite3_int64 v49 = sub_100132EFC(v48, (uint64_t)"MaximumLatitude", 15);
  uint64_t v50 = sub_100132EFC(v49, (uint64_t)">=? AND ", 8);
  int v51 = sub_100132EFC(v50, (uint64_t)"MinimumLatitude", 15);
  sqlite3_int64 v52 = sub_100132EFC(v51, (uint64_t)"<=? AND ", 8);
  double v53 = sub_100132EFC(v52, (uint64_t)"MaximumLongitude", 16);
  sqlite3_int64 v54 = sub_100132EFC(v53, (uint64_t)">=? AND ", 8);
  double v55 = sub_100132EFC(v54, (uint64_t)"MinimumLongitude", 16);
  sub_100132EFC(v55, (uint64_t)"<=?", 3);
  std::stringbuf::str();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v56 = &__p;
  }
  else {
    double v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  a1[26] = sub_100601D1C((uint64_t)(a1 + 1), (uint64_t)v56);
  a1[27] = v57;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(v64, &__p);
  sub_100450DEC((uint64_t)v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)((char *)v61
  uint64_t v62 = v58;
  if (SHIBYTE(v64[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64[0].__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100661EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100661F18(uint64_t a1, sqlite3_int64 *a2, double *a3, double *a4, double *a5, double *a6)
{
  uint64_t v11 = (void *)(a1 + 144);
  if (sub_100F03BA8((void *)(a1 + 144)))
  {
    sub_100082068(v11, &v29);
    unint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v29);
    if (sub_10014DBB4(v12, 1, *a2))
    {
      sqlite3_int64 v13 = (sqlite3_stmt *)sub_10014D19C(v29);
      if (sqlite3_step(v13) == 100)
      {
        sqlite3_int64 v14 = (sqlite3_stmt *)sub_10014D19C(v29);
        *a3 = sqlite3_column_double(v14, 0);
        uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(v29);
        *a5 = sqlite3_column_double(v15, 1);
        uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v29);
        *a4 = sqlite3_column_double(v16, 2);
        sqlite3_int64 v17 = (sqlite3_stmt *)sub_10014D19C(v29);
        *a6 = sqlite3_column_double(v17, 3);
        uint64_t v18 = 1;
        goto LABEL_24;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      uint64_t v22 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v23 = *a2;
        *(_DWORD *)std::string buf = 134217984;
        sqlite3_int64 v33 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning No bounding box found for polygon ID %lld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_23:
        uint64_t v18 = 0;
LABEL_24:
        uint64_t v24 = v29;
        uint64_t v29 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        return v18;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_32:
        sqlite3_int64 v27 = *a2;
        int v30 = 134217984;
        sqlite3_int64 v31 = v27;
        std::string v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonBoundingBox(sqlite3_int64 &, double &, double &, double &, double &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
        goto LABEL_23;
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C04D8);
      }
      uint64_t v20 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        sqlite3_int64 v21 = *a2;
        *(_DWORD *)std::string buf = 134217984;
        sqlite3_int64 v33 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Could not bind polygon ID %lld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_23;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_32;
      }
    }
    dispatch_once(&qword_102419630, &stru_1022C04D8);
    goto LABEL_32;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C04D8);
  }
  unint64_t v19 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning fBoundingBoxesSelectStatement not available - rtree module missing or db unavailable", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C04D8);
    }
    LOWORD(v30) = 0;
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPolygonDatabase::getPolygonBoundingBox(sqlite3_int64 &, double &, double &, double &, double &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return 0;
}

void sub_100662434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100662480(uint64_t a1)
{
  return sub_1005F7B0C(a1 + 8, "Names", (const char **)&off_1022C0438, 0, 0);
}

void sub_1006624A0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1006624D0(void *a1)
{
  *a1 = off_1022C0508;
  operator new();
}

void sub_100662AE0()
{
}

void sub_100662E1C()
{
}

void sub_100662E24()
{
}

void sub_100662E2C()
{
}

void sub_100662E34()
{
}

void sub_100662E3C()
{
}

void sub_100662E44()
{
}

void sub_100662E4C()
{
}

void sub_100662E54()
{
}

void sub_100662E5C()
{
}

void sub_100662E64()
{
}

void sub_100662E6C()
{
}

void sub_100662E74()
{
}

void sub_100662E7C()
{
}

void sub_100662E84()
{
}

void sub_100662E8C()
{
}

void sub_100662E94()
{
}

uint64_t sub_100662EA0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  int v11 = *(_DWORD *)(a4 + 1392);
  int v12 = *(_DWORD *)(a2 + 8);
  uint64_t result = sub_100038F68(v12);
  if (result)
  {
    uint64_t v15 = a1[21];
    uint64_t v14 = a1[22];
    goto LABEL_67;
  }
  if (v12 <= 15229)
  {
    if (v12 <= 2064)
    {
      if (v12 <= 2021)
      {
        if (v12 > 2009)
        {
          if (v12 == 2010)
          {
            uint64_t v15 = a1[31];
            uint64_t v14 = a1[32];
            goto LABEL_67;
          }
          if (v12 == 2020)
          {
            uint64_t v15 = a1[1];
            uint64_t v14 = a1[2];
            goto LABEL_67;
          }
          goto LABEL_82;
        }
        if (v12 == 6)
        {
          uint64_t v15 = a1[7];
          uint64_t v14 = a1[8];
          goto LABEL_67;
        }
        if (v12 != 65) {
          goto LABEL_82;
        }
        goto LABEL_63;
      }
      if (v12 > 2047)
      {
        if (v12 == 2048)
        {
          uint64_t v15 = a1[15];
          uint64_t v14 = a1[16];
          goto LABEL_67;
        }
        if (v12 == 2061)
        {
          uint64_t v15 = a1[5];
          uint64_t v14 = a1[6];
          goto LABEL_67;
        }
        goto LABEL_82;
      }
      if (v12 != 2022 && v12 != 2024) {
        goto LABEL_82;
      }
LABEL_53:
      uint64_t v15 = a1[39];
      uint64_t v14 = a1[40];
      goto LABEL_67;
    }
    if (v12 > 2149)
    {
      if (v12 > 11804)
      {
        if (v12 == 11805)
        {
          uint64_t v15 = a1[35];
          uint64_t v14 = a1[36];
          goto LABEL_67;
        }
        if (v12 == 15110)
        {
          uint64_t v15 = a1[47];
          uint64_t v14 = a1[48];
          goto LABEL_67;
        }
        goto LABEL_82;
      }
      if (v12 != 2150)
      {
        if (v12 == 3015)
        {
          uint64_t v15 = a1[9];
          uint64_t v14 = a1[10];
          goto LABEL_67;
        }
        goto LABEL_82;
      }
    }
    else
    {
      if (v12 <= 2100)
      {
        if (v12 == 2065)
        {
          uint64_t v15 = a1[29];
          uint64_t v14 = a1[30];
          goto LABEL_67;
        }
        if (v12 == 2071) {
          goto LABEL_32;
        }
        goto LABEL_82;
      }
      if (v12 != 2101)
      {
        if (v12 != 2105) {
          goto LABEL_82;
        }
        goto LABEL_53;
      }
    }
    uint64_t v15 = a1[37];
    uint64_t v14 = a1[38];
    goto LABEL_67;
  }
  if (v12 <= 15669)
  {
    if (v12 > 15459)
    {
      if (v12 > 15591)
      {
        if (v12 == 15592)
        {
LABEL_64:
          uint64_t v20 = a1[43];
          uint64_t v21 = 0x4090000000000100;
          goto LABEL_65;
        }
        int v19 = 15610;
      }
      else
      {
        if (v12 == 15460) {
          goto LABEL_63;
        }
        int v19 = 15560;
      }
      if (v12 != v19) {
        goto LABEL_82;
      }
      goto LABEL_63;
    }
    if ((v12 - 15230) > 0x19 || ((1 << (v12 - 126)) & 0x2100001) == 0)
    {
      int v18 = 15350;
LABEL_46:
      if (v12 != v18) {
        goto LABEL_82;
      }
      goto LABEL_64;
    }
LABEL_63:
    uint64_t v20 = a1[43];
    uint64_t v21 = 0x4006666601000101;
LABEL_65:
    *(void *)(v20 + 88) = v21;
LABEL_66:
    uint64_t v15 = a1[43];
    uint64_t v14 = a1[44];
    goto LABEL_67;
  }
  if (v12 > 18239)
  {
    if (v12 > 19149)
    {
      switch(v12)
      {
        case 19150:
LABEL_10:
          uint64_t result = sub_100663338(a1, a6);
          uint64_t v16 = a1[43];
          if (result) {
            int v17 = 1074161254;
          }
          else {
            int v17 = 1083074150;
          }
          *(_DWORD *)(v16 + 88) = 256;
          *(_DWORD *)(v16 + 92) = v17;
          goto LABEL_66;
        case 90603:
          uint64_t v15 = a1[19];
          uint64_t v14 = a1[20];
          goto LABEL_67;
        case 519150:
          goto LABEL_10;
      }
      goto LABEL_82;
    }
    if (v12 == 18240)
    {
      uint64_t v15 = a1[33];
      uint64_t v14 = a1[34];
      goto LABEL_67;
    }
    int v18 = 19090;
    goto LABEL_46;
  }
  if (v12 > 18099)
  {
    if (v12 != 18100)
    {
      if (v12 == 18200)
      {
        uint64_t v15 = a1[45];
        uint64_t v14 = a1[46];
        goto LABEL_67;
      }
      goto LABEL_82;
    }
    goto LABEL_64;
  }
  if (v12 == 15670)
  {
    uint64_t v15 = a1[41];
    uint64_t v14 = a1[42];
    goto LABEL_67;
  }
  if (v12 == 18050)
  {
LABEL_32:
    uint64_t v15 = a1[23];
    uint64_t v14 = a1[24];
    goto LABEL_67;
  }
LABEL_82:
  if (a3 && *(unsigned char *)(a2 + 208))
  {
    uint64_t v15 = a1[17];
    uint64_t v14 = a1[18];
    goto LABEL_67;
  }
  if (v12 > 15329)
  {
    if (v12 > 15710)
    {
      if (v12 <= 19029)
      {
        if (v12 == 15711) {
          goto LABEL_109;
        }
        int v22 = 15733;
      }
      else
      {
        if (v12 == 19030 || v12 == 515652) {
          goto LABEL_109;
        }
        int v22 = 515621;
      }
    }
    else
    {
      if ((v12 - 15620) <= 0x37 && ((1 << (v12 - 4)) & 0x80010100000001) != 0
        || v12 == 15330)
      {
        goto LABEL_109;
      }
      int v22 = 15360;
    }
  }
  else
  {
    if (v12 <= 2067)
    {
      if ((v12 - 3) <= 0x3F && ((1 << (v12 - 3)) & 0xB000000000000011) != 0) {
        goto LABEL_109;
      }
      goto LABEL_112;
    }
    if (v12 > 15054)
    {
      if (v12 == 15055 || v12 == 15100) {
        goto LABEL_109;
      }
      int v22 = 15150;
    }
    else
    {
      if (v12 == 2068 || v12 == 3016) {
        goto LABEL_109;
      }
      int v22 = 15030;
    }
  }
  if (v12 == v22)
  {
LABEL_109:
    if (v11)
    {
      uint64_t v15 = a1[27];
      uint64_t v14 = a1[28];
    }
    else
    {
      uint64_t v15 = a1[25];
      uint64_t v14 = a1[26];
    }
    goto LABEL_67;
  }
LABEL_112:
  uint64_t v15 = a1[13];
  uint64_t v14 = a1[14];
LABEL_67:
  *a5 = v15;
  a5[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL sub_100663338(void *a1, double a2)
{
  uint64_t v2 = a1[50];
  if (a1[51] == v2) {
    return 0;
  }
  unint64_t v3 = a1[53];
  uint8x8_t v4 = (void *)(v2 + 8 * (v3 / 0x11));
  unint64_t v5 = a1[54] + v3;
  unint64_t v6 = *v4 + 232 * (v3 % 0x11);
  unint64_t v7 = *(void *)(v2 + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  if (v6 == v7)
  {
    return 0;
  }
  else
  {
    BOOL v8 = 0;
    double v9 = 1.79769313e308;
    do
    {
      uint64_t v10 = *(void *)(v6 + 16);
      if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        double v11 = *(double *)(v6 + 24);
        if (v11 > a2) {
          return v8;
        }
        double v12 = vabdd_f64(a2, v11);
        if (v12 < v9)
        {
          BOOL v8 = v10 == 2;
          double v9 = v12;
        }
      }
      v6 += 232;
      if (v6 - *v4 == 3944)
      {
        unint64_t v13 = v4[1];
        ++v4;
        unint64_t v6 = v13;
      }
    }
    while (v6 != v7);
  }
  return v8;
}

void *sub_100663410@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(_DWORD *)(a2 + 1392))
  {
    uint64_t v4 = result[27];
    uint64_t v3 = result[28];
  }
  else
  {
    uint64_t v4 = result[25];
    uint64_t v3 = result[26];
  }
  *a3 = v4;
  a3[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10066343C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 49;
  sub_100663690(a1 + 49, (long long *)a2);
  double Current = CFAbsoluteTimeGetCurrent();
  unint64_t v6 = a1[53];
  uint64_t v7 = a1[50];
  uint64_t v8 = a1[51];
  double v9 = (void *)(v7 + 8 * (v6 / 0x11));
  if (v8 == v7)
  {
    unint64_t v10 = 0;
    double v11 = a1 + 54;
  }
  else
  {
    unint64_t v10 = *(void *)(v7 + 8 * (v6 / 0x11)) + 232 * (v6 % 0x11);
    double v11 = a1 + 54;
    unint64_t v12 = *(void *)(a1[50] + 8 * ((a1[54] + v6) / 0x11)) + 232 * ((a1[54] + v6) % 0x11);
    if (v10 != v12)
    {
      while (vabdd_f64(Current, *(double *)(v10 + 24)) <= 1200.0)
      {
        v10 += 232;
        if (v10 - *v9 == 3944)
        {
          unint64_t v13 = v9[1];
          ++v9;
          unint64_t v10 = v13;
        }
        if (v10 == v12) {
          goto LABEL_17;
        }
      }
    }
    if (v10 == v12)
    {
LABEL_17:
      unint64_t v10 = *(void *)(a1[50] + 8 * ((a1[54] + v6) / 0x11)) + 232 * ((a1[54] + v6) % 0x11);
    }
    else
    {
      unint64_t v14 = v10;
      uint64_t v15 = v9;
      while (1)
      {
        v14 += 232;
        if (v14 - *v15 == 3944)
        {
          unint64_t v16 = v15[1];
          ++v15;
          unint64_t v14 = v16;
        }
        if (v14 == v12) {
          break;
        }
        if (vabdd_f64(Current, *(double *)(v14 + 24)) <= 1200.0)
        {
          long long v17 = *(_OWORD *)v14;
          long long v18 = *(_OWORD *)(v14 + 32);
          *(_OWORD *)(v10 + 16) = *(_OWORD *)(v14 + 16);
          *(_OWORD *)(v10 + 32) = v18;
          *(_OWORD *)unint64_t v10 = v17;
          long long v19 = *(_OWORD *)(v14 + 48);
          long long v20 = *(_OWORD *)(v14 + 64);
          long long v21 = *(_OWORD *)(v14 + 96);
          *(_OWORD *)(v10 + 80) = *(_OWORD *)(v14 + 80);
          *(_OWORD *)(v10 + 96) = v21;
          *(_OWORD *)(v10 + 48) = v19;
          *(_OWORD *)(v10 + 64) = v20;
          long long v22 = *(_OWORD *)(v14 + 112);
          long long v23 = *(_OWORD *)(v14 + 128);
          long long v24 = *(_OWORD *)(v14 + 160);
          *(_OWORD *)(v10 + 144) = *(_OWORD *)(v14 + 144);
          *(_OWORD *)(v10 + 160) = v24;
          *(_OWORD *)(v10 + 112) = v22;
          *(_OWORD *)(v10 + 128) = v23;
          long long v25 = *(_OWORD *)(v14 + 176);
          long long v26 = *(_OWORD *)(v14 + 192);
          long long v27 = *(_OWORD *)(v14 + 208);
          *(void *)(v10 + 224) = *(void *)(v14 + 224);
          *(_OWORD *)(v10 + 192) = v26;
          *(_OWORD *)(v10 + 208) = v27;
          *(_OWORD *)(v10 + 176) = v25;
          v10 += 232;
          if (v10 - *v9 == 3944)
          {
            unint64_t v28 = v9[1];
            ++v9;
            unint64_t v10 = v28;
          }
        }
      }
      unint64_t v6 = a1[53];
      uint64_t v7 = a1[50];
      uint64_t v8 = a1[51];
    }
  }
  unint64_t v29 = v6 + *v11;
  int v30 = (char *)(v7 + 8 * (v29 / 0x11));
  if (v8 == v7) {
    sqlite3_int64 v31 = 0;
  }
  else {
    sqlite3_int64 v31 = (char *)(*(void *)v30 + 232 * (v29 % 0x11));
  }
  sub_100171538(v4, (char *)v9, (char *)v10, v30, v31);
  if ((unint64_t)(*(void *)(a2 + 16) - 13) <= 4)
  {
    double v32 = (void **)a1[50];
    uint64_t v33 = a1[51];
    a1[54] = 0;
    unint64_t v34 = v33 - (void)v32;
    if (v34 >= 0x11)
    {
      do
      {
        operator delete(*v32);
        uint64_t v35 = a1[51];
        double v32 = (void **)(a1[50] + 8);
        a1[50] = v32;
        unint64_t v34 = v35 - (void)v32;
      }
      while (v34 > 0x10);
    }
    if (v34 >> 3 == 1)
    {
      uint64_t v36 = 8;
    }
    else
    {
      if (v34 >> 3 != 2) {
        return;
      }
      uint64_t v36 = 17;
    }
    a1[53] = v36;
  }
}

__n128 sub_100663690(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) + ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100665220(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x11)) + 232 * (v7 % 0x11);
  long long v9 = *a2;
  long long v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  long long v11 = a2[3];
  long long v12 = a2[4];
  long long v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  long long v14 = a2[7];
  long long v15 = a2[8];
  long long v16 = a2[10];
  *(_OWORD *)(v8 + 144) = a2[9];
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  __n128 result = (__n128)a2[11];
  long long v18 = a2[12];
  long long v19 = a2[13];
  *(void *)(v8 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(v8 + 192) = v18;
  *(_OWORD *)(v8 + 208) = v19;
  *(__n128 *)(v8 + 176) = result;
  ++a1[5];
  return result;
}

void sub_10066377C(void *a1)
{
  sub_100663A24(a1);

  operator delete();
}

uint64_t sub_1006637B4(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  unsigned __int8 v3 = 0;
  sub_10006ACBC((unsigned __int8 *)(a1 + 1), "fForceAssistedCyclingOverrideToTrue", &v3, 0);
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_DWORD *)(a1 + 24) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 28));
  return a1;
}

void sub_100663814(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_100663844@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022C05B0);
  }
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 152);
    *(_DWORD *)std::string buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ScubaDiving, Static, activity: %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022C05B0);
    }
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieScubaDivingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(_OWORD *)a2 = xmmword_101D25430;
  *(void *)(a2 + 16) = 0x40A8000000000000;
  *(void *)(a2 + 24) = 0;
  *(void *)&double result = 0x1500000003;
  *(void *)(a2 + 32) = 0x1500000003;
  return result;
}

void *sub_100663A24(void *a1)
{
  *a1 = off_1022C0508;
  sub_100663B8C(a1 + 49);
  uint64_t v2 = (std::__shared_weak_count *)a1[48];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  unsigned __int8 v3 = (std::__shared_weak_count *)a1[46];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[44];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  int v5 = (std::__shared_weak_count *)a1[42];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[40];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[38];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)a1[36];
  if (v8) {
    sub_1000DB0A0(v8);
  }
  int v9 = (std::__shared_weak_count *)a1[34];
  if (v9) {
    sub_1000DB0A0(v9);
  }
  long long v10 = (std::__shared_weak_count *)a1[32];
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = (std::__shared_weak_count *)a1[30];
  if (v11) {
    sub_1000DB0A0(v11);
  }
  long long v12 = (std::__shared_weak_count *)a1[28];
  if (v12) {
    sub_1000DB0A0(v12);
  }
  long long v13 = (std::__shared_weak_count *)a1[26];
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = (std::__shared_weak_count *)a1[24];
  if (v14) {
    sub_1000DB0A0(v14);
  }
  long long v15 = (std::__shared_weak_count *)a1[22];
  if (v15) {
    sub_1000DB0A0(v15);
  }
  long long v16 = (std::__shared_weak_count *)a1[20];
  if (v16) {
    sub_1000DB0A0(v16);
  }
  long long v17 = (std::__shared_weak_count *)a1[18];
  if (v17) {
    sub_1000DB0A0(v17);
  }
  long long v18 = (std::__shared_weak_count *)a1[16];
  if (v18) {
    sub_1000DB0A0(v18);
  }
  long long v19 = (std::__shared_weak_count *)a1[14];
  if (v19) {
    sub_1000DB0A0(v19);
  }
  long long v20 = (std::__shared_weak_count *)a1[12];
  if (v20) {
    sub_1000DB0A0(v20);
  }
  long long v21 = (std::__shared_weak_count *)a1[10];
  if (v21) {
    sub_1000DB0A0(v21);
  }
  long long v22 = (std::__shared_weak_count *)a1[8];
  if (v22) {
    sub_1000DB0A0(v22);
  }
  long long v23 = (std::__shared_weak_count *)a1[6];
  if (v23) {
    sub_1000DB0A0(v23);
  }
  long long v24 = (std::__shared_weak_count *)a1[4];
  if (v24) {
    sub_1000DB0A0(v24);
  }
  long long v25 = (std::__shared_weak_count *)a1[2];
  if (v25) {
    sub_1000DB0A0(v25);
  }
  return a1;
}

uint64_t sub_100663B8C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unsigned __int8 v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unsigned __int8 v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 8;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 17;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_100663C34(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100663C9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100663CB4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100663CE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100663D28(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100663D90(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100663DA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100663DD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100663E1C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100663E84(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100663E9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100663ECC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100663F10(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100663F78(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100663F90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100663FC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664004(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10066406C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664084(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1006640B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006640F8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664160(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664178(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1006641A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006641EC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664254(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066426C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10066429C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006642E0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664348(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664360(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664390(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006643D4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10066443C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664454(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664484(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006644C8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664530(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664548(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664578(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006645BC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664624(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066463C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10066466C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006646B0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664718(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664730(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664760(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1006647A4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10066480C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664824(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664854(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664898(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664900(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664918(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664948(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10066498C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006649F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664A0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664A3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664A80(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664AE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664B00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664B30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664B74(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664BDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664BF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664C24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664C68(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664CD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664CE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664D18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664D5C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664DC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664DDC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664E0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664E50(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664EB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664ED0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664F00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100664F44(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100664FAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100664FC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100664FF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100665038(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1006650A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006650B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1006650E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10066512C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100665194(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006651AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1006651DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100665220(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x11;
  unint64_t v4 = v2 - 17;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      sqlite3_int64 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xF68uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xF68uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      sqlite3_int64 v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xF68uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1006654EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100665538(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x11) {
    a2 = 1;
  }
  if (v2 < 0x22) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 17;
  }
  return v4 ^ 1u;
}

uint64_t sub_100665598(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 2 * (v2 - v3) + ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x11) {
    a2 = 1;
  }
  if (v5 < 0x22) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_10066560C@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    long long v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_1006656DC(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 3944;
    }
    uint64_t v18 = *a1 + 3944;
    long long v19 = a2;
  }
  sub_1006656DC(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1006656DC@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    int v9 = a1;
  }
  else
  {
    int v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = 0x34F72C234F72C235 * ((uint64_t)&a4[-v10] >> 3);
      if (0x34F72C234F72C235 * ((v11 - a1) >> 3) < v12) {
        uint64_t v12 = 0x34F72C234F72C235 * ((v11 - a1) >> 3);
      }
      v11 -= 232 * v12;
      a4 -= 232 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 232 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 3944);
    }
    if ((char *)(*v6 + 3944) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1006657C0(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (int i = (unsigned char *)(*a1 + 3944); ; int i = v12 + 3944)
    {
      sub_100665854(a2, v8, i, v7, &v14);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100665854(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100665854@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    int v9 = __src;
  }
  else
  {
    int v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = 0x34F72C234F72C235 * ((v10 - __dst + 3944) >> 3);
      uint64_t v12 = 0x34F72C234F72C235 * ((v9 - v7) >> 3) >= v11 ? v11 : 0x34F72C234F72C235 * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 232 * v12);
      }
      v7 += 232 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      long long __dst = v14;
    }
    __dst += 232 * v12;
    if ((char *)*(v6 - 1) + 3944 == __dst) {
      long long __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_1006659F4(id a1)
{
  qword_10247C898 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTimeManagerSilo"];
}

uint64_t sub_100665AB4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100665FA8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247C8A8 != -1) {
    dispatch_once(&qword_10247C8A8, block);
  }
  return qword_10248A230;
}

void sub_100665DA4(uint64_t a1, unint64_t a2)
{
  double v2 = (double)a2 / 1000.0 - kCFAbsoluteTimeIntervalSince1970;
  if (vabdd_f64(v2, *(double *)&qword_10247C8B0) > 600.0)
  {
    *(double *)&qword_10247C8B0 = (double)a2 / 1000.0 - kCFAbsoluteTimeIntervalSince1970;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C12D0);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      double v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Sending along GPS time %.2f to CoreTime", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C12D0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::setGpsTime(uint64_t)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    TMSetSourceTime();
  }
}

void sub_100665FA8()
{
}

void sub_100665FF4()
{
}

const void *sub_100666018(const void *a1, void *a2)
{
  uint64_t v3 = sub_100666300((uint64_t)a1, "CLTimeManager", a2);
  *(unsigned char *)(v3 + 109) = 1;
  uint64_t v4 = (BOOL *)(v3 + 109);
  *(void *)(v3 + 128) = 0;
  *(void *)uint64_t v3 = &off_1022C1118;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0xBFF0000000000000;
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "EnableProactiveBBTimeTransfer", v4);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C12D0);
  }
  unint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    BOOL v6 = *v4;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "EnableProactiveBBTimeTransfer,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C12D0);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTimeManager::CLTimeManager(id<CLIntersiloUniverse>)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*v4)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1006663AC, type metadata for Builtin.UnsafeValueBuffer, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    sub_1006665E8((uint64_t)a1);
  }
  return a1;
}

void sub_100666294(_Unwind_Exception *a1)
{
  sub_1006677A0(v2, 0);
  uint64_t v5 = *v3;
  *uint64_t v3 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_100666644(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100666300(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022C1320;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100666390(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006663AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C12B0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeManager::onBBTimeActiveNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C12B0);
    }
    uint64_t v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      long long v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeManager::onBBTimeActiveNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100669C84;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  _OWORD v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006665C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006665E8(uint64_t a1)
{
  if (TMIsBBTimeActive())
  {
    sub_10066714C(a1);
  }
  else
  {
    sub_1006667E4(a1);
  }
}

uint64_t sub_100666644(uint64_t a1)
{
  *(void *)a1 = off_1022C1320;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1006666C8(uint64_t a1)
{
  *(void *)a1 = &off_1022C1118;
  if (*(unsigned char *)(a1 + 109)) {
    sub_1006667E4(a1);
  }
  *(unsigned char *)(a1 + 108) = 1;
  sub_1006677A0((uint64_t *)(a1 + 136), 0);
  uint64_t v2 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_100666644(a1);
}

void sub_100666774(uint64_t a1)
{
  sub_1006666C8(a1);

  operator delete();
}

uint64_t sub_1006667AC(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 109)) {
    double result = sub_1006667E4(result);
  }
  *(unsigned char *)(v1 + 108) = 1;
  return result;
}

uint64_t sub_1006667E4(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 136);
  if (*(void *)(a1 + 136))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C12D0);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopping proactive time", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C12D0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::stopBBTimeActive()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return sub_1006677A0(v1, 0);
}

void *sub_10066698C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100666A08()
{
  return 1;
}

uint64_t sub_100666A10()
{
  return 1;
}

uint64_t sub_100666A18(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 136) == a2)
  {
    uint64_t v2 = a1;
    if (qword_102419630 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A693F8(qword_102419630 == -1);
  }
  dispatch_once(&qword_102419630, &stru_1022C12D0);
LABEL_3:
  uint64_t v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Resuming proactive time", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C12D0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::onBBTimeActiveRetry(CLPersistentTimer *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_100666BCC(v2);
}

void sub_100666BCC(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v4 = *(double *)(a1 + 144);
    if (v4 > 0.0 && v4 - Current < 1800.0 && Current < v4 + 900.0 + 5.0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C12D0);
      }
      uint64_t v5 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 144);
        buf[0] = 134218240;
        *(void *)&buf[1] = v6;
        __int16 v16 = 2048;
        uint64_t v17 = 0x408C200000000000;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Deferring proactive time, last attempt was at %f, which is less than minimum interval %f ago", (uint8_t *)buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C12D0);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      operator new();
    }
    __asm { FMOV            V0.2D, #-1.0 }
    uint64_t v1 = &qword_102419000;
    if (qword_1024193D0 == -1)
    {
LABEL_12:
      id v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#wigo,on,TimeManager", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v1[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022C12F0);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      AnalyticsSendEventLazy();
      sub_10012F770();
    }
  }
  else
  {
    sub_101A6956C();
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_1022C12F0);
  goto LABEL_12;
}

void sub_100667100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_10066714C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 109))
  {
    if (sub_10073DC4C() && !*(void *)(a1 + 136))
    {
      if (!*(void *)(a1 + 128)) {
        sub_100E92BC0();
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C12D0);
      }
      uint64_t v2 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Starting proactive time", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022C12D0);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActive()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      sub_100666BCC(a1);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C12D0);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "proactive time is NOT enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C12D0);
      }
      double v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActive()", "%s\n", v4, 2);
      if (v4 != buf) {
        free(v4);
      }
    }
  }
}

void sub_1006675E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C12B0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeManager::onBBNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C12B0);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeManager::onBBNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100667784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006677A0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100998C38(result);
    operator delete();
  }
  return result;
}

void sub_1006677F0(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C12B0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    double v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeManager::onBBTimeActiveRetry", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C12B0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeManager::onBBTimeActiveRetry\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100666A18(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006679A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_1006679C4(id a1)
{
  return (NSDictionary *)&off_102397248;
}

void *sub_1006679D0(void *result)
{
  uint64_t v1 = result[4];
  if (*(void *)(v1 + 128) == result[5])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C12D0);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      if (*(void *)(v1 + 136)) {
        uint64_t v3 = "Pausing";
      }
      else {
        uint64_t v3 = "Stopped";
      }
      *(_DWORD *)std::string buf = 136315138;
      char v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s proactive time", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C12D0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C12F0);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,TimeManager", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022C12F0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTimeManager::startBBTimeActiveJob()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    AnalyticsSendEventLazy();
    return [*(id *)(*(void *)(v1 + 128) + 16) unregister:*(void *)(*(void *)(v1 + 128) + 8) forNotification:0];
  }
  return result;
}

NSDictionary *__cdecl sub_100667D14(id a1)
{
  return (NSDictionary *)&off_102397270;
}

void sub_100667D20()
{
}

void sub_100667DDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100667E18(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1022C1400;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100667EFC(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C12B0);
      }
      __int16 v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        __int16 v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022C12B0);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::removeClient(int) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10066818C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100668240(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100668288(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1006682D0(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100668318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241D090);
}

uint64_t sub_100668344(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          unint64_t v29 = (uint64_t *)v25;
        }
        else {
          unint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(_DWORD *)std::string buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100669D5C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241D091;
        int v39 = v17;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        unint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C12B0);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C12B0);
    }
    double v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    sqlite3_int64 v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1006687E8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C12B0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C12B0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100668A6C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C12B0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C12B0);
                }
                unint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  unint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                sqlite3_int64 v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100668E40(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(_DWORD **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  *a3 = *v11;
  return 1;
}

uint64_t sub_100668EA0(uint64_t a1, int *a2, _DWORD *a3)
{
  int v6 = operator new(0x20uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *((_DWORD *)v6 + 6) = *a3;
  void *v6 = off_1022C1448;
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100668F54(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100668F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_100668FBC(uint64_t a1, unsigned int *a2, _DWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C12B0);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&void v24[8] = 2082;
    *(void *)&unsigned char v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    unint64_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    long long v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    void v18[2] = 0;
    *BOOL v18 = off_1022C1448;
    *((_DWORD *)v18 + 6) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_10066A80C();
  }
  os_activity_scope_leave(&state);
}

void sub_1006695A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1006695EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C12B0);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C12B0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C12B0);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C12B0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022C12B0);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C12B0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100669B9C(uint64_t a1)
{
  sub_100669CBC(a1);

  operator delete();
}

id sub_100669BD4(uint64_t a1, int a2, void *a3)
{
  id result = sub_100669F20(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100669C24(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100669C54(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100669C84(uint64_t a1)
{
}

void sub_100669C8C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100669CBC(uint64_t a1)
{
  *(void *)a1 = &off_1022C1400;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100669D2C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100669D5C()
{
}

unsigned char *sub_100669E08(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100669F20(a4);
    uint64_t v10 = *(void *)a3 + 80;
    int v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

uint64_t sub_100669F00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100669F20(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100669FBC(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_10066A348(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100669FBC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_10066A708((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022C1418);
    }
    int v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D2723CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022C1418);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D2723CLL & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022C1418);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D2723CLL & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTimeManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_10066A348(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C1418);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2723CLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTimeManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C1418);
      }
      int v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2723CLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022C1418);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_10066A708(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392978))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)4)
    {
      uint64_t v4 = sub_101A696F0();
      return (id)sub_10066A790(v4);
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_10066A790(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C1448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10066A7B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C1448;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10066A80C()
{
}

void sub_10066A8B8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    int v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_100669F20(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              sqlite3_int64 v48 = v19;
              sub_100669E08(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              sqlite3_int64 v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C12B0);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C12B0);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_10066ACA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_10066ACC8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10066AD48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10066ADD8(_Unwind_Exception *a1)
{
}

void sub_10066AE68(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = sub_10016BA10();
    sub_10016BC44((uint64_t)buf);
    sub_10016BE74(v4, (uint64_t *)buf);
    *(_DWORD *)std::string buf = 23;
    v30.i32[0] = 23;
    v30.i32[1] = sub_10016A9AC((int *)buf);
    uint64_t v5 = sub_10016AB88();
    sub_1005BE7A4(v5, &v30, (int *)(a1 + 5124), a2, 0);
    unsigned int v6 = 0;
    if ([a2 hasArrivalDate]) {
      unsigned int v6 = [a2 hasDepartureDate] ^ 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    char v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = [a2 hasDepartureDate];
      unsigned int v9 = [a2 hasArrivalDate];
      id v10 = [[[a2 description] UTF8String];
      *(_DWORD *)std::string buf = 67240963;
      LODWORD(v38) = v6;
      WORD2(v38) = 1026;
      *(_DWORD *)((char *)&v38 + 6) = v8;
      WORD5(v38) = 1025;
      HIDWORD(v38) = v9;
      LOWORD(v39) = 2081;
      *(void *)((char *)&v39 + 2) = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LocationController,onVisit,isInsideVisit,%{public}d,hasDepartDate,%{public}d,hasArrivalDate,%{private}d,description,%{private}s", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      unsigned int v26 = [a2 hasDepartureDate];
      unsigned int v27 = [a2 hasArrivalDate];
      id v28 = [[objc_msgSend(a2, "description") UTF8String];
      v30.i32[2] = 67240963;
      v30.i32[3] = v6;
      __int16 v31 = 1026;
      unsigned int v32 = v26;
      __int16 v33 = 1025;
      unsigned int v34 = v27;
      __int16 v35 = 2081;
      id v36 = v28;
      unint64_t v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onVisit(const CLVisit *)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    sub_1006768E4(a1, 12, v6);
    uint64_t v11 = *(void *)(a1 + 312);
    if (v11) {
      sub_100EDDB94(v11, a2);
    }
    uint64_t v12 = *(void *)(a1 + 304);
    if (v12)
    {
      uint64_t v13 = sub_10016BA10();
      *(_DWORD *)std::string buf = 1;
      double v14 = sub_10016BA54(v13, buf);
      sub_10100BD54(v12, v6, v14);
    }
    int v15 = v6 ^ 1;
    sub_1011FEA2C(a1 + 5200, v15);
    *(_DWORD *)std::string buf = 0xFFFF;
    long long v38 = 0uLL;
    long long v39 = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v40 = _Q0;
    long long v41 = _Q0;
    long long v42 = _Q0;
    int v43 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    unint64_t v44 = 0xBFF0000000000000;
    int v47 = 0;
    unint64_t v48 = 0xBFF0000000000000;
    int v49 = 0x7FFFFFFF;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v50 = 0;
    char v53 = 0;
    __n128 v21 = sub_1011FE8C4(a1 + 5200, (uint64_t)buf);
    if (v15)
    {
      uint64_t v25 = *(void *)(a1 + 288);
      if (v25) {
        (*(void (**)(uint64_t, __n128))(*(void *)v25 + 504))(v25, v21);
      }
    }
    else
    {
      sub_1006804E0(a1, a2);
      uint64_t v22 = *(void *)(a1 + 288);
      if (v22) {
        (*(void (**)(uint64_t, void))(*(void *)v22 + 488))(v22, 0);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    int v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289026;
      LODWORD(v38) = 0;
      WORD2(v38) = 2082;
      *(void *)((char *)&v38 + 6) = "";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationController,slv,nil visit in onVisit()\"}", buf, 0x12u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
    }
    BOOL v24 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      *(_DWORD *)std::string buf = 68289026;
      LODWORD(v38) = 0;
      WORD2(v38) = 2082;
      *(void *)((char *)&v38 + 6) = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationController,slv,nil visit in onVisit()", "{\"msg%{public}.0s\":\"LocationController,slv,nil visit in onVisit()\"}", buf, 0x12u);
    }
  }
}

void sub_10066B464(id a1)
{
  qword_10247C8E8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLLocationControllerSilo"];
}

uint64_t sub_10066B524(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10066D200;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247C8F8 != -1) {
    dispatch_once(&qword_10247C8F8, block);
  }
  return qword_10248A238;
}

uint64_t sub_10066B758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(double **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  unsigned int v6 = (char **)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v8 = v5 - (void)v4;
    uint64_t v9 = v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1) {
      uint64_t v9 = 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v11 = sub_1000DA54C((uint64_t)v6, v10);
    uint64_t v12 = *(double **)a2;
    uint64_t v13 = *(double **)(a2 + 8);
    int v15 = &v11[v14];
    *uint64_t v11 = 0x3FF0000000000000;
    char v7 = v11 + 1;
    while (v13 != v12)
    {
      uint64_t v16 = *((void *)v13-- - 1);
      *--uint64_t v11 = v16;
    }
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    double *v4 = 1.0;
    char v7 = v4 + 1;
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v17 = sub_10016BA10();
  LODWORD(v254) = 1;
  double v18 = sub_10016BA54(v17, &v254);
  double v19 = v18;
  __n128 v21 = *(double **)(a2 + 8);
  unint64_t v20 = *(void *)(a2 + 16);
  if ((unint64_t)v21 >= v20)
  {
    int v23 = *(double **)a2;
    uint64_t v24 = ((uint64_t)v21 - *(void *)a2) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v26 = v20 - (void)v23;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      id v28 = (char *)sub_1000DA54C((uint64_t)v6, v27);
      int v23 = *(double **)a2;
      __n128 v21 = *(double **)(a2 + 8);
    }
    else
    {
      id v28 = 0;
    }
    unint64_t v29 = (double *)&v28[8 * v24];
    int32x4_t v30 = &v28[8 * v27];
    *unint64_t v29 = v19;
    uint64_t v22 = v29 + 1;
    while (v21 != v23)
    {
      uint64_t v31 = *((void *)v21-- - 1);
      *((void *)v29-- - 1) = v31;
    }
    *(void *)a2 = v29;
    *(void *)(a2 + 8) = v22;
    *(void *)(a2 + 16) = v30;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    double *v21 = v18;
    uint64_t v22 = v21 + 1;
  }
  *(void *)(a2 + 8) = v22;
  unsigned int v32 = *(char **)(a2 + 16);
  if (*(void *)(a1 + 712))
  {
    if (v22 >= (double *)v32)
    {
      __int16 v35 = *(double **)a2;
      uint64_t v36 = ((uint64_t)v22 - *(void *)a2) >> 3;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61) {
        goto LABEL_407;
      }
      uint64_t v38 = v32 - (char *)v35;
      if (v38 >> 2 > v37) {
        unint64_t v37 = v38 >> 2;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        long long v40 = (char *)sub_1000DA54C((uint64_t)v6, v39);
        __int16 v35 = *(double **)a2;
        uint64_t v22 = *(double **)(a2 + 8);
      }
      else
      {
        long long v40 = 0;
      }
      int v47 = &v40[8 * v36];
      unsigned int v32 = &v40[8 * v39];
      *(void *)int v47 = 0x3FF0000000000000;
      __int16 v33 = (unint64_t *)(v47 + 8);
      while (v22 != v35)
      {
        uint64_t v48 = *((void *)v22-- - 1);
        *((void *)v47 - 1) = v48;
        v47 -= 8;
      }
      *(void *)a2 = v47;
      *(void *)(a2 + 8) = v33;
      *(void *)(a2 + 16) = v32;
      if (v35)
      {
        operator delete(v35);
        unsigned int v32 = *v6;
      }
    }
    else
    {
      double *v22 = 1.0;
      __int16 v33 = (unint64_t *)(v22 + 1);
    }
    *(void *)(a2 + 8) = v33;
    if (v33 >= (unint64_t *)v32)
    {
      uint64_t v51 = *(double **)a2;
      uint64_t v52 = ((uint64_t)v33 - *(void *)a2) >> 3;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61) {
        goto LABEL_407;
      }
      uint64_t v54 = v32 - (char *)v51;
      if (v54 >> 2 > v53) {
        unint64_t v53 = v54 >> 2;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        __int16 v56 = (char *)sub_1000DA54C((uint64_t)v6, v55);
        uint64_t v51 = *(double **)a2;
        __int16 v33 = *(unint64_t **)(a2 + 8);
      }
      else
      {
        __int16 v56 = 0;
      }
      int v57 = (unint64_t *)&v56[8 * v52];
      unsigned int v32 = &v56[8 * v55];
      unint64_t v49 = *(void *)(a1 + 736);
      *int v57 = v49;
      uint64_t v50 = (double *)(v57 + 1);
      while (v33 != (unint64_t *)v51)
      {
        unint64_t v58 = *--v33;
        HIDWORD(v49) = HIDWORD(v58);
        *--int v57 = v58;
      }
      *(void *)a2 = v57;
      *(void *)(a2 + 8) = v50;
      *(void *)(a2 + 16) = v32;
      if (v51)
      {
        operator delete(v51);
        unsigned int v32 = *v6;
      }
    }
    else
    {
      unint64_t v49 = *(void *)(a1 + 736);
      *__int16 v33 = v49;
      uint64_t v50 = (double *)(v33 + 1);
    }
    *(void *)(a2 + 8) = v50;
    LODWORD(v49) = *(_DWORD *)(a1 + 720);
    double v59 = (double)v49;
    if (v50 >= (double *)v32)
    {
      __int16 v61 = *(double **)a2;
      uint64_t v62 = ((uint64_t)v50 - *(void *)a2) >> 3;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 61) {
        goto LABEL_407;
      }
      uint64_t v64 = v32 - (char *)v61;
      if (v64 >> 2 > v63) {
        unint64_t v63 = v64 >> 2;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        double v66 = (char *)sub_1000DA54C((uint64_t)v6, v65);
        __int16 v61 = *(double **)a2;
        uint64_t v50 = *(double **)(a2 + 8);
      }
      else
      {
        double v66 = 0;
      }
      __int16 v67 = (double *)&v66[8 * v62];
      unsigned int v32 = &v66[8 * v65];
      *__int16 v67 = v59;
      double v60 = v67 + 1;
      while (v50 != v61)
      {
        uint64_t v68 = *((void *)v50-- - 1);
        *((void *)v67-- - 1) = v68;
      }
      *(void *)a2 = v67;
      *(void *)(a2 + 8) = v60;
      *(void *)(a2 + 16) = v32;
      if (v61)
      {
        operator delete(v61);
        unsigned int v32 = *v6;
      }
    }
    else
    {
      *uint64_t v50 = v59;
      double v60 = v50 + 1;
    }
    *(void *)(a2 + 8) = v60;
    if (v60 >= (double *)v32)
    {
      double v70 = *(double **)a2;
      uint64_t v71 = ((uint64_t)v60 - *(void *)a2) >> 3;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 61) {
        goto LABEL_407;
      }
      uint64_t v73 = v32 - (char *)v70;
      if (v73 >> 2 > v72) {
        unint64_t v72 = v73 >> 2;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        __int16 v75 = (char *)sub_1000DA54C((uint64_t)v6, v74);
        double v70 = *(double **)a2;
        double v60 = *(double **)(a2 + 8);
      }
      else
      {
        __int16 v75 = 0;
      }
      uint64_t v76 = &v75[8 * v71];
      uint64_t v77 = &v75[8 * v74];
      *(void *)uint64_t v76 = *(void *)(a1 + 728);
      __int16 v69 = v76 + 8;
      while (v60 != v70)
      {
        uint64_t v78 = *((void *)v60-- - 1);
        *((void *)v76 - 1) = v78;
        v76 -= 8;
      }
      *(void *)a2 = v76;
      *(void *)(a2 + 8) = v69;
      *(void *)(a2 + 16) = v77;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      *double v60 = *(double *)(a1 + 728);
      __int16 v69 = v60 + 1;
    }
    *(void *)(a2 + 8) = v69;
    int v262 = 0;
    uint64_t v254 = 0;
    sub_10078D49C(*(uint64_t **)(a1 + 712), &v262, (double *)&v254);
    int v80 = *(double **)(a2 + 8);
    char v79 = *(double **)(a2 + 16);
    if (v80 >= v79)
    {
      uint64_t v82 = *(double **)a2;
      uint64_t v83 = ((uint64_t)v80 - *(void *)a2) >> 3;
      unint64_t v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 61) {
        goto LABEL_407;
      }
      uint64_t v85 = (char *)v79 - (char *)v82;
      if (v85 >> 2 > v84) {
        unint64_t v84 = v85 >> 2;
      }
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v86 = v84;
      }
      if (v86)
      {
        int v87 = (char *)sub_1000DA54C((uint64_t)v6, v86);
        uint64_t v82 = *(double **)a2;
        int v80 = *(double **)(a2 + 8);
      }
      else
      {
        int v87 = 0;
      }
      int v88 = &v87[8 * v83];
      char v79 = (double *)&v87[8 * v86];
      *(void *)int v88 = v254;
      __int16 v81 = (double *)(v88 + 8);
      while (v80 != v82)
      {
        uint64_t v89 = *((void *)v80-- - 1);
        *((void *)v88 - 1) = v89;
        v88 -= 8;
      }
      *(void *)a2 = v88;
      *(void *)(a2 + 8) = v81;
      *(void *)(a2 + 16) = v79;
      if (v82)
      {
        operator delete(v82);
        char v79 = (double *)*v6;
      }
    }
    else
    {
      *(void *)int v80 = v254;
      __int16 v81 = v80 + 1;
    }
    *(void *)(a2 + 8) = v81;
    double v90 = (double)v262;
    if (v81 < v79)
    {
      *__int16 v81 = v90;
      unsigned int v34 = v81 + 1;
      goto LABEL_122;
    }
    long long v41 = *(double **)a2;
    uint64_t v92 = ((uint64_t)v81 - *(void *)a2) >> 3;
    unint64_t v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v94 = (char *)v79 - (char *)v41;
    if (v94 >> 2 > v93) {
      unint64_t v93 = v94 >> 2;
    }
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v95 = v93;
    }
    if (v95)
    {
      uint64_t v96 = (char *)sub_1000DA54C((uint64_t)v6, v95);
      long long v41 = *(double **)a2;
      __int16 v81 = *(double **)(a2 + 8);
    }
    else
    {
      uint64_t v96 = 0;
    }
    unint64_t v97 = (double *)&v96[8 * v92];
    unint64_t v98 = &v96[8 * v95];
    *unint64_t v97 = v90;
    long long v91 = v97 + 1;
    while (v81 != v41)
    {
      uint64_t v99 = *((void *)v81-- - 1);
      *((void *)v97-- - 1) = v99;
    }
  }
  else
  {
    if (v22 < (double *)v32)
    {
      double *v22 = -1.0;
      unsigned int v34 = v22 + 1;
LABEL_122:
      long long v91 = v34;
      goto LABEL_141;
    }
    long long v41 = *(double **)a2;
    uint64_t v42 = ((uint64_t)v22 - *(void *)a2) >> 3;
    unint64_t v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v44 = v32 - (char *)v41;
    if (v44 >> 2 > v43) {
      unint64_t v43 = v44 >> 2;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v43;
    }
    if (v45)
    {
      uint64_t v46 = (char *)sub_1000DA54C((uint64_t)v6, v45);
      long long v41 = *(double **)a2;
      uint64_t v22 = *(double **)(a2 + 8);
    }
    else
    {
      uint64_t v46 = 0;
    }
    unint64_t v97 = (double *)&v46[8 * v42];
    unint64_t v98 = &v46[8 * v45];
    *unint64_t v97 = -1.0;
    long long v91 = v97 + 1;
    while (v22 != v41)
    {
      uint64_t v100 = *((void *)v22-- - 1);
      *((void *)v97-- - 1) = v100;
    }
  }
  *(void *)a2 = v97;
  *(void *)(a2 + 8) = v91;
  *(void *)(a2 + 16) = v98;
  if (v41) {
    operator delete(v41);
  }
LABEL_141:
  *(void *)(a2 + 8) = v91;
  int v101 = *v6;
  if (v91 >= (double *)*v6)
  {
    int v103 = *(double **)a2;
    uint64_t v104 = ((uint64_t)v91 - *(void *)a2) >> 3;
    unint64_t v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v106 = v101 - (char *)v103;
    if (v106 >> 2 > v105) {
      unint64_t v105 = v106 >> 2;
    }
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v107 = v105;
    }
    if (v107)
    {
      unint64_t v108 = (char *)sub_1000DA54C((uint64_t)v6, v107);
      int v103 = *(double **)a2;
      long long v91 = *(double **)(a2 + 8);
    }
    else
    {
      unint64_t v108 = 0;
    }
    uint64_t v109 = &v108[8 * v104];
    int v101 = &v108[8 * v107];
    *(void *)uint64_t v109 = 0x3FF0000000000000;
    int v102 = (double *)(v109 + 8);
    while (v91 != v103)
    {
      uint64_t v110 = *((void *)v91-- - 1);
      *((void *)v109 - 1) = v110;
      v109 -= 8;
    }
    *(void *)a2 = v109;
    *(void *)(a2 + 8) = v102;
    *(void *)(a2 + 16) = v101;
    if (v103)
    {
      operator delete(v103);
      int v101 = *v6;
    }
  }
  else
  {
    *long long v91 = 1.0;
    int v102 = v91 + 1;
  }
  *(void *)(a2 + 8) = v102;
  if (*(unsigned char *)(a1 + 1952)) {
    double v111 = 1.0;
  }
  else {
    double v111 = 0.0;
  }
  if (v102 >= (double *)v101)
  {
    long long v113 = *(double **)a2;
    uint64_t v114 = ((uint64_t)v102 - *(void *)a2) >> 3;
    unint64_t v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v116 = v101 - (char *)v113;
    if (v116 >> 2 > v115) {
      unint64_t v115 = v116 >> 2;
    }
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v117 = v115;
    }
    if (v117)
    {
      uint64_t v118 = (char *)sub_1000DA54C((uint64_t)v6, v117);
      long long v113 = *(double **)a2;
      int v102 = *(double **)(a2 + 8);
    }
    else
    {
      uint64_t v118 = 0;
    }
    unint64_t v119 = (double *)&v118[8 * v114];
    int v101 = &v118[8 * v117];
    double *v119 = v111;
    int v112 = v119 + 1;
    while (v102 != v113)
    {
      uint64_t v120 = *((void *)v102-- - 1);
      *((void *)v119-- - 1) = v120;
    }
    *(void *)a2 = v119;
    *(void *)(a2 + 8) = v112;
    *(void *)(a2 + 16) = v101;
    if (v113)
    {
      operator delete(v113);
      int v101 = *v6;
    }
  }
  else
  {
    *int v102 = v111;
    int v112 = v102 + 1;
  }
  *(void *)(a2 + 8) = v112;
  if (v112 >= (double *)v101)
  {
    int v122 = *(double **)a2;
    uint64_t v123 = ((uint64_t)v112 - *(void *)a2) >> 3;
    unint64_t v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v125 = v101 - (char *)v122;
    if (v125 >> 2 > v124) {
      unint64_t v124 = v125 >> 2;
    }
    if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v126 = v124;
    }
    if (v126)
    {
      int v127 = (char *)sub_1000DA54C((uint64_t)v6, v126);
      int v122 = *(double **)a2;
      int v112 = *(double **)(a2 + 8);
    }
    else
    {
      int v127 = 0;
    }
    int v128 = &v127[8 * v123];
    int v129 = &v127[8 * v126];
    *(void *)int v128 = 0x3FF0000000000000;
    int v121 = v128 + 8;
    while (v112 != v122)
    {
      uint64_t v130 = *((void *)v112-- - 1);
      *((void *)v128 - 1) = v130;
      v128 -= 8;
    }
    *(void *)a2 = v128;
    *(void *)(a2 + 8) = v121;
    *(void *)(a2 + 16) = v129;
    if (v122) {
      operator delete(v122);
    }
  }
  else
  {
    *int v112 = 1.0;
    int v121 = v112 + 1;
  }
  *(void *)(a2 + 8) = v121;
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  long long v256 = xmmword_101D1C320;
  int v257 = -1;
  __int16 v258 = 0;
  long long v259 = 0u;
  long long v260 = 0u;
  uint64_t v261 = 0;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 288) + 240))(*(void *)(a1 + 288), &v254);
  long long v132 = *(double **)(a2 + 8);
  long long v131 = *(char **)(a2 + 16);
  if (v132 >= (double *)v131)
  {
    long long v134 = *(double **)a2;
    uint64_t v135 = ((uint64_t)v132 - *(void *)a2) >> 3;
    unint64_t v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v137 = v131 - (char *)v134;
    if (v137 >> 2 > v136) {
      unint64_t v136 = v137 >> 2;
    }
    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v138 = v136;
    }
    if (v138)
    {
      int v139 = (char *)sub_1000DA54C((uint64_t)v6, v138);
      long long v134 = *(double **)a2;
      long long v132 = *(double **)(a2 + 8);
    }
    else
    {
      int v139 = 0;
    }
    int v140 = &v139[8 * v135];
    long long v131 = &v139[8 * v138];
    *(void *)int v140 = v255;
    long long v133 = (double *)(v140 + 8);
    while (v132 != v134)
    {
      uint64_t v141 = *((void *)v132-- - 1);
      *((void *)v140 - 1) = v141;
      v140 -= 8;
    }
    *(void *)a2 = v140;
    *(void *)(a2 + 8) = v133;
    *(void *)(a2 + 16) = v131;
    if (v134)
    {
      operator delete(v134);
      long long v131 = *v6;
    }
  }
  else
  {
    *(void *)long long v132 = v255;
    long long v133 = v132 + 1;
  }
  *(void *)(a2 + 8) = v133;
  if (v133 >= (double *)v131)
  {
    int v143 = *(double **)a2;
    uint64_t v144 = ((uint64_t)v133 - *(void *)a2) >> 3;
    unint64_t v145 = v144 + 1;
    if ((unint64_t)(v144 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v146 = v131 - (char *)v143;
    if (v146 >> 2 > v145) {
      unint64_t v145 = v146 >> 2;
    }
    if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v147 = v145;
    }
    if (v147)
    {
      int64_t v148 = (char *)sub_1000DA54C((uint64_t)v6, v147);
      int v143 = *(double **)a2;
      long long v133 = *(double **)(a2 + 8);
    }
    else
    {
      int64_t v148 = 0;
    }
    uint64_t v149 = &v148[8 * v144];
    long long v131 = &v148[8 * v147];
    *(void *)uint64_t v149 = v256;
    int v142 = (double *)(v149 + 8);
    while (v133 != v143)
    {
      uint64_t v150 = *((void *)v133-- - 1);
      *((void *)v149 - 1) = v150;
      v149 -= 8;
    }
    *(void *)a2 = v149;
    *(void *)(a2 + 8) = v142;
    *(void *)(a2 + 16) = v131;
    if (v143)
    {
      operator delete(v143);
      long long v131 = *v6;
    }
  }
  else
  {
    *(void *)long long v133 = v256;
    int v142 = v133 + 1;
  }
  *(void *)(a2 + 8) = v142;
  if (v142 >= (double *)v131)
  {
    uint64_t v152 = *(double **)a2;
    uint64_t v153 = ((uint64_t)v142 - *(void *)a2) >> 3;
    unint64_t v154 = v153 + 1;
    if ((unint64_t)(v153 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v155 = v131 - (char *)v152;
    if (v155 >> 2 > v154) {
      unint64_t v154 = v155 >> 2;
    }
    if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v156 = v154;
    }
    if (v156)
    {
      int v157 = (char *)sub_1000DA54C((uint64_t)v6, v156);
      uint64_t v152 = *(double **)a2;
      int v142 = *(double **)(a2 + 8);
    }
    else
    {
      int v157 = 0;
    }
    int v158 = &v157[8 * v153];
    long long v131 = &v157[8 * v156];
    *(void *)int v158 = *((void *)&v256 + 1);
    int v151 = (double *)(v158 + 8);
    while (v142 != v152)
    {
      uint64_t v159 = *((void *)v142-- - 1);
      *((void *)v158 - 1) = v159;
      v158 -= 8;
    }
    *(void *)a2 = v158;
    *(void *)(a2 + 8) = v151;
    *(void *)(a2 + 16) = v131;
    if (v152)
    {
      operator delete(v152);
      long long v131 = *v6;
    }
  }
  else
  {
    *int v142 = *((double *)&v256 + 1);
    int v151 = v142 + 1;
  }
  *(void *)(a2 + 8) = v151;
  if ((_BYTE)v258) {
    double v160 = 1.0;
  }
  else {
    double v160 = 0.0;
  }
  if (v151 >= (double *)v131)
  {
    long long v162 = *(double **)a2;
    uint64_t v163 = ((uint64_t)v151 - *(void *)a2) >> 3;
    unint64_t v164 = v163 + 1;
    if ((unint64_t)(v163 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v165 = v131 - (char *)v162;
    if (v165 >> 2 > v164) {
      unint64_t v164 = v165 >> 2;
    }
    if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v166 = v164;
    }
    if (v166)
    {
      uint64_t v167 = (char *)sub_1000DA54C((uint64_t)v6, v166);
      long long v162 = *(double **)a2;
      int v151 = *(double **)(a2 + 8);
    }
    else
    {
      uint64_t v167 = 0;
    }
    unint64_t v168 = (double *)&v167[8 * v163];
    long long v131 = &v167[8 * v166];
    *unint64_t v168 = v160;
    long long v161 = v168 + 1;
    while (v151 != v162)
    {
      uint64_t v169 = *((void *)v151-- - 1);
      *((void *)v168-- - 1) = v169;
    }
    *(void *)a2 = v168;
    *(void *)(a2 + 8) = v161;
    *(void *)(a2 + 16) = v131;
    if (v162)
    {
      operator delete(v162);
      long long v131 = *v6;
    }
  }
  else
  {
    *int v151 = v160;
    long long v161 = v151 + 1;
  }
  *(void *)(a2 + 8) = v161;
  if (HIBYTE(v258)) {
    double v170 = 1.0;
  }
  else {
    double v170 = 0.0;
  }
  if (v161 >= (double *)v131)
  {
    int v172 = *(double **)a2;
    uint64_t v173 = ((uint64_t)v161 - *(void *)a2) >> 3;
    unint64_t v174 = v173 + 1;
    if ((unint64_t)(v173 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v175 = v131 - (char *)v172;
    if (v175 >> 2 > v174) {
      unint64_t v174 = v175 >> 2;
    }
    if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v176 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v176 = v174;
    }
    if (v176)
    {
      long long v177 = (char *)sub_1000DA54C((uint64_t)v6, v176);
      int v172 = *(double **)a2;
      long long v161 = *(double **)(a2 + 8);
    }
    else
    {
      long long v177 = 0;
    }
    long long v178 = (double *)&v177[8 * v173];
    long long v131 = &v177[8 * v176];
    *long long v178 = v170;
    int v171 = v178 + 1;
    while (v161 != v172)
    {
      uint64_t v179 = *((void *)v161-- - 1);
      *((void *)v178-- - 1) = v179;
    }
    *(void *)a2 = v178;
    *(void *)(a2 + 8) = v171;
    *(void *)(a2 + 16) = v131;
    if (v172)
    {
      operator delete(v172);
      long long v131 = *v6;
    }
  }
  else
  {
    *long long v161 = v170;
    int v171 = v161 + 1;
  }
  *(void *)(a2 + 8) = v171;
  if (v171 >= (double *)v131)
  {
    unint64_t v181 = *(double **)a2;
    uint64_t v182 = ((uint64_t)v171 - *(void *)a2) >> 3;
    unint64_t v183 = v182 + 1;
    if ((unint64_t)(v182 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v184 = v131 - (char *)v181;
    if (v184 >> 2 > v183) {
      unint64_t v183 = v184 >> 2;
    }
    if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v185 = v183;
    }
    if (v185)
    {
      long long v186 = (char *)sub_1000DA54C((uint64_t)v6, v185);
      unint64_t v181 = *(double **)a2;
      int v171 = *(double **)(a2 + 8);
    }
    else
    {
      long long v186 = 0;
    }
    long long v187 = &v186[8 * v182];
    long long v131 = &v186[8 * v185];
    *(void *)long long v187 = v254;
    unint64_t v180 = (double *)(v187 + 8);
    while (v171 != v181)
    {
      uint64_t v188 = *((void *)v171-- - 1);
      *((void *)v187 - 1) = v188;
      v187 -= 8;
    }
    *(void *)a2 = v187;
    *(void *)(a2 + 8) = v180;
    *(void *)(a2 + 16) = v131;
    if (v181)
    {
      operator delete(v181);
      long long v131 = *v6;
    }
  }
  else
  {
    *(void *)int v171 = v254;
    unint64_t v180 = v171 + 1;
  }
  *(void *)(a2 + 8) = v180;
  if (v180 >= (double *)v131)
  {
    unint64_t v190 = *(double **)a2;
    uint64_t v191 = ((uint64_t)v180 - *(void *)a2) >> 3;
    unint64_t v192 = v191 + 1;
    if ((unint64_t)(v191 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v193 = v131 - (char *)v190;
    if (v193 >> 2 > v192) {
      unint64_t v192 = v193 >> 2;
    }
    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v194 = v192;
    }
    if (v194)
    {
      int v195 = (char *)sub_1000DA54C((uint64_t)v6, v194);
      unint64_t v190 = *(double **)a2;
      unint64_t v180 = *(double **)(a2 + 8);
    }
    else
    {
      int v195 = 0;
    }
    double v196 = &v195[8 * v191];
    long long v131 = &v195[8 * v194];
    *(void *)double v196 = v259;
    int v189 = (double *)(v196 + 8);
    while (v180 != v190)
    {
      uint64_t v197 = *((void *)v180-- - 1);
      *((void *)v196 - 1) = v197;
      v196 -= 8;
    }
    *(void *)a2 = v196;
    *(void *)(a2 + 8) = v189;
    *(void *)(a2 + 16) = v131;
    if (v190)
    {
      operator delete(v190);
      long long v131 = *v6;
    }
  }
  else
  {
    *(void *)unint64_t v180 = v259;
    int v189 = v180 + 1;
  }
  *(void *)(a2 + 8) = v189;
  if (v189 >= (double *)v131)
  {
    long long v199 = *(double **)a2;
    uint64_t v200 = ((uint64_t)v189 - *(void *)a2) >> 3;
    unint64_t v201 = v200 + 1;
    if ((unint64_t)(v200 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v202 = v131 - (char *)v199;
    if (v202 >> 2 > v201) {
      unint64_t v201 = v202 >> 2;
    }
    if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v203 = v201;
    }
    if (v203)
    {
      long long v204 = (char *)sub_1000DA54C((uint64_t)v6, v203);
      long long v199 = *(double **)a2;
      int v189 = *(double **)(a2 + 8);
    }
    else
    {
      long long v204 = 0;
    }
    long long v205 = &v204[8 * v200];
    long long v131 = &v204[8 * v203];
    *(void *)long long v205 = *((void *)&v259 + 1);
    long long v198 = (double *)(v205 + 8);
    while (v189 != v199)
    {
      uint64_t v206 = *((void *)v189-- - 1);
      *((void *)v205 - 1) = v206;
      v205 -= 8;
    }
    *(void *)a2 = v205;
    *(void *)(a2 + 8) = v198;
    *(void *)(a2 + 16) = v131;
    if (v199)
    {
      operator delete(v199);
      long long v131 = *v6;
    }
  }
  else
  {
    *int v189 = *((double *)&v259 + 1);
    long long v198 = v189 + 1;
  }
  *(void *)(a2 + 8) = v198;
  if (v198 >= (double *)v131)
  {
    uint64_t v208 = *(double **)a2;
    uint64_t v209 = ((uint64_t)v198 - *(void *)a2) >> 3;
    unint64_t v210 = v209 + 1;
    if ((unint64_t)(v209 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v211 = v131 - (char *)v208;
    if (v211 >> 2 > v210) {
      unint64_t v210 = v211 >> 2;
    }
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v212 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v212 = v210;
    }
    if (v212)
    {
      long long v213 = (char *)sub_1000DA54C((uint64_t)v6, v212);
      uint64_t v208 = *(double **)a2;
      long long v198 = *(double **)(a2 + 8);
    }
    else
    {
      long long v213 = 0;
    }
    long long v214 = &v213[8 * v209];
    long long v131 = &v213[8 * v212];
    *(void *)long long v214 = v260;
    long long v207 = (double *)(v214 + 8);
    while (v198 != v208)
    {
      uint64_t v215 = *((void *)v198-- - 1);
      *((void *)v214 - 1) = v215;
      v214 -= 8;
    }
    *(void *)a2 = v214;
    *(void *)(a2 + 8) = v207;
    *(void *)(a2 + 16) = v131;
    if (v208)
    {
      operator delete(v208);
      long long v131 = *v6;
    }
  }
  else
  {
    *(void *)long long v198 = v260;
    long long v207 = v198 + 1;
  }
  *(void *)(a2 + 8) = v207;
  if (v207 >= (double *)v131)
  {
    long long v217 = *(double **)a2;
    uint64_t v218 = ((uint64_t)v207 - *(void *)a2) >> 3;
    unint64_t v219 = v218 + 1;
    if ((unint64_t)(v218 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v220 = v131 - (char *)v217;
    if (v220 >> 2 > v219) {
      unint64_t v219 = v220 >> 2;
    }
    if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v221 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v221 = v219;
    }
    if (v221)
    {
      uint64_t v222 = (char *)sub_1000DA54C((uint64_t)v6, v221);
      long long v217 = *(double **)a2;
      long long v207 = *(double **)(a2 + 8);
    }
    else
    {
      uint64_t v222 = 0;
    }
    long long v223 = &v222[8 * v218];
    long long v131 = &v222[8 * v221];
    *(void *)long long v223 = 0x3FF0000000000000;
    long long v216 = (double *)(v223 + 8);
    while (v207 != v217)
    {
      uint64_t v224 = *((void *)v207-- - 1);
      *((void *)v223 - 1) = v224;
      v223 -= 8;
    }
    *(void *)a2 = v223;
    *(void *)(a2 + 8) = v216;
    *(void *)(a2 + 16) = v131;
    if (v217)
    {
      operator delete(v217);
      long long v131 = *v6;
    }
  }
  else
  {
    *long long v207 = 1.0;
    long long v216 = v207 + 1;
  }
  *(void *)(a2 + 8) = v216;
  if (v216 >= (double *)v131)
  {
    long long v226 = *(double **)a2;
    uint64_t v227 = ((uint64_t)v216 - *(void *)a2) >> 3;
    unint64_t v228 = v227 + 1;
    if ((unint64_t)(v227 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v229 = v131 - (char *)v226;
    if (v229 >> 2 > v228) {
      unint64_t v228 = v229 >> 2;
    }
    if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v230 = v228;
    }
    if (v230)
    {
      long long v231 = (char *)sub_1000DA54C((uint64_t)v6, v230);
      long long v226 = *(double **)a2;
      long long v216 = *(double **)(a2 + 8);
    }
    else
    {
      long long v231 = 0;
    }
    long long v232 = &v231[8 * v227];
    long long v131 = &v231[8 * v230];
    *(void *)long long v232 = *(void *)(a1 + 1944);
    long long v225 = (double *)(v232 + 8);
    while (v216 != v226)
    {
      uint64_t v233 = *((void *)v216-- - 1);
      *((void *)v232 - 1) = v233;
      v232 -= 8;
    }
    *(void *)a2 = v232;
    *(void *)(a2 + 8) = v225;
    *(void *)(a2 + 16) = v131;
    if (v226)
    {
      operator delete(v226);
      long long v131 = *v6;
    }
  }
  else
  {
    double *v216 = *(double *)(a1 + 1944);
    long long v225 = v216 + 1;
  }
  *(void *)(a2 + 8) = v225;
  if (v225 >= (double *)v131)
  {
    long long v235 = *(double **)a2;
    uint64_t v236 = ((uint64_t)v225 - *(void *)a2) >> 3;
    unint64_t v237 = v236 + 1;
    if ((unint64_t)(v236 + 1) >> 61) {
      goto LABEL_407;
    }
    uint64_t v238 = v131 - (char *)v235;
    if (v238 >> 2 > v237) {
      unint64_t v237 = v238 >> 2;
    }
    if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v239 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v239 = v237;
    }
    if (v239)
    {
      long long v240 = (char *)sub_1000DA54C((uint64_t)v6, v239);
      long long v235 = *(double **)a2;
      long long v225 = *(double **)(a2 + 8);
    }
    else
    {
      long long v240 = 0;
    }
    long long v241 = &v240[8 * v236];
    long long v131 = &v240[8 * v239];
    *(void *)long long v241 = *(void *)(a1 + 1960);
    long long v234 = (double *)(v241 + 8);
    while (v225 != v235)
    {
      uint64_t v242 = *((void *)v225-- - 1);
      *((void *)v241 - 1) = v242;
      v241 -= 8;
    }
    *(void *)a2 = v241;
    *(void *)(a2 + 8) = v234;
    *(void *)(a2 + 16) = v131;
    if (v235)
    {
      operator delete(v235);
      long long v131 = *v6;
    }
  }
  else
  {
    double *v225 = *(double *)(a1 + 1960);
    long long v234 = v225 + 1;
  }
  *(void *)(a2 + 8) = v234;
  if (v234 < (double *)v131)
  {
    *long long v234 = *(double *)(a1 + 1968);
    long long v243 = v234 + 1;
    goto LABEL_406;
  }
  long long v244 = *(double **)a2;
  uint64_t v245 = ((uint64_t)v234 - *(void *)a2) >> 3;
  unint64_t v246 = v245 + 1;
  if ((unint64_t)(v245 + 1) >> 61) {
LABEL_407:
  }
    sub_1001D7FD4();
  uint64_t v247 = v131 - (char *)v244;
  if (v247 >> 2 > v246) {
    unint64_t v246 = v247 >> 2;
  }
  if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v248 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v248 = v246;
  }
  if (v248)
  {
    long long v249 = (char *)sub_1000DA54C((uint64_t)v6, v248);
    long long v244 = *(double **)a2;
    long long v234 = *(double **)(a2 + 8);
  }
  else
  {
    long long v249 = 0;
  }
  int v250 = &v249[8 * v245];
  BOOL v251 = &v249[8 * v248];
  *(void *)int v250 = *(void *)(a1 + 1968);
  long long v243 = v250 + 8;
  while (v234 != v244)
  {
    uint64_t v252 = *((void *)v234-- - 1);
    *((void *)v250 - 1) = v252;
    v250 -= 8;
  }
  *(void *)a2 = v250;
  *(void *)(a2 + 8) = v243;
  *(void *)(a2 + 16) = v251;
  if (v244) {
    operator delete(v244);
  }
LABEL_406:
  *(void *)(a2 + 8) = v243;
  return 1;
}

void sub_10066CDBC(uint64_t a1, uint64_t a2)
{
  int v4 = sub_100D33CD4(a2);
  unint64_t v5 = (BOOL *)(a1 + 5080);
  if (*(unsigned __int8 *)(a1 + 5080) != v4)
  {
    BOOL *v5 = v4;
    id v6 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLSimulationController"];
    BOOL v7 = *v5 || *(unsigned char *)(a1 + 1603) != 0;
    [v6 isInEmegencyState:v7];
  }
  uint64_t v8 = *(void *)(a1 + 288);
  long long v13 = *(_OWORD *)a2;
  int v14 = *(_DWORD *)(a2 + 16);
  (*(void (**)(uint64_t, long long *))(*(void *)v8 + 272))(v8, &v13);
  BOOL *v5 = sub_100D33CD4(a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  uint64_t v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    BOOL v10 = *v5;
    *(_DWORD *)std::string buf = 67240192;
    BOOL v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,LocCtrlOnEmergencyStateChange,isEmergency,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    BOOL v11 = *v5;
    int v15 = 67240192;
    BOOL v16 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onEmergencyStateChange(CLEmergencyState)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_10066D200()
{
}

void sub_10066D24C()
{
}

void sub_10066D270(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_1006B766C(a1, "controller", a2);
  *uint64_t v3 = off_1022C14B8;
  sub_101171D90((uint64_t)(v3 + 15));
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 160) = -1;
  *(unsigned char *)(a1 + 216) = 1;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  sub_10099B5F0(a1 + 352);
  *(void *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 664) = 16842752;
  *(void *)(a1 + 668) = 0;
  *(_DWORD *)(a1 + 676) = -1;
  *(void *)(a1 + 680) = 0;
  *(_WORD *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 706) = 0;
  *(void *)(a1 + 712) = 0;
  *(unsigned char *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 752) = 0;
  *(_WORD *)(a1 + 760) = 0;
  sub_101171D90(a1 + 768);
  *(_DWORD *)(a1 + 808) = 0x1000000;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 816) = _Q1;
  *(unsigned char *)(a1 + 832) = 0;
  *(void *)(a1 + 840) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 848) = 0;
  *(void *)(a1 + 856) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 880) = 0;
  *(void *)(a1 + 888) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 896) = 0;
  *(_DWORD *)(v9 + 131) = 0;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 162) = 0u;
  *(void *)(a1 + 952) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 960) = _Q1;
  *(_OWORD *)(a1 + 976) = _Q1;
  *(_DWORD *)(a1 + 992) = 0xFFFF;
  *(void *)(v9 + 236) = 0;
  *(void *)(v9 + 228) = 0;
  *(_OWORD *)(a1 + 1012) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 1028) = _Q1;
  *(_OWORD *)(a1 + 1044) = _Q1;
  *(_OWORD *)(a1 + 1060) = _Q1;
  *(_DWORD *)(a1 + 1076) = 0;
  *(void *)(a1 + 1080) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1104) = 0;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1108) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1116) = 0x7FFFFFFF;
  *(void *)(a1 + 1136) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1128) = 0;
  *(unsigned char *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1148) = 0xFFFF;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1168) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 1184) = _Q1;
  *(_OWORD *)(a1 + 1200) = _Q1;
  long long v35 = _Q1;
  *(_OWORD *)(a1 + 1216) = _Q1;
  *(_DWORD *)(a1 + 1232) = 0;
  *(void *)(a1 + 1236) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1260) = 0;
  *(void *)(a1 + 1244) = 0;
  *(void *)(a1 + 1252) = 0;
  *(void *)(a1 + 1264) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1272) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 1300) = 0;
  *(void *)(a1 + 1284) = 0;
  *(void *)(a1 + 1292) = 0;
  *(void *)(a1 + 1276) = 0;
  sub_100398458(a1 + 1304);
  *(unsigned char *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1588) = 0u;
  *(void *)(a1 + 1944) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 1952) = 0;
  *(void *)(a1 + 1960) = 0;
  *(void *)(a1 + 1968) = 0xBFF0000000000000;
  *(void *)(a1 + 1984) = 0;
  *(void *)(a1 + 1976) = 0;
  *(void *)(a1 + 1992) = 0xBFF0000000000000;
  sub_1000DB3D4(a1 + 2000);
  sub_1000DB3D4(a1 + 3528);
  *(_OWORD *)(a1 + 5056) = v35;
  *(void *)(a1 + 5072) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 5080) = 0;
  *(_OWORD *)(a1 + 5088) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_WORD *)(a1 + 5120) = 1;
  *(_DWORD *)std::string buf = 21;
  *(_DWORD *)(a1 + 5124) = 21;
  *(_DWORD *)(a1 + 5128) = sub_10016A9AC((int *)buf);
  *(unsigned char *)(a1 + 5144) = 0;
  *(unsigned char *)(a1 + 5152) = 0;
  *(unsigned char *)(a1 + 5160) = 0;
  *(unsigned char *)(a1 + 5164) = 0;
  *(unsigned char *)(a1 + 5168) = 0;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_WORD *)(a1 + 5192) = 0;
  sub_1011FE8C0();
  uint64_t v10 = sub_10016BA10();
  sub_10016BC44((uint64_t)buf);
  sub_10016BE74(v10, (uint64_t *)buf);
  id v11 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 5136) = v11;
  if (v11)
  {
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_100173A30;
    v36[3] = &unk_1022A3020;
    v36[4] = a1;
    [v11 setHandler:v36];
    [*(id *)(a1 + 5136) setNextFireDelay:0.0 interval:1.0];
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = sub_10016BA10();
      LODWORD(context.version) = 1;
      double v14 = sub_10016BA54(v13, &context);
      uint64_t v15 = sub_10016BA10();
      double v16 = sub_10018202C(v15);
      *(_DWORD *)std::string buf = 134349568;
      *(double *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = 0x3FF0000000000000;
      __int16 v40 = 2050;
      double v41 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "LocationController,#time,starting heartbeat timer now,mct,%{public}.3f,interval_sec,%{public}.1f,propagation_us,%{public}.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      double v17 = sub_1005B5034();
      uint64_t v18 = sub_10016BA10();
      double v19 = sub_10018202C(v18);
      LODWORD(context.version) = 134349568;
      *(double *)((char *)&context.version + 4) = v17;
      WORD2(context.info) = 2050;
      *(void **)((char *)&context.info + 6) = (void *)0x3FF0000000000000;
      HIWORD(context.retain) = 2050;
      *(double *)&context.release = v19;
      unint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)", "%s\n", v20);
LABEL_46:
      if (v20 != buf) {
        free(v20);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    __n128 v21 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "LocationController,#time,failed to allocate heartbeat timer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      LOWORD(context.version) = 0;
      unint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)", "%s\n", v20);
      goto LABEL_46;
    }
  }
  sub_1000C7F88(buf);
  char v22 = *(unsigned char *)(a1 + 296);
  LOBYTE(context.version) = 0;
  int v23 = sub_1000D2988(*(uint64_t *)buf, "LocationControllerFilterUsageIsLegacy", (BOOL *)&context);
  char version = context.version;
  if (!v23) {
    char version = v22;
  }
  *(unsigned char *)(a1 + 296) = version;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  uint64_t v25 = *(void *)buf;
  int v26 = sub_1005B528C();
  LOBYTE(context.version) = 0;
  int v27 = sub_1000D2988(v25, "EnableLocationControllerRecorder", (BOOL *)&context);
  int v28 = LOBYTE(context.version) != 0;
  if (!v27) {
    int v28 = v26;
  }
  *(unsigned char *)(a1 + 5121) = v28;
  if (*(void *)&buf[8])
  {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    int v28 = *(unsigned __int8 *)(a1 + 5121);
  }
  if (v28)
  {
    uint64_t v29 = sub_10016AB88();
    sub_1005B5290(v29);
    uint64_t v30 = sub_10016AB88();
    sub_1005B5794(v30);
    context.char version = 0x4024000000000000;
    sub_10067119C(a1, (double *)&context.version);
    uint64_t v31 = sub_10016AB88();
    sub_1005B6144(v31, *(unsigned __int8 *)(a1 + 296));
    sub_1000C7F88(buf);
    LODWORD(v37.version) = 0;
    if (sub_10006EF84(*(uint64_t *)buf, "LocationControllerClientListRecordIntervalSec", &v37)) {
      int v32 = v37.version;
    }
    else {
      int v32 = -1;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v32 >= 1)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      __int16 v33 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "LocationController,enable client list recording interval,%d,sec", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        LODWORD(v37.version) = 67109120;
        HIDWORD(v37.version) = v32;
        unsigned int v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)", "%s\n", v34);
        if (v34 != buf) {
          free(v34);
        }
      }
      *(_DWORD *)(a1 + 5160) = v32;
      *(unsigned char *)(a1 + 5164) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 296)) {
    operator new();
  }
  operator new();
}

void sub_100670AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_100673190(a11);
  sub_1006817E4(a12);
  uint64_t v45 = *(void *)(v41 + 1592);
  *(void *)(v41 + 1592) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *(void *)(v41 + 1584);
  *(void *)(v41 + 1584) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *(void *)(v41 + 1576);
  *(void *)(v41 + 1576) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = *(void *)(v41 + 1568);
  *(void *)(v41 + 1568) = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = *(void *)(v41 + 1560);
  *(void *)(v41 + 1560) = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  uint64_t v50 = *(void *)(v41 + 1552);
  *(void *)(v41 + 1552) = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  uint64_t v51 = *v42;
  uint64_t *v42 = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  sub_10067A6F8(a18, 0);
  uint64_t v52 = *a13;
  *a13 = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_10099CA34(a14);
  sub_100681E10(a17, 0);
  sub_100681DC0(a19, 0);
  uint64_t v53 = *(void *)(v41 + 288);
  *(void *)(v41 + 288) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  sub_100681D3C(a20, *(void **)(v41 + 272));
  sub_100681C7C(a15, *(void **)(v41 + 248));
  uint64_t v54 = *(void *)(v41 + 208);
  *(void *)(v41 + 208) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  uint64_t v55 = *(void *)(v41 + 200);
  *(void *)(v41 + 200) = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = *(void *)(v41 + 192);
  *(void *)(v41 + 192) = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v57 = *(void *)(v41 + 184);
  *(void *)(v41 + 184) = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  uint64_t v58 = *(void *)(v41 + 176);
  *(void *)(v41 + 176) = 0;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  uint64_t v59 = *v43;
  uint64_t *v43 = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  sub_1006B7BEC(v41);
  _Unwind_Resume(a1);
}

void sub_10067119C(uint64_t a1, double *a2)
{
  if (*a2 >= 0.0)
  {
    uint64_t v4 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    double v5 = sub_10016BA54(v4, buf);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    id v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      double v7 = v5 + *a2;
      *(_DWORD *)std::string buf = 134349312;
      double v10 = v7;
      __int16 v11 = 2050;
      double v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#locctl,#rec,requested client list record at time,mct,%{public}.3f,now,%{public}.3f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::recordClientListWithDelaySec(const CFTimeInterval &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(double *)(a1 + 5144) = v5 + *a2;
    *(unsigned char *)(a1 + 5152) = 1;
  }
}

void sub_1006713BC(__int32 a1, int *a2, char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100676160(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100671588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006715A8(__int32 a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100676BBC(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100671774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100671794(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10067F6F0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100671960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100671980(__int32 a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100676EB8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100671B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100671B6C(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onBluetoothNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onBluetoothNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006770F8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100671D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100671D58(int a1, int *a2, char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006771E8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100671F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100671F44(int a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100673DA4(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100672110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100672130(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100673ED8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006722FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10067231C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100673648(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006724D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006724F8(int a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100673FA4(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006726C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006726E4(__int32 a1, int *a2, const __CFDictionary **a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006736D8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006728B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006728D0(const void *a1)
{
  if (objc_opt_class())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1006731D0, kRegulatoryDomainUpdateNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  uint64_t v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v4 = (const __CFString *)off_10241D218[0]();
  CFNotificationCenterAddObserver(v3, a1, (CFNotificationCallback)sub_10067340C, v4, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  double v5 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v6 = (const __CFString *)off_10241D220();

  CFNotificationCenterAddObserver(v5, a1, (CFNotificationCallback)sub_10067340C, v6, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_1006729B4(uint64_t a1)
{
}

void sub_1006729BC(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  id v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v9 = 0;
    __int16 v10 = 2082;
    char v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"catch-all location unavailable timer fired\"}", buf, 0x12u);
  }
  [*(id *)(a1 + 656) setNextFireDelay:1.79769313e308];
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    CFStringRef v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Location unavailable timer fired,required granularity is none,ignoring", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_20;
      }
      goto LABEL_36;
    }
  }
  else if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLDaemonStatus"), "syncgetIsSleeping"))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,Location unavailable fired while sleeping", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_20:
        double v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onLocationUnavailableTimer()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_36:
      dispatch_once(&qword_102419380, &stru_1022C17A0);
      goto LABEL_20;
    }
  }
  else
  {
    *(_DWORD *)std::string buf = 9;
    sub_10067B488(a1, (int *)buf, 1);
    *(_DWORD *)std::string buf = 2;
    if (sub_1001072EC(a1, (int *)buf, 1)
      || (*(_DWORD *)std::string buf = 1, sub_1001072EC(a1, (int *)buf, 1))
      || (*(_DWORD *)std::string buf = 0, sub_1001072EC(a1, (int *)buf, 1)))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      CFStringRef v6 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Location unavailable timer fired, restart with fine granularity as client still wants location", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onLocationUnavailableTimer()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      buf[0] = 1;
      sub_10014FF84(a1, (char *)buf);
    }
  }
}

void sub_100672E90(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    CFStringRef v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LocationController,error fetching visits\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
    }
    double v5 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LocationController,error fetching visits", "{\"msg%{public}.0s\":\"LocationController,error fetching visits\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [objc_alloc((Class)CLVisit) initWithVisit:[a2 firstObject]];
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "LocationController,fetched most recent visit", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_10066AE68(v6, v7);
  }
}

uint64_t sub_100673190(uint64_t a1)
{
  sub_1000F5BB0(a1 + 568, *(void **)(a1 + 576));
  id v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1006731D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    __int16 v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onRegulatoryDomainUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      __n128 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onRegulatoryDomainUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100681888;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  _OWORD v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1006733EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10067340C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C1760);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    __int16 v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onPairingStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C1760);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      __n128 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onPairingStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1006818BC;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  _OWORD v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100673628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100673648(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  (*(void (**)(void, int *, uint64_t))(**(void **)(a1 + 288) + 88))(*(void *)(a1 + 288), a3, a4);
  uint64_t v7 = *(void *)(a1 + 312);
  if (v7)
  {
    sub_100EDECE8(v7, a3, a4);
  }
}

void sub_1006736D8(uint64_t a1, __int32 a2, int *a3, const __CFDictionary **a4)
{
  v25[0].i32[2] = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)&v25[0].i64[1] + 4);
  sub_10016BE74(v7, (uint64_t *)((char *)&v25[0].i64[1] + 4));
  v25[0].i32[3] = 11;
  v25[0].i32[0] = 11;
  v25[0].i32[1] = sub_10016A9AC(&v25[0].i32[3]);
  uint64_t v8 = sub_10016AB88();
  v25[0].i32[3] = 4;
  sub_1005BD048(v8, &v25[0].u32[3], v25, (int *)(a1 + 5124), &v25[0].i32[2], a3);
  int v9 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v9, kCTRegistrationStatusChangedNotification))
  {
    if ((objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLTelephonyService"), "syncgetIsRegisteredOnCell") & 1) == 0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      __int16 v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        v25[0].i16[6] = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "device lost registration - no longer has active cell", &v25[0].u8[12], 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero((char *)&v25[0].u64[1] + 4, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        *(_WORD *)uint64_t v24 = 0;
        __int16 v20 = (int32x4_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v20->i8);
        if (v20 != (int32x4_t *)((char *)&v25[0].u64[1] + 4)) {
          free(v20);
        }
      }
      (*(void (**)(void, int *, const __CFDictionary **))(**(void **)(a1 + 288) + 64))(*(void *)(a1 + 288), a3, a4);
    }
  }
  else
  {
    int v11 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v11, kCTCallStatusChangeNotification))
    {
      char v23 = 1;
      unsigned int v12 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLTelephonyService"] syncgetActiveCall:&v23];
      if (v23) {
        unsigned int v13 = v12;
      }
      else {
        unsigned int v13 = 0;
      }
      if (v13 == 1)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        __int16 v14 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          v25[0].i16[6] = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "device on active call - no longer has active cell", &v25[0].u8[12], 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero((char *)&v25[0].u64[1] + 4, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          *(_WORD *)uint64_t v24 = 0;
          __n128 v21 = (int32x4_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v21->i8);
          if (v21 != (int32x4_t *)((char *)&v25[0].u64[1] + 4)) {
            free(v21);
          }
        }
        (*(void (**)(void, int *, const __CFDictionary **))(**(void **)(a1 + 288) + 64))(*(void *)(a1 + 288), a3, a4);
      }
    }
    else
    {
      char v15 = (const void *)sub_1000FA17C(a3);
      if (CFEqual(v15, @"kStewieStatus"))
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        __int16 v16 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          v25[0].i16[6] = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "device stewie status", &v25[0].u8[12], 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero((char *)&v25[0].u64[1] + 4, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          *(_WORD *)uint64_t v24 = 0;
          __int16 v22 = (int32x4_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v22->i8);
          if (v22 != (int32x4_t *)((char *)&v25[0].u64[1] + 4)) {
            free(v22);
          }
        }
        CFDictionaryRef v17 = *a4;
        if (*a4)
        {
          v24[0] = 0;
          sub_10013FA80((int)&v25[0].i32[3], v17);
          if (sub_1000D29FC((uint64_t)&v25[0].i64[1] + 4, @"kStewieUseCaseActiveKey", v24)
            && v24[0] != *(unsigned __int8 *)(a1 + 1603))
          {
            *(unsigned char *)(a1 + 1603) = v24[0];
            id v18 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLSimulationController"];
            if (*(unsigned char *)(a1 + 5080)) {
              BOOL v19 = 1;
            }
            else {
              BOOL v19 = *(unsigned char *)(a1 + 1603) != 0;
            }
            [v18 isInEmegencyState:v19];
          }
          sub_10013F3C4((char *)&v25[0].u64[1] + 4);
        }
      }
    }
  }
}

void sub_100673CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100673CF4(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_10016BA10();
  sub_10016BC44((uint64_t)v7);
  sub_10016BE74(v4, v7[0].i64);
  int v8 = 26;
  v7[0].i32[0] = 26;
  v7[0].i32[1] = sub_10016A9AC(&v8);
  uint64_t v5 = sub_10016AB88();
  sub_1005BFA64(v5, v7, (int *)(a1 + 5124), a2);
  uint64_t result = *(void *)(a1 + 288);
  if (result) {
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)result + 80))(result, a2);
  }
  return result;
}

void sub_100673DA4(uint64_t a1, int a2, int *a3, int *a4)
{
  int v14 = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)v15);
  sub_10016BE74(v7, v15[0].i64);
  int v16 = 8;
  v15[0].i32[0] = 8;
  v15[0].i32[1] = sub_10016A9AC(&v16);
  uint64_t v8 = sub_10016AB88();
  int v16 = 4;
  sub_1005BBAF0(v8, (unsigned int *)&v16, v15, (int *)(a1 + 5124), &v14, a3, (uint64_t)a4);
  uint64_t v9 = *(void *)(a1 + 288);
  if (v9) {
    (*(void (**)(uint64_t, int *, int *))(*(void *)v9 + 16))(v9, a3, a4);
  }
  __int16 v10 = *(unsigned __int8 **)(a1 + 312);
  if (v10) {
    sub_100EDE888(v10, a3, a4);
  }
  sub_100396168(a1 + 768, (uint64_t)a3, a4);
  sub_1011FFF10(a1 + 5200, a3, a4);
  uint64_t v11 = *(void *)(a1 + 304);
  if (v11)
  {
    uint64_t v12 = sub_10016BA10();
    int v16 = 1;
    double v13 = sub_10016BA54(v12, &v16);
    sub_10100BE14(v11, a3, a4, v13);
  }
}

uint64_t sub_100673ED8(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v10 = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)v11);
  sub_10016BE74(v7, v11[0].i64);
  int v12 = 9;
  v11[0].i32[0] = 9;
  v11[0].i32[1] = sub_10016A9AC(&v12);
  uint64_t v8 = sub_10016AB88();
  int v12 = 4;
  sub_1005BAD24(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  return (*(uint64_t (**)(void, int *, uint64_t))(**(void **)(a1 + 288) + 24))(*(void *)(a1 + 288), a3, a4);
}

uint64_t sub_100673FA4(uint64_t a1, int a2, int *a3, int *a4)
{
  int v10 = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)v11);
  sub_10016BE74(v7, v11[0].i64);
  int v12 = 10;
  v11[0].i32[0] = 10;
  v11[0].i32[1] = sub_10016A9AC(&v12);
  uint64_t v8 = sub_10016AB88();
  int v12 = 4;
  sub_1005BC570(v8, (unsigned int *)&v12, v11, (int *)(a1 + 5124), &v10, a3, a4);
  return (*(uint64_t (**)(void, int *, int *))(**(void **)(a1 + 288) + 56))(*(void *)(a1 + 288), a3, a4);
}

uint64_t sub_100674070(uint64_t a1)
{
  *(void *)a1 = off_1022C14B8;
  if (*(unsigned char *)(a1 + 1600)) {
    [*(id *)(*(void *)(a1 + 1544) + 16) unregister:*(void *)(*(void *)(a1 + 1544) + 8) forNotification:1];
  }
  if (*(unsigned char *)(a1 + 1601)) {
    [*(id *)(*(void *)(a1 + 1544) + 16) unregister:*(void *)(*(void *)(a1 + 1544) + 8) forNotification:2];
  }
  uint64_t v2 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1544) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1576);
  if (v3)
  {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:4];
    [*(id *)(*(void *)(a1 + 1576) + 16) unregister:*(void *)(*(void *)(a1 + 1576) + 8) forNotification:9];
    [*(id *)(*(void *)(a1 + 1576) + 16) unregister:*(void *)(*(void *)(a1 + 1576) + 8) forNotification:3];
    [*(id *)(*(void *)(a1 + 1576) + 16) unregister:*(void *)(*(void *)(a1 + 1576) + 8) forNotification:1];
    uint64_t v4 = *(void *)(a1 + 1576);
    *(void *)(a1 + 1576) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)(a1 + 1552))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "LocationController,unregistered from motion state observer", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLLocationController::~CLLocationController()", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    [*(id *)(*(void *)(a1 + 1552) + 16) unregister:*(void *)(*(void *)(a1 + 1552) + 8) forNotification:0];
    uint64_t v6 = *(void *)(a1 + 1552);
    *(void *)(a1 + 1552) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  if (*(void *)(a1 + 1560))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "LocationController,unregistered from motion state mediator", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLLocationController::~CLLocationController()", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    [*(id *)(*(void *)(a1 + 1560) + 16) unregister:*(void *)(*(void *)(a1 + 1560) + 8) forNotification:0];
    [*(id *)(*(void *)(a1 + 1560) + 16) unregister:*(void *)(*(void *)(a1 + 1560) + 8) forNotification:2];
    uint64_t v8 = *(void *)(a1 + 1560);
    *(void *)(a1 + 1560) = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  uint64_t v9 = *(void *)(a1 + 1568);
  if (v9)
  {
    [*(id *)(v9 + 16) unregister:*(void *)(v9 + 8) forNotification:0];
    uint64_t v10 = *(void *)(a1 + 1568);
    *(void *)(a1 + 1568) = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  uint64_t v11 = *(void *)(a1 + 1584);
  if (v11)
  {
    sub_1000B0164(buf, kCTRegistrationStatusChangedNotification);
    [*(id *)(v11 + 16) unregister:*(void *)(v11 + 8) forNotification:sub_1000F1244(buf)];
    uint64_t v12 = *(void *)(a1 + 1584);
    sub_1000B0164(buf, kCTCallStatusChangeNotification);
    [*(id *)(v12 + 16) unregister:*(void *)(v12 + 8) forNotification:sub_1000F1244(buf)];
    uint64_t v13 = *(void *)(a1 + 1584);
    sub_1000B0164(buf, @"kStewieStatus");
    [*(id *)(v13 + 16) unregister:*(void *)(v13 + 8) forNotification:sub_1000F1244(buf)];
    uint64_t v14 = *(void *)(a1 + 1584);
    *(void *)(a1 + 1584) = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  uint64_t v15 = *(void *)(a1 + 168);
  if (v15)
  {
    [*(id *)(v15 + 16) unregister:*(void *)(v15 + 8) forNotification:2];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:3];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:6];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:8];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:15];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:7];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:13];
    [*(id *)(*(void *)(a1 + 168) + 16) unregister:*(void *)(*(void *)(a1 + 168) + 8) forNotification:10];
    uint64_t v16 = *(void *)(a1 + 168);
    *(void *)(a1 + 168) = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  if (objc_opt_class())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, kRegulatoryDomainUpdateNotification, 0);
  }
  id v18 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v19 = (const __CFString *)off_10241D218[0]();
  CFNotificationCenterRemoveObserver(v18, (const void *)a1, v19, 0);
  __int16 v20 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v21 = (const __CFString *)off_10241D220();
  CFNotificationCenterRemoveObserver(v20, (const void *)a1, v21, 0);
  __int16 v22 = *(void **)(a1 + 5112);
  if (v22)
  {

    *(void *)(a1 + 5112) = 0;
  }
  char v23 = *(void **)(a1 + 5184);
  if (v23 && *(void *)(a1 + 5176))
  {
    [v23 stopLeechingVisitsForClient:];
    char v23 = *(void **)(a1 + 5184);
  }

  *(void *)(a1 + 5184) = 0;
  *(void *)(a1 + 5176) = 0;
  sub_1000F5BB0(a1 + 5768, *(void **)(a1 + 5776));
  uint64_t v24 = *(void **)(a1 + 5544);
  if (v24)
  {
    *(void *)(a1 + 5552) = v24;
    operator delete(v24);
  }
  sub_1006817E4(a1 + 2000);
  uint64_t v25 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a1 + 1584);
  *(void *)(a1 + 1584) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void *)(a1 + 1576);
  *(void *)(a1 + 1576) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(a1 + 1568);
  *(void *)(a1 + 1568) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void *)(a1 + 1552);
  *(void *)(a1 + 1552) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1544) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  sub_10067A6F8((uint64_t *)(a1 + 712), 0);
  uint64_t v32 = *(void *)(a1 + 632);
  *(void *)(a1 + 632) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  sub_10099CA34(a1 + 352);
  sub_100681E10((uint64_t *)(a1 + 312), 0);
  sub_100681DC0((uint64_t *)(a1 + 304), 0);
  uint64_t v33 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  sub_100681D3C(a1 + 264, *(void **)(a1 + 272));
  sub_100681C7C(a1 + 240, *(void **)(a1 + 248));
  uint64_t v34 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  sub_1006B7BEC(a1);
  return a1;
}

void sub_100674A84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100674A94(uint64_t a1)
{
  sub_100674070(a1);

  operator delete();
}

uint64_t **sub_100674ACC(uint64_t **result, int *a2)
{
  if (*a2 == 15 || *a2 == 0)
  {
    uint64_t v3 = (uint64_t)result;
    if (*((_DWORD *)result + 82))
    {
      *(void *)&long long v9 = result + 41;
      uint64_t result = sub_100151D38(result + 30, (int *)result + 82, (uint64_t)&unk_101D0B290, (_DWORD **)&v9);
      if (*((unsigned char *)result + 903))
      {
        __asm { FMOV            V0.2D, #-1.0 }
        long long v9 = _Q0;
        __int16 v10 = 0;
        int v12 = 0;
        int v11 = sub_1001266F8(v3, *a2);
        uint64_t v13 = (_DWORD *)(v3 + 328);
        sub_1000FEE0C((uint64_t **)(v3 + 264), (int *)(v3 + 328), (uint64_t)&unk_101D0B290, &v13);
        LODWORD(v13) = 0;
        sub_10012F728();
      }
    }
  }
  return result;
}

NSDictionary *__cdecl sub_100674B98(id a1)
{
  return (NSDictionary *)&off_102397298;
}

uint64_t sub_100674C48(uint64_t a1, unsigned int *a2)
{
  sub_1006B7E64(a1);
  if (*a2 >= 3) {
    unsigned __int8 v4 = -1;
  }
  else {
    unsigned __int8 v4 = 2 - *(unsigned char *)a2;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C17A0);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v6 = *a2;
    uint64_t v7 = sub_10008A168(*a2);
    *(_DWORD *)std::string buf = 67240706;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v7;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = (char)v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLIENT:unregisterForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    unsigned int v95 = *a2;
    uint64_t v96 = sub_10008A168(*a2);
    *(_DWORD *)unint64_t v115 = 67240706;
    *(_DWORD *)&v115[4] = v95;
    *(_WORD *)&v115[8] = 2082;
    *(void *)&v115[10] = v96;
    *(_WORD *)&v115[18] = 1026;
    *(_DWORD *)&v115[20] = (char)v4;
    unint64_t v97 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v97);
    if (v97 != buf) {
      free(v97);
    }
  }
  switch(*a2)
  {
    case 0u:
    case 1u:
    case 2u:
      uint64_t v26 = (char *)(a1 + 160);
      if (*(unsigned __int8 *)(a1 + 160) != v4) {
        goto LABEL_118;
      }
      *(unsigned char *)(a1 + 160) = -1;
      *(_DWORD *)std::string buf = 0;
      if (sub_1001072EC(a1, (int *)buf, 1))
      {
        char v27 = 2;
      }
      else
      {
        *(_DWORD *)std::string buf = 1;
        if (sub_1001072EC(a1, (int *)buf, 1))
        {
          char v27 = 1;
        }
        else
        {
          *(_DWORD *)std::string buf = 2;
          if (!sub_1001072EC(a1, (int *)buf, 1))
          {
LABEL_95:
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022C17A0);
            }
            double v60 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v61 = *a2;
              int v62 = *v26;
              *(_DWORD *)std::string buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v61;
              *(_WORD *)&uint8_t buf[8] = 1026;
              *(_DWORD *)&buf[10] = v62;
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "Unregistered for notification,%{public}d,new required location granularity,%{public}d", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_1022C17A0);
              }
              unsigned int v101 = *a2;
              int v102 = *v26;
              *(_DWORD *)unint64_t v115 = 67240448;
              *(_DWORD *)&v115[4] = v101;
              *(_WORD *)&v115[8] = 1026;
              *(_DWORD *)&v115[10] = v102;
              int v103 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v103);
              if (v103 != buf) {
                free(v103);
              }
            }
            if (*v26 != v4)
            {
              sub_1001A5708(a1, (unsigned char *)(a1 + 160));
              if (v4 != 255)
              {
                if (v4 == 2)
                {
                  (*(void (**)(void))(**(void **)(a1 + 288) + 392))(*(void *)(a1 + 288));
                  if (*(unsigned char *)(a1 + 5121))
                  {
                    if (*(unsigned char *)(sub_10016AB88() + 24))
                    {
                      sub_1000C7F88(buf);
                      *(void *)unint64_t v115 = 0;
                      if (sub_1000A699C(*(uint64_t *)buf, "LocationControllerRecorderFileAgeThresholdSeconds", v115))double v63 = *(double *)v115; {
                      else
                      }
                        double v63 = 21600.0;
                      if (*(void *)&buf[8]) {
                        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
                      }
                      double v64 = sub_1005B5034();
                      double v65 = v64 - *(double *)(sub_10016AB88() + 32);
                      if (v65 > v63)
                      {
                        if (qword_102419380 != -1) {
                          dispatch_once(&qword_102419380, &stru_1022C17A0);
                        }
                        double v66 = qword_102419388;
                        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
                        {
                          double v67 = sub_1005B5034();
                          uint64_t v68 = sub_10016BA10();
                          double v69 = sub_10018202C(v68);
                          *(_DWORD *)std::string buf = 134349568;
                          *(double *)&uint8_t buf[4] = v67;
                          *(_WORD *)&unsigned char buf[12] = 2050;
                          *(double *)&buf[14] = v65;
                          *(_WORD *)&unsigned char buf[22] = 2050;
                          double v118 = v69;
                          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#locctl,#rec,refreshing the recording file,mct,%{public}.3f,seconds since last,%{public}.2f,propagation_us,%{public}.3f", buf, 0x20u);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419380 != -1) {
                            dispatch_once(&qword_102419380, &stru_1022C17A0);
                          }
                          double v105 = sub_1005B5034();
                          uint64_t v106 = sub_10016BA10();
                          double v107 = sub_10018202C(v106);
                          *(_DWORD *)unint64_t v115 = 134349568;
                          *(double *)&v115[4] = v105;
                          *(_WORD *)&v115[12] = 2050;
                          *(double *)&v115[14] = v65;
                          *(_WORD *)&v115[22] = 2050;
                          double v116 = v107;
                          unint64_t v108 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v108);
                          if (v108 != buf) {
                            free(v108);
                          }
                        }
                        uint64_t v70 = sub_10016AB88();
                        sub_1005B5064(v70);
                        uint64_t v71 = sub_10016AB88();
                        sub_1005B5290(v71);
                        uint64_t v72 = sub_10016AB88();
                        sub_1005B5794(v72);
                        *(void *)std::string buf = 0x4000000000000000;
                        sub_10067119C(a1, (double *)buf);
                      }
                    }
                  }
                }
                *(unsigned char *)(a1 + 161) = -1;
                sub_10014FF84(a1, (char *)(a1 + 160));
              }
            }
LABEL_118:
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022C17A0);
            }
            uint64_t v73 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              int v74 = *(char *)(a1 + 160);
              int v75 = *(char *)(a1 + 161);
              *(_DWORD *)std::string buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v74;
              *(_WORD *)&uint8_t buf[8] = 1026;
              *(_DWORD *)&buf[10] = v75;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "After unregister,required granularity,%{public}d,active granularity,%{public}d", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_1022C17A0);
              }
              int v98 = *(char *)(a1 + 160);
              int v99 = *(char *)(a1 + 161);
              *(_DWORD *)unint64_t v115 = 67240448;
              *(_DWORD *)&v115[4] = v98;
              *(_WORD *)&v115[8] = 1026;
              *(_DWORD *)&v115[10] = v99;
              uint64_t v100 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v100);
              if (v100 != buf) {
                free(v100);
              }
            }
            goto LABEL_123;
          }
          char v27 = 0;
        }
      }
      *uint64_t v26 = v27;
      goto LABEL_95;
    case 3u:
    case 4u:
    case 6u:
    case 0xAu:
    case 0x27u:
      uint64_t v8 = *(int **)(a1 + 264);
      long long v9 = (int *)(a1 + 272);
      if (v8 != (int *)(a1 + 272))
      {
        uint64_t v10 = a1 + 240;
        do
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          int v11 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v12 = *a2;
            uint64_t v13 = sub_1000A43BC(v10, v8 + 8);
            uint64_t v16 = v13[1];
            uint64_t v14 = v13 + 1;
            uint64_t v15 = v16;
            if (*((char *)v14 + 23) >= 0) {
              uint64_t v15 = (uint64_t)v14;
            }
            *(_DWORD *)std::string buf = 67240450;
            *(_DWORD *)&uint8_t buf[4] = v12;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = v15;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "unregistering notification,%{public}d,with,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022C17A0);
            }
            unsigned int v20 = *a2;
            CFStringRef v21 = sub_1000A43BC(v10, v8 + 8);
            uint64_t v24 = v21[1];
            __int16 v22 = v21 + 1;
            uint64_t v23 = v24;
            if (*((char *)v22 + 23) >= 0) {
              uint64_t v23 = (uint64_t)v22;
            }
            *(_DWORD *)unint64_t v115 = 67240450;
            *(_DWORD *)&v115[4] = v20;
            *(_WORD *)&v115[8] = 2082;
            *(void *)&v115[10] = v23;
            uint64_t v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v25);
            if (v25 != buf) {
              free(v25);
            }
          }
          [*(id *)(*((void *)v8 + 5) + 16) unregister:*(void *)(*((void *)v8 + 5) + 8) forNotification:*a2];
          CFDictionaryRef v17 = (int *)*((void *)v8 + 1);
          if (v17)
          {
            do
            {
              id v18 = v17;
              CFDictionaryRef v17 = *(int **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              id v18 = (int *)*((void *)v8 + 2);
              _ZF = *(void *)v18 == (void)v8;
              uint64_t v8 = v18;
            }
            while (!_ZF);
          }
          uint64_t v8 = v18;
        }
        while (v18 != v9);
      }
      return 1;
    case 8u:
      if (*(_DWORD *)(a1 + 328))
      {
        *(void *)std::string buf = a1 + 328;
        uint64_t v48 = sub_1000FEE0C((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        [(id)v48[5][2] unregister:v48[5][1] forNotification:8];
      }
LABEL_123:
      *(void *)&v115[8] = 0xBFF0000000000000;
      *(_WORD *)&v115[16] = 0;
      *(_DWORD *)&v115[20] = 0;
      LODWORD(v116) = 0;
      *(double *)unint64_t v115 = sub_100151E24(a1);
      uint64_t v76 = *(void *)(a1 + 264);
      if (v76 != a1 + 272)
      {
        uint64_t v77 = a1 + 240;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        uint64_t v78 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v79 = *(void *)v115;
          int v80 = sub_1000A43BC(v77, (int *)(v76 + 32));
          uint64_t v83 = v80[1];
          __int16 v81 = v80 + 1;
          uint64_t v82 = v83;
          if (*((char *)v81 + 23) >= 0) {
            unint64_t v84 = v81;
          }
          else {
            unint64_t v84 = (uint64_t *)v82;
          }
          int v85 = *((unsigned __int8 *)sub_1000A43BC(v77, (int *)(v76 + 32)) + 863);
          *(_DWORD *)std::string buf = 134349570;
          *(void *)&uint8_t buf[4] = v79;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v84;
          *(_WORD *)&unsigned char buf[22] = 1026;
          LODWORD(v118) = v85;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "CLIENT:unregisterForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          uint64_t v86 = *(void *)v115;
          int v87 = sub_1000A43BC(v77, (int *)(v76 + 32));
          uint64_t v90 = v87[1];
          int v88 = v87 + 1;
          uint64_t v89 = v90;
          if (*((char *)v88 + 23) >= 0) {
            long long v91 = v88;
          }
          else {
            long long v91 = (uint64_t *)v89;
          }
          int v92 = *((unsigned __int8 *)sub_1000A43BC(v77, (int *)(v76 + 32)) + 863);
          int v109 = 134349570;
          uint64_t v110 = v86;
          __int16 v111 = 2082;
          int v112 = v91;
          __int16 v113 = 1026;
          int v114 = v92;
          unint64_t v93 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v93);
          if (v93 != buf) {
            free(v93);
          }
        }
        *(_DWORD *)std::string buf = 0;
        sub_10012F728();
      }
      return 1;
    case 0xFu:
      if (*(_DWORD *)(a1 + 328))
      {
        *(_DWORD *)std::string buf = 15;
        if (sub_1001072EC(a1, (int *)buf, 1))
        {
          __asm { FMOV            V0.2D, #-1.0 }
          *(_OWORD *)std::string buf = _Q0;
          *(_WORD *)&uint8_t buf[16] = 0;
          LODWORD(v118) = 0;
          *(_DWORD *)&buf[20] = sub_1001266F8(a1, 15);
          *(void *)unint64_t v115 = a1 + 328;
          sub_1000FEE0C((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101D0B290, (_DWORD **)v115);
          *(_DWORD *)unint64_t v115 = 15;
          sub_10012F728();
        }
        *(void *)std::string buf = a1 + 328;
        uint64_t v59 = sub_1000FEE0C((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        [(id)v59[5][2] unregister:v59[5][1] forNotification:15];
      }
      return 1;
    case 0x11u:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v51 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMM,RunMapMatching is turned off", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        *(_WORD *)unint64_t v115 = 0;
        uint64_t v104 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v104);
        if (v104 != buf) {
          free(v104);
        }
      }
      *(unsigned char *)(a1 + 668) = 0;
      (*(void (**)(void))(**(void **)(a1 + 288) + 168))(*(void *)(a1 + 288));
      (*(void (**)(void))(**(void **)(a1 + 288) + 176))(*(void *)(a1 + 288));
      return 1;
    case 0x16u:
      if (*(_DWORD *)(a1 + 320))
      {
        *(void *)std::string buf = a1 + 320;
        uint64_t v28 = sub_1000FEE0C((uint64_t **)(a1 + 264), (int *)(a1 + 320), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        [(id)v28[5][2] unregister:v28[5][1] forNotification:22];
      }
      return 1;
    case 0x1Cu:
      uint64_t v29 = 0;
      int v30 = *(_DWORD *)(a1 + 344);
      int v109 = *(_DWORD *)(a1 + 332);
      LODWORD(v110) = v30;
      do
      {
        if (*(int *)((char *)&v109 + v29))
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          uint64_t v31 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v32 = *a2;
            uint64_t v33 = sub_1000A43BC(a1 + 240, (int *)((char *)&v109 + v29));
            uint64_t v36 = v33[1];
            uint64_t v34 = v33 + 1;
            uint64_t v35 = v36;
            if (*((char *)v34 + 23) >= 0) {
              uint64_t v35 = (uint64_t)v34;
            }
            *(_DWORD *)std::string buf = 67240450;
            *(_DWORD *)&uint8_t buf[4] = v32;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = v35;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "unregistering notification,%{public}d,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022C17A0);
            }
            unsigned int v38 = *a2;
            uint64_t v39 = sub_1000A43BC(a1 + 240, (int *)((char *)&v109 + v29));
            uint64_t v42 = v39[1];
            __int16 v40 = v39 + 1;
            uint64_t v41 = v42;
            if (*((char *)v40 + 23) >= 0) {
              uint64_t v41 = (uint64_t)v40;
            }
            *(_DWORD *)unint64_t v115 = 67240450;
            *(_DWORD *)&v115[4] = v38;
            *(_WORD *)&v115[8] = 2082;
            *(void *)&v115[10] = v41;
            unint64_t v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v43);
            if (v43 != buf) {
              free(v43);
            }
          }
          uint64_t v37 = sub_1000A43BC(a1 + 264, (int *)((char *)&v109 + v29));
          [*(id *)(*v37 + 16) unregister:*(void *)(*v37 + 8) forNotification:28];
        }
        v29 += 4;
      }
      while (v29 != 8);
      if (*(_DWORD *)(a1 + 328))
      {
        uint64_t v57 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v57 + 16) unregister:*(void *)(*v57 + 8) forNotification:28];
      }
      uint64_t v58 = *(void *)(a1 + 288);
      if (v58) {
        (*(void (**)(uint64_t, void))(*(void *)v58 + 320))(v58, 0);
      }
      return 1;
    case 0x1Du:
      if (*(_DWORD *)(a1 + 328))
      {
        uint64_t v52 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v52 + 16) unregister:*(void *)(*v52 + 8) forNotification:29];
      }
      if (*(_DWORD *)(a1 + 336))
      {
        uint64_t v53 = sub_1000A43BC(a1 + 264, (int *)(a1 + 336));
        [*(id *)(*v53 + 16) unregister:*(void *)(*v53 + 8) forNotification:29];
      }
      (*(void (**)(void, void))(**(void **)(a1 + 288) + 312))(*(void *)(a1 + 288), 0);
      return 1;
    case 0x22u:
      if (*(_DWORD *)(a1 + 328))
      {
        uint64_t v49 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v49 + 16) unregister:*(void *)(*v49 + 8) forNotification:34];
      }
      return 1;
    case 0x23u:
      if (*(_DWORD *)(a1 + 328))
      {
        uint64_t v50 = sub_1000A43BC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v50 + 16) unregister:*(void *)(*v50 + 8) forNotification:35];
      }
      return 1;
    case 0x28u:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v54 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"unregister kNotificationExternalLocationDisablementAssert\"}", buf, 0x12u);
      }
      if (*(_DWORD *)(a1 + 336))
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        uint64_t v55 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"unregistering kNotificationExternalLocationDisablementAssert w/ accessory provider\"}", buf, 0x12u);
        }
        uint64_t v56 = sub_1000A43BC(a1 + 264, (int *)(a1 + 336));
        [*(id *)(*v56 + 16) unregister:*(void *)(*v56 + 8) forNotification:40];
      }
      return 1;
    default:
      return 1;
  }
}

void sub_10067609C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100676160(uint64_t a1, __int32 a2, int *a3, char *a4)
{
  v31.i32[2] = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)buf);
  sub_10016BE74(v7, (uint64_t *)buf);
  *(_DWORD *)std::string buf = 2;
  v31.i32[0] = 2;
  v31.i32[1] = sub_10016A9AC((int *)buf);
  uint64_t v8 = sub_10016AB88();
  *(_DWORD *)std::string buf = 4;
  sub_1005B6794(v8, (unsigned int *)buf, &v31, (int *)(a1 + 5124), &v31.i32[2], a3, a4);
  (*(void (**)(void, int *, char *))(**(void **)(a1 + 288) + 48))(*(void *)(a1 + 288), a3, a4);
  switch(*a3)
  {
    case 2:
      *(unsigned char *)(a1 + 674) = 1;
      sub_1006768E4(a1, 1, 1);
      if (*(unsigned __int8 *)(a1 + 161) != 255)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        long long v9 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Device going to sleep,stop location unavailable timer", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          v31.i16[6] = 0;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        [*(id *)(a1 + 656) setNextFireDelay:1.79769313e308];
      }
      goto LABEL_40;
    case 3:
      *(unsigned char *)(a1 + 674) = 0;
      sub_1006768E4(a1, 1, 0);
      if (*(unsigned __int8 *)(a1 + 161) != 255)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        uint64_t v16 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = sub_10016BA10();
          *(_DWORD *)std::string buf = 0;
          double v18 = sub_10016BA54(v17, buf) + 15.0;
          uint64_t v19 = sub_10016BA10();
          double v20 = sub_10018202C(v19);
          *(_DWORD *)std::string buf = 134349312;
          double v36 = v18;
          __int16 v37 = 2050;
          double v38 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "LocationController,Device wake setting location unavailable timer to fire at %{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          double v27 = sub_1005BFA38() + 15.0;
          uint64_t v28 = sub_10016BA10();
          double v29 = sub_10018202C(v28);
          v31.i32[3] = 134349312;
          double v32 = v27;
          __int16 v33 = 2050;
          double v34 = v29;
          int v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        [*(id *)(a1 + 656) setNextFireDelay:15.0];
      }
      sub_10015907C(a1);
      goto LABEL_40;
    case 6:
      int v13 = *((_DWORD *)a4 + 1) == 0;
      uint64_t v14 = a1;
      int v15 = 3;
      goto LABEL_39;
    case 7:
      sub_1003972AC(a1 + 768, a4[9] == 0);
      sub_101201470(a1 + 5200, a4[9] == 0);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      CFStringRef v21 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = a4[9];
        *(_DWORD *)std::string buf = 67240192;
        LODWORD(v36) = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#LCStats,battery charging,%{public}d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_40;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v23 = a4[9];
      v31.i32[3] = 67240192;
      LODWORD(v32) = v23;
      goto LABEL_35;
    case 8:
      int v13 = *a4;
      uint64_t v14 = a1;
      int v15 = 5;
      goto LABEL_39;
    case 10:
      int v13 = *a4 == 0;
      uint64_t v14 = a1;
      int v15 = 11;
      goto LABEL_39;
    case 13:
      goto LABEL_40;
    case 15:
      int v13 = *a4;
      uint64_t v14 = a1;
      int v15 = 7;
LABEL_39:
      sub_1006768E4(v14, v15, v13);
      goto LABEL_40;
    default:
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a3;
        *(_DWORD *)std::string buf = 67240192;
        LODWORD(v36) = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LocationController,onStatusNotification,#Warning,Unhandled status notification,%{public}u", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_40;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v12 = *a3;
      v31.i32[3] = 67240192;
      LODWORD(v32) = v12;
LABEL_35:
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
LABEL_40:
      uint64_t v25 = *(void *)(a1 + 312);
      if (v25) {
        sub_100EDDE24(v25, a3, (unsigned __int8 *)a4);
      }
      return;
  }
}

void sub_1006768E4(uint64_t a1, int a2, int a3)
{
  uint64_t v7 = a1 + 24 * a2;
  if (*(unsigned __int8 *)(v7 + 1624) != a3 || *(double *)(a1 + 24 * a2 + 1632) < 1.0)
  {
    uint64_t v8 = sub_10016BA10();
    *(_DWORD *)std::string buf = 0;
    double v9 = sub_10016BA54(v8, buf);
    uint64_t v10 = a1 + 24 * a2;
    double v11 = *(double *)(v10 + 1632);
    if (v11 >= 1.0) {
      double v12 = v9 - v11;
    }
    else {
      double v12 = -1.0;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C1820);
    }
    int v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(v7 + 1616);
      uint64_t v15 = sub_10016BA10();
      double v16 = sub_10018202C(v15);
      *(_DWORD *)std::string buf = 136447234;
      uint64_t v22 = v14;
      __int16 v23 = 1026;
      int v24 = a3;
      __int16 v25 = 2050;
      double v26 = v12;
      __int16 v27 = 2050;
      double v28 = v9;
      __int16 v29 = 2050;
      double v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@ClxEvent, %{public}s, %{public}d, delta, %{public}.1f, now, %{public}.3f, propagation_us,%{public}.3f", buf, 0x30u);
    }
    uint64_t v17 = (unsigned char *)(v7 + 1624);
    double v18 = (double *)(v10 + 1632);
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C1820);
      }
      uint64_t v19 = sub_10016BA10();
      sub_10018202C(v19);
      double v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::handleStateEvent(NegativeEvent, BOOL)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    *uint64_t v17 = a3;
    *double v18 = v9;
    if (a2 == 11 || a2 == 4) {
      sub_10067FE0C(a1);
    }
  }
}

void sub_100676BBC(uint64_t a1, __int32 a2, int *a3, uint64_t a4)
{
  v18.i32[2] = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)buf);
  sub_10016BE74(v7, (uint64_t *)buf);
  *(_DWORD *)std::string buf = 4;
  v18.i32[0] = 4;
  v18.i32[1] = sub_10016A9AC((int *)buf);
  uint64_t v8 = sub_10016AB88();
  *(_DWORD *)std::string buf = 4;
  sub_1005B7E98(v8, (unsigned int *)buf, &v18, (int *)(a1 + 5124), &v18.i32[2], a3, (char *)a4);
  int v9 = *a3;
  if (*a3 != 7)
  {
    if (v9 != 6)
    {
      if (v9 == 1)
      {
        sub_1006768E4(a1, 0, *(unsigned char *)a4 == 0);
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        int v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = *a3;
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "LocationController,onWifiServiceNotification,#Warning,Unhandled status notification,%{public}u", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022C17A0);
          }
          int v16 = *a3;
          v18.i32[3] = 67240192;
          int v19 = v16;
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
      }
      goto LABEL_19;
    }
    if (*(unsigned char *)(a4 + 96)) {
      BOOL v10 = *(_DWORD *)(a4 + 48) <= 0;
    }
    else {
      BOOL v10 = 1;
    }
    int v11 = !v10;
    sub_1006768E4(a1, 4, v11 ^ 1);
    sub_10099BA38(a1 + 352, v11);
  }
  uint64_t v12 = *(void *)(a1 + 288);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 480))(v12, a4);
  }
LABEL_19:
  uint64_t v15 = *(void *)(a1 + 312);
  if (v15) {
    sub_100EDF3E0(v15, a3, a4);
  }
  sub_100E4BFB4((char *)(a1 + 760), a3, a4);
  sub_100396A88(a1 + 768, a3, a4);
}

void sub_100676EB8(uint64_t a1, __int32 a2, int *a3, int *a4)
{
  v13.i32[2] = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)buf);
  sub_10016BE74(v7, (uint64_t *)buf);
  *(_DWORD *)std::string buf = 5;
  v13.i32[0] = 5;
  v13.i32[1] = sub_10016A9AC((int *)buf);
  uint64_t v8 = sub_10016AB88();
  *(_DWORD *)std::string buf = 4;
  sub_1005B8A64(v8, (unsigned int *)buf, &v13, (int *)(a1 + 5124), &v13.i32[2], a3, a4);
  if (*a3)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C17A0);
    }
    int v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LocationController,onDataProtectionNotification,#Warning,Unhandled status notification,%{public}u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      int v11 = *a3;
      v13.i32[3] = 67240192;
      int v14 = v11;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationController::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    sub_1006768E4(a1, 2, *a4 != 1);
  }
}

void sub_1006770F8(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v13 = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)v14);
  sub_10016BE74(v7, v14[0].i64);
  int v15 = 6;
  v14[0].i32[0] = 6;
  v14[0].i32[1] = sub_10016A9AC(&v15);
  uint64_t v8 = sub_10016AB88();
  int v15 = 4;
  sub_1005B9814(v8, (unsigned int *)&v15, v14, (int *)(a1 + 5124), &v13, a3, a4);
  int v9 = *a3;
  if (*a3 == 9)
  {
    BOOL v12 = *(unsigned char *)(a4 + 113) == 0;
    uint64_t v10 = a1;
    int v11 = 8;
  }
  else if (v9 == 5)
  {
    uint64_t v10 = a1;
    int v11 = 9;
    BOOL v12 = 0;
  }
  else
  {
    if (v9 != 4) {
      return;
    }
    uint64_t v10 = a1;
    int v11 = 9;
    BOOL v12 = 1;
  }
  sub_1006768E4(v10, v11, v12);
}

void sub_1006771E8(uint64_t a1, int a2, int *a3, char *a4)
{
  int v9 = a2;
  uint64_t v7 = sub_10016BA10();
  sub_10016BC44((uint64_t)v10);
  sub_10016BE74(v7, v10[0].i64);
  int v11 = 7;
  v10[0].i32[0] = 7;
  v10[0].i32[1] = sub_10016A9AC(&v11);
  uint64_t v8 = sub_10016AB88();
  int v11 = 4;
  sub_1005BA1EC(v8, (unsigned int *)&v11, v10, (int *)(a1 + 5124), &v9, a3, a4);
  if (*a3 == 5) {
    sub_1006768E4(a1, 10, *a4 == 0);
  }
}

void sub_1006772A8(uint64_t a1)
{
  sub_100103240();
  sub_10073B6FC((uint64_t)__p);
  if (__p[23] >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = *(char **)__p;
  }
  sub_100134750(&v171, v2);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type size = HIBYTE(v171.__r_.__value_.__r.__words[2]);
  if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v171.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::assign(&v171, "Local");
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C1820);
  }
  unsigned __int8 v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100103240();
    uint64_t v5 = &v172;
    sub_10073ADA8((uint64_t)&v172);
    if ((v172.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v5 = (std::string *)v172.__r_.__value_.__r.__words[0];
    }
    uint64_t v6 = sub_100103240();
    sub_10073B1A4(v6, (uint64_t)v169);
    if (v170 >= 0) {
      uint64_t v7 = v169;
    }
    else {
      uint64_t v7 = (void **)v169[0];
    }
    uint64_t v8 = &v171;
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v171.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136446979;
    *(void *)&__p[4] = v5;
    *(_WORD *)&unsigned char __p[12] = 2081;
    *(void *)&__p[14] = v7;
    *(_WORD *)&unsigned char __p[22] = 2082;
    long long v178 = v8;
    LOWORD(v179) = 1026;
    *(_DWORD *)((char *)&v179 + 2) = 10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxVersion, Init, os, %{public}s, model, %{private}s, build, %{public}s, triage, %{public}d", __p, 0x26u);
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C1820);
    }
    sub_100103240();
    unint64_t v156 = v169;
    sub_10073ADA8((uint64_t)v169);
    if (v170 < 0) {
      unint64_t v156 = (void **)v169[0];
    }
    uint64_t v157 = sub_100103240();
    sub_10073B1A4(v157, (uint64_t)v167);
    if (v168 >= 0) {
      int v158 = v167;
    }
    else {
      int v158 = (void **)v167[0];
    }
    uint64_t v159 = &v171;
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v159 = (std::string *)v171.__r_.__value_.__r.__words[0];
    }
    LODWORD(v172.__r_.__value_.__l.__data_) = 136446979;
    *(std::string::size_type *)((char *)v172.__r_.__value_.__r.__words + 4) = (std::string::size_type)v156;
    WORD2(v172.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v172.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v158;
    HIWORD(v172.__r_.__value_.__r.__words[2]) = 2082;
    uint64_t v173 = (__n128 (*)(__n128 *, __n128 *))v159;
    LOWORD(v174) = 1026;
    *(_DWORD *)((char *)&v174 + 2) = 10;
    double v160 = (char *)_os_log_send_and_compose_impl();
    if (v168 < 0) {
      operator delete(v167[0]);
    }
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationController::start()", "%s\n", v160);
    if (v160 != __p) {
      free(v160);
    }
  }
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 688));
  int v9 = (__CFRunLoop *)sub_1001C2710();
  CFRunLoopWakeUp(v9);
  if (!*(unsigned char *)(a1 + 664))
  {
    *(_DWORD *)(a1 + 320) = [objc_msgSend(*(id *)(a1 + 32), "vendor") isServiceEnabled:@"CLWifiLocationProvider"];
    sub_100103240();
    if (sub_100740FA0())
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C17A0);
      }
      uint64_t v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CELL_LOC:choosing CLUnifiedCellLocationProvider", __p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022C17A0);
        }
        LOWORD(v172.__r_.__value_.__l.__data_) = 0;
        long long v161 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationController::start()", "%s\n", v161);
        if (v161 != __p) {
          free(v161);
        }
      }
      v166[0] = _NSConcreteStackBlock;
      v166[1] = 3221225472;
      v166[2] = sub_1006794C0;
      v166[3] = &unk_1022C1698;
      v166[4] = a1;
      sub_100E0472C((uint64_t)v166);
    }
    else
    {
      *(_DWORD *)(a1 + 324) = 0;
    }
    v165[0] = _NSConcreteStackBlock;
    v165[1] = 3221225472;
    v165[2] = sub_1006794D8;
    v165[3] = &unk_1022C1698;
    v165[4] = a1;
    sub_100717F30((uint64_t)v165);
    v164[0] = _NSConcreteStackBlock;
    v164[1] = 3221225472;
    v164[2] = sub_1006794F0;
    v164[3] = &unk_1022C1698;
    v164[4] = a1;
    sub_1009C41AC((uint64_t)v164);
  }
  id v11 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLGnssProvider"];
  *(void *)(a1 + 648) = v11;
  if (v11) {
    *(_DWORD *)(a1 + 328) = 4;
  }
  if (*(_DWORD *)(a1 + 320))
  {
    id v12 = [objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLWifiLocationProvider") syncgetName];
    if (v12)
    {
      sub_100134750(&v172, (char *)[v12 UTF8String]);
      int v13 = *(_DWORD *)(a1 + 320);
      sub_100134750(v169, "CLWifiLocationProvider");
      sub_100681A94((uint64_t)__p, v13, (long long *)&v172, (long long *)v169, 4, 1, 1);
      v167[0] = (void *)(a1 + 320);
      int v14 = sub_100151D38((uint64_t **)(a1 + 240), (int *)(a1 + 320), (uint64_t)&unk_101D0B290, (_DWORD **)v167);
      *((_DWORD *)v14 + 10) = *(_DWORD *)__p;
      int v15 = (void **)(v14 + 6);
      if (*((char *)v14 + 71) < 0) {
        operator delete(*v15);
      }
      v14[8] = (uint64_t *)v178;
      *(_OWORD *)int v15 = *(_OWORD *)&__p[8];
      HIBYTE(v178) = 0;
      std::string __p[8] = 0;
      int v16 = (void **)(v14 + 9);
      if (*((char *)v14 + 95) < 0) {
        operator delete(*v16);
      }
      *(_OWORD *)int v16 = v179;
      void v14[11] = v180;
      HIBYTE(v180) = 0;
      LOBYTE(v179) = 0;
      long long v17 = v182;
      *((_OWORD *)v14 + 6) = v181;
      *((_OWORD *)v14 + 7) = v17;
      long long v18 = v186;
      *((_OWORD *)v14 + 10) = v185;
      *((_OWORD *)v14 + 11) = v18;
      *(_OWORD *)((char *)v14 + 236) = *(_OWORD *)((char *)v189 + 12);
      long long v19 = v189[0];
      long long v20 = v188;
      *((_OWORD *)v14 + 12) = v187;
      *((_OWORD *)v14 + 13) = v20;
      *((_OWORD *)v14 + 14) = v19;
      long long v21 = v184;
      *((_OWORD *)v14 + 8) = v183;
      *((_OWORD *)v14 + 9) = v21;
      memcpy(v14 + 32, v190, 0x201uLL);
      long long v22 = v191;
      long long v191 = 0u;
      __int16 v23 = (std::__shared_weak_count *)v14[98];
      *(_OWORD *)(v14 + 97) = v22;
      if (v23)
      {
        sub_1000DB0A0(v23);
        long long v24 = v194;
        long long v25 = v193;
        *(_OWORD *)(v14 + 99) = v192;
        double v26 = *(uint64_t **)&v197[13];
        long long v27 = *(_OWORD *)v197;
        long long v28 = v196;
        *(_OWORD *)(v14 + 105) = v195;
        *(_OWORD *)(v14 + 107) = v28;
        __int16 v29 = (std::__shared_weak_count *)*((void *)&v191 + 1);
        *(_OWORD *)(v14 + 109) = v27;
        *(uint64_t **)((char *)v14 + 885) = v26;
        *(_OWORD *)(v14 + 101) = v25;
        *(_OWORD *)(v14 + 103) = v24;
        *((_OWORD *)v14 + 56) = v198;
        if (v29) {
          sub_1000DB0A0(v29);
        }
      }
      else
      {
        long long v30 = *(_OWORD *)v197;
        long long v31 = v196;
        long long v32 = v194;
        long long v33 = v193;
        *(_OWORD *)(v14 + 99) = v192;
        *(_OWORD *)(v14 + 101) = v33;
        *(_OWORD *)(v14 + 103) = v32;
        double v34 = *(uint64_t **)&v197[13];
        long long v35 = v195;
        *(_OWORD *)(v14 + 107) = v31;
        *(_OWORD *)(v14 + 109) = v30;
        *(_OWORD *)(v14 + 105) = v35;
        *(uint64_t **)((char *)v14 + 885) = v34;
        *((_OWORD *)v14 + 56) = v198;
      }
      if (SHIBYTE(v180) < 0) {
        operator delete((void *)v179);
      }
      if (SHIBYTE(v178) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (v170 < 0) {
        operator delete(v169[0]);
      }
      sub_100689ACC();
    }
  }
  if (*(_DWORD *)(a1 + 324))
  {
    id v36 = [[[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLUnifiedCellLocationProvider"] syncgetName];
    if (v36)
    {
      sub_100134750(&v172, (char *)[v36 UTF8String]);
      int v37 = *(_DWORD *)(a1 + 324);
      sub_100134750(v169, "CLUnifiedCellLocationProvider");
      sub_100681A94((uint64_t)__p, v37, (long long *)&v172, (long long *)v169, 6, 0, -1);
      v167[0] = (void *)(a1 + 324);
      double v38 = sub_100151D38((uint64_t **)(a1 + 240), (int *)(a1 + 324), (uint64_t)&unk_101D0B290, (_DWORD **)v167);
      *((_DWORD *)v38 + 10) = *(_DWORD *)__p;
      uint64_t v39 = (void **)(v38 + 6);
      if (*((char *)v38 + 71) < 0) {
        operator delete(*v39);
      }
      v38[8] = (uint64_t *)v178;
      *(_OWORD *)uint64_t v39 = *(_OWORD *)&__p[8];
      HIBYTE(v178) = 0;
      std::string __p[8] = 0;
      __int16 v40 = (void **)(v38 + 9);
      if (*((char *)v38 + 95) < 0) {
        operator delete(*v40);
      }
      *(_OWORD *)__int16 v40 = v179;
      v38[11] = v180;
      HIBYTE(v180) = 0;
      LOBYTE(v179) = 0;
      long long v41 = v182;
      *((_OWORD *)v38 + 6) = v181;
      *((_OWORD *)v38 + 7) = v41;
      long long v42 = v186;
      *((_OWORD *)v38 + 10) = v185;
      *((_OWORD *)v38 + 11) = v42;
      *(_OWORD *)((char *)v38 + 236) = *(_OWORD *)((char *)v189 + 12);
      long long v43 = v189[0];
      long long v44 = v188;
      *((_OWORD *)v38 + 12) = v187;
      *((_OWORD *)v38 + 13) = v44;
      *((_OWORD *)v38 + 14) = v43;
      long long v45 = v184;
      *((_OWORD *)v38 + 8) = v183;
      *((_OWORD *)v38 + 9) = v45;
      memcpy(v38 + 32, v190, 0x201uLL);
      long long v46 = v191;
      long long v191 = 0u;
      uint64_t v47 = (std::__shared_weak_count *)v38[98];
      *(_OWORD *)(v38 + 97) = v46;
      if (v47)
      {
        sub_1000DB0A0(v47);
        long long v48 = v194;
        long long v49 = v193;
        *(_OWORD *)(v38 + 99) = v192;
        uint64_t v50 = *(uint64_t **)&v197[13];
        long long v51 = *(_OWORD *)v197;
        long long v52 = v196;
        *(_OWORD *)(v38 + 105) = v195;
        *(_OWORD *)(v38 + 107) = v52;
        uint64_t v53 = (std::__shared_weak_count *)*((void *)&v191 + 1);
        *(_OWORD *)(v38 + 109) = v51;
        *(uint64_t **)((char *)v38 + 885) = v50;
        *(_OWORD *)(v38 + 101) = v49;
        *(_OWORD *)(v38 + 103) = v48;
        *((_OWORD *)v38 + 56) = v198;
        if (v53) {
          sub_1000DB0A0(v53);
        }
      }
      else
      {
        long long v54 = *(_OWORD *)v197;
        long long v55 = v196;
        long long v56 = v194;
        long long v57 = v193;
        *(_OWORD *)(v38 + 99) = v192;
        *(_OWORD *)(v38 + 101) = v57;
        *(_OWORD *)(v38 + 103) = v56;
        uint64_t v58 = *(uint64_t **)&v197[13];
        long long v59 = v195;
        *(_OWORD *)(v38 + 107) = v55;
        *(_OWORD *)(v38 + 109) = v54;
        *(_OWORD *)(v38 + 105) = v59;
        *(uint64_t **)((char *)v38 + 885) = v58;
        *((_OWORD *)v38 + 56) = v198;
      }
      if (SHIBYTE(v180) < 0) {
        operator delete((void *)v179);
      }
      if (SHIBYTE(v178) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (v170 < 0) {
        operator delete(v169[0]);
      }
      sub_100E04630();
    }
  }
  int v60 = *(_DWORD *)(a1 + 328);
  if (v60)
  {
    sub_100134750(&v172, "gps");
    sub_100134750(v169, "CLGnssProvider");
    sub_100681A94((uint64_t)__p, v60, (long long *)&v172, (long long *)v169, 1, 2, 2);
    v167[0] = (void *)(a1 + 328);
    unsigned int v61 = sub_100151D38((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101D0B290, (_DWORD **)v167);
    *((_DWORD *)v61 + 10) = *(_DWORD *)__p;
    int v62 = (void **)(v61 + 6);
    if (*((char *)v61 + 71) < 0) {
      operator delete(*v62);
    }
    v61[8] = (uint64_t *)v178;
    *(_OWORD *)int v62 = *(_OWORD *)&__p[8];
    HIBYTE(v178) = 0;
    std::string __p[8] = 0;
    double v63 = (void **)(v61 + 9);
    if (*((char *)v61 + 95) < 0) {
      operator delete(*v63);
    }
    *(_OWORD *)double v63 = v179;
    v61[11] = v180;
    HIBYTE(v180) = 0;
    LOBYTE(v179) = 0;
    long long v64 = v182;
    *((_OWORD *)v61 + 6) = v181;
    *((_OWORD *)v61 + 7) = v64;
    long long v65 = v186;
    *((_OWORD *)v61 + 10) = v185;
    *((_OWORD *)v61 + 11) = v65;
    *(_OWORD *)((char *)v61 + 236) = *(_OWORD *)((char *)v189 + 12);
    long long v66 = v189[0];
    long long v67 = v188;
    *((_OWORD *)v61 + 12) = v187;
    *((_OWORD *)v61 + 13) = v67;
    *((_OWORD *)v61 + 14) = v66;
    long long v68 = v184;
    *((_OWORD *)v61 + 8) = v183;
    *((_OWORD *)v61 + 9) = v68;
    memcpy(v61 + 32, v190, 0x201uLL);
    long long v69 = v191;
    long long v191 = 0u;
    uint64_t v70 = (std::__shared_weak_count *)v61[98];
    *(_OWORD *)(v61 + 97) = v69;
    if (v70)
    {
      sub_1000DB0A0(v70);
      long long v71 = v194;
      long long v72 = v193;
      *(_OWORD *)(v61 + 99) = v192;
      uint64_t v73 = *(uint64_t **)&v197[13];
      long long v74 = *(_OWORD *)v197;
      long long v75 = v196;
      *(_OWORD *)(v61 + 105) = v195;
      *(_OWORD *)(v61 + 107) = v75;
      uint64_t v76 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      *(_OWORD *)(v61 + 109) = v74;
      *(uint64_t **)((char *)v61 + 885) = v73;
      *(_OWORD *)(v61 + 101) = v72;
      *(_OWORD *)(v61 + 103) = v71;
      *((_OWORD *)v61 + 56) = v198;
      if (v76) {
        sub_1000DB0A0(v76);
      }
    }
    else
    {
      long long v77 = *(_OWORD *)v197;
      long long v78 = v196;
      long long v79 = v194;
      long long v80 = v193;
      *(_OWORD *)(v61 + 99) = v192;
      *(_OWORD *)(v61 + 101) = v80;
      *(_OWORD *)(v61 + 103) = v79;
      __int16 v81 = *(uint64_t **)&v197[13];
      long long v82 = v195;
      *(_OWORD *)(v61 + 107) = v78;
      *(_OWORD *)(v61 + 109) = v77;
      *(_OWORD *)(v61 + 105) = v82;
      *(uint64_t **)((char *)v61 + 885) = v81;
      *((_OWORD *)v61 + 56) = v198;
    }
    if (SHIBYTE(v180) < 0) {
      operator delete((void *)v179);
    }
    if (SHIBYTE(v178) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    sub_100E92CB4();
  }
  *(_DWORD *)(a1 + 332) = 0;
  memset(&v172, 0, sizeof(v172));
  uint64_t v83 = (int *)(a1 + 332);
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", @"CLPipelineLocationProvider"))
  {
    id v84 = [[[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLPipelineLocationProvider"] syncgetName];
    if (v84)
    {
      std::string::assign(&v172, (const std::string::value_type *)[v84 UTF8String]);
      int v85 = 5;
      *uint64_t v83 = 5;
      goto LABEL_93;
    }
  }
  int v85 = *v83;
  if (*v83)
  {
LABEL_93:
    sub_100134750(v169, "CLPipelineLocationProvider");
    sub_100681A94((uint64_t)__p, v85, (long long *)&v172, (long long *)v169, 10, 2, 4);
    v167[0] = (void *)(a1 + 332);
    uint64_t v86 = sub_100151D38((uint64_t **)(a1 + 240), (int *)(a1 + 332), (uint64_t)&unk_101D0B290, (_DWORD **)v167);
    *((_DWORD *)v86 + 10) = *(_DWORD *)__p;
    int v87 = (void **)(v86 + 6);
    if (*((char *)v86 + 71) < 0) {
      operator delete(*v87);
    }
    v86[8] = (uint64_t *)v178;
    *(_OWORD *)int v87 = *(_OWORD *)&__p[8];
    HIBYTE(v178) = 0;
    std::string __p[8] = 0;
    int v88 = (void **)(v86 + 9);
    if (*((char *)v86 + 95) < 0) {
      operator delete(*v88);
    }
    *(_OWORD *)int v88 = v179;
    v86[11] = v180;
    HIBYTE(v180) = 0;
    LOBYTE(v179) = 0;
    long long v89 = v182;
    *((_OWORD *)v86 + 6) = v181;
    *((_OWORD *)v86 + 7) = v89;
    long long v90 = v186;
    *((_OWORD *)v86 + 10) = v185;
    *((_OWORD *)v86 + 11) = v90;
    *(_OWORD *)((char *)v86 + 236) = *(_OWORD *)((char *)v189 + 12);
    long long v91 = v189[0];
    long long v92 = v188;
    *((_OWORD *)v86 + 12) = v187;
    *((_OWORD *)v86 + 13) = v92;
    *((_OWORD *)v86 + 14) = v91;
    long long v93 = v184;
    *((_OWORD *)v86 + 8) = v183;
    *((_OWORD *)v86 + 9) = v93;
    memcpy(v86 + 32, v190, 0x201uLL);
    long long v94 = v191;
    long long v191 = 0u;
    unsigned int v95 = (std::__shared_weak_count *)v86[98];
    *(_OWORD *)(v86 + 97) = v94;
    if (v95)
    {
      sub_1000DB0A0(v95);
      long long v96 = v194;
      long long v97 = v193;
      *(_OWORD *)(v86 + 99) = v192;
      int v98 = *(uint64_t **)&v197[13];
      long long v99 = *(_OWORD *)v197;
      long long v100 = v196;
      *(_OWORD *)(v86 + 105) = v195;
      *(_OWORD *)(v86 + 107) = v100;
      unsigned int v101 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      *(_OWORD *)(v86 + 109) = v99;
      *(uint64_t **)((char *)v86 + 885) = v98;
      *(_OWORD *)(v86 + 101) = v97;
      *(_OWORD *)(v86 + 103) = v96;
      *((_OWORD *)v86 + 56) = v198;
      if (v101) {
        sub_1000DB0A0(v101);
      }
    }
    else
    {
      long long v102 = *(_OWORD *)v197;
      long long v103 = v196;
      long long v104 = v194;
      long long v105 = v193;
      *(_OWORD *)(v86 + 99) = v192;
      *(_OWORD *)(v86 + 101) = v105;
      *(_OWORD *)(v86 + 103) = v104;
      uint64_t v106 = *(uint64_t **)&v197[13];
      long long v107 = v195;
      *(_OWORD *)(v86 + 107) = v103;
      *(_OWORD *)(v86 + 109) = v102;
      *(_OWORD *)(v86 + 105) = v107;
      *(uint64_t **)((char *)v86 + 885) = v106;
      *((_OWORD *)v86 + 56) = v198;
    }
    if (SHIBYTE(v180) < 0) {
      operator delete((void *)v179);
    }
    if (SHIBYTE(v178) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    sub_1012582D0();
  }
  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v172.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 336))
  {
    v172.__r_.__value_.__r.__words[0] = 0;
    v172.__r_.__value_.__l.__size_ = (std::string::size_type)&v172;
    v172.__r_.__value_.__r.__words[2] = 0x4812000000;
    uint64_t v173 = sub_100177940;
    unint64_t v174 = sub_100177304;
    long long v175 = 0u;
    long long v176 = 0u;
    v163[0] = _NSConcreteStackBlock;
    v163[1] = 3221225472;
    v163[2] = sub_100679EF4;
    v163[3] = &unk_1022C16C0;
    v163[4] = &v172;
    sub_100717F30((uint64_t)v163);
    int v108 = *(_DWORD *)(a1 + 336);
    std::string::size_type v109 = v172.__r_.__value_.__l.__size_;
    sub_100134750(v169, "CLAccessoryLocationProvider");
    sub_100681A94((uint64_t)__p, v108, (long long *)(v109 + 48), (long long *)v169, 3, 2, 5);
    v167[0] = (void *)(a1 + 336);
    uint64_t v110 = sub_100151D38((uint64_t **)(a1 + 240), (int *)(a1 + 336), (uint64_t)&unk_101D0B290, (_DWORD **)v167);
    *((_DWORD *)v110 + 10) = *(_DWORD *)__p;
    __int16 v111 = (void **)(v110 + 6);
    if (*((char *)v110 + 71) < 0) {
      operator delete(*v111);
    }
    v110[8] = (uint64_t *)v178;
    *(_OWORD *)__int16 v111 = *(_OWORD *)&__p[8];
    HIBYTE(v178) = 0;
    std::string __p[8] = 0;
    int v112 = (void **)(v110 + 9);
    if (*((char *)v110 + 95) < 0) {
      operator delete(*v112);
    }
    *(_OWORD *)int v112 = v179;
    v110[11] = v180;
    HIBYTE(v180) = 0;
    LOBYTE(v179) = 0;
    long long v113 = v182;
    *((_OWORD *)v110 + 6) = v181;
    *((_OWORD *)v110 + 7) = v113;
    long long v114 = v186;
    *((_OWORD *)v110 + 10) = v185;
    *((_OWORD *)v110 + 11) = v114;
    *(_OWORD *)((char *)v110 + 236) = *(_OWORD *)((char *)v189 + 12);
    long long v115 = v189[0];
    long long v116 = v188;
    *((_OWORD *)v110 + 12) = v187;
    *((_OWORD *)v110 + 13) = v116;
    *((_OWORD *)v110 + 14) = v115;
    long long v117 = v184;
    *((_OWORD *)v110 + 8) = v183;
    *((_OWORD *)v110 + 9) = v117;
    memcpy(v110 + 32, v190, 0x201uLL);
    long long v118 = v191;
    long long v191 = 0u;
    unint64_t v119 = (std::__shared_weak_count *)v110[98];
    *(_OWORD *)(v110 + 97) = v118;
    if (v119)
    {
      sub_1000DB0A0(v119);
      long long v120 = v194;
      long long v121 = v193;
      *(_OWORD *)(v110 + 99) = v192;
      int v122 = *(uint64_t **)&v197[13];
      long long v123 = *(_OWORD *)v197;
      long long v124 = v196;
      *(_OWORD *)(v110 + 105) = v195;
      *(_OWORD *)(v110 + 107) = v124;
      uint64_t v125 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      *(_OWORD *)(v110 + 109) = v123;
      *(uint64_t **)((char *)v110 + 885) = v122;
      *(_OWORD *)(v110 + 101) = v121;
      *(_OWORD *)(v110 + 103) = v120;
      *((_OWORD *)v110 + 56) = v198;
      if (v125) {
        sub_1000DB0A0(v125);
      }
    }
    else
    {
      long long v126 = *(_OWORD *)v197;
      long long v127 = v196;
      long long v128 = v194;
      long long v129 = v193;
      *(_OWORD *)(v110 + 99) = v192;
      *(_OWORD *)(v110 + 101) = v129;
      *(_OWORD *)(v110 + 103) = v128;
      uint64_t v130 = *(uint64_t **)&v197[13];
      long long v131 = v195;
      *(_OWORD *)(v110 + 107) = v127;
      *(_OWORD *)(v110 + 109) = v126;
      *(_OWORD *)(v110 + 105) = v131;
      *(uint64_t **)((char *)v110 + 885) = v130;
      *((_OWORD *)v110 + 56) = v198;
    }
    if (SHIBYTE(v180) < 0) {
      operator delete((void *)v179);
    }
    if (SHIBYTE(v178) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    sub_100717E34();
  }
  if (*(_DWORD *)(a1 + 340))
  {
    v172.__r_.__value_.__r.__words[0] = 0;
    v172.__r_.__value_.__l.__size_ = (std::string::size_type)&v172;
    v172.__r_.__value_.__r.__words[2] = 0x4812000000;
    uint64_t v173 = sub_100177940;
    unint64_t v174 = sub_100177304;
    long long v175 = 0u;
    long long v176 = 0u;
    v162[0] = _NSConcreteStackBlock;
    v162[1] = 3221225472;
    v162[2] = sub_100679F78;
    v162[3] = &unk_1022C16C0;
    v162[4] = &v172;
    sub_1009C41AC((uint64_t)v162);
    int v132 = *(_DWORD *)(a1 + 340);
    std::string::size_type v133 = v172.__r_.__value_.__l.__size_;
    sub_100134750(v169, "CLSimulatedLocationProvider");
    sub_100681A94((uint64_t)__p, v132, (long long *)(v133 + 48), (long long *)v169, 0, 0, -1);
    v167[0] = (void *)(a1 + 340);
    long long v134 = sub_100151D38((uint64_t **)(a1 + 240), (int *)(a1 + 340), (uint64_t)&unk_101D0B290, (_DWORD **)v167);
    *((_DWORD *)v134 + 10) = *(_DWORD *)__p;
    uint64_t v135 = (void **)(v134 + 6);
    if (*((char *)v134 + 71) < 0) {
      operator delete(*v135);
    }
    v134[8] = (uint64_t *)v178;
    *(_OWORD *)uint64_t v135 = *(_OWORD *)&__p[8];
    HIBYTE(v178) = 0;
    std::string __p[8] = 0;
    unint64_t v136 = (void **)(v134 + 9);
    if (*((char *)v134 + 95) < 0) {
      operator delete(*v136);
    }
    *(_OWORD *)unint64_t v136 = v179;
    v134[11] = v180;
    HIBYTE(v180) = 0;
    LOBYTE(v179) = 0;
    long long v137 = v182;
    *((_OWORD *)v134 + 6) = v181;
    *((_OWORD *)v134 + 7) = v137;
    long long v138 = v186;
    *((_OWORD *)v134 + 10) = v185;
    *((_OWORD *)v134 + 11) = v138;
    *(_OWORD *)((char *)v134 + 236) = *(_OWORD *)((char *)v189 + 12);
    long long v139 = v189[0];
    long long v140 = v188;
    *((_OWORD *)v134 + 12) = v187;
    *((_OWORD *)v134 + 13) = v140;
    *((_OWORD *)v134 + 14) = v139;
    long long v141 = v184;
    *((_OWORD *)v134 + 8) = v183;
    *((_OWORD *)v134 + 9) = v141;
    memcpy(v134 + 32, v190, 0x201uLL);
    long long v142 = v191;
    long long v191 = 0u;
    int v143 = (std::__shared_weak_count *)v134[98];
    *(_OWORD *)(v134 + 97) = v142;
    if (v143)
    {
      sub_1000DB0A0(v143);
      long long v144 = v194;
      long long v145 = v193;
      *(_OWORD *)(v134 + 99) = v192;
      uint64_t v146 = *(uint64_t **)&v197[13];
      long long v147 = *(_OWORD *)v197;
      long long v148 = v196;
      *(_OWORD *)(v134 + 105) = v195;
      *(_OWORD *)(v134 + 107) = v148;
      uint64_t v149 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      *(_OWORD *)(v134 + 109) = v147;
      *(uint64_t **)((char *)v134 + 885) = v146;
      *(_OWORD *)(v134 + 101) = v145;
      *(_OWORD *)(v134 + 103) = v144;
      *((_OWORD *)v134 + 56) = v198;
      if (v149) {
        sub_1000DB0A0(v149);
      }
    }
    else
    {
      long long v150 = *(_OWORD *)v197;
      long long v151 = v196;
      long long v152 = v194;
      long long v153 = v193;
      *(_OWORD *)(v134 + 99) = v192;
      *(_OWORD *)(v134 + 101) = v153;
      *(_OWORD *)(v134 + 103) = v152;
      unint64_t v154 = *(uint64_t **)&v197[13];
      long long v155 = v195;
      *(_OWORD *)(v134 + 107) = v151;
      *(_OWORD *)(v134 + 109) = v150;
      *(_OWORD *)(v134 + 105) = v155;
      *(uint64_t **)((char *)v134 + 885) = v154;
      *((_OWORD *)v134 + 56) = v198;
    }
    if (SHIBYTE(v180) < 0) {
      operator delete((void *)v179);
    }
    if (SHIBYTE(v178) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    sub_1009C40B0();
  }
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLLoiLocationProvider"), "syncgetName"))
  {
    sub_100F31EE4();
  }
  [*(id *)(a1 + 5104) registerForUpdates:*(void *)(a1 + 32)];
  [*(id *)(a1 + 640) setHarvestingEnabled:1];
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v171.__r_.__value_.__l.__data_);
  }
}