uint64_t sub_100EF9790(void *a1)
{
  void *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;

  v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    v11 = (_Unwind_Exception *)sub_101A96544(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      v4 = __p;
    }
    else {
      v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      v5 = v14;
    }
    else {
      v5 = (uint64_t)__p[1];
    }
    v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      v8 = __p;
    }
    else {
      v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100EF9AB4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100EF9AE4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

__n128 sub_100EF9B74(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100EF9C3C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_100EF9C0C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100EF9C3C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      v34 = (char *)sub_1000DA54C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100EF9F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100EF9F54(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100EF9FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100EF9FF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v12, a3);
  sub_10065AB34((uint64_t)v11, a4);
  sub_10065AC50((uint64_t)v10, a5);
  sub_100DD5888((uint64_t)a1, a2, @"Routine", 1, 2, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10);
  sub_10065ACE8(v10);
  sub_10065ABCC(v11);
  sub_10065AAB0(v12);
  *a1 = &off_102303140;
  return a1;
}

void sub_100EFA0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_10065ACE8((uint64_t *)va);
  sub_10065ABCC((uint64_t *)va1);
  sub_10065AAB0((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_100EFA120(uint64_t a1)
{
  sub_100DD5960(a1);

  operator delete();
}

id sub_100EFA158(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *a2 = sub_1007E72D8(v4);
    *a3 = sub_1007E7290(*(void **)(a1 + 128));
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1023031E0);
    }
    uint64_t v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 16) UTF8String];
      int v8 = sub_1007E72D8(*(void **)(a1 + 128));
      int v9 = sub_1007E7290(*(void **)(a1 + 128));
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v8;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsToDict,reading contents of asset for sending to routined,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1023031E0);
      }
      id v22 = [*(id *)(a1 + 16) UTF8String];
      int v23 = sub_1007E72D8(*(void **)(a1 + 128));
      int v24 = sub_1007E7290(*(void **)(a1 + 128));
      LODWORD(v35.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      WORD2(v35.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = v23;
      WORD1(v35.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v35.__r_.__value_.__r.__words[2]) = v24;
      unint64_t v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLRoutineConfigAsset::copySettingsToDict(int32_t &, int32_t &)", "%s\n", (const char *)v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    sub_1000E9354(v34);
    sub_100DD6DC0(a1, @"settings.plist", (uint64_t)v34);
    id v10 = [objc_alloc((Class)NSDictionary) initWithDictionary:sub_1000E9358((uint64_t)v34)];
    sub_100134750(&v35, "#CLConfig,");
    uint64_t v11 = std::string::append(&v35, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_100134750(__p, ",copySettingsToDict,");
    if ((v32 & 0x80u) == 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    if ((v32 & 0x80u) == 0) {
      std::string::size_type v14 = v32;
    }
    else {
      std::string::size_type v14 = (std::string::size_type)__p[1];
    }
    uint64_t v15 = std::string::append(buf, (const std::string::value_type *)v13, v14);
    uint64_t v16 = (void *)v15->__r_.__value_.__r.__words[0];
    unint64_t size = v15->__r_.__value_.__l.__size_;
    v33[0] = v15->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)((char *)&v15->__r_.__value_.__r.__words[2] + 3);
    int v18 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((char)v32 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
LABEL_19:
      *(void *)&long long __dst = v16;
      *((void *)&__dst + 1) = size;
      *(_DWORD *)v29 = v33[0];
      *(_DWORD *)&v29[3] = *(_DWORD *)((char *)v33 + 3);
      char v30 = v18;
      goto LABEL_28;
    }
    sub_1000DC48C(&__dst, v16, size);
LABEL_28:
    sub_1007E7320(&__dst, v10);
    if (v30 < 0)
    {
      operator delete((void *)__dst);
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_30;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
LABEL_30:
      sub_10013F3C4(v34);
      return v10;
    }
    operator delete(v16);
    goto LABEL_30;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1023031E0);
  }
  v19 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,copySettingsToDict,no asset present", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1023031E0);
    }
    id v26 = [*(id *)(a1 + 16) UTF8String];
    LODWORD(v35.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    v27 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLRoutineConfigAsset::copySettingsToDict(int32_t &, int32_t &)", "%s\n", (const char *)v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  return 0;
}

void sub_100EFA678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  operator delete(v39);
  sub_10013F3C4(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100EFA70C(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1023031E0);
  }
  unint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    int v4 = sub_1007E72D8(*(void **)(a1 + 128));
    int v5 = sub_1007E7290(*(void **)(a1 + 128));
    *(_DWORD *)buf = 136446722;
    id v10 = v3;
    __int16 v11 = 1026;
    int v12 = v4;
    __int16 v13 = 1026;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kRoutineConfigAssetChangedNotification for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1023031E0);
    }
    [*(id *)(a1 + 16) UTF8String];
    sub_1007E72D8(*(void **)(a1 + 128));
    sub_1007E7290(*(void **)(a1 + 128));
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLRoutineConfigAsset::sendNotifications()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"kRoutineConfigAssetChangedNotification", 0, 0, 1u);
  sub_1000E9354(buf);
  sub_100DD6DC0(a1, @"settings.plist", (uint64_t)buf);
  sub_100DD8718(a1, 8, (uint64_t)buf);
  return sub_10013F3C4(buf);
}

void sub_100EFA980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EFA99C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

void sub_100EFA9C0(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100EFA9F0()
{
  if (qword_102482348 != -1) {
    dispatch_once(&qword_102482348, &stru_102303200);
  }
  return qword_10248AE20;
}

void sub_100EFAA34(id a1)
{
}

void sub_100EFAA98()
{
}

uint64_t sub_100EFAABC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_102303230;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 24;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 24;
  *(_WORD *)(a1 + 56) = 0;
  sub_100134750((void *)(a1 + 64), "");
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EFABB0;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_async(global_queue, block);
  return a1;
}

void sub_100EFAB8C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v4) {
    sub_101A62790(v4);
  }
  sub_1003B2350(v2);
  _Unwind_Resume(a1);
}

void sub_100EFABB0()
{
}

void sub_100EFACAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EFACF0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!*a2)
  {
    char v5 = sub_100EFAD80();
    uint64_t v6 = sub_1000D3E78();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100EFC30C;
    v7[3] = &unk_1022BBA18;
    v7[4] = a4;
    char v8 = v5;
    sub_1009E8E94(v6, (uint64_t)v7);
  }
}

uint64_t sub_100EFAD80()
{
  BOOL v4 = 0;
  sub_1000C7F88(&v2);
  unsigned int v0 = sub_1000D29FC(v2, @"GestureServiceEnabled", &v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v4) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_100EFADE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EFAE00(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = v2;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = *(unsigned __int8 *)(a1 + 48);

  sub_100EFAE6C(v3, v5);
}

void sub_100EFAE6C(uint64_t a1, int a2)
{
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_102303298);
  }
  uint64_t v4 = qword_102419058;
  if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "Disabling";
    if (a2) {
      int v5 = "Enabling";
    }
    *(_DWORD *)buf = 136446210;
    char v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s ear gesture", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_102303298);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureClientManager::setEnabledInternal(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 56) = a2;
  sub_100EFB22C(a1);
}

uint64_t sub_100EFB058(uint64_t a1)
{
  *(void *)a1 = off_102303230;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1003B2350((void *)(a1 + 24));
  return a1;
}

void sub_100EFB0E4(uint64_t a1)
{
  sub_100EFB058(a1);

  operator delete();
}

void sub_100EFB11C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000D3E78();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100EFB1B4;
  v9[3] = &unk_102303248;
  v9[5] = a1;
  v9[6] = a2;
  int v10 = a3;
  v9[4] = a4;
  sub_1009E8E94(v8, (uint64_t)v9);
}

void sub_100EFB1B4(uint64_t a1)
{
}

void sub_100EFB1C8(void *a1, uint64_t a2, int a3, void *a4)
{
  sub_100EFB770(a1, a2);
  if (a4) {
    sub_100EFBACC(a1, a2, a3, a4);
  }

  sub_100EFB22C((uint64_t)a1);
}

void sub_100EFB22C(uint64_t a1)
{
  sub_100EFBD28(a1);
  if (*(unsigned char *)(a1 + 57) && *(void *)(a1 + 40))
  {
    if (sub_100EFB61C(a1))
    {
      uint64_t v2 = sub_100D2F06C();
      sub_100D30048(v2, a1 + 64);
    }
    if (!*(void *)(a1 + 16))
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_102303298);
      }
      uint64_t v3 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering for ear gesture notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_102303298);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      operator new();
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v4 = (uint64_t *)(a1 + 16);
    if (v5)
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_102303298);
      }
      uint64_t v6 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unregistering for ear gesture notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_102303298);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      uint64_t v7 = sub_100D2F06C();
      sub_1009D26C4(v7, 0, *v4);
      if (*v4) {
        (*(void (**)(uint64_t))(*(void *)*v4 + 8))(*v4);
      }
      *uint64_t v4 = 0;
    }
  }
}

void sub_100EFB5F0()
{
}

uint64_t sub_100EFB61C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  if (*(char *)(a1 + 87) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v2;
    uint64_t v14 = *(void *)(a1 + 80);
  }
  if ((*(_DWORD *)(*(void *)(a1 + 32) + 16) & 0xFFFFFFFE) == 2) {
    sub_100134750(&v11, "EarGesture_Prototype_Msgs_1");
  }
  else {
    sub_100134750(&v11, "EarGesture_Prototypes_Siri_1");
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)v2);
  }
  *(_OWORD *)uint64_t v2 = v11;
  *(void *)(v2 + 16) = v12;
  int v3 = SHIBYTE(v14);
  if (v14 >= 0) {
    uint64_t v4 = (void *)HIBYTE(v14);
  }
  else {
    uint64_t v4 = __p[1];
  }
  if (v4)
  {
    if (*(char *)(a1 + 87) < 0)
    {
      uint64_t v2 = *(void *)(a1 + 64);
      unint64_t v5 = *(void *)(a1 + 72);
    }
    else
    {
      unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
    }
    uint64_t v6 = v14 >= 0 ? __p : (void **)__p[0];
    size_t v7 = (unint64_t)v4 >= v5 ? v5 : (size_t)v4;
    if (!memcmp((const void *)v2, v6, v7) && v4 == (void *)v5)
    {
      uint64_t v9 = 0;
      if ((v3 & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_27;
    }
  }
  uint64_t v9 = 1;
  if (v3 < 0) {
LABEL_27:
  }
    operator delete(__p[0]);
  return v9;
}

void sub_100EFB750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EFB770(void *a1, uint64_t a2)
{
  if (a1[5])
  {
    for (i = (uint64_t *)a1[4]; i != a1 + 3; i = (uint64_t *)i[1])
    {
      if (i[3] == a2)
      {
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_102303298);
        }
        size_t v7 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134283521;
          uint64_t v11 = a2;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing client %{private}p", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_102303298);
          }
          uint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureClientManager::removeClientInternal(const void *)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
        }
        _Block_release((const void *)i[4]);
        uint64_t v8 = *i;
        *(void *)(v8 + 8) = i[1];
        *(void *)i[1] = v8;
        --a1[5];
        operator delete(i);
        return;
      }
    }
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_102303298);
    }
    unint64_t v5 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134283521;
      uint64_t v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Unknown client instance %{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_102303298);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureClientManager::removeClientInternal(const void *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

_DWORD *sub_100EFBACC(void *a1, uint64_t a2, int a3, void *aBlock)
{
  size_t v7 = _Block_copy(aBlock);
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_102303298);
  }
  uint64_t v8 = qword_102419058;
  if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134283777;
    uint64_t v16 = a2;
    __int16 v17 = 1026;
    int v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Adding client %{private}p with priority %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_102303298);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureClientManager::addClientInternal(const void *, int, CLEarGestureClientManager::Handler)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v9 = a1 + 3;
  for (i = (uint64_t *)a1[4]; ; i = (uint64_t *)i[1])
  {
    if (i == v9)
    {
      __n128 result = operator new(0x28uLL);
      result[4] = a3;
      *((void *)result + 3) = a2;
      *((void *)result + 4) = v7;
      uint64_t v12 = *v9;
      *(void *)(v12 + 8) = result;
      uint64_t *v9 = (uint64_t)result;
      *(void *)__n128 result = v12;
      *((void *)result + 1) = v9;
      goto LABEL_12;
    }
    if (*((_DWORD *)i + 4) <= a3) {
      break;
    }
  }
  __n128 result = operator new(0x28uLL);
  result[4] = a3;
  *((void *)result + 3) = a2;
  *((void *)result + 4) = v7;
  uint64_t v13 = *i;
  *(void *)(v13 + 8) = result;
  *(void *)__n128 result = v13;
  uint64_t *i = (uint64_t)result;
  *((void *)result + 1) = i;
LABEL_12:
  ++a1[5];
  return result;
}

void sub_100EFBD28(uint64_t a1)
{
  *(unsigned char *)(a1 + 57) = 0;
  uint64_t v2 = *(int *)(*(void *)(a1 + 32) + 16);
  if ((int)v2 > 1 || *(unsigned char *)(a1 + 56))
  {
    *(unsigned char *)(a1 + 57) = 1;
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_102303298);
    }
    int v3 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 57);
      if (v2 > 3) {
        unint64_t v5 = "PriorityNotSupported!";
      }
      else {
        unint64_t v5 = off_102303308[v2];
      }
      *(_DWORD *)buf = 67240450;
      int v8 = v4;
      __int16 v9 = 2082;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ear Gesture EnabledForTopClient: %{public}d (%{public}s)", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_102303298);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureClientManager::updateEnabledStatusForTopClient()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100EFBF58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100EFBFD8;
  v5[3] = &unk_1022B8660;
  v5[4] = a2;
  v5[5] = a1;
  sub_1009E8E94(v4, (uint64_t)v5);
}

void sub_100EFBFD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 40))
  {
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v12 = *(void *)(v3 + 16);
    uint64_t v4 = *(void *)(v3 + 24);
    unint64_t v5 = _Block_copy(*(const void **)(v3 + 32));
    uint64_t v6 = *(long long **)(a1 + 40);
    int v7 = *((_DWORD *)v6 + 4);
    long long v24 = *v6;
    int v25 = v7;
    if (v12 > 3) {
      int v8 = "PriorityNotSupported!";
    }
    else {
      int v8 = off_102303308[(int)v12];
    }
    sub_100D31A48((uint64_t)+[NSString stringWithUTF8String:v8]);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_102303298);
    }
    __int16 v9 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134283779;
      uint64_t v21 = v4;
      __int16 v22 = 2081;
      int v23 = &v24;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Dispatching ear gesture to instance %{private}p from prototype %{private}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_102303298);
      }
      int v16 = 134283779;
      uint64_t v17 = v4;
      __int16 v18 = 2081;
      v19 = &v24;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureClientManager::onEarGesture(const CLEarGestureNotifier::NotificationData *, void *)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    global_queue = dispatch_get_global_queue(2, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100EFC28C;
    block[3] = &unk_102303268;
    block[4] = v12;
    void block[5] = v4;
    block[6] = v5;
    long long v14 = v24;
    int v15 = v25;
    dispatch_async(global_queue, block);
  }
}

void sub_100EFC28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 72);
  long long v5 = *(_OWORD *)(a1 + 56);
  (*(void (**)(uint64_t, long long *, uint64_t))(v4 + 16))(v4, &v5, a3);
  _Block_release(*(const void **)(a1 + 48));
}

void sub_100EFC30C(uint64_t a1)
{
}

void sub_100EFC31C(id a1)
{
  qword_102419058 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

uint64_t sub_100EFC34C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_102303338;
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 20) = 0x3F80000000000000;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1;
  v4[0] = xmmword_101D9688C;
  v4[1] = unk_101D9689C;
  int v5 = 973279855;
  sub_100CF5F14(a1 + 28, (uint64_t)v4);
  return a1;
}

BOOL sub_100EFC3E4(uint64_t a1)
{
  *(unsigned char *)(a1 + 10) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 20) = 0x3F80000000000000;
  v3[0] = xmmword_101D9688C;
  v3[1] = unk_101D9689C;
  int v4 = 973279855;
  BOOL result = sub_100CF5F14(a1 + 28, (uint64_t)v3);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1;
  return result;
}

void sub_100EFC458(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482358))
  {
    dword_102482350 = 1060439283;
    __cxa_guard_release(&qword_102482358);
  }
  uint64_t v2 = *(void *)(a1 + 56);
  unsigned int v3 = *(unsigned __int16 *)(v2 + 10);
  if (*(_DWORD *)(v2 + 12) == v3)
  {
    if (*(unsigned char *)(v2 + 417))
    {
      BOOL v4 = !sub_100B5CCA8(v2);
      uint64_t v2 = *(void *)(a1 + 56);
      if (v4)
      {
        uint64_t v19 = 0;
        float v5 = *(float *)(v2 + 216);
        float v6 = *(float *)(v2 + 220);
        float v7 = *(float *)(v2 + 224);
        *(float *)buf = v5;
        float v45 = v6;
        *(float *)unint64_t v46 = v7;
        float v20 = 0.0;
        do
        {
          float v20 = v20 + (float)(*(float *)&buf[v19] * *(float *)&buf[v19]);
          v19 += 4;
        }
        while (v19 != 12);
        if (sqrtf(v20) > 0.00000011921)
        {
          uint64_t v21 = 0;
          float v22 = 0.0;
          do
          {
            float v22 = v22 + (float)(*(float *)&buf[v21] * *(float *)&buf[v21]);
            v21 += 4;
          }
          while (v21 != 12);
          float v23 = sqrtf(v22);
          float v5 = v5 / v23;
          float v6 = v6 / v23;
          float v7 = v7 / v23;
        }
        goto LABEL_13;
      }
      unsigned int v3 = *(unsigned __int16 *)(v2 + 10);
    }
    float v5 = sub_100659AB4((unsigned __int16 *)(v2 + 8), 0, v3);
    uint64_t v8 = 0;
    *(float *)buf = v5;
    float v45 = v6;
    *(float *)unint64_t v46 = v7;
    float v9 = 0.0;
    do
    {
      float v9 = v9 + (float)(*(float *)&buf[v8] * *(float *)&buf[v8]);
      v8 += 4;
    }
    while (v8 != 12);
    if (sqrtf(v9) > 0.00000011921)
    {
      uint64_t v10 = 0;
      float v11 = 0.0;
      do
      {
        float v11 = v11 + (float)(*(float *)&buf[v10] * *(float *)&buf[v10]);
        v10 += 4;
      }
      while (v10 != 12);
      float v12 = sqrtf(v11);
      float v5 = v5 / v12;
      float v6 = v6 / v12;
      float v7 = v7 / v12;
    }
    BOOL v4 = 0;
LABEL_13:
    uint64_t v30 = 1065353216;
    float v31 = 0.0;
    if (fabsf(v5) > *(float *)&dword_102482350)
    {
      *(float *)&uint64_t v30 = (float)(v7 * -0.0) - v6;
      *((float *)&v30 + 1) = v5 + (float)(v7 * 0.0);
      float v31 = (float)(v6 * -0.0) + (float)(v5 * 0.0);
    }
    *(unsigned char *)(a1 + 10) = sub_100EFC870(a1, (float *)&v30, (uint64_t)&v30, 0.04);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102303428);
    }
    uint64_t v13 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v14) = *(unsigned __int8 *)(a1 + 10);
      double v15 = *(float *)(a1 + 12);
      double v16 = *(float *)(a1 + 16);
      double v17 = *(float *)(a1 + 20);
      double v18 = *(float *)(a1 + 24);
      *(_DWORD *)buf = 67110400;
      float v45 = v14;
      *(_WORD *)unint64_t v46 = 2048;
      *(double *)&v46[2] = v15;
      __int16 v47 = 2048;
      double v48 = v16;
      __int16 v49 = 2048;
      double v50 = v17;
      __int16 v51 = 2048;
      double v52 = v18;
      __int16 v53 = 1024;
      BOOL v54 = v4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "initialized down,%u,q.x,%f,q.y,%f,q.z,%f,q.w,%f, withAvgGrav, %d", buf, 0x36u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102303428);
      }
      int v24 = *(unsigned __int8 *)(a1 + 10);
      double v25 = *(float *)(a1 + 12);
      double v26 = *(float *)(a1 + 16);
      double v27 = *(float *)(a1 + 20);
      double v28 = *(float *)(a1 + 24);
      int v32 = 67110400;
      int v33 = v24;
      __int16 v34 = 2048;
      double v35 = v25;
      __int16 v36 = 2048;
      double v37 = v26;
      __int16 v38 = 2048;
      double v39 = v27;
      __int16 v40 = 2048;
      double v41 = v28;
      __int16 v42 = 1024;
      BOOL v43 = v4;
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CMSensorFusionMekfPhone::initializeAttitude()", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
  }
}

BOOL sub_100EFC870(uint64_t a1, float *a2, uint64_t a3, float32_t a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(v7 + 417))
  {
    if (!*(unsigned char *)(a1 + 10)) {
      goto LABEL_7;
    }
LABEL_6:
    float v19 = sub_100B9BC00((float *)(a1 + 12));
LABEL_8:
    float v16 = v19;
    float v17 = v20;
    float v18 = v21;
    *(float *)BOOL v43 = v19;
    goto LABEL_9;
  }
  BOOL v8 = sub_100B5CCA8(v7);
  if (*(unsigned char *)(a1 + 10)) {
    goto LABEL_6;
  }
  BOOL v15 = v8;
  uint64_t v7 = *(void *)(a1 + 56);
  if (v15)
  {
LABEL_7:
    float v19 = sub_100659AB4((unsigned __int16 *)(v7 + 8), 0, *(unsigned __int16 *)(v7 + 10));
    goto LABEL_8;
  }
  float v16 = *(float *)(v7 + 216);
  float v17 = *(float *)(v7 + 220);
  float v18 = *(float *)(v7 + 224);
  *(float *)BOOL v43 = v16;
LABEL_9:
  uint64_t v22 = 0;
  *(float *)&v43[1] = v17;
  *(float *)&v43[2] = v18;
  float v23 = 0.0;
  do
  {
    float v23 = v23 + (float)(*(float *)&v43[v22] * *(float *)&v43[v22]);
    ++v22;
  }
  while (v22 != 3);
  float v24 = sqrtf(v23);
  float v25 = fabsf(v24 + -1.0);
  if (v25 <= 1.0)
  {
    *(float32_t *)&double v28 = a4;
    *((float *)&v28 + 1) = (float)(v25 / v24) * (float)(v25 / v24);
    __asm { FMOV            V1.2S, #1.0 }
    int8x8_t v46 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3C3295EA3D23D70ALL, *(float32x2_t *)&v28), (int8x8_t)0x42B77C7A41C80000, (int8x8_t)vdiv_f32(_D1, *(float32x2_t *)&v28));
    v42.i64[0] = 0;
    v42.i64[1] = 0x3F80000000000000;
    LODWORD(v28) = *(_DWORD *)(a3 + 8);
    BOOL v27 = sub_100B9BF10((float *)&v46, &v42, (uint64_t)&v44, *a2, a2[1], a2[2], v16, v17, v18, v28, v14, v9, v10, v11, v12, v13, *(void *)a3, *(float *)&v28);
    if (v27)
    {
      if ((float32x4_t *)(a1 + 12) != &v42) {
        *(float32x4_t *)(a1 + 12) = v42;
      }
      uint64_t v34 = a1 + 28;
      if (!sub_100CF5F14(v34, (uint64_t)&v44))
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102303428);
        }
        double v35 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "invalid initial covariance !(P > 0), using default", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102303428);
          }
          __int16 v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "%s\n", v40);
          if (v40 != (char *)buf) {
            free(v40);
          }
        }
        int v49 = 973279855;
        *(_OWORD *)buf = xmmword_101D9688C;
        long long v48 = unk_101D9689C;
        sub_100CF5F14(v34, (uint64_t)buf);
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102303428);
      }
      __int16 v36 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "initializeState northAndGravity failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102303428);
        }
        double v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102303428);
    }
    double v26 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "initializeState MaxInitialDiffUnity failed,magnitude,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102303428);
      }
      int v44 = 134217984;
      double v45 = v24;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMSensorFusionMekfPhone::initializeState(const CMVector3d &, const CMVector3d &, float)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    return 0;
  }
  return v27;
}

void sub_100EFCE18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(_WORD *)(v1 + 10))
  {
    sub_100CF62B8((unsigned __int16 *)(v1 + 8));
    sub_100B9BC00((float *)(a1 + 12));
  }
}

double sub_100EFCE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v14 = *(void *)a2;
  __int32 v15 = *(_DWORD *)(a2 + 8);
  do
  {
    *(float *)((char *)&v14 + v6) = -*(float *)((char *)&v14 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  v13.i64[0] = v14;
  v13.i32[2] = v15;
  sub_100B5CE48(v13.f32, (uint64_t)&v14);
  *(float *)(a1 + 64) = sub_1004E301C((uint64_t)&v14, (float *)(a1 + 64));
  *(_DWORD *)(a1 + 68) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  sub_100CF6680(a1 + 28, (uint64_t)&v14, a3);
  *(double *)v9.i64 = sub_100B9BDF4(&v13, (float *)a2);
  uint64_t v10 = (float32x4_t *)(a1 + 12);
  double result = sub_100B9BB80((uint64_t)&v13, v10->f32, &v12, v9);
  if (v10 != &v12)
  {
    double result = *(double *)v12.i64;
    *uint64_t v10 = v12;
  }
  return result;
}

double sub_100EFCF68(void *a1, int a2, unint64_t a3)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 64))(a1)) {
    return result;
  }
  unint64_t v7 = *(void *)(a1[7] + 408);
  BOOL v8 = a3 >= v7;
  unint64_t v9 = a3 - v7;
  if (v9 == 0 || !v8) {
    return result;
  }
  double result = (double)v9 * 0.000001;
  *(float *)&double result = result;
  if (*(float *)&result <= 0.0) {
    return result;
  }
  if (a2 == 2 || a2 == 1)
  {
    int v10 = 833342583;
    goto LABEL_18;
  }
  int v10 = 0;
  if (a2)
  {
LABEL_18:
    *(_DWORD *)buf = v10;
    int v16 = v10;
    int v17 = v10;
    uint64_t v13 = 0;
    int v14 = 0;
    return sub_100EFCE8C((uint64_t)a1, (uint64_t)&v13, (uint64_t)buf);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102303428);
  }
  uint64_t v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "invalid quiescentState kInMotion, ignoring quiescent", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102303428);
    }
    LOWORD(v13) = 0;
    float32x4_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CMSensorFusionMekfPhone::feedQuiescent(CMDeviceMotionInputs::QuiescentState, uint64_t)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return result;
}

void sub_100EFD190(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    uint64_t v6 = *(void *)(a1 + 56);
    unint64_t v7 = *(void *)(v6 + 408);
    BOOL v8 = a3 >= v7;
    unint64_t v9 = a3 - v7;
    if (v9 != 0 && v8)
    {
      float v10 = (double)v9 * 0.000001;
      if (v10 > 0.0)
      {
        float32x2_t v11 = vsub_f32(*a2, *(float32x2_t *)(v6 + 444));
        float v12 = a2[1].f32[0] - *(float *)(v6 + 452);
        float32x2_t v43 = v11;
        float v44 = v12;
        float v13 = vaddv_f32(vmul_f32(v11, v11));
        float v14 = v12 * v12;
        uint64_t v41 = 0;
        int v42 = 0;
        float v38 = (double)v9 * 0.000001;
        if (*(unsigned char *)(a1 + 9))
        {
          unint64_t v15 = 0;
          float32x2_t v45 = vmul_f32(v11, (float32x2_t)vdup_n_s32(0x3D23D70Au));
          float v46 = v12 * 0.04;
          do
          {
            int v16 = (float *)sub_1004E4930((uint64_t)&v45, v15);
            float v17 = fminf(fmaxf(*v16 * *v16, 0.0027416), 9.8696);
            *(float *)sub_1004E4930((uint64_t)&v41, v15++) = v17;
          }
          while (v15 != 3);
          *(unsigned char *)(a1 + 9) = 0;
          float v10 = v38;
        }
        unint64_t v18 = 0;
        float v19 = v13 + v14;
        float v20 = v10 * v10;
        float v21 = (float)(v10 * 0.0017) * (float)(v10 * 0.0017);
        float v22 = (float)(v10 * 17.453) * (float)(v10 * 17.453);
        do
        {
          float v23 = (float)(v20 * sub_1004E30E4(*(void *)(a1 + 56) + 420, v18)) + (float)(v38 * 0.000000010966);
          float v24 = sub_1004E30E4((uint64_t)&v43, v18);
          float v25 = v23 + (float)((float)((float)(v24 * 0.00033) * v38) * (float)((float)(v24 * 0.00033) * v38));
          float v26 = sub_1004E30E4((uint64_t)&v43, v18);
          float v27 = v25 + (float)((float)(v19 - (float)(v26 * v26)) * v21);
          float v28 = sub_1004E30E4((uint64_t)&v43, v18);
          if (v28 <= 0.0) {
            float v29 = -v28;
          }
          else {
            float v29 = v28;
          }
          BOOL v30 = v29 <= sub_100EFF5F8();
          float v31 = 0.0;
          if (!v30) {
            float v31 = v22;
          }
          float v32 = *(float *)sub_1004E4930((uint64_t)&v41, v18) + (float)(v27 + v31);
          *(float *)sub_1004E4930((uint64_t)&v45, v18++) = v32;
        }
        while (v18 != 3);
        uint64_t v33 = *(void *)(a1 + 56);
        float v34 = (float)((float)((float)(*(float *)(v33 + 464) + a2[1].f32[0]) * 0.5) - *(float *)(v33 + 452)) * v38;
        float32x2_t v39 = vmul_n_f32(vsub_f32(vmul_f32(vadd_f32(*(float32x2_t *)(v33 + 456), *a2), (float32x2_t)0x3F0000003F000000), *(float32x2_t *)(v33 + 444)), v38);
        float v40 = v34;
        sub_100EFCE8C(a1, (uint64_t)&v39, (uint64_t)&v45);
        uint64_t v35 = 0;
        if (a2->f32[0] <= 0.0) {
          float v36 = -a2->f32[0];
        }
        else {
          float v36 = a2->f32[0];
        }
        do
        {
          float v37 = a2->f32[v35 + 1];
          if (v37 <= 0.0) {
            float v37 = -v37;
          }
          if (v37 > v36) {
            float v36 = v37;
          }
          ++v35;
        }
        while (v35 != 2);
        if (v36 > sub_100EFF5F8()) {
          *(void *)(a1 + 80) = 1;
        }
      }
    }
  }
}

uint64_t sub_100EFD498(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if ((*(unsigned char *)(v3 + 820) || *(_DWORD *)(v3 + 276) == *(unsigned __int16 *)(v3 + 274))
    && *(_DWORD *)(v3 + 12) == *(unsigned __int16 *)(v3 + 10))
  {
    return sub_100EFD4D0(a1, a2, a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100EFD4D0(uint64_t a1, uint64_t a2, float *a3)
{
  sub_100659F10((unsigned __int16 *)(*(void *)(a1 + 56) + 8), 0, *(unsigned __int16 *)(*(void *)(a1 + 56) + 10));
  int v34 = v6;
  int v35 = v7;
  if (v5 <= 0.0) {
    float v8 = -v5;
  }
  else {
    float v8 = v5;
  }
  for (uint64_t i = 4; i != 12; i += 4)
  {
    float v10 = *(float *)((char *)&v33 + i);
    if (v10 <= 0.0) {
      float v10 = -v10;
    }
    if (v10 > v8) {
      float v8 = v10;
    }
  }
  float v11 = sub_100659AB4((unsigned __int16 *)(*(void *)(a1 + 56) + 8), 0, *(unsigned __int16 *)(*(void *)(a1 + 56) + 10));
  uint64_t v12 = 0;
  float v33 = v11;
  int v34 = v13;
  int v35 = v14;
  float v15 = 0.0;
  do
  {
    float v15 = v15 + (float)(*(float *)((char *)&v33 + v12) * *(float *)((char *)&v33 + v12));
    v12 += 4;
  }
  while (v12 != 12);
  float v16 = sqrtf(v8);
  float v17 = sqrtf(v15) + -1.0;
  uint64_t v18 = *(void *)(a1 + 56);
  float v19 = 0.0;
  if (*(unsigned char *)(v18 + 820))
  {
    float v20 = 0.0;
  }
  else
  {
    float v20 = sub_100B5CDA4(*(void *)(a1 + 56));
    uint64_t v18 = *(void *)(a1 + 56);
  }
  float v21 = fabsf(v17);
  float v22 = sub_100EFDCF8(flt_101D968B0, flt_101D968BC, 3, v16);
  float v23 = sub_100659AB4((unsigned __int16 *)(v18 + 8), 0, *(unsigned __int16 *)(v18 + 10));
  uint64_t v24 = 0;
  float v33 = v23;
  int v34 = v25;
  int v35 = v26;
  do
  {
    float v19 = v19 + (float)(*(float *)((char *)&v33 + v24) * *(float *)((char *)&v33 + v24));
    v24 += 4;
  }
  while (v24 != 12);
  float v27 = sub_100EFDCF8(flt_101D968C8, flt_101D968E4, 7, sqrtf(v19) + -1.0);
  BOOL v28 = v16 >= 0.1;
  if (v21 >= 0.12) {
    BOOL v28 = 1;
  }
  int v29 = v20 >= 0.05 || v28;
  if ((v29 & 1) == 0)
  {
    float v30 = sub_100EFDCF8(flt_101D96900, flt_101D9690C, 3, v20);
    if (v22 >= v27) {
      float v31 = v27;
    }
    else {
      float v31 = v22;
    }
    if (v31 < v30) {
      float v30 = v31;
    }
    *a3 = v30 * v30;
  }
  return v29 ^ 1u;
}

uint64_t sub_100EFD6D4(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a1[1].i8[2])
  {
    (*(void (**)(float32x2_t *))(*(void *)a1 + 160))(a1);
    return 0;
  }
  float32x2_t v4 = a1[7];
  int v5 = *(unsigned __int8 *)(*(void *)&v4 + 820);
  if (a1[1].i8[0]) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    int v5 = 0;
    a1[10] = (float32x2_t)1;
    a1[1].i8[1] = 1;
  }
  a1[1].i8[0] = v5 != 0;
  unint64_t v7 = (unint64_t)a1[10];
  if (v7)
  {
    float v8 = 1.0 / (float)v7;
    if (v8 < 0.001)
    {
      unint64_t v7 = 999;
      a1[10] = (float32x2_t)999;
      float v8 = 0.001;
    }
  }
  else
  {
    float v8 = 1.0;
  }
  if (*(unsigned char *)(*(void *)&v4 + 240))
  {
    float32_t v10 = (float)((float)(1.0 - v8) * a1[9].f32[0]) + (float)(v8 * *(float *)(*(void *)&v4 + 236));
    a1[8] = vadd_f32(vmul_n_f32(a1[8], 1.0 - v8), vmul_n_f32(*(float32x2_t *)(*(void *)&v4 + 228), v8));
    a1[9].f32[0] = v10;
    a1[10] = (float32x2_t)(v7 + 1);
  }
  float v40 = v8;
  float v42 = 0.0;
  char v11 = sub_100EFD498((uint64_t)a1, a3, &v42);
  float32x2_t v12 = a1[7];
  if ((v11 & 1) == 0 && !*(unsigned char *)(*(void *)&v12 + 820))
  {
    if (*(unsigned char *)(*(void *)&v12 + 240))
    {
      float v22 = (float)(v40 / 0.001) * 0.00030462;
      float v26 = 0.0;
      for (uint64_t i = 16; i != 19; ++i)
        float v26 = v26 + (float)(a1->f32[i] * a1->f32[i]);
      float v28 = sqrtf(v26);
      float v29 = v28 + -1.0;
      if ((float)(v28 + -1.0) <= 0.0) {
        float v29 = -(float)(v28 + -1.0);
      }
      float v30 = acosf(1.0 / (float)(v29 + 1.0));
      if (v28 < 1.0 && v30 <= (float)((float)((float)(1.0 - v28) * 180.0) * 0.017453)) {
        float v30 = (float)((float)(1.0 - v28) * 180.0) * 0.017453;
      }
      uint64_t v31 = 0;
      float v32 = v30 * v30;
      if (v22 <= v32) {
        float v22 = v32;
      }
      float v34 = a1[8].f32[0];
      float v33 = a1[8].f32[1];
      float v35 = a1[9].f32[0];
      unint64_t v43 = __PAIR64__(LODWORD(v33), LODWORD(v34));
      float v44 = v35;
      float v36 = 0.0;
      do
      {
        float v36 = v36 + (float)(*(float *)((char *)&v43 + v31) * *(float *)((char *)&v43 + v31));
        v31 += 4;
      }
      while (v31 != 12);
      if (sqrtf(v36) > 0.00000011921)
      {
        uint64_t v37 = 0;
        float v38 = 0.0;
        do
        {
          float v38 = v38 + (float)(*(float *)((char *)&v43 + v37) * *(float *)((char *)&v43 + v37));
          v37 += 4;
        }
        while (v37 != 12);
        float v39 = sqrtf(v38);
        float v34 = v34 / v39;
        float v33 = v33 / v39;
        float v35 = v35 / v39;
      }
      unint64_t v43 = __PAIR64__(LODWORD(v33), LODWORD(v34));
      float v23 = (float *)&a1[1] + 1;
      float v44 = v35;
      goto LABEL_28;
    }
    return 0;
  }
  uint64_t v13 = sub_100EFDA20((unsigned __int16 *)(*(void *)&v12 + 8), 7uLL);
  uint64_t v14 = 0;
  __int32 v16 = *(_DWORD *)v13;
  float v15 = *(float *)(v13 + 4);
  float v17 = *(float *)(v13 + 8);
  LODWORD(v43) = *(_DWORD *)v13;
  *((float *)&v43 + 1) = v15;
  float v44 = v17;
  float v18 = 0.0;
  do
  {
    float v18 = v18 + (float)(*(float *)((char *)&v43 + v14) * *(float *)((char *)&v43 + v14));
    v14 += 4;
  }
  while (v14 != 12);
  if (sqrtf(v18) > 0.00000011921)
  {
    uint64_t v19 = 0;
    float v20 = 0.0;
    do
    {
      float v20 = v20 + (float)(*(float *)((char *)&v43 + v19) * *(float *)((char *)&v43 + v19));
      v19 += 4;
    }
    while (v19 != 12);
    float v21 = sqrtf(v20);
    *(float *)&__int32 v16 = *(float *)&v16 / v21;
    float v15 = v15 / v21;
    float v17 = v17 / v21;
  }
  unint64_t v43 = __PAIR64__(LODWORD(v15), v16);
  float v44 = v17;
  if (*(unsigned char *)(*(void *)&a1[7] + 820)) {
    float v22 = 0.1;
  }
  else {
    float v22 = v42;
  }
  float v23 = (float *)&a1[1] + 1;
LABEL_28:
  v41[0] = sub_100B9BC00(v23);
  v41[1] = v24;
  v41[2] = v25;
  sub_100EFDBE8((uint64_t)a1, (float32x2_t *)&v43, (uint64_t)v41, v22);
  return 1;
}

uint64_t sub_100EFDA20(unsigned __int16 *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102303428);
    }
    int v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 45,out of buffer range %zu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102303428);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const Element &CMVectorBufferBase<float, 3>::operator[](const size_t) const [T = float, N = 3]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_100659D10(a1, a2);
}

void sub_100EFDBE8(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4)
{
  float v5 = *(float *)(a3 + 8);
  float v6 = a2[1].f32[0] - v5;
  float32x2_t v7 = *(float32x2_t *)a3;
  float32x2_t v31 = vsub_f32(*a2, *(float32x2_t *)a3);
  float v32 = v6;
  float32x2_t v8 = *(float32x2_t *)(a3 + 4);
  v25[0] = 0;
  *(float *)&v25[1] = v5;
  float32x2_t v26 = vneg_f32(v8);
  int v27 = 0;
  float32x2_t v28 = v7;
  float v29 = -v7.f32[0];
  int v30 = 0;
  *(float *)int v24 = a4;
  *(float *)&v24[1] = a4;
  *(float *)&v24[2] = a4;
  sub_100CF7214((float *)(a1 + 28), (uint64_t)v25, (uint64_t)v24, (uint64_t)&v31);
  float v10 = v9;
  float v12 = v11;
  float v14 = v13;
  float v15 = (float32x4_t *)(a1 + 12);
  float v16 = sub_100B9BC00(v15->f32);
  float v19 = (float)((float)(v17 * v14) + (float)(v12 * v18)) + (float)(v10 * v16);
  v23[0] = v10 - (float)(v16 * v19);
  v23[1] = v12 - (float)(v18 * v19);
  v23[2] = v14 - (float)(v17 * v19);
  *(double *)v20.i64 = sub_100B9BDF4(&v22, v23);
  sub_100B9BB80((uint64_t)&v22, v15->f32, &v21, v20);
  if (v15 != &v21) {
    *float v15 = v21;
  }
}

float sub_100EFDCF8(float *a1, float *a2, uint64_t a3, float a4)
{
  if (*a1 >= a4) {
    return *a2;
  }
  uint64_t v4 = a3 - 1;
  if (a1[a3 - 1] <= a4) {
    return a2[v4];
  }
  if (a3 == 1) {
    return *a2;
  }
  float v5 = a1 + 1;
  for (uint64_t i = a2; ; ++i)
  {
    float v7 = *(v5 - 1);
    if (v7 <= a4)
    {
      float v8 = *v5;
      if (*v5 >= a4) {
        break;
      }
    }
    ++v5;
    if (!--v4) {
      return *a2;
    }
  }
  float v10 = v8 - v7;
  if ((float)(v8 - v7) <= 0.0)
  {
    float v11 = *i;
    float v12 = 0.0;
  }
  else
  {
    float v11 = *i;
    float v12 = (float)(i[1] - *i) / v10;
  }
  return v11 + (float)(v12 * (float)(a4 - v7));
}

void sub_100EFDD88()
{
}

uint64_t sub_100EFDD9C(uint64_t a1)
{
  return a1 + 12;
}

uint64_t sub_100EFDDA4(uint64_t a1)
{
  return *(void *)(a1 + 56) + 432;
}

BOOL sub_100EFDDB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  return *(unsigned char *)(v1 + 416) && *(void *)(v1 + 408) && *(unsigned char *)(a1 + 10) != 0;
}

void sub_100EFDDDC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100EFDE0C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t result = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t result = off_102303458;
  *(_WORD *)(result + 41) = 256;
  return result;
}

uint64_t sub_100EFDE48(uint64_t a1)
{
  *(void *)a1 = off_102303458;
  if (sub_1009E9C64())
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1023034A8);
    }
    uint64_t v2 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 138543362;
      uint64_t v30 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Service client is going away: %{public}@. Unregistering for MagicMount updates.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1023034A8);
      }
      uint64_t v11 = *(void *)(a1 + 24);
      int v27 = 138543362;
      uint64_t v28 = v11;
      float v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMagicMountSubscription::~CLMagicMountSubscription()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (*(unsigned char *)(a1 + 41))
    {
      *(unsigned char *)(a1 + 41) = 0;
      uint64_t v4 = sub_1009E9C64();
      sub_1009E9DF8(v4, *(unsigned char *)(a1 + 41));
      float v5 = (unsigned char *)sub_100ED9BA0();
      float v6 = *(void **)(a1 + 24);
      if (v6)
      {
        [v6 clientName];
      }
      else
      {
        uint64_t v26 = 0;
        *(_OWORD *)__p = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        *(_OWORD *)float v23 = 0u;
        long long v20 = 0u;
        *(_OWORD *)float32x4_t v21 = 0u;
        *(_OWORD *)float v18 = 0u;
        *(_OWORD *)float v19 = 0u;
        *(_OWORD *)float v16 = 0u;
        long long v17 = 0u;
        *(_OWORD *)float v15 = 0u;
      }
      sub_100ED9F54(v5, (uint64_t)v15, 0);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v23[0]);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[1]);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete(v19[1]);
      }
      if (SHIBYTE(v19[0]) < 0) {
        operator delete(v18[0]);
      }
      if (SHIBYTE(v17) < 0) {
        operator delete(v16[1]);
      }
      if (SHIBYTE(v16[0]) < 0) {
        operator delete(v15[0]);
      }
    }
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1023034A8);
    }
    float v7 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 42);
      *(_DWORD *)buf = 67240192;
      LODWORD(v30) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "fAPWake is %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1023034A8);
      }
      int v13 = *(unsigned __int8 *)(a1 + 42);
      int v27 = 67240192;
      LODWORD(v28) = v13;
      float v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMagicMountSubscription::~CLMagicMountSubscription()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (!*(unsigned char *)(a1 + 42))
    {
      *(unsigned char *)(a1 + 42) = 1;
      uint64_t v9 = sub_1009E9C64();
      sub_1009EAD38(v9, *(unsigned char *)(a1 + 42));
    }
  }
  sub_100029A7C(a1);
  return a1;
}

void sub_100EFE268(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EFE278(uint64_t a1)
{
  sub_100EFDE48(a1);

  operator delete();
}

void *sub_100EFE2B0@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_1023034D8;
  v5[1] = sub_100EFE468;
  v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageMagicMountServiceRequest");
  sub_100BFC8B8((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_1023034D8;
  v4[1] = sub_100EFE97C;
  _OWORD v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageMagicMountAPWakesAllowed");
  sub_100BFC8B8((uint64_t)v9, (uint64_t)v4);
  sub_100EFF1B0(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BFCDD4(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BFCDD4(v4);
  return sub_100BFCDD4(v5);
}

void sub_100EFE408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_100EFEF2C(v2 + i);
  sub_100BFCDD4((uint64_t *)va);
  sub_100BFCDD4(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100EFE468(uint64_t a1, CLConnectionMessage **a2)
{
  sub_10009C834(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v5 = CMMagicMountServiceEnable;
  if ([Dictionary objectForKey:CMMagicMountServiceEnable]
    && (id v6 = [Dictionary objectForKeyedSubscript:v5]) != 0)
  {
    uint64_t v7 = v6;
    if (sub_1009E9C64())
    {
      unsigned int v8 = [v7 BOOLValue];
      if ([Dictionary objectForKey:v5])
      {
        if (qword_102419070 != -1) {
          dispatch_once(&qword_102419070, &stru_1023034A8);
        }
        uint64_t v9 = qword_102419078;
        if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = *(void *)(a1 + 24);
          *(_DWORD *)buf = 67240450;
          *(_DWORD *)&uint8_t buf[4] = v8;
          __int16 v41 = 2114;
          uint64_t v42 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Incoming MagicMount service request: %{public}d, client: %{public}@", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419070 != -1) {
            dispatch_once(&qword_102419070, &stru_1023034A8);
          }
          uint64_t v18 = *(void *)(a1 + 24);
          int v34 = 67240450;
          unsigned int v35 = v8;
          __int16 v36 = 2114;
          uint64_t v37 = v18;
          float v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagicMountSubscription::handleMessageMagicMountServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        uint64_t v11 = sub_1009E9C64();
        if (sub_1009E9DF8(v11, v8))
        {
          *(unsigned char *)(a1 + 41) = v8;
          float v12 = (unsigned char *)sub_100ED9BA0();
          int v13 = *(void **)(a1 + 24);
          if (v13)
          {
            [v13 clientName];
          }
          else
          {
            uint64_t v31 = 0;
            *(_OWORD *)__p = 0u;
            long long v30 = 0u;
            long long v27 = 0u;
            *(_OWORD *)uint64_t v28 = 0u;
            long long v25 = 0u;
            *(_OWORD *)uint64_t v26 = 0u;
            *(_OWORD *)float v23 = 0u;
            *(_OWORD *)int v24 = 0u;
            *(_OWORD *)float32x4_t v21 = 0u;
            long long v22 = 0u;
            *(_OWORD *)long long v20 = 0u;
          }
          sub_100ED9F54(v12, (uint64_t)v20, v8);
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[1]);
          }
          if (SHIBYTE(__p[0]) < 0) {
            operator delete(v28[0]);
          }
          if (SHIBYTE(v27) < 0) {
            operator delete(v26[1]);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(v24[1]);
          }
          if (SHIBYTE(v24[0]) < 0) {
            operator delete(v23[0]);
          }
          if (SHIBYTE(v22) < 0) {
            operator delete(v21[1]);
          }
          if (SHIBYTE(v21[0]) < 0) {
            operator delete(v20[0]);
          }
          uint64_t v16 = 100;
        }
        else
        {
          uint64_t v16 = 108;
        }
        uint64_t v32 = CMErrorMessage;
        float v33 = +[NSNumber numberWithUnsignedInt:v16];
        *(void *)buf = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
        sub_100EFEF68(a1);
      }
    }
    else
    {
      uint64_t v38 = CMErrorMessage;
      float v39 = &off_102393680;
      +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1023034A8);
    }
    float v14 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1023034A8);
      }
      LOWORD(v34) = 0;
      float v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMagicMountSubscription::handleMessageMagicMountServiceRequest(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  return sub_10009C834(a1);
}

void sub_100EFE960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EFE97C(uint64_t a1, CLConnectionMessage **a2)
{
  sub_10009C834(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v5 = CMMagicMountAPWakesAllowed;
  if (![Dictionary objectForKey:CMMagicMountAPWakesAllowed]
    || (id v6 = [Dictionary objectForKeyedSubscript:v5]) == 0)
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1023034A8);
    }
    uint64_t v11 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1023034A8);
      }
      LOWORD(v22) = 0;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    goto LABEL_19;
  }
  uint64_t v7 = v6;
  if (!sub_1009E9C64())
  {
    uint64_t v28 = CMErrorMessage;
    float v29 = &off_102393680;
    +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    CLConnectionMessage::sendReply();
LABEL_19:
    sub_10009C834(a1);
    return;
  }
  unsigned int v8 = [v7 BOOLValue];
  if (*(unsigned __int8 *)(a1 + 42) != v8)
  {
    unsigned int v12 = v8;
    if ([Dictionary objectForKey:v5])
    {
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_1023034A8);
      }
      int v13 = qword_102419078;
      if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 24);
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&uint8_t buf[4] = v12;
        __int16 v31 = 2114;
        uint64_t v32 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Incoming MagicMount setAPWakesAllowed request: %{public}d, client: %{public}@", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419070 != -1) {
          dispatch_once(&qword_102419070, &stru_1023034A8);
        }
        uint64_t v18 = *(void *)(a1 + 24);
        int v22 = 67240450;
        unsigned int v23 = v12;
        __int16 v24 = 2114;
        uint64_t v25 = v18;
        float v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      uint64_t v15 = sub_1009E9C64();
      if (sub_1009EAD38(v15, v12))
      {
        *(unsigned char *)(a1 + 42) = v12;
        uint64_t v16 = 100;
      }
      else
      {
        uint64_t v16 = 108;
      }
      uint64_t v20 = CMErrorMessage;
      float32x4_t v21 = +[NSNumber numberWithUnsignedInt:v16];
      *(void *)buf = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
      sub_100EFEF68(a1);
    }
    goto LABEL_19;
  }
  uint64_t v26 = CMErrorMessage;
  long long v27 = &off_102393698;
  +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
  CLConnectionMessage::sendReply();
  if (qword_102419070 != -1) {
    dispatch_once(&qword_102419070, &stru_1023034A8);
  }
  uint64_t v9 = qword_102419078;
  if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Already set AP wakes for this client", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1023034A8);
    }
    LOWORD(v22) = 0;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMagicMountSubscription::handleMessageMagicMountAPWakesAllowed(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

uint64_t sub_100EFEF2C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100EFEF68(uint64_t a1)
{
  sub_10048C758(&off_102303558, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100EFEFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EFEFEC(id a1)
{
  qword_102419078 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

__n128 sub_100EFF01C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023034D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100EFF068(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023034D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100EFF098(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100EFF0A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100EFF0E0()
{
}

void sub_100EFF0EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100EFF18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EFF1B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100EFF22C(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100EFF218(_Unwind_Exception *a1)
{
  sub_100BFCE58(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100EFF22C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100EFF4B0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100EFF5A0((uint64_t)v25, 0);
  return i;
}

void sub_100EFF498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100EFF5A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100EFF4B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100EFF528(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100EFF510(_Unwind_Exception *a1)
{
  sub_100EFF5A0(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100EFF528(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BFC610((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100EFF584(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EFF5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BFCED8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

float sub_100EFF5F8()
{
  return 27.925;
}

void sub_100EFF608(void *a1)
{
  sub_10014D414(a1);

  operator delete();
}

uint64_t sub_100EFF648(double *a1, double a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102303600);
  }
  long long v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_10016BA10();
    *(_DWORD *)buf = 0;
    double v6 = sub_10016BA54(v5, buf);
    uint64_t v7 = *((void *)a1 + 382);
    uint64_t v8 = *((void *)a1 + 63);
    uint64_t v9 = *((void *)a1 + 254);
    uint64_t v10 = *((void *)a1 + 384);
    *(_DWORD *)buf = 134219264;
    double v25 = v6;
    __int16 v26 = 2048;
    double v27 = a2;
    __int16 v28 = 2048;
    uint64_t v29 = v7;
    __int16 v30 = 2048;
    uint64_t v31 = v8;
    __int16 v32 = 2048;
    uint64_t v33 = v9;
    __int16 v34 = 2048;
    uint64_t v35 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%.1lf,DeadReckoning,%.2lf,fLastPASCDVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTime,%.2lf,fLastGPSPropagationTime,%.2lf", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102303600);
    }
    sub_1005BFA38();
    unint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL PropagationDataHistory::shallPropagateAccessory(const CFTimeInterval)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  double v11 = a1[384];
  BOOL v16 = v11 < 0.0;
  double v12 = vabdd_f64(a2, v11);
  BOOL v13 = !v16 && v12 <= 3.0;
  if (v13) {
    goto LABEL_14;
  }
  double v14 = a1[382];
  BOOL v13 = v14 <= 0.0;
  double v15 = vabdd_f64(a2, v14);
  BOOL v16 = !v13 && v15 < 10.0;
  if (!v16
    || ((v19 = a1[63], BOOL v13 = v19 <= 0.001, v20 = vabdd_f64(a2, v19), !v13) ? (v21 = v20 < 3.0) : (v21 = 1),
        v21 || (BOOL v18 = a1 + 382, v22 = a1[254], v22 >= 0.001) && vabdd_f64(a2, v22) < 3.0))
  {
LABEL_14:
    uint64_t result = 0;
    BOOL v18 = a1 + 382;
  }
  else
  {
    uint64_t result = 1;
  }
  *BOOL v18 = a2;
  return result;
}

BOOL sub_100EFF914(uint64_t a1, double a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102303600);
  }
  long long v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_10016BA10();
    *(_DWORD *)buf = 0;
    double v6 = sub_10016BA54(v5, buf);
    uint64_t v7 = *(void *)(a1 + 3064);
    uint64_t v8 = sub_10016BA10();
    double v9 = sub_10018202C(v8);
    *(_DWORD *)buf = 134218752;
    double v15 = v6;
    __int16 v16 = 2048;
    double v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    __int16 v20 = 2050;
    double v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%.1lf,DeadReckoning,%.2lf,fLastAccessoryPropagationTime,%.2lf,propagation_us,%{public}.3f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102303600);
    }
    sub_1005BFA38();
    uint64_t v12 = sub_10016BA10();
    sub_10018202C(v12);
    BOOL v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL PropagationDataHistory::shallPropagateGPS(const CFTimeInterval)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  double v10 = *(double *)(a1 + 3064);
  return v10 < 0.0 || vabdd_f64(a2, v10) > 3.0;
}

double sub_100EFFB6C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1 + 1528;
  if (a2 == 3) {
    uint64_t v3 = a1;
  }
  *(_DWORD *)(a3 + 84) = *(_DWORD *)(v3 + 84);
  *(void *)(a3 + 128) = *(void *)(v3 + 128);
  double result = *(double *)(v3 + 88);
  *(double *)(a3 + 88) = result;
  return result;
}

void sub_100EFFB94(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100EFFBC4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100B0505C(a1, a2);
  *uint64_t v3 = off_102303630;
  v3[14] = 0;
  v3[15] = 0;
  sub_1009E3F54((uint64_t)(v3 + 16));
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = 0xBFF0000000000000;
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 176) = 1;
  *(void *)(a1 + 184) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 200) = 0u;
  *(unsigned char *)(a1 + 192) = 1;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 289) = 0u;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  sub_1000C7F88(&__p);
  v7[0] = 0;
  int v4 = sub_1000D2988((uint64_t)__p, "CLTSPEnableDeviceMotionVDRNotifications", v7);
  if (v7[0]) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v5) {
    operator new();
  }
  return a1;
}

void sub_100F0009C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v26 = *(void *)(v18 + 328);
  *(void *)(v18 + 328) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *v24;
  *__int16 v24 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_1000D816C((void *)(v21 + 96));
  sub_100F02FAC((void *)(v21 + 48));
  sub_100F021BC(v22, 0);
  sub_1006CEDB0((void **)v21, 0);
  nullsub_41(v20, v28);
  sub_1006677A0(v19, 0);
  uint64_t v29 = *v23;
  *unint64_t v23 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  sub_100B05148(v18);
  _Unwind_Resume(a1);
}

void sub_100F00228()
{
}

void sub_100F00234(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102303728);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    int v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVDR2DofNotifierFromSR::maintainEstimatorState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102303728);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      double v11 = "";
      __int16 v12 = 2082;
      BOOL v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVDR2DofNotifierFromSR::maintainEstimatorState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100F00794(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F003E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F00408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102303728);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVDR2DofNotifierFromSR::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102303728);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVDR2DofNotifierFromSR::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F026A0(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F005BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F005DC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 5 && (*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1) {
    sub_1009E3F64(a4 + 128, *(double *)(a3 + 184), *(double *)(a3 + 504));
  }
}

uint64_t sub_100F00610(uint64_t a1)
{
  *(void *)a1 = off_102303630;
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:1];
  }
  uint64_t v3 = *(void *)(a1 + 312);
  if (v3) {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:5];
  }
  uint64_t v4 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1000D816C((void *)(a1 + 256));
  sub_100F02FAC((void *)(a1 + 208));
  sub_100F021BC((void **)(a1 + 200), 0);
  sub_1006CEDB0((void **)(a1 + 160), 0);
  nullsub_41(a1 + 128, v6);
  sub_1006677A0((uint64_t *)(a1 + 120), 0);
  uint64_t v7 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return sub_100B05148(a1);
}

void sub_100F0075C(uint64_t a1)
{
  sub_100F00610(a1);

  operator delete();
}

void sub_100F00794(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 328))
  {
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    uint64_t v4 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState taking power assertion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      __int16 v15 = 0;
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_100EBC6AC(*(void *)(a1 + 328));
    uint64_t v5 = *(void *)(a1 + 328);
    sub_100134750(__p, "none");
    sub_100EBBFD8(v5, (uint64_t *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(unsigned char *)(a1 + 304))
  {
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    uint64_t v6 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::maintainEstimatorState initiating/extending sensor recorder subscription", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      __int16 v15 = 0;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v7 = *(void *)(a1 + 320);
    if (v7)
    {
      sub_10131EF70(v7, 0, 600.0);
      sub_10131EF70(*(void *)(a1 + 320), 1u, 600.0);
    }
  }
  if (a2)
  {
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    uint64_t v8 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP,  CLVDR2DofNotifierFromSR::maintainEstimatorState setting next timer fire date", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      __int16 v15 = 0;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::maintainEstimatorState(CLPersistentTimer *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1001165F8(a2, Current + 120.0);
  }
}

void sub_100F00C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F00C44(uint64_t result)
{
  uint64_t v1 = (int64x2_t *)result;
  uint64_t v2 = result + 208;
  uint64_t v3 = result + 256;
  while (1)
  {
    uint64_t v4 = v1[18].i64[1];
    if (!v1[15].i64[1]) {
      break;
    }
    uint64_t v5 = v1[13].i64[1];
    unint64_t v6 = v1[15].u64[0];
    unint64_t v7 = v6 / 0xCC;
    if (!v4)
    {
      unint64_t v9 = v6 % 0xCC;
      uint64_t v8 = *(void *)(v5 + 8 * v7);
      unint64_t v10 = *(void *)(v8 + 20 * (v6 % 0xCC) + 12);
      goto LABEL_10;
    }
    uint64_t v8 = *(void *)(v5 + 8 * v7);
    unint64_t v9 = v6 % 0xCC;
    unint64_t v10 = *(void *)(v8 + 20 * (v6 % 0xCC) + 12);
    unint64_t v11 = v1[18].u64[0];
    uint64_t v12 = *(void *)(v1[16].i64[1] + 8 * (v11 / 0xAA));
    unint64_t v13 = v11 % 0xAA;
    unint64_t v14 = *(void *)(v12 + 24 * v13 + 16);
    if (v10 >= v14)
    {
LABEL_8:
      __int16 v16 = (float32x2_t *)(v12 + 24 * v13);
      float32x2_t v18 = *v16;
      __int32 v19 = v16[1].i32[0];
      sub_101429264(v1[12].i64[1], &v18, (double)v14 / 1000000.0);
      v1[18] = vaddq_s64(v1[18], (int64x2_t)xmmword_101D0A740);
      double result = sub_10041FD7C(v3, 1);
    }
    else
    {
LABEL_10:
      double v17 = (float32x2_t *)(v8 + 20 * v9);
      float32x2_t v18 = *v17;
      __int32 v19 = v17[1].i32[0];
      sub_1014293E4((float32x2_t *)v1[12].i64[1], &v18, (double)v10 / 1000000.0);
      v1[15] = vaddq_s64(v1[15], (int64x2_t)xmmword_101D0A740);
      double result = sub_100F03054(v2, 1);
    }
  }
  if (v4)
  {
    unint64_t v15 = v1[18].u64[0];
    unint64_t v13 = v15 % 0xAA;
    uint64_t v12 = *(void *)(v1[16].i64[1] + 8 * (v15 / 0xAA));
    unint64_t v14 = *(void *)(v12 + 24 * (v15 % 0xAA) + 16);
    goto LABEL_8;
  }
  return result;
}

double sub_100F00DF8(uint64_t a1)
{
  double result = __chkstk_darwin(a1);
  if (*(unsigned char *)(v1 + 176))
  {
    uint64_t v3 = v1;
    if (*(unsigned char *)(v1 + 192))
    {
      double result = *(double *)(v1 + 184);
      if (result > *(double *)(v1 + 168))
      {
        if (qword_102419500 != -1) {
          dispatch_once(&qword_102419500, &stru_102303748);
        }
        uint64_t v4 = qword_102419508;
        if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
        {
          if (!*(unsigned char *)(v3 + 176) || !*(unsigned char *)(v3 + 192)) {
            sub_10020D700();
          }
          uint64_t v5 = *(void *)(v3 + 168);
          uint64_t v6 = *(void *)(v3 + 184);
          buf[0] = 134349312;
          *(void *)&buf[1] = v5;
          __int16 v11 = 2050;
          uint64_t v12 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData, requesting data from %{public}.1f to %{public}.1f", (uint8_t *)buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419500 != -1) {
            dispatch_once(&qword_102419500, &stru_102303748);
          }
          if (!*(unsigned char *)(v3 + 176)) {
            sub_10020D700();
          }
          if (!*(unsigned char *)(v3 + 192)) {
            sub_10020D700();
          }
          uint64_t v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
        }
        sub_100F021BC((void **)(v3 + 200), 0);
        if (qword_102419500 != -1) {
          dispatch_once(&qword_102419500, &stru_102303748);
        }
        unint64_t v7 = qword_102419508;
        if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#VDR,allocating DeviceMotionSource processor", (uint8_t *)buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419500 != -1) {
            dispatch_once(&qword_102419500, &stru_102303748);
          }
          unint64_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::fetchAndProcessRecordedSensorData()", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
        }
        operator new();
      }
    }
  }
  return result;
}

void sub_100F02154(_Unwind_Exception *a1)
{
}

void **sub_100F021BC(void **result, void *a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    sub_100F03190(v2 + 233);
    v2[114] = off_1022C0070;
    *uint64_t v2 = off_1022E7AD8;
    operator delete();
  }
  return result;
}

__n128 sub_100F02260(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 204 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F03214(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xCC)) + 20 * (v7 % 0xCC));
  __n128 result = *a2;
  v8[1].n128_u32[0] = a2[1].n128_u32[0];
  *uint64_t v8 = result;
  ++a1[5];
  return result;
}

__n128 sub_100F02318(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F0352C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v8 = result;
  ++a1[5];
  return result;
}

void sub_100F023C8(uint64_t a1, float *a2, float *a3, float *a4, double a5)
{
  if (!*(void *)(a1 + 160))
  {
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    unint64_t v10 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no estimator is instantiated.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    LOWORD(v13[0]) = 0;
LABEL_21:
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::handleDeviceMotionData(const CMOQuaternion &, const CMVector3d &, const CMVector3d &, double)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
    return;
  }
  v13[0] = -1.0;
  if (sub_1009E4168(a1 + 128, v13, a5))
  {
    sub_1009FD500(*(void *)(a1 + 160), a2, a3, v13[0], (uint64_t)a4, a4);
    return;
  }
  if (a5 - *(double *)(a1 + 152) > 1.0)
  {
    *(double *)(a1 + 152) = a5;
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    __int16 v11 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::handleDeviceMotionData: Warning - received CLDeviceMotion while no Mach to GPS conversion is available.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      goto LABEL_21;
    }
  }
}

double sub_100F026A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(a4 + 100);
  int isTypeInVehicle = CLMotionActivity::isTypeInVehicle();
  if (v5 > 0) {
    int v7 = 1;
  }
  else {
    int v7 = isTypeInVehicle;
  }
  if (sub_1001198CC() != 1) {
    int v7 = 0;
  }
  int v9 = *(unsigned __int8 *)(a1 + 304);
  *(unsigned char *)(a1 + 304) = v7;
  if (v9 != v7)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (v7)
    {
      *(double *)(a1 + 168) = Current;
      *(unsigned char *)(a1 + 176) = 1;
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      __int16 v11 = qword_102419508;
      if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
      {
        if (!*(unsigned char *)(a1 + 176)) {
          goto LABEL_34;
        }
        uint64_t v12 = *(void *)(a1 + 168);
        *(_DWORD *)buf = 134349056;
        uint64_t v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, requesting start sensor recording from %{public}.1f", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_14:
        uint64_t v13 = *(void *)(a1 + 120);
        if (v13) {
          sub_100F00794(a1, v13);
        }
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      if (*(unsigned char *)(a1 + 176))
      {
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        goto LABEL_14;
      }
LABEL_34:
      sub_10020D700();
    }
    *(double *)(a1 + 184) = Current;
    *(unsigned char *)(a1 + 192) = 1;
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    unint64_t v14 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      if (!*(unsigned char *)(a1 + 192)) {
        goto LABEL_34;
      }
      uint64_t v15 = *(void *)(a1 + 184);
      *(_DWORD *)buf = 134349056;
      uint64_t v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, no longer required sensor recording from %{public}.1f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      if (!*(unsigned char *)(a1 + 192)) {
        goto LABEL_34;
      }
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return sub_100F00DF8(a1);
  }
  return result;
}

void sub_100F02A34(uint64_t a1, uint64_t *a2)
{
  if (sub_100F02EAC(a1, (double *)a2))
  {
    long long v4 = *((_OWORD *)a2 + 1);
    v37[0] = *(_OWORD *)a2;
    v37[1] = v4;
    v37[2] = *((_OWORD *)a2 + 2);
    uint64_t v38 = a2[6];
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    int v5 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      uint64_t v10 = a2[4];
      uint64_t v11 = a2[5];
      uint64_t v12 = a2[6];
      *(_DWORD *)buf = 134350592;
      uint64_t v54 = v6;
      __int16 v55 = 2050;
      uint64_t v56 = v7;
      __int16 v57 = 2050;
      uint64_t v58 = v8;
      __int16 v59 = 2050;
      uint64_t v60 = v9;
      __int16 v61 = 2050;
      uint64_t v62 = v10;
      __int16 v63 = 2050;
      uint64_t v64 = v11;
      __int16 v65 = 2050;
      uint64_t v66 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#VDR,CLVDR2DofNotifier,SR,measurement,timestamp_s,%{public}.3f,dataPeriod_s,%{public}.3f,deltaCourse_rad,%{public}.6f,deltaSpeed_mps,%{public}.6f,deltaCourseVar_rad2,%{public}.6f,deltaSpeedVar_mps2,%{public}.6f,deltaCourseSpeedCov_radmps,%{public}.6f", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      uint64_t v21 = *a2;
      uint64_t v22 = a2[1];
      uint64_t v23 = a2[2];
      uint64_t v24 = a2[3];
      uint64_t v25 = a2[4];
      uint64_t v26 = a2[5];
      uint64_t v27 = a2[6];
      int v39 = 134350592;
      uint64_t v40 = v21;
      __int16 v41 = 2050;
      uint64_t v42 = v22;
      __int16 v43 = 2050;
      uint64_t v44 = v23;
      __int16 v45 = 2050;
      uint64_t v46 = v24;
      __int16 v47 = 2050;
      uint64_t v48 = v25;
      __int16 v49 = 2050;
      uint64_t v50 = v26;
      __int16 v51 = 2050;
      uint64_t v52 = v27;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v37, 0, 0xFFFFFFFFLL, 0);
  }
  else
  {
    if (qword_102419500 != -1) {
      dispatch_once(&qword_102419500, &stru_102303748);
    }
    uint64_t v13 = qword_102419508;
    if (os_log_type_enabled((os_log_t)qword_102419508, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *a2;
      uint64_t v15 = a2[1];
      uint64_t v16 = a2[2];
      uint64_t v17 = a2[3];
      uint64_t v18 = a2[4];
      uint64_t v19 = a2[5];
      uint64_t v20 = a2[6];
      *(_DWORD *)buf = 134350592;
      uint64_t v54 = v14;
      __int16 v55 = 2050;
      uint64_t v56 = v15;
      __int16 v57 = 2050;
      uint64_t v58 = v16;
      __int16 v59 = 2050;
      uint64_t v60 = v17;
      __int16 v61 = 2050;
      uint64_t v62 = v18;
      __int16 v63 = 2050;
      uint64_t v64 = v19;
      __int16 v65 = 2050;
      uint64_t v66 = v20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#VDR,CLVDR2DofNotifierFromSR, Warning, invalid measurement,timestamp,%{public}.3f,dataPeriod,%{public}.3f,deltaCourse,%{public}.6f,deltaSpeed,%{public}.6f,courseVar,%{public}.6f,speedVar,%{public}.6f,deltaCourseSpeedCovar,%{public}.6f", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419500 != -1) {
        dispatch_once(&qword_102419500, &stru_102303748);
      }
      uint64_t v29 = *a2;
      uint64_t v30 = a2[1];
      uint64_t v31 = a2[2];
      uint64_t v32 = a2[3];
      uint64_t v33 = a2[4];
      uint64_t v34 = a2[5];
      uint64_t v35 = a2[6];
      int v39 = 134350592;
      uint64_t v40 = v29;
      __int16 v41 = 2050;
      uint64_t v42 = v30;
      __int16 v43 = 2050;
      uint64_t v44 = v31;
      __int16 v45 = 2050;
      uint64_t v46 = v32;
      __int16 v47 = 2050;
      uint64_t v48 = v33;
      __int16 v49 = 2050;
      uint64_t v50 = v34;
      __int16 v51 = 2050;
      uint64_t v52 = v35;
      __int16 v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVDR2DofNotifierFromSR::onVDR2DoFMeasurement(const CLVDR2DofMeasurement &)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
  }
}

BOOL sub_100F02EAC(uint64_t a1, double *a2)
{
  double v2 = a2[1];
  if (v2 == 0.0) {
    return 0;
  }
  BOOL v3 = v2 > 0.001 && v2 < 60.0;
  if (!v3 || fabs(a2[2]) > 3.14159265) {
    return 0;
  }
  BOOL result = 0;
  if (fabs(a2[3] / v2) <= 20.0)
  {
    double v5 = a2[4];
    if (v5 > 0.0)
    {
      double v6 = a2[5];
      if (v6 > 0.0) {
        return a2[6] * a2[6] <= v5 * 1.05 * v6;
      }
    }
  }
  return result;
}

void sub_100F02F4C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F02F7C(id a1)
{
  qword_102419508 = (uint64_t)os_log_create("com.apple.locationd.Position", "VDR");
}

uint64_t sub_100F02FAC(void *a1)
{
  double v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      double v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 102;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 204;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_100F03054(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0xCC) {
    a2 = 1;
  }
  if (v2 < 0x198) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 204;
  }
  return v4 ^ 1u;
}

void *sub_100F030B4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_102303778;
  result[1] = v3;
  return result;
}

uint64_t sub_100F030FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102303778;
  a2[1] = v2;
  return result;
}

uint64_t sub_100F03128(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, double))(a1 + 8))(*a2, a3, a4, a5, *a6);
}

uint64_t sub_100F03144(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1023037F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100F03184()
{
  return &off_1023037F8;
}

void *sub_100F03190(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100F03214(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xCC;
  unint64_t v4 = v2 - 204;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100F034E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100F0352C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100F037F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100F03844()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D96BF8;
      v0[3] = unk_101D96C08;
      v0[4] = xmmword_101D96C18;
      v0[0] = xmmword_101D96BD8;
      v0[1] = unk_101D96BE8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100F03924(_Unwind_Exception *a1)
{
}

void sub_100F03B70(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100F03BA0(void *result, uint64_t a2, uint64_t a3)
{
  *BOOL result = a2;
  result[1] = a3;
  return result;
}

BOOL sub_100F03BA8(void *a1)
{
  return *a1 && a1[1] != 0;
}

void sub_100F03D2C(uint64_t *a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  unint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v3 = a1;
    }
    else {
      BOOL v3 = (uint64_t *)*a1;
    }
    *(_DWORD *)buf = 136380675;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SettingsMap,create,root,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::shared_ptr<RootNode> CLMASettingsMap::RootNode::create(const std::string &)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  operator new();
}

void sub_100F03F50()
{
}

void sub_100F03F7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10009AFB0(&v32, (void *)(a1 + 32));
  uint64_t v6 = v33;
  if (!v33 || v33->__shared_owners_ == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v17 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      *(_DWORD *)buf = 136380675;
      uint64_t v39 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,root,%{private}s,failed to get shared this", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      unint64_t v22 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        unint64_t v22 = (void *)*v22;
      }
      int v34 = 136380675;
      uint64_t v35 = v22;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v7 = v32;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    v31[0] = v7;
    v31[1] = v6;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v33;
    v30[0] = v7;
    v30[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100F045D0((uint64_t *)a2, v31, v30, a3);
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    std::__shared_weak_count::__release_weak(v6);
    sub_1000DB0A0(v6);
    uint64_t v9 = a3[1];
    if (!v9 || *(void *)(v9 + 8) == -1)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        int64_t v20 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int64_t v20 = (void *)*v20;
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v21 = a2;
        }
        else {
          uint64_t v21 = *(void *)a2;
        }
        *(_DWORD *)buf = 136380931;
        uint64_t v39 = v20;
        __int16 v40 = 2081;
        uint64_t v41 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,failed to create branch", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_102303838);
        }
        uint64_t v24 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v24 = (void *)*v24;
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v25 = a2;
        }
        else {
          uint64_t v25 = *(void *)a2;
        }
        int v34 = 136380931;
        uint64_t v35 = v24;
        __int16 v36 = 2081;
        uint64_t v37 = v25;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v10 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v12 = a2;
        }
        else {
          uint64_t v12 = *(void *)a2;
        }
        *(_DWORD *)buf = 136380931;
        uint64_t v39 = v11;
        __int16 v40 = 2081;
        uint64_t v41 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#SettingsMap,addBranch,root,%{private}s,branch,%{private}s,successful", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_102303838);
        }
        uint64_t v27 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v27 = (void *)*v27;
        }
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v28 = a2;
        }
        else {
          uint64_t v28 = *(void *)a2;
        }
        int v34 = 136380931;
        uint64_t v35 = v27;
        __int16 v36 = 2081;
        uint64_t v37 = v28;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::shared_ptr<BranchNode> CLMASettingsMap::RootNode::addBranch(const std::string &)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      uint64_t v13 = *(void *)(a1 + 48);
      BOOL v14 = operator new(0x18uLL);
      uint64_t v16 = *a3;
      uint64_t v15 = a3[1];
      *BOOL v14 = v13;
      v14[1] = v16;
      v14[2] = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 48) = v14;
    }
  }
  if (v33) {
    sub_1000DB0A0(v33);
  }
}

void sub_100F04570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F045D0(uint64_t *a1@<X0>, std::__shared_weak_count **a2@<X1>, std::__shared_weak_count **a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a2[1];
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
    {
      uint64_t v8 = a3[1];
      if (v8)
      {
        if (v8->__shared_owners_ != -1)
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_102303838);
          }
          uint64_t v10 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)a1 + 23) >= 0) {
              uint64_t v11 = a1;
            }
            else {
              uint64_t v11 = (uint64_t *)*a1;
            }
            uint64_t v12 = std::__shared_weak_count::lock(a2[1]);
            p_shared_owners = &(*a2)->__shared_owners_;
            if (SHIBYTE((*a2)[1].__vftable) < 0) {
              p_shared_owners = (uint64_t *)*p_shared_owners;
            }
            BOOL v14 = std::__shared_weak_count::lock(a3[1]);
            uint64_t v15 = &(*a3)->__shared_owners_;
            if (SHIBYTE((*a3)[1].__vftable) < 0) {
              uint64_t v15 = (uint64_t *)*v15;
            }
            *(_DWORD *)buf = 136381187;
            uint64_t v23 = v11;
            __int16 v24 = 2081;
            uint64_t v25 = p_shared_owners;
            __int16 v26 = 2081;
            uint64_t v27 = v15;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#SettingsMap,create,branch,%{private}s,parent,%{private}s,root,%{private}s", buf, 0x20u);
            sub_1000DB0A0(v14);
            sub_1000DB0A0(v12);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_102303838);
            }
            uint64_t v19 = std::__shared_weak_count::lock(a2[1]);
            int64_t v20 = std::__shared_weak_count::lock(a3[1]);
            uint64_t v21 = (char *)_os_log_send_and_compose_impl();
            sub_1000DB0A0(v20);
            sub_1000DB0A0(v19);
            sub_1004BA5E4("Generic", 1, 0, 2, "static std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::create(const std::string &, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v21);
            if (v21 != (char *)buf) {
              free(v21);
            }
          }
          operator new();
        }
      }
    }
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  uint64_t v16 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v17 = a1;
    }
    else {
      uint64_t v17 = (uint64_t *)*a1;
    }
    *(_DWORD *)buf = 136380675;
    uint64_t v23 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#SettingsMap,create,branch,%{private}s,parent and/or root is empty", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::create(const std::string &, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  *a4 = 0;
  a4[1] = 0;
}

void sub_100F04AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v14) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_100F04AF4(uint64_t *a1@<X0>, int a2@<W1>, std::__shared_weak_count **a3@<X2>, std::__shared_weak_count **a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = a3[1];
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
    {
      uint64_t v9 = a4[1];
      if (v9)
      {
        if (v9->__shared_owners_ != -1)
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_102303838);
          }
          uint64_t v12 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
          {
            if (*((char *)a1 + 23) >= 0) {
              uint64_t v13 = a1;
            }
            else {
              uint64_t v13 = (uint64_t *)*a1;
            }
            int v14 = std::__shared_weak_count::lock(a3[1]);
            p_shared_owners = &(*a3)->__shared_owners_;
            if (SHIBYTE((*a3)[1].__vftable) < 0) {
              p_shared_owners = (uint64_t *)*p_shared_owners;
            }
            uint64_t v16 = std::__shared_weak_count::lock(a4[1]);
            uint64_t v17 = &(*a4)->__shared_owners_;
            if (SHIBYTE((*a4)[1].__vftable) < 0) {
              uint64_t v17 = (uint64_t *)*v17;
            }
            *(_DWORD *)buf = 136381443;
            uint64_t v25 = v13;
            __int16 v26 = 2081;
            uint64_t v27 = p_shared_owners;
            __int16 v28 = 2081;
            uint64_t v29 = v17;
            __int16 v30 = 1025;
            int v31 = a2;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#SettingsMap,create,leaf,%{private}s,parent,%{private}s,root,%{private}s,type,%{private}d", buf, 0x26u);
            sub_1000DB0A0(v16);
            sub_1000DB0A0(v14);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_102303838);
            }
            uint64_t v21 = std::__shared_weak_count::lock(a3[1]);
            unint64_t v22 = std::__shared_weak_count::lock(a4[1]);
            uint64_t v23 = (char *)_os_log_send_and_compose_impl();
            sub_1000DB0A0(v22);
            sub_1000DB0A0(v21);
            sub_1004BA5E4("Generic", 1, 0, 2, "static std::shared_ptr<LeafNode> CLMASettingsMap::LeafNode::create(const std::string &, DataType, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v23);
            if (v23 != (char *)buf) {
              free(v23);
            }
          }
          operator new();
        }
      }
    }
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  uint64_t v18 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = (uint64_t *)*a1;
    }
    *(_DWORD *)buf = 136380675;
    uint64_t v25 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#SettingsMap,create,leaf,%{private}s,parent and/or root is empty", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    int64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static std::shared_ptr<LeafNode> CLMASettingsMap::LeafNode::create(const std::string &, DataType, std::weak_ptr<NodeBase>, std::weak_ptr<RootNode>)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  *a5 = 0;
  a5[1] = 0;
}

void sub_100F04FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v14) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0503C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a1 + 48); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[1];
    uint64_t v5 = (std::__shared_weak_count *)i[2];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v7 = v4;
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
    if (v8) {
      sub_1000DB0A0(v8);
    }
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
}

void sub_100F050F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0511C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a1 + 56); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[1];
    uint64_t v5 = (std::__shared_weak_count *)i[2];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v7 = v4;
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
    if (v8) {
      sub_1000DB0A0(v8);
    }
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
}

void sub_100F051D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F051FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10009AFB0(&v50, (void *)(a1 + 32));
  uint64_t v6 = v51;
  if (!v51 || v51->__shared_owners_ == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v21 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      unint64_t v22 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        unint64_t v22 = (void *)*v22;
      }
      *(_DWORD *)buf = 136380675;
      __int16 v59 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,branch,%{private}s,failed to get shared this", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v23 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v23 = (void *)*v23;
    }
    int v52 = 136380675;
    __int16 v53 = v23;
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v24);
    goto LABEL_83;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  if (!v7 || *(void *)(v7 + 8) == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v25 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      __int16 v26 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        __int16 v26 = (void *)*v26;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v27 = a2;
      }
      else {
        uint64_t v27 = *(void *)a2;
      }
      *(_DWORD *)buf = 136380931;
      __int16 v59 = v26;
      __int16 v60 = 2081;
      __int16 v61 = (void *)v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,branch,%{private}s,subBranch,%{private}s,root is empty", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    __int16 v40 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v40 = (void *)*v40;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v41 = a2;
    }
    else {
      uint64_t v41 = *(void *)a2;
    }
    int v52 = 136380931;
    __int16 v53 = v40;
    __int16 v54 = 2081;
    long long v55 = (void *)v41;
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v24);
LABEL_83:
    if (v24 != (char *)buf) {
      free(v24);
    }
LABEL_48:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_49;
  }
  uint64_t v8 = v50;
  atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  v49[0] = v8;
  v49[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  v48[0] = *(std::__shared_weak_count **)(a1 + 64);
  v48[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F045D0((uint64_t *)a2, v49, v48, a3);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  std::__shared_weak_count::__release_weak(v6);
  sub_1000DB0A0(v6);
  uint64_t v10 = a3[1];
  if (!v10 || *(void *)(v10 + 8) == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    __int16 v28 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      __int16 v30 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v31 = *(void *)(a1 + 64);
      long long v32 = (void *)(v31 + 8);
      if (*(char *)(v31 + 31) < 0) {
        long long v32 = (void *)*v32;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v33 = a2;
      }
      else {
        uint64_t v33 = *(void *)a2;
      }
      *(_DWORD *)buf = 136381187;
      __int16 v59 = v29;
      __int16 v60 = 2081;
      __int16 v61 = v32;
      __int16 v62 = 2081;
      uint64_t v63 = v33;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,failed to create branch", buf, 0x20u);
      sub_1000DB0A0(v30);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      int v34 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v34 = (void *)*v34;
      }
      uint64_t v35 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v36 = *(void *)(a1 + 64);
      uint64_t v37 = (void *)(v36 + 8);
      if (*(char *)(v36 + 31) < 0) {
        uint64_t v37 = (void *)*v37;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v38 = a2;
      }
      else {
        uint64_t v38 = *(void *)a2;
      }
      int v52 = 136381187;
      __int16 v53 = v34;
      __int16 v54 = 2081;
      long long v55 = v37;
      __int16 v56 = 2081;
      uint64_t v57 = v38;
      uint64_t v39 = (char *)_os_log_send_and_compose_impl();
      sub_1000DB0A0(v35);
      sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v11 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v13 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v14 = *(void *)(a1 + 64);
      uint64_t v15 = (void *)(v14 + 8);
      if (*(char *)(v14 + 31) < 0) {
        uint64_t v15 = (void *)*v15;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = *(void *)a2;
      }
      *(_DWORD *)buf = 136381187;
      __int16 v59 = v12;
      __int16 v60 = 2081;
      __int16 v61 = v15;
      __int16 v62 = 2081;
      uint64_t v63 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#SettingsMap,addBranch,branch,%{private}s,root,%{private}s,subBranch,%{private}s,successful", buf, 0x20u);
      sub_1000DB0A0(v13);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v42 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v42 = (void *)*v42;
      }
      __int16 v43 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v44 = *(void *)(a1 + 64);
      uint64_t v45 = (void *)(v44 + 8);
      if (*(char *)(v44 + 31) < 0) {
        uint64_t v45 = (void *)*v45;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v46 = a2;
      }
      else {
        uint64_t v46 = *(void *)a2;
      }
      int v52 = 136381187;
      __int16 v53 = v42;
      __int16 v54 = 2081;
      long long v55 = v45;
      __int16 v56 = 2081;
      uint64_t v57 = v46;
      uint64_t v47 = (char *)_os_log_send_and_compose_impl();
      sub_1000DB0A0(v43);
      sub_1004BA5E4("Generic", 1, 0, 2, "std::shared_ptr<BranchNode> CLMASettingsMap::BranchNode::addBranch(const std::string &)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = operator new(0x18uLL);
    uint64_t v20 = *a3;
    uint64_t v19 = a3[1];
    *uint64_t v18 = v17;
    v18[1] = v20;
    v18[2] = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 80) = v18;
  }
LABEL_49:
  if (v51) {
    sub_1000DB0A0(v51);
  }
}

void sub_100F05A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F05AC8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  sub_10009AFB0(&v52, (void *)(a1 + 32));
  uint64_t v8 = v53;
  if (!v53 || v53->__shared_owners_ == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v23 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      __int16 v24 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        __int16 v24 = (void *)*v24;
      }
      *(_DWORD *)buf = 136380675;
      __int16 v61 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#SettingsMap,addLeaf,branch,%{private}s,failed to get shared this", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v25 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v25 = (void *)*v25;
    }
    int v54 = 136380675;
    long long v55 = v25;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v26);
    goto LABEL_83;
  }
  uint64_t v9 = *(void *)(a1 + 72);
  if (!v9 || *(void *)(v9 + 8) == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v27 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      __int16 v28 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        __int16 v28 = (void *)*v28;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v29 = a2;
      }
      else {
        uint64_t v29 = *(void *)a2;
      }
      *(_DWORD *)buf = 136380931;
      __int16 v61 = v28;
      __int16 v62 = 2081;
      uint64_t v63 = (void *)v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#SettingsMap,addLeaf,branch,%{private}s,leaf,%{private}s,root is empty", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v42 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v42 = (void *)*v42;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v43 = a2;
    }
    else {
      uint64_t v43 = *(void *)a2;
    }
    int v54 = 136380931;
    long long v55 = v42;
    __int16 v56 = 2081;
    uint64_t v57 = (void *)v43;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v26);
LABEL_83:
    if (v26 != (char *)buf) {
      free(v26);
    }
LABEL_48:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_49;
  }
  uint64_t v10 = v52;
  atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  v51[0] = v10;
  v51[1] = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 72);
  v50[0] = *(std::__shared_weak_count **)(a1 + 64);
  v50[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F04AF4((uint64_t *)a2, a3, v51, v50, a4);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::__release_weak(v8);
  sub_1000DB0A0(v8);
  uint64_t v12 = a4[1];
  if (!v12 || *(void *)(v12 + 8) == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    __int16 v30 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v31 = (void *)*v31;
      }
      long long v32 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v33 = *(void *)(a1 + 64);
      int v34 = (void *)(v33 + 8);
      if (*(char *)(v33 + 31) < 0) {
        int v34 = (void *)*v34;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v35 = a2;
      }
      else {
        uint64_t v35 = *(void *)a2;
      }
      *(_DWORD *)buf = 136381187;
      __int16 v61 = v31;
      __int16 v62 = 2081;
      uint64_t v63 = v34;
      __int16 v64 = 2081;
      uint64_t v65 = v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,failed to create leaf", buf, 0x20u);
      sub_1000DB0A0(v32);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v36 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v36 = (void *)*v36;
      }
      uint64_t v37 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v38 = *(void *)(a1 + 64);
      uint64_t v39 = (void *)(v38 + 8);
      if (*(char *)(v38 + 31) < 0) {
        uint64_t v39 = (void *)*v39;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v40 = a2;
      }
      else {
        uint64_t v40 = *(void *)a2;
      }
      int v54 = 136381187;
      long long v55 = v36;
      __int16 v56 = 2081;
      uint64_t v57 = v39;
      __int16 v58 = 2081;
      uint64_t v59 = v40;
      uint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1000DB0A0(v37);
      sub_1004BA5E4("Generic", 1, 0, 0, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v13 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v15 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v16 = *(void *)(a1 + 64);
      uint64_t v17 = (void *)(v16 + 8);
      if (*(char *)(v16 + 31) < 0) {
        uint64_t v17 = (void *)*v17;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = *(void *)a2;
      }
      *(_DWORD *)buf = 136381187;
      __int16 v61 = v14;
      __int16 v62 = 2081;
      uint64_t v63 = v17;
      __int16 v64 = 2081;
      uint64_t v65 = v18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#SettingsMap,addLeaf,branch,%{private}s,root,%{private}s,leaf,%{private}s,successful", buf, 0x20u);
      sub_1000DB0A0(v15);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v44 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v44 = (void *)*v44;
      }
      uint64_t v45 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 72));
      uint64_t v46 = *(void *)(a1 + 64);
      uint64_t v47 = (void *)(v46 + 8);
      if (*(char *)(v46 + 31) < 0) {
        uint64_t v47 = (void *)*v47;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v48 = a2;
      }
      else {
        uint64_t v48 = *(void *)a2;
      }
      int v54 = 136381187;
      long long v55 = v44;
      __int16 v56 = 2081;
      uint64_t v57 = v47;
      __int16 v58 = 2081;
      uint64_t v59 = v48;
      uint64_t v49 = (char *)_os_log_send_and_compose_impl();
      sub_1000DB0A0(v45);
      sub_1004BA5E4("Generic", 1, 0, 2, "std::shared_ptr<LeafNode> CLMASettingsMap::BranchNode::addLeaf(const std::string &, DataType)", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
    uint64_t v19 = *(void *)(a1 + 88);
    uint64_t v20 = operator new(0x18uLL);
    uint64_t v22 = *a4;
    uint64_t v21 = a4[1];
    *uint64_t v20 = v19;
    v20[1] = v22;
    v20[2] = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 88) = v20;
  }
LABEL_49:
  if (v53) {
    sub_1000DB0A0(v53);
  }
}

void sub_100F06338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0639C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a1 + 80); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[1];
    uint64_t v5 = (std::__shared_weak_count *)i[2];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v7 = v4;
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
    if (v8) {
      sub_1000DB0A0(v8);
    }
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
}

void sub_100F06454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0647C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a1 + 88); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[1];
    uint64_t v5 = (std::__shared_weak_count *)i[2];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v7 = v4;
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v7);
    if (v8) {
      sub_1000DB0A0(v8);
    }
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
}

void sub_100F06534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

id sub_100F0655C(uint64_t a1, void *a2)
{
  if (!a2)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)buf = 136380675;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#SettingsMap,getBranchFromDict,branch,%{private}s,dict is nil", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  BOOL v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v4 = *v3;
  }
  id v5 = [a2 objectForKey:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)]];
  if (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v6 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v7 = (void *)*v3;
        }
        *(_DWORD *)buf = 136380675;
        uint64_t v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#SettingsMap,getBranchFromDict,branch,%{private}s,found branch but not a dict", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1)
      {
LABEL_25:
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLMASettingsMap::BranchNode::getBranchFromDict(NSDictionary *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
        return 0;
      }
LABEL_27:
      dispatch_once(&qword_102419600, &stru_102303838);
      goto LABEL_25;
    }
  }
  return v5;
}

uint64_t sub_100F06890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  uint64_t v4 = (void *)(a1 + 8);
  sub_100F06E34((uint64_t)&v26, (long long *)(a1 + 8));
  id v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
  {
LABEL_20:
    BOOL v9 = 1;
    goto LABEL_21;
  }
  uint64_t v25 = v4;
  uint64_t v7 = *(char **)(a1 + 40);
  do
  {
    uint64_t shared_owners = v6->__shared_owners_;
    BOOL v9 = shared_owners != -1;
    if (shared_owners == -1) {
      break;
    }
    if (!(*(unsigned int (**)(char *))(*(void *)v7 + 16))(v7))
    {
      *(_OWORD *)a2 = v26;
      uint64_t v18 = *((void *)&v27 + 1);
      *(void *)(a2 + 16) = v27;
      *(void *)(a2 + 24) = v18;
      long long v26 = 0u;
      long long v27 = 0u;
      *(_OWORD *)(a2 + 32) = v28;
      long long v28 = 0uLL;
      goto LABEL_29;
    }
    if ((*(unsigned int (**)(char *))(*(void *)v7 + 16))(v7) != 1)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = v4;
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v20 = (void *)*v4;
        }
        uint64_t v21 = v7 + 8;
        if (v7[31] < 0) {
          uint64_t v21 = (void *)*v21;
        }
        *(_DWORD *)buf = 136380931;
        int v34 = v20;
        __int16 v35 = 2081;
        uint64_t v36 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#SettingsMap,getLocationOnTree,leaf,%{private}s,parent,%{private}s,parent is not branch or root", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_102303838);
        }
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v25 = (void *)*v4;
        }
        uint64_t v23 = v7 + 8;
        if (v7[31] < 0) {
          uint64_t v23 = (void *)*v23;
        }
        int v29 = 136380931;
        __int16 v30 = v25;
        __int16 v31 = 2081;
        long long v32 = v23;
        __int16 v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::deque<std::string> CLMASettingsMap::LeafNode::getLocationOnTree() const", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      goto LABEL_29;
    }
    uint64_t v11 = v10;
    if (v10)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v6;
    }
    else
    {
      uint64_t v12 = 0;
    }
    sub_100F06E34((uint64_t)&v26, (long long *)(v10 + 8));
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 7);
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (v14) {
        uint64_t v7 = (char *)*((void *)v11 + 6);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v14 = 0;
    }
    sub_1000DB0A0(v6);
    if (v12) {
      sub_1000DB0A0(v12);
    }
    uint64_t v6 = v14;
  }
  while (v14);
LABEL_21:
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  uint64_t v15 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = v4;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v16 = (void *)*v4;
    }
    *(_DWORD *)buf = 136380675;
    int v34 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#SettingsMap,getLocationOnTree,leaf,%{private}s,parent is empty", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v29 = 136380675;
    __int16 v30 = v4;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::deque<std::string> CLMASettingsMap::LeafNode::getLocationOnTree() const", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  if (!v9) {
LABEL_29:
  }
    sub_1000DB0A0(v6);
  return sub_100CEE3BC(&v26);
}

void sub_100F06DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000DB0A0(v5);
  sub_100CEE3BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

int64x2_t sub_100F06E34(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_100F09EB8((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  uint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4080;
  }
  uint64_t v8 = (unsigned char *)(v7 - 24);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(v8, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(v7 - 8) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101D1F270);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_100F06EEC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32) <= 2u)
  {
    objc_opt_class();
    LOBYTE(a1) = objc_opt_isKindOfClass();
  }
  return a1 & 1;
}

uint64_t sub_100F06F3C(uint64_t a1, void *a2, void *a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  uint64_t v4 = a2[1];
  if (!v4 || *(void *)(v4 + 8) == -1 || (uint64_t v6 = a3[1]) == 0 || *(void *)(v6 + 8) == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v17 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,constructor,from and/or to root is empty", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return a1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_42:
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLMASettingsMap::DictMap::DictMap(std::shared_ptr<RootNode>, std::shared_ptr<RootNode>)", "%s\n", v16);
LABEL_43:
      if (v16 != (char *)buf) {
        free(v16);
      }
      return a1;
    }
LABEL_45:
    dispatch_once(&qword_102419600, &stru_102303838);
    goto LABEL_42;
  }
  uint64_t v8 = *a2;
  if (*a2 == *a3)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v19 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = (void *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      uint64_t v21 = (void *)(*a3 + 8);
      if (*(char *)(*a3 + 31) < 0) {
        uint64_t v21 = (void *)*v21;
      }
      *(_DWORD *)buf = 136380931;
      uint64_t v23 = v20;
      __int16 v24 = 2081;
      uint64_t v25 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,constructor,from,%{private}s,to,%{private}s,from and to root are the same", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return a1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  long long v9 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v4;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v10;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  uint64_t v13 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = (void *)(*a2 + 8);
    if (*(char *)(*a2 + 31) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    uint64_t v15 = (void *)(*a3 + 8);
    if (*(char *)(*a3 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)buf = 136380931;
    uint64_t v23 = v14;
    __int16 v24 = 2081;
    uint64_t v25 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,constructor,from,%{private}s,to,%{private}s,created", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMASettingsMap::DictMap::DictMap(std::shared_ptr<RootNode>, std::shared_ptr<RootNode>)", "%s\n", v16);
    goto LABEL_43;
  }
  return a1;
}

void sub_100F074B8(_Unwind_Exception *a1)
{
  sub_100F09ADC(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F074F4(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a1[1];
  if (!v3
    || *(void *)(v3 + 8) == -1
    || (uint64_t v5 = a1[3]) == 0
    || *(void *)(v5 + 8) == -1
    || (uint64_t v7 = a2[1]) == 0
    || *(void *)(v7 + 8) == -1
    || (uint64_t v9 = a3[1]) == 0
    || *(void *)(v9 + 8) == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v15 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from and/or to root and/or leaf is empty", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_50;
    }
    goto LABEL_94;
  }
  uint64_t v10 = *a2;
  if (*(_DWORD *)(*a2 + 32) != *(_DWORD *)(*a3 + 32))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v18 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = (void *)(*a2 + 8);
      if (*(char *)(*a2 + 31) < 0) {
        uint64_t v19 = (void *)*v19;
      }
      uint64_t v20 = (void *)(*a3 + 8);
      if (*(char *)(*a3 + 31) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      *(_DWORD *)buf = 136380931;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v46 = 2081;
      uint64_t v47 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from,%{private}s,to,%{private}s,from and to leaf are the same", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_50:
      long long v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
      return 0;
    }
LABEL_94:
    dispatch_once(&qword_102419600, &stru_102303838);
    goto LABEL_50;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 64);
  if (v11)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    uint64_t v13 = v12;
    if (v12)
    {
      if (v12->__shared_owners_ == -1 || *(void *)(v10 + 56) != *a1)
      {
        char v14 = 0;
        goto LABEL_35;
      }
      uint64_t v23 = *a3;
      __int16 v24 = *(std::__shared_weak_count **)(*a3 + 64);
      if (v24)
      {
        uint64_t v25 = std::__shared_weak_count::lock(v24);
        long long v26 = v25;
        if (v25)
        {
          if (v25->__shared_owners_ != -1 && *(void *)(v23 + 56) == a1[2])
          {
            uint64_t v31 = (uint64_t)(a1 + 4);
            if (sub_100F0A1D4(a1 + 4, a2))
            {
              if (qword_102419600 != -1) {
                dispatch_once(&qword_102419600, &stru_102303838);
              }
              long long v32 = qword_102419608;
              if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
              {
                uint64_t v33 = (void *)(*a2 + 8);
                if (*(char *)(*a2 + 31) < 0) {
                  uint64_t v33 = (void *)*v33;
                }
                *(_DWORD *)buf = 136380675;
                *(void *)&uint8_t buf[4] = v33;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from,%{private}s,from leaf already related", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419600 != -1) {
                  dispatch_once(&qword_102419600, &stru_102303838);
                }
                uint64_t v43 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v43);
                if (v43 != buf) {
                  free(v43);
                }
              }
              uint64_t v16 = 0;
            }
            else
            {
              if (qword_102419600 != -1) {
                dispatch_once(&qword_102419600, &stru_102303838);
              }
              int v34 = qword_102419608;
              if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
              {
                __int16 v35 = (void *)(*a2 + 8);
                if (*(char *)(*a2 + 31) < 0) {
                  __int16 v35 = (void *)*v35;
                }
                uint64_t v36 = (void *)(*a1 + 8);
                if (*(char *)(*a1 + 31) < 0) {
                  uint64_t v36 = (void *)*v36;
                }
                uint64_t v37 = (void *)(*a3 + 8);
                if (*(char *)(*a3 + 31) < 0) {
                  uint64_t v37 = (void *)*v37;
                }
                uint64_t v38 = a1[2];
                uint64_t v39 = (void *)(v38 + 8);
                if (*(char *)(v38 + 31) < 0) {
                  uint64_t v39 = (void *)*v39;
                }
                *(_DWORD *)buf = 136381443;
                *(void *)&uint8_t buf[4] = v35;
                __int16 v46 = 2081;
                uint64_t v47 = v36;
                __int16 v48 = 2081;
                uint64_t v49 = v37;
                __int16 v50 = 2081;
                __int16 v51 = v39;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,addRelation,fromLeaf,%{private}s,fromRoot,%{private}s,toLeaf,%{private}s,toRoot,%{private}s,related added", buf, 0x2Au);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419600 != -1) {
                  dispatch_once(&qword_102419600, &stru_102303838);
                }
                uint64_t v44 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v44);
                if (v44 != buf) {
                  free(v44);
                }
              }
              *(void *)buf = a2;
              uint64_t v40 = sub_100F0A2C0(v31, a2, (uint64_t)&unk_101D0B290, (void **)buf);
              sub_100F0805C(v40 + 4, a3);
              uint64_t v16 = 1;
            }
LABEL_62:
            sub_1000DB0A0(v26);
LABEL_43:
            sub_1000DB0A0(v13);
            return v16;
          }
          char v27 = 0;
LABEL_54:
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_102303838);
          }
          int v29 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
          {
            __int16 v30 = (void *)(*a3 + 8);
            if (*(char *)(*a3 + 31) < 0) {
              __int16 v30 = (void *)*v30;
            }
            *(_DWORD *)buf = 136380675;
            *(void *)&uint8_t buf[4] = v30;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,to,%{private}s,to leaf's root is either empty or doesn't match", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_102303838);
            }
            uint64_t v42 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v42);
            if (v42 != buf) {
              free(v42);
            }
          }
          uint64_t v16 = 0;
          if (v27) {
            goto LABEL_43;
          }
          goto LABEL_62;
        }
      }
      else
      {
        long long v26 = 0;
      }
      char v27 = 1;
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  char v14 = 1;
LABEL_35:
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  uint64_t v21 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    uint64_t v22 = (void *)(*a2 + 8);
    if (*(char *)(*a2 + 31) < 0) {
      uint64_t v22 = (void *)*v22;
    }
    *(_DWORD *)buf = 136380675;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,addRelation,from,%{private}s,from leaf's root is either empty or doesn't match", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMASettingsMap::DictMap::addRelation(std::shared_ptr<LeafNode>, std::shared_ptr<LeafNode>)", "%s\n", v41);
    if (v41 != buf) {
      free(v41);
    }
  }
  uint64_t v16 = 0;
  if ((v14 & 1) == 0) {
    goto LABEL_43;
  }
  return v16;
}

void sub_100F08010(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void *sub_100F0805C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  return a1;
}

void sub_100F080A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || !a3)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapDict,source and/or dest dict is nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_22:
      char v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapDict(NSDictionary *, NSMutableDictionary *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return;
    }
LABEL_24:
    dispatch_once(&qword_102419600, &stru_102303838);
    goto LABEL_22;
  }
  uint64_t v5 = a1[1];
  if (v5)
  {
    if (*(void *)(v5 + 8) != -1)
    {
      uint64_t v6 = a1[3];
      if (v6)
      {
        if (*(void *)(v6 + 8) != -1)
        {
          uint64_t v8 = *a1;
          uint64_t v9 = operator new(0x20uLL);
          void *v9 = off_102303B28;
          v9[1] = a1;
          v9[2] = a2;
          v9[3] = a3;
          v16[3] = v9;
          sub_100F0511C(v8, (uint64_t)v16);
          sub_100F0A748(v16);
          uint64_t v10 = *a1;
          uint64_t v11 = operator new(0x20uLL);
          *uint64_t v11 = off_102303BB8;
          v11[1] = a1;
          v11[2] = a2;
          v11[3] = a3;
          v15[3] = v11;
          sub_100F0503C(v10, (uint64_t)v15);
          sub_100F0A960(v15);
          return;
        }
      }
    }
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  uint64_t v13 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapDict,from and/or to root is empty", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
}

void sub_100F08420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100F0A960(va);
  _Unwind_Resume(a1);
}

void sub_100F0844C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  if (!a3 || !a4)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v16 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapBranch,source and/or dest dict is nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_25:
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapBranch(std::shared_ptr<BranchNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      return;
    }
LABEL_27:
    dispatch_once(&qword_102419600, &stru_102303838);
    goto LABEL_25;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    if (*(void *)(v6 + 8) != -1)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (v7)
      {
        if (*(void *)(v7 + 8) != -1)
        {
          uint64_t v9 = a2[1];
          if (v9)
          {
            if (*(void *)(v9 + 8) != -1)
            {
              id v10 = sub_100F0655C(*a2, a3);
              if (v10)
              {
                id v11 = v10;
                uint64_t v12 = *a2;
                uint64_t v13 = operator new(0x20uLL);
                *uint64_t v13 = off_102303C48;
                v13[1] = a1;
                double v13[2] = v11;
                v13[3] = a4;
                v20[3] = v13;
                sub_100F0647C(v12, (uint64_t)v20);
                sub_100F0A748(v20);
                uint64_t v14 = *a2;
                uint64_t v15 = operator new(0x20uLL);
                *uint64_t v15 = off_102303CC8;
                v15[1] = a1;
                v15[2] = v11;
                v15[3] = a4;
                v19[3] = v15;
                sub_100F0639C(v14, (uint64_t)v19);
                sub_100F0A960(v19);
              }
              return;
            }
          }
        }
      }
    }
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102303838);
  }
  uint64_t v17 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapBranch,from root, to root, and/or branch is empty", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
}

void sub_100F087F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100F0A960(va);
  _Unwind_Resume(a1);
}

void sub_100F0881C(void *a1, void *a2, void *a3, void *a4)
{
  if (!a3 || (uint64_t v4 = a4) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v42 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,source and/or dest dict is nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_128:
      LOWORD(v73) = 0;
      uint64_t v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v49);
LABEL_129:
      if (v49 != buf) {
        free(v49);
      }
      return;
    }
LABEL_137:
    dispatch_once(&qword_102419600, &stru_102303838);
    goto LABEL_128;
  }
  uint64_t v6 = a1[1];
  if (!v6
    || *(void *)(v6 + 8) == -1
    || (uint64_t v7 = a1[3]) == 0
    || *(void *)(v7 + 8) == -1
    || (uint64_t v9 = a2[1]) == 0
    || *(void *)(v9 + 8) == -1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102303838);
    }
    uint64_t v43 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,from root, to root, and/or leaf is empty", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_128;
    }
    goto LABEL_137;
  }
  id v11 = (void *)(*a2 + 8);
  if (*(char *)(*a2 + 31) < 0) {
    id v11 = (void *)*v11;
  }
  id v12 = [a3 objectForKey:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11)]];
  if (v12)
  {
    uint64_t v13 = v12;
    if (sub_100F06EEC(*a2))
    {
      uint64_t v14 = (uint64_t)(a1 + 4);
      if (sub_100F0A1D4(a1 + 4, a2))
      {
        *(void *)buf = a2;
        uint64_t v15 = sub_100F0A2C0((uint64_t)(a1 + 4), a2, (uint64_t)&unk_101D0B290, (void **)buf)[5];
        if (v15)
        {
          if (*(void *)(v15 + 8) != -1)
          {
            *(void *)buf = a2;
            uint64_t v16 = sub_100F0A2C0((uint64_t)(a1 + 4), a2, (uint64_t)&unk_101D0B290, (void **)buf);
            sub_100F06890(v16[4], (uint64_t)&v73);
            if (v78)
            {
              for (unint64_t i = 0; i < v78; ++i)
              {
                unint64_t v18 = *(void *)(*(void *)&v74[4] + 8 * ((i + v77) / 0xAA)) + 24 * ((i + v77) % 0xAA);
                if (*(char *)(v18 + 23) < 0) {
                  unint64_t v18 = *(void *)v18;
                }
                uint64_t v19 = +[NSString stringWithUTF8String:v18];
                if (i == v78 - 1)
                {
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    [v4 setObject:(id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v13, 2uLL) forKey:v19];
                  }
                  else {
                    [v4 setObject:[v13 copy] forKey:v19];
                  }
                  if (qword_102419600 != -1) {
                    dispatch_once(&qword_102419600, &stru_102303838);
                  }
                  long long v26 = qword_102419608;
                  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
                  {
                    char v27 = (void *)(*a2 + 8);
                    if (*(char *)(*a2 + 31) < 0) {
                      char v27 = (void *)*v27;
                    }
                    long long v28 = (void *)(*a1 + 8);
                    if (*(char *)(*a1 + 31) < 0) {
                      long long v28 = (void *)*v28;
                    }
                    int v29 = [(NSString *)v19 UTF8String];
                    uint64_t v30 = a1[2];
                    uint64_t v31 = (void *)(v30 + 8);
                    if (*(char *)(v30 + 31) < 0) {
                      uint64_t v31 = (void *)*v31;
                    }
                    *(_DWORD *)buf = 136381443;
                    *(void *)&uint8_t buf[4] = v27;
                    __int16 v80 = 2081;
                    v81 = v28;
                    __int16 v82 = 2081;
                    v83 = v29;
                    __int16 v84 = 2081;
                    v85 = v31;
                    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,mapLeaf,fromLeaf,%{private}s,fromRoot,%{private}s,toLeaf,%{private}s,toRoot,%{private}s,added leaf to dest", buf, 0x2Au);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419600 != -1) {
                      dispatch_once(&qword_102419600, &stru_102303838);
                    }
                    long long v32 = (void *)(*a2 + 8);
                    if (*(char *)(*a2 + 31) < 0) {
                      long long v32 = (void *)*v32;
                    }
                    uint64_t v33 = (void *)(*a1 + 8);
                    if (*(char *)(*a1 + 31) < 0) {
                      uint64_t v33 = (void *)*v33;
                    }
                    int v34 = [(NSString *)v19 UTF8String];
                    uint64_t v35 = a1[2];
                    uint64_t v36 = (void *)(v35 + 8);
                    if (*(char *)(v35 + 31) < 0) {
                      uint64_t v36 = (void *)*v36;
                    }
                    *(_DWORD *)uint64_t v66 = 136381443;
                    *(void *)&v66[4] = v32;
                    __int16 v67 = 2081;
                    v68 = v33;
                    __int16 v69 = 2081;
                    v70 = v34;
                    __int16 v71 = 2081;
                    v72 = v36;
                    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v37);
                    if (v37 != buf) {
                      free(v37);
                    }
                    id v20 = v4;
                  }
                  else
                  {
                    id v20 = v4;
                  }
                }
                else
                {
                  id v20 = [v4 objectForKey:v19];
                  if (!v20 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
                  {
                    if (qword_102419600 != -1) {
                      dispatch_once(&qword_102419600, &stru_102303838);
                    }
                    uint64_t v21 = qword_102419608;
                    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v22 = (void *)(*a2 + 8);
                      if (*(char *)(*a2 + 31) < 0) {
                        uint64_t v22 = (void *)*v22;
                      }
                      uint64_t v23 = a1[2];
                      __int16 v24 = (void *)(v23 + 8);
                      if (*(char *)(v23 + 31) < 0) {
                        __int16 v24 = (void *)*v24;
                      }
                      uint64_t v25 = [(NSString *)v19 UTF8String];
                      *(_DWORD *)buf = 136381187;
                      *(void *)&uint8_t buf[4] = v22;
                      __int16 v80 = 2081;
                      v81 = v24;
                      __int16 v82 = 2081;
                      v83 = v25;
                      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,toRoot,%{private}s,creating branch in dest,%{private}s", buf, 0x20u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419600 != -1) {
                        dispatch_once(&qword_102419600, &stru_102303838);
                      }
                      uint64_t v38 = (void *)(*a2 + 8);
                      if (*(char *)(*a2 + 31) < 0) {
                        uint64_t v38 = (void *)*v38;
                      }
                      uint64_t v39 = a1[2];
                      uint64_t v40 = (void *)(v39 + 8);
                      if (*(char *)(v39 + 31) < 0) {
                        uint64_t v40 = (void *)*v40;
                      }
                      *(_DWORD *)uint64_t v66 = 136381187;
                      *(void *)&v66[4] = v38;
                      __int16 v67 = 2081;
                      v68 = v40;
                      __int16 v69 = 2081;
                      v70 = [(NSString *)v19 UTF8String];
                      uint64_t v41 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v41);
                      if (v41 != buf) {
                        free(v41);
                      }
                    }
                    id v20 = objc_alloc_init((Class)NSMutableDictionary);
                    [v4 setObject:v20 forKey:v19];
                  }
                }
                uint64_t v4 = v20;
              }
            }
            else
            {
              if (qword_102419600 != -1) {
                dispatch_once(&qword_102419600, &stru_102303838);
              }
              uint64_t v59 = qword_102419608;
              if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
              {
                *(void *)uint64_t v66 = a2;
                uint64_t v60 = sub_100F0A2C0(v14, a2, (uint64_t)&unk_101D0B290, (void **)v66)[4];
                __int16 v61 = (void *)(v60 + 8);
                if (*(char *)(v60 + 31) < 0) {
                  __int16 v61 = (void *)*v61;
                }
                *(_DWORD *)buf = 136380675;
                *(void *)&uint8_t buf[4] = v61;
                _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,toLeaf,%{private}s,failed to retrieve mapped to location", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419600 != -1) {
                  dispatch_once(&qword_102419600, &stru_102303838);
                }
                uint64_t v65 = a2;
                uint64_t v62 = sub_100F0A2C0(v14, a2, (uint64_t)&unk_101D0B290, &v65)[4];
                uint64_t v63 = (void *)(v62 + 8);
                if (*(char *)(v62 + 31) < 0) {
                  uint64_t v63 = (void *)*v63;
                }
                *(_DWORD *)uint64_t v66 = 136380675;
                *(void *)&v66[4] = v63;
                __int16 v64 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v64);
                if (v64 != buf) {
                  free(v64);
                }
              }
            }
            sub_100CEE3BC(&v73);
            return;
          }
        }
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      __int16 v50 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        __int16 v51 = (void *)(*a2 + 8);
        if (*(char *)(*a2 + 31) < 0) {
          __int16 v51 = (void *)*v51;
        }
        int v52 = (void *)(*a1 + 8);
        if (*(char *)(*a1 + 31) < 0) {
          int v52 = (void *)*v52;
        }
        uint64_t v53 = a1[2];
        int v54 = (const char *)(v53 + 8);
        if (*(char *)(v53 + 31) < 0) {
          int v54 = *(const char **)v54;
        }
        *(_DWORD *)buf = 136381187;
        *(void *)&uint8_t buf[4] = v51;
        __int16 v80 = 2081;
        v81 = v52;
        __int16 v82 = 2081;
        v83 = v54;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,fromRoot,%{private}s,toRoot,%{private}s,leaf not mapped", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_102303838);
        }
        long long v55 = (void *)(*a2 + 8);
        if (*(char *)(*a2 + 31) < 0) {
          long long v55 = (void *)*v55;
        }
        __int16 v56 = (void *)(*a1 + 8);
        if (*(char *)(*a1 + 31) < 0) {
          __int16 v56 = (void *)*v56;
        }
        uint64_t v57 = a1[2];
        __int16 v58 = (void *)(v57 + 8);
        if (*(char *)(v57 + 31) < 0) {
          __int16 v58 = (void *)*v58;
        }
        int v73 = 136381187;
        *(void *)v74 = v55;
        *(_WORD *)&v74[8] = 2081;
        *(void *)&v74[10] = v56;
        __int16 v75 = 2081;
        v76 = v58;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v49);
        goto LABEL_129;
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102303838);
      }
      uint64_t v44 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = (void *)(*a2 + 8);
        if (*(char *)(*a2 + 31) < 0) {
          uint64_t v45 = (void *)*v45;
        }
        __int16 v46 = (void *)(*a1 + 8);
        if (*(char *)(*a1 + 31) < 0) {
          __int16 v46 = (void *)*v46;
        }
        *(_DWORD *)buf = 136380931;
        *(void *)&uint8_t buf[4] = v45;
        __int16 v80 = 2081;
        v81 = v46;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#SettingsMap,DictMap,mapLeaf,leaf,%{private}s,root,%{private}s,leaf data type is incorrect", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_102303838);
        }
        uint64_t v47 = (void *)(*a2 + 8);
        if (*(char *)(*a2 + 31) < 0) {
          uint64_t v47 = (void *)*v47;
        }
        __int16 v48 = (void *)(*a1 + 8);
        if (*(char *)(*a1 + 31) < 0) {
          __int16 v48 = (void *)*v48;
        }
        int v73 = 136380931;
        *(void *)v74 = v47;
        *(_WORD *)&v74[8] = 2081;
        *(void *)&v74[10] = v48;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMASettingsMap::DictMap::mapLeaf(std::shared_ptr<LeafNode>, NSDictionary *, NSMutableDictionary *)", "%s\n", v49);
        goto LABEL_129;
      }
    }
  }
}

void sub_100F096A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100CEE3BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100F096EC(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void *sub_100F0971C(void *a1, long long *a2)
{
  *a1 = off_1023038E8;
  uint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    _OWORD v3[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return a1;
}

void sub_100F09788(uint64_t a1)
{
  sub_100F097C0(a1);

  operator delete();
}

uint64_t sub_100F097C0(uint64_t a1)
{
  *(void *)a1 = off_102303868;
  sub_10003E950((void **)(a1 + 56));
  sub_10003E950((void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = off_1023038E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_100F09844(void *a1, long long *a2, void *a3, void *a4)
{
  int64x2_t result = sub_100F0971C(a1, a2);
  result[4] = 0;
  result[5] = 0;
  *int64x2_t result = off_102303910;
  uint64_t v7 = a3[1];
  result[6] = *a3;
  result[7] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a4[1];
  result[8] = *a4;
  result[9] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  result[10] = 0;
  result[11] = 0;
  return result;
}

void sub_100F098C4(uint64_t a1)
{
  sub_100F098FC(a1);

  operator delete();
}

uint64_t sub_100F098FC(uint64_t a1)
{
  *(void *)a1 = off_102303910;
  sub_10003E950((void **)(a1 + 88));
  sub_10003E950((void **)(a1 + 80));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)a1 = off_1023038E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_100F09998(void *a1, long long *a2, int a3, void *a4, void *a5)
{
  int64x2_t result = sub_100F0971C(a1, a2);
  *int64x2_t result = off_102303980;
  *((_DWORD *)result + 8) = a3;
  uint64_t v9 = a4[1];
  result[5] = *a4;
  result[6] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a5[1];
  result[7] = *a5;
  result[8] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100F09A20(uint64_t a1)
{
  sub_100F09A58(a1);

  operator delete();
}

uint64_t sub_100F09A58(uint64_t a1)
{
  *(void *)a1 = off_102303980;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)a1 = off_1023038E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100F09ADC(uint64_t a1)
{
  sub_100F09B18(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100F09B18(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100F09B5C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100F09B5C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    sub_1000DB0A0(v3);
  }
}

void sub_100F09BAC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100F09C2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A966B4(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F09C44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100F09C74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100F09CB8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100F09D38(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A966B4(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F09D50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100F09D80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100F09DC4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100F09E2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A966B4(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F09E44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100F09E74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100F09EB8(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      __int16 v46 = a1 + 3;
      __p = sub_1000DA54C(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0xFF0uLL);
      sub_1000DA434(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              __int16 v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              long long v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                int v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)int v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              uint64_t v31 = __p;
              __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              id v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_10017F0B4(a1, &__p);
        int v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 85;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_100F0A188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100F0A1D4(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_100F0A2C0(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  uint64_t v16 = operator new(0x30uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v9;
  BOOL v17 = *a4;
  v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  void v16[4] = 0;
  v16[5] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_100100330(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *uint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100F0A570((uint64_t)v28, 0);
  return v13;
}

void sub_100F0A558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F0A570((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100F0A570(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100F09B5C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100F0A5CC()
{
}

__n128 sub_100F0A5E0(uint64_t a1)
{
  int8x8_t v2 = (char *)operator new(0x20uLL);
  *(void *)int8x8_t v2 = off_102303B28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100F0A634(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102303B28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F0A66C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = v2;
  uint8x8_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F0881C(v4, &v5, *(void **)(a1 + 16), *(void **)(a1 + 24));
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0A6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0A6FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F0A73C()
{
}

void *sub_100F0A748(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100F0A7D0()
{
}

__n128 sub_100F0A7E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_102303BB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100F0A838(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102303BB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F0A870(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  v5[0] = v2;
  v5[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F0844C(v4, v5, *(void **)(a1 + 16), *(void *)(a1 + 24));
  if (v3)
  {
    sub_1000DB0A0(v3);
    sub_1000DB0A0(v3);
  }
}

void sub_100F0A8F4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    sub_1000DB0A0(v1);
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0A914(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F0A954()
{
}

void *sub_100F0A960(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100F0A9E8()
{
}

__n128 sub_100F0A9FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_102303C48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100F0AA50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102303C48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F0AA88(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = v2;
  uint8x8_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F0881C(v4, &v5, *(void **)(a1 + 16), *(void **)(a1 + 24));
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0AAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0AB18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F0AB58()
{
}

void sub_100F0AB68()
{
}

__n128 sub_100F0AB7C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_102303CC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100F0ABD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102303CC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F0AC08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  v5[0] = v2;
  v5[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F0844C(v4, v5, *(void **)(a1 + 16), *(void *)(a1 + 24));
  if (v3)
  {
    sub_1000DB0A0(v3);
    sub_1000DB0A0(v3);
  }
}

void sub_100F0AC8C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    sub_1000DB0A0(v1);
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0ACAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F0ACEC()
{
}

void sub_100F0AD68(unsigned char *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint8x8_t v6 = (void *)sub_100054C14((uint64_t)a1, a2, a3, a4, a5);
  void *v6 = off_102303D60;
  v6[6] = 0;
  a1[56] = sub_101587E8C();
  a1[57] = sub_101587EC4();
  a1[58] = sub_101587EA8();
  sub_101589B60();
}

void sub_100F0AE7C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_100F0AEC8(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102303E40);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountSubscription::onPedometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102303E40);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      BOOL v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountSubscription::onPedometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F0EBAC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F0B084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0B0A8(uint64_t a1)
{
  *(void *)a1 = off_102303D60;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  [*(id *)(a1 + 64) setValid:0];

  *(void *)(a1 + 64) = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_100029A7C(a1);
}

void sub_100F0B178(uint64_t a1)
{
  sub_100F0B0A8(a1);

  operator delete();
}

void *sub_100F0B1B0@<X0>(uint64_t a1@<X8>)
{
  v16[0] = off_102303E90;
  v16[1] = sub_100F0B7BC;
  v16[2] = 0;
  v16[3] = v16;
  sub_100134750(v17, "kCLConnectionMessageStepCountUpdate");
  sub_100BF1F58((uint64_t)&v18, (uint64_t)v16);
  int v13 = off_102303E90;
  v14[0] = sub_100F0BD48;
  v14[1] = 0;
  uint64_t v15 = &v13;
  sub_100134750(v19, "kCLConnectionMessagePedometerEvent");
  sub_100BF1F58((uint64_t)&v20, (uint64_t)&v13);
  v12[0] = off_102303E90;
  v12[1] = sub_100F0C064;
  v12[2] = 0;
  v12[3] = v12;
  sub_100134750(v21, "kCLConnectionMessageOdometerSuitabilityUpdate");
  sub_100BF1F58((uint64_t)&v22, (uint64_t)v12);
  v11[0] = off_102303F40;
  v11[1] = sub_100F0C4A4;
  v11[2] = 0;
  v11[3] = v11;
  sub_100134750(v23, "kCLConnectionMessageStartStepCountAvailable");
  sub_100BF1F58((uint64_t)&v24, (uint64_t)v11);
  v10[0] = off_102303F40;
  v10[1] = sub_100F0C58C;
  v10[2] = 0;
  v10[3] = v10;
  sub_100134750(v25, "kCLConnectionMessageStepCountQuery");
  sub_100BF1F58((uint64_t)&v26, (uint64_t)v10);
  v9[0] = off_102303F40;
  v9[1] = sub_100F0CD9C;
  v9[2] = 0;
  v9[3] = v9;
  sub_100134750(v27, "kCLConnectionMessageStepCountRecordQuery");
  sub_100BF1F58((uint64_t)&v28, (uint64_t)v9);
  v8[0] = off_102303F40;
  v8[1] = sub_100F0D7B4;
  v8[2] = 0;
  void v8[3] = v8;
  sub_100134750(v29, "kCLConnectionMessageStepCountReset");
  sub_100BF1F58((uint64_t)&v30, (uint64_t)v8);
  v7[0] = off_102303F40;
  v7[1] = sub_100F0DBE4;
  v7[2] = 0;
  v7[3] = v7;
  sub_100134750(v31, "kCLConnectionMessageFloorCountAvailable");
  sub_100BF1F58((uint64_t)&v32, (uint64_t)v7);
  v6[0] = off_102303F40;
  v6[1] = sub_100F0DCD0;
  v6[2] = 0;
  void v6[3] = v6;
  sub_100134750(v33, "kCLConnectionMessagePaceAndCadenceAPIAvailable");
  sub_100BF1F58((uint64_t)&v34, (uint64_t)v6);
  v5[0] = off_102303F40;
  v5[1] = sub_100F0DDBC;
  uint64_t v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v35, "kCLConnectionMessageStrideCalibrationDump");
  sub_100BF1F58((uint64_t)&v36, (uint64_t)v5);
  v4[0] = off_102303F40;
  v4[1] = sub_100F0E470;
  _OWORD v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v37, "kCLConnectionMessagePedometerCalibrationQuery");
  sub_100BF1F58((uint64_t)&v38, (uint64_t)v4);
  sub_100F10508(a1, (unsigned __int8 *)v17, 11);
  uint64_t v2 = 77;
  do
  {
    sub_100BF2474(&v16[v2]);
    if (SHIBYTE((&v15)[v2]) < 0) {
      operator delete((void *)v14[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_100BF2474(v4);
  sub_100BF2474(v5);
  sub_100BF2474(v6);
  sub_100BF2474(v7);
  sub_100BF2474(v8);
  sub_100BF2474(v9);
  sub_100BF2474(v10);
  sub_100BF2474(v11);
  sub_100BF2474(v12);
  sub_100BF2474(&v13);
  return sub_100BF2474(v16);
}

void sub_100F0B684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  for (uint64_t i = 560; i != -56; i -= 56)
    sub_100F0EB70((uint64_t)(&a53 + i));
  sub_100BF2474(&a9);
  sub_100BF2474(&a13);
  sub_100BF2474(&a17);
  sub_100BF2474(&a21);
  sub_100BF2474(&a25);
  sub_100BF2474(&a29);
  sub_100BF2474(&a33);
  sub_100BF2474(&a37);
  sub_100BF2474(&a41);
  sub_100BF2474(&a45);
  sub_100BF2474(&a49);
  _Unwind_Resume(a1);
}

void sub_100F0B764()
{
}

void sub_100F0B770()
{
}

void sub_100F0B77C()
{
}

void sub_100F0B788()
{
}

void sub_100F0B794()
{
}

void sub_100F0B7A0()
{
}

void sub_100F0B7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
}

void sub_100F0B7BC(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102303E60);
  }
  uint64_t v5 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v27 = 2048;
    uint64_t v28 = a1;
    __int16 v29 = 1024;
    int v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StepCount subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    int v20 = 138412802;
    uint64_t v21 = v13;
    __int16 v22 = 2048;
    uint64_t v23 = a1;
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  if (sub_101587E5C())
  {
    if (sub_1010A4D14(a1))
    {
      if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLStepCountNotifier"), "syncgetEnabled"))
      {
        sub_10009C834(a1);
        uint64_t v7 = *(void *)(a1 + 48);
        uint64_t v9 = *(void *)(v7 + 8);
        unint64_t v8 = *(void **)(v7 + 16);
        if (a2) {
          [v8 register:v9 forNotification:0 registrationInfo:0];
        }
        else {
          [v8 unregister:v9 forNotification:0];
        }
      }
      else
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102303E60);
        }
        char v11 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Cannot subscribe to step count updates as step counting is not enabled", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102303E60);
          }
          LOWORD(v20) = 0;
          uint64_t v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
          if (v12 != buf) {
            free(v12);
          }
        }
      }
    }
    else
    {
      uint64_t v16 = CMErrorMessage;
      BOOL v17 = &off_1023936E0;
      *(void *)buf = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
      sub_100F0F688(a1);
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    unint64_t v10 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Cannot subscribe to step count updates, step counting is not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v20) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    uint64_t v18 = CMErrorMessage;
    uint64_t v19 = &off_1023936C8;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    sub_100F0F688(a1);
  }
}

void sub_100F0BD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F0BD48(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102303E60);
  }
  uint64_t v5 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PedometerEvent subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    int v16 = 138412802;
    uint64_t v17 = v10;
    __int16 v18 = 2048;
    uint64_t v19 = a1;
    __int16 v20 = 1024;
    int v21 = a2;
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestPedometerEvent(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v11 != buf) {
      free(v11);
    }
  }
  if (sub_1010A4D14(a1))
  {
    sub_100103240();
    if ((sub_1000A16E8() & 0x100000000) != 0)
    {
      sub_10009C834(a1);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(v7 + 8);
      unint64_t v8 = *(void **)(v7 + 16);
      if (a2) {
        [v8 register:v9 forNotification:2 registrationInfo:0];
      }
      else {
        [v8 unregister:v9 forNotification:2];
      }
    }
    else
    {
      uint64_t v12 = CMErrorMessage;
      uint64_t v13 = &off_1023936F8;
      *(void *)buf = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
      sub_100F0F71C(a1);
    }
  }
  else
  {
    uint64_t v14 = CMErrorMessage;
    uint64_t v15 = &off_1023936E0;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    sub_100F0F71C(a1);
  }
}

void sub_100F0C024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F0C064(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102303E60);
  }
  uint64_t v5 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v25 = 2048;
    uint64_t v26 = a1;
    __int16 v27 = 1024;
    int v28 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "OdometerSuitabilityUpdate subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    int v18 = 138412802;
    uint64_t v19 = v11;
    __int16 v20 = 2048;
    uint64_t v21 = a1;
    __int16 v22 = 1024;
    int v23 = a2;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestOdometerSuitabilityUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v12 != buf) {
      free(v12);
    }
  }
  if (sub_101587E5C())
  {
    if (sub_1010A4D14(a1))
    {
      sub_10009C834(a1);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(v7 + 8);
      unint64_t v8 = *(void **)(v7 + 16);
      if (a2) {
        [v8 register:v9 forNotification:3 registrationInfo:0];
      }
      else {
        [v8 unregister:v9 forNotification:3];
      }
    }
    else
    {
      uint64_t v14 = CMErrorMessage;
      uint64_t v15 = &off_1023936E0;
      *(void *)buf = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
      sub_100F0F7B0(a1);
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v10 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Cannot subscribe to step count updates, step counting is not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v18) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestOdometerSuitabilityUpdate(BOOL, const CLNameValuePair &)", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
    uint64_t v16 = CMErrorMessage;
    uint64_t v17 = &off_1023936C8;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    sub_100F0F7B0(a1);
  }
}

void sub_100F0C464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F0C4A4()
{
  id v0 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v1 = CMAvailable;
  uint64_t v2 = +[NSNumber numberWithBool:sub_101587E5C()];
  +[NSDictionary dictionaryWithObjects:&v2 forKeys:&v1 count:1];
  CLConnectionMessage::sendReply();
}

void sub_100F0C564(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100F0C58C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_101587E5C() & 1) == 0)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v11 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "query for step count was received but step counts were not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v35[0]) = 0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    uint64_t v46 = CMErrorMessage;
    uint64_t v47 = &off_1023936C8;
    +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
    goto LABEL_15;
  }
  if ((sub_1010A4D14(a1) & 1) == 0)
  {
    uint64_t v44 = CMErrorMessage;
    uint64_t v45 = &off_1023936E0;
    +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
LABEL_15:
    CLConnectionMessage::sendReply();
    goto LABEL_22;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v6 = Dictionary;
  if (Dictionary
    && (id v7 = [Dictionary objectForKeyedSubscript:CMPedometerStartTime]) != 0
    && (id v8 = [v6 objectForKeyedSubscript:CMPedometerStopTime]) != 0)
  {
    [v7 doubleValue];
    v35[0] = v9;
    [v8 doubleValue];
    double v34 = v10;
    if (v35[0] > v10)
    {
      uint64_t v40 = CMErrorMessage;
      uint64_t v41 = &off_102393728;
      +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
      CLConnectionMessage::sendReply();
      goto LABEL_22;
    }
    id v13 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLStepCountNotifier"];
    if ([v13 syncgetEnabled])
    {
      if (v13)
      {
        [v13 syncgetQueryStartTime:v35 andStopTime:&v34];
        uint64_t v14 = *(unsigned int *)buf;
        double v15 = v49;
        uint64_t v17 = v50;
        uint64_t v16 = v51;
        double v18 = v52;
        unsigned int v19 = v53;
      }
      else
      {
        unsigned int v19 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v14 = 0;
        double v18 = 0.0;
        double v15 = 0.0;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v17 = 0;
      uint64_t v16 = 0;
      unsigned int v19 = 0;
      double v15 = 0.0;
      double v18 = 0.0;
    }
    id v20 = [v13 syncgetDbUUID];

    if (v20)
    {
      id v21 = [objc_alloc((Class)NSUUID) initWithUUIDString:v20];
      if (v21)
      {
        id v22 = objc_alloc((Class)CMPedometerData);
        double v24 = v34;
        double v23 = v35[0];
        if (*(unsigned char *)(a1 + 56))
        {
          __int16 v25 = +[NSNumber numberWithInt:v17];
          if (*(unsigned char *)(a1 + 56))
          {
            uint64_t v26 = +[NSNumber numberWithInt:v16];
LABEL_41:
            if (*(unsigned char *)(a1 + 57)) {
              int v28 = +[NSNumber numberWithDouble:v18];
            }
            else {
              int v28 = 0;
            }
            LODWORD(v33) = 0;
            id v29 = objc_msgSend(v22, "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:", v14, v25, v26, 0, 0, 0, v23, v24, v15, 0.0, v28, v21, 0, 0, v19,
                    0,
                    0,
                    v33);
            uint64_t v38 = CMPedometerDataObject;
            id v39 = v29;
            +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];

            CLConnectionMessage::sendReply();
            goto LABEL_22;
          }
        }
        else
        {
          __int16 v25 = 0;
        }
        uint64_t v26 = 0;
        goto LABEL_41;
      }
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    __int16 v27 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Error querying step count data", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      uint64_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    uint64_t v36 = CMErrorMessage;
    uint64_t v37 = &off_1023936F8;
    +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v12 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v35[0]) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    uint64_t v42 = CMErrorMessage;
    uint64_t v43 = &off_102393710;
    +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
    CLConnectionMessage::sendReply();
  }
LABEL_22:
}

void sub_100F0CD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F0CD9C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(__p, "com.apple.locationd.natalimetry");
  char v5 = sub_1010A4BAC(a1);
  char v6 = v5;
  if ((v82 & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v83 = CMErrorMessage;
    __int16 v84 = &off_1023936E0;
    +[NSDictionary dictionaryWithObjects:&v84 forKeys:&v83 count:1];
LABEL_45:
    CLConnectionMessage::sendReply();
    goto LABEL_46;
  }
  operator delete(__p[0]);
  if ((v6 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_3:
  if ((sub_101587E5C() & 1) == 0)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v36 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "query for step count was received but step counts were not available", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v65) = 0;
      id v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v39);
      if (v39 != (char *)__p) {
        free(v39);
      }
    }
    uint64_t v79 = CMErrorMessage;
    __int16 v80 = &off_1023936C8;
    +[NSDictionary dictionaryWithObjects:&v80 forKeys:&v79 count:1];
    goto LABEL_45;
  }
  if ((sub_1010A4D14(a1) & 1) == 0)
  {
    uint64_t v77 = CMErrorMessage;
    unint64_t v78 = &off_1023936E0;
    +[NSDictionary dictionaryWithObjects:&v78 forKeys:&v77 count:1];
    goto LABEL_45;
  }
  uint64_t v7 = objc_opt_class();
  id v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  double v10 = DictionaryOfClasses;
  if (DictionaryOfClasses
    && (uint64_t v11 = CMPedometerDataObject, [DictionaryOfClasses objectForKeyedSubscript:CMPedometerDataObject]))
  {
    id v12 = [v10 objectForKeyedSubscript:v11];
    unsigned int v13 = [[[v12 numberOfSteps] integerValue];
    [objc_msgSend(v12, "distance") doubleValue];
    uint64_t v15 = v14;
    unsigned int v16 = [v12 recordId];
    id v17 = [[objc_msgSend(v12, "sourceId") UUIDString];
    sub_1000E1294((uint64_t *)v68, (uint64_t)"CLDaemonClient.StepCountRecordQuery", 0);
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    id v18 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLStepCountNotifier"];
    memset(v50, 0, sizeof(v50));
    unsigned int v51 = v13;
    int v52 = 0;
    uint64_t v53 = v15;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v57 = 0;
    unsigned int v58 = v16;
    int v59 = 0;
    id v60 = v17;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v19 = [v18 syncgetQueryPedometerDataSince:v50 withResponseArray:&v65];
    if (v19 == 100)
    {
      id v43 = v4;
      id v20 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v44 = v66;
      id v45 = v20;
      if (v65 != v66)
      {
        id v21 = (char *)v65 + 88;
        do
        {
          if (*((void *)v21 + 2)) {
            id v22 = [objc_alloc((Class)NSUUID) initWithUUIDString:*((void *)v21 + 2)];
          }
          else {
            id v22 = 0;
          }
          id v23 = objc_alloc((Class)CMPedometerData);
          double v24 = *((double *)v21 - 10);
          unsigned int v49 = *((_DWORD *)v21 - 16);
          double v25 = *((double *)v21 - 7);
          if (*(unsigned char *)(a1 + 56))
          {
            __int16 v48 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v21 - 6)];
            if (*(unsigned char *)(a1 + 56))
            {
              uint64_t v47 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v21 - 5)];
              goto LABEL_18;
            }
          }
          else
          {
            __int16 v48 = 0;
          }
          uint64_t v47 = 0;
LABEL_18:
          double v26 = 0.0;
          uint64_t v46 = *((int *)v21 + 2);
          if (!*(unsigned char *)(a1 + 57))
          {
            int v28 = 0;
            __int16 v27 = 0;
            goto LABEL_26;
          }
          if (*((double *)v21 - 2) == 0.0)
          {
            __int16 v27 = 0;
          }
          else
          {
            __int16 v27 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(unsigned char *)(a1 + 57))
            {
              int v28 = 0;
LABEL_26:
              id v29 = 0;
              goto LABEL_29;
            }
          }
          if (*((double *)v21 - 1) == 0.0)
          {
            int v28 = 0;
          }
          else
          {
            int v28 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(unsigned char *)(a1 + 57)) {
              goto LABEL_26;
            }
          }
          double v26 = *((double *)v21 - 9);
          id v29 = +[NSNumber numberWithDouble:*(double *)v21];
LABEL_29:
          unsigned int v31 = *((_DWORD *)v21 + 14);
          unsigned int v30 = *((_DWORD *)v21 + 15);
          if (!*(unsigned char *)(a1 + 58))
          {
            uint64_t v32 = 0;
LABEL_33:
            uint64_t v33 = 0;
            goto LABEL_34;
          }
          uint64_t v32 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v21 + 17)];
          if (!*(unsigned char *)(a1 + 58)) {
            goto LABEL_33;
          }
          uint64_t v33 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v21 + 18)];
LABEL_34:
          LODWORD(v42) = v21[78];
          id v34 = objc_msgSend(v23, "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:", v49, v48, v47, v46, v27, v28, v24, v24, v25, v26, v29, v22, 0, 0, __PAIR64__(v30, v31),
                  v32,
                  v33,
                  v42);
          [v45 addObject:v34];

          uint64_t v35 = v21 + 88;
          v21 += 176;
        }
        while (v35 != v44);
      }
      uint64_t v69 = CMPedometerDataArray;
      id v70 = v45;
      id v4 = v43;
      +[NSDictionary dictionaryWithObjects:&v70 forKeys:&v69 count:1];

      CLConnectionMessage::sendReply();
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      uint64_t v38 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = v19;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Error querying pedometer data, %{public}d", (uint8_t *)__p, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102303E60);
        }
        int v73 = 67240192;
        int v74 = (int)v19;
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v41);
        if (v41 != (char *)__p) {
          free(v41);
        }
      }
      uint64_t v71 = CMErrorMessage;
      v72 = +[NSNumber numberWithUnsignedInt:v19];
      +[NSDictionary dictionaryWithObjects:&v72 forKeys:&v71 count:1];
      CLConnectionMessage::sendReply();
    }
    if (v65)
    {
      uint64_t v66 = (char *)v65;
      operator delete(v65);
    }
    sub_1000E1098(v68);
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v37 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed!", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v65) = 0;
      uint64_t v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v40);
      if (v40 != (char *)__p) {
        free(v40);
      }
    }
    uint64_t v75 = CMErrorMessage;
    v76 = &off_102393728;
    +[NSDictionary dictionaryWithObjects:&v76 forKeys:&v75 count:1];
    CLConnectionMessage::sendReply();
  }
LABEL_46:
}

void sub_100F0D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,id a51)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000E1098(&a51);

  _Unwind_Resume(a1);
}

void sub_100F0D7B4(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_101587E5C())
  {
    sub_100134750(buf, "com.apple.locationd.activity");
    char v3 = sub_1010A4BAC(a1);
    char v4 = v3;
    if (v18 < 0)
    {
      operator delete(*(void **)buf);
      if (v4) {
        goto LABEL_4;
      }
    }
    else if (v3)
    {
LABEL_4:
      [objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLStepCountNotifier") reset];
      goto LABEL_18;
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    char v6 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access motion activity spi", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      uint64_t v9 = *(void *)(a1 + 24);
      int v13 = 138412290;
      uint64_t v14 = v9;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    uint64_t v11 = CMErrorMessage;
    id v12 = &off_102393740;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    sub_100F0F844(a1);
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    char v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Step count reset failed as it was not available!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v13) = 0;
      id v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
      if (v8 != buf) {
        free(v8);
      }
    }
    uint64_t v15 = CMErrorMessage;
    unsigned int v16 = &off_1023936C8;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    sub_100F0F844(a1);
  }
LABEL_18:
}

void sub_100F0DB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_100F0DBE4()
{
  id v0 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v1 = CMAvailable;
  id v2 = +[NSNumber numberWithBool:sub_101587E8C()];
  +[NSDictionary dictionaryWithObjects:&v2 forKeys:&v1 count:1];
  CLConnectionMessage::sendReply();
}

void sub_100F0DCA8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100F0DCD0()
{
  id v0 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v1 = CMAvailable;
  id v2 = +[NSNumber numberWithBool:sub_101587EC4()];
  +[NSDictionary dictionaryWithObjects:&v2 forKeys:&v1 count:1];
  CLConnectionMessage::sendReply();
}

void sub_100F0DD94(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100F0DDBC(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.activity");
  char v5 = sub_1010A4BAC(a1);
  char v6 = v5;
  if ((v26 & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_15:
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v27 = CMErrorMessage;
    int v28 = &off_1023936E0;
    +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_28;
  }
  operator delete(*(void **)buf);
  if ((v6 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102303E60);
  }
  uint64_t v7 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLDaemonClient received StrideCalibrationDump request,client,%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    int v23 = 138412290;
    uint64_t v24 = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  if (sub_101587E5C())
  {
    id v9 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLStepCountNotifier"];
    [v9 registerDelegate:*(void *)(a1 + 64) inSilo:[*(id *)(a1 + 8) silo]];
    if (v9)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3321888768;
      v17[2] = sub_100F0F8D8;
      void v17[3] = &unk_102303D80;
      double v10 = (std::__shared_weak_count *)a2[1];
      v17[4] = *a2;
      char v18 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v9 getPedometerBinsAndHistoryWithReply:v17];

      if (v18) {
        sub_1000DB0A0(v18);
      }
      goto LABEL_30;
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    id v12 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Cannot find step count proxy", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v23) = 0;
      unsigned int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v19 = CMErrorMessage;
    id v20 = &off_1023936C8;
    +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v11 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Step count notifier not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v23) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    sub_100134750(buf, "kCLConnectionMessageError");
    uint64_t v21 = CMErrorMessage;
    id v22 = &off_1023936C8;
    +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    CLConnectionMessage::sendReply();
  }
LABEL_28:
  if (v26 < 0) {
    operator delete(*(void **)buf);
  }
LABEL_30:
}

void sub_100F0E3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_100F0E470(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1010A4D14(a1))
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    char v6 = Dictionary;
    if (Dictionary
      && (uint64_t v7 = CMPedometerCalibrationTypeId,
          [Dictionary objectForKeyedSubscript:CMPedometerCalibrationTypeId])
      && (uint64_t v8 = CMPedometerFetchRemoteCalibrations,
          [v6 objectForKeyedSubscript:CMPedometerFetchRemoteCalibrations]))
    {
      unsigned int v9 = [[v6 objectForKeyedSubscript:v8] boolValue];
      id v10 = [[v6 objectForKeyedSubscript:v7] integerValue];
      if (v9)
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102303E60);
        }
        uint64_t v11 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "received request for remote pedometer calibrations", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102303E60);
          }
          __int16 v26 = 0;
          uint64_t v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        id v12 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLMotionSyncStore"];
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3321888768;
        v24[2] = sub_100F0F8E0;
        _DWORD v24[3] = &unk_102303DB0;
        uint64_t v14 = *(CLConnectionMessage **)a2;
        uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
        v24[4] = v10;
        v24[5] = v14;
        double v25 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        [v12 doAsync:v24];
        if (v25) {
          sub_1000DB0A0(v25);
        }
      }
      else
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102303E60);
        }
        uint64_t v15 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "received request for pedometer calibrations", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102303E60);
          }
          __int16 v26 = 0;
          id v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        id v16 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLStepCountNotifier"];
        [v16 registerDelegate:*(void *)(a1 + 64) inSilo:[*(id *)(a1 + 8) silo]];
        if (v16)
        {
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3321888768;
          v22[2] = sub_100F0FD48;
          v22[3] = &unk_102303DE0;
          id v17 = *(std::__shared_weak_count **)(a2 + 8);
          v22[4] = *(void *)a2;
          int v23 = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          [v16 getPedometerCalibrationBins:v10 withReply:v22];
          if (v23) {
            sub_1000DB0A0(v23);
          }
        }
        else
        {
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102303E60);
          }
          char v18 = qword_102419038;
          if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Cannot find step count proxy", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419030 != -1) {
              dispatch_once(&qword_102419030, &stru_102303E60);
            }
            __int16 v26 = 0;
            uint64_t v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
            if (v21 != (char *)buf) {
              free(v21);
            }
          }
          uint64_t v27 = CMErrorMessage;
          int v28 = &off_1023936E0;
          +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
          CLConnectionMessage::sendReply();
        }
      }
    }
    else
    {
      uint64_t v30 = CMErrorMessage;
      unsigned int v31 = &off_102393728;
      +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v32 = CMErrorMessage;
    uint64_t v33 = &off_1023936E0;
    +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_100F0EB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100F0EB70(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100F0EBAC(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  int v6 = *a3;
  if (*a3 == 3)
  {
    id v15 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:*a4];
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    id v16 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      id v17 = *(void **)a4;
      int v18 = *((unsigned __int8 *)a4 + 8);
      int v19 = *((unsigned __int8 *)a4 + 9);
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v70 = 1024;
      *(_DWORD *)uint64_t v71 = v18;
      *(_WORD *)&v71[4] = 1024;
      *(_DWORD *)&v71[6] = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "OdometerSuitability values,startDate,%.8f,suitableForRunning,%d,suitableForWalking,%d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      uint64_t v40 = *(void **)a4;
      int v41 = *((unsigned __int8 *)a4 + 8);
      int v42 = *((unsigned __int8 *)a4 + 9);
      int v62 = 134218496;
      id v63 = v40;
      __int16 v64 = 1024;
      *(_DWORD *)uint64_t v65 = v41;
      *(_WORD *)&v65[4] = 1024;
      *(_DWORD *)&v65[6] = v42;
      id v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v43);
      if (v43 != buf) {
        free(v43);
      }
    }
    id v20 = [objc_alloc((Class)CMOdometerSuitability) initWithStartDate:v15 suitableForRunning:*((unsigned __int8 *)a4 + 8) suitableForWalking:*((unsigned __int8 *)a4 + 9)];
    uint64_t v58 = CMOdometerSuitabilityObject;
    id v59 = v20;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v59 forKeys:&v58 count:1];

    sub_100F0F604(a1);
  }
  else if (v6 == 2)
  {
    id v21 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:*a4];
    id v22 = [objc_alloc((Class)CMPedometerEvent) initWithEventDate:v21 type:*((unsigned int *)a4 + 2)];
    sub_100103240();
    if (sub_10073E30C())
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      int v23 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *((unsigned int *)a4 + 2);
        double v25 = *(void **)a4;
        uint64_t v26 = *(void *)(a1 + 24);
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v70 = 2048;
        *(void *)uint64_t v71 = v25;
        *(_WORD *)&v71[8] = 2112;
        uint64_t v72 = v26;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending pedometer event,%ld,eventTime,%.3f,%@", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102303E60);
        }
        uint64_t v44 = (void *)*((unsigned int *)a4 + 2);
        id v45 = *(void **)a4;
        uint64_t v46 = *(void *)(a1 + 24);
        int v62 = 134218498;
        id v63 = v44;
        __int16 v64 = 2048;
        *(void *)uint64_t v65 = v45;
        *(_WORD *)&v65[8] = 2112;
        uint64_t v66 = v46;
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v47);
        if (v47 != buf) {
          free(v47);
        }
      }
    }
    uint64_t v60 = CMPedometerEventKey;
    id v61 = v22;
    *(void *)buf = +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];

    sub_100F0F580(a1);
  }
  else
  {
    if (v6) {
      return;
    }
    if (*((void *)a4 + 13))
    {
      id v7 = [objc_alloc((Class)NSUUID) initWithUUIDString:*((void *)a4 + 13)];
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = objc_alloc((Class)CMPedometerData);
        double v10 = a4[1];
        unsigned int v11 = *((_DWORD *)a4 + 6);
        double v12 = a4[4];
        if (*(unsigned char *)(a1 + 56))
        {
          uint64_t v13 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a4 + 16)];
          if (*(unsigned char *)(a1 + 56))
          {
            uint64_t v14 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a4 + 17)];
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v14 = 0;
LABEL_33:
        double v29 = 0.0;
        uint64_t v57 = v9;
        unsigned int v56 = v11;
        long long v54 = v14;
        long long v55 = v13;
        uint64_t v53 = *((int *)a4 + 24);
        if (*(unsigned char *)(a1 + 57))
        {
          if (a4[9] == 0.0)
          {
            int v52 = 0;
          }
          else
          {
            int v52 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(unsigned char *)(a1 + 57))
            {
              unsigned int v51 = 0;
LABEL_41:
              uint64_t v30 = 0;
              goto LABEL_44;
            }
          }
          if (a4[10] == 0.0)
          {
            unsigned int v51 = 0;
          }
          else
          {
            unsigned int v51 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(unsigned char *)(a1 + 57)) {
              goto LABEL_41;
            }
          }
          double v29 = a4[2];
          uint64_t v30 = +[NSNumber numberWithDouble:a4[11]];
LABEL_44:
          unsigned int v31 = +[NSNumber numberWithBool:*((unsigned __int8 *)a4 + 112)];
          uint64_t v32 = +[NSNumber numberWithBool:*((unsigned __int8 *)a4 + 113)];
          unsigned int v34 = *((_DWORD *)a4 + 36);
          unsigned int v33 = *((_DWORD *)a4 + 37);
          if (*(unsigned char *)(a1 + 58))
          {
            uint64_t v35 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a4 + 39)];
            if (*(unsigned char *)(a1 + 58))
            {
              uint64_t v36 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a4 + 40)];
LABEL_49:
              LODWORD(v50) = *((unsigned __int8 *)a4 + 166);
              id v37 = objc_msgSend(v57, "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:", v56, v55, v54, v53, v52, v51, v10, v10, v12, v29, v30, v8, v31, v32, __PAIR64__(v33, v34),
                      v35,
                      v36,
                      v50);
              if (qword_102419030 != -1) {
                dispatch_once(&qword_102419030, &stru_102303E60);
              }
              uint64_t v38 = qword_102419038;
              if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v39 = *(void *)(a1 + 24);
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v37;
                __int16 v70 = 2112;
                *(void *)uint64_t v71 = v39;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "%@ -> %@", buf, 0x16u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419030 != -1) {
                  dispatch_once(&qword_102419030, &stru_102303E60);
                }
                uint64_t v48 = *(void *)(a1 + 24);
                int v62 = 138412546;
                id v63 = v37;
                __int16 v64 = 2112;
                *(void *)uint64_t v65 = v48;
                unsigned int v49 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v49);
                if (v49 != buf) {
                  free(v49);
                }
              }
              uint64_t v67 = CMPedometerDataObject;
              id v68 = v37;
              *(void *)buf = +[NSDictionary dictionaryWithObjects:&v68 forKeys:&v67 count:1];

              sub_100F0F4FC(a1);
              return;
            }
          }
          else
          {
            uint64_t v35 = 0;
          }
          uint64_t v36 = 0;
          goto LABEL_49;
        }
        unsigned int v51 = 0;
        int v52 = 0;
        goto LABEL_41;
      }
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v27 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Error in step count update", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      LOWORD(v62) = 0;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
}

void sub_100F0F4FC(uint64_t a1)
{
  sub_1000E9420(&off_102303FB0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0F568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0F580(uint64_t a1)
{
  sub_1000E9420(&off_102303FB8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0F5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0F604(uint64_t a1)
{
  sub_1000E9420(&off_102303FC0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0F670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0F688(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_102303FB0, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0F704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0F71C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_102303FB8, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0F798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0F7B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_102303FC0, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0F82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F0F844(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_102303FC8, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F0F8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F0F8D8()
{
  return CLConnectionMessage::sendReply();
}

uint64_t sub_100F0F8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 248))(a2);
  }
  else
  {
    if (v5)
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      unsigned int v11 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Requested calibration type not recognized", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102303E60);
        }
        id v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v19 = CMErrorMessage;
      id v20 = &off_102393728;
      double v12 = &v20;
      uint64_t v13 = &v19;
      goto LABEL_23;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 240))(a2);
  }
  uint64_t v7 = v6;
  uint64_t v8 = +[NSMutableDictionary dictionaryWithCapacity:2];
  id v9 = v8;
  if (v4) {
    [(NSMutableDictionary *)v8 setObject:v4 forKeyedSubscript:CLMotionSyncStoreLastUpdate];
  }
  if (!v7)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v14 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "No remote pedometer calibrations available", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v17 = CMErrorMessage;
    int v18 = &off_1023936F8;
    double v12 = &v18;
    uint64_t v13 = &v17;
LABEL_23:
    +[NSDictionary dictionaryWithObjects:v12 forKeys:v13 count:1];
    return CLConnectionMessage::sendReply();
  }
  [(NSMutableDictionary *)v9 setObject:v7 forKeyedSubscript:CMPedometerCalibrationBins];

  return CLConnectionMessage::sendReply();
}

uint64_t sub_100F0FD48(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v11[0] = CMPedometerCalibrationBins;
    v11[1] = CLMotionSyncStoreLastUpdate;
    v12[0] = a2;
    v12[1] = +[NSDate date];
    uint64_t v2 = (_UNKNOWN ***)v12;
    char v3 = v11;
    uint64_t v4 = 2;
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102303E60);
    }
    uint64_t v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No pedometer calibrations available", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303E60);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessagePedometerCalibrationQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    uint64_t v8 = CMErrorMessage;
    id v9 = &off_1023936F8;
    uint64_t v2 = &v9;
    char v3 = &v8;
    uint64_t v4 = 1;
  }
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v3 count:v4];
  return CLConnectionMessage::sendReply();
}

void sub_100F0FF6C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F0FF9C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

__n128 sub_100F0FFCC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102303E90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F10018(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102303E90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F10048(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_100F10050(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F10090()
{
}

void sub_100F1009C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100F100F8(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_100F100E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F100F8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    double v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102303F00);
    }
    unsigned int v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102303F00);
      }
    }
    double v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_100F10328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100F10344(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100F10374(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102303F40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F103C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102303F40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F103F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100F103F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F10438()
{
}

void sub_100F10444(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100F104E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F10508(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100F10584(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F10570(_Unwind_Exception *a1)
{
  sub_100BF24F8(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F10584(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100F10808(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  id v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *id v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100F108F8((uint64_t)v25, 0);
  return i;
}

void sub_100F107F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F108F8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100F10808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100F10880(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100F10868(_Unwind_Exception *a1)
{
  sub_100F108F8(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100F10880(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BF1CB0((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F108DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F108F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF2578((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100F10950()
{
  sub_100134750(qword_102482360, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482360, (void *)&_mh_execute_header);
}

double sub_100F109B0(uint64_t a1, int a2)
{
  *(void *)a1 = off_1022B6F38;
  *(_DWORD *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

void sub_100F109E0(uint64_t a1, uint64_t a2)
{
}

void sub_100F109EC(uint64_t a1, uint64_t a2, double a3)
{
  double v5 = *(double *)a2;
  if (*(double *)a2 < a3)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102303FD0);
    }
    uint64_t v6 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = *(_DWORD *)(a1 + 8) - 1;
      if (v7 > 2) {
        unint64_t v8 = "Unknown";
      }
      else {
        unint64_t v8 = off_102303FF0[v7];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v5;
      __int16 v35 = 2050;
      double v36 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning FitnessMinuteEstimatorYouth (%{public}s), Invalid timestamps - ignored the epoch, epochStartTime:%{public}.3f, epochDuration:%{public}.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102303FD0);
      }
      uint64_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGenericFitnessMinuteEstimatorYouth::slideActivityWindowYouth(CFTimeInterval, const CLMotionStateMediator_Type::MediatedMotionActivity &)", "%s\n", v32);
      if (v32 != buf) {
        free(v32);
      }
    }
    return;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10
    && v5 < *(double *)(*(void *)(*(void *)(a1 + 24) + 8 * ((v10 + *(void *)(a1 + 48) - 1) / 0xAAuLL))
                      + 24 * ((v10 + *(void *)(a1 + 48) - 1) % 0xAAuLL)))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102303FD0);
    }
    uint8x8_t v11 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = *(_DWORD *)(a1 + 8) - 1;
      if (v12 > 2) {
        uint64_t v13 = "Unknown";
      }
      else {
        uint64_t v13 = off_102303FF0[v12];
      }
      unint64_t v14 = *(void *)(a1 + 56) + *(void *)(a1 + 48) - 1;
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8 * (v14 / 0xAA)) + 24 * (v14 % 0xAA));
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v15;
      __int16 v35 = 2050;
      double v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning FitnessMinuteEstimatorYouth (%{public}s), Time rolled back, past back:%{public}.3f, current epochStartTime:%{public}.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102303FD0);
      }
      unsigned int v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGenericFitnessMinuteEstimatorYouth::slideActivityWindowYouth(CFTimeInterval, const CLMotionStateMediator_Type::MediatedMotionActivity &)", "%s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    float v16 = *(void ***)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 32);
    *(void *)(a1 + 56) = 0;
    unint64_t v18 = v17 - (void)v16;
    if (v18 >= 0x11)
    {
      do
      {
        operator delete(*v16);
        uint64_t v19 = *(void *)(a1 + 32);
        float v16 = (void **)(*(void *)(a1 + 24) + 8);
        *(void *)(a1 + 24) = v16;
        unint64_t v18 = v19 - (void)v16;
      }
      while (v18 > 0x10);
    }
    if (v18 >> 3 == 1)
    {
      uint64_t v20 = 85;
      goto LABEL_28;
    }
    if (v18 >> 3 == 2)
    {
      uint64_t v20 = 170;
LABEL_28:
      *(void *)(a1 + 48) = v20;
    }
  }
  *(double *)buf = v5;
  *(double *)&uint8_t buf[8] = a3;
  *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(a2 + 136);
  sub_100F11244((void *)(a1 + 16), (long long *)buf);
  uint64_t v21 = *(void *)(a1 + 24);
  unint64_t v22 = *(void *)(a1 + 48);
  unint64_t v23 = (double *)(*(void *)(v21 + 8 * (v22 / 0xAA)) + 24 * (v22 % 0xAA));
  double v24 = v23[1];
  double v25 = *v23 - v24;
  if (*(double *)(*(void *)(v21 + 8 * ((v22 + *(void *)(a1 + 56) - 1) / 0xAA))
                 + 24 * ((v22 + *(void *)(a1 + 56) - 1) % 0xAA))
     - v25 >= 60.0)
  {
    sub_100F110D0((void *)a1, (uint64_t)buf);
    if (*(double *)buf >= 60.0)
    {
      if ((*(uint64_t (**)(uint64_t, unsigned char *, double))(*(void *)a1 + 24))(a1, buf, *(double *)buf))
      {
        (*(void (**)(uint64_t, double))(*(void *)a1 + 16))(a1, v25);
        double v24 = 60.0;
      }
      else
      {
        double v24 = *(double *)(*(void *)(*(void *)(a1 + 24) + 8 * (*(void *)(a1 + 48) / 0xAAuLL))
                        + 24 * (*(void *)(a1 + 48) % 0xAAuLL)
                        + 8);
      }
    }
    uint64_t v26 = *(void *)(a1 + 56);
    if (v26)
    {
      double v27 = v25 + v24;
      do
      {
        unint64_t v28 = *(void *)(a1 + 48);
        uint64_t v29 = *(void *)(*(void *)(a1 + 24) + 8 * (v28 / 0xAA));
        unint64_t v30 = 24 * (v28 % 0xAA);
        double v31 = *(double *)(v29 + v30);
        if (v27 <= v31 - *(double *)(v29 + v30 + 8)) {
          break;
        }
        if (v31 > v27)
        {
          *(double *)(v29 + v30 + 8) = v31 - v27;
          return;
        }
        *(void *)(a1 + 56) = v26 - 1;
        *(void *)(a1 + 48) = v28 + 1;
        sub_10041FD7C(a1 + 16, 1);
        uint64_t v26 = *(void *)(a1 + 56);
      }
      while (v26);
    }
  }
}

void *sub_100F110D0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = result[3];
  if (result[4] == v2) {
    goto LABEL_17;
  }
  unint64_t v3 = result[6];
  unint64_t v4 = *(void *)(v2 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA);
  unint64_t v5 = *(void *)(v2 + 8 * ((result[7] + v3) / 0xAA)) + 24 * ((result[7] + v3) % 0xAA);
  if (v4 == v5) {
    goto LABEL_17;
  }
  uint64_t v6 = (void *)(v2 + 8 * (v3 / 0xAA));
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  do
  {
    if (v11 < 60.0)
    {
      double v12 = 60.0 - v11;
      if (60.0 - v11 >= *(double *)(v4 + 8)) {
        double v12 = *(double *)(v4 + 8);
      }
      double v11 = v11 + v12;
      *(double *)a2 = v11;
      switch(*(_DWORD *)(v4 + 16))
      {
        case 0:
          double v7 = v12 + v7;
          *(double *)(a2 + 8) = v7;
          break;
        case 1:
          double v9 = v12 + v9;
          *(double *)(a2 + 16) = v9;
          break;
        case 2:
          double v10 = v12 + v10;
          *(double *)(a2 + 24) = v10;
          break;
        case 3:
          double v8 = v12 + v8;
          *(double *)(a2 + 32) = v8;
          break;
        default:
          break;
      }
    }
    v4 += 24;
    if (v4 - *v6 == 4080)
    {
      unint64_t v13 = v6[1];
      ++v6;
      unint64_t v4 = v13;
    }
  }
  while (v4 != v5);
  if (v11 <= 0.0)
  {
LABEL_17:
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
  }
  else
  {
    *(double *)(a2 + 8) = v7 * 100.0 / v11;
    *(double *)(a2 + 16) = v9 * 100.0 / v11;
    *(double *)(a2 + 24) = v10 * 100.0 / v11;
    *(double *)(a2 + 32) = v8 * 100.0 / v11;
  }
  return result;
}

uint64_t sub_100F11244(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F11360(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  long long v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  unint64_t v14 = (void *)(v13 + 8 * (v12 / 0xAA));
  uint64_t v15 = *v14 + 24 * (v12 % 0xAA);
  if (a1[2] == v13) {
    uint64_t v15 = 0;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4080;
  }
  return v15 - 24;
}

void sub_100F11330(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_100F11360(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      id v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      id v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      id v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100F1162C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F11DB4(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
    }
  }
  return result;
}

void sub_100F11E84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)(a2 + 296);
  float v7 = *(float *)(a2 + 1368);
  float v8 = *(float *)(a2 + 1372);
  float v9 = *(float *)(a2 + 1376);
  float v10 = *(float *)(a2 + 1380);
  double v11 = *(double *)(a2 + 112);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 3;
  sub_10068D230();
  float v13 = v12;
  *(float *)(a3 + 12) = v12;
  if (sub_1001860C8(a2) && *(double *)(a2 + 600) < *(double *)a2)
  {
    float v14 = *(double *)(a2 + 560);
    float v15 = (v10 - v14) / (v10 - v9);
    float v16 = v7 * sub_101141BD8(v15, v8);
    *(float *)(a3 + 20) = v16;
    int v17 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(double *)(a1 + 8) = v11;
    *(float *)(a1 + 16) = v16;
  }
  else
  {
    float v16 = *(float *)(a1 + 16);
    if (v16 <= 0.0 || vabdd_f64(v11, *(double *)(a1 + 8)) >= 150.0)
    {
      int v17 = 0;
      *(float *)(a3 + 20) = v13;
      *(_DWORD *)(a3 + 24) = 0;
      float v16 = v13;
    }
    else
    {
      if (v6 > 18.0)
      {
        *(double *)(a1 + 8) = v11;
        float v16 = v16 * 1.2;
      }
      *(float *)(a3 + 20) = v16;
      int v17 = 1;
      *(_DWORD *)(a3 + 24) = 1;
    }
  }
  *(float *)(a3 + 28) = v16;
  *(_DWORD *)(a3 + 32) = v17;
  *(_DWORD *)(a3 + 36) = 15;
  int v18 = v17;
  float v19 = v16;
  if (v16 < 2.1)
  {
    *(void *)(a3 + 20) = 0x340066666;
    int v18 = 3;
    float v19 = 2.1;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1023040F8);
  }
  int64_t v20 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218752;
    double v23 = v19;
    __int16 v24 = 1024;
    int v25 = v18;
    __int16 v26 = 2048;
    double v27 = v16;
    __int16 v28 = 1024;
    int v29 = v17;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Calisthenics (HIIT), METS, %f, %d, truthMETS, %f, %d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023040F8);
    }
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieCalisthenicsModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
}

void sub_100F121E8(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100F12218()
{
  if (qword_10248AE28) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE28 + 8))(qword_10248AE28);
  }
  if (qword_10248AE30) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE30 + 8))(qword_10248AE30);
  }
  if (qword_10248AE38) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE38 + 8))(qword_10248AE38);
  }
  if (qword_10248AE40) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE40 + 8))(qword_10248AE40);
  }
  if (qword_10248AE48) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE48 + 8))(qword_10248AE48);
  }
  if (qword_10248AE50) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE50 + 8))(qword_10248AE50);
  }
  if (qword_10248AE58) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE58 + 8))(qword_10248AE58);
  }
  if (qword_10248AE60) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE60 + 8))(qword_10248AE60);
  }
  if (qword_10248AE68) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE68 + 8))(qword_10248AE68);
  }
  if (qword_10248AE70) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE70 + 8))(qword_10248AE70);
  }
  if (qword_10248AE78) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE78 + 8))(qword_10248AE78);
  }
  if (qword_10248AE80) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE80 + 8))(qword_10248AE80);
  }
  if (qword_10248AE88) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE88 + 8))(qword_10248AE88);
  }
  if (qword_10248AE90) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE90 + 8))(qword_10248AE90);
  }
  if (qword_10248AE98) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AE98 + 8))(qword_10248AE98);
  }
  if (qword_10248AEA0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEA0 + 8))(qword_10248AEA0);
  }
  if (qword_10248AEA8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEA8 + 8))(qword_10248AEA8);
  }
  if (qword_10248AEB0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEB0 + 8))(qword_10248AEB0);
  }
  if (qword_10248AEB8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEB8 + 8))(qword_10248AEB8);
  }
  if (qword_10248AEC0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEC0 + 8))(qword_10248AEC0);
  }
  if (qword_10248AEC8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEC8 + 8))(qword_10248AEC8);
  }
  if (qword_10248AED0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AED0 + 8))(qword_10248AED0);
  }
  if (qword_10248AED8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AED8 + 8))(qword_10248AED8);
  }
  if (qword_10248AEE0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEE0 + 8))(qword_10248AEE0);
  }
  if (qword_10248AEE8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEE8 + 8))(qword_10248AEE8);
  }
  if (qword_10248AEF0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEF0 + 8))(qword_10248AEF0);
  }
  if (qword_10248AEF8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AEF8 + 8))(qword_10248AEF8);
  }
  if (qword_10248AF00) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF00 + 8))(qword_10248AF00);
  }
  if (qword_10248AF08) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF08 + 8))(qword_10248AF08);
  }
  if (qword_10248AF10) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF10 + 8))(qword_10248AF10);
  }
  if (qword_10248AF18) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF18 + 8))(qword_10248AF18);
  }
  if (qword_10248AF20) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF20 + 8))(qword_10248AF20);
  }
  if (qword_10248AF28) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF28 + 8))(qword_10248AF28);
  }
  if (qword_10248AF30) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF30 + 8))(qword_10248AF30);
  }
  if (qword_10248AF38) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF38 + 8))(qword_10248AF38);
  }
  if (qword_10248AF40) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF40 + 8))(qword_10248AF40);
  }
  if (qword_10248AF48) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF48 + 8))(qword_10248AF48);
  }
  if (qword_10248AF50) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF50 + 8))(qword_10248AF50);
  }
  if (qword_10248AF58) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF58 + 8))(qword_10248AF58);
  }
  if (qword_10248AF60) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF60 + 8))(qword_10248AF60);
  }
  if (qword_10248AF68) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AF68 + 8))(qword_10248AF68);
  }
  uint64_t result = qword_10248AF70;
  if (qword_10248AF70)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248AF70 + 8);
    return v1();
  }
  return result;
}

void sub_100F12A20(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102482378 & 1) == 0)
  {
    byte_102482378 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPLocationController.pb.cc", a4);
    sub_1003DAD90(v4, v5, v6, v7);
    operator new();
  }
}

uint64_t sub_100F1393C(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)uint64_t result = off_102304128;
  *(void *)(result + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

double sub_100F13970(uint64_t a1)
{
  *(void *)a1 = &off_1023041A0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  return result;
}

void *sub_100F139A4(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = &off_102304218;
  return result;
}

void *sub_100F139C8(void *result)
{
  *double result = &off_1023043F8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100F139EC(void *result)
{
  result[5] = 0;
  *double result = off_102304380;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *(void *)((char *)result + 29) = 0;
  return result;
}

void *sub_100F13A18(void *result)
{
  *double result = &off_1023044E8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100F13A3C(uint64_t result)
{
  *(void *)double result = off_102304470;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_100F13A60(void *result)
{
  *double result = &off_1023045D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

double sub_100F13A84(uint64_t a1)
{
  *(void *)a1 = off_102304560;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void *sub_100F13AB0(void *result)
{
  *double result = &off_1023046C8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100F13AD4(uint64_t result)
{
  *(void *)double result = off_102304650;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_100F13AF8(void *result)
{
  *double result = &off_102304830;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100F13B1C(uint64_t result)
{
  *(void *)double result = off_102304740;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(result + 52) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 0;
  return result;
}

uint64_t sub_100F13B54(uint64_t result)
{
  *(_WORD *)(result + 16) = 0;
  *(void *)double result = &off_1023047B8;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *sub_100F13B7C(void *result)
{
  *double result = &off_102304920;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100F13BA0(uint64_t result)
{
  *(void *)double result = off_1023048A8;
  *(unsigned char *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_100F13BC8(void *result)
{
  *double result = &off_102304A10;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100F13BEC(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = &off_102304998;
  return result;
}

void *sub_100F13C10(void *result)
{
  *double result = &off_102304B00;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100F13C34(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = &off_102304A88;
  return result;
}

void *sub_100F13C58(void *result)
{
  *double result = &off_102304BF0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100F13C7C(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = &off_102304B78;
  return result;
}

void *sub_100F13CA0(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = off_102304C68;
  return result;
}

void *sub_100F13CC4(void *result)
{
  *double result = &off_1023050A0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100F13CE8(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = &off_102305028;
  return result;
}

void *sub_100F13D0C(void *result)
{
  *double result = &off_102305190;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100F13D30(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_102305118;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void *sub_100F13D5C(void *result)
{
  *double result = &off_102305370;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *sub_100F13D80(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *double result = &off_1023052F8;
  return result;
}

uint64_t sub_100F13DA4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5 = sub_1003E209C((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  uint64_t v9 = sub_1003E50E8(v5, v6, v7, v8);
  a1[2] = v9;
  uint64_t v13 = sub_1003EA32C(v9, v10, v11, v12);
  a1[3] = v13;
  uint64_t v17 = sub_1003E76DC(v13, v14, v15, v16);
  a1[4] = v17;
  uint64_t v21 = sub_1003E7AFC(v17, v18, v19, v20);
  a1[7] = v21;
  uint64_t v25 = sub_1003E7F6C(v21, v22, v23, v24);
  a1[8] = v25;
  uint64_t v29 = sub_1003E88B4(v25, v26, v27, v28);
  a1[9] = v29;
  uint64_t v33 = sub_10040BE88(v29, v30, v31, v32);
  a1[10] = v33;
  uint64_t v37 = sub_1003EAB50(v33, v34, v35, v36);
  a1[11] = v37;
  uint64_t result = sub_1003EB2C8(v37, v38, v39, v40);
  a1[12] = result;
  return result;
}

uint64_t sub_100F13E14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = sub_1003DE420((uint64_t)a1, a2, a3, a4);
  a1[1] = result;
  uint64_t v6 = qword_10248AF68;
  if (qword_10248AF68)
  {
    a1[2] = qword_10248AF68;
  }
  else
  {
    uint64_t result = ((uint64_t (*)(void))sub_100F12A20)();
    uint64_t v6 = qword_10248AF68;
    a1[2] = qword_10248AF68;
    if (!v6)
    {
      uint64_t result = sub_100F12A20(result);
      uint64_t v6 = qword_10248AF68;
    }
  }
  a1[3] = v6;
  uint64_t v7 = qword_10248AE38;
  if (!qword_10248AE38)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v7 = qword_10248AE38;
  }
  a1[4] = v7;
  uint64_t v8 = qword_10248AE50;
  if (!qword_10248AE50)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v8 = qword_10248AE50;
  }
  a1[5] = v8;
  uint64_t v9 = qword_10248AE60;
  if (!qword_10248AE60)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v9 = qword_10248AE60;
  }
  a1[6] = v9;
  uint64_t v10 = qword_10248AE70;
  if (!qword_10248AE70)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v10 = qword_10248AE70;
  }
  a1[7] = v10;
  uint64_t v11 = qword_10248AE80;
  if (!qword_10248AE80)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v11 = qword_10248AE80;
  }
  a1[8] = v11;
  uint64_t v12 = qword_10248AE90;
  if (!qword_10248AE90)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v12 = qword_10248AE90;
  }
  a1[9] = v12;
  uint64_t v13 = qword_10248AEA8;
  if (!qword_10248AEA8)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v13 = qword_10248AEA8;
  }
  a1[10] = v13;
  uint64_t v14 = qword_10248AEB8;
  if (!qword_10248AEB8)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v14 = qword_10248AEB8;
  }
  a1[11] = v14;
  uint64_t v15 = qword_10248AEC8;
  if (!qword_10248AEC8)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v15 = qword_10248AEC8;
  }
  a1[12] = v15;
  uint64_t v16 = qword_10248AED8;
  if (!qword_10248AED8)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v16 = qword_10248AED8;
  }
  a1[13] = v16;
  uint64_t v17 = qword_10248AEE8;
  if (!qword_10248AEE8)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v17 = qword_10248AEE8;
  }
  a1[14] = v17;
  uint64_t v18 = qword_10248AEF0;
  if (!qword_10248AEF0)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v18 = qword_10248AEF0;
  }
  a1[15] = v18;
  uint64_t v19 = qword_10248AF00;
  if (!qword_10248AF00)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v19 = qword_10248AF00;
  }
  a1[16] = v19;
  uint64_t v20 = qword_10248AF18;
  if (!qword_10248AF18)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v20 = qword_10248AF18;
  }
  a1[17] = v20;
  uint64_t v21 = qword_10248AF28;
  if (!qword_10248AF28)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v21 = qword_10248AF28;
  }
  a1[18] = v21;
  uint64_t v22 = qword_10248AF38;
  if (!qword_10248AF38)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v22 = qword_10248AF38;
  }
  a1[19] = v22;
  uint64_t v23 = qword_10248AF48;
  if (!qword_10248AF48)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v23 = qword_10248AF48;
  }
  a1[20] = v23;
  uint64_t v24 = qword_10248AF58;
  if (!qword_10248AF58)
  {
    uint64_t result = sub_100F12A20(result);
    uint64_t v24 = qword_10248AF58;
  }
  a1[21] = v24;
  return result;
}

BOOL sub_100F1401C(unsigned int a1)
{
  return a1 < 0xC;
}

void sub_100F14028(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    sub_100221DFC(a1 + 16, *(_DWORD *)(a1 + 24) + v4);
    memcpy((void *)(*(void *)(a1 + 16) + 4 * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 40))
    {
      int v6 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      uint64_t v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v8, v7);
    }
  }
}

void sub_100F14154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1416C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304128;
  sub_1001A4D20((uint64_t)a1);
  if (*((void *)a1 + 2)) {
    operator delete[]();
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F141E0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1416C(a1);

  operator delete();
}

void sub_100F14218()
{
}

uint64_t sub_100F14274(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_100F142C4(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 16;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        v29[0] = 0;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v29);
          if (!result) {
            return result;
          }
          unsigned int v14 = v29[0];
          uint64_t v15 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          unsigned int v14 = *v13;
          uint64_t v15 = v13 + 1;
          *((void *)this + 1) = v15;
        }
        *(_DWORD *)(a1 + 32) = v14;
        int v16 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v16;
        if ((unint64_t)v15 < v12 && *v15 == 18)
        {
          *((void *)this + 1) = v15 + 1;
          goto LABEL_30;
        }
      }
      if (v8 != 2) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_20;
      }
      int v16 = *(_DWORD *)(a1 + 40);
LABEL_30:
      *(_DWORD *)(a1 + 40) = v16 | 2;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      uint64_t v17 = (char *)*((void *)this + 1);
      uint64_t v10 = (char *)*((void *)this + 2);
      if (v17 < v10 && *v17 == 24)
      {
        do
        {
          uint64_t v11 = v17 + 1;
          *((void *)this + 1) = v11;
LABEL_36:
          v29[0] = 0;
          if (v11 >= v10 || *v11 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v29);
            if (!result) {
              return result;
            }
            unsigned int v18 = v29[0];
          }
          else
          {
            unsigned int v18 = *v11;
            *((void *)this + 1) = v11 + 1;
          }
          int v19 = *(_DWORD *)(a1 + 24);
          if (v19 == *(_DWORD *)(a1 + 28))
          {
            sub_100221DFC(v5, v19 + 1);
            int v19 = *(_DWORD *)(a1 + 24);
          }
          uint64_t v20 = *(void *)(a1 + 16);
          *(_DWORD *)(a1 + 24) = v19 + 1;
          *(_DWORD *)(v20 + 4 * v19) = v18;
          int v21 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24);
          if (v21 >= 1)
          {
            int v22 = v21 + 1;
            do
            {
              uint64_t v23 = (unsigned char *)*((void *)this + 1);
              unint64_t v24 = *((void *)this + 2);
              if ((unint64_t)v23 >= v24 || *v23 != 24) {
                break;
              }
              *((void *)this + 1) = v23 + 1;
              v29[0] = 0;
              if ((unint64_t)(v23 + 1) >= v24 || (char)v23[1] < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v29);
                if (!result) {
                  return result;
                }
                unsigned int v25 = v29[0];
              }
              else
              {
                unsigned int v25 = v23[1];
                *((void *)this + 1) = v23 + 2;
              }
              int v26 = *(_DWORD *)(a1 + 24);
              if (v26 >= *(_DWORD *)(a1 + 28))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v29);
                int v26 = *(_DWORD *)(a1 + 24);
              }
              uint64_t v27 = *(void *)(a1 + 16);
              *(_DWORD *)(a1 + 24) = v26 + 1;
              *(_DWORD *)(v27 + 4 * v26) = v25;
              --v22;
            }
            while (v22 > 1);
          }
LABEL_55:
          uint64_t v17 = (char *)*((void *)this + 1);
          uint64_t v10 = (char *)*((void *)this + 2);
        }
        while (v17 < v10 && *v17 == 24);
        if (v17 == v10 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v8 != 3)
    {
      int v9 = TagFallback & 7;
      goto LABEL_20;
    }
    int v9 = TagFallback & 7;
    if (v9 == 2) {
      break;
    }
    if ((TagFallback & 7) == 0)
    {
      uint64_t v11 = (char *)*((void *)this + 1);
      uint64_t v10 = (char *)*((void *)this + 2);
      goto LABEL_36;
    }
LABEL_20:
    if (v9 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  uint64_t result = sub_100B73850(this, v5);
  if (result) {
    goto LABEL_55;
  }
  return result;
}

void sub_100F1463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F14654(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
  }
  if ((v6 & 2) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v7 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(*(void *)(v5 + 16) + 4 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  return result;
}

uint64_t sub_100F146E4(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 40);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      int v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 40) & 2) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    int v4 = 0;
    if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    char v8 = *(unsigned char *)(v6 + 23);
  }
  else
  {
    int v11 = 1;
  }
  if (v8 < 0) {
    int v7 = v9;
  }
  v4 += v11 + v7 + 1;
LABEL_22:
  int v12 = *(_DWORD *)(a1 + 24);
  if (v12 < 1)
  {
    int v14 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = 0;
    do
    {
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(*(void *)(a1 + 16)
                                                                                             + 4 * v13);
      if ((v15 & 0x80000000) != 0)
      {
        int v16 = 10;
      }
      else if (v15 >= 0x80)
      {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
        int v12 = *(_DWORD *)(a1 + 24);
      }
      else
      {
        int v16 = 1;
      }
      v14 += v16;
      ++v13;
    }
    while (v13 < v12);
  }
  uint64_t result = (v14 + v4 + v12);
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

void sub_100F14818(uint64_t a1, void *lpsrc)
{
  sub_100F14028(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F148A0()
{
  return 1;
}

void *sub_100F148A8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.Client");
}

void sub_100F148B8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  int v4 = *(_DWORD *)(a2 + 64);
  if (!(_BYTE)v4) {
    goto LABEL_27;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 64) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AE30 + 8);
    }
    sub_1003E1BD8(v5, v6);
    int v4 = *(_DWORD *)(a2 + 64);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(void *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_12:
      if ((v4 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_12;
  }
  char v8 = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 64) |= 4u;
  *(unsigned char *)(a1 + 24) = v8;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v9 = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 64) |= 8u;
  *(unsigned char *)(a1 + 25) = v9;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
LABEL_22:
    char v11 = *(unsigned char *)(a2 + 27);
    *(_DWORD *)(a1 + 64) |= 0x20u;
    *(unsigned char *)(a1 + 27) = v11;
    int v4 = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_16:
      if ((v4 & 0x80) == 0) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_21:
  char v10 = *(unsigned char *)(a2 + 26);
  *(_DWORD *)(a1 + 64) |= 0x10u;
  *(unsigned char *)(a1 + 26) = v10;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_15:
  if ((v4 & 0x40) == 0) {
    goto LABEL_16;
  }
LABEL_23:
  unsigned int v12 = *(_DWORD *)(a2 + 28);
  if (v12 >= 0xC) {
    sub_101A96788();
  }
  *(_DWORD *)(a1 + 64) |= 0x40u;
  *(_DWORD *)(a1 + 28) = v12;
  int v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 0x80) != 0)
  {
LABEL_25:
    int v13 = *(_DWORD *)(a2 + 32);
    if ((sub_100164354(v13) & 1) == 0) {
      sub_101A9675C();
    }
    *(_DWORD *)(a1 + 64) |= 0x80u;
    *(_DWORD *)(a1 + 32) = v13;
    int v4 = *(_DWORD *)(a2 + 64);
  }
LABEL_27:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      unsigned int v14 = *(_DWORD *)(a2 + 36);
      if (v14 >= 5) {
        sub_101A96730();
      }
      *(_DWORD *)(a1 + 64) |= 0x100u;
      *(_DWORD *)(a1 + 36) = v14;
      int v4 = *(_DWORD *)(a2 + 64);
    }
    if ((v4 & 0x200) != 0)
    {
      uint64_t v15 = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 64) |= 0x200u;
      *(void *)(a1 + 40) = v15;
      int v4 = *(_DWORD *)(a2 + 64);
    }
    if ((v4 & 0x400) != 0)
    {
      unsigned int v16 = *(_DWORD *)(a2 + 48);
      if (!sub_10016D634(v16)) {
        sub_101A96704();
      }
      *(_DWORD *)(a1 + 64) |= 0x400u;
      *(_DWORD *)(a1 + 48) = v16;
      int v4 = *(_DWORD *)(a2 + 64);
    }
    if ((v4 & 0x800) != 0)
    {
      int v17 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 64) |= 0x800u;
      *(_DWORD *)(a1 + 52) = v17;
      int v4 = *(_DWORD *)(a2 + 64);
    }
    if ((v4 & 0x1000) != 0)
    {
      unsigned int v18 = *(_DWORD *)(a2 + 56);
      if (v18 >= 6) {
        sub_101A966D8();
      }
      *(_DWORD *)(a1 + 64) |= 0x1000u;
      *(_DWORD *)(a1 + 56) = v18;
    }
  }
}

void sub_100F14B4C()
{
}

void sub_100F14B84(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023041A0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AE30 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F14C14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F14B84(a1);

  operator delete();
}

void sub_100F14C4C()
{
}

uint64_t sub_100F14CA8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 64);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1003E214C(result);
        int v2 = *(_DWORD *)(v1 + 64);
      }
    }
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    *(_DWORD *)(v1 + 32) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(void *)(v1 + 44) = 0;
    *(void *)(v1 + 36) = 0;
    *(void *)(v1 + 52) = 0;
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t sub_100F14D08(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_37;
        }
        *(_DWORD *)(a1 + 64) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        v55[0] = 0;
        char v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55))return 0; {
        }
          }
        else
        {
          v55[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26) {
          return 0;
        }
        int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v55[0]);
        if (!sub_1003E21EC(v8, this, v28) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        int v29 = *((_DWORD *)this + 14);
        BOOL v30 = __OFSUB__(v29, 1);
        int v31 = v29 - 1;
        if (v31 < 0 == v30) {
          *((_DWORD *)this + 14) = v31;
        }
        long long v32 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 != 17) {
          continue;
        }
        *((void *)this + 1) = v32 + 1;
        goto LABEL_50;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_37;
        }
LABEL_50:
        *(void *)long long v55 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v55) & 1) == 0)return 0; {
        *(void *)(a1 + 16) = *(void *)v55;
        }
        *(_DWORD *)(a1 + 64) |= 2u;
        uint64_t v33 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v33 >= v10 || *v33 != 24) {
          continue;
        }
        char v11 = v33 + 1;
        *((void *)this + 1) = v11;
LABEL_54:
        v55[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!result) {
            return result;
          }
          unsigned int v34 = v55[0];
          uint64_t v35 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v34 = *v11;
          uint64_t v35 = v11 + 1;
          *((void *)this + 1) = v35;
        }
        *(unsigned char *)(a1 + 24) = v34 != 0;
        *(_DWORD *)(a1 + 64) |= 4u;
        if ((unint64_t)v35 >= v10 || *v35 != 32) {
          continue;
        }
        unsigned int v12 = v35 + 1;
        *((void *)this + 1) = v12;
LABEL_62:
        v55[0] = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!result) {
            return result;
          }
          unsigned int v37 = v55[0];
          uint64_t v38 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v37 = *v12;
          uint64_t v38 = v12 + 1;
          *((void *)this + 1) = v38;
        }
        *(unsigned char *)(a1 + 25) = v37 != 0;
        *(_DWORD *)(a1 + 64) |= 8u;
        if ((unint64_t)v38 >= v10 || *v38 != 40) {
          continue;
        }
        int v13 = v38 + 1;
        *((void *)this + 1) = v13;
LABEL_70:
        v55[0] = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!result) {
            return result;
          }
          unsigned int v39 = v55[0];
          uint64_t v40 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v39 = *v13;
          uint64_t v40 = v13 + 1;
          *((void *)this + 1) = v40;
        }
        *(unsigned char *)(a1 + 26) = v39 != 0;
        *(_DWORD *)(a1 + 64) |= 0x10u;
        if ((unint64_t)v40 >= v10 || *v40 != 48) {
          continue;
        }
        unsigned int v14 = v40 + 1;
        *((void *)this + 1) = v14;
LABEL_78:
        v55[0] = 0;
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!result) {
            return result;
          }
          unsigned int v41 = v55[0];
          uint64_t v42 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v41 = *v14;
          uint64_t v42 = v14 + 1;
          *((void *)this + 1) = v42;
        }
        *(unsigned char *)(a1 + 27) = v41 != 0;
        *(_DWORD *)(a1 + 64) |= 0x20u;
        if ((unint64_t)v42 >= v10 || *v42 != 56) {
          continue;
        }
        uint64_t v15 = v42 + 1;
        *((void *)this + 1) = v15;
LABEL_86:
        v55[0] = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!result) {
            return result;
          }
          unsigned int v43 = v55[0];
        }
        else
        {
          unsigned int v43 = *v15;
          *((void *)this + 1) = v15 + 1;
        }
        if (v43 <= 0xB)
        {
          *(_DWORD *)(a1 + 64) |= 0x40u;
          *(_DWORD *)(a1 + 28) = v43;
        }
        uint64_t v44 = (unsigned char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v44 >= v16 || *v44 != 64) {
          continue;
        }
        int v17 = v44 + 1;
        *((void *)this + 1) = v17;
LABEL_96:
        v55[0] = 0;
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!result) {
            return result;
          }
          int v45 = v55[0];
        }
        else
        {
          int v45 = *v17;
          *((void *)this + 1) = v17 + 1;
        }
        if (sub_100164354(v45))
        {
          if ((sub_100164354(v45) & 1) == 0) {
            sub_101A9675C();
          }
          *(_DWORD *)(a1 + 64) |= 0x80u;
          *(_DWORD *)(a1 + 32) = v45;
        }
        unint64_t v46 = (unsigned char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        if ((unint64_t)v46 >= v18 || *v46 != 72) {
          continue;
        }
        int v19 = v46 + 1;
        *((void *)this + 1) = v19;
LABEL_107:
        v55[0] = 0;
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
          if (!result) {
            return result;
          }
          unsigned int v47 = v55[0];
        }
        else
        {
          unsigned int v47 = *v19;
          *((void *)this + 1) = v19 + 1;
        }
        if (v47 <= 4)
        {
          *(_DWORD *)(a1 + 64) |= 0x100u;
          *(_DWORD *)(a1 + 36) = v47;
        }
        uint64_t v48 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v48 >= *((void *)this + 2) || *v48 != 81) {
          continue;
        }
        *((void *)this + 1) = v48 + 1;
LABEL_117:
        *(void *)long long v55 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v55))
        {
          *(void *)(a1 + 40) = *(void *)v55;
          *(_DWORD *)(a1 + 64) |= 0x200u;
          uint64_t v49 = (unsigned char *)*((void *)this + 1);
          unint64_t v20 = *((void *)this + 2);
          if ((unint64_t)v49 < v20 && *v49 == 88)
          {
            int v21 = v49 + 1;
            *((void *)this + 1) = v21;
LABEL_121:
            v55[0] = 0;
            if ((unint64_t)v21 >= v20 || *v21 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
              if (!result) {
                return result;
              }
              unsigned int v50 = v55[0];
            }
            else
            {
              unsigned int v50 = *v21;
              *((void *)this + 1) = v21 + 1;
            }
            if (sub_10016D634(v50))
            {
              if (!sub_10016D634(v50)) {
                sub_101A96704();
              }
              *(_DWORD *)(a1 + 64) |= 0x400u;
              *(_DWORD *)(a1 + 48) = v50;
            }
            unsigned int v51 = (unsigned char *)*((void *)this + 1);
            unint64_t v22 = *((void *)this + 2);
            if ((unint64_t)v51 < v22 && *v51 == 96)
            {
              uint64_t v23 = v51 + 1;
              *((void *)this + 1) = v23;
LABEL_132:
              v55[0] = 0;
              if ((unint64_t)v23 >= v22 || *v23 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                if (!result) {
                  return result;
                }
                unsigned int v52 = v55[0];
                uint64_t v53 = (unsigned char *)*((void *)this + 1);
                unint64_t v22 = *((void *)this + 2);
              }
              else
              {
                unsigned int v52 = *v23;
                uint64_t v53 = v23 + 1;
                *((void *)this + 1) = v53;
              }
              *(_DWORD *)(a1 + 52) = v52;
              *(_DWORD *)(a1 + 64) |= 0x800u;
              if ((unint64_t)v53 < v22 && *v53 == 104)
              {
                unint64_t v24 = v53 + 1;
                *((void *)this + 1) = v24;
LABEL_140:
                v55[0] = 0;
                if ((unint64_t)v24 >= v22 || *v24 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v55);
                  if (!result) {
                    return result;
                  }
                  unsigned int v54 = v55[0];
                }
                else
                {
                  unsigned int v54 = *v24;
                  *((void *)this + 1) = v24 + 1;
                }
                if (v54 <= 5)
                {
                  *(_DWORD *)(a1 + 64) |= 0x1000u;
                  *(_DWORD *)(a1 + 56) = v54;
                }
                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1;
                  *((unsigned char *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_54;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_62;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_70;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v14 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_78;
      case 7u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        uint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_86;
      case 8u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_96;
      case 9u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v19 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_107;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_117;
        }
        goto LABEL_37;
      case 0xBu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        int v21 = (char *)*((void *)this + 1);
        unint64_t v20 = *((void *)this + 2);
        goto LABEL_121;
      case 0xCu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        uint64_t v23 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_132;
      case 0xDu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_37;
        }
        unint64_t v24 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_140;
      default:
        int v7 = TagFallback & 7;
LABEL_37:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F154B4()
{
}

uint64_t sub_100F1550C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 64);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248AE30 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 25), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 26), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 27), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 28), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 32), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 36), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, (int)a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
LABEL_28:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 52), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 64) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 48), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 0x800) != 0) {
    goto LABEL_28;
  }
LABEL_13:
  if ((v6 & 0x1000) == 0) {
    return result;
  }
LABEL_29:
  int v8 = *(_DWORD *)(v5 + 56);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v8, (int)a2, a4);
}

uint64_t sub_100F156C0(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  if ((_BYTE)v3)
  {
    if (v3)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248AE30 + 8);
      }
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000843B0(v6, a2);
      int v8 = (int)v7;
      if (v7 >= 0x80) {
        int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      }
      else {
        int v9 = 1;
      }
      unsigned int v4 = v8 + v9 + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 2;
    }
    if ((v3 & 8) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x20) != 0) {
      uint64_t v5 = v4 + 2;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 0x40) != 0)
    {
      unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
      if ((v10 & 0x80000000) != 0)
      {
        int v11 = 11;
      }
      else if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        int v11 = 2;
      }
      uint64_t v5 = (v11 + v5);
    }
    if ((v3 & 0x80) != 0)
    {
      unsigned int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v12 & 0x80000000) != 0)
      {
        int v13 = 11;
      }
      else if (v12 >= 0x80)
      {
        int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        int v13 = 2;
      }
      uint64_t v5 = (v13 + v5);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      unsigned int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
      if ((v14 & 0x80000000) != 0)
      {
        int v15 = 11;
      }
      else if (v14 >= 0x80)
      {
        int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        int v15 = 2;
      }
      LODWORD(v5) = v15 + v5;
    }
    if ((v3 & 0x200) != 0) {
      uint64_t v5 = (v5 + 9);
    }
    else {
      uint64_t v5 = v5;
    }
    if ((v3 & 0x400) != 0)
    {
      unint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
      if ((v16 & 0x80000000) != 0)
      {
        int v17 = 11;
      }
      else if (v16 >= 0x80)
      {
        int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        int v17 = 2;
      }
      uint64_t v5 = (v17 + v5);
      if ((v3 & 0x800) == 0)
      {
LABEL_49:
        if ((v3 & 0x1000) == 0) {
          goto LABEL_69;
        }
        goto LABEL_63;
      }
    }
    else if ((v3 & 0x800) == 0)
    {
      goto LABEL_49;
    }
    unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v18 & 0x80000000) != 0)
    {
      int v19 = 11;
    }
    else if (v18 >= 0x80)
    {
      int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      int v19 = 2;
    }
    uint64_t v5 = (v19 + v5);
    if ((v3 & 0x1000) != 0)
    {
LABEL_63:
      unint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if ((v20 & 0x80000000) != 0)
      {
        int v21 = 11;
      }
      else if (v20 >= 0x80)
      {
        int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2) + 1;
      }
      else
      {
        int v21 = 2;
      }
      uint64_t v5 = (v21 + v5);
    }
  }
LABEL_69:
  *(_DWORD *)(a1 + 60) = v5;
  return v5;
}

void sub_100F158D8(uint64_t a1, void *lpsrc)
{
  sub_100F148B8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F15960()
{
  return 1;
}

void *sub_100F15968@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.FusionStatus");
}

void sub_100F15978(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AE40 + 8);
    }
    sub_100F148B8(v4, v5);
  }
}

void sub_100F15A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F15A80(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304218;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AE40 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F15B10(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F15A80(a1);

  operator delete();
}

void sub_100F15B48()
{
}

uint64_t sub_100F15B94(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_100F14CA8(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100F15BCC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100F14D08(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100F15D98(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AE40 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100F15DC4(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AE40 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F156C0(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F15E34(uint64_t a1, void *lpsrc)
{
  sub_100F15978(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F15EBC()
{
  return 1;
}

void *sub_100F15EC4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.SystemNotification.InternalToolDataCapture");
}

void sub_100F15ED4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), *(_DWORD *)(a2 + 32) + *(_DWORD *)(a1 + 32));
  if (*(int *)(a2 + 32) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 24) + 8 * v4);
      int v6 = *(_DWORD *)(a1 + 36);
      uint64_t v7 = *(int *)(a1 + 32);
      if ((int)v7 >= v6)
      {
        if (v6 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24), v6 + 1);
          int v6 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)(a1 + 32) = v7 + 1;
      sub_100F14028(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 32));
  }
  LOBYTE(v9) = *(unsigned char *)(a2 + 72);
  if (!(_BYTE)v9) {
    return;
  }
  if (*(unsigned char *)(a2 + 72))
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    uint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      operator new();
    }
    uint64_t v11 = *(void *)(a2 + 8);
    if (!v11) {
      uint64_t v11 = *(void *)(qword_10248AE48 + 8);
    }
    sub_1003DE314(v10, v11);
    int v9 = *(_DWORD *)(a2 + 72);
  }
  if ((v9 & 2) != 0)
  {
    char v12 = *(unsigned char *)(a2 + 16);
    *(_DWORD *)(a1 + 72) |= 2u;
    *(unsigned char *)(a1 + 16) = v12;
    int v9 = *(_DWORD *)(a2 + 72);
    if ((v9 & 4) == 0)
    {
LABEL_20:
      if ((v9 & 0x10) == 0) {
        goto LABEL_21;
      }
LABEL_26:
      unsigned int v14 = *(_DWORD *)(a2 + 64);
      if (v14 >= 3) {
        sub_101A967B4();
      }
      *(_DWORD *)(a1 + 72) |= 0x10u;
      *(_DWORD *)(a1 + 64) = v14;
      int v9 = *(_DWORD *)(a2 + 72);
      if ((v9 & 0x20) == 0)
      {
LABEL_22:
        if ((v9 & 0x40) == 0) {
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_28;
    }
  }
  else if ((v9 & 4) == 0)
  {
    goto LABEL_20;
  }
  int v13 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 20) = v13;
  int v9 = *(_DWORD *)(a2 + 72);
  if ((v9 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_21:
  if ((v9 & 0x20) == 0) {
    goto LABEL_22;
  }
LABEL_28:
  int v15 = *(const std::string **)(a2 + 48);
  *(_DWORD *)(a1 + 72) |= 0x20u;
  unint64_t v16 = *(std::string **)(a1 + 48);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v16, v15);
  if ((*(_DWORD *)(a2 + 72) & 0x40) != 0)
  {
LABEL_31:
    *(_DWORD *)(a1 + 72) |= 0x40u;
    uint64_t v17 = *(void *)(a1 + 56);
    if (!v17) {
      operator new();
    }
    uint64_t v18 = *(void *)(a2 + 56);
    if (!v18) {
      uint64_t v18 = *(void *)(qword_10248AE48 + 56);
    }
    sub_100F15978(v17, v18);
  }
}

void sub_100F161DC()
{
}

void sub_100F16218()
{
}

uint64_t sub_100F16284(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 72);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (v3)
      {
        sub_1003DE4A4(v3);
        int v2 = *(_DWORD *)(a1 + 72);
      }
    }
    *(unsigned char *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    if ((v2 & 0x20) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 48);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(a1 + 72) & 0x40) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 56);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 20))
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (v6) {
            sub_100F14CA8(v6);
          }
        }
        *(_DWORD *)(v5 + 20) = 0;
      }
    }
  }
  uint64_t result = sub_10026DEDC(a1 + 24);
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_100F16338(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 < *((void *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        *(_DWORD *)(a1 + 72) |= 1u;
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          operator new();
        }
        unsigned int v52 = 0;
        uint64_t v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v52))return 0; {
        }
          }
        else
        {
          unsigned int v52 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v52);
        if (!sub_1003DE4BC(v9, this, v19) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        uint64_t v23 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v23 >= v11 || *v23 != 16) {
          continue;
        }
        char v12 = v23 + 1;
        *((void *)this + 1) = v12;
        goto LABEL_38;
      case 2u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        char v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_38:
        unsigned int v52 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v52);
          if (!result) {
            return result;
          }
          unsigned int v24 = v52;
          int v25 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v24 = *v12;
          int v25 = v12 + 1;
          *((void *)this + 1) = v25;
        }
        *(unsigned char *)(a1 + 16) = v24 != 0;
        *(_DWORD *)(a1 + 72) |= 2u;
        if ((unint64_t)v25 >= v11 || *v25 != 24) {
          continue;
        }
        int v13 = v25 + 1;
        *((void *)this + 1) = v13;
LABEL_46:
        unsigned int v52 = 0;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v52);
          if (!result) {
            return result;
          }
          unsigned int v27 = v52;
          unsigned int v28 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v27 = *v13;
          unsigned int v28 = v13 + 1;
          *((void *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 20) = v27;
        *(_DWORD *)(a1 + 72) |= 4u;
        if ((unint64_t)v28 >= v11 || *v28 != 34) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v28 + 1;
LABEL_54:
          int v29 = *(_DWORD *)(a1 + 36);
          uint64_t v30 = *(int *)(a1 + 32);
          if ((int)v30 >= v29)
          {
            if (v29 == *(_DWORD *)(a1 + 40))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v29 + 1);
              int v29 = *(_DWORD *)(a1 + 36);
            }
            *(_DWORD *)(a1 + 36) = v29 + 1;
            operator new();
          }
          uint64_t v31 = *(void *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = v30 + 1;
          uint64_t v32 = *(void *)(v31 + 8 * v30);
          unsigned int v52 = 0;
          uint64_t v33 = (char *)*((void *)this + 1);
          if ((unint64_t)v33 >= *((void *)this + 2) || *v33 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v52))return 0; {
          }
            }
          else
          {
            unsigned int v52 = *v33;
            *((void *)this + 1) = v33 + 1;
          }
          int v34 = *((_DWORD *)this + 14);
          int v35 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v34 + 1;
          if (v34 >= v35) {
            return 0;
          }
          int v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v52);
          if (!sub_100F142C4(v32, this, v37) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
          int v38 = *((_DWORD *)this + 14);
          BOOL v21 = __OFSUB__(v38, 1);
          int v39 = v38 - 1;
          if (v39 < 0 == v21) {
            *((_DWORD *)this + 14) = v39;
          }
          unsigned int v28 = (unsigned char *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
          if ((unint64_t)v28 >= v14) {
            goto LABEL_2;
          }
          int v40 = *v28;
        }
        while (v40 == 34);
        if (v40 != 40) {
          continue;
        }
        int v15 = v28 + 1;
        *((void *)this + 1) = v15;
LABEL_72:
        unsigned int v52 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v52);
          if (!result) {
            return result;
          }
          unsigned int v41 = v52;
        }
        else
        {
          unsigned int v41 = *v15;
          *((void *)this + 1) = v15 + 1;
        }
        if (v41 <= 2)
        {
          *(_DWORD *)(a1 + 72) |= 0x10u;
          *(_DWORD *)(a1 + 64) = v41;
        }
        uint64_t v42 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v42 >= *((void *)this + 2) || *v42 != 50) {
          continue;
        }
        *((void *)this + 1) = v42 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 72) |= 0x20u;
        if (*(_UNKNOWN **)(a1 + 48) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v43 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v43 >= *((void *)this + 2) || *v43 != 58) {
          continue;
        }
        *((void *)this + 1) = v43 + 1;
LABEL_88:
        *(_DWORD *)(a1 + 72) |= 0x40u;
        uint64_t v44 = *(void *)(a1 + 56);
        if (!v44) {
          operator new();
        }
        unsigned int v52 = 0;
        int v45 = (char *)*((void *)this + 1);
        if ((unint64_t)v45 >= *((void *)this + 2) || *v45 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v52))return 0; {
        }
          }
        else
        {
          unsigned int v52 = *v45;
          *((void *)this + 1) = v45 + 1;
        }
        int v46 = *((_DWORD *)this + 14);
        int v47 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v46 + 1;
        if (v46 >= v47) {
          return 0;
        }
        int v48 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v52);
        if (!sub_100F15BCC(v44, this, v49) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v48);
        int v50 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v50, 1);
        int v51 = v50 - 1;
        if (v51 < 0 == v21) {
          *((_DWORD *)this + 14) = v51;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_46;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_54;
        }
        goto LABEL_26;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_72;
      case 6u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_82;
        }
        goto LABEL_26;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        goto LABEL_88;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F1699C()
{
}

void sub_100F169DC(uint64_t a1, void *lpsrc)
{
  sub_100F15ED4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F16A64()
{
  return 1;
}

void *sub_100F16A6C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.SystemNotification.NotificationData");
}

void sub_100F16A7C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 5) {
        sub_101A967E0();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AE38 + 16);
      }
      sub_100F15ED4(v7, v8);
    }
  }
}

void sub_100F16BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F16BE0()
{
}

uint64_t sub_100F16C2C(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100F16284(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F16C6C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          uint64_t v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            char v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            char v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F16338(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

void sub_100F16F6C(uint64_t a1, void *lpsrc)
{
  sub_100F16A7C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F16FF4()
{
  return 1;
}

void *sub_100F16FFC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.SystemNotification");
}

void sub_100F1700C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  int v4 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v4) {
    goto LABEL_23;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 44) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AE58 + 8);
    }
    sub_1003F9CB0(v5, v6);
    int v4 = *(_DWORD *)(a2 + 44);
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 44) |= 2u;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE58 + 16);
    }
    sub_1003FA3EC(v7, v8);
    int v4 = *(_DWORD *)(a2 + 44);
  }
  if ((v4 & 4) != 0)
  {
    char v11 = *(unsigned char *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(unsigned char *)(a1 + 24) = v11;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 8) == 0)
    {
LABEL_18:
      if ((v4 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_18;
  }
  char v12 = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(unsigned char *)(a1 + 25) = v12;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_29:
    char v14 = *(unsigned char *)(a2 + 27);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(unsigned char *)(a1 + 27) = v14;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 0x40) == 0)
    {
LABEL_21:
      if ((v4 & 0x80) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    goto LABEL_30;
  }
LABEL_28:
  char v13 = *(unsigned char *)(a2 + 26);
  *(_DWORD *)(a1 + 44) |= 0x10u;
  *(unsigned char *)(a1 + 26) = v13;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_20:
  if ((v4 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_30:
  int v15 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) |= 0x40u;
  *(_DWORD *)(a1 + 28) = v15;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 0x80) != 0)
  {
LABEL_22:
    int v9 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x80u;
    *(_DWORD *)(a1 + 32) = v9;
    int v4 = *(_DWORD *)(a2 + 44);
  }
LABEL_23:
  if ((v4 & 0x100) != 0)
  {
    char v10 = *(unsigned char *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(unsigned char *)(a1 + 36) = v10;
  }
}

void sub_100F17220()
{
}

void *sub_100F1726C(void *result)
{
  if ((void *)qword_10248AE58 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100F1730C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304380;
  sub_100F1726C(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F17360(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304380;
  sub_100F1726C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F173C8()
{
}

uint64_t sub_100F1741C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 44);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1003F9EC8(result);
        int v2 = *(_DWORD *)(v1 + 44);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_1003FA644(result);
        int v2 = *(_DWORD *)(v1 + 44);
      }
    }
    *(_DWORD *)(v1 + 32) = 0;
    *(void *)(v1 + 24) = 0;
  }
  if ((v2 & 0xFF00) != 0) {
    *(unsigned char *)(v1 + 36) = 0;
  }
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100F17488(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v50 = 0;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50))return 0; {
        }
          }
        else
        {
          unsigned int v50 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19) {
          return 0;
        }
        int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50);
        if (!sub_1003F9EE0(v8, this, v21) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        int v22 = *((_DWORD *)this + 14);
        BOOL v23 = __OFSUB__(v22, 1);
        int v24 = v22 - 1;
        if (v24 < 0 == v23) {
          *((_DWORD *)this + 14) = v24;
        }
        int v25 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 != 18) {
          continue;
        }
        *((void *)this + 1) = v25 + 1;
        goto LABEL_42;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_29;
        }
LABEL_42:
        *(_DWORD *)(a1 + 44) |= 2u;
        uint64_t v26 = *(void *)(a1 + 16);
        if (!v26) {
          operator new();
        }
        unsigned int v50 = 0;
        unsigned int v27 = (char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50))return 0; {
        }
          }
        else
        {
          unsigned int v50 = *v27;
          *((void *)this + 1) = v27 + 1;
        }
        int v28 = *((_DWORD *)this + 14);
        int v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 < v29)
        {
          int v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50);
          if (sub_1003FA668(v26, this, v31))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
              int v32 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v32, 1);
              int v33 = v32 - 1;
              if (v33 < 0 == v23) {
                *((_DWORD *)this + 14) = v33;
              }
              int v34 = (unsigned char *)*((void *)this + 1);
              unint64_t v10 = *((void *)this + 2);
              if ((unint64_t)v34 < v10 && *v34 == 24)
              {
                char v11 = v34 + 1;
                *((void *)this + 1) = v11;
LABEL_56:
                unsigned int v50 = 0;
                if ((unint64_t)v11 >= v10 || *v11 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                  if (!result) {
                    return result;
                  }
                  unsigned int v35 = v50;
                  int v36 = (unsigned char *)*((void *)this + 1);
                  unint64_t v10 = *((void *)this + 2);
                }
                else
                {
                  unsigned int v35 = *v11;
                  int v36 = v11 + 1;
                  *((void *)this + 1) = v36;
                }
                *(unsigned char *)(a1 + 24) = v35 != 0;
                *(_DWORD *)(a1 + 44) |= 4u;
                if ((unint64_t)v36 < v10 && *v36 == 32)
                {
                  char v13 = v36 + 1;
                  *((void *)this + 1) = v13;
LABEL_64:
                  unsigned int v50 = 0;
                  if ((unint64_t)v13 >= v10 || *v13 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                    if (!result) {
                      return result;
                    }
                    unsigned int v38 = v50;
                    int v39 = (unsigned char *)*((void *)this + 1);
                    unint64_t v10 = *((void *)this + 2);
                  }
                  else
                  {
                    unsigned int v38 = *v13;
                    int v39 = v13 + 1;
                    *((void *)this + 1) = v39;
                  }
                  *(unsigned char *)(a1 + 25) = v38 != 0;
                  *(_DWORD *)(a1 + 44) |= 8u;
                  if ((unint64_t)v39 < v10 && *v39 == 40)
                  {
                    char v12 = v39 + 1;
                    *((void *)this + 1) = v12;
LABEL_72:
                    unsigned int v50 = 0;
                    if ((unint64_t)v12 >= v10 || *v12 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                      if (!result) {
                        return result;
                      }
                      unsigned int v40 = v50;
                      unsigned int v41 = (unsigned char *)*((void *)this + 1);
                      unint64_t v10 = *((void *)this + 2);
                    }
                    else
                    {
                      unsigned int v40 = *v12;
                      unsigned int v41 = v12 + 1;
                      *((void *)this + 1) = v41;
                    }
                    *(unsigned char *)(a1 + 26) = v40 != 0;
                    *(_DWORD *)(a1 + 44) |= 0x10u;
                    if ((unint64_t)v41 < v10 && *v41 == 48)
                    {
                      char v14 = v41 + 1;
                      *((void *)this + 1) = v14;
LABEL_80:
                      unsigned int v50 = 0;
                      if ((unint64_t)v14 >= v10 || *v14 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                        if (!result) {
                          return result;
                        }
                        unsigned int v42 = v50;
                        unsigned int v43 = (unsigned char *)*((void *)this + 1);
                        unint64_t v10 = *((void *)this + 2);
                      }
                      else
                      {
                        unsigned int v42 = *v14;
                        unsigned int v43 = v14 + 1;
                        *((void *)this + 1) = v43;
                      }
                      *(unsigned char *)(a1 + 27) = v42 != 0;
                      *(_DWORD *)(a1 + 44) |= 0x20u;
                      if ((unint64_t)v43 < v10 && *v43 == 56)
                      {
                        int v15 = v43 + 1;
                        *((void *)this + 1) = v15;
LABEL_88:
                        unsigned int v50 = 0;
                        if ((unint64_t)v15 >= v10 || *v15 < 0)
                        {
                          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                          if (!result) {
                            return result;
                          }
                          unsigned int v44 = v50;
                          int v45 = (unsigned char *)*((void *)this + 1);
                          unint64_t v10 = *((void *)this + 2);
                        }
                        else
                        {
                          unsigned int v44 = *v15;
                          int v45 = v15 + 1;
                          *((void *)this + 1) = v45;
                        }
                        *(_DWORD *)(a1 + 28) = v44;
                        *(_DWORD *)(a1 + 44) |= 0x40u;
                        if ((unint64_t)v45 < v10 && *v45 == 64)
                        {
                          int v16 = v45 + 1;
                          *((void *)this + 1) = v16;
LABEL_96:
                          unsigned int v50 = 0;
                          if ((unint64_t)v16 >= v10 || *v16 < 0)
                          {
                            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                            if (!result) {
                              return result;
                            }
                            unsigned int v46 = v50;
                            int v47 = (unsigned char *)*((void *)this + 1);
                            unint64_t v10 = *((void *)this + 2);
                          }
                          else
                          {
                            unsigned int v46 = *v16;
                            int v47 = v16 + 1;
                            *((void *)this + 1) = v47;
                          }
                          *(_DWORD *)(a1 + 32) = v46;
                          *(_DWORD *)(a1 + 44) |= 0x80u;
                          if ((unint64_t)v47 < v10 && *v47 == 72)
                          {
                            uint64_t v17 = v47 + 1;
                            *((void *)this + 1) = v17;
LABEL_104:
                            unsigned int v50 = 0;
                            if ((unint64_t)v17 >= v10 || *v17 < 0)
                            {
                              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v50);
                              if (!result) {
                                return result;
                              }
                              unsigned int v48 = v50;
                              unsigned int v49 = (unsigned __int8 *)*((void *)this + 1);
                              unint64_t v10 = *((void *)this + 2);
                            }
                            else
                            {
                              unsigned int v48 = *v17;
                              unsigned int v49 = (unsigned __int8 *)(v17 + 1);
                              *((void *)this + 1) = v49;
                            }
                            *(unsigned char *)(a1 + 36) = v48 != 0;
                            *(_DWORD *)(a1 + 44) |= 0x100u;
                            if (v49 == (unsigned __int8 *)v10
                              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                            {
                              *((_DWORD *)this + 8) = 0;
                              uint64_t result = 1;
                              *((unsigned char *)this + 36) = 1;
                              return result;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_56;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_64;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_72;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v14 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_80;
      case 7u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        int v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_88;
      case 8u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_96;
      case 9u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        uint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_104;
      default:
        int v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F17AD0()
{
}

uint64_t sub_100F17B2C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248AE58 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AE58 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 25), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 26), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 27), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_22:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 32), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 44) & 0x100) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 28), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 0x80) != 0) {
    goto LABEL_22;
  }
LABEL_9:
  if ((v6 & 0x100) == 0) {
    return result;
  }
LABEL_23:
  int v9 = *(unsigned __int8 *)(v5 + 36);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v9, (BOOL)a2, a4);
}

uint64_t sub_100F17C80(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    unsigned int v5 = 0;
    goto LABEL_41;
  }
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AE58 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003FA288(v6, a2);
    int v8 = (int)v7;
    if (v7 >= 0x80) {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    }
    else {
      int v9 = 1;
    }
    int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 44);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  int v4 = 0;
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v10 = *(void *)(a1 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248AE58 + 16);
    }
    char v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003FAB08(v10, a2);
    int v12 = (int)v11;
    if (v11 >= 0x80) {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    }
    else {
      int v13 = 1;
    }
    v4 += v12 + v13 + 1;
    int v3 = *(_DWORD *)(a1 + 44);
  }
LABEL_18:
  int v14 = v4 + 2;
  if ((v3 & 4) == 0) {
    int v14 = v4;
  }
  if ((v3 & 8) != 0) {
    v14 += 2;
  }
  if ((v3 & 0x10) != 0) {
    v14 += 2;
  }
  if ((v3 & 0x20) != 0) {
    unsigned int v5 = v14 + 2;
  }
  else {
    unsigned int v5 = v14;
  }
  if ((v3 & 0x40) != 0)
  {
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v15 & 0x80000000) != 0)
    {
      int v16 = 11;
    }
    else if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      int v16 = 2;
    }
    v5 += v16;
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v17 & 0x80000000) != 0)
    {
      int v18 = 11;
    }
    else if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }
    else
    {
      int v18 = 2;
    }
    v5 += v18;
  }
LABEL_41:
  if ((v3 & 0x100) != 0) {
    uint64_t result = v5 + 2;
  }
  else {
    uint64_t result = v5;
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

void sub_100F17DFC(uint64_t a1, void *lpsrc)
{
  sub_100F1700C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F17E84()
{
  return 1;
}

void *sub_100F17E8C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.DaemonStatusNotification.NotificationData");
}

void sub_100F17E9C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (!sub_1003FAC70(v6)) {
        sub_101A9680C();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AE50 + 16);
      }
      sub_100F1700C(v7, v8);
    }
  }
}

void sub_100F17FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F17FF0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023043F8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AE50 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F18080(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F17FF0(a1);

  operator delete();
}

void sub_100F180B8()
{
}

uint64_t sub_100F18104(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100F1741C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F18144(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          uint64_t v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (sub_1003FAC70(v15))
        {
          if (!sub_1003FAC70(v15)) {
            sub_101A9680C();
          }
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_37:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F17488(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F18438(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AE50 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F184D4(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE50 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F17C80(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F185D0(uint64_t a1, void *lpsrc)
{
  sub_100F17E9C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F18658()
{
  return 1;
}

void *sub_100F18660@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.DaemonStatusNotification");
}

void sub_100F18670(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (!sub_100165F14(v4)) {
      sub_101A96838();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_100F1870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F18724(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304470;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F18744(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304470;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F18798()
{
}

uint64_t sub_100F187E4(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F187F8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v10 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!result) {
          return result;
        }
        unsigned int v8 = v10;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (sub_100165F14(v8))
      {
        if (!sub_100165F14(v8)) {
          sub_101A96838();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100F18934(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_100F18950(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100F189AC(uint64_t a1, void *lpsrc)
{
  sub_100F18670(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F18A34()
{
  return 1;
}

void *sub_100F18A3C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.ClientManagerNotification.NotificationData");
}

void sub_100F18A4C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 3) {
        sub_101A96864();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AE60 + 16);
      }
      sub_100F18670(v7, v8);
    }
  }
}

void sub_100F18B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F18B8C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023044E8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AE60 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F18C1C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F18B8C(a1);

  operator delete();
}

void sub_100F18C54()
{
}

uint64_t sub_100F18CA0(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 16)) {
          *(_DWORD *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100F18CD0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          unsigned int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F187F8(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F18FA8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AE60 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F19044(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE60 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F18950(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F19140(uint64_t a1, void *lpsrc)
{
  sub_100F18A4C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F191C8()
{
  return 1;
}

void *sub_100F191D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.ClientManagerNotification");
}

void sub_100F191E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      char v5 = *(unsigned char *)(a2 + 28);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(unsigned char *)(a1 + 28) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      if (!sub_1003DE308(v6)) {
        sub_101A665B0();
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 24) = v6;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 4u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AE78 + 8);
      }
      sub_100409B80(v7, v8);
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      uint64_t v9 = *(void *)(a1 + 16);
      if (!v9) {
        operator new();
      }
      uint64_t v10 = *(void *)(a2 + 16);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_10248AE78 + 16);
      }
      sub_10040A264(v9, v10);
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 0x10) != 0)
    {
      char v12 = *(unsigned char *)(a2 + 29);
      *(_DWORD *)(a1 + 36) |= 0x10u;
      *(unsigned char *)(a1 + 29) = v12;
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 0x20) == 0)
      {
LABEL_23:
        if ((v4 & 0x40) == 0) {
          return;
        }
        goto LABEL_24;
      }
    }
    else if ((v4 & 0x20) == 0)
    {
      goto LABEL_23;
    }
    char v13 = *(unsigned char *)(a2 + 30);
    *(_DWORD *)(a1 + 36) |= 0x20u;
    *(unsigned char *)(a1 + 30) = v13;
    if ((*(_DWORD *)(a2 + 36) & 0x40) != 0)
    {
LABEL_24:
      char v11 = *(unsigned char *)(a2 + 31);
      *(_DWORD *)(a1 + 36) |= 0x40u;
      *(unsigned char *)(a1 + 31) = v11;
    }
  }
}

void sub_100F193BC()
{
}

void *sub_100F19408(void *result)
{
  if ((void *)qword_10248AE78 != result)
  {
    char v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100F194A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304560;
  sub_100F19408(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F194FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304560;
  sub_100F19408(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F19564()
{
}

uint64_t sub_100F195B8(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 36);
  if ((_BYTE)v2)
  {
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_100409DFC(result);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result) {
        uint64_t result = sub_10040A4C8(result);
      }
    }
    *(_WORD *)(v1 + 29) = 0;
    *(unsigned char *)(v1 + 31) = 0;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100F19618(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    char v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        unsigned int v45 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!result) {
            return result;
          }
          unsigned int v10 = v45;
          char v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v10 = *v9;
          char v11 = v9 + 1;
          *((void *)this + 1) = v11;
        }
        *(unsigned char *)(a1 + 28) = v10 != 0;
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 16)
        {
          char v12 = v11 + 1;
          *((void *)this + 1) = v12;
          goto LABEL_32;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        char v12 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_32:
        unsigned int v45 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
          if (!result) {
            return result;
          }
          unsigned int v18 = v45;
        }
        else
        {
          unsigned int v18 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (sub_1003DE308(v18))
        {
          if (!sub_1003DE308(v18)) {
            sub_101A665B0();
          }
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 24) = v18;
        }
        int v19 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 != 26) {
          continue;
        }
        *((void *)this + 1) = v19 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 36) |= 4u;
        uint64_t v20 = *(void *)(a1 + 8);
        if (!v20) {
          operator new();
        }
        unsigned int v45 = 0;
        int v21 = (char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45))return 0; {
        }
          }
        else
        {
          unsigned int v45 = *v21;
          *((void *)this + 1) = v21 + 1;
        }
        int v22 = *((_DWORD *)this + 14);
        int v23 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v22 + 1;
        if (v22 >= v23) {
          return 0;
        }
        int v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
        if (!sub_100409E3C(v20, this, v25) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
        int v26 = *((_DWORD *)this + 14);
        BOOL v27 = __OFSUB__(v26, 1);
        int v28 = v26 - 1;
        if (v28 < 0 == v27) {
          *((_DWORD *)this + 14) = v28;
        }
        int v29 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 != 34) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_57:
        *(_DWORD *)(a1 + 36) |= 8u;
        uint64_t v30 = *(void *)(a1 + 16);
        if (!v30) {
          operator new();
        }
        unsigned int v45 = 0;
        unsigned int v31 = (char *)*((void *)this + 1);
        if ((unint64_t)v31 >= *((void *)this + 2) || *v31 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45))return 0; {
        }
          }
        else
        {
          unsigned int v45 = *v31;
          *((void *)this + 1) = v31 + 1;
        }
        int v32 = *((_DWORD *)this + 14);
        int v33 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v32 + 1;
        if (v32 < v33)
        {
          int v34 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v45);
          if (sub_10040A518(v30, this, v35))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v34);
              int v36 = *((_DWORD *)this + 14);
              BOOL v27 = __OFSUB__(v36, 1);
              int v37 = v36 - 1;
              if (v37 < 0 == v27) {
                *((_DWORD *)this + 14) = v37;
              }
              unsigned int v38 = (unsigned char *)*((void *)this + 1);
              unint64_t v13 = *((void *)this + 2);
              if ((unint64_t)v38 < v13 && *v38 == 40)
              {
                int v14 = v38 + 1;
                *((void *)this + 1) = v14;
LABEL_71:
                unsigned int v45 = 0;
                if ((unint64_t)v14 >= v13 || *v14 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
                  if (!result) {
                    return result;
                  }
                  unsigned int v39 = v45;
                  unsigned int v40 = (unsigned char *)*((void *)this + 1);
                  unint64_t v13 = *((void *)this + 2);
                }
                else
                {
                  unsigned int v39 = *v14;
                  unsigned int v40 = v14 + 1;
                  *((void *)this + 1) = v40;
                }
                *(unsigned char *)(a1 + 29) = v39 != 0;
                *(_DWORD *)(a1 + 36) |= 0x10u;
                if ((unint64_t)v40 < v13 && *v40 == 48)
                {
                  unsigned int v15 = v40 + 1;
                  *((void *)this + 1) = v15;
LABEL_79:
                  unsigned int v45 = 0;
                  if ((unint64_t)v15 >= v13 || *v15 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
                    if (!result) {
                      return result;
                    }
                    unsigned int v41 = v45;
                    unsigned int v42 = (unsigned char *)*((void *)this + 1);
                    unint64_t v13 = *((void *)this + 2);
                  }
                  else
                  {
                    unsigned int v41 = *v15;
                    unsigned int v42 = v15 + 1;
                    *((void *)this + 1) = v42;
                  }
                  *(unsigned char *)(a1 + 30) = v41 != 0;
                  *(_DWORD *)(a1 + 36) |= 0x20u;
                  if ((unint64_t)v42 < v13 && *v42 == 56)
                  {
                    int v16 = v42 + 1;
                    *((void *)this + 1) = v16;
LABEL_87:
                    unsigned int v45 = 0;
                    if ((unint64_t)v16 >= v13 || *v16 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v45);
                      if (!result) {
                        return result;
                      }
                      unsigned int v43 = v45;
                      unsigned int v44 = (unsigned __int8 *)*((void *)this + 1);
                      unint64_t v13 = *((void *)this + 2);
                    }
                    else
                    {
                      unsigned int v43 = *v16;
                      unsigned int v44 = (unsigned __int8 *)(v16 + 1);
                      *((void *)this + 1) = v44;
                    }
                    *(unsigned char *)(a1 + 31) = v43 != 0;
                    *(_DWORD *)(a1 + 36) |= 0x40u;
                    if (v44 == (unsigned __int8 *)v13
                      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                    {
                      *((_DWORD *)this + 8) = 0;
                      uint64_t result = 1;
                      *((unsigned char *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_43;
        }
        goto LABEL_23;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_57;
        }
        goto LABEL_23;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_71;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_79;
      case 7u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_87;
      default:
        int v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F19B84()
{
}

uint64_t sub_100F19BD8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 28), (BOOL)a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 24), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AE78 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AE78 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 30), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 36) & 0x40) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    return result;
  }
LABEL_19:
  int v9 = *(unsigned __int8 *)(v5 + 31);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v9, (BOOL)a2, a4);
}

uint64_t sub_100F19CF4(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_32;
  }
  int v4 = 2 * (v3 & 1);
  if ((v3 & 2) == 0)
  {
    if ((v3 & 4) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE78 + 8);
    }
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10040A138(v8, a2);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    }
    else {
      int v11 = 1;
    }
    v4 += v10 + v11 + 1;
    int v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    int v7 = 2;
  }
  v4 += v7;
  if ((v3 & 4) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v3 & 8) != 0)
  {
LABEL_19:
    uint64_t v12 = *(void *)(a1 + 16);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248AE78 + 16);
    }
    unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10040A918(v12, a2);
    int v15 = (int)v13;
    if (v13 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, v14);
    }
    else {
      int v16 = 1;
    }
    v4 += v15 + v16 + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_25:
  unsigned int v17 = v4 + 2;
  if ((v3 & 0x10) == 0) {
    unsigned int v17 = v4;
  }
  if ((v3 & 0x20) != 0) {
    v17 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v17 + 2;
  }
  else {
    uint64_t result = v17;
  }
LABEL_32:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_100F19E2C(uint64_t a1, void *lpsrc)
{
  sub_100F191E0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F19EB4()
{
  return 1;
}

void *sub_100F19EBC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.WifiServiceNotification.NotificationData");
}

void sub_100F19ECC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (!sub_1003DE308(v6)) {
        sub_101A96890();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AE70 + 16);
      }
      sub_100F191E0(v7, v8);
    }
  }
}

void sub_100F1A008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1A020(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023045D8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AE70 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1A0B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1A020(a1);

  operator delete();
}

void sub_100F1A0E8()
{
}

uint64_t sub_100F1A134(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100F195B8(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F1A174(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            uint64_t v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            uint64_t v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unint64_t v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (sub_1003DE308(v15))
        {
          if (!sub_1003DE308(v15)) {
            sub_101A96890();
          }
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_37:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    unsigned int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F19618(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1A468(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AE70 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1A504(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE70 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F19CF4(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F1A600(uint64_t a1, void *lpsrc)
{
  sub_100F19ECC(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1A688()
{
  return 1;
}

void *sub_100F1A690@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.WifiServiceNotification");
}

void sub_100F1A6A0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (!sub_10016E644(v4)) {
      sub_101A968BC();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v4;
  }
}

void sub_100F1A73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1A754(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304650;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F1A774(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304650;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F1A7C8()
{
}

uint64_t sub_100F1A814(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(_DWORD *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F1A828(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v10 = 0;
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
        if (!result) {
          return result;
        }
        unsigned int v8 = v10;
      }
      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }
      if (sub_10016E644(v8))
      {
        if (!sub_10016E644(v8)) {
          sub_101A968BC();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100F1A964(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_100F1A980(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unsigned int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11;
    }
    else if (v4 >= 0x80)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2)
             + 1;
    }
    else
    {
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100F1A9DC(uint64_t a1, void *lpsrc)
{
  sub_100F1A6A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1AA64()
{
  return 1;
}

void *sub_100F1AA6C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.DataProtectionManagerNotification.NotificationData");
}

void sub_100F1AA7C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 2) {
        sub_101A968E8();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AE80 + 16);
      }
      sub_100F1A6A0(v7, v8);
    }
  }
}

void sub_100F1ABA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1ABBC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023046C8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AE80 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1AC4C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1ABBC(a1);

  operator delete();
}

void sub_100F1AC84()
{
}

uint64_t sub_100F1ACD0(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 16)) {
          *(_DWORD *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100F1AD00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          unsigned int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unint64_t v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    unsigned int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F1A828(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1AFD8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AE80 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1B074(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE80 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1A980(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F1B170(uint64_t a1, void *lpsrc)
{
  sub_100F1AA7C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1B1F8()
{
  return 1;
}

void *sub_100F1B200@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.DataProtectionManagerNotification");
}

BOOL sub_100F1B210(unsigned int a1)
{
  return a1 < 0x32;
}

void sub_100F1B21C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 56);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 56) |= 1u;
    *(void *)(a1 + 8) = v5;
    int v4 = *(_DWORD *)(a2 + 56);
  }
  if ((v4 & 2) != 0)
  {
    int v7 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 56) |= 2u;
    uint64_t v8 = *(std::string **)(a1 + 16);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v8, v7);
    int v4 = *(_DWORD *)(a2 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v9 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 4u;
  unsigned int v10 = *(std::string **)(a1 + 24);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v10, v9);
  int v4 = *(_DWORD *)(a2 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_23:
    int v13 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    *(_DWORD *)(a1 + 40) = v13;
    int v4 = *(_DWORD *)(a2 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_11:
      if ((v4 & 0x40) == 0) {
        return;
      }
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_20:
  int v11 = *(const std::string **)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 8u;
  int v12 = *(std::string **)(a1 + 32);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v12, v11);
  int v4 = *(_DWORD *)(a2 + 56);
  if ((v4 & 0x10) != 0) {
    goto LABEL_23;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    goto LABEL_11;
  }
LABEL_24:
  unsigned int v14 = *(_DWORD *)(a2 + 44);
  if (v14 >= 0x32) {
    sub_101A96914();
  }
  *(_DWORD *)(a1 + 56) |= 0x20u;
  *(_DWORD *)(a1 + 44) = v14;
  if ((*(_DWORD *)(a2 + 56) & 0x40) != 0)
  {
LABEL_12:
    char v6 = *(unsigned char *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    *(unsigned char *)(a1 + 48) = v6;
  }
}

void sub_100F1B424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1B43C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304740;
  sub_10024D944(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F1B490(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304740;
  sub_10024D944(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F1B4F8()
{
}

uint64_t sub_100F1B558(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 56);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(unsigned char **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v2 = 0;
          *(unsigned char *)(v2 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 56) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 56) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *(unsigned char *)(result + 48) = 0;
    *(void *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_100F1B614(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 40);
  while (2)
  {
    char v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_44;
        }
        *(void *)int v25 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v25) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v25;
        }
        int v9 = *(_DWORD *)(a1 + 56) | 1;
        *(_DWORD *)(a1 + 56) = v9;
        unsigned int v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 18) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
        goto LABEL_16;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_44;
        }
        int v9 = *(_DWORD *)(a1 + 56);
LABEL_16:
        *(_DWORD *)(a1 + 56) = v9 | 2;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 != 26) {
          continue;
        }
        *((void *)this + 1) = v12 + 1;
LABEL_23:
        *(_DWORD *)(a1 + 56) |= 4u;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 34) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_30:
        *(_DWORD *)(a1 + 56) |= 8u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v15 = (unsigned char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        if ((unint64_t)v15 >= v14 || *v15 != 40) {
          continue;
        }
        int v16 = v15 + 1;
        *((void *)this + 1) = v16;
LABEL_38:
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!result) {
            return result;
          }
          uint64_t v17 = (unsigned char *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v5 = *v16;
          uint64_t v17 = v16 + 1;
          *((void *)this + 1) = v17;
        }
        *(_DWORD *)(a1 + 56) |= 0x10u;
        if ((unint64_t)v17 >= v14 || *v17 != 48) {
          continue;
        }
        unsigned int v18 = v17 + 1;
        *((void *)this + 1) = v18;
LABEL_53:
        v25[0] = 0;
        if ((unint64_t)v18 >= v14 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v21 = v25[0];
        }
        else
        {
          unsigned int v21 = *v18;
          *((void *)this + 1) = v18 + 1;
        }
        if (v21 <= 0x31)
        {
          *(_DWORD *)(a1 + 56) |= 0x20u;
          *(_DWORD *)(a1 + 44) = v21;
        }
        unsigned int v22 = (unsigned char *)*((void *)this + 1);
        unint64_t v19 = *((void *)this + 2);
        if ((unint64_t)v22 >= v19 || *v22 != 56) {
          continue;
        }
        int v20 = v22 + 1;
        *((void *)this + 1) = v20;
LABEL_63:
        v25[0] = 0;
        if ((unint64_t)v20 >= v19 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v25);
          if (!result) {
            return result;
          }
          unsigned int v23 = v25[0];
          BOOL v24 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v19 = *((void *)this + 2);
        }
        else
        {
          unsigned int v23 = *v20;
          BOOL v24 = (unsigned __int8 *)(v20 + 1);
          *((void *)this + 1) = v24;
        }
        *(unsigned char *)(a1 + 48) = v23 != 0;
        *(_DWORD *)(a1 + 56) |= 0x40u;
        if (v24 != (unsigned __int8 *)v19 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_23;
        }
        goto LABEL_44;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_30;
        }
        goto LABEL_44;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_44;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_38;
      case 6u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_44;
        }
        unsigned int v18 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_53;
      case 7u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_44;
        }
        int v20 = (char *)*((void *)this + 1);
        unint64_t v19 = *((void *)this + 2);
        goto LABEL_63;
      default:
        int v8 = TagFallback & 7;
LABEL_44:
        if (v8 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100F1BA58(uint64_t result, unsigned int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 56);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 44), a2, a4);
    if ((*(_DWORD *)(v5 + 56) & 0x40) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 40), a2, a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    return result;
  }
LABEL_15:
  int v7 = *(unsigned __int8 *)(v5 + 48);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v7, a2, a4);
}

uint64_t sub_100F1BB54(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t result = 0;
    goto LABEL_49;
  }
  unsigned int v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 56);
      char v8 = *(unsigned char *)(v6 + 23);
    }
    else
    {
      int v11 = 1;
    }
    if (v8 < 0) {
      int v7 = v9;
    }
    v4 += v11 + v7 + 1;
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0) {
        goto LABEL_5;
      }
      goto LABEL_27;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16, a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 56);
    char v14 = *(unsigned char *)(v12 + 23);
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < 0) {
    int v13 = v15;
  }
  v4 += v17 + v13 + 1;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_36:
    BOOL v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      int v25 = 2;
    }
    v4 += v25;
    if ((v3 & 0x20) == 0) {
      goto LABEL_46;
    }
    goto LABEL_40;
  }
LABEL_27:
  uint64_t v18 = *(void *)(a1 + 32);
  int v19 = *(unsigned __int8 *)(v18 + 23);
  char v20 = v19;
  uint64_t v21 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22, a2);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    uint64_t v21 = *(void *)(v18 + 8);
    int v3 = *(_DWORD *)(a1 + 56);
    char v20 = *(unsigned char *)(v18 + 23);
  }
  else
  {
    int v23 = 1;
  }
  if (v20 < 0) {
    int v19 = v21;
  }
  v4 += v23 + v19 + 1;
  if ((v3 & 0x10) != 0) {
    goto LABEL_36;
  }
LABEL_6:
  if ((v3 & 0x20) != 0)
  {
LABEL_40:
    unsigned int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if ((v26 & 0x80000000) != 0)
    {
      int v27 = 11;
    }
    else if (v26 >= 0x80)
    {
      int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 56);
    }
    else
    {
      int v27 = 2;
    }
    v4 += v27;
  }
LABEL_46:
  if ((v3 & 0x40) != 0) {
    uint64_t result = v4 + 2;
  }
  else {
    uint64_t result = v4;
  }
LABEL_49:
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_100F1BD20(uint64_t a1, void *lpsrc)
{
  sub_100F1B21C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1BDA8()
{
  return 1;
}

void *sub_100F1BDB0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification.Device");
}

void sub_100F1BDC0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      char v5 = *(unsigned char *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(unsigned char *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }
    else if ((*(unsigned char *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v6 = *(unsigned char *)(a2 + 17);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(unsigned char *)(a1 + 17) = v6;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0) {
      return;
    }
LABEL_10:
    *(_DWORD *)(a1 + 24) |= 4u;
    uint64_t v7 = *(void *)(a1 + 8);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AEA0 + 8);
    }
    sub_100F1B21C(v7, v8);
  }
}

void sub_100F1BEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1BF14(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023047B8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AEA0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1BFA4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1BF14(a1);

  operator delete();
}

void sub_100F1BFDC()
{
}

uint64_t sub_100F1C02C(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 24);
  if (v2)
  {
    *(_WORD *)(result + 16) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_100F1B558(result);
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_100F1C06C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          char v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v28 = 0;
          int v11 = (char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
            if (!result) {
              return result;
            }
            unsigned int v12 = v28;
            int v13 = (unsigned char *)*((void *)this + 1);
            unint64_t v10 = *((void *)this + 2);
          }
          else
          {
            unsigned int v12 = *v11;
            int v13 = v11 + 1;
            *((void *)this + 1) = v13;
          }
          *(unsigned char *)(a1 + 16) = v12 != 0;
          *(_DWORD *)(a1 + 24) |= 1u;
          if ((unint64_t)v13 < v10 && *v13 == 16)
          {
            char v14 = v13 + 1;
            *((void *)this + 1) = v14;
            goto LABEL_26;
          }
        }
        if (v7 == 2) {
          break;
        }
        if (v7 == 3)
        {
          int v8 = TagFallback & 7;
          if (v8 == 2)
          {
            int v9 = *(_DWORD *)(a1 + 24);
            goto LABEL_34;
          }
        }
        else
        {
          int v8 = TagFallback & 7;
        }
LABEL_18:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
      }
        }
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_18;
      }
      char v14 = (char *)*((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
LABEL_26:
      unsigned int v27 = 0;
      if ((unint64_t)v14 >= v10 || *v14 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
        if (!result) {
          return result;
        }
        unsigned int v16 = v27;
        int v17 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
      }
      else
      {
        unsigned int v16 = *v14;
        int v17 = v14 + 1;
        *((void *)this + 1) = v17;
      }
      *(unsigned char *)(a1 + 17) = v16 != 0;
      int v9 = *(_DWORD *)(a1 + 24) | 2;
      *(_DWORD *)(a1 + 24) = v9;
    }
    while ((unint64_t)v17 >= v10 || *v17 != 26);
    *((void *)this + 1) = v17 + 1;
LABEL_34:
    *(_DWORD *)(a1 + 24) = v9 | 4;
    uint64_t v18 = *(void *)(a1 + 8);
    if (!v18) {
      operator new();
    }
    unsigned int v29 = 0;
    int v19 = (char *)*((void *)this + 1);
    if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29)) {
        return 0;
      }
    }
    else
    {
      unsigned int v29 = *v19;
      *((void *)this + 1) = v19 + 1;
    }
    int v20 = *((_DWORD *)this + 14);
    int v21 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v20 + 1;
    if (v20 >= v21) {
      return 0;
    }
    int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
    if (!sub_100F1B614(v18, this, v23) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
    int v24 = *((_DWORD *)this + 14);
    BOOL v25 = __OFSUB__(v24, 1);
    int v26 = v24 - 1;
    if (v26 < 0 == v25) {
      *((_DWORD *)this + 14) = v26;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1C368(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 17), (BOOL)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AEA0 + 8);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1C404(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if ((_BYTE)v3)
  {
    unsigned int v4 = 2 * (v3 & 1);
    if ((v3 & 2) != 0) {
      uint64_t v5 = v4 + 2;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248AEA0 + 8);
      }
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1BB54(v6, a2);
      int v9 = (int)v7;
      if (v7 >= 0x80) {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, v8);
      }
      else {
        int v10 = 1;
      }
      uint64_t v5 = (v5 | 1) + v9 + v10;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 20) = v5;
  return v5;
}

void sub_100F1C49C(uint64_t a1, void *lpsrc)
{
  sub_100F1BDC0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1C524()
{
  return 1;
}

void *sub_100F1C52C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification.NotificationData");
}

void sub_100F1C53C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 4) {
        sub_101A7ED9C();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AE90 + 16);
      }
      sub_100F1BDC0(v7, v8);
    }
  }
}

void sub_100F1C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1C680(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304830;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AE90 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1C710(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1C680(a1);

  operator delete();
}

void sub_100F1C748()
{
}

uint64_t sub_100F1C794(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100F1C02C(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F1C7D4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 3)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F1C06C(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1CAB0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AE90 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1CB4C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AE90 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1C404(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F1CC48(uint64_t a1, void *lpsrc)
{
  sub_100F1C53C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1CCD0()
{
  return 1;
}

void *sub_100F1CCD8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.BluetoothServiceNotification");
}

void sub_100F1CCE8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v5);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    char v4 = *(unsigned char *)(a2 + 8);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(unsigned char *)(a1 + 8) = v4;
  }
}

void sub_100F1CD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1CD8C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1023048A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F1CDAC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1023048A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F1CE00()
{
}

uint64_t sub_100F1CE50(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(unsigned char *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100F1CE64(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 8) {
        break;
      }
      unsigned int v12 = 0;
      uint64_t v8 = (char *)*((void *)this + 1);
      unint64_t v7 = *((void *)this + 2);
      if ((unint64_t)v8 >= v7 || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!result) {
          return result;
        }
        unsigned int v9 = v12;
        unsigned int v10 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v7 = *((void *)this + 2);
      }
      else
      {
        unsigned int v9 = *v8;
        unsigned int v10 = (unsigned __int8 *)(v8 + 1);
        *((void *)this + 1) = v10;
      }
      *(unsigned char *)(a1 + 8) = v9 != 0;
      *(_DWORD *)(a1 + 16) |= 1u;
      if (v10 == (unsigned __int8 *)v7 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t sub_100F1CF84(uint64_t result, BOOL a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 16)) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 8), a2, a4);
  }
  return result;
}

uint64_t sub_100F1CFA0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16)) {
    uint64_t v1 = 2 * (*(_DWORD *)(a1 + 16) & 1u);
  }
  else {
    uint64_t v1 = 0;
  }
  *(_DWORD *)(a1 + 12) = v1;
  return v1;
}

void sub_100F1CFBC(uint64_t a1, void *lpsrc)
{
  sub_100F1CCE8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1D044()
{
  return 1;
}

void *sub_100F1D04C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.CompanionNotifierNotification.NotificationData");
}

void sub_100F1D05C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 2) {
        sub_101A7EDC8();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AEA8 + 16);
      }
      sub_100F1CCE8(v7, v8);
    }
  }
}

void sub_100F1D188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1D1A0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304920;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AEA8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1D230(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1D1A0(a1);

  operator delete();
}

void sub_100F1D268()
{
}

uint64_t sub_100F1D2B4(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 16)) {
          *(unsigned char *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100F1D2E4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          unsigned int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F1CE64(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1D5C0(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AEA8 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1D65C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AEA8 + 16);
    }
    if (*(_DWORD *)(v8 + 16)) {
      int v9 = 2 * (*(_DWORD *)(v8 + 16) & 1);
    }
    else {
      int v9 = 0;
    }
    *(_DWORD *)(v8 + 12) = v9;
    uint64_t v4 = (v4 + v9 + 2);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F1D740(uint64_t a1, void *lpsrc)
{
  sub_100F1D05C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1D7C8()
{
  return 1;
}

void *sub_100F1D7D0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.CompanionNotifierNotification");
}

void sub_100F1D7E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AEC0 + 8);
    }
    sub_1003EB554(v4, v5);
  }
}

void sub_100F1D8B4()
{
}

void sub_100F1D8EC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304998;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AEC0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1D97C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1D8EC(a1);

  operator delete();
}

void sub_100F1D9B4()
{
}

uint64_t sub_100F1DA00(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1003EB9E0(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100F1DA38(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_1003EBA5C(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

void sub_100F1DBD8()
{
}

uint64_t sub_100F1DBFC(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AEC0 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100F1DC28(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AEC0 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100181B78(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F1DC98(uint64_t a1, void *lpsrc)
{
  sub_100F1D7E0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1DD20()
{
  return 1;
}

void *sub_100F1DD28@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MotionStateNotification.NotificationData");
}

void sub_100F1DD38(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 5) {
        sub_101A7EDF4();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AEB8 + 16);
      }
      sub_100F1D7E0(v7, v8);
    }
  }
}

void sub_100F1DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1DE78(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304A10;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AEB8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1DF08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1DE78(a1);

  operator delete();
}

void sub_100F1DF40()
{
}

uint64_t sub_100F1DF8C(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20))
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1003EB9E0(result);
          }
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F1DFE0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 4)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F1DA38(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1E2B8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AEB8 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1E354(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AEB8 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1DC28(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F1E450(uint64_t a1, void *lpsrc)
{
  sub_100F1DD38(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1E4D8()
{
  return 1;
}

void *sub_100F1E4E0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MotionStateNotification");
}

void sub_100F1E4F0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AED0 + 8);
    }
    sub_1003ECEA8(v4, v5);
  }
}

void sub_100F1E5C4()
{
}

void sub_100F1E5FC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304A88;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AED0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1E68C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1E5FC(a1);

  operator delete();
}

void sub_100F1E6C4()
{
}

uint64_t sub_100F1E710(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1003ED180(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100F1E748(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_1003ED1BC(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

void sub_100F1E8E8()
{
}

uint64_t sub_100F1E90C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AED0 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100F1E938(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AED0 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003ED5E4(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F1E9A8(uint64_t a1, void *lpsrc)
{
  sub_100F1E4F0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1EA30()
{
  return 1;
}

void *sub_100F1EA38@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MotionStateObserverNotification.NotificationData");
}

void sub_100F1EA48(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 2) {
        sub_101A96940();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AEC8 + 16);
      }
      sub_100F1E4F0(v7, v8);
    }
  }
}

void sub_100F1EB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1EB88(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304B00;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AEC8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1EC18(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1EB88(a1);

  operator delete();
}

void sub_100F1EC50()
{
}

uint64_t sub_100F1EC9C(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20))
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1003ED180(result);
          }
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F1ECF0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F1E748(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1EFC8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AEC8 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1F064(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AEC8 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1E938(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F1F160(uint64_t a1, void *lpsrc)
{
  sub_100F1EA48(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1F1E8()
{
  return 1;
}

void *sub_100F1F1F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MotionStateObserverNotification");
}

void sub_100F1F200(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(_DWORD **)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AEE0 + 8);
    }
    sub_1003FC9F8(v4, v5);
  }
}

void sub_100F1F2D4()
{
}

void sub_100F1F30C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304B78;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AEE0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1F39C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1F30C(a1);

  operator delete();
}

void sub_100F1F3D4()
{
}

uint64_t sub_100F1F420(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1003FCBD0(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100F1F458(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      int v7 = *(_DWORD **)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_1003FCBE8(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

void sub_100F1F5F8()
{
}

uint64_t sub_100F1F61C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AEE0 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100F1F648(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AEE0 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003FCE10(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F1F6B8(uint64_t a1, void *lpsrc)
{
  sub_100F1F200(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1F740()
{
  return 1;
}

void *sub_100F1F748@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.SignalEnvironmentNotification.NotificationData");
}

void sub_100F1F758(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 2) {
        sub_101A7EE20();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AED8 + 16);
      }
      sub_100F1F200(v7, v8);
    }
  }
}

void sub_100F1F880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1F898(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102304BF0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AED8 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F1F928(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F1F898(a1);

  operator delete();
}

void sub_100F1F960()
{
}

uint64_t sub_100F1F9AC(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20))
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1003FCBD0(result);
          }
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F1FA00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F1F458(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F1FCD8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AED8 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F1FD74(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AED8 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F1F648(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F1FE70(uint64_t a1, void *lpsrc)
{
  sub_100F1F758(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F1FEF8()
{
  return 1;
}

void *sub_100F1FF00@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.SignalEnvironmentNotification");
}

void sub_100F1FF10(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 20);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 20))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      a1[5] |= 1u;
      a1[2] = v5;
      int v4 = *(_DWORD *)(a2 + 20);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 3) {
        sub_101A9696C();
      }
      a1[5] |= 2u;
      a1[3] = v6;
    }
  }
}

void sub_100F1FFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F1FFE0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304C68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F20000(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304C68;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F20054()
{
}

uint64_t sub_100F200A0(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F200B4(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v15 = 0;
      unsigned int v10 = (char *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!result) {
          return result;
        }
        unsigned int v11 = v15;
        int v12 = (unsigned char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
      }
      else
      {
        unsigned int v11 = *v10;
        int v12 = v10 + 1;
        *((void *)this + 1) = v12;
      }
      a1[2] = v11;
      a1[5] |= 1u;
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        unint64_t v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_23:
        unsigned int v16 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v13 = v16;
        }
        else
        {
          unsigned int v13 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v13 <= 2)
        {
          a1[5] |= 2u;
          a1[3] = v13;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        unint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_23;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100F20264(uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(_DWORD *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return result;
}

uint64_t sub_100F202D0(uint64_t a1, unsigned int a2)
{
  char v3 = *(unsigned char *)(a1 + 20);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 20))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
      else if (v5 >= 0x80)
      {
        uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2)
           + 1;
        if ((*(_DWORD *)(a1 + 20) & 2) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v4 = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      if ((*(unsigned char *)(a1 + 20) & 2) == 0) {
        goto LABEL_19;
      }
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }
    else
    {
      int v7 = 2;
    }
    uint64_t v4 = (v7 + v4);
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_19:
  *(_DWORD *)(a1 + 16) = v4;
  return v4;
}

void sub_100F2037C(_DWORD *a1, void *lpsrc)
{
  sub_100F1FF10(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F20404()
{
  return 1;
}

void *sub_100F2040C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.TelephonyServiceNotification");
}

void sub_100F2041C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v4 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(std::string **)(a1 + 8);
    if (v5 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v5, v4);
  }
}

void sub_100F204E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F204FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304CE0;
  sub_1001A4D20((uint64_t)a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F20550()
{
}

uint64_t sub_100F205A4(uint64_t result)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v1 = *(void *)(result + 8);
    if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        **(unsigned char **)uint64_t v1 = 0;
        *(void *)(v1 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v1 = 0;
        *(unsigned char *)(v1 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F205E8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*(_UNKNOWN **)(a1 + 8) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

void sub_100F20708(uint64_t a1, void *lpsrc)
{
  sub_100F2041C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F20790()
{
  return 1;
}

void *sub_100F20798@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.AppMonitorNotification.NotificationData");
}

void sub_100F207A8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 6) {
        sub_101A96998();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AEF0 + 16);
      }
      sub_100F2041C(v7, v8);
    }
  }
}

void sub_100F208D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F208F4()
{
}

uint64_t sub_100F20940(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 28);
  if (v1)
  {
    *(void *)(result + 8) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 20))
        {
          uint64_t v3 = *(void *)(v2 + 8);
          if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            if (*(char *)(v3 + 23) < 0)
            {
              **(unsigned char **)uint64_t v3 = 0;
              *(void *)(v3 + 8) = 0;
            }
            else
            {
              *(unsigned char *)uint64_t v3 = 0;
              *(unsigned char *)(v3 + 23) = 0;
            }
          }
        }
        *(_DWORD *)(v2 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100F209A0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          unsigned int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unsigned int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 5)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F205E8(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

void sub_100F20C88(uint64_t a1, void *lpsrc)
{
  sub_100F207A8(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F20D10()
{
  return 1;
}

void *sub_100F20D18@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.AppMonitorNotification");
}

void sub_100F20D28(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v29);
  }
  int v4 = *(_DWORD *)(a2 + 112);
  if (!(_BYTE)v4) {
    goto LABEL_42;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 112) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AF08 + 8);
    }
    sub_1003E1BD8(v5, v6);
    int v4 = *(_DWORD *)(a2 + 112);
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 2u;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AF08 + 16);
    }
    sub_1003E45D8(v7, v8);
    int v4 = *(_DWORD *)(a2 + 112);
  }
  if ((v4 & 4) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 4u;
    unint64_t v9 = *(_DWORD **)(a1 + 24);
    if (!v9) {
      operator new();
    }
    uint64_t v10 = *(void *)(a2 + 24);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248AF08 + 24);
    }
    sub_1003EA140(v9, v10);
    int v4 = *(_DWORD *)(a2 + 112);
  }
  if ((v4 & 8) != 0)
  {
    *(_DWORD *)(a1 + 112) |= 8u;
    uint64_t v11 = *(void *)(a1 + 32);
    if (!v11) {
      operator new();
    }
    uint64_t v12 = *(void *)(a2 + 32);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248AF08 + 32);
    }
    sub_1003E75EC(v11, v12);
    int v4 = *(_DWORD *)(a2 + 112);
  }
  if ((v4 & 0x10) == 0)
  {
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
LABEL_34:
    uint64_t v14 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 112) |= 0x20u;
    *(void *)(a1 + 40) = v14;
    int v4 = *(_DWORD *)(a2 + 112);
    if ((v4 & 0x40) == 0)
    {
LABEL_31:
      if ((v4 & 0x80) == 0) {
        goto LABEL_42;
      }
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  char v13 = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(a1 + 112) |= 0x10u;
  *(unsigned char *)(a1 + 48) = v13;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x20) != 0) {
    goto LABEL_34;
  }
LABEL_30:
  if ((v4 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_35:
  unsigned int v15 = *(_DWORD *)(a2 + 52);
  if (!sub_10016E644(v15)) {
    sub_101A665DC();
  }
  *(_DWORD *)(a1 + 112) |= 0x40u;
  *(_DWORD *)(a1 + 52) = v15;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x80) != 0)
  {
LABEL_37:
    *(_DWORD *)(a1 + 112) |= 0x80u;
    uint64_t v16 = *(void *)(a1 + 56);
    if (!v16) {
      operator new();
    }
    uint64_t v17 = *(void *)(a2 + 56);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_10248AF08 + 56);
    }
    sub_1003E79D0(v16, v17);
    int v4 = *(_DWORD *)(a2 + 112);
  }
LABEL_42:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x100u;
      uint64_t v18 = *(void *)(a1 + 64);
      if (!v18) {
        operator new();
      }
      uint64_t v19 = *(void *)(a2 + 64);
      if (!v19) {
        uint64_t v19 = *(void *)(qword_10248AF08 + 64);
      }
      sub_1003E7E88(v18, v19);
      int v4 = *(_DWORD *)(a2 + 112);
    }
    if ((v4 & 0x200) != 0)
    {
      unsigned int v20 = *(_DWORD *)(a2 + 104);
      if (!sub_10016E644(v20)) {
        sub_101A66608();
      }
      *(_DWORD *)(a1 + 112) |= 0x200u;
      *(_DWORD *)(a1 + 104) = v20;
      int v4 = *(_DWORD *)(a2 + 112);
    }
    if ((v4 & 0x400) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x400u;
      uint64_t v21 = *(void *)(a1 + 72);
      if (!v21) {
        operator new();
      }
      uint64_t v22 = *(void *)(a2 + 72);
      if (!v22) {
        uint64_t v22 = *(void *)(qword_10248AF08 + 72);
      }
      sub_1003E87A8(v21, v22);
      int v4 = *(_DWORD *)(a2 + 112);
    }
    if ((v4 & 0x800) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x800u;
      uint64_t v23 = *(void *)(a1 + 80);
      if (!v23) {
        operator new();
      }
      uint64_t v24 = *(void *)(a2 + 80);
      if (!v24) {
        uint64_t v24 = *(void *)(qword_10248AF08 + 80);
      }
      sub_10040BD14(v23, v24);
      int v4 = *(_DWORD *)(a2 + 112);
    }
    if ((v4 & 0x1000) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x1000u;
      uint64_t v25 = *(void *)(a1 + 88);
      if (!v25) {
        operator new();
      }
      uint64_t v26 = *(void *)(a2 + 88);
      if (!v26) {
        uint64_t v26 = *(void *)(qword_10248AF08 + 88);
      }
      sub_1003EA9AC(v25, v26);
      int v4 = *(_DWORD *)(a2 + 112);
    }
    if ((v4 & 0x2000) != 0)
    {
      *(_DWORD *)(a1 + 112) |= 0x2000u;
      uint64_t v27 = *(void *)(a1 + 96);
      if (!v27) {
        operator new();
      }
      uint64_t v28 = *(void *)(a2 + 96);
      if (!v28) {
        uint64_t v28 = *(void *)(qword_10248AF08 + 96);
      }
      sub_1003EB1B0(v27, v28);
    }
  }
}

void sub_100F211E8()
{
}

void sub_100F212DC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304DD0;
  sub_100169E8C(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F21330()
{
}

uint64_t sub_100F21398(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 112);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1003E214C(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_1003E51D8(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(v1 + 24);
      if (result)
      {
        uint64_t result = sub_1003EA3B8(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(v1 + 32);
      if (result)
      {
        uint64_t result = sub_1003E7760(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(unsigned char *)(v1 + 48) = 0;
    *(void *)(v1 + 40) = 0;
    *(_DWORD *)(v1 + 52) = 0;
    if ((v2 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 56);
      if (result)
      {
        uint64_t result = sub_1003E7B84(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t result = *(void *)(v1 + 64);
      if (result)
      {
        uint64_t result = sub_1003E7FE8(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(_DWORD *)(v1 + 104) = 0;
    if ((v2 & 0x400) != 0)
    {
      uint64_t result = *(void *)(v1 + 72);
      if (result)
      {
        uint64_t result = sub_1003E8938(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x800) != 0)
    {
      uint64_t result = *(void *)(v1 + 80);
      if (result)
      {
        uint64_t result = sub_10040BF0C(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x1000) != 0)
    {
      uint64_t result = *(void *)(v1 + 88);
      if (result)
      {
        uint64_t result = sub_1003EABE0(result);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x2000) != 0)
    {
      uint64_t result = *(void *)(v1 + 96);
      if (result) {
        uint64_t result = sub_1003EB348(result);
      }
    }
  }
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t sub_100F214A4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 112) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        v112[0] = 0;
        unint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003E21EC(v8, this, v19) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        uint64_t v23 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 != 18) {
          continue;
        }
        *((void *)this + 1) = v23 + 1;
        goto LABEL_52;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_40;
        }
LABEL_52:
        *(_DWORD *)(a1 + 112) |= 2u;
        uint64_t v24 = *(void *)(a1 + 16);
        if (!v24) {
          operator new();
        }
        v112[0] = 0;
        uint64_t v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v25;
          *((void *)this + 1) = v25 + 1;
        }
        int v26 = *((_DWORD *)this + 14);
        int v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27) {
          return 0;
        }
        int v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003E53B0(v24, this, v29) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        int v30 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v30, 1);
        int v31 = v30 - 1;
        if (v31 < 0 == v21) {
          *((_DWORD *)this + 14) = v31;
        }
        int v32 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 != 26) {
          continue;
        }
        *((void *)this + 1) = v32 + 1;
LABEL_66:
        *(_DWORD *)(a1 + 112) |= 4u;
        int v33 = *(int **)(a1 + 24);
        if (!v33) {
          operator new();
        }
        v112[0] = 0;
        int v34 = (char *)*((void *)this + 1);
        if ((unint64_t)v34 >= *((void *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v34;
          *((void *)this + 1) = v34 + 1;
        }
        int v35 = *((_DWORD *)this + 14);
        int v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36) {
          return 0;
        }
        int v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003EA3EC(v33, this, v38) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        int v39 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v39, 1);
        int v40 = v39 - 1;
        if (v40 < 0 == v21) {
          *((_DWORD *)this + 14) = v40;
        }
        unsigned int v41 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v41 >= *((void *)this + 2) || *v41 != 34) {
          continue;
        }
        *((void *)this + 1) = v41 + 1;
LABEL_80:
        *(_DWORD *)(a1 + 112) |= 8u;
        uint64_t v42 = *(void *)(a1 + 32);
        if (!v42) {
          operator new();
        }
        v112[0] = 0;
        unsigned int v43 = (char *)*((void *)this + 1);
        if ((unint64_t)v43 >= *((void *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v43;
          *((void *)this + 1) = v43 + 1;
        }
        int v44 = *((_DWORD *)this + 14);
        int v45 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v44 + 1;
        if (v44 >= v45) {
          return 0;
        }
        int v46 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003E7778(v42, this, v47) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v46);
        int v48 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v48, 1);
        int v49 = v48 - 1;
        if (v49 < 0 == v21) {
          *((_DWORD *)this + 14) = v49;
        }
        unsigned int v50 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v50 >= v10 || *v50 != 40) {
          continue;
        }
        uint64_t v11 = v50 + 1;
        *((void *)this + 1) = v11;
LABEL_94:
        v112[0] = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!result) {
            return result;
          }
          unsigned int v51 = v112[0];
          unsigned int v52 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v51 = *v11;
          unsigned int v52 = v11 + 1;
          *((void *)this + 1) = v52;
        }
        *(unsigned char *)(a1 + 48) = v51 != 0;
        *(_DWORD *)(a1 + 112) |= 0x10u;
        if ((unint64_t)v52 >= v10 || *v52 != 49) {
          continue;
        }
        *((void *)this + 1) = v52 + 1;
LABEL_102:
        *(void *)v112 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v112) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v112;
        }
        *(_DWORD *)(a1 + 112) |= 0x20u;
        unsigned int v54 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v54 >= v12 || *v54 != 56) {
          continue;
        }
        char v13 = v54 + 1;
        *((void *)this + 1) = v13;
LABEL_106:
        v112[0] = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!result) {
            return result;
          }
          unsigned int v55 = v112[0];
        }
        else
        {
          unsigned int v55 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (sub_10016E644(v55))
        {
          if (!sub_10016E644(v55)) {
            sub_101A665DC();
          }
          *(_DWORD *)(a1 + 112) |= 0x40u;
          *(_DWORD *)(a1 + 52) = v55;
        }
        unsigned int v56 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v56 >= *((void *)this + 2) || *v56 != 66) {
          continue;
        }
        *((void *)this + 1) = v56 + 1;
LABEL_117:
        *(_DWORD *)(a1 + 112) |= 0x80u;
        uint64_t v57 = *(void *)(a1 + 56);
        if (!v57) {
          operator new();
        }
        v112[0] = 0;
        uint64_t v58 = (char *)*((void *)this + 1);
        if ((unint64_t)v58 >= *((void *)this + 2) || *v58 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v58;
          *((void *)this + 1) = v58 + 1;
        }
        int v59 = *((_DWORD *)this + 14);
        int v60 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v59 + 1;
        if (v59 >= v60) {
          return 0;
        }
        int v61 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003E7BA0(v57, this, v62) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v61);
        int v63 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v63, 1);
        int v64 = v63 - 1;
        if (v64 < 0 == v21) {
          *((_DWORD *)this + 14) = v64;
        }
        uint64_t v65 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v65 >= *((void *)this + 2) || *v65 != 74) {
          continue;
        }
        *((void *)this + 1) = v65 + 1;
LABEL_131:
        *(_DWORD *)(a1 + 112) |= 0x100u;
        uint64_t v66 = *(void *)(a1 + 64);
        if (!v66) {
          operator new();
        }
        v112[0] = 0;
        uint64_t v67 = (char *)*((void *)this + 1);
        if ((unint64_t)v67 >= *((void *)this + 2) || *v67 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v67;
          *((void *)this + 1) = v67 + 1;
        }
        int v68 = *((_DWORD *)this + 14);
        int v69 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v68 + 1;
        if (v68 >= v69) {
          return 0;
        }
        int v70 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003E7FFC(v66, this, v71) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v70);
        int v72 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v72, 1);
        int v73 = v72 - 1;
        if (v73 < 0 == v21) {
          *((_DWORD *)this + 14) = v73;
        }
        int v74 = (unsigned char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        if ((unint64_t)v74 >= v14 || *v74 != 80) {
          continue;
        }
        unsigned int v15 = v74 + 1;
        *((void *)this + 1) = v15;
LABEL_145:
        v112[0] = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112);
          if (!result) {
            return result;
          }
          unsigned int v75 = v112[0];
        }
        else
        {
          unsigned int v75 = *v15;
          *((void *)this + 1) = v15 + 1;
        }
        if (sub_10016E644(v75))
        {
          if (!sub_10016E644(v75)) {
            sub_101A66608();
          }
          *(_DWORD *)(a1 + 112) |= 0x200u;
          *(_DWORD *)(a1 + 104) = v75;
        }
        v76 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v76 >= *((void *)this + 2) || *v76 != 90) {
          continue;
        }
        *((void *)this + 1) = v76 + 1;
LABEL_156:
        *(_DWORD *)(a1 + 112) |= 0x400u;
        uint64_t v77 = *(void *)(a1 + 72);
        if (!v77) {
          operator new();
        }
        v112[0] = 0;
        unint64_t v78 = (char *)*((void *)this + 1);
        if ((unint64_t)v78 >= *((void *)this + 2) || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v78;
          *((void *)this + 1) = v78 + 1;
        }
        int v79 = *((_DWORD *)this + 14);
        int v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80) {
          return 0;
        }
        int v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003E8950(v77, this, v82) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        int v83 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v83, 1);
        int v84 = v83 - 1;
        if (v84 < 0 == v21) {
          *((_DWORD *)this + 14) = v84;
        }
        v85 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v85 >= *((void *)this + 2) || *v85 != 98) {
          continue;
        }
        *((void *)this + 1) = v85 + 1;
LABEL_170:
        *(_DWORD *)(a1 + 112) |= 0x800u;
        uint64_t v86 = *(void *)(a1 + 80);
        if (!v86) {
          operator new();
        }
        v112[0] = 0;
        v87 = (char *)*((void *)this + 1);
        if ((unint64_t)v87 >= *((void *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v87;
          *((void *)this + 1) = v87 + 1;
        }
        int v88 = *((_DWORD *)this + 14);
        int v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89) {
          return 0;
        }
        int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_10040BF40(v86, this, v91) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        int v92 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v92, 1);
        int v93 = v92 - 1;
        if (v93 < 0 == v21) {
          *((_DWORD *)this + 14) = v93;
        }
        v94 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v94 >= *((void *)this + 2) || *v94 != 106) {
          continue;
        }
        *((void *)this + 1) = v94 + 1;
LABEL_184:
        *(_DWORD *)(a1 + 112) |= 0x1000u;
        uint64_t v95 = *(void *)(a1 + 88);
        if (!v95) {
          operator new();
        }
        v112[0] = 0;
        v96 = (char *)*((void *)this + 1);
        if ((unint64_t)v96 >= *((void *)this + 2) || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v96;
          *((void *)this + 1) = v96 + 1;
        }
        int v97 = *((_DWORD *)this + 14);
        int v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98) {
          return 0;
        }
        int v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003EAC04(v95, this, v100) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        int v101 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v101, 1);
        int v102 = v101 - 1;
        if (v102 < 0 == v21) {
          *((_DWORD *)this + 14) = v102;
        }
        v103 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v103 >= *((void *)this + 2) || *v103 != 114) {
          continue;
        }
        *((void *)this + 1) = v103 + 1;
LABEL_198:
        *(_DWORD *)(a1 + 112) |= 0x2000u;
        uint64_t v104 = *(void *)(a1 + 96);
        if (!v104) {
          operator new();
        }
        v112[0] = 0;
        v105 = (char *)*((void *)this + 1);
        if ((unint64_t)v105 >= *((void *)this + 2) || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v112))return 0; {
        }
          }
        else
        {
          v112[0] = *v105;
          *((void *)this + 1) = v105 + 1;
        }
        int v106 = *((_DWORD *)this + 14);
        int v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107) {
          return 0;
        }
        int v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v112[0]);
        if (!sub_1003EB35C(v104, this, v109) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        int v110 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v110, 1);
        int v111 = v110 - 1;
        if (v111 < 0 == v21) {
          *((_DWORD *)this + 14) = v111;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_66;
        }
        goto LABEL_40;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_80;
        }
        goto LABEL_40;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_40;
        }
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_94;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_102;
        }
        goto LABEL_40;
      case 7u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_40;
        }
        char v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_106;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_117;
        }
        goto LABEL_40;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_131;
        }
        goto LABEL_40;
      case 0xAu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_40;
        }
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_145;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_156;
        }
        goto LABEL_40;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_170;
        }
        goto LABEL_40;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_184;
        }
        goto LABEL_40;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_198;
        }
        goto LABEL_40;
      default:
        int v7 = TagFallback & 7;
LABEL_40:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F22158()
{
}

void sub_100F22270(uint64_t a1, void *lpsrc)
{
  sub_100F20D28(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F222F8()
{
  return 1;
}

void *sub_100F22300@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification.NotificationData");
}

void sub_100F22310(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  int v4 = *(_DWORD *)(a2 + 60);
  if ((_BYTE)v4)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 60) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 60);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_15;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v6 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 60) |= 2u;
    *(void *)(a1 + 16) = v6;
    int v4 = *(_DWORD *)(a2 + 60);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v7 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(void *)(a1 + 24) = v7;
    int v4 = *(_DWORD *)(a2 + 60);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
LABEL_16:
    char v8 = *(unsigned char *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(unsigned char *)(a1 + 32) = v8;
    int v4 = *(_DWORD *)(a2 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
LABEL_17:
    char v9 = *(unsigned char *)(a2 + 33);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(unsigned char *)(a1 + 33) = v9;
    int v4 = *(_DWORD *)(a2 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_10:
      if ((v4 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }
LABEL_18:
    char v10 = *(unsigned char *)(a2 + 34);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(unsigned char *)(a1 + 34) = v10;
    int v4 = *(_DWORD *)(a2 + 60);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v11 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x40u;
    *(void *)(a1 + 40) = v11;
    int v4 = *(_DWORD *)(a2 + 60);
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
LABEL_20:
    unsigned int v12 = *(_DWORD *)(a2 + 36);
    if (!sub_10016E644(v12)) {
      sub_101A96A1C();
    }
    *(_DWORD *)(a1 + 60) |= 0x80u;
    *(_DWORD *)(a1 + 36) = v12;
    int v4 = *(_DWORD *)(a2 + 60);
  }
LABEL_22:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      unsigned int v13 = *(_DWORD *)(a2 + 48);
      if (!sub_100165F14(v13)) {
        sub_101A969F0();
      }
      *(_DWORD *)(a1 + 60) |= 0x100u;
      *(_DWORD *)(a1 + 48) = v13;
      int v4 = *(_DWORD *)(a2 + 60);
    }
    if ((v4 & 0x200) != 0)
    {
      unsigned int v14 = *(_DWORD *)(a2 + 52);
      if (!sub_10016E644(v14)) {
        sub_101A969C4();
      }
      *(_DWORD *)(a1 + 60) |= 0x200u;
      *(_DWORD *)(a1 + 52) = v14;
    }
  }
}

void sub_100F22500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F22518(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304E48;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F22538()
{
}

uint64_t sub_100F2259C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 60);
  if ((_BYTE)v1)
  {
    *(void *)(result + 40) = 0;
    *(_DWORD *)(result + 36) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 31) = 0;
  }
  if ((v1 & 0xFF00) != 0) {
    *(void *)(result + 48) = 0x100000001;
  }
  *(_DWORD *)(result + 60) = 0;
  return result;
}

uint64_t sub_100F225D4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_39;
        }
        *(void *)int v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v34;
        }
        *(_DWORD *)(a1 + 60) |= 1u;
        char v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 != 17) {
          continue;
        }
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_39;
        }
LABEL_14:
        *(void *)int v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34) & 1) == 0)return 0; {
        *(void *)(a1 + 16) = *(void *)v34;
        }
        *(_DWORD *)(a1 + 60) |= 2u;
        char v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 != 25) {
          continue;
        }
        *((void *)this + 1) = v9 + 1;
LABEL_19:
        *(void *)int v34 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34) & 1) == 0)return 0; {
        *(void *)(a1 + 24) = *(void *)v34;
        }
        *(_DWORD *)(a1 + 60) |= 4u;
        uint64_t v11 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v11 >= v10 || *v11 != 32) {
          continue;
        }
        unsigned int v12 = v11 + 1;
        *((void *)this + 1) = v12;
LABEL_25:
        v34[0] = 0;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!result) {
            return result;
          }
          unsigned int v13 = v34[0];
          unsigned int v14 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v13 = *v12;
          unsigned int v14 = v12 + 1;
          *((void *)this + 1) = v14;
        }
        *(unsigned char *)(a1 + 32) = v13 != 0;
        *(_DWORD *)(a1 + 60) |= 8u;
        if ((unint64_t)v14 >= v10 || *v14 != 40) {
          continue;
        }
        unsigned int v15 = v14 + 1;
        *((void *)this + 1) = v15;
LABEL_48:
        v34[0] = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!result) {
            return result;
          }
          unsigned int v24 = v34[0];
          uint64_t v25 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v24 = *v15;
          uint64_t v25 = v15 + 1;
          *((void *)this + 1) = v25;
        }
        *(unsigned char *)(a1 + 33) = v24 != 0;
        *(_DWORD *)(a1 + 60) |= 0x10u;
        if ((unint64_t)v25 >= v10 || *v25 != 48) {
          continue;
        }
        int v16 = v25 + 1;
        *((void *)this + 1) = v16;
LABEL_56:
        v34[0] = 0;
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
          if (!result) {
            return result;
          }
          unsigned int v26 = v34[0];
          int v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v26 = *v16;
          int v27 = v16 + 1;
          *((void *)this + 1) = v27;
        }
        *(unsigned char *)(a1 + 34) = v26 != 0;
        *(_DWORD *)(a1 + 60) |= 0x20u;
        if ((unint64_t)v27 >= v10 || *v27 != 57) {
          continue;
        }
        *((void *)this + 1) = v27 + 1;
LABEL_64:
        *(void *)int v34 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v34))
        {
          *(void *)(a1 + 40) = *(void *)v34;
          *(_DWORD *)(a1 + 60) |= 0x40u;
          int v28 = (unsigned char *)*((void *)this + 1);
          unint64_t v17 = *((void *)this + 2);
          if ((unint64_t)v28 < v17 && *v28 == 64)
          {
            int v18 = v28 + 1;
            *((void *)this + 1) = v18;
LABEL_68:
            v34[0] = 0;
            if ((unint64_t)v18 >= v17 || *v18 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
              if (!result) {
                return result;
              }
              unsigned int v29 = v34[0];
            }
            else
            {
              unsigned int v29 = *v18;
              *((void *)this + 1) = v18 + 1;
            }
            if (sub_10016E644(v29))
            {
              if (!sub_10016E644(v29)) {
                sub_101A96A1C();
              }
              *(_DWORD *)(a1 + 60) |= 0x80u;
              *(_DWORD *)(a1 + 36) = v29;
            }
            int v30 = (unsigned char *)*((void *)this + 1);
            unint64_t v19 = *((void *)this + 2);
            if ((unint64_t)v30 < v19 && *v30 == 72)
            {
              int v20 = v30 + 1;
              *((void *)this + 1) = v20;
LABEL_79:
              v34[0] = 0;
              if ((unint64_t)v20 >= v19 || *v20 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
                if (!result) {
                  return result;
                }
                unsigned int v31 = v34[0];
              }
              else
              {
                unsigned int v31 = *v20;
                *((void *)this + 1) = v20 + 1;
              }
              if (sub_100165F14(v31))
              {
                if (!sub_100165F14(v31)) {
                  sub_101A969F0();
                }
                *(_DWORD *)(a1 + 60) |= 0x100u;
                *(_DWORD *)(a1 + 48) = v31;
              }
              int v32 = (unsigned char *)*((void *)this + 1);
              unint64_t v21 = *((void *)this + 2);
              if ((unint64_t)v32 < v21 && *v32 == 80)
              {
                int v22 = v32 + 1;
                *((void *)this + 1) = v22;
LABEL_90:
                v34[0] = 0;
                if ((unint64_t)v22 >= v21 || *v22 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v34);
                  if (!result) {
                    return result;
                  }
                  unsigned int v33 = v34[0];
                }
                else
                {
                  unsigned int v33 = *v22;
                  *((void *)this + 1) = v22 + 1;
                }
                if (sub_10016E644(v33))
                {
                  if (!sub_10016E644(v33)) {
                    sub_101A969C4();
                  }
                  *(_DWORD *)(a1 + 60) |= 0x200u;
                  *(_DWORD *)(a1 + 52) = v33;
                }
                if (*((void *)this + 1) == *((void *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  uint64_t result = 1;
                  *((unsigned char *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_19;
        }
        goto LABEL_39;
      case 4u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        unsigned int v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_25;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_48;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_56;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_64;
        }
        goto LABEL_39;
      case 8u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        int v18 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_68;
      case 9u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        int v20 = (char *)*((void *)this + 1);
        unint64_t v19 = *((void *)this + 2);
        goto LABEL_79;
      case 0xAu:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_39;
        }
        int v22 = (char *)*((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        goto LABEL_90;
      default:
        int v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F22B78(uint64_t a1, void *lpsrc)
{
  sub_100F22310(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F22C00()
{
  return 1;
}

void *sub_100F22C08@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification.RegInfo");
}

void sub_100F22C18(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 0x31) {
        sub_101A7ED70();
      }
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AF00 + 16);
      }
      sub_100F20D28(v7, v8);
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 8) != 0)
    {
      *(_DWORD *)(a1 + 36) |= 8u;
      uint64_t v9 = *(void *)(a1 + 24);
      if (!v9) {
        operator new();
      }
      uint64_t v10 = *(void *)(a2 + 24);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_10248AF00 + 24);
      }
      sub_100F22310(v9, v10);
    }
  }
}

void sub_100F22DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F22DFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102304EC0;
  sub_100169AB8(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F22E50()
{
}

uint64_t sub_100F22EA4(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 36);
  if ((_BYTE)v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        uint64_t result = sub_100F21398(result);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      if (v3)
      {
        int v4 = *(_DWORD *)(v3 + 60);
        if ((_BYTE)v4)
        {
          *(void *)(v3 + 40) = 0;
          *(_DWORD *)(v3 + 36) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
          *(void *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 31) = 0;
        }
        if ((v4 & 0xFF00) != 0) {
          *(void *)(v3 + 48) = 0x100000001;
        }
        *(_DWORD *)(v3 + 60) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100F22F28(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v34 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!result) {
            return result;
          }
          unsigned int v10 = v34;
          uint64_t v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }
        else
        {
          unsigned int v10 = *v9;
          uint64_t v11 = v9 + 1;
          *((void *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 36) |= 1u;
        if ((unint64_t)v11 < v8 && *v11 == 16)
        {
          unsigned int v12 = v11 + 1;
          *((void *)this + 1) = v12;
          goto LABEL_25;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v12 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
LABEL_25:
        unsigned int v34 = 0;
        if ((unint64_t)v12 >= v8 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34);
          if (!result) {
            return result;
          }
          unsigned int v14 = v34;
        }
        else
        {
          unsigned int v14 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        if (v14 <= 0x30)
        {
          *(_DWORD *)(a1 + 36) |= 2u;
          *(_DWORD *)(a1 + 12) = v14;
        }
        unsigned int v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 != 26) {
          continue;
        }
        *((void *)this + 1) = v15 + 1;
LABEL_35:
        *(_DWORD *)(a1 + 36) |= 4u;
        uint64_t v16 = *(void *)(a1 + 16);
        if (!v16) {
          operator new();
        }
        unsigned int v34 = 0;
        unint64_t v17 = (char *)*((void *)this + 1);
        if ((unint64_t)v17 >= *((void *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34))return 0; {
        }
          }
        else
        {
          unsigned int v34 = *v17;
          *((void *)this + 1) = v17 + 1;
        }
        int v18 = *((_DWORD *)this + 14);
        int v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19) {
          return 0;
        }
        int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
        if (!sub_100F214A4(v16, this, v21) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        int v22 = *((_DWORD *)this + 14);
        BOOL v23 = __OFSUB__(v22, 1);
        int v24 = v22 - 1;
        if (v24 < 0 == v23) {
          *((_DWORD *)this + 14) = v24;
        }
        uint64_t v25 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 != 34) {
          continue;
        }
        *((void *)this + 1) = v25 + 1;
LABEL_49:
        *(_DWORD *)(a1 + 36) |= 8u;
        uint64_t v26 = *(void *)(a1 + 24);
        if (!v26) {
          operator new();
        }
        unsigned int v34 = 0;
        int v27 = (char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v34))return 0; {
        }
          }
        else
        {
          unsigned int v34 = *v27;
          *((void *)this + 1) = v27 + 1;
        }
        int v28 = *((_DWORD *)this + 14);
        int v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 < v29)
        {
          int v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
          if (sub_100F225D4(v26, this, v31))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
              int v32 = *((_DWORD *)this + 14);
              BOOL v23 = __OFSUB__(v32, 1);
              int v33 = v32 - 1;
              if (v33 < 0 == v23) {
                *((_DWORD *)this + 14) = v33;
              }
              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_35;
        }
        goto LABEL_17;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        goto LABEL_49;
      default:
        int v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F23378(uint64_t a1, void *lpsrc)
{
  sub_100F22C18(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F23400()
{
  return 1;
}

void *sub_100F23408@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.LocationProviderNotification");
}

float sub_100F23418(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AF20 + 8);
    }
    return sub_1004155C0(v5, v6);
  }
  return result;
}

void sub_100F234EC()
{
}

void sub_100F23528()
{
}

uint64_t sub_100F23574(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    float result = *(void *)(result + 8);
    if (result) {
      float result = sub_100415814(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100F235AC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      unint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100415838(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

void sub_100F2374C()
{
}

float sub_100F23770(uint64_t a1, void *lpsrc)
{
  return sub_100F23418(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F237F8()
{
  return 1;
}

void *sub_100F23800@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.OutdoorServiceNotification.NotificationData");
}

float sub_100F23810(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 2) {
        sub_101A96A48();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v8 = *(void *)(a1 + 16);
      if (!v8) {
        operator new();
      }
      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_10248AF18 + 16);
      }
      return sub_100F23418(v8, v9);
    }
  }
  return result;
}

void sub_100F23938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F23954()
{
}

uint64_t sub_100F239A0(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20))
        {
          float result = *(void *)(v3 + 8);
          if (result) {
            float result = sub_100415814(result);
          }
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F239F4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        uint64_t v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F235AC(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

float sub_100F23CCC(uint64_t a1, void *lpsrc)
{
  return sub_100F23810(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F23D54()
{
  return 1;
}

void *sub_100F23D5C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.OutdoorServiceNotification");
}

double sub_100F23D6C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AF30 + 8);
    }
    return sub_100414248(v5, v6);
  }
  return result;
}

void sub_100F23E40()
{
}

void sub_100F23E78(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102305028;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AF30 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F23F08(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F23E78(a1);

  operator delete();
}

void sub_100F23F40()
{
}

uint64_t sub_100F23F8C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    double result = *(void *)(result + 8);
    if (result) {
      double result = sub_100414878(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100F23FC4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_100414968(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

void sub_100F24164()
{
}

uint64_t sub_100F24188(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AF30 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100F241B4(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AF30 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004152E0(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

double sub_100F24224(uint64_t a1, void *lpsrc)
{
  return sub_100F23D6C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F242AC()
{
  return 1;
}

void *sub_100F242B4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.RoutineVisitNotification.NotificationData");
}

double sub_100F242C4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v6 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 2) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (v7 >= 3) {
        sub_101A96A74();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v7;
      int v5 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v8 = *(void *)(a1 + 16);
      if (!v8) {
        operator new();
      }
      uint64_t v9 = *(void *)(a2 + 16);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_10248AF28 + 16);
      }
      return sub_100F23D6C(v8, v9);
    }
  }
  return result;
}

void sub_100F243EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F24404(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023050A0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AF28 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F24494(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F24404(a1);

  operator delete();
}

void sub_100F244CC()
{
}

uint64_t sub_100F24518(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20))
        {
          double result = *(void *)(v3 + 8);
          if (result) {
            double result = sub_100414878(result);
          }
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F2456C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        uint64_t v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    int v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F23FC4(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F24844(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AF28 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F248E0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AF28 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F241B4(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

double sub_100F249DC(uint64_t a1, void *lpsrc)
{
  return sub_100F242C4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F24A64()
{
  return 1;
}

void *sub_100F24A6C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.RoutineVisitNotification");
}

void sub_100F24A7C(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        sub_1005C1544();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100415D2C(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
}

void sub_100F24BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F24BBC(uint64_t *a1)
{
  *a1 = (uint64_t)off_102305118;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100F24C18(uint64_t *a1)
{
  sub_100F24BBC(a1);

  operator delete();
}

void sub_100F24C50()
{
}

uint64_t sub_100F24CA4(uint64_t a1)
{
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

uint64_t sub_100F24CD0(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
    }
    if (TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }
          a1[5] = v8 + 1;
          sub_1005C1544();
        }
        uint64_t v10 = *((void *)a1 + 1);
        a1[4] = v9 + 1;
        uint64_t v11 = *(void *)(v10 + 8 * v9);
        unsigned int v23 = 0;
        int v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v23))return 0; {
        }
          }
        else
        {
          unsigned int v23 = *v12;
          *((void *)this + 1) = v12 + 1;
        }
        int v13 = *((_DWORD *)this + 14);
        int v14 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        int v15 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v23);
        if (!sub_10041613C(v11, this, v16) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v15);
        int v17 = *((_DWORD *)this + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)this + 14) = v19;
        }
        int v20 = (unsigned char *)*((void *)this + 1);
        int v21 = (unsigned char *)*((void *)this + 2);
        if (v20 >= v21 || *v20 != 10)
        {
          if (v20 == v21 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((void *)this + 1) = v20 + 1;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100F24EC4(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  return result;
}

uint64_t sub_100F24F24(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100416BB4(*(unsigned int **)(*(void *)(a1 + 8)+ 8 * v4), a2);
      int v6 = (int)v5;
      if (v5 >= 0x80) {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
      }
      else {
        int v7 = 1;
      }
      uint64_t v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

void sub_100F24FA4(_DWORD *a1, void *lpsrc)
{
  sub_100F24A7C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F2502C()
{
  return 1;
}

void *sub_100F25034@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.InertialOdometryNotification.NotificationData");
}

void sub_100F25044(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 2) {
        sub_101A96AA0();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      int v7 = *(_DWORD **)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AF38 + 16);
      }
      sub_100F24A7C(v7, v8);
    }
  }
}

void sub_100F25174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F2518C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102305190;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AF38 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F2521C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F2518C(a1);

  operator delete();
}

void sub_100F25254()
{
}

uint64_t sub_100F252A0(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        uint64_t result = sub_10026DEDC(v3 + 8);
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F252E8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          uint64_t v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        unsigned int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    int v17 = *(int **)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    BOOL v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F24CD0(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F255C8(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AF38 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F25664(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AF38 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F24F24(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F25760(uint64_t a1, void *lpsrc)
{
  sub_100F25044(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F257E8()
{
  return 1;
}

void *sub_100F257F0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.InertialOdometryNotification");
}

void sub_100F25800(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248AF50 + 8);
      }
      sub_1003F0408(v5, v6);
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AF50 + 16);
      }
      sub_1003EEB38(v7, v8);
    }
  }
}

void sub_100F25934()
{
}

void sub_100F25980(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102305208;
  sub_100193104(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F259D4()
{
}

uint64_t sub_100F25A20(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 28);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1003F05E0(result);
        int v2 = *(_DWORD *)(v1 + 28);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result) {
        uint64_t result = sub_1003EF024(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F25A70(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v27 = 0;
        unint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0; {
        }
          }
        else
        {
          unsigned int v27 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_1003F0624(v8, this, v13) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        int v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 18)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_17;
      }
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v18 = *(void *)(a1 + 16);
      if (!v18) {
        operator new();
      }
      unsigned int v28 = 0;
      int v19 = (char *)*((void *)this + 1);
      if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0; {
      }
        }
      else
      {
        unsigned int v28 = *v19;
        *((void *)this + 1) = v19 + 1;
      }
      int v20 = *((_DWORD *)this + 14);
      int v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21) {
        return 0;
      }
      int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_1003EF0D0(v18, this, v23) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      int v24 = *((_DWORD *)this + 14);
      BOOL v15 = __OFSUB__(v24, 1);
      int v25 = v24 - 1;
      if (v25 < 0 == v15) {
        *((_DWORD *)this + 14) = v25;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_100F25D28()
{
}

void sub_100F25D60(uint64_t a1, void *lpsrc)
{
  sub_100F25800(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F25DE8()
{
  return 1;
}

void *sub_100F25DF0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MotionStateMediatorNotification.NotificationData");
}

void sub_100F25E00(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 3) {
        sub_101A96ACC();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AF48 + 16);
      }
      sub_100F25800(v7, v8);
    }
  }
}

void sub_100F25F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F25F44()
{
}

uint64_t sub_100F25F90(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(result + 16);
      if (result) {
        uint64_t result = sub_100F25A20(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F25FD0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unsigned int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 2)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F25A70(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

void sub_100F262A8(uint64_t a1, void *lpsrc)
{
  sub_100F25E00(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F26330()
{
  return 1;
}

void *sub_100F26338@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MotionStateMediatorNotification");
}

void sub_100F26348(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AF60 + 8);
    }
    sub_1003F7C7C(v4, v5);
  }
}

void sub_100F2641C()
{
}

void sub_100F26454(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1023052F8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AF60 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F264E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F26454(a1);

  operator delete();
}

void sub_100F2651C()
{
}

uint64_t sub_100F26568(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 20))
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_1003F811C(result);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_100F265A0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        operator new();
      }
      unsigned int v17 = 0;
      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17))return 0; {
      }
        }
      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }
      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      if (!sub_1003F8198(v7, this, v12) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
  return 1;
}

void sub_100F26740()
{
}

uint64_t sub_100F26764(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(result + 20))
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AF60 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return result;
}

uint64_t sub_100F26790(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_10248AF60 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003F8840(v4, a2);
    int v7 = (int)v5;
    if (v5 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100F26800(uint64_t a1, void *lpsrc)
{
  sub_100F26348(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F26888()
{
  return 1;
}

void *sub_100F26890@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MapRouteHintNotification.NotificationData");
}

void sub_100F268A0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      int v5 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      *(_DWORD *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 2) {
        sub_101A96AF8();
      }
      *(_DWORD *)(a1 + 28) |= 2u;
      *(_DWORD *)(a1 + 12) = v6;
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 4u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248AF58 + 16);
      }
      sub_100F26348(v7, v8);
    }
  }
}

void sub_100F269C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F269E0(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_102305370;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248AF58 != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100F26A70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100F269E0(a1);

  operator delete();
}

void sub_100F26AA8()
{
}

uint64_t sub_100F26AF4(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 28);
  if (v2)
  {
    *(void *)(result + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20))
        {
          uint64_t result = *(void *)(v3 + 8);
          if (result) {
            uint64_t result = sub_1003F811C(result);
          }
        }
        *(_DWORD *)(v3 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100F26B48(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v26 = 0;
          int v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
            if (!result) {
              return result;
            }
            unsigned int v11 = v26;
            unsigned int v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            unsigned int v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 28) |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v27 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!result) {
            return result;
          }
          unsigned int v15 = v27;
        }
        else
        {
          unsigned int v15 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        if (v15 <= 1)
        {
          *(_DWORD *)(a1 + 28) |= 2u;
          *(_DWORD *)(a1 + 12) = v15;
        }
        int v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 26)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_36;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_18;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_18:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_36:
    *(_DWORD *)(a1 + 28) |= 4u;
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17) {
      operator new();
    }
    unsigned int v28 = 0;
    uint64_t v18 = (char *)*((void *)this + 1);
    if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28)) {
        return 0;
      }
    }
    else
    {
      unsigned int v28 = *v18;
      *((void *)this + 1) = v18 + 1;
    }
    int v19 = *((_DWORD *)this + 14);
    int v20 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v19 + 1;
    if (v19 >= v20) {
      return 0;
    }
    int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
    if (!sub_100F265A0(v17, this, v22) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
    int v23 = *((_DWORD *)this + 14);
    BOOL v24 = __OFSUB__(v23, 1);
    int v25 = v23 - 1;
    if (v25 < 0 == v24) {
      *((_DWORD *)this + 14) = v25;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

uint64_t sub_100F26E20(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 12), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 8), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 28);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248AF58 + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t sub_100F26EBC(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 28);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_19;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248AF58 + 16);
    }
    unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F26790(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
  }
LABEL_26:
  *(_DWORD *)(a1 + 24) = v4;
  return v4;
}

void sub_100F26FB8(uint64_t a1, void *lpsrc)
{
  sub_100F268A0(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F27040()
{
  return 1;
}

void *sub_100F27048@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.MapRouteHintNotification");
}

void sub_100F27058(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 20);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 20))
    {
      unsigned int v5 = *(_DWORD *)(a2 + 8);
      if (v5 >= 0x1B) {
        sub_101A66660();
      }
      a1[5] |= 1u;
      a1[2] = v5;
      int v4 = *(_DWORD *)(a2 + 20);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 12);
      if (v6 >= 4) {
        sub_101A66634();
      }
      a1[5] |= 2u;
      a1[3] = v6;
    }
  }
}

void sub_100F2711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F27134(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1023053E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F27154()
{
}

uint64_t sub_100F271A0(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(void *)(result + 8) = 0;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100F271B4(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v16 = 0;
      unsigned int v10 = (char *)*((void *)this + 1);
      if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
        if (!result) {
          return result;
        }
        unsigned int v11 = v16;
      }
      else
      {
        unsigned int v11 = *v10;
        *((void *)this + 1) = v10 + 1;
      }
      if (v11 <= 0x1A)
      {
        a1[5] |= 1u;
        a1[2] = v11;
      }
      int v12 = (unsigned char *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        unint64_t v9 = v12 + 1;
        *((void *)this + 1) = v9;
LABEL_25:
        unsigned int v15 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
          if (!result) {
            return result;
          }
          unsigned int v13 = v15;
        }
        else
        {
          unsigned int v13 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        if (v13 <= 3)
        {
          a1[5] |= 2u;
          a1[3] = v13;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        unint64_t v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_25;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_15:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_100F2736C(_DWORD *a1, void *lpsrc)
{
  sub_100F27058(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F273F4()
{
  return 1;
}

void *sub_100F273FC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.Silo");
}

void sub_100F2740C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v48);
  }
  int v4 = *(_DWORD *)(a2 + 184);
  if (!(_BYTE)v4) {
    goto LABEL_50;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 184) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AF70 + 8);
    }
    sub_1003DE314(v5, v6);
    int v4 = *(_DWORD *)(a2 + 184);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 176);
    if (v7 >= 5) {
      sub_101A66584();
    }
    *(_DWORD *)(a1 + 184) |= 2u;
    *(_DWORD *)(a1 + 176) = v7;
    int v4 = *(_DWORD *)(a2 + 184);
  }
  if ((v4 & 4) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 4u;
    unint64_t v8 = *(_DWORD **)(a1 + 16);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248AF70 + 16);
    }
    sub_100F27058(v8, v9);
    int v4 = *(_DWORD *)(a2 + 184);
    if ((v4 & 8) == 0)
    {
LABEL_15:
      if ((v4 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_15;
  }
  *(_DWORD *)(a1 + 184) |= 8u;
  unsigned int v10 = *(_DWORD **)(a1 + 24);
  if (!v10) {
    operator new();
  }
  uint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248AF70 + 24);
  }
  sub_100F27058(v10, v11);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_35:
    *(_DWORD *)(a1 + 184) |= 0x20u;
    uint64_t v14 = *(void *)(a1 + 40);
    if (!v14) {
      operator new();
    }
    uint64_t v15 = *(void *)(a2 + 40);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_10248AF70 + 40);
    }
    sub_100F17E9C(v14, v15);
    int v4 = *(_DWORD *)(a2 + 184);
    if ((v4 & 0x40) == 0)
    {
LABEL_18:
      if ((v4 & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_45;
    }
    goto LABEL_40;
  }
LABEL_30:
  *(_DWORD *)(a1 + 184) |= 0x10u;
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    operator new();
  }
  uint64_t v13 = *(void *)(a2 + 32);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248AF70 + 32);
  }
  sub_100F16A7C(v12, v13);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x20) != 0) {
    goto LABEL_35;
  }
LABEL_17:
  if ((v4 & 0x40) == 0) {
    goto LABEL_18;
  }
LABEL_40:
  *(_DWORD *)(a1 + 184) |= 0x40u;
  uint64_t v16 = *(void *)(a1 + 48);
  if (!v16) {
    operator new();
  }
  uint64_t v17 = *(void *)(a2 + 48);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248AF70 + 48);
  }
  sub_100F18A4C(v16, v17);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x80) != 0)
  {
LABEL_45:
    *(_DWORD *)(a1 + 184) |= 0x80u;
    uint64_t v18 = *(void *)(a1 + 56);
    if (!v18) {
      operator new();
    }
    uint64_t v19 = *(void *)(a2 + 56);
    if (!v19) {
      uint64_t v19 = *(void *)(qword_10248AF70 + 56);
    }
    sub_100F19ECC(v18, v19);
    int v4 = *(_DWORD *)(a2 + 184);
  }
LABEL_50:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_100;
  }
  if ((v4 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 0x100u;
    uint64_t v20 = *(void *)(a1 + 64);
    if (!v20) {
      operator new();
    }
    uint64_t v21 = *(void *)(a2 + 64);
    if (!v21) {
      uint64_t v21 = *(void *)(qword_10248AF70 + 64);
    }
    sub_100F1AA7C(v20, v21);
    int v4 = *(_DWORD *)(a2 + 184);
    if ((v4 & 0x200) == 0)
    {
LABEL_53:
      if ((v4 & 0x400) == 0) {
        goto LABEL_54;
      }
      goto LABEL_70;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 184) |= 0x200u;
  uint64_t v22 = *(void *)(a1 + 72);
  if (!v22) {
    operator new();
  }
  uint64_t v23 = *(void *)(a2 + 72);
  if (!v23) {
    uint64_t v23 = *(void *)(qword_10248AF70 + 72);
  }
  sub_100F1C53C(v22, v23);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_54:
    if ((v4 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_75;
  }
LABEL_70:
  *(_DWORD *)(a1 + 184) |= 0x400u;
  uint64_t v24 = *(void *)(a1 + 80);
  if (!v24) {
    operator new();
  }
  uint64_t v25 = *(void *)(a2 + 80);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_10248AF70 + 80);
  }
  sub_100F1D05C(v24, v25);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_55:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_80;
  }
LABEL_75:
  *(_DWORD *)(a1 + 184) |= 0x800u;
  uint64_t v26 = *(void *)(a1 + 88);
  if (!v26) {
    operator new();
  }
  uint64_t v27 = *(void *)(a2 + 88);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_10248AF70 + 88);
  }
  sub_100F1DD38(v26, v27);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_56:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_85;
  }
LABEL_80:
  *(_DWORD *)(a1 + 184) |= 0x1000u;
  uint64_t v28 = *(void *)(a1 + 96);
  if (!v28) {
    operator new();
  }
  uint64_t v29 = *(void *)(a2 + 96);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_10248AF70 + 96);
  }
  sub_100F1EA48(v28, v29);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_57:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_90;
  }
LABEL_85:
  *(_DWORD *)(a1 + 184) |= 0x2000u;
  uint64_t v30 = *(void *)(a1 + 104);
  if (!v30) {
    operator new();
  }
  uint64_t v31 = *(void *)(a2 + 104);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_10248AF70 + 104);
  }
  sub_100F1F758(v30, v31);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_58:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_95;
  }
LABEL_90:
  *(_DWORD *)(a1 + 184) |= 0x4000u;
  int v32 = *(_DWORD **)(a1 + 112);
  if (!v32) {
    operator new();
  }
  uint64_t v33 = *(void *)(a2 + 112);
  if (!v33) {
    uint64_t v33 = *(void *)(qword_10248AF70 + 112);
  }
  sub_100F1FF10(v32, v33);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x8000) != 0)
  {
LABEL_95:
    *(_DWORD *)(a1 + 184) |= 0x8000u;
    uint64_t v34 = *(void *)(a1 + 120);
    if (!v34) {
      operator new();
    }
    uint64_t v35 = *(void *)(a2 + 120);
    if (!v35) {
      uint64_t v35 = *(void *)(qword_10248AF70 + 120);
    }
    sub_100F207A8(v34, v35);
    int v4 = *(_DWORD *)(a2 + 184);
  }
LABEL_100:
  if ((v4 & 0xFF0000) == 0) {
    return;
  }
  if ((v4 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 0x10000u;
    uint64_t v36 = *(void *)(a1 + 128);
    if (!v36) {
      operator new();
    }
    uint64_t v37 = *(void *)(a2 + 128);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_10248AF70 + 128);
    }
    sub_100F22C18(v36, v37);
    int v4 = *(_DWORD *)(a2 + 184);
    if ((v4 & 0x20000) == 0)
    {
LABEL_103:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_104;
      }
      goto LABEL_118;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_103;
  }
  *(_DWORD *)(a1 + 184) |= 0x20000u;
  uint64_t v38 = *(void *)(a1 + 136);
  if (!v38) {
    operator new();
  }
  uint64_t v39 = *(void *)(a2 + 136);
  if (!v39) {
    uint64_t v39 = *(void *)(qword_10248AF70 + 136);
  }
  sub_100F23810(v38, v39);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_104:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_123;
  }
LABEL_118:
  *(_DWORD *)(a1 + 184) |= 0x40000u;
  uint64_t v40 = *(void *)(a1 + 144);
  if (!v40) {
    operator new();
  }
  uint64_t v41 = *(void *)(a2 + 144);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_10248AF70 + 144);
  }
  sub_100F242C4(v40, v41);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_105:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_106;
    }
    goto LABEL_128;
  }
LABEL_123:
  *(_DWORD *)(a1 + 184) |= 0x80000u;
  uint64_t v42 = *(void *)(a1 + 152);
  if (!v42) {
    operator new();
  }
  uint64_t v43 = *(void *)(a2 + 152);
  if (!v43) {
    uint64_t v43 = *(void *)(qword_10248AF70 + 152);
  }
  sub_100F25044(v42, v43);
  int v4 = *(_DWORD *)(a2 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_106:
    if ((v4 & 0x200000) == 0) {
      return;
    }
    goto LABEL_133;
  }
LABEL_128:
  *(_DWORD *)(a1 + 184) |= 0x100000u;
  uint64_t v44 = *(void *)(a1 + 160);
  if (!v44) {
    operator new();
  }
  uint64_t v45 = *(void *)(a2 + 160);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_10248AF70 + 160);
  }
  sub_100F25E00(v44, v45);
  if ((*(_DWORD *)(a2 + 184) & 0x200000) != 0)
  {
LABEL_133:
    *(_DWORD *)(a1 + 184) |= 0x200000u;
    uint64_t v46 = *(void *)(a1 + 168);
    if (!v46) {
      operator new();
    }
    uint64_t v47 = *(void *)(a2 + 168);
    if (!v47) {
      uint64_t v47 = *(void *)(qword_10248AF70 + 168);
    }
    sub_100F268A0(v46, v47);
  }
}

void sub_100F27E38()
{
}

void sub_100F27E70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102305460;
  sub_100168360(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_100F27EC4(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248AF70;
  if (!qword_10248AF70)
  {
    sub_100F12A20(0, a2, a3, a4);
    return qword_10248AF70;
  }
  return result;
}

void sub_100F27EF4()
{
}

uint64_t sub_100F27F70(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 184);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1003DE4A4(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    *(_DWORD *)(v1 + 176) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 24);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 20)) {
          *(void *)(v4 + 8) = 0;
        }
        *(_DWORD *)(v4 + 20) = 0;
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t result = *(void *)(v1 + 32);
      if (result)
      {
        uint64_t result = sub_100F16C2C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      uint64_t result = *(void *)(v1 + 40);
      if (result)
      {
        uint64_t result = sub_100F18104(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      uint64_t result = *(void *)(v1 + 48);
      if (result)
      {
        uint64_t result = sub_100F18CA0(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 56);
      if (result)
      {
        uint64_t result = sub_100F1A134(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t result = *(void *)(v1 + 64);
      if (result)
      {
        uint64_t result = sub_100F1ACD0(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      uint64_t result = *(void *)(v1 + 72);
      if (result)
      {
        uint64_t result = sub_100F1C794(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x400) != 0)
    {
      uint64_t result = *(void *)(v1 + 80);
      if (result)
      {
        uint64_t result = sub_100F1D2B4(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x800) != 0)
    {
      uint64_t result = *(void *)(v1 + 88);
      if (result)
      {
        uint64_t result = sub_100F1DF8C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x1000) != 0)
    {
      uint64_t result = *(void *)(v1 + 96);
      if (result)
      {
        uint64_t result = sub_100F1EC9C(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x2000) != 0)
    {
      uint64_t result = *(void *)(v1 + 104);
      if (result)
      {
        uint64_t result = sub_100F1F9AC(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x4000) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 112);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 20)) {
          *(void *)(v5 + 8) = 0;
        }
        *(_DWORD *)(v5 + 20) = 0;
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x8000) != 0)
    {
      uint64_t result = *(void *)(v1 + 120);
      if (result)
      {
        uint64_t result = sub_100F20940(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      uint64_t result = *(void *)(v1 + 128);
      if (result)
      {
        uint64_t result = sub_100F22EA4(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x20000) != 0)
    {
      uint64_t result = *(void *)(v1 + 136);
      if (result)
      {
        uint64_t result = sub_100F239A0(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x40000) != 0)
    {
      uint64_t result = *(void *)(v1 + 144);
      if (result)
      {
        uint64_t result = sub_100F24518(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x80000) != 0)
    {
      uint64_t result = *(void *)(v1 + 152);
      if (result)
      {
        uint64_t result = sub_100F252A0(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x100000) != 0)
    {
      uint64_t result = *(void *)(v1 + 160);
      if (result)
      {
        uint64_t result = sub_100F25F90(result);
        int v2 = *(_DWORD *)(v1 + 184);
      }
    }
    if ((v2 & 0x200000) != 0)
    {
      uint64_t result = *(void *)(v1 + 168);
      if (result) {
        uint64_t result = sub_100F26AF4(result);
      }
    }
  }
  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

uint64_t sub_100F28178(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_55;
        }
        *(_DWORD *)(a1 + 184) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v202 = 0;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v12 = *((_DWORD *)this + 14);
        int v13 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v12 + 1;
        if (v12 >= v13) {
          return 0;
        }
        int v14 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_1003DE4BC(v8, this, v15) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v14);
        int v16 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v16, 1);
        int v18 = v16 - 1;
        if (v18 < 0 == v17) {
          *((_DWORD *)this + 14) = v18;
        }
        uint64_t v19 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v19 >= v10 || *v19 != 16) {
          continue;
        }
        uint64_t v11 = v19 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_67;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_55;
        }
        uint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_67:
        unsigned int v202 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202);
          if (!result) {
            return result;
          }
          unsigned int v20 = v202;
        }
        else
        {
          unsigned int v20 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (v20 <= 4)
        {
          *(_DWORD *)(a1 + 184) |= 2u;
          *(_DWORD *)(a1 + 176) = v20;
        }
        uint64_t v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 != 26) {
          continue;
        }
        *((void *)this + 1) = v22 + 1;
LABEL_77:
        *(_DWORD *)(a1 + 184) |= 4u;
        uint64_t v23 = *(_DWORD **)(a1 + 16);
        if (!v23) {
          operator new();
        }
        unsigned int v202 = 0;
        uint64_t v24 = (char *)*((void *)this + 1);
        if ((unint64_t)v24 >= *((void *)this + 2) || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v24;
          *((void *)this + 1) = v24 + 1;
        }
        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26) {
          return 0;
        }
        int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F271B4(v23, this, v28) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        int v29 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v29, 1);
        int v30 = v29 - 1;
        if (v30 < 0 == v17) {
          *((_DWORD *)this + 14) = v30;
        }
        uint64_t v31 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v31 >= *((void *)this + 2) || *v31 != 34) {
          continue;
        }
        *((void *)this + 1) = v31 + 1;
LABEL_91:
        *(_DWORD *)(a1 + 184) |= 8u;
        int v32 = *(_DWORD **)(a1 + 24);
        if (!v32) {
          operator new();
        }
        unsigned int v202 = 0;
        uint64_t v33 = (char *)*((void *)this + 1);
        if ((unint64_t)v33 >= *((void *)this + 2) || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v33;
          *((void *)this + 1) = v33 + 1;
        }
        int v34 = *((_DWORD *)this + 14);
        int v35 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v34 + 1;
        if (v34 >= v35) {
          return 0;
        }
        int v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F271B4(v32, this, v37) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
        int v38 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v38, 1);
        int v39 = v38 - 1;
        if (v39 < 0 == v17) {
          *((_DWORD *)this + 14) = v39;
        }
        uint64_t v40 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v40 >= *((void *)this + 2) || *v40 != 42) {
          continue;
        }
        *((void *)this + 1) = v40 + 1;
LABEL_105:
        *(_DWORD *)(a1 + 184) |= 0x10u;
        uint64_t v41 = *(void *)(a1 + 32);
        if (!v41) {
          operator new();
        }
        unsigned int v202 = 0;
        uint64_t v42 = (char *)*((void *)this + 1);
        if ((unint64_t)v42 >= *((void *)this + 2) || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v42;
          *((void *)this + 1) = v42 + 1;
        }
        int v43 = *((_DWORD *)this + 14);
        int v44 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v43 + 1;
        if (v43 >= v44) {
          return 0;
        }
        int v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F16C6C(v41, this, v46) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
        int v47 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v47, 1);
        int v48 = v47 - 1;
        if (v48 < 0 == v17) {
          *((_DWORD *)this + 14) = v48;
        }
        int v49 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v49 >= *((void *)this + 2) || *v49 != 50) {
          continue;
        }
        *((void *)this + 1) = v49 + 1;
LABEL_119:
        *(_DWORD *)(a1 + 184) |= 0x20u;
        uint64_t v50 = *(void *)(a1 + 40);
        if (!v50) {
          operator new();
        }
        unsigned int v202 = 0;
        unsigned int v51 = (char *)*((void *)this + 1);
        if ((unint64_t)v51 >= *((void *)this + 2) || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v51;
          *((void *)this + 1) = v51 + 1;
        }
        int v52 = *((_DWORD *)this + 14);
        int v53 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v52 + 1;
        if (v52 >= v53) {
          return 0;
        }
        int v54 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F18144(v50, this, v55) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v54);
        int v56 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v56, 1);
        int v57 = v56 - 1;
        if (v57 < 0 == v17) {
          *((_DWORD *)this + 14) = v57;
        }
        uint64_t v58 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v58 >= *((void *)this + 2) || *v58 != 58) {
          continue;
        }
        *((void *)this + 1) = v58 + 1;
LABEL_133:
        *(_DWORD *)(a1 + 184) |= 0x40u;
        uint64_t v59 = *(void *)(a1 + 48);
        if (!v59) {
          operator new();
        }
        unsigned int v202 = 0;
        int v60 = (char *)*((void *)this + 1);
        if ((unint64_t)v60 >= *((void *)this + 2) || *v60 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v60;
          *((void *)this + 1) = v60 + 1;
        }
        int v61 = *((_DWORD *)this + 14);
        int v62 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v61 + 1;
        if (v61 >= v62) {
          return 0;
        }
        int v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F18CD0(v59, this, v64) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
        int v65 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v65, 1);
        int v66 = v65 - 1;
        if (v66 < 0 == v17) {
          *((_DWORD *)this + 14) = v66;
        }
        uint64_t v67 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v67 >= *((void *)this + 2) || *v67 != 66) {
          continue;
        }
        *((void *)this + 1) = v67 + 1;
LABEL_147:
        *(_DWORD *)(a1 + 184) |= 0x80u;
        uint64_t v68 = *(void *)(a1 + 56);
        if (!v68) {
          operator new();
        }
        unsigned int v202 = 0;
        int v69 = (char *)*((void *)this + 1);
        if ((unint64_t)v69 >= *((void *)this + 2) || *v69 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v69;
          *((void *)this + 1) = v69 + 1;
        }
        int v70 = *((_DWORD *)this + 14);
        int v71 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v70 + 1;
        if (v70 >= v71) {
          return 0;
        }
        int v72 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F1A174(v68, this, v73) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v72);
        int v74 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v74, 1);
        int v75 = v74 - 1;
        if (v75 < 0 == v17) {
          *((_DWORD *)this + 14) = v75;
        }
        v76 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v76 >= *((void *)this + 2) || *v76 != 74) {
          continue;
        }
        *((void *)this + 1) = v76 + 1;
LABEL_161:
        *(_DWORD *)(a1 + 184) |= 0x100u;
        uint64_t v77 = *(void *)(a1 + 64);
        if (!v77) {
          operator new();
        }
        unsigned int v202 = 0;
        unint64_t v78 = (char *)*((void *)this + 1);
        if ((unint64_t)v78 >= *((void *)this + 2) || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v78;
          *((void *)this + 1) = v78 + 1;
        }
        int v79 = *((_DWORD *)this + 14);
        int v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80) {
          return 0;
        }
        int v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F1AD00(v77, this, v82) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        int v83 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v83, 1);
        int v84 = v83 - 1;
        if (v84 < 0 == v17) {
          *((_DWORD *)this + 14) = v84;
        }
        v85 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v85 >= *((void *)this + 2) || *v85 != 82) {
          continue;
        }
        *((void *)this + 1) = v85 + 1;
LABEL_175:
        *(_DWORD *)(a1 + 184) |= 0x200u;
        uint64_t v86 = *(void *)(a1 + 72);
        if (!v86) {
          operator new();
        }
        unsigned int v202 = 0;
        v87 = (char *)*((void *)this + 1);
        if ((unint64_t)v87 >= *((void *)this + 2) || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v87;
          *((void *)this + 1) = v87 + 1;
        }
        int v88 = *((_DWORD *)this + 14);
        int v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89) {
          return 0;
        }
        int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F1C7D4(v86, this, v91) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        int v92 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v92, 1);
        int v93 = v92 - 1;
        if (v93 < 0 == v17) {
          *((_DWORD *)this + 14) = v93;
        }
        v94 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v94 >= *((void *)this + 2) || *v94 != 90) {
          continue;
        }
        *((void *)this + 1) = v94 + 1;
LABEL_189:
        *(_DWORD *)(a1 + 184) |= 0x400u;
        uint64_t v95 = *(void *)(a1 + 80);
        if (!v95) {
          operator new();
        }
        unsigned int v202 = 0;
        v96 = (char *)*((void *)this + 1);
        if ((unint64_t)v96 >= *((void *)this + 2) || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v96;
          *((void *)this + 1) = v96 + 1;
        }
        int v97 = *((_DWORD *)this + 14);
        int v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98) {
          return 0;
        }
        int v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F1D2E4(v95, this, v100) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        int v101 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v101, 1);
        int v102 = v101 - 1;
        if (v102 < 0 == v17) {
          *((_DWORD *)this + 14) = v102;
        }
        v103 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v103 >= *((void *)this + 2) || *v103 != 98) {
          continue;
        }
        *((void *)this + 1) = v103 + 1;
LABEL_203:
        *(_DWORD *)(a1 + 184) |= 0x800u;
        uint64_t v104 = *(void *)(a1 + 88);
        if (!v104) {
          operator new();
        }
        unsigned int v202 = 0;
        v105 = (char *)*((void *)this + 1);
        if ((unint64_t)v105 >= *((void *)this + 2) || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v105;
          *((void *)this + 1) = v105 + 1;
        }
        int v106 = *((_DWORD *)this + 14);
        int v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107) {
          return 0;
        }
        int v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F1DFE0(v104, this, v109) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        int v110 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v110, 1);
        int v111 = v110 - 1;
        if (v111 < 0 == v17) {
          *((_DWORD *)this + 14) = v111;
        }
        v112 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v112 >= *((void *)this + 2) || *v112 != 106) {
          continue;
        }
        *((void *)this + 1) = v112 + 1;
LABEL_217:
        *(_DWORD *)(a1 + 184) |= 0x1000u;
        uint64_t v113 = *(void *)(a1 + 96);
        if (!v113) {
          operator new();
        }
        unsigned int v202 = 0;
        v114 = (char *)*((void *)this + 1);
        if ((unint64_t)v114 >= *((void *)this + 2) || *v114 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v114;
          *((void *)this + 1) = v114 + 1;
        }
        int v115 = *((_DWORD *)this + 14);
        int v116 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v115 + 1;
        if (v115 >= v116) {
          return 0;
        }
        int v117 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F1ECF0(v113, this, v118) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v117);
        int v119 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v119, 1);
        int v120 = v119 - 1;
        if (v120 < 0 == v17) {
          *((_DWORD *)this + 14) = v120;
        }
        v121 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v121 >= *((void *)this + 2) || *v121 != 114) {
          continue;
        }
        *((void *)this + 1) = v121 + 1;
LABEL_231:
        *(_DWORD *)(a1 + 184) |= 0x2000u;
        uint64_t v122 = *(void *)(a1 + 104);
        if (!v122) {
          operator new();
        }
        unsigned int v202 = 0;
        v123 = (char *)*((void *)this + 1);
        if ((unint64_t)v123 >= *((void *)this + 2) || *v123 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v123;
          *((void *)this + 1) = v123 + 1;
        }
        int v124 = *((_DWORD *)this + 14);
        int v125 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v124 + 1;
        if (v124 >= v125) {
          return 0;
        }
        int v126 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F1FA00(v122, this, v127) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v126);
        int v128 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v128, 1);
        int v129 = v128 - 1;
        if (v129 < 0 == v17) {
          *((_DWORD *)this + 14) = v129;
        }
        v130 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v130 >= *((void *)this + 2) || *v130 != 122) {
          continue;
        }
        *((void *)this + 1) = v130 + 1;
LABEL_245:
        *(_DWORD *)(a1 + 184) |= 0x4000u;
        v131 = *(_DWORD **)(a1 + 112);
        if (!v131) {
          operator new();
        }
        unsigned int v202 = 0;
        v132 = (char *)*((void *)this + 1);
        if ((unint64_t)v132 >= *((void *)this + 2) || *v132 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v132;
          *((void *)this + 1) = v132 + 1;
        }
        int v133 = *((_DWORD *)this + 14);
        int v134 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v133 + 1;
        if (v133 >= v134) {
          return 0;
        }
        int v135 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F200B4(v131, this, v136) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v135);
        int v137 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v137, 1);
        int v138 = v137 - 1;
        if (v138 < 0 == v17) {
          *((_DWORD *)this + 14) = v138;
        }
        v139 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v139 <= 1 || *v139 != 130 || v139[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v139 + 2;
LABEL_260:
        *(_DWORD *)(a1 + 184) |= 0x8000u;
        uint64_t v140 = *(void *)(a1 + 120);
        if (!v140) {
          operator new();
        }
        unsigned int v202 = 0;
        v141 = (char *)*((void *)this + 1);
        if ((unint64_t)v141 >= *((void *)this + 2) || *v141 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v141;
          *((void *)this + 1) = v141 + 1;
        }
        int v142 = *((_DWORD *)this + 14);
        int v143 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v142 + 1;
        if (v142 >= v143) {
          return 0;
        }
        int v144 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F209A0(v140, this, v145) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v144);
        int v146 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v146, 1);
        int v147 = v146 - 1;
        if (v147 < 0 == v17) {
          *((_DWORD *)this + 14) = v147;
        }
        v148 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v148 <= 1 || *v148 != 138 || v148[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v148 + 2;
LABEL_275:
        *(_DWORD *)(a1 + 184) |= 0x10000u;
        uint64_t v149 = *(void *)(a1 + 128);
        if (!v149) {
          operator new();
        }
        unsigned int v202 = 0;
        v150 = (char *)*((void *)this + 1);
        if ((unint64_t)v150 >= *((void *)this + 2) || *v150 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v150;
          *((void *)this + 1) = v150 + 1;
        }
        int v151 = *((_DWORD *)this + 14);
        int v152 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v151 + 1;
        if (v151 >= v152) {
          return 0;
        }
        int v153 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F22F28(v149, this, v154) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v153);
        int v155 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v155, 1);
        int v156 = v155 - 1;
        if (v156 < 0 == v17) {
          *((_DWORD *)this + 14) = v156;
        }
        v157 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v157 <= 1 || *v157 != 146 || v157[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v157 + 2;
LABEL_290:
        *(_DWORD *)(a1 + 184) |= 0x20000u;
        uint64_t v158 = *(void *)(a1 + 136);
        if (!v158) {
          operator new();
        }
        unsigned int v202 = 0;
        v159 = (char *)*((void *)this + 1);
        if ((unint64_t)v159 >= *((void *)this + 2) || *v159 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v159;
          *((void *)this + 1) = v159 + 1;
        }
        int v160 = *((_DWORD *)this + 14);
        int v161 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v160 + 1;
        if (v160 >= v161) {
          return 0;
        }
        int v162 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F239F4(v158, this, v163) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v162);
        int v164 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v164, 1);
        int v165 = v164 - 1;
        if (v165 < 0 == v17) {
          *((_DWORD *)this + 14) = v165;
        }
        v166 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v166 <= 1 || *v166 != 154 || v166[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v166 + 2;
LABEL_305:
        *(_DWORD *)(a1 + 184) |= 0x40000u;
        uint64_t v167 = *(void *)(a1 + 144);
        if (!v167) {
          operator new();
        }
        unsigned int v202 = 0;
        v168 = (char *)*((void *)this + 1);
        if ((unint64_t)v168 >= *((void *)this + 2) || *v168 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v168;
          *((void *)this + 1) = v168 + 1;
        }
        int v169 = *((_DWORD *)this + 14);
        int v170 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v169 + 1;
        if (v169 >= v170) {
          return 0;
        }
        int v171 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F2456C(v167, this, v172) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v171);
        int v173 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v173, 1);
        int v174 = v173 - 1;
        if (v174 < 0 == v17) {
          *((_DWORD *)this + 14) = v174;
        }
        v175 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v175 <= 1 || *v175 != 162 || v175[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v175 + 2;
LABEL_320:
        *(_DWORD *)(a1 + 184) |= 0x80000u;
        uint64_t v176 = *(void *)(a1 + 152);
        if (!v176) {
          operator new();
        }
        unsigned int v202 = 0;
        v177 = (char *)*((void *)this + 1);
        if ((unint64_t)v177 >= *((void *)this + 2) || *v177 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v177;
          *((void *)this + 1) = v177 + 1;
        }
        int v178 = *((_DWORD *)this + 14);
        int v179 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v178 + 1;
        if (v178 >= v179) {
          return 0;
        }
        int v180 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F252E8(v176, this, v181) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v180);
        int v182 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v182, 1);
        int v183 = v182 - 1;
        if (v183 < 0 == v17) {
          *((_DWORD *)this + 14) = v183;
        }
        v184 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v184 <= 1 || *v184 != 170 || v184[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v184 + 2;
LABEL_335:
        *(_DWORD *)(a1 + 184) |= 0x100000u;
        uint64_t v185 = *(void *)(a1 + 160);
        if (!v185) {
          operator new();
        }
        unsigned int v202 = 0;
        v186 = (char *)*((void *)this + 1);
        if ((unint64_t)v186 >= *((void *)this + 2) || *v186 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v186;
          *((void *)this + 1) = v186 + 1;
        }
        int v187 = *((_DWORD *)this + 14);
        int v188 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v187 + 1;
        if (v187 >= v188) {
          return 0;
        }
        int v189 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F25FD0(v185, this, v190) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v189);
        int v191 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v191, 1);
        int v192 = v191 - 1;
        if (v192 < 0 == v17) {
          *((_DWORD *)this + 14) = v192;
        }
        v193 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v193 <= 1 || *v193 != 178 || v193[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v193 + 2;
LABEL_350:
        *(_DWORD *)(a1 + 184) |= 0x200000u;
        uint64_t v194 = *(void *)(a1 + 168);
        if (!v194) {
          operator new();
        }
        unsigned int v202 = 0;
        v195 = (char *)*((void *)this + 1);
        if ((unint64_t)v195 >= *((void *)this + 2) || *v195 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v202))return 0; {
        }
          }
        else
        {
          unsigned int v202 = *v195;
          *((void *)this + 1) = v195 + 1;
        }
        int v196 = *((_DWORD *)this + 14);
        int v197 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v196 + 1;
        if (v196 >= v197) {
          return 0;
        }
        int v198 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v202);
        if (!sub_100F26B48(v194, this, v199) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v198);
        int v200 = *((_DWORD *)this + 14);
        BOOL v17 = __OFSUB__(v200, 1);
        int v201 = v200 - 1;
        if (v201 < 0 == v17) {
          *((_DWORD *)this + 14) = v201;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_77;
        }
        goto LABEL_55;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_91;
        }
        goto LABEL_55;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_105;
        }
        goto LABEL_55;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_119;
        }
        goto LABEL_55;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_133;
        }
        goto LABEL_55;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_147;
        }
        goto LABEL_55;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_161;
        }
        goto LABEL_55;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_175;
        }
        goto LABEL_55;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_189;
        }
        goto LABEL_55;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_203;
        }
        goto LABEL_55;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_217;
        }
        goto LABEL_55;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_231;
        }
        goto LABEL_55;
      case 0xFu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_245;
        }
        goto LABEL_55;
      case 0x10u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_260;
        }
        goto LABEL_55;
      case 0x11u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_275;
        }
        goto LABEL_55;
      case 0x12u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_290;
        }
        goto LABEL_55;
      case 0x13u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_305;
        }
        goto LABEL_55;
      case 0x14u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_320;
        }
        goto LABEL_55;
      case 0x15u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_335;
        }
        goto LABEL_55;
      case 0x16u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_55;
        }
        goto LABEL_350;
      default:
        int v7 = TagFallback & 7;
LABEL_55:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100F29A44()
{
}

void sub_100F29AC0(uint64_t a1, void *lpsrc)
{
  sub_100F2740C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F29B48()
{
  return 1;
}

void *sub_100F29B50@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.LocationControllerLogEntry");
}

uint64_t sub_100F29B64(uint64_t a1)
{
  int v2 = (_OWORD *)(a1 + 328);
  *(void *)a1 = dispatch_queue_create("com.apple.CLWorkoutSessionMetrics", 0);
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 26;
  *(_DWORD *)(a1 + 72) = -1;
  *(unsigned char *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 96) = xmmword_101D1C570;
  *(unsigned char *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(void *)(a1 + 232) = 26;
  *(void *)(a1 + 240) = -1;
  *(void *)(a1 + 248) = -1;
  *(_DWORD *)(a1 + 256) = -1;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(unsigned char *)(a1 + 324) = 0;
  *int v2 = xmmword_101D98500;
  v2[1] = xmmword_101D23030;
  *(unsigned char *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 3;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 521) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)((char *)v2 + 212) = xmmword_101D90440;
  *(_DWORD *)(a1 + 556) = -1;
  *(_WORD *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 562) = 0;
  *(void *)(a1 + 564) = 0x1FFFFFFFFLL;
  *(_WORD *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 578) = 0;
  *(void *)(a1 + 584) = 26;
  *(_DWORD *)(a1 + 592) = -1;
  return a1;
}

void sub_100F29C9C(id a1)
{
}

void sub_100F29CD4(uint64_t a1)
{
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_101D1C570;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)&v9[11] = 0;
  *(void *)&long long v10 = 26;
  *((void *)&v10 + 1) = -1;
  *(void *)uint64_t v11 = -1;
  *(_DWORD *)&v11[8] = -1;
  memset(&v11[12], 0, 65);
  LOBYTE(v12) = 0;
  DWORD1(v12) = 0;
  *((void *)&v12 + 1) = 3;
  v13[0] = 0;
  memset(v14, 0, 57);
  memset((char *)&v13[1] + 2, 0, 56);
  *(_OWORD *)&v14[60] = xmmword_101D90440;
  *(_DWORD *)&v14[76] = -1;
  *(_OWORD *)(a1 + 232) = v10;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v9[3];
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)&v11[16];
  *(_OWORD *)(a1 + 280) = *(_OWORD *)&v11[32];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 328) = xmmword_101D98500;
  *(_OWORD *)(a1 + 344) = xmmword_101D23030;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)&v11[48];
  *(_OWORD *)(a1 + 312) = *(_OWORD *)&v11[64];
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)((char *)v13 + 2);
  *(_OWORD *)(a1 + 360) = v12;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)((char *)&v13[2] + 2);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)((char *)&v13[4] + 2);
  uint64_t v7 = a1 + 456;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)v7);
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)&v13[6] + 2);
  *(void *)(v7 + 16) = 0;
  sub_1006AD6E0(a1 + 480, (uint64_t)v14);
  long long v8 = *(_OWORD *)&v14[64];
  *(_OWORD *)(a1 + 528) = *(_OWORD *)&v14[48];
  *(_OWORD *)(a1 + 544) = v8;
  sub_1004F6960(v14);
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(void *)(a1 + 160) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 140));
  *(void *)(a1 + 64) = 26;
  *(_DWORD *)(a1 + 72) = -1;
  *(_WORD *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 578) = 0;
  *(void *)(a1 + 584) = 26;
  *(_DWORD *)(a1 + 592) = -1;
}

void sub_100F29EF0(dispatch_queue_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  dispatch_assert_queue_not_V2(*a1);
  long long v8 = *a1;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100F29F90;
  v9[3] = &unk_1022C7AC0;
  void v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  char v10 = a4;
  dispatch_sync(v8, v9);
}

void sub_100F29F90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  switch(*(void *)(v1 + 16))
  {
    case 1:
      if (*(void *)(v1 + 112) == 33 && *(_DWORD *)(v3 + 136))
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102305908);
        }
        uint64_t v4 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v5 = *(void *)(a1 + 40);
          uint64_t v6 = v5 + 64;
          uint64_t v7 = *(void *)(v5 + 112);
          *(_DWORD *)buf = 136315394;
          uint64_t v45 = v6;
          __int16 v46 = 2048;
          uint64_t v47 = v7;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Workouttype is MultisportTransition and updating transition time for session : %s and activity %ld", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102305908);
          }
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::handleWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)_block_invoke", "%s\n", v42);
          if (v42 != (char *)buf) {
            free(v42);
          }
        }
        *(_DWORD *)(v3 + 528) = (int)(*(double *)(*(void *)(a1 + 40) + 24)
                                    - (double)*(int *)(v3 + 136)
                                    + (double)*(int *)(v3 + 528));
        *(_DWORD *)(v3 + 136) = 0;
      }
      return;
    case 7:
      *(void *)(v3 + 368) = *(void *)(v1 + 120);
      return;
    case 8:
      *(unsigned char *)(v3 + 9) = 1;
      return;
    case 0xALL:
      uint64_t v14 = *(void *)(a1 + 32);
      sub_100F29CD4(v14);
      return;
    case 0xBLL:
      *(unsigned char *)(v3 + 10) = 1;
      return;
    case 0xDLL:
      int v8 = *(unsigned __int8 *)(v3 + 9);
      int v9 = *(unsigned __int8 *)(v3 + 10);
      sub_100F29CD4(*(void *)(a1 + 32));
      uuid_unparse((const unsigned __int8 *)(*(void *)(a1 + 40) + 64), (char *)(v3 + 184));
      uint64_t v10 = *(void *)(a1 + 48);
      unint64_t v11 = *(void *)(v10 + 80);
      if (v11 >= 2)
      {
        long long v12 = (void *)(v10 + 40);
        *(unsigned char *)(v3 + 376) = 1;
        *(void *)(v3 + 432) = v11;
        *(_OWORD *)(v3 + 440) = *(_OWORD *)v10;
        std::string::operator=((std::string *)(v3 + 456), (const std::string *)(v10 + 16));
        sub_1006AD104((void *)(v3 + 480), v12);
        if (*(void *)(v3 + 432))
        {
          uint64_t v13 = 0;
          while (uuid_compare((const unsigned __int8 *)(*(void *)(*(void *)(v3 + 488)+ 8 * ((v13 + *(void *)(v3 + 512)) / 0x18uLL))+ 168 * ((v13 + *(void *)(v3 + 512)) % 0x18uLL)+ 16), (const unsigned __int8 *)(v3 + 440)))
          {
            if (*(void *)(v3 + 432) <= (unint64_t)++v13) {
              goto LABEL_45;
            }
          }
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102305908);
          }
          int v18 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Multisport prior Overview Id doesn't match main overviewId", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102305908);
            }
            int v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSessionMetrics::handleWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &, const CLMotionStateMediator_Type::WorkoutSessionPriors &, BOOL)_block_invoke", "%s\n", v43);
            if (v43 != (char *)buf) {
              free(v43);
            }
          }
        }
LABEL_45:
        *(_DWORD *)(v3 + 364) = *(unsigned char *)(a1 + 56) == 0;
      }
      *(unsigned char *)(v3 + 8) = 1;
      uint64_t v19 = *(void **)(a1 + 40);
      *(void *)(v3 + 232) = v19[14];
      *(_DWORD *)(v3 + 240) = v19[7];
      *(void *)(v3 + 16) = v19[3];
      sub_100F2A7AC((dispatch_queue_t *)v3);
      uint64_t v20 = *(void *)(a1 + 40);
      int v21 = *(unsigned __int8 *)(v20 + 144);
      *(unsigned char *)(v3 + 360) = v21;
      if (v21) {
        *(void *)(v3 + 416) = *(void *)(v20 + 216);
      }
      uuid_unparse((const unsigned __int8 *)(v20 + 80), (char *)(v3 + 377));
      if (v8) {
        int v22 = 2;
      }
      else {
        int v22 = 1;
      }
      if (v9) {
        int v22 = 3;
      }
      *(_DWORD *)(v3 + 260) = v22;
      sub_100F2A830((dispatch_queue_t *)v3);
      uint64_t v23 = *(void *)(a1 + 40);
      *(void *)(v3 + 16) = *(void *)(v23 + 24);
      *(void *)(v3 + 24) = 0xBFF0000000000000;
      uint64_t v24 = *(void *)(v23 + 112);
      *(void *)(v3 + 64) = v24;
      int v25 = *(_DWORD *)(v23 + 56);
      *(_DWORD *)(v3 + 72) = v25;
      uint64_t v26 = *(void *)(a1 + 48);
      int v27 = (void *)(v26 + 16);
      int v28 = *(unsigned __int8 *)(v26 + 39);
      if ((v28 & 0x80) != 0)
      {
        uint64_t v29 = *(void *)(v26 + 24);
        if (v29 != 17)
        {
          if (v29 != 27)
          {
LABEL_69:
            char v37 = 0;
            goto LABEL_80;
          }
          int v27 = (void *)*v27;
          goto LABEL_60;
        }
        int v27 = (void *)*v27;
      }
      else if (v28 != 17)
      {
        if (v28 != 27) {
          goto LABEL_69;
        }
LABEL_60:
        int v30 = (void *)*v27;
        uint64_t v31 = v27[1];
        uint64_t v32 = v27[2];
        uint64_t v33 = *(void *)((char *)v27 + 19);
        BOOL v36 = v30 == (void *)0x6C7070612E6D6F63
           && v31 == 0x6F69737365532E65
           && v32 == 0x72656B636172546ELL
           && v33 == 0x70704172656B6361;
        goto LABEL_77;
      }
      int v38 = (void *)*v27;
      uint64_t v39 = v27[1];
      int v40 = *((unsigned __int8 *)v27 + 16);
      BOOL v36 = v38 == (void *)0x6C7070612E6D6F63 && v39 == 0x73656E7469462E65 && v40 == 115;
LABEL_77:
      char v37 = v36;
LABEL_80:
      *(unsigned char *)(v3 + 576) = v37 ^ 1;
      *(void *)(v3 + 584) = v24;
      *(_DWORD *)(v3 + 592) = v25;
      return;
    case 0xELL:
      if (*(void *)(v1 + 112) == 33)
      {
        *(_DWORD *)(v3 + 136) = (int)*(double *)(v1 + 24);
        if (*(_DWORD *)(v3 + 364) == 1) {
          *(_DWORD *)(v3 + 364) = 2;
        }
      }
      int v15 = uuid_compare((const unsigned __int8 *)(v3 + 140), (const unsigned __int8 *)(v1 + 64));
      uint64_t v16 = *(void *)(a1 + 40);
      if (!v15 && *(void *)(v16 + 112) != 33)
      {
        ++*(_DWORD *)(v3 + 424);
        uuid_copy((unsigned __int8 *)(v3 + 140), (const unsigned __int8 *)(v16 + 64));
        uint64_t v16 = *(void *)(a1 + 40);
      }
      *(void *)(v3 + 64) = *(void *)(v16 + 112);
      *(_DWORD *)(v3 + 72) = *(void *)(v16 + 56);
      return;
    case 0xFLL:
      if (*(unsigned char *)(v3 + 8))
      {
        double v17 = *(double *)(v1 + 24);
        *(double *)(v3 + 24) = v17;
        *(_DWORD *)(v3 + 224) += (int)(v17 - *(double *)(v3 + 16));
        *(unsigned char *)(v3 + 8) = 0;
        if (sub_100817900())
        {
          sub_100103240();
          if (sub_10010145C()) {
            sub_100F2A8B4(v3);
          }
        }
        if (sub_100817900())
        {
          sub_100103240();
          if (sub_10016CCBC())
          {
            sub_100F2AB48(v3);
          }
        }
      }
      return;
    case 0x10:
      ++*(_DWORD *)(v3 + 428);
      *(void *)(v3 + 168) = *(void *)(v1 + 24);
      return;
    case 0x11:
      *(double *)(v3 + 176) = *(double *)(v3 + 176) + *(double *)(v1 + 24) - *(double *)(v3 + 168);
      return;
    default:
      return;
  }
}

void sub_100F2A7AC(dispatch_queue_t *a1)
{
  dispatch_assert_queue_V2(*a1);
  int v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F2B038;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100F2A830(dispatch_queue_t *a1)
{
  dispatch_assert_queue_V2(*a1);
  int v2 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F2B348;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_100F2A8B4(uint64_t a1)
{
  if (sub_100F2C104(a1))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102305908);
    }
    int v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v5 = a1 + 184;
      __int16 v6 = 2080;
      uint64_t v7 = a1 + 377;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102305908);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::sendEventToCoreAnalyticsWatch()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    AnalyticsSendEventLazy();
    AnalyticsSendEventLazy();
  }
  sub_100F29CD4(a1);
}

void sub_100F2AB48(uint64_t a1)
{
  if (sub_100F2C1F8(a1))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102305908);
    }
    int v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v5 = a1 + 184;
      __int16 v6 = 2080;
      uint64_t v7 = a1 + 377;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sending metrics to CoreAnalytics sessionId: %s overviewId: %s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102305908);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::sendEventToCoreAnalyticsPhone()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    AnalyticsSendEventLazy();
  }
  sub_100F29CD4(a1);
}

void sub_100F2AD84(dispatch_queue_t *a1, char a2)
{
  dispatch_assert_queue_not_V2(*a1);
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2AE10;
  v5[3] = &unk_1022BBA18;
  void v5[4] = a1;
  char v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100F2AE10(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    ++*(_DWORD *)(*(void *)(result + 32) + 252);
  }
  return result;
}

void sub_100F2AE2C(dispatch_queue_t *a1, float a2)
{
  dispatch_assert_queue_not_V2(*a1);
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2AEC0;
  v5[3] = &unk_1022B2410;
  void v5[4] = a1;
  float v6 = a2;
  dispatch_sync(v4, v5);
}

float sub_100F2AEC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 8))
  {
    float result = *(float *)(a1 + 40) + *(float *)(v1 + 32);
    *(float *)(v1 + 32) = result;
  }
  return result;
}

void sub_100F2AEE0(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*a1);
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2AF68;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

double sub_100F2AF68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  double result = *(double *)v2;
  *(_DWORD *)(v1 + 564) = (int)*(double *)v2;
  *(_DWORD *)(v1 + 568) = *(_DWORD *)(v2 + 8);
  return result;
}

void sub_100F2AF84(dispatch_queue_t *a1, char a2, char a3)
{
  dispatch_assert_queue_not_V2(*a1);
  float v6 = *a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100F2B020;
  v7[3] = &unk_1022E8A48;
  void v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  dispatch_sync(v6, v7);
}

uint64_t sub_100F2B020(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(unsigned char *)(v1 + 560) = *(unsigned char *)(result + 40);
  *(unsigned char *)(v1 + 562) = *(unsigned char *)(result + 41);
  return result;
}

void sub_100F2B038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFBooleanRef v2 = (const __CFBoolean *)CFPreferencesCopyValue(@"EnableAutoPause", @"com.apple.nanolifestyle.sessiontrackerapp", @"mobile", kCFPreferencesAnyHost);
  if (v2)
  {
    CFBooleanRef v3 = v2;
    *(unsigned char *)(v1 + 561) = CFBooleanGetValue(v2) != 0;
    CFRelease(v3);
  }
}

void sub_100F2B0B8(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*a1);
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2B140;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100F2B140(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 8))
  {
    switch(**(_DWORD **)(result + 40))
    {
      case 1:
        ++*(_DWORD *)(v1 + 268);
        goto LABEL_17;
      case 2:
        ++*(_DWORD *)(v1 + 272);
        goto LABEL_17;
      case 3:
        ++*(_DWORD *)(v1 + 276);
        goto LABEL_17;
      case 4:
        ++*(_DWORD *)(v1 + 280);
        goto LABEL_17;
      case 5:
        ++*(_DWORD *)(v1 + 284);
        goto LABEL_17;
      case 6:
        ++*(_DWORD *)(v1 + 288);
        goto LABEL_17;
      case 7:
        ++*(_DWORD *)(v1 + 292);
        goto LABEL_17;
      case 8:
        ++*(_DWORD *)(v1 + 296);
        goto LABEL_17;
      case 9:
        ++*(_DWORD *)(v1 + 300);
        goto LABEL_17;
      case 0xA:
        ++*(_DWORD *)(v1 + 304);
        goto LABEL_17;
      case 0xB:
        ++*(_DWORD *)(v1 + 308);
        goto LABEL_17;
      case 0xC:
        ++*(_DWORD *)(v1 + 312);
        goto LABEL_17;
      case 0xD:
        ++*(_DWORD *)(v1 + 316);
        goto LABEL_17;
      case 0xE:
        ++*(_DWORD *)(v1 + 320);
LABEL_17:
        ++*(_DWORD *)(v1 + 264);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_100F2B2A4(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*a1);
  uint64_t v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2B32C;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100F2B32C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 8)) {
    *(_DWORD *)(v1 + 336) = **(_DWORD **)(result + 40);
  }
  return result;
}

void sub_100F2B348(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 8))
  {
    __p = 0;
    double v17 = 0;
    uint64_t v18 = 0;
    uint64_t v2 = sub_1011E124C();
    sub_1011E1AFC(v2, &__p);
    CFBooleanRef v3 = (char *)__p;
    uint64_t v4 = v17;
    if (__p == v17) {
      goto LABEL_17;
    }
    uint64_t v5 = (char *)__p + 144;
    while (*(v5 - 36))
    {
      BOOL v6 = v5 == v17;
      v5 += 144;
      if (v6) {
        goto LABEL_15;
      }
    }
    uint64_t v7 = v5 - 144;
    if (v5 - 144 != v17)
    {
      while (v5 != v4)
      {
        if (v5[108])
        {
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v5;
          long long v8 = *((_OWORD *)v5 + 1);
          long long v9 = *((_OWORD *)v5 + 2);
          long long v10 = *((_OWORD *)v5 + 4);
          *((_OWORD *)v7 + 3) = *((_OWORD *)v5 + 3);
          *((_OWORD *)v7 + 4) = v10;
          *((_OWORD *)v7 + 1) = v8;
          *((_OWORD *)v7 + 2) = v9;
          long long v11 = *((_OWORD *)v5 + 5);
          long long v12 = *((_OWORD *)v5 + 6);
          long long v13 = *((_OWORD *)v5 + 8);
          *((_OWORD *)v7 + 7) = *((_OWORD *)v5 + 7);
          *((_OWORD *)v7 + 8) = v13;
          *((_OWORD *)v7 + 5) = v11;
          *((_OWORD *)v7 + 6) = v12;
          v7 += 144;
        }
        v5 += 144;
      }
    }
    if (v7 != v4)
    {
      uint64_t v4 = v7;
      double v17 = v7;
    }
LABEL_15:
    if (v3 == v4)
    {
LABEL_17:
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102305928);
      }
      uint64_t v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLWorkoutSessionMetrics, no VO2Max records found at start of workout session", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102305928);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSessionMetrics::queryVO2Max()_block_invoke", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    else
    {
      *(_DWORD *)(v1 + 332) = (int)*((double *)v4 - 14);
    }
    if (__p)
    {
      double v17 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_100F2B5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F2B5E4(dispatch_queue_t *a1, char a2, char a3)
{
  dispatch_assert_queue_not_V2(*a1);
  BOOL v6 = *a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100F2B680;
  v7[3] = &unk_1022E8A48;
  void v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  dispatch_sync(v6, v7);
}

CFAbsoluteTime sub_100F2B680(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFAbsoluteTime result = CFAbsoluteTimeGetCurrent();
  double v4 = *(double *)(v2 + 16);
  if (v4 < result)
  {
    if (*(unsigned char *)(v2 + 76))
    {
      double v5 = *(double *)(v2 + 88);
      if (v4 >= v5) {
        double v5 = *(double *)(v2 + 16);
      }
      *(double *)(v2 + 80) = *(double *)(v2 + 80) + result - v5;
    }
    *(unsigned char *)(v2 + 76) = *(unsigned char *)(a1 + 40);
    *(CFAbsoluteTime *)(v2 + 88) = result;
    if (*(unsigned char *)(a1 + 41))
    {
      *(unsigned char *)(v2 + 112) = 1;
      *(CFAbsoluteTime *)(v2 + 104) = result;
    }
    else if (!*(unsigned char *)(v2 + 112))
    {
      return result;
    }
    uint64_t v6 = 16;
    if (v4 < *(double *)(v2 + 104)) {
      uint64_t v6 = 104;
    }
    CFAbsoluteTime result = *(double *)(v2 + 96) + result - *(double *)(v2 + v6);
    *(CFAbsoluteTime *)(v2 + 96) = result;
  }
  return result;
}

double sub_100F2B724(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  double v3 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  if (*(unsigned char *)(a1 + 76))
  {
    double v4 = *(double *)(a1 + 88);
    if (v3 >= v4) {
      double v4 = *(double *)(a1 + 16);
    }
    double v5 = *(double *)(a1 + 80) + v2 - v4;
    *(double *)(a1 + 80) = v5;
  }
  else
  {
    double v5 = *(double *)(a1 + 80);
  }
  double result = v5 / (v2 - v3) * 100.0;
  *(_DWORD *)(a1 + 328) = (int)result;
  return result;
}

double sub_100F2B794(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  double v3 = *(double *)(a1 + 16);
  double v2 = *(double *)(a1 + 24);
  if (*(unsigned char *)(a1 + 112))
  {
    double v4 = *(double *)(a1 + 104);
    if (v3 >= v4) {
      double v4 = *(double *)(a1 + 16);
    }
    double v5 = *(double *)(a1 + 96) + v2 - v4;
    *(double *)(a1 + 96) = v5;
  }
  else
  {
    double v5 = *(double *)(a1 + 96);
  }
  double result = v5 / (v2 - v3) * 100.0;
  *(_DWORD *)(a1 + 540) = (int)result;
  return result;
}

void sub_100F2B804(dispatch_queue_t *a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*a1);
  double v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2B88C;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100F2B88C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 8)) {
    *(_DWORD *)(v1 + 344) = **(_DWORD **)(result + 40);
  }
  return result;
}

void sub_100F2B8A8(dispatch_queue_t *a1, int a2)
{
  dispatch_assert_queue_not_V2(*a1);
  double v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2B934;
  v5[3] = &unk_1022B2410;
  void v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100F2B934(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 8)) {
    *(void *)(v1 + 128) = *(unsigned int *)(result + 40);
  }
  return result;
}

void sub_100F2B94C(dispatch_queue_t *a1, int a2)
{
  dispatch_assert_queue_not_V2(*a1);
  double v4 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F2B9D8;
  v5[3] = &unk_1022B2410;
  void v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t sub_100F2B9D8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 8)) {
    *(void *)(v1 + 120) = *(unsigned int *)(result + 40);
  }
  return result;
}

void sub_100F2B9F0(NSObject **a1, long long *a2)
{
  double v3 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100F2BAB0;
  block[3] = &unk_1023058D8;
  block[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v6 = *((void *)a2 + 2);
  }
  int v7 = *((_DWORD *)a2 + 6);
  dispatch_async(v3, block);
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)__p);
  }
}

uint64_t sub_100F2BAB0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 8))
  {
    double v2 = (const void **)(result + 40);
    uint64_t v3 = *(unsigned __int8 *)(result + 63);
    size_t v4 = *(void *)(result + 48);
    if ((v3 & 0x80u) == 0) {
      uint64_t v5 = *(unsigned __int8 *)(result + 63);
    }
    else {
      uint64_t v5 = *(void *)(result + 48);
    }
    uint64_t v6 = qword_102482388;
    if (byte_102482397 >= 0) {
      uint64_t v6 = byte_102482397;
    }
    if (v5 == v6)
    {
      if (byte_102482397 >= 0) {
        int v7 = &qword_102482380;
      }
      else {
        int v7 = (uint64_t *)qword_102482380;
      }
      if ((v3 & 0x80) == 0)
      {
        if (*(unsigned char *)(result + 63))
        {
          char v8 = (unsigned __int8 *)(result + 40);
          uint64_t v9 = *(unsigned __int8 *)(result + 63);
          while (*v8 == *(unsigned __int8 *)v7)
          {
            ++v8;
            int v7 = (uint64_t *)((char *)v7 + 1);
            if (!--v9) {
              goto LABEL_29;
            }
          }
          goto LABEL_18;
        }
LABEL_29:
        *(unsigned char *)(v1 + 577) = 1;
        goto LABEL_32;
      }
      double result = memcmp(*v2, v7, v4);
      if (!result) {
        goto LABEL_29;
      }
    }
LABEL_18:
    uint64_t v10 = qword_1024823A8;
    if (byte_1024823B7 >= 0) {
      uint64_t v10 = byte_1024823B7;
    }
    if (v5 != v10) {
      goto LABEL_32;
    }
    if (byte_1024823B7 >= 0) {
      long long v11 = &qword_1024823A0;
    }
    else {
      long long v11 = (uint64_t *)qword_1024823A0;
    }
    if ((v3 & 0x80) == 0)
    {
      if (v3)
      {
        while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v11)
        {
          double v2 = (const void **)((char *)v2 + 1);
          long long v11 = (uint64_t *)((char *)v11 + 1);
          if (!--v3) {
            goto LABEL_31;
          }
        }
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    double result = memcmp(*v2, v11, v4);
    if (!result) {
LABEL_31:
    }
      *(unsigned char *)(v1 + 578) = 1;
LABEL_32:
    *(void *)(v1 + 584) = *(void *)(v1 + 64);
    *(_DWORD *)(v1 + 592) = *(_DWORD *)(v1 + 72);
  }
  return result;
}

void *sub_100F2BC14(uint64_t a1, uint64_t a2)
{
  double result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    double result = sub_1000DC48C(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    result[2] = *(void *)(a2 + 56);
    *(_OWORD *)double result = v5;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_100F2BC6C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

BOOL sub_100F2BC80(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 224);
  if (v2 <= 0)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102305908);
    }
    char v8 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(a1 + 224);
      *(_DWORD *)buf = 67109120;
      int v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Discarding workout CA event, invalid session duration %d", buf, 8u);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v10) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 == -1) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  double v3 = (double)v2;
  sub_101A1F180(buf, "WorkoutSessionMinSessionLengthSeconds", &qword_101D98538, 0);
  if (v17 <= v3)
  {
    int v11 = *(_DWORD *)(a1 + 36);
    if (v11 > 0)
    {
      *(_DWORD *)(a1 + 244) = llroundf((float)((float)*(int *)(a1 + 56) * 100.0) / (float)v11);
      *(_DWORD *)(a1 + 256) = llroundf((float)(*(float *)(a1 + 32) * 100.0) / (float)v11);
      return 1;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102305908);
    }
    long long v12 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      int v13 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)buf = 67109120;
      int v16 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Discarding workout CA event, invalid total epochs %d", buf, 8u);
    }
    BOOL v14 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v14) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 == -1)
    {
LABEL_27:
      int v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWorkoutSessionMetrics::processMetrics()", "%s\n");
LABEL_28:
      if (v7 != buf) {
        free(v7);
      }
      return 0;
    }
LABEL_31:
    dispatch_once(&qword_1024191C0, &stru_102305908);
    goto LABEL_27;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102305908);
  }
  size_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 224);
    *(_DWORD *)buf = 67109120;
    int v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Discarding workout CA event, duration %d does not meet kWorkoutSessionMinSessionLength", buf, 8u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102305908);
    }
    int v7 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutSessionMetrics::processMetrics()", "%s\n");
    goto LABEL_28;
  }
  return result;
}

BOOL sub_100F2C104(uint64_t a1)
{
  BOOL v2 = sub_100F2BC80(a1);
  if (v2)
  {
    *(_DWORD *)(a1 + 248) = llroundf((float)((float)*(int *)(a1 + 52) * 100.0) / (float)*(int *)(a1 + 36));
    *(unsigned char *)(a1 + 324) = *(unsigned char *)(a1 + 76);
    sub_100F2B724(a1);
    int v3 = *(_DWORD *)(a1 + 48);
    float v4 = (float)*(int *)(a1 + 36);
    int v5 = llroundf((float)((float)*(int *)(a1 + 40) * 100.0) / v4);
    *(_DWORD *)(a1 + 340) = llroundf((float)((float)*(int *)(a1 + 44) * 100.0) / v4);
    *(_DWORD *)(a1 + 348) = v5;
    *(_DWORD *)(a1 + 352) = llroundf((float)((float)v3 * 100.0) / v4);
    *(_DWORD *)(a1 + 356) = (*(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 120)) / 100;
    *(_DWORD *)(a1 + 556) = (int)*(double *)(a1 + 176);
  }
  return v2;
}

BOOL sub_100F2C1F8(uint64_t a1)
{
  BOOL v2 = sub_100F2BC80(a1);
  if (v2)
  {
    *(unsigned char *)(a1 + 536) = *(unsigned char *)(a1 + 112);
    sub_100F2B794(a1);
    *(_DWORD *)(a1 + 548) = llround(*(double *)(a1 + 160) * 100.0 / (float)((float)*(int *)(a1 + 36) * 2.56));
    *(_DWORD *)(a1 + 556) = (int)*(double *)(a1 + 176);
  }
  return v2;
}

uint64_t sub_100F2C278(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 552) = *a2;
  return result;
}

id sub_100F2C284(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSMutableDictionary dictionary];
  v10[0] = @"sessionId";
  v11[0] = +[NSString stringWithUTF8String:v1 + 184];
  v10[1] = @"sessionDuration";
  v11[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 224)];
  v10[2] = @"workoutType";
  void v11[2] = +[NSNumber numberWithInteger:*(void *)(v1 + 232)];
  v10[3] = @"otherWorkoutLabel";
  v11[3] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 240)];
  void v10[4] = @"pctSessionGPSSourcePhone";
  void v11[4] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 244)];
  v10[5] = @"pctSessionGPSSourceWatch";
  v11[5] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 248)];
  v10[6] = @"exerciseMinuteThreshold";
  v11[6] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 564)];
  v10[7] = @"exerciseMinutes";
  v11[7] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 252)];
  v10[8] = @"averageWorkoutIntensity";
  v11[8] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 256)];
  v10[9] = @"workoutStartType";
  v11[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 260)];
  v10[10] = @"autoStartEnabled";
  v11[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 560)];
  v10[11] = @"autoPauseEnabled";
  v11[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 561)];
  v10[12] = @"autoStopEnabled";
  v11[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 562)];
  v10[13] = @"numberOfStopAlerts";
  v11[13] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 264)];
  v10[14] = @"numStopAlertStopModel";
  v11[14] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 268)];
  v10[15] = @"numStopAlertSteps";
  v11[15] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 272)];
  v10[16] = @"numStopAlertOffWrist";
  v11[16] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 276)];
  v10[17] = @"numStopAlertOnCharger";
  v11[17] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 280)];
  v10[18] = @"numStopAlertHeartRate";
  v11[18] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 284)];
  v10[19] = @"numStopAlertTurns";
  v11[19] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 288)];
  v10[20] = @"numStopAlertTier2Classification";
  v11[20] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 292)];
  v10[21] = @"numStopAlertConnectedToVehicleBluetooth";
  v11[21] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 296)];
  v10[22] = @"numStopAlertVehicleSpeed";
  v11[22] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 300)];
  v10[23] = @"numStopAlertExitedGeoFence";
  v11[23] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 304)];
  v10[24] = @"numStopAlertVehicleSpeedArmConstrained";
  v11[24] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 308)];
  v10[25] = @"numStopAlertHRHeading";
  v11[25] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 312)];
  v10[26] = @"numStopAlertDelayedPreferenceChange";
  v11[26] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 316)];
  v10[27] = @"numStopAlertUnsupportedWorkoutType";
  v11[27] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 320)];
  v10[28] = @"sourceOfExerciseMinuteThreshold";
  v11[28] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 568)];
  v10[29] = @"companionAvailable";
  v11[29] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 324)];
  v10[30] = @"idsAvailability";
  v11[30] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 328)];
  v10[31] = @"hrSource";
  v11[31] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 336)];
  v10[32] = @"eVO2Max";
  v11[32] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 332)];
  v10[33] = @"loadCalibrationUtilization";
  v11[33] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 340)];
  v10[34] = @"PALEstimationStatus";
  v11[34] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 344)];
  v10[35] = @"pctPedestrianGPSAvailable";
  v11[35] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 348)];
  v10[36] = @"pctPedestrianCalibrated";
  v11[36] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 352)];
  v10[37] = @"workoutElevationError";
  v11[37] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 356)];
  v10[38] = @"totalManualPauseDuration";
  v11[38] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 556)];
  [v2 addEntriesFromDictionary:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 39)];
  uint64_t v3 = *(void *)(v1 + 520);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    if (v3 >= 10) {
      uint64_t v5 = 10;
    }
    else {
      uint64_t v5 = *(void *)(v1 + 520);
    }
    do
    {
      id v6 = +[CMWorkout workoutName:*(void *)(*(void *)(*(void *)(v1 + 488) + 8 * ((v4 + *(void *)(v1 + 512)) / 0x18uLL))+ 168 * ((v4 + *(void *)(v1 + 512)) % 0x18uLL)+ 48)];
      [v2 setObject:v6, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"multisportPrior%d", ++v4) forKey];
    }
    while (v5 != v4);
  }
  v8[0] = @"isMultisport";
  v9[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 376)];
  v8[1] = @"isFitnessPlus";
  v9[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 360)];
  v8[2] = @"detectedLocationType";
  v9[2] = +[NSNumber numberWithInteger:*(void *)(v1 + 368)];
  void v8[3] = @"sessionOverviewId";
  v9[3] = +[NSString stringWithUTF8String:v1 + 377];
  void v8[4] = @"multisportProgressionType";
  void v9[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 364)];
  v8[5] = @"workoutMediaType";
  v9[5] = +[NSNumber numberWithInteger:*(void *)(v1 + 416)];
  v8[6] = @"numWorkoutLegs";
  v9[6] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 424)];
  v8[7] = @"countManualPauses";
  void v9[7] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 428)];
  v8[8] = @"numMultisportPriors";
  v9[8] = +[NSNumber numberWithUnsignedLong:*(void *)(v1 + 432)];
  v8[9] = @"totalTransitionDuration";
  v9[9] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 528)];
  [v2 addEntriesFromDictionary:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 10)];
  return v2;
}

NSDictionary *sub_100F2C95C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = @"isHighFrequencyAccelActive";
  v4[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 577)];
  v3[1] = @"isHighFrequencyDeviceMotionActive";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 578)];
  _OWORD v3[2] = @"isMultisportWorkout";
  _OWORD v4[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 376)];
  v3[3] = @"isThirdPartyWorkout";
  v4[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 576)];
  v3[4] = @"workoutLabel";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 592)];
  v3[5] = @"workoutType";
  v4[5] = +[NSNumber numberWithInteger:*(void *)(v1 + 584)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

id sub_100F2CA74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSMutableDictionary dictionary];
  v4[0] = @"sessionId";
  v5[0] = +[NSString stringWithUTF8String:v1 + 184];
  v4[1] = @"sessionDuration";
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 224)];
  _OWORD v4[2] = @"workoutType";
  uint64_t v5[2] = +[NSNumber numberWithInteger:*(void *)(v1 + 232)];
  v4[3] = @"otherWorkoutLabel";
  v5[3] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 240)];
  void v4[4] = @"pctSessionGPSSourcePhone";
  void v5[4] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 244)];
  v4[5] = @"isFitnessPlus";
  void v5[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 360)];
  void v4[6] = @"detectedLocationType";
  void v5[6] = +[NSNumber numberWithInteger:*(void *)(v1 + 368)];
  v4[7] = @"countManualPauses";
  v5[7] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 428)];
  v4[8] = @"watchAvailable";
  v5[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v1 + 536)];
  v4[9] = @"pctWatchConnected";
  v5[9] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 540)];
  v4[10] = @"workoutMediaType";
  v5[10] = +[NSNumber numberWithInteger:*(void *)(v1 + 416)];
  v4[11] = @"steps";
  v5[11] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 544)];
  v4[12] = @"pctActiveTime";
  v5[12] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 548)];
  v4[13] = @"averageWorkoutIntensity";
  v5[13] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 256)];
  v4[14] = @"phoneFitnessMode";
  v5[14] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 552)];
  v4[15] = @"totalManualPauseDuration";
  v5[15] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 556)];
  [v2 addEntriesFromDictionary:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 16)];
  return v2;
}

void sub_100F2CCD0(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100F2CD00(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100F2CD30()
{
  sub_100134750(&qword_102482380, "Acc800Fp");
  dword_102482398 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, &qword_102482380, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024823A0, "DmFp");
  dword_1024823B8 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, &qword_1024823A0, (void *)&_mh_execute_header);
}

void sub_100F2CDD8(uint64_t a1)
{
}

void sub_100F2CE28(_Unwind_Exception *a1)
{
  sub_101039104(v1);
  _Unwind_Resume(a1);
}

void sub_100F2CE3C(float32x2_t *a1, long long *a2)
{
  long long v3 = a2[1];
  long long v19 = *a2;
  long long v20 = v3;
  long long v4 = a2[3];
  v21[0] = a2[2];
  v21[1] = v4;
  if (sub_10103A350())
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1023059B8);
    }
    uint64_t v5 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Device still has original rear camera. Using unit-specific calibration info", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023059B8);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    id v6 = (__int16 *)((unint64_t)&v19 | 0xA);
LABEL_27:
    sub_101039F24(a1, v6);
    return;
  }
  unsigned int v7 = sub_10103A470();
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1023059B8);
  }
  char v8 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Rear camera was replaced. VCM actuator ID is %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1023059B8);
    }
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (v7 == 4)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1023059B8);
    }
    BOOL v10 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023059B8);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    id v6 = (__int16 *)v21 + 7;
    goto LABEL_27;
  }
  if (v7 == 3)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1023059B8);
    }
    int v9 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023059B8);
      }
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    id v6 = (__int16 *)&v20 + 6;
    goto LABEL_27;
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1023059B8);
  }
  int v11 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Unrecongized VCM actuator. Not performing compensation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1023059B8);
    }
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100F2D4FC(_DWORD *a1)
{
  sub_101039104(a1);

  operator delete();
}

void sub_100F2D534(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100F2DDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F2E0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F2E6D4(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1023059D8);
  }
  id v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138477827;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2APNSHelper,receiveAPNSToken,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1023059D8);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEmergencyEED2APNSHelper connection:didReceiveToken:forTopic:identifier:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if ([*(id *)(a1 + 40) fAPNSTokenCallback])
  {
    long long v4 = (void (**)(id, void))[*(id *)(a1 + 40) fAPNSTokenCallback];
    v4[2](v4, *(void *)(a1 + 32));
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1023059D8);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2APNSHelper,receiveAPNSToken,nil fAPNSTokenCallback,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1023059D8);
      }
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEmergencyEED2APNSHelper connection:didReceiveToken:forTopic:identifier:]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100F2ED98(uint64_t a1)
{
  if ([*(id *)(a1 + 32) fAPNSMessageCallback])
  {
    id v2 = [*(id *)(a1 + 32) fAPNSMessageCallback];
    id v3 = [*(id *)(a1 + 40) userInfo];
    long long v4 = (void (*)(void *, id))v2[2];
    v4(v2, v3);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1023059D8);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2APNSHelper,receiveAPNSToken,nil fAPNSTokenCallback,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1023059D8);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEmergencyEED2APNSHelper connection:didReceiveIncomingMessage:]_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100F2F184(uint64_t a1)
{
  if ([*(id *)(a1 + 32) fAPNSReconnectedCallback] && objc_msgSend(*(id *)(a1 + 32), "apsConnection"))
  {
    [objc_msgSend(*(id *)(a1 + 32), "apsConnection") setEnableCriticalReliability:1];
    id v2 = (void (*)(void))*((void *)[*(id *)(a1 + 32) fAPNSReconnectedCallback] + 2);
    v2();
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1023059D8);
    }
    id v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2APNSHelper,connectionDidReconnect,nil fAPNSReconnectedCallback or apsConnection,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1023059D8);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLEmergencyEED2APNSHelper connectionDidReconnect:]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100F2F3E4(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100F2F414()
{
  sub_100134750(&qword_1024823C8, "com.apple.eed.apnshelperqueue");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024823C8, (void *)&_mh_execute_header);
}

void sub_100F2F4D8(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    long long v4 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289283;
      int v8 = 0;
      __int16 v9 = 2082;
      BOOL v10 = "";
      __int16 v11 = 2113;
      long long v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#loip received visit\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_100F302C4(a1, a2);
  }
  else
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    uint64_t v5 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#loip cannot request LOI location for a nil visit", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLoiLocationProvider::onVisit(CLVisit *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100F2F7C8(id a1)
{
  qword_1024823E0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLLoiLocationProviderSilo"];
}

uint64_t sub_100F2F888(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F30618;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024823F8 != -1) {
    dispatch_once(&qword_1024823F8, block);
  }
  return qword_10248AF80;
}

uint64_t sub_100F2FC90(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1006B766C(a1, "CLLoiLocationProvider", a2);
  *(void *)uint64_t v3 = off_102305A28;
  *(void *)(v3 + 120) = 0;
  long long v4 = (id *)(v3 + 120);
  *(void *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 136) = 0xFFFF;
  *(void *)(v3 + 148) = 0;
  *(void *)(v3 + 140) = 0;
  *(_OWORD *)(v3 + 156) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v3 + 172) = _Q0;
  *(_OWORD *)(v3 + 188) = _Q0;
  *(_OWORD *)(v3 + 204) = _Q0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 240) = 0;
  *(void *)(v3 + 224) = 0xBFF0000000000000;
  *(_DWORD *)(v3 + 248) = 0;
  *(void *)(v3 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(v3 + 260) = 0x7FFFFFFF;
  *(void *)(v3 + 272) = 0;
  *(void *)(v3 + 280) = 0;
  *(unsigned char *)(v3 + 288) = 0;
  *(void *)(v3 + 264) = 0;
  *(void *)(v3 + 300) = 0;
  *(void *)(v3 + 292) = 0;
  *(void *)(a1 + 128) = [[CLLoiLocationProviderRoutineAdapter alloc] initWithLoiLocationProvider:a1];
  id v10 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLRoutineMonitor"];
  *long long v4 = v10;
  if (v10)
  {
    [v10 registerDelegate:*(void *)(a1 + 128) inSilo:objc_msgSend(*(id *)(a1 + 32), "silo")];
    [*v4 setDelegateEntityName:"CLLoiLocationProvider"];
    id v11 = [[objc_msgSend(*(id *)(a1 + 32), "silo") newTimer];
    *(void *)(a1 + 296) = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100F2FF88;
    v15[3] = &unk_1022A3020;
    void v15[4] = a1;
    [v11 setHandler:v15];
  }
  else
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    long long v12 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      long long v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip error CLRoutineMonitor is not supported.\"}", buf, 0x12u);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
    }
    int v13 = qword_1024194D8;
    if (os_signpost_enabled((os_log_t)qword_1024194D8))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      long long v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#loip error CLRoutineMonitor is not supported.", "{\"msg%{public}.0s\":\"#loip error CLRoutineMonitor is not supported.\"}", buf, 0x12u);
    }
  }
  return a1;
}

void sub_100F2FF74(_Unwind_Exception *a1)
{
  sub_1006B7BEC(v1);
  _Unwind_Resume(a1);
}

void sub_100F2FF88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 296) setNextFireDelay:1.79769313e308];
  id v2 = objc_alloc((Class)RTStoredVisitFetchOptions);
  id v3 = [v2 initWithAscending:0 confidence:[NSNumber numberWithDouble:RTVisitConfidenceHigh] dateInterval:0 labelVisit:1 limit:&off_102393758];
  long long v4 = *(void **)(v1 + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F30068;
  v5[3] = &unk_1022C1658;
  void v5[4] = v1;
  [v4 fetchStoredVisitsWithOptions:v3 withReply:v5];
}

void sub_100F30068(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    long long v4 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2114;
      id v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
    }
    uint64_t v5 = qword_1024194D8;
    if (os_signpost_enabled((os_log_t)qword_1024194D8))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2114;
      id v14 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#loip error fetching visits", "{\"msg%{public}.0s\":\"#loip error fetching visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [objc_alloc((Class)CLVisit) initWithVisit:[a2 firstObject]];
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    int v8 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2113;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#loip fetched most recent visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    sub_100F302C4(v6, v7);
  }
}

id sub_100F302C4(uint64_t a1, void *a2)
{
  if ([a2 hasArrivalDate] && (objc_msgSend(a2, "hasDepartureDate") & 1) == 0)
  {
    return sub_100F30F14(a1, a2);
  }
  else
  {
    id result = [a2 hasArrivalDate];
    if (result)
    {
      id result = [a2 hasDepartureDate];
      if (result)
      {
        return (id)sub_100F30CD4(a1, 1);
      }
    }
  }
  return result;
}

uint64_t sub_100F30360(uint64_t a1)
{
  *(void *)a1 = off_102305A28;
  sub_100F3043C(a1);

  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0xFFFF;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 156) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_OWORD *)(a1 + 204) = _Q0;
  *(_DWORD *)(a1 + 220) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 260) = 0x7FFFFFFF;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  [*(id *)(a1 + 296) invalidate];

  *(void *)(a1 + 296) = 0;

  return sub_1006B7BEC(a1);
}

id sub_100F3043C(uint64_t a1)
{
  sub_1006B7C30(a1);
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_102305C20);
  }
  id v2 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip stop leeching visits", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLoiLocationProvider::shutdown()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 120) stopLeechingVisitsForClient:*(void *)(a1 + 128)];
}

void sub_100F305E0(uint64_t a1)
{
  sub_100F30360(a1);

  operator delete();
}

void sub_100F30618()
{
}

void sub_100F30664()
{
}

uint64_t sub_100F30688(uint64_t a1, int *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102305C00);
  }
  long long v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)buf = 67240192;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@ClxLoi, registerForNotificationInternal, notification, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102305C00);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_1000B015C();
  if (!*a2)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    uint64_t v6 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#loip register to leech visits", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    [*(id *)(a1 + 120) startLeechingVisitsForClient:*(void *)(a1 + 128)];
    [*(id *)(a1 + 296) nextFireDelay];
    if (v7 == 1.79769313e308) {
      [*(id *)(a1 + 296) setNextFireDelay:10.0];
    }
  }
  return 1;
}

uint64_t sub_100F309B4(uint64_t a1, int *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102305C00);
  }
  long long v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)buf = 67240192;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@ClxLoi, unregisterForNotificationInternal, notification, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102305C00);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_1006B7E64(a1);
  if (!*a2)
  {
    *(_DWORD *)buf = 0;
    if (!sub_1001072EC(a1, (int *)buf, 1))
    {
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
      uint64_t v6 = qword_1024194D8;
      if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#loip stop leeching visits", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194D0 != -1) {
          dispatch_once(&qword_1024194D0, &stru_102305C20);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLLoiLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      [*(id *)(a1 + 120) stopLeechingVisitsForClient:*(void *)(a1 + 128)];
    }
  }
  return 1;
}

uint64_t sub_100F30CD4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 136) = 0xFFFF;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 156) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_OWORD *)(a1 + 204) = _Q0;
  *(_DWORD *)(a1 + 220) = 0;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 260) = 0x7FFFFFFF;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 232) = 13;
  *(_DWORD *)(a1 + 292) = 0;
  if (a2) {
    return sub_100F30D44(a1);
  }
  return a1;
}

uint64_t sub_100F30D44(uint64_t a1)
{
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_102305C20);
  }
  id v2 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip notify LOI location unavailable", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLoiLocationProvider::notifyLocationUnavailable()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
}

id sub_100F30F14(uint64_t a1, void *a2)
{
  if (!objc_msgSend(objc_msgSend(a2, "_placeInference"), "_loiIdentifier"))
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    int v5 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#loip cannot request LOI location for a nil LOI identifier", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return (id)sub_100F30CD4(a1, 1);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 == -1) {
      goto LABEL_18;
    }
LABEL_20:
    dispatch_once(&qword_1024194D0, &stru_102305C20);
LABEL_18:
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLoiLocationProvider::updateLoiFromVisit(CLVisit *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return (id)sub_100F30CD4(a1, 1);
  }
  id v3 = *(void **)(a1 + 120);
  if (v3) {
    return [v3 fetchLocationOfInterestWithIdentifier:withReply:];
  }
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_102305C20);
  }
  uint64_t v6 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#loip skip requesting Loi location as routine monitor is not up", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  return (id)sub_100F30CD4(a1, 1);
}

void sub_100F311F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (a3)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    double v7 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v53 = 0;
      *(_WORD *)&v53[4] = 2082;
      *(void *)&v53[6] = "";
      __int16 v54 = 2113;
      unsigned int v55 = v8;
      __int16 v56 = 2114;
      int v57 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip error fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
    }
    int v9 = qword_1024194D8;
    if (os_signpost_enabled((os_log_t)qword_1024194D8))
    {
      int v10 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v53 = 0;
      *(_WORD *)&v53[4] = 2082;
      *(void *)&v53[6] = "";
      __int16 v54 = 2113;
      unsigned int v55 = v10;
      __int16 v56 = 2114;
      int v57 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#loip error fetching LOI", "{\"msg%{public}.0s\":\"#loip error fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    id v11 = [a3 domain];
    if (![v11 isEqualToString:RTErrorDomain]
      || [a3 code] != (id)5 && objc_msgSend(a3, "code") != (id)8)
    {
      goto LABEL_43;
    }
    int v12 = *(_DWORD *)(v5 + 304);
    if (v12 > 0) {
      goto LABEL_43;
    }
    *(_DWORD *)(v5 + 304) = v12 + 1;
    [*(id *)(v5 + 296) nextFireDelay];
    if (v13 == 1.79769313e308) {
      [*(id *)(v5 + 296) setNextFireDelay:10.0];
    }
  }
  if (!a2)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    int v17 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v18 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)int v53 = 0;
      *(_WORD *)&v53[4] = 2082;
      *(void *)&v53[6] = "";
      __int16 v54 = 2113;
      unsigned int v55 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip received nil in return when fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
    }
    uint64_t v19 = qword_1024194D8;
    if (!os_signpost_enabled((os_log_t)qword_1024194D8)) {
      goto LABEL_43;
    }
    long long v20 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)int v53 = 0;
    *(_WORD *)&v53[4] = 2082;
    *(void *)&v53[6] = "";
    __int16 v54 = 2113;
    unsigned int v55 = v20;
    int v21 = "#loip received nil in return when fetching LOI";
    int v22 = "{\"msg%{public}.0s\":\"#loip received nil in return when fetching LOI\", \"loiIdentifier\":%{private, location:escape_only}@}";
    uint64_t v23 = v19;
    uint32_t v24 = 28;
LABEL_42:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v21, v22, buf, v24);
    goto LABEL_43;
  }
  if (!objc_msgSend(objc_msgSend(a2, "visits"), "count"))
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    id v14 = qword_1024194D8;
    if (!os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    int v25 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v53 = 0;
    *(_WORD *)&v53[4] = 2082;
    *(void *)&v53[6] = "";
    __int16 v54 = 2113;
    unsigned int v55 = a2;
    __int16 v56 = 2113;
    int v57 = v25;
    int v16 = "{\"msg%{public}.0s\":\"#loip received LOI has no visit history\", \"loi\":%{private, location:escape_only}@, \""
          "loiIdentifier\":%{private, location:escape_only}@}";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0x26u);
LABEL_43:
    sub_100F30CD4(v5, 1);
    return;
  }
  if (objc_msgSend(objc_msgSend(a2, "location"), "referenceFrame") == 2)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    id v14 = qword_1024194D8;
    if (!os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    int v15 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v53 = 0;
    *(_WORD *)&v53[4] = 2082;
    *(void *)&v53[6] = "";
    __int16 v54 = 2113;
    unsigned int v55 = a2;
    __int16 v56 = 2113;
    int v57 = v15;
    int v16 = "{\"msg%{public}.0s\":\"#loip received China Shifted LOI\", \"loi\":%{private, location:escape_only}@, \"loiIde"
          "ntifier\":%{private, location:escape_only}@}";
    goto LABEL_33;
  }
  [a2 confidence];
  if (v26 < 0.0)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    int v27 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_ERROR))
    {
      int v28 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)int v53 = 0;
      *(_WORD *)&v53[4] = 2082;
      *(void *)&v53[6] = "";
      __int16 v54 = 2113;
      unsigned int v55 = a2;
      __int16 v56 = 2113;
      int v57 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#loip received LOI has negative confidence value\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
    }
    uint64_t v29 = qword_1024194D8;
    if (!os_signpost_enabled((os_log_t)qword_1024194D8)) {
      goto LABEL_43;
    }
    int v30 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v53 = 0;
    *(_WORD *)&v53[4] = 2082;
    *(void *)&v53[6] = "";
    __int16 v54 = 2113;
    unsigned int v55 = a2;
    __int16 v56 = 2113;
    int v57 = v30;
    int v21 = "#loip received LOI has negative confidence value";
    int v22 = "{\"msg%{public}.0s\":\"#loip received LOI has negative confidence value\", \"loi\":%{private, location:escape_"
          "only}@, \"loiIdentifier\":%{private, location:escape_only}@}";
    uint64_t v23 = v29;
    uint32_t v24 = 38;
    goto LABEL_42;
  }
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_102305C20);
  }
  uint64_t v31 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)int v53 = 0;
    *(_WORD *)&v53[4] = 2082;
    *(void *)&v53[6] = "";
    __int16 v54 = 2113;
    unsigned int v55 = a2;
    __int16 v56 = 2113;
    int v57 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#loip received LOI\", \"loi\":%{private, location:escape_only}@, \"loiIdentifier\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  *(_DWORD *)(v5 + 136) = 0xFFFF;
  *(void *)(v5 + 148) = 0;
  *(void *)(v5 + 140) = 0;
  *(_OWORD *)(v5 + 156) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v5 + 172) = _Q0;
  *(_OWORD *)(v5 + 188) = _Q0;
  *(_OWORD *)(v5 + 204) = _Q0;
  *(_DWORD *)(v5 + 220) = 0;
  *(void *)(v5 + 224) = 0xBFF0000000000000;
  *(void *)(v5 + 232) = 0;
  *(void *)(v5 + 240) = 0;
  *(_DWORD *)(v5 + 248) = 0;
  *(void *)(v5 + 252) = 0xBFF0000000000000;
  *(_DWORD *)(v5 + 260) = 0x7FFFFFFF;
  *(void *)(v5 + 272) = 0;
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 264) = 0;
  *(unsigned char *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 232) = 13;
  *(_DWORD *)(v5 + 292) = 0;
  [objc_msgSend(a2, "location") latitude];
  *(void *)(v5 + 140) = v38;
  [objc_msgSend(a2, "location") longitude];
  *(void *)(v5 + 148) = v39;
  [objc_msgSend(a2, "location") horizontalUncertainty];
  *(void *)(v5 + 156) = v40;
  [objc_msgSend(a2, "location") altitude];
  *(void *)(v5 + 164) = v41;
  [objc_msgSend(a2, "location") verticalUncertainty];
  *(void *)(v5 + 172) = v42;
  [a2 confidence];
  int v44 = vcvtmd_s64_f64(v43 * 13.0 + 67.0);
  *(_DWORD *)(v5 + 220) = v44;
  if (v44 <= 67) {
    int v45 = 25;
  }
  else {
    int v45 = 50;
  }
  if (v44 <= 73) {
    int v46 = v45;
  }
  else {
    int v46 = 75;
  }
  *(_DWORD *)(v5 + 264) = v46;
  id v47 = [objc_msgSend(a2, "location") sourceAccuracy];
  if ((unint64_t)v47 >= 3)
  {
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    int v48 = qword_1024194D8;
    if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_ERROR))
    {
      id v49 = [objc_msgSend(a2, "location") sourceAccuracy];
      *(_DWORD *)buf = 134217984;
      *(void *)int v53 = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "#loip unsupported location accuracy type, %lu", buf, 0xCu);
    }
    BOOL v50 = sub_10013D1A0(115, 0);
    LODWORD(v47) = 0;
    if (v50)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194D0 != -1) {
        dispatch_once(&qword_1024194D0, &stru_102305C20);
      }
      [objc_msgSend(a2, "location") sourceAccuracy];
      unsigned int v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLoiLocationProvider::updateLoiFromVisit(CLVisit *)_block_invoke", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
      LODWORD(v47) = 0;
    }
  }
  *(_DWORD *)(v5 + 292) = v47;
  *(void *)(v5 + 224) = 0x4024000000000000;
  *(CFAbsoluteTime *)(v5 + 212) = CFAbsoluteTimeGetCurrent();
  if (sub_1000E6DB4(v5 + 136)) {
    sub_100F31B70(v5);
  }
  else {
    sub_100F30D44(v5);
  }
  *(_DWORD *)(v5 + 304) = 0;
}

void sub_100F31B70(uint64_t a1)
{
  if (qword_1024194D0 != -1) {
    dispatch_once(&qword_1024194D0, &stru_102305C20);
  }
  id v2 = qword_1024194D8;
  if (os_log_type_enabled((os_log_t)qword_1024194D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 140);
    uint64_t v4 = *(void *)(a1 + 148);
    uint64_t v5 = *(void *)(a1 + 156);
    uint64_t v6 = *(void *)(a1 + 164);
    uint64_t v7 = *(void *)(a1 + 172);
    int v8 = *(_DWORD *)(a1 + 220);
    uint64_t v9 = *(unsigned int *)(a1 + 264);
    uint64_t v10 = *(int *)(a1 + 292);
    *(_DWORD *)buf = 134285313;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v4;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(void *)&buf[24] = v5;
    *(_WORD *)uint64_t v41 = 2049;
    *(void *)&v41[2] = v6;
    *(_WORD *)&v41[10] = 2050;
    *(void *)&v41[12] = v7;
    *(_WORD *)&v41[20] = 1026;
    *(_DWORD *)&v41[22] = v8;
    *(_WORD *)&v41[26] = 2050;
    *(void *)&v41[28] = v9;
    *(_WORD *)&v41[36] = 2050;
    *(void *)&v41[38] = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#loip,notify LOI location,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.2f,altitude,%{private}.2f,vunc,%{public}.2f,confidence,%{public}d,integrity,%{public}lu,sourceAccuracy,%{public}lu", buf, 0x4Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194D0 != -1) {
      dispatch_once(&qword_1024194D0, &stru_102305C20);
    }
    uint64_t v15 = *(void *)(a1 + 140);
    uint64_t v16 = *(void *)(a1 + 148);
    uint64_t v17 = *(void *)(a1 + 156);
    uint64_t v18 = *(void *)(a1 + 164);
    uint64_t v19 = *(void *)(a1 + 172);
    int v20 = *(_DWORD *)(a1 + 220);
    uint64_t v21 = *(unsigned int *)(a1 + 264);
    uint64_t v22 = *(int *)(a1 + 292);
    int v24 = 134285313;
    uint64_t v25 = v15;
    __int16 v26 = 2049;
    uint64_t v27 = v16;
    __int16 v28 = 2050;
    uint64_t v29 = v17;
    __int16 v30 = 2049;
    uint64_t v31 = v18;
    __int16 v32 = 2050;
    uint64_t v33 = v19;
    __int16 v34 = 1026;
    int v35 = v20;
    __int16 v36 = 2050;
    uint64_t v37 = v21;
    __int16 v38 = 2050;
    uint64_t v39 = v22;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLoiLocationProvider::notifyLocation()", "%s\n", v23);
    if (v23 != buf) {
      free(v23);
    }
  }
  sub_1000DB3D4((uint64_t)buf);
  long long v11 = *(_OWORD *)(a1 + 248);
  long long v43 = *(_OWORD *)(a1 + 232);
  long long v44 = v11;
  v45[0] = *(_OWORD *)(a1 + 264);
  *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)(a1 + 276);
  long long v12 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)&v41[16] = v12;
  long long v13 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v41[32] = *(_OWORD *)(a1 + 200);
  long long v42 = v13;
  long long v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&uint8_t buf[16] = v14;
  int v47 = *(_DWORD *)(a1 + 292);
  int v24 = 0;
  (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v24, buf, 1, 0xFFFFFFFFLL, 0);

  if (v51) {
    sub_1000DB0A0(v51);
  }
  if (v50 < 0) {
    operator delete(__p);
  }
  if (v48) {
    sub_1000DB0A0(v48);
  }
  if (v46) {
    sub_1000DB0A0(v46);
  }
}

void sub_100F31EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_100F31EE4()
{
}

void sub_100F31FA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100F31FE0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F32010(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100F32040(id a1)
{
  qword_1024194D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "LoiPosition");
}

void sub_100F327B4(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100F33D9C(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

BOOL sub_100F33DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6 = sub_100B9BC00((float *)a2);
  float v9 = 0.0;
  for (uint64_t i = 28; i != 40; i += 4)
    float v9 = v9 + (float)(*(float *)(a2 + i) * *(float *)(a2 + i));
  float v11 = sqrtf(v9);
  float v12 = (float)((float)(v7 * *(float *)(a2 + 20)) + (float)(v6 * *(float *)(a2 + 16)))
      + (float)(v8 * *(float *)(a2 + 24));
  float v13 = -v12;
  float v14 = fabsf(v12);
  float v15 = sub_100F34054(a1, (float *)a2);
  sub_10082BF38(a1 + 32, v15, v13);
  *(float *)a1 = v11 + *(float *)a1;
  unint64_t v16 = *(void *)(a1 + 8) + 1;
  *(void *)(a1 + 8) = v16;
  float v17 = v14 + *(float *)(a1 + 16);
  *(float *)(a1 + 16) = v17;
  uint64_t v18 = *(void *)(a1 + 24) + 1;
  *(void *)(a1 + 24) = v18;
  if (v16 >= 0x100)
  {
    if (v18) {
      float v19 = v17 / (float)(unint64_t)v18;
    }
    else {
      float v19 = 0.0;
    }
    uint64_t v20 = *(unsigned __int16 *)(a1 + 152);
    uint64_t v21 = *(unsigned __int16 *)(a1 + 154);
    unint64_t v22 = *(unsigned int *)(a1 + 156);
    if (v20 + v21 >= v22) {
      uint64_t v23 = *(unsigned int *)(a1 + 156);
    }
    else {
      uint64_t v23 = 0;
    }
    *(float *)(a1 + 152 + 4 * (v20 + v21 - v23) + 8) = v19;
    if (v22 <= v21)
    {
      unint64_t v24 = v20 + 1;
      if (v24 < v22) {
        LOWORD(v22) = 0;
      }
      *(_WORD *)(a1 + 152) = v24 - v22;
    }
    else
    {
      *(_WORD *)(a1 + 154) = v21 + 1;
    }
    *(unsigned char *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    sub_1004184F0(a1 + 136);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 140);
    unint64_t v25 = *(void *)(a1 + 8);
    if (v25) {
      float v26 = *(float *)a1 / (float)v25;
    }
    else {
      float v26 = 0.0;
    }
    uint64_t v27 = *(unsigned __int16 *)(a1 + 108);
    uint64_t v28 = *(unsigned __int16 *)(a1 + 110);
    unint64_t v29 = *(unsigned int *)(a1 + 112);
    if (v27 + v28 >= v29) {
      uint64_t v30 = *(unsigned int *)(a1 + 112);
    }
    else {
      uint64_t v30 = 0;
    }
    *(float *)(a1 + 108 + 4 * (v27 + v28 - v30) + 8) = v26;
    if (v29 <= v28)
    {
      unint64_t v31 = v27 + 1;
      if (v31 < v29) {
        LOWORD(v29) = 0;
      }
      *(_WORD *)(a1 + 108) = v31 - v29;
    }
    else
    {
      *(_WORD *)(a1 + 110) = v28 + 1;
    }
    *(unsigned char *)(a1 + 92) = 1;
    *(_DWORD *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    sub_1004184F0(a1 + 92);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 96);
    float v32 = sub_10082C168(a1 + 32);
    uint64_t v33 = *(unsigned __int16 *)(a1 + 196);
    float v34 = fabsf(v32);
    uint64_t v35 = *(unsigned __int16 *)(a1 + 198);
    unint64_t v36 = *(unsigned int *)(a1 + 200);
    if (v33 + v35 >= v36) {
      uint64_t v37 = *(unsigned int *)(a1 + 200);
    }
    else {
      uint64_t v37 = 0;
    }
    *(float *)(a1 + 196 + 4 * (v33 + v35 - v37) + 8) = v34;
    if (v36 <= v35)
    {
      unint64_t v38 = v33 + 1;
      if (v38 < v36) {
        LOWORD(v36) = 0;
      }
      *(_WORD *)(a1 + 196) = v38 - v36;
    }
    else
    {
      *(_WORD *)(a1 + 198) = v35 + 1;
    }
    *(unsigned char *)(a1 + 180) = 1;
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 60) = 0u;
    sub_1004184F0(a1 + 180);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 184);
    *(void *)a3 = *(void *)(a2 + 48);
  }
  return v16 > 0xFF;
}

float sub_100F34054(uint64_t a1, float *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482410, memory_order_acquire) & 1) == 0)
  {
    float v15 = a2;
    int v14 = __cxa_guard_acquire(&qword_102482410);
    a2 = v15;
    if (v14)
    {
      qword_102482400 = 1065353216;
      dword_102482408 = 0;
      __cxa_guard_release(&qword_102482410);
      a2 = v15;
    }
  }
  float v4 = a2[8];
  float v3 = a2[9];
  float v5 = a2[7];
  float v6 = (float)(v4 * *(float *)&dword_102482408) - (float)(v3 * *((float *)&qword_102482400 + 1));
  float v7 = (float)(v3 * *(float *)&qword_102482400) - (float)(v5 * *(float *)&dword_102482408);
  float v8 = (float)(v5 * *((float *)&qword_102482400 + 1)) - (float)(v4 * *(float *)&qword_102482400);
  float v9 = sub_100B9BC00(a2);
  float v12 = -(float)((float)((float)(v7 * v10) + (float)(v9 * v6)) + (float)(v11 * v8));
  float result = v12 - *(float *)(a1 + 88);
  *(float *)(a1 + 88) = v12;
  return result;
}

uint64_t sub_100F34138(uint64_t result)
{
  if (!*(unsigned char *)(result + 12))
  {
LABEL_8:
    *(unsigned char *)(result + 15) = 0;
    return result;
  }
  if (*(double *)(result + 16) > 20.0)
  {
LABEL_3:
    BOOL v1 = 1;
LABEL_7:
    *(unsigned char *)(result + 15) = v1;
    return result;
  }
  if (*(unsigned char *)(result + 13))
  {
    if (*(unsigned char *)(result + 14))
    {
      BOOL v1 = *(_DWORD *)(result + 24) != 1;
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)(result + 24) != 1 || *(unsigned char *)(result + 14)) {
    goto LABEL_3;
  }
  return result;
}

void sub_100F3419C(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 <= v3 && v3 < a2)
  {
    char v7 = 0;
    *(unsigned char *)(a1 + 15) = 0;
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a1 > v5 && v5 >= a2)
  {
    char v7 = 1;
LABEL_11:
    *(unsigned char *)(a1 + 12) = v7;
  }
  *(_DWORD *)a1 = a2;
  sub_100F34138(a1);
  if (*(unsigned char *)(a1 + 12) && *(unsigned char *)(a1 + 14)) {
    *(unsigned char *)(a1 + 15) = 1;
  }

  sub_100183190((int *)a1);
}

void sub_100F34228(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 13) = a2;
  sub_100F34138(a1);

  sub_100183190((int *)a1);
}

void sub_100F34264(int *a1, int a2)
{
  a1[6] = a2;
  sub_100F34138((uint64_t)a1);

  sub_100183190(a1);
}

void sub_100F342A0(uint64_t a1, double a2)
{
  if (a2 >= 0.0 && a2 <= 100.0)
  {
    *(double *)(a1 + 16) = a2;
    sub_100F34138(a1);
    sub_100183190((int *)a1);
  }
}

void sub_100F342F4(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100F34324(uint64_t a1)
{
  *(_WORD *)a1 = 1542;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_101D985D0;
  uint64_t v2 = a1 + 56;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 0;
  unsigned int v4 = 0;
  int v5 = &v4;
  *((_DWORD *)sub_1002D13C8(a1 + 56, &v4, (uint64_t)&unk_101D0B290, &v5) + 5) = 0;
  unsigned int v4 = 1;
  int v5 = &v4;
  *((_DWORD *)sub_1002D13C8(v2, &v4, (uint64_t)&unk_101D0B290, &v5) + 5) = 0;
  unsigned int v4 = 2;
  int v5 = &v4;
  *((_DWORD *)sub_1002D13C8(v2, &v4, (uint64_t)&unk_101D0B290, &v5) + 5) = 0;
  unsigned int v4 = 3;
  int v5 = &v4;
  *((_DWORD *)sub_1002D13C8(v2, &v4, (uint64_t)&unk_101D0B290, &v5) + 5) = 0;
  unsigned int v4 = 4;
  int v5 = &v4;
  *((_DWORD *)sub_1002D13C8(v2, &v4, (uint64_t)&unk_101D0B290, &v5) + 5) = 0;
  unsigned int v4 = 5;
  int v5 = &v4;
  *((_DWORD *)sub_1002D13C8(v2, &v4, (uint64_t)&unk_101D0B290, &v5) + 5) = 0;
  unsigned int v4 = 6;
  int v5 = &v4;
  *((_DWORD *)sub_1002D13C8(v2, &v4, (uint64_t)&unk_101D0B290, &v5) + 5) = 0;
  return a1;
}

void sub_100F344D8(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F34504(uint64_t a1)
{
  *(void *)a1 = off_102305CB0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0xBFF0000000000000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(void *)(a1 + 88) = 0x600000000;
  *(void *)(a1 + 96) = 0xCF0000004F000000;
  *(unsigned char *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = -1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0x8000000080000000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 224) = 6;
  *(_DWORD *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  sub_100F34324(a1 + 392);
  return a1;
}

void sub_100F345D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F345F0(uint64_t a1)
{
  *(void *)a1 = off_102305CB0;
  sub_100F34650(a1);
  sub_1000D7D80(a1 + 448);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

void sub_100F34650(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_100F350E0;
  v3[3] = &unk_1022A3020;
  v3[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v3);
}

void sub_100F346D0(uint64_t a1)
{
  sub_100F345F0(a1);

  operator delete();
}

void sub_100F34708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_100F34788;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  sub_1009E8E94(v4, (uint64_t)v5);
}

uint64_t sub_100F34788(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  memset(buf, 0, sizeof(buf));
  long long v3 = 0uLL;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0xBFF0000000000000;
  uint64_t v4 = (void **)(v2 + 56);
  if (*(char *)(v2 + 79) < 0)
  {
    operator delete(*v4);
    long long v3 = 0uLL;
  }
  *uint64_t v4 = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0xBFF0000000000000;
  *(void *)(v2 + 88) = 0x600000000;
  *(void *)(v2 + 96) = 0xCF0000004F000000;
  *(void *)(v2 + 104) = 0xFFFFFFFF00000000;
  *(_OWORD *)(v2 + 112) = v3;
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 144) = v3;
  *(_OWORD *)(v2 + 160) = v3;
  *(void *)(v2 + 176) = 0;
  *(void *)(v2 + 184) = 0x8000000080000000;
  *(_OWORD *)(v2 + 192) = v3;
  *(_OWORD *)(v2 + 208) = v3;
  *(unsigned char *)(v2 + 224) = 6;
  long long v5 = *(_OWORD *)buf;
  long long v6 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v2 + 257) = *(_OWORD *)&buf[32];
  *(_OWORD *)(v2 + 241) = v6;
  *(_OWORD *)(v2 + 225) = v5;
  *(_DWORD *)(v2 + 273) = 0;
  *(_DWORD *)(v2 + 276) = 0;
  *(_DWORD *)(v2 + 324) = 6;
  sub_100F34324((uint64_t)buf);
  *(void *)(v2 + 440) = v13;
  long long v7 = *(_OWORD *)&buf[16];
  *(_OWORD *)(v2 + 392) = *(_OWORD *)buf;
  *(_OWORD *)(v2 + 408) = v7;
  *(_OWORD *)(v2 + 424) = *(_OWORD *)&buf[32];
  sub_1000E2E9C(v2 + 448, v14);
  *(_DWORD *)(v2 + 488) = v15;
  sub_1000D7D80((uint64_t)v14);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_102305CD0);
  }
  float v8 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    float v9 = *(uint64_t ***)(a1 + 40);
    if (*((char *)v9 + 23) < 0) {
      float v9 = (uint64_t **)*v9;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "starting metric session (CompassSession) for %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102305CD0);
    }
    float v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassSessionStatsCollector::start(const std::string &)_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(unsigned char *)(v2 + 40) = 1;
  *(CFAbsoluteTime *)(v2 + 48) = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)(v2 + 56), *(const std::string **)(a1 + 40));
  sub_100A68CE8();
  *(_DWORD *)(v2 + 276) = sub_100A6AC2C();
  if (!*(void *)(v2 + 8)) {
    operator new();
  }
  if (!*(void *)(v2 + 16)) {
    operator new();
  }
  uint64_t result = sub_1000A16E8();
  if ((result & 0x10) != 0)
  {
    if (!*(void *)(v2 + 24)) {
      operator new();
    }
    if (!*(void *)(v2 + 32)) {
      operator new();
    }
  }
  return result;
}

void sub_100F34CBC()
{
}

float *sub_100F34CF4(float *result, uint64_t a2)
{
  float v2 = (float)(int)sqrtf((float)((float)(result[3] * result[3]) + (float)(result[2] * result[2]))+ (float)(result[4] * result[4]));
  if (*(float *)(a2 + 100) < v2) {
    *(float *)(a2 + 100) = v2;
  }
  if (*(float *)(a2 + 96) > v2) {
    *(float *)(a2 + 96) = v2;
  }
  return result;
}

__n128 sub_100F34D38(long long *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    int v2 = *(_DWORD *)(a2 + 324);
    if (v2 == 6)
    {
      *(_DWORD *)(a2 + 264) = *((_DWORD *)a1 + 10);
      int v3 = *((_DWORD *)a1 + 11);
      *(_DWORD *)(a2 + 92) = v3;
      float v4 = *((float *)a1 + 24);
      if (v4 > -1.0)
      {
        *(unsigned char *)(a2 + 393) = v3;
        if (v3 - 4 >= 2)
        {
          if (v3 == 2)
          {
            ++*(_DWORD *)(a2 + 404);
            *(float *)(a2 + 412) = v4 + *(float *)(a2 + 412);
            *(float *)(a2 + 420) = v4;
            *(float *)(a2 + 428) = v4;
          }
        }
        else
        {
          ++*(_DWORD *)(a2 + 408);
          *(float *)(a2 + 416) = v4 + *(float *)(a2 + 416);
          *(float *)(a2 + 424) = v4;
          *(float *)(a2 + 432) = v4;
        }
        *(unsigned char *)(a2 + 392) = v3;
      }
    }
    else
    {
      float v4 = *((float *)a1 + 24);
    }
    if (v4 <= -1.0)
    {
      int v5 = *((_DWORD *)a1 + 11);
    }
    else
    {
      ++*(_DWORD *)(a2 + 444);
      int v5 = *((_DWORD *)a1 + 11);
      if ((_BYTE)v5)
      {
        if (*((_DWORD *)a1 + 11) == 2) {
          ++*(_DWORD *)(a2 + 436);
        }
      }
      else
      {
        ++*(_DWORD *)(a2 + 440);
      }
    }
    *(unsigned char *)(a2 + 272) |= *((unsigned char *)a1 + 104);
    if (*(_DWORD *)(a2 + 92) < v5) {
      *(_DWORD *)(a2 + 92) = v5;
    }
    if (v5 <= 0)
    {
      int v6 = *(_DWORD *)(a2 + 88);
      if (v2 > 0 || !v6) {
        *(_DWORD *)(a2 + 88) = v6 + 1;
      }
    }
    signed int v7 = llround((float)(*((float *)a1 + 25) * 180.0) / 3.14159265);
    if (*(_DWORD *)(a2 + 188) > v7) {
      signed int v7 = *(_DWORD *)(a2 + 188);
    }
    *(_DWORD *)(a2 + 188) = v7;
    *(_DWORD *)(a2 + 268) = *((_DWORD *)a1 + 10);
  }
  long long v8 = *a1;
  long long v9 = a1[2];
  *(_OWORD *)(a2 + 296) = a1[1];
  *(_OWORD *)(a2 + 312) = v9;
  *(_OWORD *)(a2 + 280) = v8;
  __n128 result = (__n128)a1[3];
  long long v11 = a1[4];
  long long v12 = a1[6];
  *(_OWORD *)(a2 + 360) = a1[5];
  *(_OWORD *)(a2 + 376) = v12;
  *(__n128 *)(a2 + 328) = result;
  *(_OWORD *)(a2 + 344) = v11;
  return result;
}

uint64_t sub_100F34ECC(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(result + 1);
  float v3 = *(float *)(result + 53);
  int v4 = *(unsigned __int8 *)(a2 + 392);
  if (v2 != v4)
  {
    if (v2 == 2 && v4 == 4)
    {
      ++*(_DWORD *)(a2 + 396);
      goto LABEL_20;
    }
    if (v2 == 5 && v4 == 2)
    {
      ++*(_DWORD *)(a2 + 400);
LABEL_15:
      ++*(_DWORD *)(a2 + 408);
      *(float *)(a2 + 416) = v3 + *(float *)(a2 + 416);
      if (v3 > *(float *)(a2 + 432)) {
        *(float *)(a2 + 432) = v3;
      }
      if (v3 < *(float *)(a2 + 424)) {
        *(float *)(a2 + 424) = v3;
      }
      goto LABEL_24;
    }
  }
  if (v2 != 2)
  {
    if ((v2 & 0xFE) != 4) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
LABEL_20:
  ++*(_DWORD *)(a2 + 404);
  *(float *)(a2 + 412) = v3 + *(float *)(a2 + 412);
  if (v3 > *(float *)(a2 + 428)) {
    *(float *)(a2 + 428) = v3;
  }
  if (v3 < *(float *)(a2 + 420)) {
    *(float *)(a2 + 420) = v3;
  }
LABEL_24:
  *(unsigned char *)(a2 + 392) = v2;
  return result;
}

uint64_t sub_100F34FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  sub_100052E44(a1, (uint64_t)v9);
  int v3 = v9[0];
  ++*(_DWORD *)(a2 + 488);
  if (CLMotionActivity::isTypeInVehicle())
  {
    uint64_t v4 = a2 + 448;
    if (DWORD1(v9[0]) == 2) {
      unsigned int v5 = 6;
    }
    else {
      unsigned int v5 = 3;
    }
    goto LABEL_10;
  }
  int isTypePedestrian = CLMotionActivity::isTypePedestrian();
  if (v3 == 100 || isTypePedestrian)
  {
    uint64_t v4 = a2 + 448;
    unsigned int v5 = 2;
    goto LABEL_10;
  }
  if (CLMotionActivity::isTypeStatic())
  {
    uint64_t v4 = a2 + 448;
    unsigned int v5 = 1;
LABEL_10:
    unsigned int v8 = v5;
LABEL_11:
    long long v11 = &v8;
    uint64_t result = (uint64_t)sub_1002D13C8(v4, &v8, (uint64_t)&unk_101D0B290, &v11);
    ++*(_DWORD *)(result + 20);
    return result;
  }
  if (CLMotionActivity::isTypeUnclassifiedMoving())
  {
    uint64_t v4 = a2 + 448;
    unsigned int v8 = 0;
    goto LABEL_11;
  }
  if (CLMotionActivity::isTypeCycling())
  {
    uint64_t v4 = a2 + 448;
    unsigned int v5 = 4;
    goto LABEL_10;
  }
  uint64_t result = CLMotionActivity::isTypeIndoorActivity();
  if (result)
  {
    uint64_t v4 = a2 + 448;
    unsigned int v5 = 5;
    goto LABEL_10;
  }
  return result;
}

int *sub_100F350E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 8))
  {
    uint64_t v2 = sub_100B0AEC4();
    sub_1009D26C4(v2, 0, *(void *)(v1 + 8));
    uint64_t v3 = *(void *)(v1 + 8);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *(void *)(v1 + 8) = 0;
  }
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = sub_100A68CE8();
    sub_1009D26C4(v4, 0, *(void *)(v1 + 16));
    uint64_t v5 = *(void *)(v1 + 16);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)(v1 + 16) = 0;
  }
  if (*(void *)(v1 + 24))
  {
    uint64_t v6 = sub_10058D9A0(0);
    sub_1009D26C4(v6, 6, *(void *)(v1 + 24));
    uint64_t v7 = *(void *)(v1 + 24);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *(void *)(v1 + 24) = 0;
  }
  if (*(void *)(v1 + 32))
  {
    uint64_t v8 = sub_1000D2E34(0);
    sub_1009D26C4(v8, 0, *(void *)(v1 + 32));
    uint64_t v9 = *(void *)(v1 + 32);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    *(void *)(v1 + 32) = 0;
  }
  if ((sub_1000A16E8() & 0x10) != 0) {
    sub_100F35408(v1);
  }
  if (*(unsigned char *)(v1 + 40) && *(double *)(v1 + 80) < 0.0)
  {
    *(CFAbsoluteTime *)(v1 + 80) = CFAbsoluteTimeGetCurrent();
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102305CD0);
    }
    uint64_t v10 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      long long v11 = (void *)(v1 + 56);
      if (*(char *)(v1 + 79) < 0) {
        long long v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136315138;
      int v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "ending metric session (CompassSession) for %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_102305CD0);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassSessionStatsCollector::stop()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return sub_100F354BC((_DWORD *)v1);
}

uint64_t sub_100F35408(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 428);
  *(_DWORD *)(result + 192) = *(_DWORD *)(result + 420);
  *(_DWORD *)(result + 196) = v1;
  int v2 = *(_DWORD *)(result + 404);
  if (v2 >= 1) {
    *(float *)(result + 200) = *(float *)(result + 412) / (float)v2;
  }
  int v3 = *(_DWORD *)(result + 432);
  *(_DWORD *)(result + 204) = *(_DWORD *)(result + 424);
  *(_DWORD *)(result + 208) = v3;
  int v4 = *(_DWORD *)(result + 408);
  if (v4 >= 1) {
    *(float *)(result + 212) = *(float *)(result + 416) / (float)v4;
  }
  int32x2_t v5 = vadd_s32(*(int32x2_t *)(result + 216), vrev64_s32(*(int32x2_t *)(result + 396)));
  *(int32x2_t *)(result + 216) = v5;
  *(unsigned char *)(result + 224) = *(unsigned char *)(result + 393);
  int v6 = *(_DWORD *)(result + 444);
  if (v6 < 1)
  {
    uint32x2_t v7 = 0;
  }
  else
  {
    *(float *)v5.i32 = (float)v6;
    uint32x2_t v7 = vcvt_u32_f32(vrnda_f32(vmul_f32(vdiv_f32(vcvt_f32_s32(*(int32x2_t *)(result + 436)), (float32x2_t)vdup_lane_s32(v5, 0)), (float32x2_t)vdup_n_s32(0x42C80000u))));
  }
  *(uint32x2_t *)(result + 256) = v7;
  return result;
}

int *sub_100F354BC(_DWORD *a1)
{
  int v2 = a1[122];
  uint64_t v3 = (uint64_t)(a1 + 112);
  unsigned int v19 = 0;
  uint64_t v20 = &v19;
  int v4 = (int *)sub_1002D13C8((uint64_t)(a1 + 112), &v19, (uint64_t)&unk_101D0B290, &v20);
  float v5 = (float)v2;
  if (v2 < 1) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = vcvtas_u32_f32((float)((float)v4[5] / v5) * 100.0);
  }
  a1[57] = v6;
  unsigned int v19 = 1;
  uint64_t v20 = &v19;
  uint32x2_t v7 = (int *)sub_1002D13C8(v3, &v19, (uint64_t)&unk_101D0B290, &v20);
  if (v2 < 1) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = vcvtas_u32_f32((float)((float)v7[5] / v5) * 100.0);
  }
  a1[58] = v8;
  unsigned int v19 = 2;
  uint64_t v20 = &v19;
  uint64_t v9 = (int *)sub_1002D13C8(v3, &v19, (uint64_t)&unk_101D0B290, &v20);
  if (v2 < 1) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = vcvtas_u32_f32((float)((float)v9[5] / v5) * 100.0);
  }
  a1[59] = v10;
  unsigned int v19 = 3;
  uint64_t v20 = &v19;
  long long v11 = (int *)sub_1002D13C8(v3, &v19, (uint64_t)&unk_101D0B290, &v20);
  if (v2 < 1) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = vcvtas_u32_f32((float)((float)v11[5] / v5) * 100.0);
  }
  a1[60] = v12;
  unsigned int v19 = 4;
  uint64_t v20 = &v19;
  uint64_t v13 = (int *)sub_1002D13C8(v3, &v19, (uint64_t)&unk_101D0B290, &v20);
  if (v2 < 1) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = vcvtas_u32_f32((float)((float)v13[5] / v5) * 100.0);
  }
  a1[61] = v14;
  unsigned int v19 = 5;
  uint64_t v20 = &v19;
  int v15 = (int *)sub_1002D13C8(v3, &v19, (uint64_t)&unk_101D0B290, &v20);
  if (v2 < 1) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = vcvtas_u32_f32((float)((float)v15[5] / v5) * 100.0);
  }
  a1[62] = v16;
  unsigned int v19 = 6;
  uint64_t v20 = &v19;
  uint64_t result = (int *)sub_1002D13C8(v3, &v19, (uint64_t)&unk_101D0B290, &v20);
  if (v2 < 1) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = vcvtas_u32_f32((float)((float)result[5] / v5) * 100.0);
  }
  a1[63] = v18;
  return result;
}

void sub_100F35774(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_100F357F0;
  v3[3] = &unk_1022A3020;
  v3[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v3);
}

uint64_t sub_100F357F0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 40))
  {
    memset(v7, 0, sizeof(v7));
    long long v2 = 0uLL;
    *(void *)(v1 + 40) = 0;
    *(void *)(v1 + 48) = 0xBFF0000000000000;
    uint64_t v3 = (void **)(v1 + 56);
    if (*(char *)(v1 + 79) < 0)
    {
      operator delete(*v3);
      long long v2 = 0uLL;
    }
    *uint64_t v3 = 0;
    *(void *)(v1 + 64) = 0;
    *(void *)(v1 + 72) = 0;
    *(void *)(v1 + 80) = 0xBFF0000000000000;
    *(void *)(v1 + 88) = 0x600000000;
    *(void *)(v1 + 96) = 0xCF0000004F000000;
    *(void *)(v1 + 104) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v1 + 112) = v2;
    *(_OWORD *)(v1 + 128) = v2;
    *(_OWORD *)(v1 + 144) = v2;
    *(_OWORD *)(v1 + 160) = v2;
    *(void *)(v1 + 176) = 0;
    *(void *)(v1 + 184) = 0x8000000080000000;
    *(_OWORD *)(v1 + 192) = v2;
    *(_OWORD *)(v1 + 208) = v2;
    *(unsigned char *)(v1 + 224) = 6;
    long long v4 = v7[0];
    long long v5 = v7[1];
    *(_OWORD *)(v1 + 257) = v7[2];
    *(_OWORD *)(v1 + 241) = v5;
    *(_OWORD *)(v1 + 225) = v4;
    *(_DWORD *)(v1 + 273) = 0;
    *(_DWORD *)(v1 + 276) = 0;
    sub_100F34324((uint64_t)v7);
    *(void *)(v1 + 440) = v8;
    long long v6 = v7[1];
    *(_OWORD *)(v1 + 392) = v7[0];
    *(_OWORD *)(v1 + 408) = v6;
    *(_OWORD *)(v1 + 424) = v7[2];
    sub_1000E2E9C(v1 + 448, v9);
    *(_DWORD *)(v1 + 488) = v10;
    return sub_1000D7D80((uint64_t)v9);
  }
  return result;
}

void sub_100F35944(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100F35974(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  uint64_t v6 = (uint64_t)(a1 + 5);
  sub_100F428E8((uint64_t)(a1 + 1), a3);
  sub_10065AB34(v6, a4);
  sub_10192D00C(a1 + 9, *a1);
  operator new();
}

void sub_100F3628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t *a15)
{
  uint64_t v22 = v17[1462];
  v17[1462] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v17[1460];
  v17[1460] = 0;
  if (v23) {
    operator delete();
  }
  uint64_t v24 = v17[1457];
  v17[1457] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v17[1456];
  v17[1456] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v17[1455];
  v17[1455] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *v18;
  *unsigned int v18 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_100F423B0(v19);
  sub_1000F5BB0((uint64_t)(v17 + 193), *v20);
  sub_100F9F508(a13);
  sub_100F42A18(a15, 0);
  sub_1003C2C38(v17 + 60, 0);
  sub_100F38048(v16);
  sub_10065ABCC(v15);
  sub_100854B90(a14);
  _Unwind_Resume(a1);
}

void sub_100F364D8(uint64_t a1, int *a2, long long *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102305DB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102305DB0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F392F0((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F36694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F366B4(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102305DB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onStreamedLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102305DB0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onStreamedLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F39818((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F36870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F36890(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102305DB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onWifiLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102305DB0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onWifiLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F39B84((uint64_t)a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F36A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F36A64(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102305DB0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102305DB0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F39CB8((uint64_t)a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F36C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F36C38(uint64_t a1)
{
  sub_1000E9354(v52);
  CFStringRef v50 = 0;
  CFStringRef str = 0;
  sub_1000C7F88(buf);
  if (sub_100012960(*(uint64_t *)buf, "GpsReferenceLocation", v52)
    && sub_1004D12F8((uint64_t)v52, "Latitude", (CFTypeRef *)&str))
  {
    int v2 = sub_1004D12F8((uint64_t)v52, "Longitude", (CFTypeRef *)&v50);
    if (*(void *)v54) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v54);
    }
    if (v2)
    {
      v63[0] = 0.0;
      unsigned int v49 = 0;
      uint64_t v3 = (uint64_t *)(a1 + 8220);
      *(double *)(a1 + 8220) = CFStringGetDoubleValue(str);
      *(double *)(a1 + 8228) = CFStringGetDoubleValue(v50);
      *(_DWORD *)(a1 + 8348) = 1;
      *(unsigned char *)(a1 + 1569) = 1;
      *(void *)(a1 + 8236) = 0x40A7700000000000;
      if (sub_10006EF84((uint64_t)v52, "LocationType", &v49)) {
        *(_DWORD *)(a1 + 8312) = v49;
      }
      if (sub_1000A699C((uint64_t)v52, "HorizontalUncertainty", v63))
      {
        double v4 = v63[0];
        if (v63[0] <= 0.0)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          long long v5 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)__int16 v54 = 2082;
            *(void *)&v54[2] = "";
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
          }
          uint64_t v6 = qword_1024193D8;
          double v4 = -1.0;
          if (os_signpost_enabled((os_log_t)qword_1024193D8))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)__int16 v54 = 2082;
            *(void *)&v54[2] = "";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: HorizontalUncertainty for GpsReferenceLocation", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
          }
        }
      }
      else
      {
        double v4 = 3000.0;
      }
      *(double *)(a1 + 8236) = v4;
      *(_DWORD *)(a1 + 9016) = 0;
      if (sub_10006EF84((uint64_t)v52, "HorizontalReliability", &v49))
      {
        if (v49 < 5)
        {
          *(_DWORD *)(a1 + 9016) = v49;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v26 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)__int16 v54 = 2082;
            *(void *)&v54[2] = "";
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalReliability\"}", buf, 0x12u);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
          }
          uint64_t v27 = qword_1024193D8;
          if (os_signpost_enabled((os_log_t)qword_1024193D8))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)__int16 v54 = 2082;
            *(void *)&v54[2] = "";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: HorizontalReliability", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalReliability\"}", buf, 0x12u);
          }
        }
      }
      *(_DWORD *)(a1 + 9020) = 0;
      if (sub_1000A699C((uint64_t)v52, "Altitude", v63))
      {
        *(double *)(a1 + 8244) = v63[0];
        if (sub_1000A699C((uint64_t)v52, "VerticalUncertainty", v63))
        {
          double v28 = v63[0];
          if (v63[0] <= 0.0)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
            unint64_t v29 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)__int16 v54 = 2082;
              *(void *)&v54[2] = "";
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102305D90);
              }
            }
            uint64_t v30 = qword_1024193D8;
            double v28 = -1.0;
            if (os_signpost_enabled((os_log_t)qword_1024193D8))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)__int16 v54 = 2082;
              *(void *)&v54[2] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: VerticalUncertainty for GpsReferenceLocation", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
            }
          }
        }
        else
        {
          double v28 = 3000.0;
        }
        *(double *)(a1 + 8252) = v28;
        if (sub_10006EF84((uint64_t)v52, "VerticalReliability", &v49))
        {
          if (v49 < 5)
          {
            *(_DWORD *)(a1 + 9020) = v49;
          }
          else
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102305D90);
            }
            unint64_t v31 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)__int16 v54 = 2082;
              *(void *)&v54[2] = "";
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalReliability\"}", buf, 0x12u);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102305D90);
              }
            }
            float v32 = qword_1024193D8;
            if (os_signpost_enabled((os_log_t)qword_1024193D8))
            {
              *(_DWORD *)buf = 68289026;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)__int16 v54 = 2082;
              *(void *)&v54[2] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: VerticalReliability", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalReliability\"}", buf, 0x12u);
            }
          }
        }
      }
      else
      {
        *(_OWORD *)(a1 + 8244) = xmmword_101D1C570;
      }
      if (*(int *)(a1 + 9016) > 0 || *(int *)(a1 + 9020) >= 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v33 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v34 = *(_DWORD *)(a1 + 8312);
          uint64_t v35 = *v3;
          uint64_t v36 = *(void *)(a1 + 8228);
          uint64_t v38 = *(void *)(a1 + 8236);
          uint64_t v37 = *(void *)(a1 + 8244);
          uint64_t v39 = *(void *)(a1 + 8252);
          int v40 = *(_DWORD *)(a1 + 9016);
          int v41 = *(_DWORD *)(a1 + 9020);
          *(_DWORD *)buf = 68291075;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)__int16 v54 = 2082;
          *(void *)&v54[2] = "";
          __int16 v55 = 1026;
          *(_DWORD *)__int16 v56 = v34;
          *(_WORD *)&v56[4] = 2049;
          *(void *)&v56[6] = v35;
          *(_WORD *)&v56[14] = 2049;
          *(void *)&v56[16] = v36;
          *(_WORD *)&v56[24] = 2050;
          *(void *)&v56[26] = v37;
          *(_WORD *)&v56[34] = 2050;
          *(void *)&v56[36] = v38;
          __int16 v57 = 2050;
          uint64_t v58 = v39;
          __int16 v59 = 1026;
          int v60 = v40;
          __int16 v61 = 1026;
          int v62 = v41;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, forcing tightly-coupled assistance\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"horizontalReliability\":%{public}d, \"verticalReliability\":%{public}d}", buf, 0x56u);
        }
      }
      if ((sub_1000A699C((uint64_t)v52, "timestamp", (void *)(a1 + 8292)) & 1) == 0) {
        *(CFAbsoluteTime *)(a1 + 8292) = CFAbsoluteTimeGetCurrent();
      }
      long long v42 = (double *)(a1 + 9024);
      if (!sub_1000A699C((uint64_t)v52, "Age", (void *)(a1 + 9024))
        || (*(void *)v42 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || *v42 < 0.0)
      {
        *long long v42 = 0.0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v43 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v44 = *v3;
        uint64_t v45 = *(void *)(a1 + 8228);
        uint64_t v46 = *(void *)(a1 + 8292);
        double v47 = *v42;
        *(_DWORD *)buf = 68290051;
        *(_WORD *)__int16 v54 = 2082;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(void *)&v54[2] = "";
        __int16 v55 = 2049;
        *(void *)__int16 v56 = v44;
        *(_WORD *)&v56[8] = 2049;
        *(void *)&v56[10] = v45;
        *(_WORD *)&v56[18] = 2050;
        *(void *)&v56[20] = v46;
        *(_WORD *)&v56[28] = 2050;
        *(double *)&v56[30] = v47;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CL-force reference location\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"timestamp\":\"%{public}.2f\", \"age\":\"%{public}.1f\"}", buf, 0x3Au);
      }
    }
  }
  else if (*(void *)v54)
  {
    sub_1000DB0A0(*(std::__shared_weak_count **)v54);
  }
  unsigned int v49 = 0;
  sub_1000C7F88(buf);
  char v7 = sub_10006EF84(*(uint64_t *)buf, "GpsPositionInjectionEnable", &v49);
  if (*(void *)v54) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v54);
  }
  if (v7)
  {
    int v8 = v49 == 1;
    *(unsigned char *)(a1 + 1570) = v8;
  }
  else
  {
    int v8 = *(unsigned __int8 *)(a1 + 1570);
  }
  if (v8)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v54 = 2082;
      *(void *)&v54[2] = "";
      int v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CPI,enabled\"}";
LABEL_33:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x12u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v54 = 2082;
      *(void *)&v54[2] = "";
      int v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CPI,disabled\"}";
      goto LABEL_33;
    }
  }
  sub_1000C7F88(buf);
  int v11 = sub_10006EF84(*(uint64_t *)buf, "GpsUseCachedLocation", &v49);
  if (*(void *)v54) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v54);
  }
  if (v11) {
    *(unsigned char *)(a1 + 1568) = v49 != 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  unsigned int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(unsigned __int8 *)(a1 + 1568);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v54 = 2082;
    *(void *)&v54[2] = "";
    __int16 v55 = 1026;
    *(_DWORD *)__int16 v56 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition\", \"fUseCachedLocationAssist\":%{public}d}", buf, 0x18u);
  }
  sub_1000C7F88(buf);
  int v14 = sub_10006EF84(*(uint64_t *)buf, "GpsUseDefaultLocationInFarStartTest", &v49);
  if (*(void *)v54) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v54);
  }
  if (v14) {
    *(unsigned char *)(a1 + 1537) = v49 != 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  int v15 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int8 *)(a1 + 1537);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v54 = 2082;
    *(void *)&v54[2] = "";
    __int16 v55 = 1026;
    *(_DWORD *)__int16 v56 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition\", \"fUseDefaultLocInFarStartTest\":%{public}d}", buf, 0x18u);
  }
  float v17 = (uint64_t **)(a1 + 1544);
  sub_1000F5BB0(a1 + 1544, *(void **)(a1 + 1552));
  *(void *)(a1 + 1544) = a1 + 1552;
  *(void *)(a1 + 1560) = 0;
  *(void *)(a1 + 1552) = 0;
  sub_1000C7F88(buf);
  int v18 = sub_1004D5D9C(*(uint64_t *)buf, "GpsPositionAssistanceTypeBlocklist");
  if (*(void *)v54) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v54);
  }
  if (v18)
  {
    int v19 = 0;
    unsigned int v48 = 0;
    do
    {
      sub_1000C7F88(buf);
      char v20 = sub_1004D0870(*(uint64_t *)buf, "GpsPositionAssistanceTypeBlocklist", &v48);
      if (*(void *)v54) {
        sub_1000DB0A0(*(std::__shared_weak_count **)v54);
      }
      if (v20)
      {
        if (v48 < 0xE)
        {
          *(_DWORD *)buf = v48;
          sub_1000EDED4(v17, (int *)buf, buf);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v24 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v48;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,blocking location type,%d", buf, 8u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_79;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          LODWORD(v63[0]) = 67109120;
          HIDWORD(v63[0]) = v48;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::getLocationDefaults()", "%s\n", v22);
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v21 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v48;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#GnssAssistancePosition,unexpected location type,%d", buf, 8u);
          }
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_79;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          LODWORD(v63[0]) = 67109120;
          HIDWORD(v63[0]) = v48;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistancePosition::getLocationDefaults()", "%s\n", v22);
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v23 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#GnssAssistancePosition,unable to retrieve blocked location type at index,%d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_79;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        LODWORD(v63[0]) = 67109120;
        HIDWORD(v63[0]) = v19;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistancePosition::getLocationDefaults()", "%s\n", v22);
      }
      if (v22 != (char *)buf) {
        free(v22);
      }
LABEL_79:
      ++v19;
    }
    while (v18 != v19);
  }
  return sub_10013F3C4(v52);
}

void sub_100F37C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100F37CC4(uint64_t a1)
{
}

void sub_100F37CCC(uint64_t a1)
{
  if (sub_100F406B0(a1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v3 = *(double *)(a1 + 7236) + *(float *)(a1 + 7684);
      uint64_t v4 = *(void *)(a1 + 7244);
      *(_DWORD *)buf = 134218240;
      *(double *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "triggerCellAssistanceDuringEmergency, CellLocation,alt(hae),%f,unc,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::triggerCellAssistanceDuringEmergency()", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    *(_DWORD *)buf = 0xFFFF;
    *(void *)&unsigned char buf[12] = 0;
    *(void *)&uint8_t buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&std::string buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    long long v23 = 0uLL;
    *(void *)&buf[88] = 0xBFF0000000000000;
    *(void *)((char *)&v24 + 4) = 0xBFF0000000000000;
    LODWORD(v24) = 0;
    HIDWORD(v24) = 0x7FFFFFFF;
    memset(v25, 0, 25);
    sub_1000DBC34(v26);
    long long v10 = *(_OWORD *)(a1 + 7320);
    long long v23 = *(_OWORD *)(a1 + 7304);
    long long v24 = v10;
    *(_OWORD *)uint64_t v25 = *(_OWORD *)(a1 + 7336);
    *(_OWORD *)&v25[12] = *(_OWORD *)(a1 + 7348);
    long long v11 = *(_OWORD *)(a1 + 7256);
    *(_OWORD *)&unsigned char buf[32] = *(_OWORD *)(a1 + 7240);
    *(_OWORD *)&uint8_t buf[48] = v11;
    long long v12 = *(_OWORD *)(a1 + 7288);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a1 + 7272);
    *(_OWORD *)&buf[80] = v12;
    long long v13 = *(_OWORD *)(a1 + 7224);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 7208);
    *(_OWORD *)&uint8_t buf[16] = v13;
    memcpy(v14, (const void *)(a1 + 7368), 0x201uLL);
    uint64_t v15 = *(void *)(a1 + 7888);
    int v16 = *(std::__shared_weak_count **)(a1 + 7896);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v26[65] = v15;
    float v17 = v27;
    uint64_t v27 = v16;
    if (v17) {
      sub_1000DB0A0(v17);
    }
    long long v18 = *(_OWORD *)(a1 + 7952);
    long long v19 = *(_OWORD *)(a1 + 7984);
    long long v32 = *(_OWORD *)(a1 + 7968);
    v33[0] = v19;
    long long v20 = *(_OWORD *)(a1 + 7920);
    long long v28 = *(_OWORD *)(a1 + 7904);
    long long v29 = v20;
    long long v30 = *(_OWORD *)(a1 + 7936);
    long long v31 = v18;
    *(void *)((char *)v33 + 13) = *(void *)(a1 + 7997);
    *(void *)&buf[76] = CFAbsoluteTimeGetCurrent();
    v26[43] = sub_10016C458();
    sub_10001C190(a1, (uint64_t)buf, 1, 0);
    if (v27) {
      sub_1000DB0A0(v27);
    }
  }
}

void sub_100F38024(_Unwind_Exception *a1)
{
}

uint64_t sub_100F38048(uint64_t a1)
{
  *(void *)(a1 + 8) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 40));
  return a1;
}

uint64_t sub_100F380A0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 11632) + 16) unregister:*(void *)(*(void *)(a1 + 11632) + 8) forNotification:5];
  uint64_t v2 = *(void *)(a1 + 11640);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:5];
  }
  double v3 = *(void **)(a1 + 11720);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 11720) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 11696);
  *(void *)(a1 + 11696) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 11680);
  *(void *)(a1 + 11680) = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 11656);
  *(void *)(a1 + 11656) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 11648);
  *(void *)(a1 + 11648) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 11640);
  *(void *)(a1 + 11640) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 11632);
  *(void *)(a1 + 11632) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_100F423B0(a1 + 1576);
  sub_1000F5BB0(a1 + 1544, *(void **)(a1 + 1552));
  sub_100F9F508(a1 + 496);
  sub_100F42A18((uint64_t *)(a1 + 488), 0);
  sub_1003C2C38((uint64_t *)(a1 + 480), 0);
  sub_1006B9E58(a1 + 224);
  *(void *)(a1 + 80) = off_1022DE6F0;
  sub_10041F48C((void *)(a1 + 112));
  sub_10065ABCC((void *)(a1 + 40));
  sub_100854B90((void *)(a1 + 8));
  return a1;
}

void sub_100F3828C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,singleShot\"}", (uint8_t *)v3, 0x12u);
  }
  *(unsigned char *)(a1 + 1536) = 1;
  sub_100F38380(a1);
  sub_100F38870(a1);
}

void sub_100F38380(uint64_t a1)
{
  uint64_t v2 = sub_100FA014C(a1 + 496);
  long long v3 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v2;
  *(_OWORD *)&v35[16] = v3;
  long long v4 = *(_OWORD *)(v2 + 80);
  long long v6 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 48);
  long long v37 = *(_OWORD *)(v2 + 64);
  long long v38 = v4;
  *(_OWORD *)&v35[32] = v6;
  long long v36 = v5;
  long long v8 = *(_OWORD *)(v2 + 112);
  long long v7 = *(_OWORD *)(v2 + 128);
  long long v9 = *(_OWORD *)(v2 + 96);
  *(_OWORD *)&v41[12] = *(_OWORD *)(v2 + 140);
  long long v40 = v8;
  *(_OWORD *)int v41 = v7;
  long long v39 = v9;
  memcpy(v42, (const void *)(v2 + 160), sizeof(v42));
  uint64_t v43 = *(void *)(v2 + 680);
  long long v10 = *(std::__shared_weak_count **)(v2 + 688);
  uint64_t v44 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = *(_OWORD *)(v2 + 696);
  long long v12 = *(_OWORD *)(v2 + 728);
  long long v46 = *(_OWORD *)(v2 + 712);
  long long v47 = v12;
  long long v45 = v11;
  long long v13 = *(_OWORD *)(v2 + 744);
  long long v14 = *(_OWORD *)(v2 + 760);
  long long v15 = *(_OWORD *)(v2 + 776);
  *(void *)&v50[13] = *(void *)(v2 + 789);
  long long v49 = v14;
  *(_OWORD *)CFStringRef v50 = v15;
  long long v48 = v13;
  if (sub_100F39FE4(a1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    int v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(a1 + 8312);
      uint64_t v18 = *(void *)(a1 + 8220);
      uint64_t v19 = *(void *)(a1 + 8228);
      uint64_t v20 = *(void *)(a1 + 8244);
      uint64_t v21 = *(void *)(a1 + 8236);
      uint64_t v22 = *(void *)(a1 + 8252);
      uint64_t buf = 68290563;
      __int16 v52 = 2082;
      int v53 = "";
      __int16 v54 = 1026;
      int v55 = v17;
      __int16 v56 = 2049;
      *(void *)__int16 v57 = v18;
      *(_WORD *)&v57[8] = 2049;
      *(void *)&v57[10] = v19;
      *(_WORD *)&v57[18] = 2050;
      *(void *)&v57[20] = v20;
      *(_WORD *)&v57[28] = 2050;
      *(void *)&v57[30] = v21;
      *(_WORD *)&v57[38] = 2050;
      *(void *)&v57[40] = v22;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed tightly coupled location as assistance location\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x4Au);
    }
    sub_10001C190(a1, a1 + 8216, 0, 0);
    goto LABEL_26;
  }
  long long v23 = (unsigned __int8 *)(a1 + 11672);
  if (*(unsigned char *)(a1 + 11672))
  {
    if (*(double *)(a1 + 1596) > 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v24 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = *v23;
        int v26 = *(_DWORD *)(a1 + 1672);
        uint64_t v27 = *(void *)(a1 + 1580);
        uint64_t v28 = *(void *)(a1 + 1588);
        uint64_t v30 = *(void *)(a1 + 1596);
        uint64_t v29 = *(void *)(a1 + 1604);
        uint64_t v31 = *(void *)(a1 + 1612);
        uint64_t buf = 68290819;
        __int16 v52 = 2082;
        int v53 = "";
        __int16 v54 = 1026;
        int v55 = v25;
        __int16 v56 = 1026;
        *(_DWORD *)__int16 v57 = v26;
        *(_WORD *)&v57[4] = 2049;
        *(void *)&v57[6] = v27;
        *(_WORD *)&v57[14] = 2049;
        *(void *)&v57[16] = v28;
        *(_WORD *)&v57[24] = 2050;
        *(void *)&v57[26] = v29;
        *(_WORD *)&v57[34] = 2050;
        *(void *)&v57[36] = v30;
        *(_WORD *)&v57[44] = 2050;
        *(void *)&v57[46] = v31;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed cached reference location as assistance location\", \"isEmergency\":%{public}d, \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x50u);
      }
      sub_10001C190(a1, a1 + 1576, 0, 0);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (*(double *)&v35[20] <= 0.0)
  {
LABEL_22:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    int v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289026;
      __int16 v52 = 2082;
      int v53 = "";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cached reference location not available\"}", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_26;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  long long v32 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = *v23;
    uint64_t buf = 68290819;
    __int16 v52 = 2082;
    int v53 = "";
    __int16 v54 = 1026;
    int v55 = v33;
    __int16 v56 = 1026;
    *(_DWORD *)__int16 v57 = v39;
    *(_WORD *)&v57[4] = 2049;
    *(void *)&v57[6] = *(void *)&v35[4];
    *(_WORD *)&v57[14] = 2049;
    *(void *)&v57[16] = *(void *)&v35[12];
    *(_WORD *)&v57[24] = 2050;
    *(void *)&v57[26] = *(void *)&v35[28];
    *(_WORD *)&v57[34] = 2050;
    *(void *)&v57[36] = *(void *)&v35[20];
    *(_WORD *)&v57[44] = 2050;
    *(void *)&v57[46] = *(void *)&v35[36];
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed cached reference location as assistance location\", \"isEmergency\":%{public}d, \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x50u);
  }
  sub_10001C190(a1, (uint64_t)v35, 0, 0);
  long long v10 = v44;
LABEL_26:
  if (v10) {
    sub_1000DB0A0(v10);
  }
}

void sub_100F38858(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

void sub_100F38870(uint64_t a1)
{
  *(unsigned char *)(a1 + 1536) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,stop\"}", buf, 0x12u);
  }
  sub_100F38F40((char *)a1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Clearing info in CPI handler\"}", buf, 0x12u);
  }
  sub_10192D050(a1 + 72);
  *(_DWORD *)(a1 + 4656) = 0xFFFF;
  *(_OWORD *)(a1 + 4660) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 4676) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 4692) = _Q0;
  *(_OWORD *)(a1 + 4708) = _Q0;
  *(_OWORD *)(a1 + 4724) = _Q0;
  *(_DWORD *)(a1 + 4740) = 0;
  *(void *)(a1 + 4744) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_DWORD *)(a1 + 4768) = 0;
  *(void *)(a1 + 4772) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4780) = 0x7FFFFFFF;
  *(void *)(a1 + 4784) = 0;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(unsigned char *)(a1 + 4808) = 0;
  *(_DWORD *)(a1 + 4812) = 0xFFFF;
  *(_OWORD *)(a1 + 4816) = 0u;
  long long v27 = _Q0;
  *(_OWORD *)(a1 + 4832) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 4848) = _Q0;
  *(_OWORD *)(a1 + 4864) = _Q0;
  *(_OWORD *)(a1 + 4880) = _Q0;
  *(_DWORD *)(a1 + 4896) = 0;
  *(void *)(a1 + 4900) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4924) = 0;
  *(_OWORD *)(a1 + 4908) = 0u;
  *(void *)(a1 + 4928) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4936) = 0x7FFFFFFF;
  *(void *)(a1 + 4956) = 0;
  *(_OWORD *)(a1 + 4940) = 0u;
  *(unsigned char *)(a1 + 4964) = 0;
  sub_1000DBC34(buf);
  memcpy((void *)(a1 + 4968), buf, 0x201uLL);
  long long v9 = v29;
  long long v29 = 0u;
  long long v10 = *(std::__shared_weak_count **)(a1 + 5496);
  *(_OWORD *)(a1 + 5488) = v9;
  if (v10)
  {
    sub_1000DB0A0(v10);
    long long v11 = v32;
    *(_OWORD *)(a1 + 5552) = v33;
    long long v12 = v35[0];
    *(_OWORD *)(a1 + 5568) = v34;
    *(_OWORD *)(a1 + 5584) = v12;
    long long v13 = v31;
    *(_OWORD *)(a1 + 5504) = v30;
    *(_OWORD *)(a1 + 5520) = v13;
    long long v14 = (std::__shared_weak_count *)*((void *)&v29 + 1);
    *(void *)(a1 + 5597) = *(void *)((char *)v35 + 13);
    *(_OWORD *)(a1 + 5536) = v11;
    if (v14) {
      sub_1000DB0A0(v14);
    }
  }
  else
  {
    long long v15 = v32;
    *(_OWORD *)(a1 + 5552) = v33;
    long long v16 = v35[0];
    *(_OWORD *)(a1 + 5568) = v34;
    *(_OWORD *)(a1 + 5584) = v16;
    long long v17 = v31;
    *(_OWORD *)(a1 + 5504) = v30;
    *(_OWORD *)(a1 + 5520) = v17;
    *(void *)(a1 + 5597) = *(void *)((char *)v35 + 13);
    *(_OWORD *)(a1 + 5536) = v15;
  }
  *(_DWORD *)(a1 + 5608) = 0xFFFF;
  *(_OWORD *)(a1 + 5612) = 0u;
  *(_OWORD *)(a1 + 5628) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 5644) = v27;
  *(_OWORD *)(a1 + 5660) = v27;
  *(_OWORD *)(a1 + 5676) = v27;
  *(_DWORD *)(a1 + 5692) = 0;
  *(void *)(a1 + 5696) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 5704) = 0u;
  *(_DWORD *)(a1 + 5720) = 0;
  *(void *)(a1 + 5724) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 5732) = 0x7FFFFFFF;
  *(void *)(a1 + 5736) = 0;
  *(_OWORD *)(a1 + 5744) = 0u;
  *(unsigned char *)(a1 + 5760) = 0;
  sub_1000DBC34(buf);
  memcpy((void *)(a1 + 5768), buf, 0x201uLL);
  long long v18 = v29;
  long long v29 = 0u;
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 6296);
  *(_OWORD *)(a1 + 6288) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    long long v20 = v32;
    *(_OWORD *)(a1 + 6352) = v33;
    long long v21 = v35[0];
    *(_OWORD *)(a1 + 6368) = v34;
    *(_OWORD *)(a1 + 6384) = v21;
    long long v22 = v31;
    *(_OWORD *)(a1 + 6304) = v30;
    *(_OWORD *)(a1 + 6320) = v22;
    long long v23 = (std::__shared_weak_count *)*((void *)&v29 + 1);
    *(void *)(a1 + 6397) = *(void *)((char *)v35 + 13);
    *(_OWORD *)(a1 + 6336) = v20;
    if (v23) {
      sub_1000DB0A0(v23);
    }
  }
  else
  {
    long long v24 = v32;
    *(_OWORD *)(a1 + 6352) = v33;
    long long v25 = v35[0];
    *(_OWORD *)(a1 + 6368) = v34;
    *(_OWORD *)(a1 + 6384) = v25;
    long long v26 = v31;
    *(_OWORD *)(a1 + 6304) = v30;
    *(_OWORD *)(a1 + 6320) = v26;
    *(void *)(a1 + 6397) = *(void *)((char *)v35 + 13);
    *(_OWORD *)(a1 + 6336) = v24;
  }
  *(_DWORD *)(a1 + 11552) = 0;
  *(unsigned char *)(a1 + 1572) = 0;
}

void sub_100F38C98(char *a1)
{
  sub_100F36C38((uint64_t)a1);
  a1[1536] = 1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    long long v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,start\"}", (uint8_t *)v3, 0x12u);
  }
  sub_100F38D98(a1);
  sub_100F38380((uint64_t)a1);
  a1[76] = 1;
}

char *sub_100F38D98(char *result)
{
  uint64_t v1 = result + 11688;
  if (!result[11688])
  {
    uint64_t v2 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      long long v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,TBA, registered for tunnel and bridge assistance notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    [*(id *)(*((void *)v2 + 1462) + 16) register:*(void *)(*((void *)v2 + 1462) + 8) forNotification:4 registrationInfo:0];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    __int16 v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      long long v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, registered for tunnel end point notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    uint64_t result = (char *)[*(id *)(*((void *)v2 + 1462) + 16) register:*(void *)(*((void *)v2 + 1462) + 8) forNotification:5 registrationInfo:0];
    *uint64_t v1 = 1;
  }
  return result;
}

char *sub_100F38F40(char *result)
{
  uint64_t v1 = result + 11688;
  if (result[11688])
  {
    uint64_t v2 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      long long v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,TAB, unregistered for tunnel and bridge assistance notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    [*(id *)(*((void *)v2 + 1462) + 16) unregister:*(void *)(*((void *)v2 + 1462) + 8) forNotification:4];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    __int16 v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      long long v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, unregistered for tunnel end point notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    uint64_t result = (char *)[*(id *)(*((void *)v2 + 1462) + 16) unregister:*(void *)(*((void *)v2 + 1462) + 8) forNotification:5];
    *uint64_t v1 = 0;
  }
  return result;
}

void sub_100F39118(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  __int16 v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GnssAssistancePosition: injectReferenceLocationFromRefPosMaintenance,type,%{public}d ", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::injectReferenceLocationFromRefPosMaintenance(GNSS::DaemonLocation)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_100FA0298(a1 + 496, a2);
  sub_10001C190(a1, a2, 0, 1);
}

void sub_100F392F0(uint64_t a1, uint64_t a2, int *a3, long long *a4)
{
  if (*a3 == 4)
  {
    if (*((unsigned char *)a4 + 42))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v11 = *(double *)a4;
        uint64_t v12 = *((void *)a4 + 2);
        uint64_t v13 = *((void *)a4 + 3);
        int v14 = *((unsigned __int8 *)a4 + 42);
        *(_DWORD *)uint64_t buf = 68290051;
        LODWORD(v39) = 0;
        WORD2(v39) = 2082;
        *(void *)((char *)&v39 + 6) = "";
        HIWORD(v39) = 2050;
        *(double *)long long v40 = v11;
        *(_WORD *)&v40[8] = 2049;
        *(void *)&v40[10] = v12;
        *(_WORD *)&v40[18] = 2049;
        *(void *)&v40[20] = v13;
        *(_WORD *)&v40[28] = 1026;
        *(_DWORD *)&v40[30] = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,received TBA\", \"time\":\"%{public}.2f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"isTunnel\":%{public}hhd}", buf, 0x36u);
      }
      long long v15 = *a4;
      long long v16 = a4[1];
      *(_OWORD *)(a1 + 4640) = a4[2];
      *(_OWORD *)(a1 + 4624) = v16;
      *(_OWORD *)(a1 + 4608) = v15;
    }
  }
  else if (*a3 == 5)
  {
    if (*((unsigned char *)a4 + 80))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      __int16 v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v8 = *a3;
        *(_DWORD *)uint64_t buf = 68289282;
        LODWORD(v39) = 0;
        WORD2(v39) = 2082;
        *(void *)((char *)&v39 + 6) = "";
        HIWORD(v39) = 1026;
        *(_DWORD *)long long v40 = v8;
        long long v9 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, TEPA ignored as it is produced when GNSS fix is available\""
             ", \"notification\":%{public}d}";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, v9, buf, 0x18u);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v18 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v19 = *(double *)a4;
        uint64_t v20 = *((void *)a4 + 1);
        uint64_t v21 = *((void *)a4 + 2);
        uint64_t v22 = *((void *)a4 + 3);
        uint64_t v23 = *((void *)a4 + 6);
        uint64_t v24 = *((void *)a4 + 7);
        int v25 = *((_DWORD *)a4 + 19);
        *(_DWORD *)uint64_t buf = 68290819;
        LODWORD(v39) = 0;
        WORD2(v39) = 2082;
        *(void *)((char *)&v39 + 6) = "";
        HIWORD(v39) = 2050;
        *(double *)long long v40 = v19;
        *(_WORD *)&v40[8] = 2049;
        *(void *)&v40[10] = v20;
        *(_WORD *)&v40[18] = 2049;
        *(void *)&v40[20] = v21;
        *(_WORD *)&v40[28] = 2050;
        *(void *)&v40[30] = v22;
        *(_WORD *)&v40[38] = 2050;
        *(void *)&v40[40] = v23;
        LOWORD(v41) = 2050;
        *(void *)((char *)&v41 + 2) = v24;
        WORD5(v41) = 1026;
        HIDWORD(v41) = v25;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Received TEPA\", \"time\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hunc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\", \"refFrame\":%{public}d}", buf, 0x54u);
      }
      *(_DWORD *)uint64_t buf = 0xFFFF;
      long long v39 = 0uLL;
      *(_OWORD *)long long v40 = xmmword_101D1C320;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v40[16] = _Q0;
      *(_OWORD *)&v40[32] = _Q0;
      long long v41 = _Q0;
      int v42 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      unint64_t v43 = 0xBFF0000000000000;
      int v46 = 0;
      unint64_t v47 = 0xBFF0000000000000;
      int v48 = 0x7FFFFFFF;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      char v52 = 0;
      sub_1000DBC34(v53);
      *((void *)&v41 + 1) = *(void *)a4;
      long long v39 = *(long long *)((char *)a4 + 8);
      *(_OWORD *)&v40[8] = a4[3];
      v53[356] = 1;
      *(void *)long long v40 = *((void *)a4 + 3);
      LODWORD(v44) = 0;
      int v42 = 90;
      HIDWORD(v49) = *((_DWORD *)a4 + 19);
      double v31 = sub_100121610((uint64_t)buf, (uint64_t)v53);
      if (*(double *)a4 >= 0.0 && sub_1000E6DB4((uint64_t)buf) && v31 <= 10.0)
      {
        if (*(unsigned char *)(a1 + 11672))
        {
          *(void *)long long v40 = 0x4062A00000000000;
          int v42 = 69;
        }
        sub_10001C190(a1, (uint64_t)buf, 1, 1);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        long long v32 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          v33[0] = 68289282;
          v33[1] = 0;
          __int16 v34 = 2082;
          uint64_t v35 = "";
          __int16 v36 = 2050;
          double v37 = v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,not feeding TEPA,invalid data or timedout\", \"age\":\"%{public}.1f\"}", (uint8_t *)v33, 0x1Cu);
        }
      }
      if (v54) {
        sub_1000DB0A0(v54);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *a3;
      *(_DWORD *)uint64_t buf = 68289282;
      LODWORD(v39) = 0;
      WORD2(v39) = 2082;
      *(void *)((char *)&v39 + 6) = "";
      HIWORD(v39) = 1026;
      *(_DWORD *)long long v40 = v17;
      long long v9 = "{\"msg%{public}.0s\":\"#Warning, #GnssAssistancePosition, Unsupported notification\", \"notification\":%{public}d}";
      goto LABEL_18;
    }
  }
}

void sub_100F397FC(_Unwind_Exception *a1)
{
  if (STACK[0x2D0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2D0]);
  }
  _Unwind_Resume(a1);
}

void sub_100F39818(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  __int16 v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)uint64_t v28 = 68289026;
    *(_WORD *)&v28[8] = 2082;
    *(void *)&v28[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Received streamed location notification.\"}", v28, 0x12u);
  }
  if (*a3 == 5)
  {
    *(_DWORD *)uint64_t v28 = 0xFFFF;
    *(_OWORD *)&v28[4] = 0uLL;
    *(_OWORD *)&v28[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v28[36] = _Q0;
    *(_OWORD *)&v28[52] = _Q0;
    *(_OWORD *)&v28[68] = _Q0;
    *(_DWORD *)&v28[84] = 0;
    long long v29 = 0uLL;
    *(void *)&v28[88] = 0xBFF0000000000000;
    LODWORD(v30) = 0;
    *(void *)((char *)&v30 + 4) = 0xBFF0000000000000;
    HIDWORD(v30) = 0x7FFFFFFF;
    memset(v31, 0, 25);
    sub_1000DBC34(v32);
    long long v13 = *(_OWORD *)(a4 + 112);
    long long v29 = *(_OWORD *)(a4 + 96);
    long long v30 = v13;
    *(_OWORD *)double v31 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v31[12] = *(_OWORD *)(a4 + 140);
    long long v14 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v28[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v28[48] = v14;
    long long v15 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&v28[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v28[80] = v15;
    long long v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)uint64_t v28 = *(_OWORD *)a4;
    *(_OWORD *)&v28[16] = v16;
    memcpy(v17, (const void *)(a4 + 160), 0x201uLL);
    uint64_t v18 = *(void *)(a4 + 680);
    double v19 = *(std::__shared_weak_count **)(a4 + 688);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v32[65] = v18;
    uint64_t v20 = v33;
    long long v33 = v19;
    if (v20) {
      sub_1000DB0A0(v20);
    }
    long long v21 = *(_OWORD *)(a4 + 776);
    long long v38 = *(_OWORD *)(a4 + 760);
    v39[0] = v21;
    *(void *)((char *)v39 + 13) = *(void *)(a4 + 789);
    long long v22 = *(_OWORD *)(a4 + 712);
    long long v34 = *(_OWORD *)(a4 + 696);
    long long v35 = v22;
    long long v23 = *(_OWORD *)(a4 + 744);
    long long v36 = *(_OWORD *)(a4 + 728);
    long long v37 = v23;
    sub_10001C190(a1, (uint64_t)v28, 0, 1);
    if (v33) {
      sub_1000DB0A0(v33);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v25 = *a3;
      *(_DWORD *)uint64_t v28 = 68289282;
      *(_DWORD *)&v28[4] = 0;
      *(_WORD *)&v28[8] = 2082;
      *(void *)&v28[10] = "";
      *(_WORD *)&v28[18] = 1026;
      *(_DWORD *)&v28[20] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unhandled notification\", \"notification\":%{public}d}", v28, 0x18u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
    }
    long long v26 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v27 = *a3;
      *(_DWORD *)uint64_t v28 = 68289282;
      *(_DWORD *)&v28[4] = 0;
      *(_WORD *)&v28[8] = 2082;
      *(void *)&v28[10] = "";
      *(_WORD *)&v28[18] = 1026;
      *(_DWORD *)&v28[20] = v27;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, Unhandled notification", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unhandled notification\", \"notification\":%{public}d}", v28, 0x18u);
    }
  }
}

void sub_100F39B6C(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

void sub_100F39B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 11672);
    uint64_t v8 = *(void *)(a4 + 4);
    uint64_t v9 = *(void *)(a4 + 12);
    uint64_t v10 = *(void *)(a4 + 20);
    int v11 = *(_DWORD *)(a4 + 84);
    v12[0] = 68290307;
    v12[1] = 0;
    __int16 v13 = 2082;
    long long v14 = "";
    __int16 v15 = 1026;
    int v16 = v7;
    __int16 v17 = 2049;
    uint64_t v18 = v8;
    __int16 v19 = 2049;
    uint64_t v20 = v9;
    __int16 v21 = 2050;
    uint64_t v22 = v10;
    __int16 v23 = 1026;
    int v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, WiFi location notification received\", \"isEmergency\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"conf\":%{public}d}", (uint8_t *)v12, 0x3Cu);
  }
}

void sub_100F39CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 11672);
    uint64_t v8 = *(void *)(a4 + 4);
    uint64_t v9 = *(void *)(a4 + 12);
    uint64_t v10 = *(void *)(a4 + 20);
    v11[0] = 68290051;
    v11[1] = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 1026;
    int v15 = v7;
    __int16 v16 = 2049;
    uint64_t v17 = v8;
    __int16 v18 = 2049;
    uint64_t v19 = v9;
    __int16 v20 = 2050;
    uint64_t v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cell location notification received\", \"isEmergency\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\"}", (uint8_t *)v11, 0x36u);
  }
}

void sub_100F39DE0(uint64_t a1, uint64_t a2)
{
  double v4 = sub_10016C458();
  double v5 = vabdd_f64(v4, *(double *)(a1 + 11608));
  if (*(double *)(a2 + 96) <= 0.0)
  {
    BOOL v20 = v5 < 1.5;
    int v21 = sub_100016E64(*(void *)(a1 + 480));
    sub_10192D094(a1 + 72, 0, v21, *(_DWORD *)(a1 + 11552), v20, v4, -1.0, -1.0);
    *(unsigned char *)(a1 + 1572) = 0;
  }
  else
  {
    BOOL v6 = v5 < 1.5;
    double v7 = *(double *)(a2 + 32);
    float v8 = *(double *)(a2 + 152);
    int v9 = sub_100016E64(*(void *)(a1 + 480));
    sub_10192D094(a1 + 72, 0, v9, *(_DWORD *)(a1 + 11552), v6, v7, v8, -1.0);
    sub_10083CCCC(a2, 0, 0, (uint64_t)v25);
    long long v10 = v25[7];
    *(_OWORD *)(a1 + 5704) = v25[6];
    *(_OWORD *)(a1 + 5720) = v10;
    *(_OWORD *)(a1 + 5736) = v26[0];
    *(_OWORD *)(a1 + 5748) = *(_OWORD *)((char *)v26 + 12);
    long long v11 = v25[3];
    *(_OWORD *)(a1 + 5640) = v25[2];
    *(_OWORD *)(a1 + 5656) = v11;
    long long v12 = v25[5];
    *(_OWORD *)(a1 + 5672) = v25[4];
    *(_OWORD *)(a1 + 5688) = v12;
    long long v13 = v25[1];
    *(_OWORD *)(a1 + 5608) = v25[0];
    *(_OWORD *)(a1 + 5624) = v13;
    memcpy((void *)(a1 + 5768), v27, 0x201uLL);
    long long v14 = v28;
    long long v28 = 0u;
    int v15 = *(std::__shared_weak_count **)(a1 + 6296);
    *(_OWORD *)(a1 + 6288) = v14;
    if (v15)
    {
      sub_1000DB0A0(v15);
      long long v16 = v31;
      *(_OWORD *)(a1 + 6352) = v32;
      long long v17 = *(_OWORD *)v34;
      *(_OWORD *)(a1 + 6368) = v33;
      *(_OWORD *)(a1 + 6384) = v17;
      long long v18 = v30;
      *(_OWORD *)(a1 + 6304) = v29;
      *(_OWORD *)(a1 + 6320) = v18;
      uint64_t v19 = (std::__shared_weak_count *)*((void *)&v28 + 1);
      *(void *)(a1 + 6397) = *(void *)&v34[13];
      *(_OWORD *)(a1 + 6336) = v16;
      if (v19) {
        sub_1000DB0A0(v19);
      }
    }
    else
    {
      long long v22 = v31;
      *(_OWORD *)(a1 + 6352) = v32;
      long long v23 = *(_OWORD *)v34;
      *(_OWORD *)(a1 + 6368) = v33;
      *(_OWORD *)(a1 + 6384) = v23;
      long long v24 = v30;
      *(_OWORD *)(a1 + 6304) = v29;
      *(_OWORD *)(a1 + 6320) = v24;
      *(void *)(a1 + 6397) = *(void *)&v34[13];
      *(_OWORD *)(a1 + 6336) = v22;
    }
  }
}

uint64_t sub_100F39FDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 11552) = a2;
  return result;
}

BOOL sub_100F39FE4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1537)) {
    return 0;
  }
  BOOL result = sub_10019E658(a1, a1 + 8216, *(double *)(a1 + 9024));
  if (result)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 9024);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      double v7 = "";
      __int16 v8 = 2050;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,useTightlyCoupledPosInFarStartTest\", \"age\":\"%{public}f\"}", (uint8_t *)v5, 0x1Cu);
    }
    return 1;
  }
  return result;
}

uint64_t sub_100F3A0F8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"getVerifiedConfidenceForEmergency,called\"}", buf, 0x12u);
  }
  if ((*(_DWORD *)(a2 + 96) - 6) > 2)
  {
    int v83 = (unsigned char *)(a1 + 11672);
    int v8 = sub_1000E6DB4(a1 + 6408);
    int v9 = sub_1000E6DB4(a1 + 8008);
    long long v125 = xmmword_101D82F18;
    long long v126 = xmmword_101D82F28;
    memset(v127, 0, 28);
    long long v121 = xmmword_101D82ED8;
    long long v122 = xmmword_101D82EE8;
    long long v123 = xmmword_101D82EF8;
    long long v124 = xmmword_101D82F08;
    *(_OWORD *)uint64_t buf = xmmword_101D82EB8;
    *(_OWORD *)&uint8_t buf[16] = xmmword_101D82EC8;
    long long v108 = *(_OWORD *)(a1 + 6504);
    long long v109 = *(_OWORD *)(a1 + 6520);
    *(_OWORD *)int v110 = *(_OWORD *)(a1 + 6536);
    *(_OWORD *)&v110[12] = *(_OWORD *)(a1 + 6548);
    long long v104 = *(_OWORD *)(a1 + 6440);
    long long v105 = *(_OWORD *)(a1 + 6456);
    long long v106 = *(_OWORD *)(a1 + 6472);
    long long v107 = *(_OWORD *)(a1 + 6488);
    long long v102 = *(_OWORD *)(a1 + 6408);
    long long v103 = *(_OWORD *)(a1 + 6424);
    long long v90 = *(_OWORD *)(a1 + 8104);
    long long v91 = *(_OWORD *)(a1 + 8120);
    *(_OWORD *)int v92 = *(_OWORD *)(a1 + 8136);
    *(_OWORD *)&v92[12] = *(_OWORD *)(a1 + 8148);
    long long v86 = *(_OWORD *)(a1 + 8040);
    long long v87 = *(_OWORD *)(a1 + 8056);
    long long v88 = *(_OWORD *)(a1 + 8072);
    long long v89 = *(_OWORD *)(a1 + 8088);
    long long v84 = *(_OWORD *)(a1 + 8008);
    long long v85 = *(_OWORD *)(a1 + 8024);
    long long v99 = *(_OWORD *)(a2 + 96);
    long long v100 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)int v101 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)&v101[12] = *(_OWORD *)(a2 + 140);
    long long v95 = *(_OWORD *)(a2 + 32);
    long long v96 = *(_OWORD *)(a2 + 48);
    long long v97 = *(_OWORD *)(a2 + 64);
    long long v98 = *(_OWORD *)(a2 + 80);
    long long v93 = *(_OWORD *)a2;
    long long v94 = *(_OWORD *)(a2 + 16);
    if ((sub_1000E6DB4(a2) & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v111 = 68289026;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Invalid location assistance\"}", v111, 0x12u);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
      }
      long long v14 = qword_1024193D8;
      if (os_signpost_enabled((os_log_t)qword_1024193D8))
      {
        *(_DWORD *)int v111 = 68289026;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, Invalid location assistance", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Invalid location assistance\"}", v111, 0x12u);
      }
      uint64_t v15 = 0x1000010001;
      goto LABEL_79;
    }
    uint64_t v7 = *(unsigned int *)(a2 + 84);
    if (v7 <= 0x40)
    {
      if (*v83)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v10 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_56;
        }
        *(_DWORD *)int v111 = 68289538;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        __int16 v115 = 1026;
        *(_DWORD *)int v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = -1;
        long long v11 = v10;
        os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v29 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_56;
        }
        *(_DWORD *)int v111 = 68289538;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        __int16 v115 = 1026;
        *(_DWORD *)int v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = -1;
        long long v11 = v29;
        os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, downgrade,conf doesn't meet E911 requirement\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_56:
      uint64_t v15 = 0x800010001;
LABEL_79:
      *(void *)(a1 + 3976) = v15;
      uint64_t v7 = 0xFFFFFFFFLL;
LABEL_80:
      long long v39 = v126;
      *(_OWORD *)(a1 + 4080) = v125;
      *(_OWORD *)(a1 + 4096) = v39;
      *(_OWORD *)(a1 + 4112) = v127[0];
      long long v40 = v122;
      *(_OWORD *)(a1 + 4016) = v121;
      *(_OWORD *)(a1 + 4032) = v40;
      long long v41 = v124;
      *(_OWORD *)(a1 + 4048) = v123;
      *(_OWORD *)(a1 + 4064) = v41;
      long long v42 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 3984) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 4000) = v42;
      *(_OWORD *)(a1 + 4124) = *(_OWORD *)((char *)v127 + 12);
      *(_OWORD *)(a1 + 4236) = v108;
      *(_OWORD *)(a1 + 4252) = v109;
      *(_OWORD *)(a1 + 4268) = *(_OWORD *)v110;
      *(_OWORD *)(a1 + 4280) = *(_OWORD *)&v110[12];
      *(_OWORD *)(a1 + 4172) = v104;
      *(_OWORD *)(a1 + 4188) = v105;
      *(_OWORD *)(a1 + 4204) = v106;
      *(_OWORD *)(a1 + 4220) = v107;
      *(_OWORD *)(a1 + 4140) = v102;
      *(_OWORD *)(a1 + 4156) = v103;
      *(_OWORD *)(a1 + 4392) = v99;
      *(_OWORD *)(a1 + 4408) = v100;
      *(_OWORD *)(a1 + 4424) = *(_OWORD *)v101;
      *(_OWORD *)(a1 + 4436) = *(_OWORD *)&v101[12];
      *(_OWORD *)(a1 + 4328) = v95;
      *(_OWORD *)(a1 + 4344) = v96;
      *(_OWORD *)(a1 + 4360) = v97;
      *(_OWORD *)(a1 + 4376) = v98;
      *(_OWORD *)(a1 + 4296) = v93;
      *(_OWORD *)(a1 + 4312) = v94;
      *(_OWORD *)(a1 + 4548) = v90;
      *(_OWORD *)(a1 + 4564) = v91;
      *(_OWORD *)(a1 + 4580) = *(_OWORD *)v92;
      *(_OWORD *)(a1 + 4592) = *(_OWORD *)&v92[12];
      *(_OWORD *)(a1 + 4484) = v86;
      *(_OWORD *)(a1 + 4500) = v87;
      *(_OWORD *)(a1 + 4516) = v88;
      *(_OWORD *)(a1 + 4532) = v89;
      *(_OWORD *)(a1 + 4452) = v84;
      *(_OWORD *)(a1 + 4468) = v85;
      return v7;
    }
    double v16 = -1.0;
    double v17 = -1.0;
    if (v8)
    {
      sub_1000F1268((double *)(a1 + 11560), a1 + 6408, a2);
      double v17 = v18;
    }
    if (v9)
    {
      sub_1000F1268((double *)(a1 + 11560), a1 + 8008, a2);
      double v16 = v19;
      uint64_t v20 = v8 ^ 1u;
    }
    else
    {
      uint64_t v20 = v8 ^ 1 | 2u;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    int v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v111 = 68290050;
      __int16 v113 = 2082;
      int v112 = 0;
      v114 = "";
      __int16 v115 = 1026;
      *(_DWORD *)int v116 = v8;
      *(_WORD *)&v116[4] = 1026;
      *(_DWORD *)&v116[6] = v9;
      *(_WORD *)int v117 = 2050;
      *(double *)&v117[2] = v17;
      __int16 v118 = 2050;
      double v119 = v16;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition\", \"CellLocationValid\":%{public}d, \"LacLocationValid\":%{public}d, \"distFromWifiToCell\":\"%{public}f\", \"distFromWifiToLAC\":\"%{public}f\"}", v111, 0x32u);
    }
    if ((v8 | v9))
    {
      uint64_t v22 = v20;
      if ((*(_DWORD *)(a2 + 96) - 6) < 3) {
        goto LABEL_88;
      }
      if (v17 > 0.0 && v17 < 40000.0)
      {
        if (*v83)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v23 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_124;
          }
          *(_DWORD *)int v111 = 68289282;
          int v112 = 0;
          __int16 v113 = 2082;
          v114 = "";
          __int16 v115 = 1026;
          *(_DWORD *)int v116 = v7;
          long long v24 = v23;
          os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v62 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_124;
          }
          *(_DWORD *)int v111 = 68289282;
          int v112 = 0;
          __int16 v113 = 2082;
          v114 = "";
          __int16 v115 = 1026;
          *(_DWORD *)int v116 = v7;
          long long v24 = v62;
          os_log_type_t v25 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cell cross check passed\", \"conf\":%{public}d}", v111, 0x18u);
LABEL_124:
        long long v63 = *(_OWORD *)(a2 + 112);
        long long v125 = *(_OWORD *)(a2 + 96);
        long long v126 = v63;
        v127[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
        long long v64 = *(_OWORD *)(a2 + 48);
        long long v121 = *(_OWORD *)(a2 + 32);
        long long v122 = v64;
        long long v65 = *(_OWORD *)(a2 + 80);
        long long v123 = *(_OWORD *)(a2 + 64);
        long long v124 = v65;
        long long v66 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t buf = *(_OWORD *)a2;
        *(_OWORD *)&uint8_t buf[16] = v66;
        uint64_t v67 = (v20 << 32) | 1;
LABEL_143:
        *(void *)(a1 + 3976) = v67;
        goto LABEL_80;
      }
      if (*v83)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v33 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_87;
        }
        *(_DWORD *)int v111 = 68289538;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        __int16 v115 = 2050;
        *(void *)int v116 = 0x40E3880000000000;
        *(_WORD *)&v116[8] = 2050;
        *(double *)int v117 = v17;
        long long v34 = v33;
        os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v44 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_87;
        }
        *(_DWORD *)int v111 = 68289538;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        __int16 v115 = 2050;
        *(void *)int v116 = 0x40E3880000000000;
        *(_WORD *)&v116[8] = 2050;
        *(double *)int v117 = v17;
        long long v34 = v44;
        os_log_type_t v35 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cell cross check failed\", \"threshold\":\"%{public}f\", \"distToCell\":\"%{public}.1f\"}", v111, 0x26u);
LABEL_87:
      uint64_t v22 = v20 | 0x40;
      *(void *)(a1 + 3976) = (v22 << 32) | 0x10001;
      long long v45 = v126;
      *(_OWORD *)(a1 + 4080) = v125;
      *(_OWORD *)(a1 + 4096) = v45;
      *(_OWORD *)(a1 + 4112) = v127[0];
      long long v46 = v122;
      *(_OWORD *)(a1 + 4016) = v121;
      *(_OWORD *)(a1 + 4032) = v46;
      long long v47 = v124;
      *(_OWORD *)(a1 + 4048) = v123;
      *(_OWORD *)(a1 + 4064) = v47;
      long long v48 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 3984) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 4000) = v48;
      *(_OWORD *)(a1 + 4124) = *(_OWORD *)((char *)v127 + 12);
      *(_OWORD *)(a1 + 4236) = v108;
      *(_OWORD *)(a1 + 4252) = v109;
      *(_OWORD *)(a1 + 4268) = *(_OWORD *)v110;
      *(_OWORD *)(a1 + 4280) = *(_OWORD *)&v110[12];
      *(_OWORD *)(a1 + 4172) = v104;
      *(_OWORD *)(a1 + 4188) = v105;
      *(_OWORD *)(a1 + 4204) = v106;
      *(_OWORD *)(a1 + 4220) = v107;
      *(_OWORD *)(a1 + 4140) = v102;
      *(_OWORD *)(a1 + 4156) = v103;
      *(_OWORD *)(a1 + 4392) = v99;
      *(_OWORD *)(a1 + 4408) = v100;
      *(_OWORD *)(a1 + 4424) = *(_OWORD *)v101;
      *(_OWORD *)(a1 + 4436) = *(_OWORD *)&v101[12];
      *(_OWORD *)(a1 + 4328) = v95;
      *(_OWORD *)(a1 + 4344) = v96;
      *(_OWORD *)(a1 + 4360) = v97;
      *(_OWORD *)(a1 + 4376) = v98;
      *(_OWORD *)(a1 + 4296) = v93;
      *(_OWORD *)(a1 + 4312) = v94;
      *(_OWORD *)(a1 + 4548) = v90;
      *(_OWORD *)(a1 + 4564) = v91;
      *(_OWORD *)(a1 + 4580) = *(_OWORD *)v92;
      *(_OWORD *)(a1 + 4592) = *(_OWORD *)&v92[12];
      *(_OWORD *)(a1 + 4484) = v86;
      *(_OWORD *)(a1 + 4500) = v87;
      *(_OWORD *)(a1 + 4516) = v88;
      *(_OWORD *)(a1 + 4532) = v89;
      *(_OWORD *)(a1 + 4452) = v84;
      *(_OWORD *)(a1 + 4468) = v85;
LABEL_88:
      if (v7 <= 0x4E)
      {
        if (*v83)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v49 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_112;
          }
          *(_DWORD *)int v111 = 68289538;
          int v112 = 0;
          __int16 v113 = 2082;
          v114 = "";
          __int16 v115 = 1026;
          *(_DWORD *)int v116 = v7;
          *(_WORD *)&v116[4] = 1026;
          *(_DWORD *)&v116[6] = 65;
          uint64_t v50 = v49;
          os_log_type_t v51 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v58 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_112;
          }
          *(_DWORD *)int v111 = 68289538;
          int v112 = 0;
          __int16 v113 = 2082;
          v114 = "";
          __int16 v115 = 1026;
          *(_DWORD *)int v116 = v7;
          *(_WORD *)&v116[4] = 1026;
          *(_DWORD *)&v116[6] = 65;
          uint64_t v50 = v58;
          os_log_type_t v51 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,LAC cross check passed\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_112:
        unint64_t v37 = ((unint64_t)(v22 | 8) << 32) | 0x10001;
        goto LABEL_113;
      }
      if (v16 >= 0.0 && v16 <= 150000.0)
      {
        if (*v83)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v52 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_130;
          }
          *(_DWORD *)int v111 = 68289282;
          int v112 = 0;
          __int16 v113 = 2082;
          v114 = "";
          __int16 v115 = 1026;
          *(_DWORD *)int v116 = v7;
          int v53 = v52;
          os_log_type_t v54 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v68 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_130;
          }
          *(_DWORD *)int v111 = 68289282;
          int v112 = 0;
          __int16 v113 = 2082;
          v114 = "";
          __int16 v115 = 1026;
          *(_DWORD *)int v116 = v7;
          int v53 = v68;
          os_log_type_t v54 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, LAC cross check passed\", \"conf\":%{public}d}", v111, 0x18u);
LABEL_130:
        long long v69 = *(_OWORD *)(a2 + 112);
        long long v125 = *(_OWORD *)(a2 + 96);
        long long v126 = v69;
        v127[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
        long long v70 = *(_OWORD *)(a2 + 48);
        long long v121 = *(_OWORD *)(a2 + 32);
        long long v122 = v70;
        long long v71 = *(_OWORD *)(a2 + 80);
        long long v123 = *(_OWORD *)(a2 + 64);
        long long v124 = v71;
        long long v72 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t buf = *(_OWORD *)a2;
        *(_OWORD *)&uint8_t buf[16] = v72;
        uint64_t v67 = (v22 << 32) | 1;
        goto LABEL_143;
      }
      if (*(_DWORD *)(a2 + 96) == 10)
      {
        if (*v83)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v55 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_136;
          }
          *(_DWORD *)int v111 = 68289794;
          __int16 v113 = 2082;
          int v112 = 0;
          v114 = "";
          __int16 v115 = 2050;
          *(void *)int v116 = 0x41024F8000000000;
          *(_WORD *)&v116[8] = 1026;
          *(_DWORD *)int v117 = v7;
          *(_WORD *)&v117[4] = 1026;
          *(_DWORD *)&v117[6] = 65;
          __int16 v56 = v55;
          os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v73 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_136;
          }
          *(_DWORD *)int v111 = 68289794;
          __int16 v113 = 2082;
          int v112 = 0;
          v114 = "";
          __int16 v115 = 2050;
          *(void *)int v116 = 0x41024F8000000000;
          *(_WORD *)&v116[8] = 1026;
          *(_DWORD *)int v117 = v7;
          *(_WORD *)&v117[4] = 1026;
          *(_DWORD *)&v117[6] = 65;
          __int16 v56 = v73;
          os_log_type_t v57 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,LAC cross check failed\", \"threshold\":\"%{public}f\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x28u);
LABEL_136:
        long long v74 = *(_OWORD *)(a2 + 112);
        long long v125 = *(_OWORD *)(a2 + 96);
        long long v126 = v74;
        v127[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
        long long v75 = *(_OWORD *)(a2 + 48);
        long long v121 = *(_OWORD *)(a2 + 32);
        long long v122 = v75;
        long long v76 = *(_OWORD *)(a2 + 80);
        long long v123 = *(_OWORD *)(a2 + 64);
        long long v124 = v76;
        long long v77 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t buf = *(_OWORD *)a2;
        *(_OWORD *)&uint8_t buf[16] = v77;
        uint64_t v67 = (v22 << 32) | 1;
        uint64_t v7 = 65;
        goto LABEL_143;
      }
      if (*v83)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v59 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_142;
        }
        *(_DWORD *)int v111 = 68289794;
        __int16 v113 = 2082;
        int v112 = 0;
        v114 = "";
        __int16 v115 = 2050;
        *(void *)int v116 = 0x41024F8000000000;
        *(_WORD *)&v116[8] = 1026;
        *(_DWORD *)int v117 = v7;
        *(_WORD *)&v117[4] = 1026;
        *(_DWORD *)&v117[6] = 69;
        int v60 = v59;
        os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v78 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_142;
        }
        *(_DWORD *)int v111 = 68289794;
        __int16 v113 = 2082;
        int v112 = 0;
        v114 = "";
        __int16 v115 = 2050;
        *(void *)int v116 = 0x41024F8000000000;
        *(_WORD *)&v116[8] = 1026;
        *(_DWORD *)int v117 = v7;
        *(_WORD *)&v117[4] = 1026;
        *(_DWORD *)&v117[6] = 69;
        int v60 = v78;
        os_log_type_t v61 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,LAC cross check failed\", \"threshold\":\"%{public}f\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x28u);
LABEL_142:
      long long v79 = *(_OWORD *)(a2 + 112);
      long long v125 = *(_OWORD *)(a2 + 96);
      long long v126 = v79;
      v127[0] = *(_OWORD *)(a2 + 128);
      *(_OWORD *)((char *)v127 + 12) = *(_OWORD *)(a2 + 140);
      long long v80 = *(_OWORD *)(a2 + 48);
      long long v121 = *(_OWORD *)(a2 + 32);
      long long v122 = v80;
      long long v81 = *(_OWORD *)(a2 + 80);
      long long v123 = *(_OWORD *)(a2 + 64);
      long long v124 = v81;
      long long v82 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t buf = *(_OWORD *)a2;
      *(_OWORD *)&uint8_t buf[16] = v82;
      uint64_t v67 = (v22 << 32) | 1;
      uint64_t v7 = 69;
      goto LABEL_143;
    }
    if (v7 >= 0x42)
    {
      if (*v83)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v26 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_72;
        }
        *(_DWORD *)int v111 = 68289538;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        __int16 v115 = 1026;
        *(_DWORD *)int v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = 65;
        int v27 = v26;
        os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v36 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_72;
        }
        *(_DWORD *)int v111 = 68289538;
        int v112 = 0;
        __int16 v113 = 2082;
        v114 = "";
        __int16 v115 = 1026;
        *(_DWORD *)int v116 = v7;
        *(_WORD *)&v116[4] = 1026;
        *(_DWORD *)&v116[6] = 65;
        int v27 = v36;
        os_log_type_t v28 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, downgrade,no Cell/LAC fix available\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_72:
      unint64_t v37 = (v20 << 32) | 0x10001;
LABEL_113:
      *(void *)(a1 + 3976) = v37;
      uint64_t v7 = 65;
      goto LABEL_80;
    }
    if (*v83)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v30 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_78;
      }
      *(_DWORD *)int v111 = 68289538;
      int v112 = 0;
      __int16 v113 = 2082;
      v114 = "";
      __int16 v115 = 1026;
      *(_DWORD *)int v116 = 65;
      *(_WORD *)&v116[4] = 1026;
      *(_DWORD *)&v116[6] = -1;
      long long v31 = v30;
      os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v38 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_78;
      }
      *(_DWORD *)int v111 = 68289538;
      int v112 = 0;
      __int16 v113 = 2082;
      v114 = "";
      __int16 v115 = 1026;
      *(_DWORD *)int v116 = 65;
      *(_WORD *)&v116[4] = 1026;
      *(_DWORD *)&v116[6] = -1;
      long long v31 = v38;
      os_log_type_t v32 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, downgrade,invalid confidence\", \"confPrior\":%{public}d, \"reduced conf\":%{public}d}", v111, 0x1Eu);
LABEL_78:
    uint64_t v15 = (v20 << 32) | 0x10001;
    goto LABEL_79;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 84);
  if (v5 <= 0x45) {
    unsigned int v6 = 69;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a2 + 84);
  }
  if (*(unsigned char *)(a1 + 11712)) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t sub_100F3B454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = (unsigned char *)(a1 + 11672);
  if (a2 == -1)
  {
    if (*v3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v12 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v42 = 68289026;
      int v43 = 0;
      __int16 v44 = 2082;
      long long v45 = "";
      long long v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid confidence\"}";
LABEL_23:
      long long v14 = v12;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
LABEL_33:
      _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, (uint8_t *)&v42, 0x12u);
      return 0xFFFFFFFFLL;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v16 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return 0xFFFFFFFFLL;
    }
    int v42 = 68289026;
    int v43 = 0;
    __int16 v44 = 2082;
    long long v45 = "";
    long long v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid confidence\"}";
LABEL_32:
    long long v14 = v16;
    os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
    goto LABEL_33;
  }
  uint64_t v5 = a2;
  if ((sub_1000E6DB4(a3) & 1) == 0)
  {
    if (*v3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v12 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 0xFFFFFFFFLL;
      }
      int v42 = 68289026;
      int v43 = 0;
      __int16 v44 = 2082;
      long long v45 = "";
      long long v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid location assistance\"}";
      goto LABEL_23;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v16 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return 0xFFFFFFFFLL;
    }
    int v42 = 68289026;
    int v43 = 0;
    __int16 v44 = 2082;
    long long v45 = "";
    long long v13 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,invalid location assistance\"}";
    goto LABEL_32;
  }
  uint64_t v7 = (double *)(a1 + 3196);
  if (v5 > 0x44 || !sub_1000E6DB4(a1 + 3176) || *(_DWORD *)(a1 + 3260) < 0x45u) {
    goto LABEL_52;
  }
  sub_1000F1268((double *)(a1 + 11560), a3, a1 + 3176);
  if (v8 >= 0.0 && v8 <= (*v7 + *(double *)(a3 + 20)) * 3.0)
  {
    if (*v3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v19 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_51;
      }
      int v42 = 68289026;
      int v43 = 0;
      __int16 v44 = 2082;
      long long v45 = "";
      uint64_t v20 = v19;
      os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v22 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_51;
      }
      int v42 = 68289026;
      int v43 = 0;
      __int16 v44 = 2082;
      long long v45 = "";
      uint64_t v20 = v22;
      os_log_type_t v21 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,cross-check with cached HELO passed. Bumping confidence to HIGH\"}", (uint8_t *)&v42, 0x12u);
LABEL_51:
    uint64_t v5 = 79;
    goto LABEL_52;
  }
  if (*v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v42 = 68289026;
      int v43 = 0;
      __int16 v44 = 2082;
      long long v45 = "";
      uint64_t v10 = v9;
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,cross-check with cached HELO failed. Not bumping confidence\"}", (uint8_t *)&v42, 0x12u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v42 = 68289026;
      int v43 = 0;
      __int16 v44 = 2082;
      long long v45 = "";
      uint64_t v10 = v18;
      os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
      goto LABEL_40;
    }
  }
LABEL_52:
  if (*v7 < 0.0 || *(_DWORD *)(a1 + 3260) <= (int)v5)
  {
    long long v23 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a1 + 3176) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 3192) = v23;
    long long v24 = *(_OWORD *)(a3 + 32);
    long long v25 = *(_OWORD *)(a3 + 48);
    long long v26 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a1 + 3240) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 3256) = v26;
    *(_OWORD *)(a1 + 3208) = v24;
    *(_OWORD *)(a1 + 3224) = v25;
    long long v27 = *(_OWORD *)(a3 + 96);
    long long v28 = *(_OWORD *)(a3 + 112);
    long long v29 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 3316) = *(_OWORD *)(a3 + 140);
    *(_OWORD *)(a1 + 3288) = v28;
    *(_OWORD *)(a1 + 3304) = v29;
    *(_OWORD *)(a1 + 3272) = v27;
    memcpy((void *)(a1 + 3336), (const void *)(a3 + 160), 0x201uLL);
    uint64_t v30 = *(void *)(a3 + 680);
    uint64_t v31 = *(void *)(a3 + 688);
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 3856) = v30;
    os_log_type_t v32 = *(std::__shared_weak_count **)(a1 + 3864);
    *(void *)(a1 + 3864) = v31;
    if (v32) {
      sub_1000DB0A0(v32);
    }
    long long v33 = *(_OWORD *)(a3 + 696);
    long long v34 = *(_OWORD *)(a3 + 712);
    *(_OWORD *)(a1 + 3904) = *(_OWORD *)(a3 + 728);
    *(_OWORD *)(a1 + 3888) = v34;
    *(_OWORD *)(a1 + 3872) = v33;
    long long v35 = *(_OWORD *)(a3 + 744);
    long long v36 = *(_OWORD *)(a3 + 760);
    long long v37 = *(_OWORD *)(a3 + 776);
    *(void *)(a1 + 3965) = *(void *)(a3 + 789);
    *(_OWORD *)(a1 + 3952) = v37;
    *(_OWORD *)(a1 + 3936) = v36;
    *(_OWORD *)(a1 + 3920) = v35;
    *(_DWORD *)(a1 + 3260) = v5;
    if (*v3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v38 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v42 = 68289026;
        int v43 = 0;
        __int16 v44 = 2082;
        long long v45 = "";
        long long v39 = v38;
        os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
LABEL_67:
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, confhistory,cache,helo location with current location\"}", (uint8_t *)&v42, 0x12u);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v41 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v42 = 68289026;
        int v43 = 0;
        __int16 v44 = 2082;
        long long v45 = "";
        long long v39 = v41;
        os_log_type_t v40 = OS_LOG_TYPE_DEBUG;
        goto LABEL_67;
      }
    }
  }
  return v5;
}

uint64_t sub_100F3BB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)(a2 + 160);
  double v5 = sub_100121610(a2, a2 + 160);
  uint64_t v6 = sub_100F3BDB0(a1, a2, v5);
  if (v6)
  {
    long long v7 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 8232) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 8216) = v7;
    long long v8 = *(_OWORD *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 48);
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 8296) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 8280) = v10;
    *(_OWORD *)(a1 + 8264) = v9;
    *(_OWORD *)(a1 + 8248) = v8;
    long long v11 = *(_OWORD *)(a2 + 140);
    long long v12 = *(_OWORD *)(a2 + 96);
    long long v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 8344) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 8328) = v13;
    *(_OWORD *)(a1 + 8312) = v12;
    *(_OWORD *)(a1 + 8356) = v11;
    memcpy((void *)(a1 + 8376), v4, 0x201uLL);
    uint64_t v14 = *(void *)(a2 + 680);
    uint64_t v15 = *(void *)(a2 + 688);
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (double *)(a1 + 8236);
    *(void *)(a1 + 8896) = v14;
    double v17 = *(std::__shared_weak_count **)(a1 + 8904);
    *(void *)(a1 + 8904) = v15;
    if (v17) {
      sub_1000DB0A0(v17);
    }
    long long v18 = *(_OWORD *)(a2 + 696);
    long long v19 = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 8944) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 8928) = v19;
    *(_OWORD *)(a1 + 8912) = v18;
    long long v20 = *(_OWORD *)(a2 + 744);
    long long v21 = *(_OWORD *)(a2 + 760);
    long long v22 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 9005) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 8992) = v22;
    *(_OWORD *)(a1 + 8976) = v21;
    *(_OWORD *)(a1 + 8960) = v20;
    *(_DWORD *)(a1 + 9020) = 0;
    *(_DWORD *)(a1 + 9020) = 4 * (*(_DWORD *)(a2 + 96) == 6);
    if (*(_DWORD *)(a2 + 84) > 0x44u)
    {
      if (*(_DWORD *)(a1 + 8300) > 0x4Eu) {
        int v24 = 4;
      }
      else {
        int v24 = 3;
      }
      *(_DWORD *)(a1 + 9016) = v24;
    }
    else
    {
      *(_DWORD *)(a1 + 9016) = 2;
      if (*v16 < 65.0) {
        *uint64_t v16 = 65.0;
      }
    }
    if (*(double *)(a1 + 8252) > 0.0)
    {
      unsigned int v25 = *(_DWORD *)(a1 + 8300);
      if (v25 > 0x44)
      {
        if (v25 > 0x4E) {
          int v26 = 4;
        }
        else {
          int v26 = 3;
        }
      }
      else
      {
        int v26 = 2;
      }
      *(_DWORD *)(a1 + 9020) = v26;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      v28[0] = 68289026;
      v28[1] = 0;
      __int16 v29 = 2082;
      uint64_t v30 = "";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition CPI: invalid assistance location\"}", (uint8_t *)v28, 0x12u);
    }
  }
  return v6;
}

uint64_t sub_100F3BDB0(uint64_t a1, uint64_t a2, double a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 96);
  uint64_t result = 1;
  if (v6 > 0xB || ((1 << v6) & 0x850) == 0)
  {
    int v14 = *(unsigned __int8 *)(a1 + 11672);
    BOOL v15 = v6 != 10 || v14 == 0;
    if (v15 && (v6 || !*(unsigned char *)(a2 + 516)))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v16 = qword_1024193D8;
      BOOL v17 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v17)
      {
        int v18 = *(_DWORD *)(a2 + 96);
        int v19 = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        long long v22 = "";
        __int16 v23 = 1026;
        LODWORD(v24) = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition TIGHT-COUPLING: invalid assistance location\", \"type\":%{public}d}", (uint8_t *)&v19, 0x18u);
        uint64_t result = 0;
      }
    }
  }
  if (*(double *)(a2 + 20) > 10000.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v9 = qword_1024193D8;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v10)
    {
      double v11 = *(double *)(a2 + 20);
      int v19 = 68289538;
      int v20 = 0;
      __int16 v21 = 2082;
      long long v22 = "";
      __int16 v23 = 2050;
      double v24 = v11;
      __int16 v25 = 2050;
      uint64_t v26 = 0x40C3880000000000;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition TIGHT-COUPLING: invalid assistance location\", \"horizontal accuracy\":\"%{public}f\", \"maximum accuracy\":\"%{public}f\"}", (uint8_t *)&v19, 0x26u);
      uint64_t result = 0;
    }
  }
  if (a3 > 10.0 || a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v12 = qword_1024193D8;
    BOOL v13 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v13)
    {
      int v19 = 68289538;
      int v20 = 0;
      __int16 v21 = 2082;
      long long v22 = "";
      __int16 v23 = 2050;
      double v24 = a3;
      __int16 v25 = 2050;
      uint64_t v26 = 0x4024000000000000;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition TIGHT-COUPLING: invalid assistance location\", \"age\":\"%{public}f\", \"maxAge\":\"%{public}f\"}", (uint8_t *)&v19, 0x26u);
      return 0;
    }
  }
  return result;
}

void sub_100F3C07C(uint64_t a1, int a2, unsigned char *a3, double *a4, double *a5, double a6, double a7, double a8, double a9, double a10)
{
  if (a9 > 0.0 && (a8 < -450.0 || a8 > 8850.0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    int v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = 68289282;
      int v34 = 0;
      __int16 v35 = 2082;
      long long v36 = "";
      __int16 v37 = 2050;
      double v38 = a8;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #GnssAssistancePosition bad altitude\", \"altitude\":\"%{public}f\"}", (uint8_t *)&v33, 0x1Cu);
    }
    *a3 = 0;
    *a4 = 0.0;
    *a5 = 3000.0;
  }
  else
  {
    *a4 = a8;
    double v19 = 3000.0;
    if (a9 <= 3000.0) {
      double v19 = a9;
    }
    *a5 = v19;
    if (a9 <= 0.0)
    {
      *a4 = 0.0;
      *a5 = 3000.0;
      *a3 = 0;
    }
    else
    {
      if ((a2 - 1) > 0xFFFFFFFD) {
        *a5 = sqrt(v19 * v19 + 900.0);
      }
      else {
        *a4 = *a4 + a10;
      }
      uint64_t v21 = a1 + 9964;
      *a3 = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v23 = *a4;
        int v33 = 68289795;
        int v34 = 0;
        __int16 v35 = 2082;
        long long v36 = "";
        __int16 v37 = 2049;
        double v38 = a8;
        __int16 v39 = 2049;
        double v40 = v23;
        __int16 v41 = 2049;
        double v42 = a10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition converted MSL alt to WGS84\", \"altMsl\":\"%{private}.3f\", \"altWGS84\":\"%{private}.3f\", \"undulation\":\"%{private}.3f\"}", (uint8_t *)&v33, 0x30u);
      }
      if (*(unsigned char *)(v21 + 1708))
      {
        if (a9 <= 0.0 || a9 > 2.33)
        {
          if (a9 <= 2.33) {
            double v24 = *a5;
          }
          else {
            double v24 = floor(a9 / 2.33) * 2.33;
          }
        }
        else
        {
          double v24 = 2.33;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v30 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          double v31 = *a4;
          double v32 = *a5;
          int v33 = 68290307;
          int v34 = 0;
          __int16 v35 = 2082;
          long long v36 = "";
          __int16 v37 = 2049;
          double v38 = a6;
          __int16 v39 = 2049;
          double v40 = a7;
          __int16 v41 = 2049;
          double v42 = v31;
          __int16 v43 = 2050;
          double v44 = v32;
          __int16 v45 = 2050;
          double v46 = v24;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, verticalAccuracyScalingDuringEmergency\", \"lat\":\"%{private}.6f\", \"lon\":\"%{private}.6f\", \"altWGS84\":\"%{private}.2f\", \"priorVunc\":\"%{public}.2f\", \"newVunc\":\"%{public}.2f\"}", (uint8_t *)&v33, 0x44u);
        }
        *a5 = v24;
      }
      else
      {
        double v25 = 3.0;
        if (*(double *)v21 > 0.0)
        {
          double v26 = sub_100121610(a1 + 9944, a1 + 10104);
          if (v26 >= 30.0 || v26 <= 0.0) {
            double v25 = 3.0;
          }
          else {
            double v25 = 15.0;
          }
        }
        if (*a5 > 0.0 && *a5 < v25)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          long long v28 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            double v29 = *a4;
            int v33 = 68290307;
            int v34 = 0;
            __int16 v35 = 2082;
            long long v36 = "";
            __int16 v37 = 2049;
            double v38 = a6;
            __int16 v39 = 2049;
            double v40 = a7;
            __int16 v41 = 2049;
            double v42 = v29;
            __int16 v43 = 2050;
            double v44 = a9;
            __int16 v45 = 2050;
            double v46 = v25;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition ApplyingVuncLowerBound\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"altWGS84\":\"%{private}.2f\", \"priorVunc\":\"%{public}.1f\", \"vuncLowerBound\":\"%{public}.1f\"}", (uint8_t *)&v33, 0x44u);
          }
          *a5 = v25;
        }
      }
    }
  }
}

uint64_t sub_100F3C528(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 800);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  long long v10 = *(_OWORD *)(a2 + 112);
  long long v9 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v11;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  uint64_t v12 = *(void *)(a2 + 680);
  if (v4)
  {
    uint64_t v13 = *(void *)(a2 + 688);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 680) = v12;
    int v14 = *(std::__shared_weak_count **)(a1 + 688);
    *(void *)(a1 + 688) = v13;
    if (v14) {
      sub_1000DB0A0(v14);
    }
    long long v15 = *(_OWORD *)(a2 + 696);
    long long v16 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v16;
    *(_OWORD *)(a1 + 696) = v15;
    long long v17 = *(_OWORD *)(a2 + 744);
    long long v18 = *(_OWORD *)(a2 + 760);
    long long v19 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v18;
    *(_OWORD *)(a1 + 776) = v19;
    *(_OWORD *)(a1 + 744) = v17;
  }
  else
  {
    *(void *)(a1 + 680) = v12;
    uint64_t v20 = *(void *)(a2 + 688);
    *(void *)(a1 + 688) = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    long long v21 = *(_OWORD *)(a2 + 696);
    long long v22 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v22;
    *(_OWORD *)(a1 + 696) = v21;
    long long v23 = *(_OWORD *)(a2 + 744);
    long long v24 = *(_OWORD *)(a2 + 760);
    long long v25 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v24;
    *(_OWORD *)(a1 + 776) = v25;
    *(_OWORD *)(a1 + 744) = v23;
    *(unsigned char *)(a1 + 800) = 1;
  }
  return a1;
}

void sub_100F3C654(uint64_t a1, uint64_t a2)
{
  int v4 = (unsigned char *)(a1 + 9032);
  uint64_t v5 = a1 + 2380;
  if (!*(unsigned char *)(a1 + 1569))
  {
    unsigned int v18 = *(_DWORD *)(a2 + 96);
    if (v18) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = *(unsigned char *)(a2 + 516) == 0;
    }
    int v20 = !v19;
    if (!*(unsigned char *)(a1 + 1570)) {
      goto LABEL_88;
    }
    if (v18 > 0xB || ((1 << v18) & 0x850) == 0)
    {
      if (*(unsigned char *)(a1 + 11672))
      {
        if (v18 == 10) {
          char v34 = 1;
        }
        else {
          char v34 = v20;
        }
        if ((v34 & 1) == 0) {
          goto LABEL_88;
        }
      }
      else if (!v20)
      {
        goto LABEL_88;
      }
    }
    if (sub_100F3BB20(a1, a2))
    {
      int v22 = *(_DWORD *)(a2 + 96);
      if (v22 == 4 || v22 == 11 || (v22 == 10 ? (int v23 = 1) : (int v23 = v20), v23 == 1))
      {
        if (v4[2640])
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v24 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            int v25 = *(_DWORD *)(a2 + 96);
            uint64_t v26 = *(void *)(a2 + 4);
            uint64_t v27 = *(void *)(a2 + 12);
            uint64_t v28 = *(void *)(a2 + 28);
            uint64_t v29 = *(void *)(a2 + 20);
            uint64_t v30 = *(void *)(a2 + 36);
            int v31 = *(unsigned __int8 *)(a2 + 516);
            uint64_t buf = 68290819;
            __int16 v176 = 2082;
            v177 = "";
            __int16 v178 = 1026;
            *(_DWORD *)int v179 = v25;
            *(_WORD *)&v179[4] = 2049;
            *(void *)&v179[6] = v26;
            __int16 v180 = 2049;
            uint64_t v181 = v27;
            __int16 v182 = 2050;
            uint64_t v183 = v28;
            __int16 v184 = 2050;
            uint64_t v185 = v29;
            __int16 v186 = 2050;
            uint64_t v187 = v30;
            __int16 v188 = 1026;
            int v189 = v31;
            double v32 = v24;
            os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
LABEL_73:
            _os_log_impl((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CPI: qualified location assistance to GPS\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"matcherPropagated\":%{public}d}", (uint8_t *)&buf, 0x50u);
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v102 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            int v103 = *(_DWORD *)(a2 + 96);
            uint64_t v104 = *(void *)(a2 + 4);
            uint64_t v105 = *(void *)(a2 + 12);
            uint64_t v106 = *(void *)(a2 + 28);
            uint64_t v107 = *(void *)(a2 + 20);
            uint64_t v108 = *(void *)(a2 + 36);
            int v109 = *(unsigned __int8 *)(a2 + 516);
            uint64_t buf = 68290819;
            __int16 v176 = 2082;
            v177 = "";
            __int16 v178 = 1026;
            *(_DWORD *)int v179 = v103;
            *(_WORD *)&v179[4] = 2049;
            *(void *)&v179[6] = v104;
            __int16 v180 = 2049;
            uint64_t v181 = v105;
            __int16 v182 = 2050;
            uint64_t v183 = v106;
            __int16 v184 = 2050;
            uint64_t v185 = v107;
            __int16 v186 = 2050;
            uint64_t v187 = v108;
            __int16 v188 = 1026;
            int v189 = v109;
            double v32 = v102;
            os_log_type_t v33 = OS_LOG_TYPE_DEBUG;
            goto LABEL_73;
          }
        }
      }
      *int v4 = 1;
      if (v4[2640])
      {
        if (!v4[2641])
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v114 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            int v115 = v4[2640];
            int v116 = v4[2641];
            uint64_t buf = 68289538;
            __int16 v176 = 2082;
            v177 = "";
            __int16 v178 = 1026;
            *(_DWORD *)int v179 = v115;
            *(_WORD *)&v179[4] = 1026;
            *(_DWORD *)&v179[6] = v116;
            long long v91 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Rejecting CPI\", \"fInEmergency\":%{public}d, \"fHeloE"
                  "nabled\":%{public}d}";
            int v92 = v114;
            os_log_type_t v93 = OS_LOG_TYPE_DEFAULT;
            uint32_t v101 = 30;
            goto LABEL_68;
          }
          return;
        }
        if (!v20)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102305D90);
          }
          uint64_t v110 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_112;
          }
          int v111 = *(_DWORD *)(a1 + 9016);
          uint64_t buf = 68289282;
          __int16 v176 = 2082;
          v177 = "";
          __int16 v178 = 1026;
          *(_DWORD *)int v179 = v111;
          int v112 = v110;
          os_log_type_t v113 = OS_LOG_TYPE_DEFAULT;
LABEL_111:
          _os_log_impl((void *)&_mh_execute_header, v112, v113, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, valid tightly coupled position\", \"reliability\":%{public}d}", (uint8_t *)&buf, 0x18u);
LABEL_112:
          BOOL v126 = 0;
          *(_DWORD *)(a1 + 9036) = 1;
          unsigned int v127 = *(_DWORD *)(a1 + 8312);
          if (v127 <= 0xB && ((1 << v127) & 0xC10) != 0) {
            BOOL v126 = *(_DWORD *)(a1 + 8300) > 0x44u;
          }
          v4[2680] = v126;
          sub_100F3D62C(a1, a1 + 8216);
          goto LABEL_116;
        }
      }
      else if ((v20 & 1) == 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v124 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_112;
        }
        int v125 = *(_DWORD *)(a1 + 9016);
        uint64_t buf = 68289282;
        __int16 v176 = 2082;
        v177 = "";
        __int16 v178 = 1026;
        *(_DWORD *)int v179 = v125;
        int v112 = v124;
        os_log_type_t v113 = OS_LOG_TYPE_DEBUG;
        goto LABEL_111;
      }
      *(_DWORD *)(a1 + 9036) = 2;
      sub_100F3E8D8(a1, a1 + 8216);
LABEL_116:
      long long v128 = *(_OWORD *)(a2 + 96);
      long long v129 = *(_OWORD *)(a2 + 112);
      long long v130 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 4952) = *(_OWORD *)(a2 + 140);
      long long v131 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 4812) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 4828) = v131;
      long long v132 = *(_OWORD *)(a2 + 32);
      long long v133 = *(_OWORD *)(a2 + 48);
      long long v134 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 4876) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 4892) = v134;
      *(_OWORD *)(a1 + 4844) = v132;
      *(_OWORD *)(a1 + 4860) = v133;
      *(_OWORD *)(a1 + 4924) = v129;
      *(_OWORD *)(a1 + 4940) = v130;
      *(_OWORD *)(a1 + 4908) = v128;
      memcpy((void *)(a1 + 4968), (const void *)(a2 + 160), 0x201uLL);
      uint64_t v135 = *(void *)(a2 + 680);
      uint64_t v136 = *(void *)(a2 + 688);
      if (v136) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 5488) = v135;
      int v137 = *(std::__shared_weak_count **)(a1 + 5496);
      *(void *)(a1 + 5496) = v136;
      if (v137) {
        sub_1000DB0A0(v137);
      }
      long long v138 = *(_OWORD *)(a2 + 696);
      long long v139 = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 5536) = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 5520) = v139;
      *(_OWORD *)(a1 + 5504) = v138;
      long long v140 = *(_OWORD *)(a2 + 744);
      long long v141 = *(_OWORD *)(a2 + 760);
      long long v142 = *(_OWORD *)(a2 + 776);
      *(void *)(a1 + 5597) = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 5584) = v142;
      *(_OWORD *)(a1 + 5568) = v141;
      *(_OWORD *)(a1 + 5552) = v140;
      if (!sub_100BCE2EC(a2)) {
        return;
      }
      uint64_t v143 = a1 + 2376;
      long long v144 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 2376) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 2392) = v144;
      long long v145 = *(_OWORD *)(a2 + 32);
      long long v146 = *(_OWORD *)(a2 + 48);
      long long v147 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 2440) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 2456) = v147;
      *(_OWORD *)(a1 + 2408) = v145;
      *(_OWORD *)(a1 + 2424) = v146;
      long long v148 = *(_OWORD *)(a2 + 140);
      long long v149 = *(_OWORD *)(a2 + 96);
      long long v150 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 2488) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 2504) = v150;
      *(_OWORD *)(a1 + 2472) = v149;
      *(_OWORD *)(a1 + 2516) = v148;
      memcpy((void *)(a1 + 2536), (const void *)(a2 + 160), 0x201uLL);
      uint64_t v151 = *(void *)(a2 + 680);
      uint64_t v152 = *(void *)(a2 + 688);
      if (v152) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v152 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 3056) = v151;
      int v153 = *(std::__shared_weak_count **)(a1 + 3064);
      *(void *)(a1 + 3064) = v152;
      if (v153) {
        sub_1000DB0A0(v153);
      }
      long long v154 = *(_OWORD *)(a2 + 696);
      long long v155 = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 3104) = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 3088) = v155;
      *(_OWORD *)(a1 + 3072) = v154;
      long long v156 = *(_OWORD *)(a2 + 744);
      long long v157 = *(_OWORD *)(a2 + 760);
      long long v158 = *(_OWORD *)(a2 + 776);
      *(void *)(a1 + 3165) = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 3152) = v158;
      *(_OWORD *)(a1 + 3136) = v157;
      *(_OWORD *)(a1 + 3120) = v156;
      float64x2_t v159 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
      *(float64x2_t *)uint64_t v5 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)v5, v159)), v159);
      if (v4[2640])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v117 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        sub_1000AB340(v143);
        if (v163 >= 0) {
          int v160 = __p;
        }
        else {
          int v160 = (void **)__p[0];
        }
        uint64_t buf = 68289283;
        __int16 v176 = 2082;
        v177 = "";
        __int16 v178 = 2081;
        *(void *)int v179 = v160;
        double v119 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"location,\":%{privat"
               "e, location:escape_only}s}";
LABEL_96:
        int v120 = v117;
        os_log_type_t v121 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_105;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v122 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      sub_1000AB340(v143);
      if (v163 >= 0) {
        int v161 = __p;
      }
      else {
        int v161 = (void **)__p[0];
      }
      uint64_t buf = 68289283;
      __int16 v176 = 2082;
      v177 = "";
      __int16 v178 = 2081;
      *(void *)int v179 = v161;
      double v119 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"location,\":%{private,"
             " location:escape_only}s}";
      goto LABEL_104;
    }
LABEL_88:
    if (v4[2640])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v117 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      sub_1000AB340(a2);
      if (v163 >= 0) {
        __int16 v118 = __p;
      }
      else {
        __int16 v118 = (void **)__p[0];
      }
      uint64_t buf = 68289283;
      __int16 v176 = 2082;
      v177 = "";
      __int16 v178 = 2081;
      *(void *)int v179 = v118;
      double v119 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not valid tightly coupled pos\", \"location,\":%{priva"
             "te, location:escape_only}s}";
      goto LABEL_96;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v122 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    sub_1000AB340(a2);
    if (v163 >= 0) {
      long long v123 = __p;
    }
    else {
      long long v123 = (void **)__p[0];
    }
    uint64_t buf = 68289283;
    __int16 v176 = 2082;
    v177 = "";
    __int16 v178 = 2081;
    *(void *)int v179 = v123;
    double v119 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not valid tightly coupled pos\", \"location,\":%{private"
           ", location:escape_only}s}";
LABEL_104:
    int v120 = v122;
    os_log_type_t v121 = OS_LOG_TYPE_DEBUG;
LABEL_105:
    _os_log_impl((void *)&_mh_execute_header, v120, v121, v119, (uint8_t *)&buf, 0x1Cu);
    if (v163 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 1570) || *(double *)(a1 + 8236) <= 0.0 || *(int *)(a1 + 9016) < 1) {
    goto LABEL_49;
  }
  long long v6 = (_OWORD *)(a1 + 8216);
  long long v7 = (_OWORD *)(a1 + 9016);
  *(CFAbsoluteTime *)(a1 + 8292) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 9024) = 0;
  if (v4[2640])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v8 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_44;
    }
    int v9 = *(_DWORD *)(a1 + 8312);
    uint64_t v10 = *(void *)(v5 + 5840);
    uint64_t v11 = *(void *)(v5 + 5848);
    uint64_t v12 = *(void *)(v5 + 5864);
    uint64_t v13 = *(void *)(v5 + 5856);
    uint64_t v14 = *(void *)(v5 + 5872);
    int v15 = *(_DWORD *)(a1 + 9016);
    uint64_t buf = 68290819;
    __int16 v176 = 2082;
    v177 = "";
    __int16 v178 = 1026;
    *(_DWORD *)int v179 = v9;
    *(_WORD *)&v179[4] = 2049;
    *(void *)&v179[6] = v10;
    __int16 v180 = 2049;
    uint64_t v181 = v11;
    __int16 v182 = 2050;
    uint64_t v183 = v12;
    __int16 v184 = 2050;
    uint64_t v185 = v13;
    __int16 v186 = 2050;
    uint64_t v187 = v14;
    __int16 v188 = 1026;
    int v189 = v15;
    long long v16 = v8;
    os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v35 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_44;
    }
    int v36 = *(_DWORD *)(a1 + 8312);
    uint64_t v37 = *(void *)(v5 + 5840);
    uint64_t v38 = *(void *)(v5 + 5848);
    uint64_t v39 = *(void *)(v5 + 5864);
    uint64_t v40 = *(void *)(v5 + 5856);
    uint64_t v41 = *(void *)(v5 + 5872);
    int v42 = *(_DWORD *)(a1 + 9016);
    uint64_t buf = 68290819;
    __int16 v176 = 2082;
    v177 = "";
    __int16 v178 = 1026;
    *(_DWORD *)int v179 = v36;
    *(_WORD *)&v179[4] = 2049;
    *(void *)&v179[6] = v37;
    __int16 v180 = 2049;
    uint64_t v181 = v38;
    __int16 v182 = 2050;
    uint64_t v183 = v39;
    __int16 v184 = 2050;
    uint64_t v185 = v40;
    __int16 v186 = 2050;
    uint64_t v187 = v41;
    __int16 v188 = 1026;
    int v189 = v42;
    long long v16 = v35;
    os_log_type_t v17 = OS_LOG_TYPE_DEBUG;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, v17, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, forcing tightly-coupled location assistance\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"reliability\":%{public}d}", (uint8_t *)&buf, 0x50u);
LABEL_44:
  *int v4 = 1;
  *(_DWORD *)(a1 + 9036) = 1;
  long long v43 = *(_OWORD *)(a1 + 8312);
  long long v44 = *(_OWORD *)(a1 + 8344);
  v164[7] = *(_OWORD *)(a1 + 8328);
  v165[0] = v44;
  *(_OWORD *)((char *)v165 + 12) = *(_OWORD *)(a1 + 8356);
  long long v45 = *(_OWORD *)(a1 + 8264);
  v164[2] = *(_OWORD *)(a1 + 8248);
  v164[3] = v45;
  long long v46 = *(_OWORD *)(a1 + 8296);
  v164[4] = *(_OWORD *)(a1 + 8280);
  v164[5] = v46;
  v164[6] = v43;
  long long v47 = *(_OWORD *)(a1 + 8232);
  v164[0] = *v6;
  v164[1] = v47;
  memcpy(v166, (const void *)(a1 + 8376), sizeof(v166));
  uint64_t v167 = *(void *)(a1 + 8896);
  long long v48 = *(std::__shared_weak_count **)(a1 + 8904);
  v168 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v49 = *(_OWORD *)(a1 + 8960);
  long long v50 = *(_OWORD *)(a1 + 8992);
  long long v173 = *(_OWORD *)(a1 + 8976);
  *(_OWORD *)int v174 = v50;
  long long v51 = *(_OWORD *)(a1 + 8928);
  long long v169 = *(_OWORD *)(a1 + 8912);
  long long v170 = v51;
  long long v171 = *(_OWORD *)(a1 + 8944);
  long long v172 = v49;
  *(void *)((char *)&v174[1] + 5) = *(void *)(a1 + 9005);
  *(_OWORD *)&v174[3] = *v7;
  v174[5] = *(void *)(a1 + 9032);
  uint64_t v52 = *(void *)(a1 + 32);
  if (!v52) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v52 + 48))(v52, v164);
  if (v168) {
    sub_1000DB0A0(v168);
  }
LABEL_49:
  long long v53 = *(_OWORD *)(a2 + 96);
  long long v54 = *(_OWORD *)(a2 + 112);
  long long v55 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 4952) = *(_OWORD *)(a2 + 140);
  long long v56 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 4812) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 4828) = v56;
  long long v57 = *(_OWORD *)(a2 + 32);
  long long v58 = *(_OWORD *)(a2 + 48);
  long long v59 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 4876) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4892) = v59;
  *(_OWORD *)(a1 + 4844) = v57;
  *(_OWORD *)(a1 + 4860) = v58;
  *(_OWORD *)(a1 + 4924) = v54;
  *(_OWORD *)(a1 + 4940) = v55;
  *(_OWORD *)(a1 + 4908) = v53;
  memcpy((void *)(a1 + 4968), (const void *)(a2 + 160), 0x201uLL);
  uint64_t v60 = *(void *)(a2 + 680);
  uint64_t v61 = *(void *)(a2 + 688);
  if (v61) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 5488) = v60;
  uint64_t v62 = *(std::__shared_weak_count **)(a1 + 5496);
  *(void *)(a1 + 5496) = v61;
  if (v62) {
    sub_1000DB0A0(v62);
  }
  long long v63 = *(_OWORD *)(a2 + 696);
  long long v64 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 5536) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 5520) = v64;
  *(_OWORD *)(a1 + 5504) = v63;
  long long v65 = *(_OWORD *)(a2 + 744);
  long long v66 = *(_OWORD *)(a2 + 760);
  long long v67 = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 5597) = *(void *)(a2 + 789);
  *(_OWORD *)(a1 + 5584) = v67;
  *(_OWORD *)(a1 + 5568) = v66;
  *(_OWORD *)(a1 + 5552) = v65;
  if (sub_100BCE2EC(a2))
  {
    long long v68 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 2376) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 2392) = v68;
    long long v69 = *(_OWORD *)(a2 + 32);
    long long v70 = *(_OWORD *)(a2 + 48);
    long long v71 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 2440) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 2456) = v71;
    *(_OWORD *)(a1 + 2408) = v69;
    *(_OWORD *)(a1 + 2424) = v70;
    long long v72 = *(_OWORD *)(a2 + 140);
    long long v73 = *(_OWORD *)(a2 + 96);
    long long v74 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 2488) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 2504) = v74;
    *(_OWORD *)(a1 + 2472) = v73;
    *(_OWORD *)(a1 + 2516) = v72;
    memcpy((void *)(a1 + 2536), (const void *)(a2 + 160), 0x201uLL);
    uint64_t v75 = *(void *)(a2 + 680);
    uint64_t v76 = *(void *)(a2 + 688);
    if (v76) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 3056) = v75;
    long long v77 = *(std::__shared_weak_count **)(a1 + 3064);
    *(void *)(a1 + 3064) = v76;
    if (v77) {
      sub_1000DB0A0(v77);
    }
    long long v78 = *(_OWORD *)(a2 + 696);
    long long v79 = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 3104) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 3088) = v79;
    *(_OWORD *)(a1 + 3072) = v78;
    long long v80 = *(_OWORD *)(a2 + 744);
    long long v81 = *(_OWORD *)(a2 + 760);
    long long v82 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 3165) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 3152) = v82;
    *(_OWORD *)(a1 + 3136) = v81;
    *(_OWORD *)(a1 + 3120) = v80;
    float64x2_t v83 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    *(float64x2_t *)uint64_t v5 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)v5, v83)), v83);
    if (v4[2640])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v84 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v85 = *(_DWORD *)(a1 + 2472);
        uint64_t v86 = *(void *)v5;
        uint64_t v87 = *(void *)(v5 + 8);
        uint64_t v89 = *(void *)(v5 + 16);
        uint64_t v88 = *(void *)(v5 + 24);
        uint64_t v90 = *(void *)(v5 + 32);
        uint64_t buf = 68290563;
        __int16 v176 = 2082;
        v177 = "";
        __int16 v178 = 1026;
        *(_DWORD *)int v179 = v85;
        *(_WORD *)&v179[4] = 2049;
        *(void *)&v179[6] = v86;
        __int16 v180 = 2049;
        uint64_t v181 = v87;
        __int16 v182 = 2050;
        uint64_t v183 = v88;
        __int16 v184 = 2050;
        uint64_t v185 = v89;
        __int16 v186 = 2050;
        uint64_t v187 = v90;
        long long v91 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"type\":%{public}d, \""
              "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \""
              "vunc\":\"%{public}.1f\"}";
        int v92 = v84;
        os_log_type_t v93 = OS_LOG_TYPE_DEFAULT;
LABEL_67:
        uint32_t v101 = 74;
LABEL_68:
        _os_log_impl((void *)&_mh_execute_header, v92, v93, v91, (uint8_t *)&buf, v101);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v94 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v95 = *(_DWORD *)(a1 + 2472);
        uint64_t v96 = *(void *)v5;
        uint64_t v97 = *(void *)(v5 + 8);
        uint64_t v99 = *(void *)(v5 + 16);
        uint64_t v98 = *(void *)(v5 + 24);
        uint64_t v100 = *(void *)(v5 + 32);
        uint64_t buf = 68290563;
        __int16 v176 = 2082;
        v177 = "";
        __int16 v178 = 1026;
        *(_DWORD *)int v179 = v95;
        *(_WORD *)&v179[4] = 2049;
        *(void *)&v179[6] = v96;
        __int16 v180 = 2049;
        uint64_t v181 = v97;
        __int16 v182 = 2050;
        uint64_t v183 = v98;
        __int16 v184 = 2050;
        uint64_t v185 = v99;
        __int16 v186 = 2050;
        uint64_t v187 = v100;
        long long v91 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"type\":%{public}d, \""
              "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \""
              "vunc\":\"%{public}.1f\"}";
        int v92 = v94;
        os_log_type_t v93 = OS_LOG_TYPE_DEBUG;
        goto LABEL_67;
      }
    }
  }
}

void sub_100F3D60C(_Unwind_Exception *a1)
{
}

void sub_100F3D62C(uint64_t a1, uint64_t a2)
{
  double v4 = sub_10016C458();
  double v5 = *(double *)(a2 + 504);
  if (v5 <= 0.0)
  {
    if (*(double *)(a2 + 76) <= 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      double v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)(a2 + 76);
        LODWORD(buf[0]) = 134349056;
        *(void *)((char *)buf + 4) = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#GnssAssistancePosition,feedAssistanceLocation,missing timestamp,%{public}.3f", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v34 = *(void *)(a2 + 76);
        LODWORD(v188) = 134349056;
        *(void *)((char *)&v188 + 4) = v34;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistancePosition::feedAssistanceLocation(CLGnssPositionAssistanceData &)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a2 + 504);
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,#Warning,feedAssistanceLocation,missing mct timestamp,%{public}.3f", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v119 = *(void *)(a2 + 504);
      LODWORD(v188) = 134349056;
      *(void *)((char *)&v188 + 4) = v119;
      int v120 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::feedAssistanceLocation(CLGnssPositionAssistanceData &)", "%s\n", v120);
      if (v120 != (char *)buf) {
        free(v120);
      }
    }
    double v5 = v4 - (CFAbsoluteTimeGetCurrent() - *(double *)(a2 + 76));
    *(double *)(a2 + 504) = v5;
  }
  double v8 = v4 - v5;
  if (v8 <= 0.0) {
    double v9 = 1.0;
  }
  else {
    double v9 = v8;
  }
  *(double *)(a2 + 808) = v9;
  char v169 = 0;
  double v168 = 0.0;
  uint64_t v167 = 0;
  sub_100F3C07C(a1, *(_DWORD *)(a2 + 472), &v169, &v168, (double *)&v167, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a2 + 28), *(double *)(a2 + 36), *(float *)(a2 + 476));
  uint64_t v10 = (unsigned char *)(a1 + 11672);
  *(double *)(a2 + 28) = v168;
  uint64_t v11 = v167;
  *(void *)(a2 + 36) = v167;
  uint64_t v12 = *(void *)(a2 + 20);
  if (!*(unsigned char *)(a1 + 11672))
  {
    uint64_t v18 = *(void *)(a1 + 8176);
    if (*(void *)(a1 + 8184) == v18
      || (unint64_t v19 = *(void *)(a1 + 8200),
          int v20 = (double **)(v18 + 8 * (v19 >> 9)),
          long long v21 = *v20,
          int v22 = &(*v20)[v19 & 0x1FF],
          uint64_t v23 = *(void *)(v18 + (((*(void *)(a1 + 8208) + v19) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*(void *)(a1 + 8208) + v19) & 0x1FF),
          v22 == (double *)v23))
    {
      BOOL v30 = 0;
      int v24 = 0;
      int v29 = *(unsigned __int8 *)(a2 + 816);
      double v25 = 0.0;
    }
    else
    {
      int v24 = 0;
      double v25 = 0.0;
      do
      {
        double v26 = *v22++;
        double v27 = v26;
        if ((char *)v22 - (char *)v21 == 4096)
        {
          uint64_t v28 = v20[1];
          ++v20;
          long long v21 = v28;
          int v22 = v28;
        }
        double v25 = v25 + (v27 - v25) / (double)++v24;
      }
      while (v22 != (double *)v23);
      int v29 = *(unsigned __int8 *)(a2 + 816);
      BOOL v30 = v24 == 20;
      if (*(unsigned char *)(a2 + 816) && v24 == 20 && v25 > 13.4112)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        int v31 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(void *)&buf[0] = 68289282;
          WORD4(buf[0]) = 2082;
          *(void *)((char *)buf + 10) = "";
          WORD1(buf[1]) = 2050;
          *(double *)((char *)&buf[1] + 4) = v25;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance: withdrawing tight coupling assistance due to average user speed\", \"averageSpeed\":\"%{public}f\"}", (uint8_t *)buf, 0x1Cu);
        }
        int v29 = 0;
        *(unsigned char *)(a2 + 816) = 0;
        int v24 = 20;
        BOOL v30 = 1;
      }
    }
    uint64_t v123 = v12;
    if (v8 <= 0.0)
    {
      double v37 = 0.65;
    }
    else
    {
      BOOL v36 = v8 > 1.0 && (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      double v37 = 0.65;
      if (v36) {
        double v37 = v8 + 0.65;
      }
    }
    double v38 = *(double *)(a2 + 20);
    if (v38 > 0.0)
    {
      double v39 = v25 * 1.5;
      if (!v30) {
        double v39 = 13.4112;
      }
      double v38 = sqrt(v39 * (v39 * (v37 * v37)) + v38 * v38);
      *(double *)(a2 + 20) = v38;
    }
    double v40 = *(double *)(a2 + 36);
    if (v40 > 0.0)
    {
      double v40 = sqrt(v37 * v37 + v40 * v40);
      *(double *)(a2 + 36) = v40;
    }
    if (v8 > 0.0 && (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v29)
    {
      *(double *)(a2 + 76) = v8 + *(double *)(a2 + 76);
      *(double *)(a2 + 192) = sub_1000D3E50();
      *(double *)(a2 + 504) = sub_10016C458();
      *(double *)(a2 + 184) = v8 + *(double *)(a2 + 184);
      *(void *)(a2 + 808) = 0;
      double v38 = *(double *)(a2 + 20);
      double v40 = *(double *)(a2 + 36);
    }
    double v41 = v40;
    if (v38 <= 0.0)
    {
LABEL_71:
      if (v41 <= 0.0) {
        goto LABEL_82;
      }
      *(double *)(a2 + 36) = (v41 * 1.95996398 + 25.0) / 1.95996398;
      if (*v10)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v46 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&buf[0] = 68289026;
          WORD4(buf[0]) = 2082;
          *(void *)((char *)buf + 10) = "";
          long long v47 = v46;
          os_log_type_t v48 = OS_LOG_TYPE_DEFAULT;
LABEL_81:
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,vunc\"}", (uint8_t *)buf, 0x12u);
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v49 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(void *)&buf[0] = 68289026;
          WORD4(buf[0]) = 2082;
          *(void *)((char *)buf + 10) = "";
          long long v47 = v49;
          os_log_type_t v48 = OS_LOG_TYPE_DEBUG;
          goto LABEL_81;
        }
      }
LABEL_82:
      uint64_t v50 = *(void *)(a2 + 20);
      uint64_t v51 = *(void *)(a2 + 36);
      double v52 = -1.0;
      if (*(double *)(a1 + 5628) > 0.0)
      {
        sub_1000F1268((double *)(a1 + 11560), a1 + 5608, a2);
        double v52 = v53;
        double v54 = 1.0;
        double v55 = v25 * -0.48 + 1.0;
        double v56 = 0.0;
        if (v55 < 0.0) {
          double v55 = 0.0;
        }
        if (v55 > 1.0) {
          double v55 = 1.0;
        }
        if (v52 * -0.00444444444 + 1.11111111 >= 0.0) {
          double v56 = v52 * -0.00444444444 + 1.11111111;
        }
        if (v56 <= 1.0) {
          double v54 = v56;
        }
        double v57 = v55 * v54;
        double v58 = *(double *)(a2 + 20);
        if (v58 > 0.0)
        {
          if (v58 < v57 * 1.41421356 * 250.0) {
            double v58 = v57 * 1.41421356 * 250.0;
          }
          *(double *)(a2 + 20) = v58;
        }
        double v59 = *(double *)(a2 + 36);
        if (v59 > 0.0)
        {
          double v60 = v57 * 250.0;
          if (v59 >= v60) {
            double v60 = *(double *)(a2 + 36);
          }
          *(double *)(a2 + 36) = v60;
        }
      }
      if (*v10)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v61 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_110;
        }
        uint64_t v62 = *(void *)(a2 + 20);
        uint64_t v63 = *(void *)(a2 + 36);
        *(void *)&buf[0] = 68292098;
        WORD4(buf[0]) = 2082;
        *(void *)((char *)buf + 10) = "";
        WORD1(buf[1]) = 2050;
        *(double *)((char *)&buf[1] + 4) = v9;
        WORD6(buf[1]) = 1026;
        *(_DWORD *)((char *)&buf[1] + 14) = v24;
        WORD1(buf[2]) = 2050;
        *(double *)((char *)&buf[2] + 4) = v25;
        WORD6(buf[2]) = 2050;
        *(double *)((char *)&buf[2] + 14) = v52;
        WORD3(buf[3]) = 2050;
        *((void *)&buf[3] + 1) = v123;
        LOWORD(buf[4]) = 2050;
        *(double *)((char *)&buf[4] + 2) = v38;
        WORD5(buf[4]) = 2050;
        *(void *)((char *)&buf[4] + 12) = v50;
        WORD2(buf[5]) = 2050;
        *(void *)((char *)&buf[5] + 6) = v62;
        HIWORD(buf[5]) = 2050;
        *(void *)&buf[6] = v11;
        WORD4(buf[6]) = 2050;
        *(double *)((char *)&buf[6] + 10) = v40;
        WORD1(buf[7]) = 2050;
        *(void *)((char *)&buf[7] + 4) = v51;
        WORD6(buf[7]) = 2050;
        *(void *)((char *)&buf[7] + 14) = v63;
        uint64_t v14 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance\", \"assistanceAge\":\"%{public}f\", \""
              "validRecentSpeeds\":%{public}d, \"averageSpeed\":\"%{public}f\", \"assistanceInnovation\":\"%{public}f\", "
              "\"huncOriginal\":\"%{public}f\", \"huncPropagated\":\"%{public}f\", \"huncMomentMatched\":\"%{public}f\", "
              "\"huncDiluted\":\"%{public}f\", \"vuncOriginal\":\"%{public}f\", \"vuncPropagated\":\"%{public}f\", \"vunc"
              "MomentMatched\":\"%{public}f\", \"vuncDiluted\":\"%{public}f\"}";
        int v15 = v61;
        os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v64 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_110;
        }
        uint64_t v65 = *(void *)(a2 + 20);
        uint64_t v66 = *(void *)(a2 + 36);
        *(void *)&buf[0] = 68292098;
        WORD4(buf[0]) = 2082;
        *(void *)((char *)buf + 10) = "";
        WORD1(buf[1]) = 2050;
        *(double *)((char *)&buf[1] + 4) = v9;
        WORD6(buf[1]) = 1026;
        *(_DWORD *)((char *)&buf[1] + 14) = v24;
        WORD1(buf[2]) = 2050;
        *(double *)((char *)&buf[2] + 4) = v25;
        WORD6(buf[2]) = 2050;
        *(double *)((char *)&buf[2] + 14) = v52;
        WORD3(buf[3]) = 2050;
        *((void *)&buf[3] + 1) = v123;
        LOWORD(buf[4]) = 2050;
        *(double *)((char *)&buf[4] + 2) = v38;
        WORD5(buf[4]) = 2050;
        *(void *)((char *)&buf[4] + 12) = v50;
        WORD2(buf[5]) = 2050;
        *(void *)((char *)&buf[5] + 6) = v65;
        HIWORD(buf[5]) = 2050;
        *(void *)&buf[6] = v11;
        WORD4(buf[6]) = 2050;
        *(double *)((char *)&buf[6] + 10) = v40;
        WORD1(buf[7]) = 2050;
        *(void *)((char *)&buf[7] + 4) = v51;
        WORD6(buf[7]) = 2050;
        *(void *)((char *)&buf[7] + 14) = v66;
        uint64_t v14 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance\", \"assistanceAge\":\"%{public}f\", \""
              "validRecentSpeeds\":%{public}d, \"averageSpeed\":\"%{public}f\", \"assistanceInnovation\":\"%{public}f\", "
              "\"huncOriginal\":\"%{public}f\", \"huncPropagated\":\"%{public}f\", \"huncMomentMatched\":\"%{public}f\", "
              "\"huncDiluted\":\"%{public}f\", \"vuncOriginal\":\"%{public}f\", \"vuncPropagated\":\"%{public}f\", \"vunc"
              "MomentMatched\":\"%{public}f\", \"vuncDiluted\":\"%{public}f\"}";
        int v15 = v64;
        os_log_type_t v16 = OS_LOG_TYPE_DEBUG;
      }
      uint32_t v17 = 134;
      goto LABEL_109;
    }
    *(double *)(a2 + 20) = (v38 * 1.73081838 + 25.0) / 1.73081838;
    if (*v10)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v42 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_70;
      }
      *(void *)&buf[0] = 68289026;
      WORD4(buf[0]) = 2082;
      *(void *)((char *)buf + 10) = "";
      long long v43 = v42;
      os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v45 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_70;
      }
      *(void *)&buf[0] = 68289026;
      WORD4(buf[0]) = 2082;
      *(void *)((char *)buf + 10) = "";
      long long v43 = v45;
      os_log_type_t v44 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,hunc\"}", (uint8_t *)buf, 0x12u);
LABEL_70:
    double v41 = *(double *)(a2 + 36);
    goto LABEL_71;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&buf[0] = 68289794;
    WORD4(buf[0]) = 2082;
    *(void *)((char *)buf + 10) = "";
    WORD1(buf[1]) = 2050;
    *(double *)((char *)&buf[1] + 4) = v9;
    WORD6(buf[1]) = 2050;
    *(void *)((char *)&buf[1] + 14) = v12;
    WORD3(buf[2]) = 2050;
    *((void *)&buf[2] + 1) = v11;
    uint64_t v14 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Position Assistance(undiluted)\", \"assistanceAge\":\"%{public"
          "}f\", \"huncOriginal\":\"%{public}f\", \"vuncOriginal\":\"%{public}f\"}";
    int v15 = v13;
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    uint32_t v17 = 48;
LABEL_109:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, (uint8_t *)buf, v17);
  }
LABEL_110:
  if (!sub_100F39FE4(a1))
  {
    if (*v10)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v87 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v88 = *(void *)(a2 + 4);
        uint64_t v89 = *(void *)(a2 + 12);
        uint64_t v90 = *(void *)(a2 + 28);
        uint64_t v91 = *(void *)(a2 + 20);
        uint64_t v92 = *(void *)(a2 + 36);
        uint64_t v93 = *(void *)(a2 + 808);
        int v94 = *(unsigned __int8 *)(a2 + 816);
        int v95 = (int)*(double *)(a2 + 76);
        *(void *)&buf[0] = 68291075;
        WORD4(buf[0]) = 2082;
        *(void *)((char *)buf + 10) = "";
        WORD1(buf[1]) = 2049;
        *(void *)((char *)&buf[1] + 4) = v88;
        WORD6(buf[1]) = 2049;
        *(void *)((char *)&buf[1] + 14) = v89;
        WORD3(buf[2]) = 2050;
        *((void *)&buf[2] + 1) = v90;
        LOWORD(buf[3]) = 2050;
        *(void *)((char *)&buf[3] + 2) = v91;
        WORD5(buf[3]) = 2050;
        *(void *)((char *)&buf[3] + 12) = v92;
        WORD2(buf[4]) = 2050;
        *(void *)((char *)&buf[4] + 6) = v93;
        HIWORD(buf[4]) = 1026;
        LODWORD(buf[5]) = v94;
        WORD2(buf[5]) = 1026;
        *(_DWORD *)((char *)&buf[5] + 6) = v95;
        uint64_t v96 = v87;
        os_log_type_t v97 = OS_LOG_TYPE_DEFAULT;
LABEL_139:
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, location assistance\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"age\":\"%{public}.1f\", \"isCPI\":%{public}d, \"timestamp\":%{public}d}", (uint8_t *)buf, 0x5Au);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v101 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v102 = *(void *)(a2 + 4);
        uint64_t v103 = *(void *)(a2 + 12);
        uint64_t v104 = *(void *)(a2 + 28);
        uint64_t v105 = *(void *)(a2 + 20);
        uint64_t v106 = *(void *)(a2 + 36);
        uint64_t v107 = *(void *)(a2 + 808);
        int v108 = *(unsigned __int8 *)(a2 + 816);
        int v109 = (int)*(double *)(a2 + 76);
        *(void *)&buf[0] = 68291075;
        WORD4(buf[0]) = 2082;
        *(void *)((char *)buf + 10) = "";
        WORD1(buf[1]) = 2049;
        *(void *)((char *)&buf[1] + 4) = v102;
        WORD6(buf[1]) = 2049;
        *(void *)((char *)&buf[1] + 14) = v103;
        WORD3(buf[2]) = 2050;
        *((void *)&buf[2] + 1) = v104;
        LOWORD(buf[3]) = 2050;
        *(void *)((char *)&buf[3] + 2) = v105;
        WORD5(buf[3]) = 2050;
        *(void *)((char *)&buf[3] + 12) = v106;
        WORD2(buf[4]) = 2050;
        *(void *)((char *)&buf[4] + 6) = v107;
        HIWORD(buf[4]) = 1026;
        LODWORD(buf[5]) = v108;
        WORD2(buf[5]) = 1026;
        *(_DWORD *)((char *)&buf[5] + 6) = v109;
        uint64_t v96 = v101;
        os_log_type_t v97 = OS_LOG_TYPE_DEBUG;
        goto LABEL_139;
      }
    }
    long long v110 = *(_OWORD *)(a2 + 112);
    v125[6] = *(_OWORD *)(a2 + 96);
    v125[7] = v110;
    v126[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v126 + 12) = *(_OWORD *)(a2 + 140);
    long long v111 = *(_OWORD *)(a2 + 48);
    v125[2] = *(_OWORD *)(a2 + 32);
    v125[3] = v111;
    long long v112 = *(_OWORD *)(a2 + 80);
    v125[4] = *(_OWORD *)(a2 + 64);
    v125[5] = v112;
    long long v113 = *(_OWORD *)(a2 + 16);
    v125[0] = *(_OWORD *)a2;
    v125[1] = v113;
    memcpy(v127, (const void *)(a2 + 160), sizeof(v127));
    uint64_t v128 = *(void *)(a2 + 680);
    uint64_t v114 = *(std::__shared_weak_count **)(a2 + 688);
    long long v129 = v114;
    if (v114) {
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v115 = *(_OWORD *)(a2 + 776);
    long long v134 = *(_OWORD *)(a2 + 760);
    *(_OWORD *)uint64_t v135 = v115;
    *(void *)((char *)&v135[1] + 5) = *(void *)(a2 + 789);
    long long v116 = *(_OWORD *)(a2 + 712);
    long long v130 = *(_OWORD *)(a2 + 696);
    long long v131 = v116;
    long long v117 = *(_OWORD *)(a2 + 744);
    long long v132 = *(_OWORD *)(a2 + 728);
    long long v133 = v117;
    *(_OWORD *)&v135[3] = *(_OWORD *)(a2 + 800);
    v135[5] = *(void *)(a2 + 816);
    uint64_t v118 = *(void *)(a1 + 32);
    if (!v118) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v118 + 48))(v118, v125);
    uint64_t v100 = v129;
    if (v129) {
      goto LABEL_144;
    }
    return;
  }
  int v67 = *(_DWORD *)a2;
  long long v68 = *(_OWORD *)(a2 + 60);
  long long v163 = *(_OWORD *)(a2 + 44);
  long long v164 = v68;
  long long v165 = *(_OWORD *)(a2 + 76);
  int v166 = *(_DWORD *)(a2 + 92);
  long long v69 = *(_OWORD *)(a2 + 116);
  buf[0] = *(_OWORD *)(a2 + 100);
  buf[1] = v69;
  long long v70 = *(_OWORD *)(a2 + 132);
  *(void *)&_DWORD buf[3] = *(void *)(a2 + 148);
  buf[2] = v70;
  memcpy((char *)&buf[3] + 12, (const void *)(a2 + 160), 0x201uLL);
  uint64_t v71 = *(void *)(a2 + 680);
  long long v72 = *(std::__shared_weak_count **)(a2 + 688);
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v73 = *(_OWORD *)(a2 + 776);
  long long v192 = *(_OWORD *)(a2 + 760);
  v193[0] = v73;
  *(void *)((char *)v193 + 13) = *(void *)(a2 + 789);
  long long v74 = *(_OWORD *)(a2 + 712);
  long long v188 = *(_OWORD *)(a2 + 696);
  long long v189 = v74;
  long long v75 = *(_OWORD *)(a2 + 728);
  long long v191 = *(_OWORD *)(a2 + 744);
  long long v190 = v75;
  uint64_t v76 = *(void *)(a2 + 808);
  uint64_t v77 = *(void *)(a1 + 8220);
  uint64_t v78 = *(void *)(a1 + 8228);
  uint64_t v79 = *(void *)(a1 + 8244);
  uint64_t v80 = *(void *)(a1 + 8236);
  uint64_t v81 = *(void *)(a1 + 8252);
  int v82 = *v10;
  uint64_t v122 = *(void *)(a2 + 816);
  uint64_t v124 = *(void *)(a2 + 800);
  uint64_t v121 = v71;
  int v83 = *(_DWORD *)(a1 + 8312);
  if (v82)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v84 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v170 = 68290819;
      int v171 = 0;
      __int16 v172 = 2082;
      long long v173 = "";
      __int16 v174 = 2049;
      uint64_t v175 = v77;
      __int16 v176 = 2049;
      uint64_t v177 = v78;
      __int16 v178 = 2050;
      uint64_t v179 = v79;
      __int16 v180 = 2050;
      uint64_t v181 = v80;
      __int16 v182 = 2050;
      uint64_t v183 = v81;
      __int16 v184 = 2050;
      uint64_t v185 = v76;
      __int16 v186 = 1026;
      int v187 = 1;
      int v85 = v84;
      os_log_type_t v86 = OS_LOG_TYPE_DEFAULT;
LABEL_127:
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, location assistance\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"age\":\"%{public}.1f\", \"isCPI\":%{public}d}", v170, 0x54u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v98 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v170 = 68290819;
      int v171 = 0;
      __int16 v172 = 2082;
      long long v173 = "";
      __int16 v174 = 2049;
      uint64_t v175 = v77;
      __int16 v176 = 2049;
      uint64_t v177 = v78;
      __int16 v178 = 2050;
      uint64_t v179 = v79;
      __int16 v180 = 2050;
      uint64_t v181 = v80;
      __int16 v182 = 2050;
      uint64_t v183 = v81;
      __int16 v184 = 2050;
      uint64_t v185 = v76;
      __int16 v186 = 1026;
      int v187 = 1;
      int v85 = v98;
      os_log_type_t v86 = OS_LOG_TYPE_DEBUG;
      goto LABEL_127;
    }
  }
  uint64_t v137 = v77;
  uint64_t v138 = v78;
  uint64_t v139 = v80;
  uint64_t v140 = v79;
  uint64_t v141 = v81;
  long long v142 = v163;
  long long v143 = v164;
  long long v144 = v165;
  int v136 = v67;
  int v145 = v166;
  int v146 = v83;
  uint64_t v150 = *(void *)&buf[3];
  long long v149 = buf[2];
  long long v148 = buf[1];
  long long v147 = buf[0];
  memcpy(v151, (char *)&buf[3] + 12, sizeof(v151));
  uint64_t v152 = v121;
  int v153 = v72;
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v158 = v192;
  *(_OWORD *)float64x2_t v159 = v193[0];
  *(void *)&v159[13] = *(void *)((char *)v193 + 13);
  long long v154 = v188;
  long long v155 = v189;
  long long v156 = v190;
  long long v157 = v191;
  uint64_t v160 = v124;
  uint64_t v161 = v76;
  uint64_t v162 = v122;
  uint64_t v99 = *(void *)(a1 + 32);
  if (!v99) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v99 + 48))(v99, &v136);
  if (v153) {
    sub_1000DB0A0(v153);
  }
  if (v72)
  {
    uint64_t v100 = v72;
LABEL_144:
    sub_1000DB0A0(v100);
  }
}

void sub_100F3E89C(_Unwind_Exception *a1)
{
  if (STACK[0x2E0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2E0]);
  }
  _Unwind_Resume(a1);
}

void sub_100F3E8D8(uint64_t a1, uint64_t a2)
{
  *(CFAbsoluteTime *)(a2 + 76) = CFAbsoluteTimeGetCurrent();
  *(double *)(a2 + 192) = sub_1000D3E50();
  *(double *)(a2 + 504) = sub_10016C458();
  *(void *)(a2 + 808) = 0;
  if (*(unsigned char *)(a1 + 11672))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a2 + 4);
      uint64_t v6 = *(void *)(a2 + 12);
      uint64_t v7 = *(void *)(a2 + 28);
      uint64_t v8 = *(void *)(a2 + 20);
      uint64_t v9 = *(void *)(a2 + 36);
      int v10 = *(_DWORD *)(a2 + 800);
      int v11 = *(_DWORD *)(a2 + 804);
      int v12 = *(unsigned __int8 *)(a2 + 816);
      uint64_t buf = 68291075;
      __int16 v45 = 2082;
      uint64_t v46 = "";
      __int16 v47 = 2049;
      uint64_t v48 = v5;
      __int16 v49 = 2049;
      uint64_t v50 = v6;
      __int16 v51 = 2050;
      uint64_t v52 = v7;
      __int16 v53 = 2050;
      uint64_t v54 = v8;
      __int16 v55 = 2050;
      uint64_t v56 = v9;
      __int16 v57 = 1026;
      int v58 = v10;
      __int16 v59 = 1026;
      int v60 = v11;
      __int16 v61 = 1026;
      int v62 = v12;
      uint64_t v13 = v4;
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, TEPA location assistance\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"hReliability\":%{public}d, \"vReliability\":%{public}d, \"tightlyCoupled\":%{public}d}", (uint8_t *)&buf, 0x56u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a2 + 4);
      uint64_t v17 = *(void *)(a2 + 12);
      uint64_t v18 = *(void *)(a2 + 28);
      uint64_t v19 = *(void *)(a2 + 20);
      uint64_t v20 = *(void *)(a2 + 36);
      int v21 = *(_DWORD *)(a2 + 800);
      int v22 = *(_DWORD *)(a2 + 804);
      int v23 = *(unsigned __int8 *)(a2 + 816);
      uint64_t buf = 68291075;
      __int16 v45 = 2082;
      uint64_t v46 = "";
      __int16 v47 = 2049;
      uint64_t v48 = v16;
      __int16 v49 = 2049;
      uint64_t v50 = v17;
      __int16 v51 = 2050;
      uint64_t v52 = v18;
      __int16 v53 = 2050;
      uint64_t v54 = v19;
      __int16 v55 = 2050;
      uint64_t v56 = v20;
      __int16 v57 = 1026;
      int v58 = v21;
      __int16 v59 = 1026;
      int v60 = v22;
      __int16 v61 = 1026;
      int v62 = v23;
      uint64_t v13 = v15;
      os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
      goto LABEL_10;
    }
  }
  long long v24 = *(_OWORD *)(a2 + 112);
  v33[6] = *(_OWORD *)(a2 + 96);
  v33[7] = v24;
  v34[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)(a2 + 140);
  long long v25 = *(_OWORD *)(a2 + 48);
  _DWORD v33[2] = *(_OWORD *)(a2 + 32);
  void v33[3] = v25;
  long long v26 = *(_OWORD *)(a2 + 80);
  v33[4] = *(_OWORD *)(a2 + 64);
  v33[5] = v26;
  long long v27 = *(_OWORD *)(a2 + 16);
  v33[0] = *(_OWORD *)a2;
  v33[1] = v27;
  memcpy(v35, (const void *)(a2 + 160), sizeof(v35));
  uint64_t v36 = *(void *)(a2 + 680);
  uint64_t v28 = *(std::__shared_weak_count **)(a2 + 688);
  double v37 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = *(_OWORD *)(a2 + 776);
  long long v42 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)long long v43 = v29;
  *(void *)((char *)&v43[1] + 5) = *(void *)(a2 + 789);
  long long v30 = *(_OWORD *)(a2 + 712);
  long long v38 = *(_OWORD *)(a2 + 696);
  long long v39 = v30;
  long long v31 = *(_OWORD *)(a2 + 744);
  long long v40 = *(_OWORD *)(a2 + 728);
  long long v41 = v31;
  *(_OWORD *)&_DWORD v43[3] = *(_OWORD *)(a2 + 800);
  v43[5] = *(void *)(a2 + 816);
  uint64_t v32 = *(void *)(a1 + 32);
  if (!v32) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v32 + 48))(v32, v33);
  if (v37) {
    sub_1000DB0A0(v37);
  }
}

void sub_100F3EC24(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100F3EC3C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9960) = a2[1];
  *(_OWORD *)(a1 + 9944) = v4;
  long long v5 = a2[2];
  long long v6 = a2[3];
  long long v7 = a2[4];
  *(_OWORD *)(a1 + 10024) = a2[5];
  *(_OWORD *)(a1 + 10008) = v7;
  *(_OWORD *)(a1 + 9992) = v6;
  *(_OWORD *)(a1 + 9976) = v5;
  long long v8 = *(long long *)((char *)a2 + 140);
  long long v9 = a2[6];
  long long v10 = a2[7];
  *(_OWORD *)(a1 + 10072) = a2[8];
  *(_OWORD *)(a1 + 10056) = v10;
  *(_OWORD *)(a1 + 10040) = v9;
  *(_OWORD *)(a1 + 10084) = v8;
  memcpy((void *)(a1 + 10104), a2 + 10, 0x201uLL);
  uint64_t v11 = *((void *)a2 + 85);
  uint64_t v12 = *((void *)a2 + 86);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 10624) = v11;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 10632);
  *(void *)(a1 + 10632) = v12;
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = *(long long *)((char *)a2 + 696);
  long long v15 = *(long long *)((char *)a2 + 712);
  *(_OWORD *)(a1 + 10672) = *(long long *)((char *)a2 + 728);
  *(_OWORD *)(a1 + 10656) = v15;
  *(_OWORD *)(a1 + 10640) = v14;
  __n128 result = *(__n128 *)((char *)a2 + 744);
  long long v17 = *(long long *)((char *)a2 + 760);
  long long v18 = *(long long *)((char *)a2 + 776);
  *(void *)(a1 + 10733) = *(void *)((char *)a2 + 789);
  *(_OWORD *)(a1 + 10720) = v18;
  *(_OWORD *)(a1 + 10704) = v17;
  *(__n128 *)(a1 + 10688) = result;
  return result;
}

void sub_100F3ED28(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)uint64_t v20 = 0xFFFF;
  *(_OWORD *)&void v20[4] = 0uLL;
  *(_OWORD *)&v20[20] = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v20[36] = _Q0;
  *(_OWORD *)&v20[52] = _Q0;
  *(_OWORD *)&v20[68] = _Q0;
  *(_DWORD *)&v20[84] = 0;
  long long v21 = 0uLL;
  *(void *)&v20[88] = 0xBFF0000000000000;
  LODWORD(v22) = 0;
  *(void *)((char *)&v22 + 4) = 0xBFF0000000000000;
  HIDWORD(v22) = 0x7FFFFFFF;
  memset(v23, 0, 25);
  sub_1000DBC34(&v24);
  long long v9 = a2[7];
  long long v21 = a2[6];
  long long v22 = v9;
  *(_OWORD *)int v23 = a2[8];
  *(_OWORD *)&v23[12] = *(_OWORD *)((char *)a2 + 140);
  long long v10 = a2[3];
  *(_OWORD *)&v20[32] = a2[2];
  *(_OWORD *)&v20[48] = v10;
  long long v11 = a2[5];
  *(_OWORD *)&v20[64] = a2[4];
  *(_OWORD *)&v20[80] = v11;
  long long v12 = a2[1];
  *(_OWORD *)uint64_t v20 = *a2;
  *(_OWORD *)&v20[16] = v12;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102305DD0);
  }
  uint64_t v13 = (uint64_t *)(a1 + 1580);
  long long v14 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *v13;
    uint64_t v16 = *(void *)(a1 + 1588);
    *(_DWORD *)uint64_t buf = 134283777;
    uint64_t v31 = v15;
    __int16 v32 = 2049;
    uint64_t v33 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "GnssAssistancePosition,CachedReferenceLocation location,lat,%{private}+.6f,lon,%{private}.6f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102305DD0);
    }
    uint64_t v17 = *v13;
    uint64_t v18 = *(void *)(a1 + 1588);
    int v26 = 134283777;
    uint64_t v27 = v17;
    __int16 v28 = 2049;
    uint64_t v29 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::setRelayedLocation(const CLDaemonLocation &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  sub_100029AD8(a1, (uint64_t)v20, 0);
  if (v25) {
    sub_1000DB0A0(v25);
  }
}

void sub_100F3EFB8(_Unwind_Exception *a1)
{
  if (STACK[0x2C0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

void sub_100F3EFD4(uint64_t a1, uint64_t a2)
{
  long long v3 = (unsigned char *)(a1 + 11672);
  int v4 = *(unsigned __int8 *)(a1 + 11672);
  *(unsigned char *)(a1 + 11672) = sub_100D33CD4(a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  long long v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *v3;
    int v9 = 68289538;
    int v10 = 0;
    __int16 v11 = 2082;
    long long v12 = "";
    __int16 v13 = 1026;
    int v14 = v4;
    __int16 v15 = 1026;
    int v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Updating emergency state\", \"wasInEmergency\":%{public}d, \"fInEmergency\":%{public}d}", (uint8_t *)&v9, 0x1Eu);
  }
  if (v4)
  {
    if (!*v3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      long long v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        long long v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Exiting emergency mode\"}", (uint8_t *)&v9, 0x12u);
      }
      sub_100F4007C(a1);
    }
  }
  else if (*v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Entering emergency mode\"}", (uint8_t *)&v9, 0x12u);
    }
    sub_100F3F214(a1);
  }
}

id sub_100F3F214(uint64_t a1)
{
  uint64_t v2 = a1 + 1576;
  *(_OWORD *)(a1 + 4080) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4096) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4112) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 4124) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4016) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4032) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4048) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4064) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 3984) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4000) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 4236) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4252) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4268) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 4280) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4172) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4188) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4204) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4220) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 4140) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4156) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 4392) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4408) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4424) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 4436) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4328) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4344) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4360) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4376) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 4296) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4312) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 4548) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4564) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4580) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 4592) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4484) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4500) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4516) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4532) = xmmword_101D82F08;
  long long v3 = (unsigned char *)(a1 + 11672);
  int v4 = (uint64_t *)(a1 + 1580);
  *(void *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 4452) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4468) = xmmword_101D82EC8;
  if (*(unsigned char *)(a1 + 11672))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 1672);
      int v7 = sub_1000E6DB4(v2);
      uint64_t v8 = *v4;
      uint64_t v9 = v4[1];
      uint64_t v11 = v4[2];
      uint64_t v10 = v4[3];
      uint64_t v12 = v4[4];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v6;
      __int16 v111 = 1026;
      int v112 = v7;
      __int16 v113 = 2049;
      uint64_t v114 = v8;
      __int16 v115 = 2049;
      uint64_t v116 = v9;
      __int16 v117 = 2049;
      uint64_t v118 = v10;
      __int16 v119 = 2050;
      uint64_t v120 = v11;
      __int16 v121 = 2050;
      uint64_t v122 = v12;
      __int16 v13 = v5;
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fCachedReferenceLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *(_DWORD *)(a1 + 1672);
      int v17 = sub_1000E6DB4(v2);
      uint64_t v18 = *v4;
      uint64_t v19 = v4[1];
      uint64_t v21 = v4[2];
      uint64_t v20 = v4[3];
      uint64_t v22 = v4[4];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v16;
      __int16 v111 = 1026;
      int v112 = v17;
      __int16 v113 = 2049;
      uint64_t v114 = v18;
      __int16 v115 = 2049;
      uint64_t v116 = v19;
      __int16 v117 = 2049;
      uint64_t v118 = v20;
      __int16 v119 = 2050;
      uint64_t v120 = v21;
      __int16 v121 = 2050;
      uint64_t v122 = v22;
      __int16 v13 = v15;
      os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
      goto LABEL_10;
    }
  }
  if (*v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(_DWORD *)(a1 + 6504);
      int v25 = sub_1000E6DB4(a1 + 6408);
      uint64_t v26 = v4[604];
      uint64_t v27 = v4[605];
      uint64_t v28 = v4[607];
      uint64_t v29 = v4[606];
      uint64_t v30 = v4[608];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v24;
      __int16 v111 = 1026;
      int v112 = v25;
      __int16 v113 = 2049;
      uint64_t v114 = v26;
      __int16 v115 = 2049;
      uint64_t v116 = v27;
      __int16 v117 = 2049;
      uint64_t v118 = v28;
      __int16 v119 = 2050;
      uint64_t v120 = v29;
      __int16 v121 = 2050;
      uint64_t v122 = v30;
      uint64_t v31 = v23;
      os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastCellLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v33 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(_DWORD *)(a1 + 6504);
      int v35 = sub_1000E6DB4(a1 + 6408);
      uint64_t v36 = v4[604];
      uint64_t v37 = v4[605];
      uint64_t v38 = v4[607];
      uint64_t v39 = v4[606];
      uint64_t v40 = v4[608];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v34;
      __int16 v111 = 1026;
      int v112 = v35;
      __int16 v113 = 2049;
      uint64_t v114 = v36;
      __int16 v115 = 2049;
      uint64_t v116 = v37;
      __int16 v117 = 2049;
      uint64_t v118 = v38;
      __int16 v119 = 2050;
      uint64_t v120 = v39;
      __int16 v121 = 2050;
      uint64_t v122 = v40;
      uint64_t v31 = v33;
      os_log_type_t v32 = OS_LOG_TYPE_DEBUG;
      goto LABEL_20;
    }
  }
  if (*v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v41 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v42 = *(_DWORD *)(a1 + 7304);
      int v43 = sub_1000E6DB4(a1 + 7208);
      uint64_t v44 = v4[704];
      uint64_t v45 = v4[705];
      uint64_t v46 = v4[707];
      uint64_t v47 = v4[706];
      uint64_t v48 = v4[708];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v42;
      __int16 v111 = 1026;
      int v112 = v43;
      __int16 v113 = 2049;
      uint64_t v114 = v44;
      __int16 v115 = 2049;
      uint64_t v116 = v45;
      __int16 v117 = 2049;
      uint64_t v118 = v46;
      __int16 v119 = 2050;
      uint64_t v120 = v47;
      __int16 v121 = 2050;
      uint64_t v122 = v48;
      __int16 v49 = v41;
      os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastPrefilteredCellLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v51 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v52 = *(_DWORD *)(a1 + 7304);
      int v53 = sub_1000E6DB4(a1 + 7208);
      uint64_t v54 = v4[704];
      uint64_t v55 = v4[705];
      uint64_t v56 = v4[707];
      uint64_t v57 = v4[706];
      uint64_t v58 = v4[708];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v52;
      __int16 v111 = 1026;
      int v112 = v53;
      __int16 v113 = 2049;
      uint64_t v114 = v54;
      __int16 v115 = 2049;
      uint64_t v116 = v55;
      __int16 v117 = 2049;
      uint64_t v118 = v56;
      __int16 v119 = 2050;
      uint64_t v120 = v57;
      __int16 v121 = 2050;
      uint64_t v122 = v58;
      __int16 v49 = v51;
      os_log_type_t v50 = OS_LOG_TYPE_DEBUG;
      goto LABEL_30;
    }
  }
  if (*v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v59 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v60 = *(_DWORD *)(a1 + 8104);
      int v61 = sub_1000E6DB4(a1 + 8008);
      uint64_t v62 = v4[804];
      uint64_t v63 = v4[805];
      uint64_t v64 = v4[807];
      uint64_t v65 = v4[806];
      uint64_t v66 = v4[808];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v60;
      __int16 v111 = 1026;
      int v112 = v61;
      __int16 v113 = 2049;
      uint64_t v114 = v62;
      __int16 v115 = 2049;
      uint64_t v116 = v63;
      __int16 v117 = 2049;
      uint64_t v118 = v64;
      __int16 v119 = 2050;
      uint64_t v120 = v65;
      __int16 v121 = 2050;
      uint64_t v122 = v66;
      int v67 = v59;
      os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastLACLocation \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v69 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v70 = *(_DWORD *)(a1 + 8104);
      int v71 = sub_1000E6DB4(a1 + 8008);
      uint64_t v72 = v4[804];
      uint64_t v73 = v4[805];
      uint64_t v74 = v4[807];
      uint64_t v75 = v4[806];
      uint64_t v76 = v4[808];
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v70;
      __int16 v111 = 1026;
      int v112 = v71;
      __int16 v113 = 2049;
      uint64_t v114 = v72;
      __int16 v115 = 2049;
      uint64_t v116 = v73;
      __int16 v117 = 2049;
      uint64_t v118 = v74;
      __int16 v119 = 2050;
      uint64_t v120 = v75;
      __int16 v121 = 2050;
      uint64_t v122 = v76;
      int v67 = v69;
      os_log_type_t v68 = OS_LOG_TYPE_DEBUG;
      goto LABEL_40;
    }
  }
  if (*v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v77 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v78 = *(_DWORD *)(a1 + 4908);
      int v79 = sub_1000E6DB4(a1 + 4812);
      uint64_t v80 = *(void *)(a1 + 4816);
      uint64_t v81 = *(void *)(a1 + 4824);
      uint64_t v82 = *(void *)(a1 + 4840);
      uint64_t v83 = *(void *)(a1 + 4832);
      uint64_t v84 = *(void *)(a1 + 4848);
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v78;
      __int16 v111 = 1026;
      int v112 = v79;
      __int16 v113 = 2049;
      uint64_t v114 = v80;
      __int16 v115 = 2049;
      uint64_t v116 = v81;
      __int16 v117 = 2049;
      uint64_t v118 = v82;
      __int16 v119 = 2050;
      uint64_t v120 = v83;
      __int16 v121 = 2050;
      uint64_t v122 = v84;
      int v85 = v77;
      os_log_type_t v86 = OS_LOG_TYPE_DEFAULT;
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, onEmergencyEntry fGnssCachedInfo.fLastTightlyCoupledPosition \", \"type\":%{public}d, \"valid\":%{public}hhd, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{private}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x50u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v87 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v88 = *(_DWORD *)(a1 + 4908);
      int v89 = sub_1000E6DB4(a1 + 4812);
      uint64_t v90 = *(void *)(a1 + 4816);
      uint64_t v91 = *(void *)(a1 + 4824);
      uint64_t v92 = *(void *)(a1 + 4840);
      uint64_t v93 = *(void *)(a1 + 4832);
      uint64_t v94 = *(void *)(a1 + 4848);
      *(_DWORD *)uint64_t buf = 68290819;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      __int16 v109 = 1026;
      int v110 = v88;
      __int16 v111 = 1026;
      int v112 = v89;
      __int16 v113 = 2049;
      uint64_t v114 = v90;
      __int16 v115 = 2049;
      uint64_t v116 = v91;
      __int16 v117 = 2049;
      uint64_t v118 = v92;
      __int16 v119 = 2050;
      uint64_t v120 = v93;
      __int16 v121 = 2050;
      uint64_t v122 = v94;
      int v85 = v87;
      os_log_type_t v86 = OS_LOG_TYPE_DEBUG;
      goto LABEL_50;
    }
  }
  if (v3[1] && *v3)
  {
    uint64_t v95 = *(void *)(a1 + 11632);
    if (v95) {
      [*(id *)(v95 + 16) register:*(void *)(v95 + 8) forNotification:4 registrationInfo:0];
    }
    if (*(void *)(a1 + 11648))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102305DF0);
      }
      uint64_t v96 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "WlpReg, 1, gnssemer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102305DF0);
        }
        uint64_t v103 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyEntry()", "%s\n", v103);
        if (v103 != (char *)buf) {
          free(v103);
        }
      }
      [*(id *)(*(void *)(a1 + 11648) + 16) register:*(void *)(*(void *)(a1 + 11648) + 8) forNotification:0 registrationInfo:0];
    }
    if (*(void *)(a1 + 11656))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102305DF0);
      }
      os_log_type_t v97 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "UclpReg, 1, gnssemer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102305DF0);
        }
        uint64_t v104 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyEntry()", "%s\n", v104);
        if (v104 != (char *)buf) {
          free(v104);
        }
      }
      [*(id *)(*(void *)(a1 + 11656) + 16) register:*(void *)(*(void *)(a1 + 11656) + 8) forNotification:0 registrationInfo:0];
    }
  }
  *(CFAbsoluteTime *)(a1 + 11704) = CFAbsoluteTimeGetCurrent();
  if (*v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v98 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      uint64_t v99 = v98;
      os_log_type_t v100 = OS_LOG_TYPE_DEFAULT;
LABEL_78:
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Initializing cell position injection timer, inject every 1 seconds during emergency\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v101 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v106 = 0;
      __int16 v107 = 2082;
      int v108 = "";
      uint64_t v99 = v101;
      os_log_type_t v100 = OS_LOG_TYPE_DEBUG;
      goto LABEL_78;
    }
  }
  id result = [*(id *)(a1 + 11720) setNextFireDelay:1.0 interval:1.0];
  v3[40] = 0;
  return result;
}

id sub_100F4007C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 11632);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:4];
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102305DF0);
  }
  long long v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "WlpReg, 0, gnssemer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102305DF0);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyExit()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  [*(id *)(*(void *)(a1 + 11648) + 16) unregister:*(void *)(*(void *)(a1 + 11648) + 8) forNotification:0];
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102305DF0);
  }
  int v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UclpReg, 0, gnssemer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102305DF0);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::onEmergencyExit()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(*(void *)(a1 + 11656) + 16) unregister:*(void *)(*(void *)(a1 + 11656) + 8) forNotification:0];
  sub_100F404A0(a1);
  id result = [*(id *)(a1 + 11720) setNextFireDelay:1.79769313e308];
  *(unsigned char *)(a1 + 11712) = 0;
  *(void *)(a1 + 11704) = 0xBFF0000000000000;
  return result;
}

void sub_100F40394(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 11673);
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 1026;
    int v10 = v5;
    __int16 v11 = 1026;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Updating HELO permission\", \"old\":%{public}d, \"new\":%{public}d}", (uint8_t *)v6, 0x1Eu);
  }
  *(unsigned char *)(a1 + 11673) = a2;
}

double sub_100F404A0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Clearing cached HELO location\"}", (uint8_t *)v4, 0x12u);
  }
  sub_100F40DB8(a1 + 3176);
  *(_OWORD *)(a1 + 4080) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4096) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4112) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 4124) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4016) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4032) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4048) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4064) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 3984) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4000) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 4236) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4252) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4268) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 4280) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4172) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4188) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4204) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4220) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 4140) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4156) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 4392) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4408) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4424) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 4436) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4328) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4344) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4360) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4376) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 4296) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4312) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 4548) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 4564) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 4580) = xmmword_101D82F38;
  double result = 0.0;
  *(_OWORD *)(a1 + 4592) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 4484) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 4500) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 4516) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 4532) = xmmword_101D82F08;
  *(void *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 4452) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 4468) = xmmword_101D82EC8;
  return result;
}

BOOL sub_100F406B0(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 11672);
  if (*(unsigned char *)(a1 + 11712))
  {
    if (*v1)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102305E10);
      }
      uint64_t v2 = qword_102419388;
      BOOL v3 = os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (v3)
      {
        int v41 = 68289026;
        int v42 = 0;
        __int16 v43 = 2082;
        uint64_t v44 = "";
        __int16 v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,wifi/pipel"
             "ined fix already provided\"}";
LABEL_42:
        uint64_t v27 = v2;
        os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
LABEL_52:
        _os_log_impl((void *)&_mh_execute_header, v27, v28, v5, (uint8_t *)&v41, 0x12u);
        return 0;
      }
      return result;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102305E10);
    }
    uint64_t v24 = qword_102419388;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    int v41 = 68289026;
    int v42 = 0;
    __int16 v43 = 2082;
    uint64_t v44 = "";
    __int16 v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,wifi/pipelined"
         " fix already provided\"}";
LABEL_51:
    uint64_t v27 = v24;
    os_log_type_t v28 = OS_LOG_TYPE_DEBUG;
    goto LABEL_52;
  }
  if (sub_1000E6DB4(a1 + 7208))
  {
    double v7 = *(double *)(a1 + 9880);
    BOOL v8 = (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7 <= 30.0;
    if (!v8 || v7 <= 0.0 || (double v9 = *(double *)(a1 + 9872), v9 <= -450.0) || v9 >= 8850.0 || *(_DWORD *)(a1 + 9896) == -1)
    {
      if (*v1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v2 = qword_1024193D8;
        BOOL v26 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
        BOOL result = 0;
        if (v26)
        {
          int v41 = 68289026;
          int v42 = 0;
          __int16 v43 = 2082;
          uint64_t v44 = "";
          __int16 v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,BaroAlti"
               "tude is invalid\"}";
          goto LABEL_42;
        }
        return result;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v24 = qword_1024193D8;
      BOOL result = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      int v41 = 68289026;
      int v42 = 0;
      __int16 v43 = 2082;
      uint64_t v44 = "";
      __int16 v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,BaroAltitude is invalid\"}";
      goto LABEL_51;
    }
    double v10 = sub_10016C458();
    double v11 = *(double *)(a1 + 9864);
    double v12 = vabdd_f64(v10, v11);
    if (fabs(v11) <= 2.22044605e-16 || (*(void *)(a1 + 9864) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      double v12 = 315360000.0;
    }
    if (v12 >= 5.0)
    {
      if (*v1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v29 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        int v41 = 68289026;
        int v42 = 0;
        __int16 v43 = 2082;
        uint64_t v44 = "";
        uint64_t v30 = v29;
        os_log_type_t v31 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102305D90);
        }
        uint64_t v40 = qword_1024193D8;
        if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
          return 1;
        }
        int v41 = 68289026;
        int v42 = 0;
        __int16 v43 = 2082;
        uint64_t v44 = "";
        uint64_t v30 = v40;
        os_log_type_t v31 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,BaroAltitude is invalid\"}", (uint8_t *)&v41, 0x12u);
      return 1;
    }
    os_log_type_t v14 = (uint64_t *)(a1 + 7236);
    if (*v1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v15 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_64;
      }
      uint64_t v16 = *v14;
      uint64_t v17 = *(void *)(a1 + 7244);
      uint64_t v18 = *(void *)(a1 + 9872);
      uint64_t v19 = *(void *)(a1 + 9880);
      uint64_t v20 = *(void *)(a1 + 9888);
      int v21 = *(_DWORD *)(a1 + 9896);
      int v41 = 68290562;
      int v42 = 0;
      __int16 v43 = 2082;
      uint64_t v44 = "";
      __int16 v45 = 2050;
      uint64_t v46 = v16;
      __int16 v47 = 2050;
      uint64_t v48 = v17;
      __int16 v49 = 2050;
      uint64_t v50 = v18;
      __int16 v51 = 2050;
      uint64_t v52 = v19;
      __int16 v53 = 2050;
      uint64_t v54 = v20;
      __int16 v55 = 1026;
      int v56 = v21;
      uint64_t v22 = v15;
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102305D90);
      }
      uint64_t v32 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_64;
      }
      uint64_t v33 = *v14;
      uint64_t v34 = *(void *)(a1 + 7244);
      uint64_t v35 = *(void *)(a1 + 9872);
      uint64_t v36 = *(void *)(a1 + 9880);
      uint64_t v37 = *(void *)(a1 + 9888);
      int v38 = *(_DWORD *)(a1 + 9896);
      int v41 = 68290562;
      int v42 = 0;
      __int16 v43 = 2082;
      uint64_t v44 = "";
      __int16 v45 = 2050;
      uint64_t v46 = v33;
      __int16 v47 = 2050;
      uint64_t v48 = v34;
      __int16 v49 = 2050;
      uint64_t v50 = v35;
      __int16 v51 = 2050;
      uint64_t v52 = v36;
      __int16 v53 = 2050;
      uint64_t v54 = v37;
      __int16 v55 = 1026;
      int v56 = v38;
      uint64_t v22 = v32;
      os_log_type_t v23 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency, overwrite cell altitude with cached baro altitude\", \"altPrior\":\"%{public}f\", \"altUncPrior\":\"%{public}f\", \"altNew\":\"%{public}f\", \"altUncNew\":\"%{public}f\", \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d}", (uint8_t *)&v41, 0x4Au);
LABEL_64:
    *(_OWORD *)os_log_type_t v14 = *(_OWORD *)(a1 + 9872);
    float v39 = *(double *)(a1 + 9888);
    *(float *)(a1 + 7684) = v39;
    *(_DWORD *)(a1 + 7680) = *(_DWORD *)(a1 + 9896);
    return 1;
  }
  if (!*v1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    uint64_t v24 = qword_1024193D8;
    BOOL result = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    int v41 = 68289026;
    int v42 = 0;
    __int16 v43 = 2082;
    uint64_t v44 = "";
    __int16 v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,fGnssCachedInf"
         "o.fLastPrefilteredCellLocation,invalid\"}";
    goto LABEL_51;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  uint64_t v2 = qword_1024193D8;
  BOOL v25 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v25)
  {
    int v41 = 68289026;
    int v42 = 0;
    __int16 v43 = 2082;
    uint64_t v44 = "";
    __int16 v5 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, shouldProvideCellAndRPAAssistanceDuringEmergency,fGnssCachedInf"
         "o.fLastPrefilteredCellLocation,invalid\"}";
    goto LABEL_42;
  }
  return result;
}

__n128 sub_100F40D90(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 9864) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 9928) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 9912) = v4;
  *(_OWORD *)(a1 + 9896) = v3;
  *(__n128 *)(a1 + 9880) = result;
  return result;
}

__n128 sub_100F40DB8(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(unsigned char *)(a1 + 152) = 0;
  sub_1000DBC34(v15);
  memcpy((void *)(a1 + 160), v15, 0x201uLL);
  long long v7 = v16;
  long long v16 = 0u;
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 688);
  *(_OWORD *)(a1 + 680) = v7;
  if (v8)
  {
    sub_1000DB0A0(v8);
    double v9 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    long long v10 = *(_OWORD *)v22;
    *(_OWORD *)(a1 + 760) = v21;
    *(_OWORD *)(a1 + 776) = v10;
    *(void *)(a1 + 789) = *(void *)&v22[13];
    long long v11 = v18;
    *(_OWORD *)(a1 + 696) = v17;
    *(_OWORD *)(a1 + 712) = v11;
    __n128 result = v20;
    *(_OWORD *)(a1 + 728) = v19;
    *(__n128 *)(a1 + 744) = result;
    if (v9) {
      sub_1000DB0A0(v9);
    }
  }
  else
  {
    long long v13 = *(_OWORD *)v22;
    *(_OWORD *)(a1 + 760) = v21;
    *(_OWORD *)(a1 + 776) = v13;
    *(void *)(a1 + 789) = *(void *)&v22[13];
    long long v14 = v18;
    *(_OWORD *)(a1 + 696) = v17;
    *(_OWORD *)(a1 + 712) = v14;
    __n128 result = v20;
    *(_OWORD *)(a1 + 728) = v19;
    *(__n128 *)(a1 + 744) = result;
  }
  return result;
}

void sub_100F40EE4(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 1571) = a2;
  sub_100F9FD6C(a1 + 496, a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 1571);
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#GnssAssistancePosition,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    __int16 v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistancePosition::feedAirborneActivity(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

double sub_100F410A4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,clearAllLocationAssistanceInformation, Clearing All Location Assistance Information\"}", (uint8_t *)v5, 0x12u);
  }
  sub_100F41B28((uint64_t)v5);
  sub_100F411C8(v2 + 1576, (uint64_t)v5);
  sub_100F423B0((uint64_t)v5);
  return sub_100FA04CC(v2 + 496);
}

uint64_t sub_100F411C8(uint64_t a1, uint64_t a2)
{
  int v4 = (_OWORD *)(a1 + 680);
  __int16 v5 = (long long *)(a2 + 680);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  long long v10 = *(_OWORD *)(a2 + 96);
  long long v11 = *(_OWORD *)(a2 + 112);
  long long v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 96) = v10;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  long long v13 = *v5;
  *__int16 v5 = 0u;
  long long v14 = *(std::__shared_weak_count **)(a1 + 688);
  *int v4 = v13;
  if (v14) {
    sub_1000DB0A0(v14);
  }
  long long v15 = *(_OWORD *)(a2 + 696);
  long long v16 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v16;
  *(_OWORD *)(a1 + 696) = v15;
  long long v17 = *(_OWORD *)(a2 + 744);
  long long v18 = *(_OWORD *)(a2 + 760);
  long long v19 = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 789) = *(void *)(a2 + 789);
  *(_OWORD *)(a1 + 760) = v18;
  *(_OWORD *)(a1 + 776) = v19;
  *(_OWORD *)(a1 + 744) = v17;
  long long v20 = *(_OWORD *)(a2 + 880);
  long long v22 = *(_OWORD *)(a2 + 832);
  long long v21 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v20;
  *(_OWORD *)(a1 + 832) = v22;
  *(_OWORD *)(a1 + 848) = v21;
  long long v24 = *(_OWORD *)(a2 + 912);
  long long v23 = *(_OWORD *)(a2 + 928);
  long long v25 = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 940) = *(_OWORD *)(a2 + 940);
  *(_OWORD *)(a1 + 912) = v24;
  *(_OWORD *)(a1 + 928) = v23;
  *(_OWORD *)(a1 + 896) = v25;
  long long v26 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 816) = v26;
  memcpy((void *)(a1 + 960), (const void *)(a2 + 960), 0x201uLL);
  long long v27 = v5[50];
  v5[50] = 0u;
  os_log_type_t v28 = *(std::__shared_weak_count **)(a1 + 1488);
  v4[50] = v27;
  if (v28) {
    sub_1000DB0A0(v28);
  }
  long long v29 = *(_OWORD *)(a2 + 1496);
  long long v30 = *(_OWORD *)(a2 + 1528);
  *(_OWORD *)(a1 + 1512) = *(_OWORD *)(a2 + 1512);
  *(_OWORD *)(a1 + 1528) = v30;
  *(_OWORD *)(a1 + 1496) = v29;
  long long v31 = *(_OWORD *)(a2 + 1544);
  long long v32 = *(_OWORD *)(a2 + 1560);
  long long v33 = *(_OWORD *)(a2 + 1576);
  *(void *)(a1 + 1589) = *(void *)(a2 + 1589);
  *(_OWORD *)(a1 + 1560) = v32;
  *(_OWORD *)(a1 + 1576) = v33;
  *(_OWORD *)(a1 + 1544) = v31;
  long long v34 = *(_OWORD *)(a2 + 1648);
  long long v35 = *(_OWORD *)(a2 + 1664);
  long long v36 = *(_OWORD *)(a2 + 1680);
  *(_OWORD *)(a1 + 1632) = *(_OWORD *)(a2 + 1632);
  *(_OWORD *)(a1 + 1680) = v36;
  *(_OWORD *)(a1 + 1664) = v35;
  *(_OWORD *)(a1 + 1648) = v34;
  long long v37 = *(_OWORD *)(a2 + 1712);
  long long v38 = *(_OWORD *)(a2 + 1728);
  long long v39 = *(_OWORD *)(a2 + 1740);
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(_OWORD *)(a1 + 1740) = v39;
  *(_OWORD *)(a1 + 1728) = v38;
  *(_OWORD *)(a1 + 1712) = v37;
  long long v40 = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1616) = *(_OWORD *)(a2 + 1616);
  *(_OWORD *)(a1 + 1600) = v40;
  memcpy((void *)(a1 + 1760), (const void *)(a2 + 1760), 0x201uLL);
  long long v41 = v5[100];
  v5[100] = 0u;
  int v42 = *(std::__shared_weak_count **)(a1 + 2288);
  v4[100] = v41;
  if (v42) {
    sub_1000DB0A0(v42);
  }
  long long v43 = *(_OWORD *)(a2 + 2296);
  long long v44 = *(_OWORD *)(a2 + 2328);
  *(_OWORD *)(a1 + 2312) = *(_OWORD *)(a2 + 2312);
  *(_OWORD *)(a1 + 2328) = v44;
  *(_OWORD *)(a1 + 2296) = v43;
  long long v45 = *(_OWORD *)(a2 + 2344);
  long long v46 = *(_OWORD *)(a2 + 2360);
  long long v47 = *(_OWORD *)(a2 + 2376);
  *(void *)(a1 + 2389) = *(void *)(a2 + 2389);
  *(_OWORD *)(a1 + 2360) = v46;
  *(_OWORD *)(a1 + 2376) = v47;
  *(_OWORD *)(a1 + 2344) = v45;
  memcpy((void *)(a1 + 2400), (const void *)(a2 + 2400), 0x3E0uLL);
  memcpy((void *)(a1 + 3392), (const void *)(a2 + 3392), 0x201uLL);
  long long v48 = v5[202];
  v5[202] = 0u;
  __int16 v49 = *(std::__shared_weak_count **)(a1 + 3920);
  v4[202] = v48;
  if (v49) {
    sub_1000DB0A0(v49);
  }
  long long v50 = *(_OWORD *)(a2 + 3928);
  long long v51 = *(_OWORD *)(a2 + 3960);
  *(_OWORD *)(a1 + 3944) = *(_OWORD *)(a2 + 3944);
  *(_OWORD *)(a1 + 3960) = v51;
  *(_OWORD *)(a1 + 3928) = v50;
  long long v52 = *(_OWORD *)(a2 + 3976);
  long long v53 = *(_OWORD *)(a2 + 3992);
  long long v54 = *(_OWORD *)(a2 + 4008);
  *(void *)(a1 + 4021) = *(void *)(a2 + 4021);
  *(_OWORD *)(a1 + 3992) = v53;
  *(_OWORD *)(a1 + 4008) = v54;
  *(_OWORD *)(a1 + 3976) = v52;
  long long v55 = *(_OWORD *)(a2 + 4080);
  long long v56 = *(_OWORD *)(a2 + 4096);
  long long v57 = *(_OWORD *)(a2 + 4112);
  *(_OWORD *)(a1 + 4064) = *(_OWORD *)(a2 + 4064);
  *(_OWORD *)(a1 + 4112) = v57;
  *(_OWORD *)(a1 + 4096) = v56;
  *(_OWORD *)(a1 + 4080) = v55;
  long long v58 = *(_OWORD *)(a2 + 4144);
  long long v59 = *(_OWORD *)(a2 + 4160);
  long long v60 = *(_OWORD *)(a2 + 4172);
  *(_OWORD *)(a1 + 4128) = *(_OWORD *)(a2 + 4128);
  *(_OWORD *)(a1 + 4172) = v60;
  *(_OWORD *)(a1 + 4160) = v59;
  *(_OWORD *)(a1 + 4144) = v58;
  long long v61 = *(_OWORD *)(a2 + 4032);
  *(_OWORD *)(a1 + 4048) = *(_OWORD *)(a2 + 4048);
  *(_OWORD *)(a1 + 4032) = v61;
  memcpy((void *)(a1 + 4192), (const void *)(a2 + 4192), 0x201uLL);
  long long v62 = v5[252];
  v5[252] = 0u;
  uint64_t v63 = *(std::__shared_weak_count **)(a1 + 4720);
  v4[252] = v62;
  if (v63) {
    sub_1000DB0A0(v63);
  }
  long long v64 = *(_OWORD *)(a2 + 4728);
  long long v65 = *(_OWORD *)(a2 + 4760);
  *(_OWORD *)(a1 + 4744) = *(_OWORD *)(a2 + 4744);
  *(_OWORD *)(a1 + 4760) = v65;
  *(_OWORD *)(a1 + 4728) = v64;
  long long v66 = *(_OWORD *)(a2 + 4776);
  long long v67 = *(_OWORD *)(a2 + 4792);
  long long v68 = *(_OWORD *)(a2 + 4808);
  *(void *)(a1 + 4821) = *(void *)(a2 + 4821);
  *(_OWORD *)(a1 + 4792) = v67;
  *(_OWORD *)(a1 + 4808) = v68;
  *(_OWORD *)(a1 + 4776) = v66;
  long long v69 = *(_OWORD *)(a2 + 4880);
  long long v70 = *(_OWORD *)(a2 + 4896);
  long long v71 = *(_OWORD *)(a2 + 4912);
  *(_OWORD *)(a1 + 4864) = *(_OWORD *)(a2 + 4864);
  *(_OWORD *)(a1 + 4912) = v71;
  *(_OWORD *)(a1 + 4896) = v70;
  *(_OWORD *)(a1 + 4880) = v69;
  long long v72 = *(_OWORD *)(a2 + 4972);
  long long v73 = *(_OWORD *)(a2 + 4944);
  long long v74 = *(_OWORD *)(a2 + 4960);
  *(_OWORD *)(a1 + 4928) = *(_OWORD *)(a2 + 4928);
  *(_OWORD *)(a1 + 4972) = v72;
  *(_OWORD *)(a1 + 4960) = v74;
  *(_OWORD *)(a1 + 4944) = v73;
  long long v75 = *(_OWORD *)(a2 + 4832);
  *(_OWORD *)(a1 + 4848) = *(_OWORD *)(a2 + 4848);
  *(_OWORD *)(a1 + 4832) = v75;
  memcpy((void *)(a1 + 4992), (const void *)(a2 + 4992), 0x201uLL);
  long long v76 = v5[302];
  v5[302] = 0u;
  uint64_t v77 = *(std::__shared_weak_count **)(a1 + 5520);
  v4[302] = v76;
  if (v77) {
    sub_1000DB0A0(v77);
  }
  long long v78 = *(_OWORD *)(a2 + 5528);
  long long v79 = *(_OWORD *)(a2 + 5560);
  *(_OWORD *)(a1 + 5544) = *(_OWORD *)(a2 + 5544);
  *(_OWORD *)(a1 + 5560) = v79;
  *(_OWORD *)(a1 + 5528) = v78;
  long long v80 = *(_OWORD *)(a2 + 5576);
  long long v81 = *(_OWORD *)(a2 + 5592);
  long long v82 = *(_OWORD *)(a2 + 5608);
  *(void *)(a1 + 5621) = *(void *)(a2 + 5621);
  *(_OWORD *)(a1 + 5592) = v81;
  *(_OWORD *)(a1 + 5608) = v82;
  *(_OWORD *)(a1 + 5576) = v80;
  long long v83 = *(_OWORD *)(a2 + 5680);
  long long v84 = *(_OWORD *)(a2 + 5696);
  long long v85 = *(_OWORD *)(a2 + 5712);
  *(_OWORD *)(a1 + 5664) = *(_OWORD *)(a2 + 5664);
  *(_OWORD *)(a1 + 5712) = v85;
  *(_OWORD *)(a1 + 5696) = v84;
  *(_OWORD *)(a1 + 5680) = v83;
  long long v86 = *(_OWORD *)(a2 + 5772);
  long long v87 = *(_OWORD *)(a2 + 5744);
  long long v88 = *(_OWORD *)(a2 + 5760);
  *(_OWORD *)(a1 + 5728) = *(_OWORD *)(a2 + 5728);
  *(_OWORD *)(a1 + 5772) = v86;
  *(_OWORD *)(a1 + 5760) = v88;
  *(_OWORD *)(a1 + 5744) = v87;
  long long v89 = *(_OWORD *)(a2 + 5632);
  *(_OWORD *)(a1 + 5648) = *(_OWORD *)(a2 + 5648);
  *(_OWORD *)(a1 + 5632) = v89;
  memcpy((void *)(a1 + 5792), (const void *)(a2 + 5792), 0x201uLL);
  long long v90 = v5[352];
  v5[352] = 0u;
  uint64_t v91 = *(std::__shared_weak_count **)(a1 + 6320);
  v4[352] = v90;
  if (v91) {
    sub_1000DB0A0(v91);
  }
  long long v92 = *(_OWORD *)(a2 + 6328);
  long long v93 = *(_OWORD *)(a2 + 6360);
  *(_OWORD *)(a1 + 6344) = *(_OWORD *)(a2 + 6344);
  *(_OWORD *)(a1 + 6360) = v93;
  *(_OWORD *)(a1 + 6328) = v92;
  long long v94 = *(_OWORD *)(a2 + 6376);
  long long v95 = *(_OWORD *)(a2 + 6392);
  long long v96 = *(_OWORD *)(a2 + 6408);
  *(void *)(a1 + 6421) = *(void *)(a2 + 6421);
  *(_OWORD *)(a1 + 6392) = v95;
  *(_OWORD *)(a1 + 6408) = v96;
  *(_OWORD *)(a1 + 6376) = v94;
  long long v97 = *(_OWORD *)(a2 + 6480);
  long long v98 = *(_OWORD *)(a2 + 6496);
  long long v99 = *(_OWORD *)(a2 + 6512);
  *(_OWORD *)(a1 + 6464) = *(_OWORD *)(a2 + 6464);
  *(_OWORD *)(a1 + 6512) = v99;
  *(_OWORD *)(a1 + 6496) = v98;
  *(_OWORD *)(a1 + 6480) = v97;
  long long v100 = *(_OWORD *)(a2 + 6572);
  long long v101 = *(_OWORD *)(a2 + 6544);
  long long v102 = *(_OWORD *)(a2 + 6560);
  *(_OWORD *)(a1 + 6528) = *(_OWORD *)(a2 + 6528);
  *(_OWORD *)(a1 + 6572) = v100;
  *(_OWORD *)(a1 + 6560) = v102;
  *(_OWORD *)(a1 + 6544) = v101;
  long long v103 = *(_OWORD *)(a2 + 6432);
  *(_OWORD *)(a1 + 6448) = *(_OWORD *)(a2 + 6448);
  *(_OWORD *)(a1 + 6432) = v103;
  sub_100F42500(a1 + 6592, a2 + 6592);
  long long v104 = *(_OWORD *)(a2 + 6640);
  *(_OWORD *)(a1 + 6656) = *(_OWORD *)(a2 + 6656);
  *(_OWORD *)(a1 + 6640) = v104;
  long long v105 = *(_OWORD *)(a2 + 6672);
  long long v106 = *(_OWORD *)(a2 + 6688);
  long long v107 = *(_OWORD *)(a2 + 6704);
  *(_OWORD *)(a1 + 6720) = *(_OWORD *)(a2 + 6720);
  *(_OWORD *)(a1 + 6704) = v107;
  *(_OWORD *)(a1 + 6688) = v106;
  *(_OWORD *)(a1 + 6672) = v105;
  long long v108 = *(_OWORD *)(a2 + 6736);
  long long v109 = *(_OWORD *)(a2 + 6752);
  long long v110 = *(_OWORD *)(a2 + 6768);
  *(_OWORD *)(a1 + 6780) = *(_OWORD *)(a2 + 6780);
  *(_OWORD *)(a1 + 6768) = v110;
  *(_OWORD *)(a1 + 6752) = v109;
  *(_OWORD *)(a1 + 6736) = v108;
  memcpy((void *)(a1 + 6800), (const void *)(a2 + 6800), 0x201uLL);
  long long v111 = v5[415];
  v5[415] = 0u;
  int v112 = *(std::__shared_weak_count **)(a1 + 7328);
  v4[415] = v111;
  if (v112) {
    sub_1000DB0A0(v112);
  }
  long long v113 = *(_OWORD *)(a2 + 7336);
  long long v114 = *(_OWORD *)(a2 + 7368);
  *(_OWORD *)(a1 + 7352) = *(_OWORD *)(a2 + 7352);
  *(_OWORD *)(a1 + 7368) = v114;
  *(_OWORD *)(a1 + 7336) = v113;
  long long v115 = *(_OWORD *)(a2 + 7384);
  long long v116 = *(_OWORD *)(a2 + 7400);
  long long v117 = *(_OWORD *)(a2 + 7416);
  *(void *)(a1 + 7429) = *(void *)(a2 + 7429);
  *(_OWORD *)(a1 + 7400) = v116;
  *(_OWORD *)(a1 + 7416) = v117;
  *(_OWORD *)(a1 + 7384) = v115;
  long long v118 = *(_OWORD *)(a2 + 7440);
  *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
  *(_OWORD *)(a1 + 7440) = v118;
  long long v119 = *(_OWORD *)(a2 + 7544);
  long long v121 = *(_OWORD *)(a2 + 7496);
  long long v120 = *(_OWORD *)(a2 + 7512);
  *(_OWORD *)(a1 + 7528) = *(_OWORD *)(a2 + 7528);
  *(_OWORD *)(a1 + 7544) = v119;
  *(_OWORD *)(a1 + 7496) = v121;
  *(_OWORD *)(a1 + 7512) = v120;
  long long v123 = *(_OWORD *)(a2 + 7576);
  long long v122 = *(_OWORD *)(a2 + 7592);
  long long v124 = *(_OWORD *)(a2 + 7560);
  *(_OWORD *)(a1 + 7604) = *(_OWORD *)(a2 + 7604);
  *(_OWORD *)(a1 + 7576) = v123;
  *(_OWORD *)(a1 + 7592) = v122;
  *(_OWORD *)(a1 + 7560) = v124;
  long long v125 = *(_OWORD *)(a2 + 7480);
  *(_OWORD *)(a1 + 7464) = *(_OWORD *)(a2 + 7464);
  *(_OWORD *)(a1 + 7480) = v125;
  memcpy((void *)(a1 + 7624), (const void *)(a2 + 7624), 0x201uLL);
  long long v126 = *(_OWORD *)(a2 + 8144);
  *(_OWORD *)(a2 + 8144) = 0u;
  unsigned int v127 = *(std::__shared_weak_count **)(a1 + 8152);
  *(_OWORD *)(a1 + 8144) = v126;
  if (v127) {
    sub_1000DB0A0(v127);
  }
  long long v128 = *(_OWORD *)(a2 + 8160);
  long long v129 = *(_OWORD *)(a2 + 8176);
  *(_OWORD *)(a1 + 0x2000) = *(_OWORD *)(a2 + 0x2000);
  *(_OWORD *)(a1 + 8176) = v129;
  *(_OWORD *)(a1 + 8160) = v128;
  long long v130 = *(_OWORD *)(a2 + 8208);
  long long v131 = *(_OWORD *)(a2 + 8224);
  long long v132 = *(_OWORD *)(a2 + 8240);
  *(void *)(a1 + 8253) = *(void *)(a2 + 8253);
  *(_OWORD *)(a1 + 8240) = v132;
  *(_OWORD *)(a1 + 8224) = v131;
  *(_OWORD *)(a1 + 8208) = v130;
  uint64_t v133 = *(void *)(a2 + 8280);
  *(_OWORD *)(a1 + 8264) = *(_OWORD *)(a2 + 8264);
  *(void *)(a1 + 8280) = v133;
  long long v134 = *(_OWORD *)(a2 + 8320);
  long long v135 = *(_OWORD *)(a2 + 8336);
  long long v136 = *(_OWORD *)(a2 + 8352);
  *(_OWORD *)(a1 + 8304) = *(_OWORD *)(a2 + 8304);
  *(_OWORD *)(a1 + 8352) = v136;
  *(_OWORD *)(a1 + 8336) = v135;
  *(_OWORD *)(a1 + 8320) = v134;
  *(_OWORD *)(a1 + 8288) = *(_OWORD *)(a2 + 8288);
  long long v137 = *(_OWORD *)(a2 + 8416);
  long long v138 = *(_OWORD *)(a2 + 8432);
  long long v139 = *(_OWORD *)(a2 + 8448);
  *(_OWORD *)(a1 + 8400) = *(_OWORD *)(a2 + 8400);
  *(_OWORD *)(a1 + 8448) = v139;
  *(_OWORD *)(a1 + 8432) = v138;
  *(_OWORD *)(a1 + 8416) = v137;
  long long v140 = *(_OWORD *)(a2 + 8508);
  long long v141 = *(_OWORD *)(a2 + 8480);
  long long v142 = *(_OWORD *)(a2 + 8496);
  *(_OWORD *)(a1 + 8464) = *(_OWORD *)(a2 + 8464);
  *(_OWORD *)(a1 + 8508) = v140;
  *(_OWORD *)(a1 + 8496) = v142;
  *(_OWORD *)(a1 + 8480) = v141;
  long long v143 = *(_OWORD *)(a2 + 8368);
  *(_OWORD *)(a1 + 8384) = *(_OWORD *)(a2 + 8384);
  *(_OWORD *)(a1 + 8368) = v143;
  memcpy((void *)(a1 + 8528), (const void *)(a2 + 8528), 0x201uLL);
  long long v144 = v5[523];
  v5[523] = 0u;
  int v145 = *(std::__shared_weak_count **)(a1 + 9056);
  v4[523] = v144;
  if (v145) {
    sub_1000DB0A0(v145);
  }
  long long v146 = *(_OWORD *)(a2 + 9064);
  long long v147 = *(_OWORD *)(a2 + 9096);
  *(_OWORD *)(a1 + 9080) = *(_OWORD *)(a2 + 9080);
  *(_OWORD *)(a1 + 9096) = v147;
  *(_OWORD *)(a1 + 9064) = v146;
  long long v148 = *(_OWORD *)(a2 + 9112);
  long long v149 = *(_OWORD *)(a2 + 9128);
  long long v150 = *(_OWORD *)(a2 + 9144);
  *(void *)(a1 + 9157) = *(void *)(a2 + 9157);
  *(_OWORD *)(a1 + 9128) = v149;
  *(_OWORD *)(a1 + 9144) = v150;
  *(_OWORD *)(a1 + 9112) = v148;
  sub_100F4276C(a1 + 9168, a2 + 9168);
  *(void *)(a1 + 9976) = *(void *)(a2 + 9976);
  return a1;
}

void *sub_100F41980@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102305D90);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,getHELOAWDData", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102305D90);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Emergency::HELOAWDData CLGnssAssistancePosition::getHELOAWDData()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return memcpy(a2, (const void *)(a1 + 3976), 0x278uLL);
}

uint64_t sub_100F41B28(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(_OWORD *)(a1 + 4) = 0u;
  uint64_t v2 = (unsigned char *)(a1 + 9168);
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  uint64_t v3 = a1 + 8324;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v11 = _Q0;
  *(_OWORD *)(a1 + 36) = _Q0;
  uint64_t v9 = a1 + 820;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(unsigned char *)(a1 + 152) = 0;
  sub_1000DBC34(a1 + 160);
  *(_DWORD *)(a1 + 800) = 0xFFFF;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)uint64_t v9 = xmmword_101D1C320;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v11;
  *(_DWORD *)(a1 + 884) = 0;
  *(void *)(a1 + 888) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_DWORD *)(a1 + 912) = 0;
  *(void *)(v9 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 924) = 0x7FFFFFFF;
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(unsigned char *)(a1 + 952) = 0;
  sub_1000DBC34(a1 + 960);
  *(_DWORD *)(a1 + 1600) = 0xFFFF;
  *(_OWORD *)(a1 + 1604) = 0u;
  *(_OWORD *)(v9 + 800) = xmmword_101D1C320;
  *(_OWORD *)(v9 + 816) = v11;
  *(_OWORD *)(v9 + 832) = v11;
  *(_OWORD *)(v9 + 848) = v11;
  *(_DWORD *)(a1 + 1684) = 0;
  *(void *)(a1 + 1688) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_DWORD *)(a1 + 1712) = 0;
  *(void *)(v9 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1724) = 0x7FFFFFFF;
  *(void *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(unsigned char *)(a1 + 1752) = 0;
  sub_1000DBC34(a1 + 1760);
  *(_OWORD *)(a1 + 2504) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2520) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 2536) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 2548) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2440) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2456) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2472) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2488) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 2408) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2424) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 2660) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2676) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 2692) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 2704) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2596) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2612) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2628) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2644) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 2564) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2580) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 2816) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2832) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 2848) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 2860) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2752) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2768) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2784) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2800) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 2720) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2736) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 2972) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2988) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 3004) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 3016) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2908) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2924) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2940) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2956) = xmmword_101D82F08;
  *(void *)(a1 + 2400) = 0;
  *(_OWORD *)(a1 + 2876) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2892) = xmmword_101D82EC8;
  *(_DWORD *)(a1 + 3080) = 0xFFFF;
  *(_OWORD *)(a1 + 3084) = 0u;
  *(_OWORD *)(a1 + 3100) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 3116) = v11;
  *(_OWORD *)(a1 + 3132) = v11;
  *(_OWORD *)(a1 + 3148) = v11;
  *(_DWORD *)(a1 + 3164) = 0;
  *(void *)(a1 + 3168) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_DWORD *)(a1 + 3192) = 0;
  *(void *)(v9 + 2376) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3204) = 0x7FFFFFFF;
  *(void *)(a1 + 3208) = 0;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(unsigned char *)(a1 + 3232) = 0;
  *(_DWORD *)(a1 + 3236) = 0xFFFF;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(void *)(a1 + 3256) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3264) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 3280) = v11;
  *(_OWORD *)(a1 + 3296) = v11;
  *(void *)(a1 + 3312) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3320) = 0;
  *(void *)(v9 + 2504) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3348) = 0;
  *(_OWORD *)(a1 + 3332) = 0u;
  *(void *)(a1 + 3352) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3360) = 0x7FFFFFFF;
  *(void *)(a1 + 3380) = 0;
  *(_OWORD *)(a1 + 3364) = 0u;
  *(unsigned char *)(a1 + 3388) = 0;
  sub_1000DBC34(a1 + 3392);
  *(_DWORD *)(a1 + 4032) = 0xFFFF;
  *(_OWORD *)(a1 + 4036) = 0u;
  *(_OWORD *)(v9 + 3232) = xmmword_101D1C320;
  *(_OWORD *)(v9 + 3248) = v11;
  *(_OWORD *)(v9 + 3264) = v11;
  *(_OWORD *)(v9 + 3280) = v11;
  *(_DWORD *)(a1 + 4116) = 0;
  *(void *)(a1 + 4120) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4128) = 0u;
  *(_DWORD *)(a1 + 4144) = 0;
  *(void *)(v9 + 3328) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4156) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(unsigned char *)(a1 + 4184) = 0;
  *(void *)(a1 + 4160) = 0;
  sub_1000DBC34(a1 + 4192);
  *(_DWORD *)(a1 + 4832) = 0xFFFF;
  *(_OWORD *)(a1 + 4836) = 0u;
  *(_OWORD *)(v9 + 4032) = xmmword_101D1C320;
  *(_OWORD *)(v9 + 4048) = v11;
  *(_OWORD *)(v9 + 4064) = v11;
  *(_OWORD *)(v9 + 4080) = v11;
  *(_DWORD *)(a1 + 4916) = 0;
  *(void *)(a1 + 4920) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_DWORD *)(a1 + 4944) = 0;
  *(void *)(v9 + 4128) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4956) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(unsigned char *)(a1 + 4984) = 0;
  *(void *)(a1 + 4960) = 0;
  sub_1000DBC34(a1 + 4992);
  *(_DWORD *)(a1 + 5632) = 0xFFFF;
  *(_OWORD *)(a1 + 5636) = 0u;
  *(_OWORD *)(v9 + 4832) = xmmword_101D1C320;
  *(_OWORD *)(v9 + 4848) = v11;
  *(_OWORD *)(v9 + 4864) = v11;
  *(_OWORD *)(v9 + 4880) = v11;
  *(_DWORD *)(a1 + 5716) = 0;
  *(void *)(a1 + 5720) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 5728) = 0u;
  *(_DWORD *)(a1 + 5744) = 0;
  *(void *)(v9 + 4928) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 5756) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 5768) = 0u;
  *(unsigned char *)(a1 + 5784) = 0;
  *(void *)(a1 + 5760) = 0;
  sub_1000DBC34(a1 + 5792);
  *(_DWORD *)(a1 + 6432) = 0xFFFF;
  *(_OWORD *)(a1 + 6436) = 0u;
  *(_OWORD *)(v9 + 5632) = xmmword_101D1C320;
  *(_OWORD *)(v9 + 5648) = v11;
  *(_OWORD *)(v9 + 5664) = v11;
  *(_OWORD *)(v9 + 5680) = v11;
  *(_DWORD *)(a1 + 6516) = 0;
  *(void *)(a1 + 6520) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_DWORD *)(a1 + 6544) = 0;
  *(void *)(v9 + 5728) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 6556) = 0x7FFFFFFF;
  *(void *)(a1 + 6560) = 0;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(unsigned char *)(a1 + 6584) = 0;
  *(_OWORD *)(a1 + 6592) = 0u;
  *(_OWORD *)(a1 + 6608) = 0u;
  *(_OWORD *)(a1 + 6624) = 0u;
  *(_DWORD *)(a1 + 6640) = 0xFFFF;
  *(_OWORD *)(a1 + 6644) = 0u;
  *(_OWORD *)(v9 + 5840) = xmmword_101D1C320;
  *(_OWORD *)(v9 + 5856) = v11;
  *(_OWORD *)(v9 + 5872) = v11;
  *(_OWORD *)(v9 + 5888) = v11;
  *(_DWORD *)(a1 + 6724) = 0;
  *(void *)(a1 + 6728) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 6752) = 0;
  *(_OWORD *)(a1 + 6736) = 0u;
  *(void *)(v9 + 5936) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 6764) = 0x7FFFFFFF;
  *(void *)(a1 + 6784) = 0;
  *(_OWORD *)(a1 + 6768) = 0u;
  *(unsigned char *)(a1 + 6792) = 0;
  sub_1000DBC34(a1 + 6800);
  *(unsigned char *)(a1 + 7456) = 0;
  *(_OWORD *)(a1 + 7440) = 0u;
  *(void *)(a1 + 7460) = 0xFFFF00000003;
  *(_OWORD *)(a1 + 7484) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 7500) = v11;
  *(_OWORD *)(a1 + 7516) = v11;
  *(_OWORD *)(a1 + 7532) = v11;
  *(_OWORD *)(a1 + 7468) = 0u;
  *(_DWORD *)(a1 + 7548) = 0;
  *(void *)(a1 + 7552) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_DWORD *)(a1 + 7576) = 0;
  *(void *)(v9 + 6760) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 7588) = 0x7FFFFFFF;
  *(void *)(a1 + 7608) = 0;
  *(unsigned char *)(a1 + 7616) = 0;
  *(_OWORD *)(a1 + 7592) = 0u;
  sub_1000DBC34(a1 + 7624);
  *(unsigned char *)(a1 + 8280) = 0;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_DWORD *)(a1 + 8284) = 3;
  *(_OWORD *)(a1 + 8288) = 0u;
  *(_OWORD *)(a1 + 8304) = xmmword_101D1C320;
  *(_DWORD *)(a1 + 8320) = -1;
  *(_WORD *)uint64_t v3 = 0;
  *(_OWORD *)(a1 + 8328) = 0u;
  *(_OWORD *)(a1 + 8344) = 0u;
  *(void *)(a1 + 8360) = 0;
  *(_DWORD *)(a1 + 8368) = 0xFFFF;
  *(_OWORD *)(a1 + 8372) = 0u;
  *(_OWORD *)(v3 + 64) = xmmword_101D1C320;
  *(_OWORD *)(v3 + 80) = v11;
  *(_OWORD *)(v3 + 96) = v11;
  *(_OWORD *)(v3 + 112) = v11;
  *(_DWORD *)(a1 + 8452) = 0;
  *(void *)(a1 + 8456) = 0xBFF0000000000000;
  *(void *)(a1 + 8472) = 0;
  *(void *)(a1 + 8464) = 0;
  *(_DWORD *)(a1 + 8480) = 0;
  *(void *)(v3 + 160) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 8492) = 0x7FFFFFFF;
  *(void *)(a1 + 8512) = 0;
  *(void *)(a1 + 8496) = 0;
  *(void *)(a1 + 8504) = 0;
  *(unsigned char *)(a1 + 8520) = 0;
  sub_1000DBC34(a1 + 8528);
  *uint64_t v2 = 0;
  v2[800] = 0;
  *(void *)(a1 + 9976) = 0x500000000;
  sub_100F42184(a1);
  return a1;
}

void sub_100F42154(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  if (*(unsigned char *)(v4 + 800))
  {
    long long v6 = (std::__shared_weak_count *)v1[1232];
    if (v6) {
      sub_1000DB0A0(v6);
    }
  }
  sub_101A96EB4(v1, v2);
  _Unwind_Resume(a1);
}

void sub_100F42184(uint64_t a1)
{
  sub_100F40DB8(a1);
  sub_100F40DB8(a1 + 1600);
  *(_OWORD *)(a1 + 2504) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2520) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 2536) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 2548) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2440) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2456) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2472) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2488) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 2408) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2424) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 2660) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2676) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 2692) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 2704) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2596) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2612) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2628) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2644) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 2564) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2580) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 2816) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2832) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 2848) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 2860) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2752) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2768) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2784) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2800) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 2720) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2736) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 2972) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 2988) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 3004) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 3016) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 2908) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 2924) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 2940) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 2956) = xmmword_101D82F08;
  *(void *)(a1 + 2400) = 0;
  *(_OWORD *)(a1 + 2876) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 2892) = xmmword_101D82EC8;
  *(void *)(a1 + 3032) = 0xBFF0000000000000;
  *(void *)(a1 + 3040) = 0xBFF0000000000000;
  *(void *)(a1 + 3048) = 0;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3056) = 0;
  *(_DWORD *)(a1 + 3072) = 0;
  uint64_t v2 = *(void ***)(a1 + 6600);
  unint64_t v3 = *(void *)(a1 + 6608) - (void)v2;
  *(void *)(a1 + 6632) = 0;
  if (v3 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v2 = (void **)(*(void *)(a1 + 6600) + 8);
      *(void *)(a1 + 6600) = v2;
      unint64_t v3 = *(void *)(a1 + 6608) - (void)v2;
    }
    while (v3 > 0x10);
  }
  if (v3 >> 3 == 1)
  {
    uint64_t v4 = 256;
  }
  else
  {
    if (v3 >> 3 != 2) {
      return;
    }
    uint64_t v4 = 512;
  }
  *(void *)(a1 + 6624) = v4;
}

void sub_100F42350(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100F42380(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100F423B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9968))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 9856);
    if (v2) {
      sub_1000DB0A0(v2);
    }
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 9056);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8152);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  __int16 v5 = *(std::__shared_weak_count **)(a1 + 7328);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_10041F48C((void *)(a1 + 6592));
  long long v6 = *(std::__shared_weak_count **)(a1 + 6320);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 5520);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 4720);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 3920);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  long long v10 = *(std::__shared_weak_count **)(a1 + 2288);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = *(std::__shared_weak_count **)(a1 + 1488);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  long long v12 = *(std::__shared_weak_count **)(a1 + 688);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  return a1;
}

void sub_100F42470(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100F424A0(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100F424D0(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100F42500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_100F425A4((void **)a1);
  uint64_t result = sub_100F426FC(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100F425A4(void **a1)
{
  if (a1[5])
  {
    sub_10007F07C((uint64_t)a1, 0);
    sub_100B849F0(a1, 0);
  }
  else
  {
    unint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      unint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100F42628(a1);
}

void sub_100F42628(void **a1)
{
  unint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    long long v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  long long v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    long long v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  long long v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  long long v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100F426FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100F42628((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

__n128 sub_100F4276C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 800) == *(unsigned __int8 *)(a2 + 800))
  {
    if (*(unsigned char *)(a1 + 800))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      long long v7 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      long long v8 = *(_OWORD *)(a2 + 96);
      long long v9 = *(_OWORD *)(a2 + 112);
      long long v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v9;
      *(_OWORD *)(a1 + 128) = v10;
      *(_OWORD *)(a1 + 96) = v8;
      memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
      long long v11 = *(_OWORD *)(a2 + 680);
      *(_OWORD *)(a2 + 680) = 0u;
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 688);
      *(_OWORD *)(a1 + 680) = v11;
      if (v12) {
        sub_1000DB0A0(v12);
      }
      long long v13 = *(_OWORD *)(a2 + 696);
      long long v14 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 728) = v14;
      *(_OWORD *)(a1 + 696) = v13;
      __n128 result = *(__n128 *)(a2 + 744);
      long long v16 = *(_OWORD *)(a2 + 760);
      long long v17 = *(_OWORD *)(a2 + 776);
      *(void *)(a1 + 789) = *(void *)(a2 + 789);
      *(_OWORD *)(a1 + 760) = v16;
      *(_OWORD *)(a1 + 776) = v17;
      *(__n128 *)(a1 + 744) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 800))
  {
    long long v18 = *(std::__shared_weak_count **)(a1 + 688);
    if (v18) {
      sub_1000DB0A0(v18);
    }
    *(unsigned char *)(a1 + 800) = 0;
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v19;
    long long v20 = *(_OWORD *)(a2 + 32);
    long long v21 = *(_OWORD *)(a2 + 48);
    long long v22 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v22;
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)(a1 + 48) = v21;
    long long v23 = *(_OWORD *)(a2 + 96);
    long long v24 = *(_OWORD *)(a2 + 112);
    long long v25 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 112) = v24;
    *(_OWORD *)(a1 + 128) = v25;
    *(_OWORD *)(a1 + 96) = v23;
    memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
    *(void *)(a1 + 680) = *(void *)(a2 + 680);
    *(void *)(a1 + 688) = *(void *)(a2 + 688);
    *(_OWORD *)(a2 + 680) = 0u;
    uint64_t v26 = *(void *)(a2 + 789);
    long long v28 = *(_OWORD *)(a2 + 760);
    long long v27 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 760) = v28;
    *(_OWORD *)(a1 + 776) = v27;
    *(void *)(a1 + 789) = v26;
    long long v29 = *(_OWORD *)(a2 + 712);
    __n128 result = *(__n128 *)(a2 + 728);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a1 + 712) = v29;
    *(__n128 *)(a1 + 728) = result;
    *(unsigned char *)(a1 + 800) = 1;
  }
  return result;
}

uint64_t sub_100F428E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100F42980(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100F42A18(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1015A94B4();
    operator delete();
  }
  return result;
}

void sub_100F42A6C()
{
}

void *sub_100F42A80(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102305E40;
  result[1] = v3;
  return result;
}

uint64_t sub_100F42AC8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102305E40;
  a2[1] = v2;
  return result;
}

void sub_100F42AF4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 112);
  v17[6] = *(_OWORD *)(a2 + 96);
  v17[7] = v4;
  v18[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(a2 + 140);
  long long v5 = *(_OWORD *)(a2 + 48);
  v17[2] = *(_OWORD *)(a2 + 32);
  void v17[3] = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  v17[4] = *(_OWORD *)(a2 + 64);
  void v17[5] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v7;
  memcpy(v19, (const void *)(a2 + 160), sizeof(v19));
  uint64_t v8 = *(void *)(a2 + 680);
  long long v9 = *(std::__shared_weak_count **)(a2 + 688);
  *(_OWORD *)(a2 + 680) = 0u;
  long long v15 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)long long v16 = *(_OWORD *)(a2 + 776);
  *(void *)&v16[13] = *(void *)(a2 + 789);
  long long v11 = *(_OWORD *)(a2 + 696);
  long long v12 = *(_OWORD *)(a2 + 712);
  long long v13 = *(_OWORD *)(a2 + 728);
  long long v14 = *(_OWORD *)(a2 + 744);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v20 = v8;
  long long v21 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v26 = v15;
  *(_OWORD *)long long v27 = *(_OWORD *)v16;
  *(void *)&v27[13] = *(void *)&v16[13];
  long long v22 = v11;
  long long v23 = v12;
  long long v24 = v13;
  long long v25 = v14;
  sub_100F39118(v10, (uint64_t)v17);
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
}

void sub_100F42C08(_Unwind_Exception *a1)
{
  if (STACK[0x320]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x320]);
  }
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F42C2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F42C6C()
{
}

void sub_100F42C78()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    id v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)id v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100F42D30(_Unwind_Exception *a1)
{
}

void sub_100F42D48()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    id v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *id v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100F42DF0(_Unwind_Exception *a1)
{
}

void sub_100F42E08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D98760;
      v0[3] = unk_101D98770;
      v0[4] = xmmword_101D98780;
      v0[0] = xmmword_101D98740;
      v0[1] = unk_101D98750;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100F42EE8(_Unwind_Exception *a1)
{
}

void sub_100F42F00()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100F42F80()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100F43010(_Unwind_Exception *a1)
{
}

uint64_t sub_100F43028()
{
  sub_100134750(qword_102482418, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482418, (void *)&_mh_execute_header);
}

void sub_100F43138(id a1)
{
  qword_102482450 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMobilityWalkingBoutServiceSilo"];
}

void sub_100F43290(id a1)
{
  if (sub_10016CCBC()) {
    byte_102482460 = 1;
  }
}

void sub_100F440B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17)
{
  sub_1000C5954(&a15);
  uint64_t v18 = 24;
  while (1)
  {
    long long v19 = *(std::__shared_weak_count **)((char *)&a17 + v18);
    if (v19) {
      sub_1000DB0A0(v19);
    }
    v18 -= 16;
    if (v18 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_100F4419C()
{
}

void sub_100F442B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A61384(v11, v10);
  operator delete();
}

void sub_100F442F0()
{
}

void sub_100F443B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  operator delete();
}

void sub_100F443F4()
{
}

void sub_100F444E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A61384(v11, v10);
  operator delete();
}

id sub_100F4451C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onUserInfoUpdate:a2 data:a3];
}

id sub_100F4452C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStatusNotification:a2 data:a3];
}

id sub_100F4453C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateObserverNotification:a2 data:a3];
}

id sub_100F4454C(uint64_t a1, void *a2)
{
  return _[a2 onSPUGaitMetrics:a1];
}

id sub_100F44558(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onCompanionNotification:a2 data:a3];
}

void sub_100F456B0(uint64_t a1, int a2)
{
  if (a2 == 109)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    uint64_t v3 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      long long v9 = "com.apple.locationd.Mobility.ProcessBouts";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BoutService: Data sources unavailable, did not process bouts (%s)", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102306018);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onMobilityProcessBoutsActivity:]_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) != 3
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    long long v4 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)uint64_t buf = 136315394;
      long long v9 = "com.apple.locationd.Mobility.ProcessBouts";
      __int16 v10 = 2050;
      xpc_activity_state_t v11 = state;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark (%s) activity as done. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102306018);
      }
      xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService onMobilityProcessBoutsActivity:]_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100F45D40(uint64_t a1, int a2, uint64_t a3)
{
  xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
  BOOL v7 = state == 4 || state == 2;
  if (v7 && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102306038);
    }
    uint64_t v8 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)uint64_t buf = 136315394;
      long long v12 = "com.apple.locationd.Mobility.Classification";
      __int16 v13 = 2050;
      xpc_activity_state_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to mark activity (%s) as done. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService onMobilityClassificationActivity:]_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if (a2) {
    [*(id *)(a1 + 40) setUpClassificationActivityWithDeferral:a3];
  }
}

id sub_100F45FF4(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100F4606C;
  v3[3] = &unk_102305F20;
  uint64_t v1 = *(void **)(a1 + 32);
  v3[4] = *(void *)(a1 + 40);
  return [v1 checkForBoutsReadyToProcessWithCompletion:v3 activity:0];
}

uint64_t sub_100F4606C(uint64_t a1, int a2)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_102306018);
  }
  long long v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutService: Mobility data requested", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onDataCollectionRequested:]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (a2 != 100)
  {
    if (a2 == 109)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102306018);
      }
      long long v5 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BoutService: Data sources unavailable, did not process bouts onDataCollectionRequested", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 == -1)
        {
LABEL_26:
          xpc_activity_state_t v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onDataCollectionRequested:]_block_invoke", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
          return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
        }
LABEL_28:
        dispatch_once(&qword_1024191F0, &stru_102306018);
        goto LABEL_26;
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102306018);
      }
      long long v6 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v11 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BoutService: Data requested, but unable to query outstanding bouts. CMError: %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 == -1) {
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100F464C0(uint64_t a1, int a2)
{
  if (a2 != 100)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    long long v4 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutService: Unable to process BoutMetrics pre-aggregation, CMError: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102306018);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onAggregationTimer]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_102306018);
  }
  long long v5 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMobilityWalkingBoutService: Aggregating WalkingBout, GaitMetrics, BoutMetrics records", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService onAggregationTimer]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100F467F0(*(void *)(*(void *)(a1 + 32) + 72));
  sub_100F46DA8(*(void *)(*(void *)(a1 + 32) + 96));
  sub_100F47360(*(void *)(*(void *)(a1 + 32) + 120));
  return sub_100F47918(*(void *)(*(void *)(a1 + 32) + 176));
}

uint64_t sub_100F467F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    long long v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_100F53080(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      int v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_100F53080(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)long long v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023061B8);
        }
        sub_100F53080(*(void *)(a1 + 24), (double **)a1);
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutBoundary>::aggregateRecords() [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    long long v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_100F46DA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    long long v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_100F532B0(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      int v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_100F532B0(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)long long v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023061B8);
        }
        sub_100F532B0(*(void *)(a1 + 24), (double **)a1);
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    long long v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_100F47360(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    long long v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_100F534B0(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      int v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_100F534B0(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)long long v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023061B8);
        }
        sub_100F534B0(*(void *)(a1 + 24), (double **)a1);
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    long long v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_100F47918(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    long long v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)long long v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      sub_1000D3E50();
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_100F536B0(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      int v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_100F536B0(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)long long v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023061B8);
        }
        sub_100F536B0(*(void *)(a1 + 24), (double **)a1);
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    long long v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

id sub_100F4878C(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(518400.0, a2, 35, *(void **)(a1 + 32), 300, 0, 1, 1, 0, 0);
}

void sub_100F4938C(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_100F49494;
  _OWORD v7[3] = &unk_102305F48;
  long long v10 = *(_OWORD *)(a1 + 56);
  int v14 = a2;
  uint64_t v9 = *(void *)(a1 + 48);
  long long v8 = *(_OWORD *)(a1 + 32);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long __p = 0;
  sub_1003B2E38(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  [v6 async:v7];
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_100F49478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F49494(uint64_t a1)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_102306018);
  }
  uint64_t v2 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 134349312;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BoutService: HK queried for workouts from (%{public}.2f) to (%{public}.2f)", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    int v19 = 134349312;
    uint64_t v20 = v10;
    __int16 v21 = 2050;
    uint64_t v22 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService checkForBoutsReadyToProcessWithCompletion:activity:]_block_invoke", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (*(_DWORD *)(a1 + 96) == 100
    && ![*(id *)(a1 + 32) checkDeferRequestForBoutsActivity:*(void *)(a1 + 40)])
  {
    memset(buf, 0, 24);
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 192);
    double v6 = *(double *)(a1 + 56);
    double v7 = *(double *)(a1 + 64);
    long long v17 = 0;
    uint64_t v18 = 0;
    long long __p = 0;
    sub_1003B2E38(&__p, *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
    int v8 = sub_100C7BD78(v5, (unint64_t *)&__p, (void **)buf, v6, v7);
    if (__p)
    {
      long long v17 = __p;
      operator delete(__p);
    }
    if (v8 == 100)
    {
      uint64_t v9 = *(void **)(a1 + 32);
      int v14 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      sub_100F538B0(&v13, *(const void **)buf, *(uint64_t *)&buf[8], 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4));
      [v9 handleBoutResults:&v13];
      if (v13)
      {
        int v14 = v13;
        operator delete(v13);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100F49790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100F497E0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v2 = (void *)(a1 + 72);
  v2[2] = 0;
  return sub_1003B2E38(v2, *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
}

void sub_100F49808(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
}

void sub_100F49EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F4AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_100F4ABA0(uint64_t a1)
{
  __chkstk_darwin(a1);
  long long v81 = v1;
  uint64_t v82 = v2;
  long long v76 = v3;
  uint64_t v85 = v4;
  int v75 = v5;
  char v83 = v6;
  uint64_t v8 = v7;
  v265 = 0;
  long long __p = 0;
  v266 = 0;
  sub_1001F703C(&__p, *(const void **)v9, *(void *)(v9 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3));
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v11 = v10 + 8;
  double v13 = *(double *)(v12 + 24);
  uint64_t v136 = v8;
  if (v13 > *(double *)(v8 + 80))
  {
    double v14 = 604800.0;
    goto LABEL_95;
  }
  int v84 = 0;
  unsigned int v79 = 0;
  double v14 = 604800.0;
  double v78 = 0.0;
  double v80 = 0.0;
  while (1)
  {
    *(_OWORD *)v353 = xmmword_101D98940;
    *(_OWORD *)&v353[16] = xmmword_101D98950;
    v354[0] = xmmword_101D98960;
    *(_OWORD *)((char *)v354 + 12) = *(long long *)((char *)&xmmword_101D98960 + 12);
    *(_OWORD *)((char *)v351 + 3) = 0uLL;
    *(_OWORD *)((char *)v352 + 1) = 0uLL;
    long long v263 = 0uLL;
    int v262 = 0;
    long long v261 = 0u;
    long long v260 = 0u;
    long long v259 = 0u;
    int v258 = 0;
    long long v257 = 0u;
    long long v256 = 0u;
    long long v255 = 0u;
    int v254 = 0;
    long long v253 = 0u;
    long long v252 = 0u;
    long long v251 = 0u;
    int v250 = 0;
    long long v249 = 0u;
    long long v248 = 0u;
    long long v247 = 0u;
    *(_OWORD *)((char *)v350 + 3) = 0uLL;
    *(void *)((char *)&v350[1] + 3) = 0;
    char v241 = 0;
    int v240 = 0;
    if (v83)
    {
      sub_10159CAC0(*(void **)(*(void *)(v8 + 32) + 200), (uint64_t)&__p, *(unsigned char *)(*(void *)(*(void *)(v8 + 72) + 8) + 24), v75, (double **)v85, v76, (uint64_t)buf, *(double *)(*(void *)v11 + 24));
      *(_OWORD *)v353 = *(_OWORD *)buf;
      *(_OWORD *)&v353[16] = *(_OWORD *)&buf[16];
      v354[0] = *(_OWORD *)v273;
      *(_OWORD *)((char *)v354 + 12) = *(_OWORD *)&v273[12];
      char v15 = v273[28];
      char v16 = v273[29];
      char v135 = v273[30];
      v352[0] = *(_OWORD *)&v273[31];
      LOBYTE(v352[1]) = v273[47];
      double v141 = v274;
      double v140 = v275;
      long long v263 = v277;
      uint64_t v137 = v276;
      double v17 = v278;
      int v18 = v279;
      char v133 = v280;
      __int16 v90 = v281;
      uint64_t v138 = v282;
      int v139 = v283;
      *(_DWORD *)((char *)v351 + 15) = *(_DWORD *)&v284[15];
      v351[0] = *(_OWORD *)v284;
      int64x2_t v126 = *(int64x2_t *)&v284[19];
      int64x2_t v111 = *(int64x2_t *)&v284[35];
      int v262 = v285;
      long long v261 = *(_OWORD *)&v284[83];
      long long v260 = *(_OWORD *)&v284[67];
      long long v259 = *(_OWORD *)&v284[51];
      int v89 = v286;
      unint64_t v110 = v288;
      int64x2_t v108 = v289;
      int64x2_t v109 = v287;
      int64x2_t v106 = v291;
      int64x2_t v107 = v290;
      int64x2_t v103 = v293;
      int64x2_t v104 = v292;
      int64x2_t v101 = v295;
      int64x2_t v102 = v294;
      int v258 = v300;
      long long v257 = v299;
      long long v256 = v298;
      long long v255 = v297;
      int v88 = v301;
      unint64_t v105 = v302;
      int64x2_t v99 = v303;
      int64x2_t v100 = v296;
      int64x2_t v97 = v305;
      int64x2_t v98 = v304;
      int64x2_t v96 = v306;
      unint64_t v19 = v307;
      int v254 = v311;
      long long v253 = v310;
      long long v252 = v309;
      long long v251 = v308;
      int v87 = v312;
      int64x2_t v134 = v313;
      int64x2_t v132 = v314;
      int v250 = v318;
      long long v249 = v317;
      long long v248 = v316;
      long long v247 = v315;
      int v86 = v319;
      unint64_t v20 = v320;
      int64x2_t v131 = v321;
      int64x2_t v130 = v322;
      int64x2_t v129 = v323;
      int64x2_t v128 = v324;
      *(_OWORD *)((char *)v350 + 11) = *(_OWORD *)((char *)v349 + 11);
      v350[0] = v349[0];
      int64x2_t v124 = v326;
      int64x2_t v125 = v325;
      char v127 = v336;
      v246[0] = *(_DWORD *)v337;
      *(_DWORD *)((char *)v246 + 3) = *(_DWORD *)&v337[3];
      int v244 = v343;
      char v245 = v344;
      char v243 = v346;
      int v242 = v345;
      char v241 = v348;
      int v240 = v347;
      int64x2_t v122 = v328;
      int64x2_t v123 = v327;
      int64x2_t v120 = v330;
      int64x2_t v121 = v329;
      int64x2_t v118 = v332;
      int64x2_t v119 = v331;
      int64x2_t v116 = v334;
      int64x2_t v117 = v333;
      unint64_t v21 = v335;
      int64x2_t v114 = v339;
      int64x2_t v115 = v338;
      int64x2_t v112 = v341;
      int64x2_t v113 = v340;
      unint64_t v22 = v342;
    }
    else
    {
      int v18 = 0;
      char v127 = 0;
      char v135 = 0;
      char v16 = 0;
      char v15 = 0;
      unint64_t v22 = 0xFFF0000000000000;
      int v139 = 1;
      unint64_t v21 = 0xFFF0000000000000;
      unint64_t v20 = 0xFFF0000000000000;
      uint64_t v138 = 0x400000000;
      unint64_t v19 = 0xFFF0000000000000;
      unint64_t v105 = 0xFFF0000000000000;
      char v133 = *(unsigned char *)(*(void *)(*(void *)(v8 + 72) + 8) + 24);
      unint64_t v110 = 0xFFF0000000000000;
      int64x2_t v111 = vdupq_n_s64(0xFFF0000000000000);
      double v141 = 0.0;
      int64x2_t v108 = v111;
      int64x2_t v109 = v111;
      double v140 = 0.0;
      int64x2_t v106 = v111;
      int64x2_t v107 = v111;
      uint64_t v137 = 0;
      int64x2_t v103 = v111;
      int64x2_t v104 = v111;
      double v17 = 0.0;
      int64x2_t v101 = v111;
      int64x2_t v102 = v111;
      int64x2_t v99 = v111;
      int64x2_t v100 = v111;
      int64x2_t v97 = v111;
      int64x2_t v98 = v111;
      int64x2_t v96 = v111;
      int64x2_t v134 = v111;
      int64x2_t v132 = v111;
      int64x2_t v131 = v111;
      int64x2_t v130 = v111;
      int64x2_t v129 = v111;
      int64x2_t v128 = v111;
      int64x2_t v124 = v111;
      int64x2_t v125 = v111;
      int64x2_t v122 = v111;
      int64x2_t v123 = v111;
      int64x2_t v120 = v111;
      int64x2_t v121 = v111;
      int64x2_t v118 = v111;
      int64x2_t v119 = v111;
      int64x2_t v116 = v111;
      int64x2_t v117 = v111;
      int64x2_t v114 = v111;
      int64x2_t v115 = v111;
      int64x2_t v112 = v111;
      int64x2_t v113 = v111;
      int64x2_t v126 = v111;
    }
    double v91 = v13;
    if (v18)
    {
      long long v23 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v141];
      long long v24 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v140];
      if (*(void *)v85 == *(void *)(v85 + 8))
      {
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102306038);
        }
        long long v25 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "No steps detected, despite the presense of MobilityBoutMetrics", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_102306038);
          }
          LOWORD(v269) = 0;
          long long v59 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v59);
          if (v59 != buf) {
            free(v59);
          }
        }
      }
      [*(id *)(*(void *)(v8 + 32) + 240) writeToHealthKitAppleWalkingSteadiness:v23 startDate:v24 endDate:*(void *)(v8 + 40) source:v17];
      long long v26 = (double *)v265;
      double v27 = v17 / 100.0;
      if (v265 >= v266)
      {
        long long v29 = (double *)__p;
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v265 - (unsigned char *)__p) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((v266 - (unsigned char *)__p) >> 3) > v31) {
          unint64_t v31 = 0x5555555555555556 * ((v266 - (unsigned char *)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v266 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
          unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32)
        {
          long long v33 = (char *)sub_1000DA5D8((uint64_t)&v266, v32);
          long long v26 = (double *)v265;
          long long v29 = (double *)__p;
        }
        else
        {
          long long v33 = 0;
        }
        long long v34 = (double *)&v33[24 * v30];
        double *v34 = v141;
        v34[1] = v140;
        _OWORD v34[2] = v27;
        long long v35 = v34;
        if (v26 != v29)
        {
          do
          {
            long long v36 = *(_OWORD *)(v26 - 3);
            *(v35 - 1) = *(v26 - 1);
            *(_OWORD *)(v35 - 3) = v36;
            v35 -= 3;
            v26 -= 3;
          }
          while (v26 != v29);
          long long v29 = (double *)__p;
        }
        long long v28 = (char *)(v34 + 3);
        long long __p = v35;
        v265 = (char *)(v34 + 3);
        v266 = &v33[24 * v32];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(double *)v265 = v141;
        v26[1] = v140;
        long long v28 = (char *)(v26 + 3);
        _OWORD v26[2] = v27;
      }
      v265 = v28;
      uint64_t v8 = v136;
    }
    int v37 = [*(id *)(*(void *)(v8 + 32) + 240) areWalkingSteadinessNotificationsEnabled];
    double v38 = v14;
    double v39 = *(double *)(v8 + 80);
    long long v40 = *(_OWORD *)(v82 + 16);
    v238[0] = *(_OWORD *)v82;
    v238[1] = v40;
    uint64_t v239 = *(void *)(v82 + 32);
    sub_10159EB44((unint64_t *)&__p, v81, v37, (uint64_t)v238, (uint64_t)buf, v39);
    char v41 = buf[0];
    char v42 = buf[1];
    char v43 = buf[2];
    int v244 = *(_DWORD *)&buf[3];
    char v245 = buf[7];
    long long v94 = *(_OWORD *)&buf[8];
    uint64_t v95 = *(void *)&buf[24];
    char v44 = v273[0];
    char v45 = v273[1];
    char v46 = v273[2];
    int v242 = *(_DWORD *)&v273[3];
    char v243 = v273[7];
    uint64_t v47 = *(void *)&v273[8];
    uint64_t v48 = *(void *)&v273[16];
    uint64_t v49 = *(void *)&v273[24];
    long long v92 = *(_OWORD *)&v273[32];
    double v93 = v274;
    if (buf[2])
    {
      unsigned int v79 = *(_DWORD *)&v273[24];
      double v80 = *(double *)&v273[8];
      double v78 = *(double *)&v273[16];
      int v84 = buf[2];
    }
    else
    {
      uint64_t v77 = *(void *)&v273[24];
      if (v84 && v18)
      {
        int v50 = sub_10111351C((uint64_t)&v269, v17);
        if (v271 == 1) {
          int v51 = v50;
        }
        else {
          int v51 = 0;
        }
        if (v51 == 1)
        {
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_102306038);
          }
          long long v52 = qword_102418FA8;
          if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t buf = 134283521;
            *(double *)&uint8_t buf[4] = v80;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Most recent classification is OK, resetting previous notification %{private}.2f", buf, 0xCu);
          }
          BOOL v53 = sub_10013D1A0(115, 2);
          double v54 = 0.0;
          if (v53)
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FA0 != -1) {
              dispatch_once(&qword_102418FA0, &stru_102306038);
            }
            int v267 = 134283521;
            double v268 = v80;
            long long v60 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v60);
            if (v60 != buf) {
              free(v60);
            }
            unsigned int v79 = 0;
            int v84 = 0;
            double v78 = 0.0;
            double v54 = 0.0;
          }
          else
          {
            unsigned int v79 = 0;
            int v84 = 0;
            double v78 = 0.0;
          }
        }
        else
        {
          double v54 = v80;
        }
        double v80 = v54;
      }
      uint64_t v49 = v77;
    }
    double v149 = v141;
    double v150 = v140;
    *(int64x2_t *)&v159[19] = v126;
    *(int64x2_t *)&v159[35] = v111;
    int64x2_t v162 = v109;
    unint64_t v163 = v110;
    int64x2_t v164 = v108;
    int64x2_t v165 = v107;
    int64x2_t v166 = v106;
    int64x2_t v167 = v104;
    int64x2_t v168 = v103;
    int64x2_t v169 = v102;
    int64x2_t v170 = v101;
    int64x2_t v171 = v100;
    unint64_t v177 = v105;
    int64x2_t v178 = v99;
    int64x2_t v179 = v98;
    int64x2_t v180 = v97;
    int64x2_t v181 = v96;
    v142[0] = *(_OWORD *)v353;
    v142[1] = *(_OWORD *)&v353[16];
    *(_OWORD *)long long v143 = v354[0];
    *(_OWORD *)&v143[12] = *(_OWORD *)((char *)v354 + 12);
    long long v147 = v352[0];
    long long v152 = v263;
    *(_DWORD *)&v159[15] = *(_DWORD *)((char *)v351 + 15);
    double v153 = v17;
    *(_OWORD *)float64x2_t v159 = v351[0];
    *(_OWORD *)&v159[67] = v260;
    *(_OWORD *)&v159[83] = v261;
    *(_OWORD *)&v159[51] = v259;
    long long v173 = v256;
    long long v174 = v257;
    char v144 = v15;
    char v145 = v16;
    char v146 = v135;
    char v148 = v352[1];
    char v154 = v18;
    char v155 = v133;
    int v160 = v262;
    int v175 = v258;
    int v186 = v254;
    int v193 = v250;
    char v211 = v127;
    *(_DWORD *)&v212[3] = *(_DWORD *)((char *)v246 + 3);
    *(_DWORD *)v212 = v246[0];
    char v218 = v41;
    char v219 = v42;
    char v220 = v43;
    int v221 = v244;
    char v222 = v245;
    char v225 = v44;
    char v226 = v45;
    uint64_t v151 = v137;
    char v227 = v46;
    char v229 = v243;
    int v228 = v242;
    char v236 = v241;
    int v235 = v240;
    uint64_t v8 = v136;
    long long v55 = *(void **)(v136 + 32);
    __int16 v156 = v90;
    uint64_t v157 = v138;
    char v158 = v139;
    int v161 = v89;
    long long v172 = v255;
    int v176 = v88;
    unint64_t v182 = v19;
    long long v184 = v252;
    long long v185 = v253;
    long long v183 = v251;
    int v187 = v87;
    int64x2_t v188 = v134;
    int64x2_t v189 = v132;
    long long v191 = v248;
    long long v192 = v249;
    long long v190 = v247;
    int v194 = v86;
    unint64_t v195 = v20;
    int64x2_t v196 = v131;
    int64x2_t v197 = v130;
    int64x2_t v198 = v129;
    int64x2_t v199 = v128;
    int64x2_t v200 = v125;
    int64x2_t v201 = v124;
    int64x2_t v202 = v123;
    int64x2_t v203 = v122;
    int64x2_t v204 = v121;
    int64x2_t v205 = v120;
    int64x2_t v206 = v119;
    int64x2_t v207 = v118;
    int64x2_t v208 = v117;
    int64x2_t v209 = v116;
    unint64_t v210 = v21;
    int64x2_t v213 = v115;
    int64x2_t v214 = v114;
    int64x2_t v215 = v113;
    int64x2_t v216 = v112;
    unint64_t v217 = v22;
    long long v223 = v94;
    uint64_t v224 = v95;
    uint64_t v230 = v47;
    uint64_t v231 = v48;
    uint64_t v232 = v49;
    long long v233 = v92;
    double v234 = v93;
    *(_OWORD *)&v237[11] = *(_OWORD *)((char *)v350 + 11);
    *(_OWORD *)v237 = v350[0];
    [v55 sendAnalyticsSteadinessResult:v142];
    double v14 = v38;
    if (v139)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      long long v61 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "Finished Classification: data sources unavailable", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_93;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      LOWORD(v269) = 0;
      long long v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
LABEL_119:
      double v14 = v38;
      goto LABEL_93;
    }
    *(void *)(*(void *)(*(void *)(v136 + 64) + 8) + 24) = v137;
    if ((v138 & 0x20) != 0)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      long long v62 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "Height not set, increasing minimum delay before next classification", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_93;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      LOWORD(v269) = 0;
      long long v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v74);
      if (v74 != buf) {
        free(v74);
      }
      goto LABEL_119;
    }
    uint64_t v56 = *(void *)(v136 + 64);
    uint64_t v57 = *(void *)(v56 + 8);
    double v14 = *(double *)(v57 + 24) - v91;
    long long v58 = *(_xpc_activity_s **)(v136 + 48);
    if (v58) {
      break;
    }
    double v13 = *(double *)(v57 + 24);
LABEL_55:
    if (v13 <= *(double *)(v136 + 80))
    {
      uint64_t v11 = v56 + 8;
      if (v14 > 0.00999999978) {
        continue;
      }
    }
    goto LABEL_93;
  }
  if (!xpc_activity_should_defer(v58))
  {
    uint64_t v56 = *(void *)(v136 + 64);
    double v13 = *(double *)(*(void *)(v56 + 8) + 24);
    goto LABEL_55;
  }
  xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(v136 + 48));
  if (xpc_activity_set_state(*(xpc_activity_t *)(v136 + 48), 3))
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102306038);
    }
    long long v64 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "#warning: Classification deferred", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      LOWORD(v269) = 0;
      long long v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v65);
      goto LABEL_123;
    }
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102306038);
    }
    long long v66 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = state;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_FAULT, "Failed to mark activity as Deferred. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      int v269 = 134349056;
      xpc_activity_state_t v270 = state;
      long long v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v65);
LABEL_123:
      if (v65 != buf) {
        free(v65);
      }
    }
  }
LABEL_93:
  if (v84) {
    [*(id *)(*(void *)(v136 + 32) + 240) writeSteadinessEvent:v79 startDate:[NSDate dateWithTimeIntervalSinceReferenceDate:v80] endDate:[NSDate dateWithTimeIntervalSinceReferenceDate:v78] source:*(void *)(v136 + 40)];
  }
LABEL_95:
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102306038);
  }
  long long v67 = (void *)v136;
  long long v68 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = *(void *)(*(void *)(*(void *)(v136 + 64) + 8) + 24);
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)&uint8_t buf[4] = v69;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v14;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Finishing Classification: nextClassificationTime=%{}.2f, nextFireInterval=%{}.2f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102306038);
    }
    uint64_t v71 = *(void *)(*(void *)(*(void *)(v136 + 64) + 8) + 24);
    *(_DWORD *)v353 = 134218240;
    *(void *)&v353[4] = v71;
    *(_WORD *)&v353[12] = 2048;
    *(double *)&v353[14] = v14;
    long long v72 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke", "%s\n", v72);
    if (v72 != buf) {
      free(v72);
    }
    long long v67 = (void *)v136;
  }
  uint64_t v70 = sub_1000D3E78();
  sub_10006B564(v70, buf);
  sub_10016332C(*(uint64_t *)buf, "steadinessClassificationNextClassificationTime", (const void *)(*(void *)(v67[8] + 8) + 24));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  (*(void (**)(void))(v67[7] + 16))();
  *(unsigned char *)(v67[4] + 208) = 0;
  if (__p)
  {
    v265 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100F4C33C(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0xA98];
  if (STACK[0xA98])
  {
    STACK[0xAA0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100F4CA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

id *sub_100F4CA74(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] setUpClassificationActivityWithDeferral:];
  }
  return result;
}

void sub_100F4CF90(_Unwind_Exception *a1)
{
}

void *sub_100F4CFF0(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_10017C6FC(a1, a3);
    char v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_100F4D058(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F4D074(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_100F4D0A8(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_1001DCF60(a1, a3);
    char v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_100F4D110(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100F4D12C(uint64_t a1)
{
  v75[0] = &off_102393770;
  v74[0] = @"extraCount";
  v74[1] = @"boutNumGaitMetrics";
  v75[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 36)];
  v74[2] = @"boutWorkoutType";
  v75[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 28)];
  v74[3] = @"boutStepCount";
  v75[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 24)];
  v74[4] = @"boutDuration";
  v75[4] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 16) - *(double *)(*(void *)(a1 + 32) + 8)];
  v74[5] = @"boutTerminationReason";
  v75[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  v74[6] = @"boutDeviceSide";
  v75[6] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 32) + 48)];
  v74[7] = @"boutNumGaitMetrics_bin";
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 36);
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v69 = 0;
  sub_10010F834(&v69, (const void *)qword_1024824D0, unk_1024824D8, (unk_1024824D8 - qword_1024824D0) >> 2);
  sub_100F4DC5C(v2, (uint64_t)&v69, v72);
  if (v73 >= 0) {
    uint64_t v3 = v72;
  }
  else {
    uint64_t v3 = (void **)v72[0];
  }
  v75[7] = +[NSString stringWithUTF8String:v3];
  v74[8] = @"boutDuration_bin";
  uint64_t v4 = *(void *)(a1 + 32);
  double v6 = *(double *)(v4 + 8);
  double v5 = *(double *)(v4 + 16);
  long long v64 = 0;
  long long v65 = 0;
  uint64_t v66 = 0;
  sub_1001DD364(&v64, (const void *)qword_1024824F0, unk_1024824F8, (unk_1024824F8 - qword_1024824F0) >> 3);
  sub_100910A34((uint64_t)&v64, v67, v5 - v6);
  if (v68 >= 0) {
    uint64_t v7 = v67;
  }
  else {
    uint64_t v7 = (void **)v67[0];
  }
  v75[8] = +[NSString stringWithUTF8String:v7];
  v74[9] = @"boundaryType";
  v75[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 52)];
  v74[10] = @"cycleTimeMean";
  v75[10] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 56)];
  v74[11] = @"stepLengthEntropy";
  v75[11] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 64)];
  v74[12] = @"stepLengthPoincareSD1";
  v75[12] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 72)];
  v74[13] = @"stepLengthPoincareSD2";
  v75[13] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 80)];
  v74[14] = @"cycleTimeEntropy";
  v75[14] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 88)];
  v74[15] = @"cycleTimePoincareSD1";
  v75[15] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 96)];
  v74[16] = @"cycleTimePoincareSD2";
  v75[16] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 104)];
  v74[17] = @"userAge_bin";
  float v8 = *(float *)(*(void *)(a1 + 40) + 4);
  long long v60 = 0;
  uint64_t v61 = 0;
  long long v59 = 0;
  sub_10010F834(&v59, (const void *)qword_102482470, unk_102482478, (unk_102482478 - qword_102482470) >> 2);
  sub_1003B1E08((uint64_t)&v59, v62, v8);
  if (v63 >= 0) {
    uint64_t v9 = v62;
  }
  else {
    uint64_t v9 = (void **)v62[0];
  }
  v75[17] = +[NSString stringWithUTF8String:v9];
  unsigned char v74[18] = @"userGender";
  v75[18] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 8)];
  v74[19] = @"userHeight_bin";
  float v10 = *(float *)(*(void *)(a1 + 40) + 224);
  long long v55 = 0;
  uint64_t v56 = 0;
  double v54 = 0;
  sub_10010F834(&v54, (const void *)qword_102482490, unk_102482498, (unk_102482498 - qword_102482490) >> 2);
  sub_1003B1E08((uint64_t)&v54, v57, v10);
  if (v58 >= 0) {
    uint64_t v11 = v57;
  }
  else {
    uint64_t v11 = (void **)v57[0];
  }
  v75[19] = +[NSString stringWithUTF8String:v11];
  v74[20] = @"userWeight_bin";
  float v12 = *(float *)(*(void *)(a1 + 40) + 232);
  int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  sub_10010F834(&v49, (const void *)qword_1024824B0, unk_1024824B8, (unk_1024824B8 - qword_1024824B0) >> 2);
  sub_1003B1E08((uint64_t)&v49, v52, v12);
  if (v53 >= 0) {
    double v13 = v52;
  }
  else {
    double v13 = (void **)v52[0];
  }
  v75[20] = +[NSString stringWithUTF8String:v13];
  v74[21] = @"userPAL_bin";
  sub_100F4DFE4(&__p, *(float *)(*(void *)(a1 + 40) + 12), 0.0, 3.0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v75[21] = +[NSString stringWithUTF8String:p_p];
  v74[22] = @"metricAsymmetryPercentage";
  v75[22] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 136)];
  v74[23] = @"metricDoubleSupportPercentage";
  v75[23] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 120)];
  v74[24] = @"metricStepLength";
  v75[24] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 128)];
  v74[25] = @"metricWalkingSpeed";
  v75[25] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 112)];
  v74[26] = @"isValidAsymmetryPercentage";
  uint64_t v15 = *(void *)(a1 + 32);
  int v16 = *(_DWORD *)(v15 + 204);
  if (*(_DWORD *)(v15 + 52)) {
    int v17 = 42;
  }
  else {
    int v17 = -1;
  }
  v75[26] = +[NSNumber numberWithBool:(v17 & v16) == 0];
  v74[27] = @"isValidDoubleSupportPercentage";
  uint64_t v18 = *(void *)(a1 + 32);
  int v19 = *(_DWORD *)(v18 + 196);
  if (*(_DWORD *)(v18 + 52)) {
    int v20 = 42;
  }
  else {
    int v20 = -1;
  }
  v75[27] = +[NSNumber numberWithBool:(v20 & v19) == 0];
  v74[28] = @"isValidStepLength";
  uint64_t v21 = *(void *)(a1 + 32);
  int v22 = *(_DWORD *)(v21 + 200);
  if (*(_DWORD *)(v21 + 52)) {
    int v23 = 42;
  }
  else {
    int v23 = -1;
  }
  v75[28] = +[NSNumber numberWithBool:(v23 & v22) == 0];
  v74[29] = @"isValidWalkingSpeed";
  uint64_t v24 = *(void *)(a1 + 32);
  int v25 = *(_DWORD *)(v24 + 192);
  if (*(_DWORD *)(v24 + 52)) {
    int v26 = 42;
  }
  else {
    int v26 = -1;
  }
  v75[29] = +[NSNumber numberWithBool:(v26 & v25) == 0];
  v74[30] = @"isValidStepLengthEntropy";
  uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 64);
  BOOL v31 = (v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL
     || v27 == 0x7FF0000000000000
     || (v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000
     || ((v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  v75[30] = +[NSNumber numberWithBool:v31];
  v74[31] = @"isValidCycleTimeEntropy";
  uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 88);
  BOOL v36 = (v32 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL
     || v32 == 0x7FF0000000000000
     || (v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000
     || ((v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  v75[31] = +[NSNumber numberWithBool:v36];
  v74[32] = @"metricStepIndexOfHarmonicityAP";
  LODWORD(v37) = *(_DWORD *)(*(void *)(a1 + 32) + 144);
  v75[32] = +[NSNumber numberWithFloat:v37];
  v74[33] = @"metricStepIndexOfHarmonicityML";
  LODWORD(v38) = *(_DWORD *)(*(void *)(a1 + 32) + 148);
  v75[33] = +[NSNumber numberWithFloat:v38];
  v74[34] = @"metricStepIndexOfHarmonicityVT";
  LODWORD(v39) = *(_DWORD *)(*(void *)(a1 + 32) + 152);
  v75[34] = +[NSNumber numberWithFloat:v39];
  v74[35] = @"metricSwingIndexOfHarmonicityAP";
  LODWORD(v40) = *(_DWORD *)(*(void *)(a1 + 32) + 156);
  v75[35] = +[NSNumber numberWithFloat:v40];
  v74[36] = @"metricSwingIndexOfHarmonicityML";
  LODWORD(v41) = *(_DWORD *)(*(void *)(a1 + 32) + 160);
  v75[36] = +[NSNumber numberWithFloat:v41];
  v74[37] = @"metricSwingIndexOfHarmonicityVT";
  LODWORD(v42) = *(_DWORD *)(*(void *)(a1 + 32) + 164);
  v75[37] = +[NSNumber numberWithFloat:v42];
  v74[38] = @"isValidIndexOfHarmonicity";
  v75[38] = +[NSNumber numberWithBool:sub_100708D24(*(void *)(a1 + 32))];
  v74[39] = @"numSegmentsRejectedByIsCadenceConcordant";
  v75[39] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 188)];
  v74[40] = @"numSegmentsRejectedByIsFeasibleWalkingSpeed";
  v75[40] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 176)];
  v74[41] = @"numSegmentsRejectedByIsNotRunning";
  v75[41] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 172)];
  v74[42] = @"numSegmentsRejectedByIsPendular";
  v75[42] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 180)];
  v74[43] = @"numSegmentsRejectedByIsSufficientVerticalTwist";
  v75[43] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 184)];
  v74[44] = @"numSegmentsRejectedByIsSwingStanceCycle";
  v75[44] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 168)];
  v74[45] = @"isAccepted";
  uint64_t v43 = *(void *)(a1 + 32);
  int v44 = *(_DWORD *)(v43 + 192);
  if (*(_DWORD *)(v43 + 52)) {
    int v45 = 42;
  }
  else {
    int v45 = -1;
  }
  v75[45] = +[NSNumber numberWithBool:(v45 & v44) == 0];
  v74[46] = @"rejectedDueToGrade";
  v75[46] = +[NSNumber numberWithBool:(*(_DWORD *)(*(void *)(a1 + 32) + 192) >> 2) & 1];
  v74[47] = @"rejectedDueToNumberOfGaitMetrics";
  v75[47] = +[NSNumber numberWithBool:(*(_DWORD *)(*(void *)(a1 + 32) + 192) >> 1) & 1];
  v74[48] = @"rejectedDueToWorkout";
  v75[48] = +[NSNumber numberWithBool:(*(_DWORD *)(*(void *)(a1 + 32) + 192) >> 3) & 1];
  v74[49] = @"rejectedDueToGaitMetricsYield";
  v75[49] = +[NSNumber numberWithBool:(*(_DWORD *)(*(void *)(a1 + 32) + 192) >> 4) & 1];
  char v46 = +[NSDictionary dictionaryWithObjects:v75 forKeys:v74 count:50];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v49)
  {
    int v50 = v49;
    operator delete(v49);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v54)
  {
    long long v55 = v54;
    operator delete(v54);
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  if (v59)
  {
    long long v60 = v59;
    operator delete(v59);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  if (v64)
  {
    long long v65 = v64;
    operator delete(v64);
  }
  if (v73 < 0) {
    operator delete(v72[0]);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  return v46;
}

void sub_100F4DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a51) {
    operator delete(a51);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F4DC5C(int a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v33 = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  sub_10010F834(&v33, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v6 = v34 - (unsigned char *)v33;
  if (v34 == (unsigned char *)v33)
  {
    if (!v34)
    {
      uint64_t v9 = *(int **)a2;
      if (*(void *)(a2 + 8) != *(void *)a2) {
        goto LABEL_30;
      }
LABEL_36:
      sub_100134750(a3, "(--inf,inf)");
      return;
    }
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6 >> 2;
    if ((unint64_t)(v6 >> 2) <= 1) {
      uint64_t v8 = 1;
    }
    while (v33[v7] < a1)
    {
      if (v8 == ++v7)
      {
        LODWORD(v7) = v8;
        break;
      }
    }
  }
  long long v34 = v33;
  operator delete(v33);
  uint64_t v9 = *(int **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10 == *(void *)a2) {
    goto LABEL_36;
  }
  if (!v7)
  {
LABEL_30:
    std::to_string(&v31, *v9);
    int v25 = std::string::insert(&v31, 0, "(--inf,");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    double v13 = std::string::append(&v32, "]");
LABEL_31:
    long long v27 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a3[2] = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v27;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v24 = (void *)v31.__r_.__value_.__r.__words[0];
      goto LABEL_35;
    }
    return;
  }
  if ((v10 - *(void *)a2) >> 2 == (int)v7)
  {
    std::to_string(&v31, *(_DWORD *)(v10 - 4));
    uint64_t v11 = std::string::insert(&v31, 0, "(");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    double v13 = std::string::append(&v32, ",inf)");
    goto LABEL_31;
  }
  std::to_string(&v29, v9[(int)v7 - 1]);
  double v14 = std::string::insert(&v29, 0, "(");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append(&v30, ",");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_DWORD *)(*(void *)a2 + 4 * (int)v7));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v20 = std::string::append(&v31, (const std::string::value_type *)p_p, size);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v32, "]");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  a3[2] = *((void *)&v22->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v24 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v24);
  }
}

void sub_100F4DF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F4DFE4(std::string *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>)
{
  float v7 = (float)(a2 - a3) / a4;
  float v8 = ceilf(v7);
  std::to_string(&v20, a3 + (float)((float)(int)(vcvtps_s32_f32(v7) - 1) * a4));
  std::to_string(&v19, a3 + (float)((float)(int)v8 * a4));
  std::operator+<char>();
  uint64_t v9 = std::string::append(&v16, ",");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v19;
  }
  else {
    uint64_t v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  double v13 = std::string::append(&v17, (const std::string::value_type *)v11, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  long long v15 = std::string::append(&v18, "]");
  *a1 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_100F4E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_100F4EA28(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100F4EA58(uint64_t a1)
{
  v48[0] = @"userHeight_bin";
  sub_100F4DFE4(&v47, *(float *)(a1 + 48), 0.0, 0.1);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v2 = &v47;
  }
  else {
    int v2 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  v49[0] = +[NSString stringWithUTF8String:v2];
  v48[1] = @"userWeight_bin";
  sub_100F4DFE4(&v46, *(float *)(a1 + 52), 0.0, 15.0);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v46;
  }
  else {
    uint64_t v3 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  v49[1] = +[NSString stringWithUTF8String:v3];
  v48[2] = @"userAge_bin";
  float v4 = *(float *)(a1 + 60);
  double v42 = 0;
  uint64_t v43 = 0;
  double v41 = 0;
  sub_10010F834(&v41, (const void *)qword_102482510, unk_102482518, (unk_102482518 - qword_102482510) >> 2);
  sub_1003B1E08((uint64_t)&v41, v44, v4);
  if (v45 >= 0) {
    double v5 = v44;
  }
  else {
    double v5 = (void **)v44[0];
  }
  v49[2] = +[NSString stringWithUTF8String:v5];
  v48[3] = @"userBMI_bin";
  LODWORD(v6) = *(_DWORD *)(a1 + 48);
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  [*(id *)(a1 + 32) BMIFromHeight:v6 weight:v7];
  float v9 = v8;
  BOOL v36 = 0;
  double v37 = 0;
  uint64_t v38 = 0;
  sub_10010F834(&v36, (const void *)qword_102482530, unk_102482538, (unk_102482538 - qword_102482530) >> 2);
  sub_1003B1E08((uint64_t)&v36, v39, v9);
  if (v40 >= 0) {
    long long v10 = v39;
  }
  else {
    long long v10 = (void **)v39[0];
  }
  v49[3] = +[NSString stringWithUTF8String:v10];
  v48[4] = @"userSex";
  v49[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v48[5] = @"userIsHeightSet";
  v49[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 97)];
  v48[6] = @"userIsWeightSet";
  v49[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 98)];
  v48[7] = @"userIsAgeSet";
  v49[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 96)];
  v48[8] = @"classificationSteadinessScoreIsValid";
  v49[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 168)];
  v48[9] = @"classificationUnadjustedScore";
  v49[9] = +[NSNumber numberWithDouble:*(double *)(a1 + 152)];
  v48[10] = @"classificationSteadinessScore";
  v49[10] = +[NSNumber numberWithDouble:*(double *)(a1 + 160)];
  v48[11] = @"steadinessScore_bin";
  float v11 = *(double *)(a1 + 160);
  sub_100F4DFE4(&v35, v11, 0.0, 5.0);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v12 = &v35;
  }
  else {
    long long v12 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  v49[11] = +[NSString stringWithUTF8String:v12];
  v48[12] = @"classificationIsHistoricalCompute";
  v49[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 169)];
  v48[13] = @"classificationRejectionStatusClassifier";
  v49[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 172)];
  v48[14] = @"classificationAppliedBoutMetricCorrections";
  v49[14] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1132)];
  v48[15] = @"steadinessScoreCapacity_bin";
  float v13 = *(double *)(a1 + 1184);
  sub_100F4DFE4(&v34, v13, 0.0, 0.05);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v14 = &v34;
  }
  else {
    long long v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  v49[15] = +[NSString stringWithUTF8String:v14];
  v48[16] = @"steadinessScoreAnomalousGait_bin";
  float v15 = *(double *)(a1 + 1240);
  sub_100F4DFE4(&v33, v15, 0.0, 0.05);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v16 = &v33;
  }
  else {
    std::string v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  v49[16] = +[NSString stringWithUTF8String:v16];
  v48[17] = @"steadinessScoreCompensatoryGait_bin";
  float v17 = *(double *)(a1 + 1296);
  sub_100F4DFE4(&v32, v17, 0.0, 0.05);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v18 = &v32;
  }
  else {
    std::string v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  v49[17] = +[NSString stringWithUTF8String:v18];
  v48[18] = @"steadinessScoreDemographics_bin";
  sub_100F4DFE4(&v31, 0.0, 0.0, 0.05);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v19 = &v31;
  }
  else {
    std::string v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  v49[18] = +[NSString stringWithUTF8String:v19];
  v48[19] = @"steadinessScoreGaitSmoothness_bin";
  float v20 = *(double *)(a1 + 1352);
  sub_100F4DFE4(&v30, v20, 0.0, 0.05);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v21 = &v30;
  }
  else {
    long long v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  v49[19] = +[NSString stringWithUTF8String:v21];
  v48[20] = @"unadjustedSteadinessScore_bin";
  float v22 = *(double *)(a1 + 144);
  sub_100F4DFE4(&v29, v22, 0.0, 0.05);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v23 = &v29;
  }
  else {
    long long v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  v49[20] = +[NSString stringWithUTF8String:v23];
  v48[21] = @"numValidStepBouts7Days";
  v49[21] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1224)];
  v48[22] = @"numValidStepBouts28Days";
  v49[22] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1228)];
  v48[23] = @"daysWithSufficientStepBouts7Days";
  v49[23] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 104)];
  v48[24] = @"daysWithSufficientStepBouts28Days";
  v49[24] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 108)];
  v48[25] = @"dailySteps30daysMax";
  v49[25] = +[NSNumber numberWithDouble:*(double *)(a1 + 992)];
  v48[26] = @"dailyFlights30daysMax";
  v49[26] = +[NSNumber numberWithDouble:*(double *)(a1 + 984)];
  v48[27] = @"dailySteps7daysMean";
  v49[27] = +[NSNumber numberWithDouble:*(double *)(a1 + 1000)];
  v48[28] = @"dailySteps30daysMean";
  v49[28] = +[NSNumber numberWithDouble:*(double *)(a1 + 1032)];
  v48[29] = @"dailyFlights30daysMean";
  v49[29] = +[NSNumber numberWithDouble:*(double *)(a1 + 1024)];
  v48[30] = @"inputNumFallsInQueryPeriod";
  v49[30] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1128)];
  v48[31] = @"numStepsLast7Days_bin";
  float v24 = *(double *)(a1 + 1144);
  sub_100F4DFE4(&__p, v24, 0.0, 500.0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  v49[31] = +[NSString stringWithUTF8String:p_p];
  v48[32] = @"classificationRejectionStatusModelContinuousWalking";
  v49[32] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1208)];
  v48[33] = @"classificationRejectionStatusModelEntropy";
  v49[33] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1320)];
  v48[34] = @"classificationRejectionStatusModelGaitBaseline";
  v49[34] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1264)];
  v48[35] = @"errorStatusClassifier";
  v49[35] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 176)];
  v48[36] = @"errorDataSourcesUnavailable";
  v49[36] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 180)];
  v48[37] = @"notificationWrittenToHealthKit";
  v49[37] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1042)];
  v48[38] = @"notificationUserHasOnboarded";
  v49[38] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1041)];
  v48[39] = @"notificationEventType";
  v49[39] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1096)];
  v48[40] = @"notificationPercentOK";
  v49[40] = +[NSNumber numberWithDouble:*(double *)(a1 + 1048)];
  v48[41] = @"notificationPercentLow";
  v49[41] = +[NSNumber numberWithDouble:*(double *)(a1 + 1056)];
  v48[42] = @"notificationPercentVeryLow";
  v49[42] = +[NSNumber numberWithDouble:*(double *)(a1 + 1064)];
  v48[43] = @"notificationIsBlockoutPeriodLow";
  v49[43] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1072)];
  v48[44] = @"notificationIsBlockoutPeriodVeryLow";
  v49[44] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1073)];
  v48[45] = @"notificationIsSampleRecent";
  v49[45] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1074)];
  v48[46] = @"weeksSinceLowNotification";
  v49[46] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1384)];
  v48[47] = @"weeksSinceVeryLowNotification";
  v49[47] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 1388)];
  long long v26 = +[NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:48];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (v36)
  {
    double v37 = v36;
    operator delete(v36);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v41)
  {
    double v42 = v41;
    operator delete(v41);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  return v26;
}

void sub_100F4F36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a55) {
    operator delete(a55);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a64) {
    operator delete(a64);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  _Unwind_Resume(a1);
}

void sub_100F4F984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F4F9B4(uint64_t a1, xpc_activity_t activity)
{
  if (!xpc_activity_get_state(activity))
  {
    xpc_object_t v6 = xpc_activity_copy_criteria(activity);
    if (!v6) {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    }
    int64_t int64 = xpc_dictionary_get_int64(v6, XPC_ACTIVITY_DELAY);
    if (int64)
    {
      int64_t v8 = int64;
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      float v9 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t buf = 136446722;
        xpc_activity_state_t state = "com.apple.locationd.Mobility.Classification";
        __int16 v16 = 2050;
        int64_t v17 = v8;
        __int16 v18 = 2050;
        uint64_t v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: Checking in on XPC  %{public}s activity, previous delay (%{public}lld), new delay (%{public}lld)", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_28;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 == -1)
      {
LABEL_31:
        float v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService setUpClassificationActivityWithDeferral:]_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
LABEL_28:
        xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
        xpc_dictionary_set_int64(v6, XPC_ACTIVITY_DELAY, *(void *)(a1 + 40));
        xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
        xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
        xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
        xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 1);
        xpc_activity_set_criteria(activity, v6);
        xpc_release(v6);
        return;
      }
    }
    else
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      float v11 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
      {
        int64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t buf = 136446466;
        xpc_activity_state_t state = "com.apple.locationd.Mobility.Classification";
        __int16 v16 = 2050;
        int64_t v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: Initializing %{public}s activity with delay %{public}lld", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_28;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 == -1) {
        goto LABEL_31;
      }
    }
    dispatch_once(&qword_102418FA0, &stru_102306038);
    goto LABEL_31;
  }
  [*(id *)(a1 + 32) onMobilityClassificationActivity:activity];
  if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102306038);
    }
    float v4 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      xpc_activity_state_t state = (const char *)xpc_activity_get_state(activity);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102306038);
      }
      xpc_activity_get_state(activity);
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService setUpClassificationActivityWithDeferral:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100F5005C(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_102306018);
  }
  float v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BoutService: Data processing timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    xpc_activity_get_state(a2);
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService setUpProcessBoutsActivity]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) onMobilityProcessBoutsActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    double v5 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)uint64_t buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102306018);
      }
      xpc_activity_get_state(a2);
      int64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService setUpProcessBoutsActivity]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100F50548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F50560(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    int64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    double v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        float v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        float v15 = 0;
      }
      __int16 v16 = &v15[24 * v11];
      int64_t v17 = &v15[24 * v14];
      *(double *)__int16 v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      uint64_t v10 = v16 + 24;
      uint64_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      float v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::BoutBoundary>::setExpirationRule(CFTimeInterval) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100F50818(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    int64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    double v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        float v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        float v15 = 0;
      }
      __int16 v16 = &v15[24 * v11];
      int64_t v17 = &v15[24 * v14];
      *(double *)__int16 v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      uint64_t v10 = v16 + 24;
      uint64_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      float v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100F50AD0(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    int64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    double v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        float v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        float v15 = 0;
      }
      __int16 v16 = &v15[24 * v11];
      int64_t v17 = &v15[24 * v14];
      *(double *)__int16 v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      uint64_t v10 = v16 + 24;
      uint64_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      float v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100F50D88(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    int64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    double v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        float v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        float v15 = 0;
      }
      __int16 v16 = &v15[24 * v11];
      int64_t v17 = &v15[24 * v14];
      *(double *)__int16 v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      uint64_t v10 = v16 + 24;
      uint64_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023061B8);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023061B8);
      }
      float v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

id sub_100F51040(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onAggregationTimer];
}

void sub_100F51304(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_102306018);
  }
  float v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "XPC Mobility Sync: Mobility sync with watch fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    xpc_activity_get_state(a2);
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMobilityWalkingBoutService setUpMobilityCompanionSyncActivity]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) onMobilityCompanionSyncActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_102306018);
    }
    double v5 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)uint64_t buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "XPC Mobility Sync: Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_102306018);
      }
      xpc_activity_get_state(a2);
      int64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMobilityWalkingBoutService setUpMobilityCompanionSyncActivity]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100F5228C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100F522A8(uint64_t a1)
{
  v3[0] = @"isActivityDeferred";
  v4[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 36)];
  v3[1] = @"isSuccess";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 37)];
  _DWORD v3[2] = @"isActivityValid";
  _DWORD v4[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 38)];
  v3[3] = @"isWatchPaired";
  v4[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 39)];
  v3[4] = @"messageSize";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:5];
}

void sub_100F527FC(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100F5282C(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100F5285C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_100F5288C@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x248uLL);
  uint64_t result = sub_100F528E8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100F528D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100F528E8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102306088;
  sub_1009820A0(a1 + 3, *a2);
  return a1;
}

void sub_100F52934(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100F52948(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102306088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F52968(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102306088;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100F529BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_100F529E4@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x268uLL);
  uint64_t result = sub_100F52A40(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100F52A2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100F52A40(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1023060D8;
  sub_1014BF9A0(a1 + 3, *a2);
  return a1;
}

void sub_100F52A8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100F52AA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023060D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F52AC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023060D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100F52B14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_100F52B3C@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0x20uLL);
  uint64_t result = sub_100F52B88(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100F52B74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100F52B88(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102306128;
  sub_101199360(a1 + 3);
  return a1;
}

void sub_100F52BD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100F52BE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102306128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F52C04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102306128;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100F52C58(uint64_t a1)
{
  return sub_1011993C8(a1 + 24);
}

uint64_t sub_100F52C64(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F52CB4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100F52CB4(uint64_t a1)
{
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  int v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  float v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  double v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  xpc_activity_state_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return a1;
}

void sub_100F52D34(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_1000DB0A0(v2);
    }
    operator delete();
  }
}

void *sub_100F52D8C@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x1C0uLL);
  uint64_t result = sub_100F52DE8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100F52DD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100F52DE8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102306178;
  sub_1008591D8(a1 + 3, *a2);
  return a1;
}

void sub_100F52E34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100F52E48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102306178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F52E68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102306178;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100F52EBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_100F52EE4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    float v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete();
  }
}

void sub_100F52F48(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a2[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    float v4 = (std::__shared_weak_count *)a2[3];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    double v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete();
  }
}

void *sub_100F52FB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  float v4 = a4;
  uint64_t v10 = a4;
  unint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *float v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_100F53048((uint64_t)v7);
  return v4;
}

uint64_t sub_100F53048(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

uint64_t sub_100F53080(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  int v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102306058);
    }
    unint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102306058);
      }
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::BoutBoundary>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::BoutBoundary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_100F53280(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100F532B0(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  int v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102306058);
    }
    unint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102306058);
      }
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_100F534B0(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  int v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102306058);
    }
    unint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102306058);
      }
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::BoutMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::BoutMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_100F536B0(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  int v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  xpc_activity_state_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102306058);
    }
    unint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102306058);
      }
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void *sub_100F538B0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    xpc_activity_state_t v6 = result;
    uint64_t result = sub_100F5392C(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100F53910(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100F5392C(void *a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_1001F2B9C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[240 * v4];
  return result;
}

unsigned __int8 *sub_100F53980()
{
  sub_100134750(qword_102482430, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482430, (void *)&_mh_execute_header);
  uint64_t v1 = 28800;
  uint64_t result = sub_101A2AFB4(v2, "ActivityIntervalMobilityCompanionSync", &v1, 0);
  qword_102482448 = v3;
  return result;
}

unsigned __int8 *sub_100F53A08()
{
  sub_100F54158("MslEnable");
  sub_100F54158("MslFile");
  sub_100F54158("MslFlushTimeout");
  LOBYTE(v30) = 0;
  uint64_t result = sub_10006ACBC(buf, "MslLogger.Enable", (unsigned __int8 *)&v30, 0);
  if (buf[1])
  {
    uint64_t v1 = sub_1000D3E78();
    sub_10006B564(v1, &v38);
    uint64_t v27 = 104857600;
    sub_101A2AFB4(v28, "MslLogger.FileSize", &v27, 0);
    uint64_t v30 = v29;
    int v24 = 86400;
    sub_101A21DA8(v25, "MslLogger.FileTimeInterval", &v24, 0);
    int v31 = v26;
    int v21 = 50;
    sub_101A21DA8(v22, "MslLogger.FilesToKeep", &v21, 0);
    int v32 = v23;
    int v2 = (char *)sub_1000A6958();
    sub_1000A5670(v2, (uint64_t)&v18);
    uint64_t v3 = std::string::append(&v18, "MslLogger");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v19 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    sub_101A2A6C0((BOOL *)buf, "MslLogger.Directory", (long long *)v19, 0);
    if (SHIBYTE(v41) < 0)
    {
      sub_1000DC48C(v33, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      *(_OWORD *)std::string v33 = __src;
      _DWORD v33[2] = v41;
    }
    sub_100134750(v13, "locationdSensors");
    sub_101A2A6C0((BOOL *)&v15, "MslLogger.Prefix", (long long *)v13, 0);
    if (SHIBYTE(v17) < 0)
    {
      sub_1000DC48C(v34, (void *)v16, *((unint64_t *)&v16 + 1));
    }
    else
    {
      *(_OWORD *)std::string v34 = v16;
      _OWORD v34[2] = v17;
    }
    sub_100134750(v8, "msl");
    sub_101A2A6C0(v10, "MslLogger.Ext", (long long *)v8, 0);
    if (SHIBYTE(v12) < 0)
    {
      sub_1000DC48C(v35, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      *(_OWORD *)std::string v35 = __p;
      _OWORD v35[2] = v12;
    }
    int v36 = 4;
    uint64_t v5 = -1;
    sub_101A2AFB4(v6, "MslLogger.FlushTimeout", &v5, 0);
    uint64_t v37 = v7;
    if (SHIBYTE(v12) < 0) {
      operator delete((void *)__p);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)v16);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete((void *)__src);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  return result;
}

void sub_100F53FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  sub_100F55AF4(&a39, 0);
  sub_100997A28((uint64_t)&a58);
  if (a72) {
    sub_1000DB0A0((std::__shared_weak_count *)a72);
  }
  _Unwind_Resume(a1);
}

void sub_100F54158(const char *a1)
{
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, &v8);
  CFTypeRef v7 = 0;
  if (sub_1004D0164(v8, a1, &v7))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023061D8);
    }
    uint64_t v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      unint64_t v13 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Legacy motion setting found '%{public}s'. Clearing.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023061D8);
      }
      int v10 = 136446210;
      unint64_t v11 = a1;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLObsoleteMotionDefaultsWrite(const char *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_1004CF7DC(v8, a1, 0xFFFFFFFFLL);
    if (sub_1004D0164(v8, a1, &v7))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023061D8);
      }
      long long v4 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        unint64_t v13 = a1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to clear legacy motion setting: '%{public}s'. Stale profile?", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023061D8);
        }
        int v10 = 136446210;
        unint64_t v11 = a1;
        xpc_activity_state_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLObsoleteMotionDefaultsWrite(const char *)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
}

void sub_100F544A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F544C8()
{
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_1023061F8);
  }
  uint64_t v0 = qword_10248AF90;
  if (qword_10248AF90)
  {
    os_unfair_lock_lock((os_unfair_lock_t)qword_10248AF90);
    sub_100F5454C((uint64_t *)(v0 + 8), 0);
    os_unfair_lock_unlock((os_unfair_lock_t)v0);
  }
}

uint64_t sub_100F5454C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1016F7F90(result);
    operator delete();
  }
  return result;
}

void sub_100F5459C()
{
}

void sub_100F546CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  operator delete();
}

id sub_100F54730(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_1016F8C6C(v3);
  }
  long long v4 = +[NSFileManager defaultManager];
  uint64_t v5 = *(void *)(a1 + 8);
  xpc_activity_state_t v6 = (void *)(v5 + 16);
  if (*(char *)(v5 + 39) < 0) {
    xpc_activity_state_t v6 = (void *)*v6;
  }
  CFTypeRef v7 = [(NSFileManager *)v4 contentsOfDirectoryAtPath:+[NSString stringWithUTF8String:v6] error:0];
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = (void *)(v8 + 40);
  if (*(char *)(v8 + 63) < 0) {
    char v9 = (void *)*v9;
  }
  int v10 = [(NSArray *)v7 filteredArrayUsingPredicate:+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", @"self BEGINSWITH %@", +[NSString stringWithUTF8String:v9])];
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v11 = [(NSArray *)v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v16 = *(void *)(a1 + 8);
        int64_t v17 = (void *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0) {
          int64_t v17 = (void *)*v17;
        }
        std::string v18 = [+[NSString stringWithUTF8String:v17] stringByAppendingPathComponent:v15];
        id v19 = [@"/var/mobile/Library/Logs/CrashReporter/com.apple.locationd" stringByAppendingPathComponent:v15];
        sub_1004BB3EC(-[NSString UTF8String](v18, "UTF8String"), (const char *)[v19 UTF8String]);
        [v2 addObject:v19];
        sub_1004BB1FC((const char *)[v19 UTF8String]);
      }
      id v12 = [(NSArray *)v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v12);
  }
  return v2;
}

id sub_100F54954(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 136)) {
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    sub_1016F8C6C(v2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = (void *)(v3 + 104);
  if (*(char *)(v3 + 127) < 0) {
    long long v4 = (void *)*v4;
  }
  uint64_t v5 = +[NSString stringWithUTF8String:v4];
  uint64_t v6 = *(void *)(a1 + 8);
  CFTypeRef v7 = (void *)(v6 + 16);
  if (*(char *)(v6 + 39) < 0) {
    CFTypeRef v7 = (void *)*v7;
  }
  uint64_t v8 = [+[NSString stringWithUTF8String:v7] stringByAppendingPathComponent:v5];
  id v9 = [@"/var/mobile/Library/Logs/CrashReporter/com.apple.locationd" stringByAppendingPathComponent:v5];
  sub_1004BB3EC(-[NSString UTF8String](v8, "UTF8String"), (const char *)[v9 UTF8String]);
  sub_1004BB1FC((const char *)[v9 UTF8String]);
  return v9;
}

uint64_t sub_100F54A38(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54AF0(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54BA8(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54C60(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54D18(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v12 |= 1u;
  double v11 = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54DD0(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54E88(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54F40(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F54FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F54FF8(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F5509C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F550B0(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F55154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55168(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F5520C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55220(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F552C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F552D8(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F5537C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55390(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F55434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55448(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F554EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55500(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F555A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F555B8(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F5565C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55670(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F55714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55728(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F557CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F557E0(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F55884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55898(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F5593C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55950(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F559F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F55A08(uint64_t a1, uint64_t *a2, double a3)
{
  sub_10170140C(v9);
  v11 |= 1u;
  *(double *)&v9[77] = a3;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v10;
  uint64_t v10 = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_1019E5150(a1, (uint64_t)v9);
  return sub_101706914((PB::Base *)v9);
}

void sub_100F55AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100F55AC0(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t *sub_100F55AF4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_100F5454C((uint64_t *)(v2 + 8), 0);
    operator delete();
  }
  return result;
}

void sub_100F55C8C(id a1)
{
  qword_102482550 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLAvengerScannerSilo"];
}

void sub_100F57578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = [[[*(id *)(a1 + 32) universe] silo] queue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100F5761C;
  v10[3] = &unk_1022C6138;
  void v10[4] = a2;
  v10[5] = a3;
  uint64_t v9 = *(void *)(a1 + 32);
  v10[6] = a4;
  v10[7] = v9;
  dispatch_async(v8, v10);
}

void sub_100F5761C(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1023062B0);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v10 = 68289794;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v3;
    __int16 v16 = 2114;
    uint64_t v17 = v4;
    __int16 v18 = 2114;
    uint64_t v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerScanner: number of advertisement buffers query\", \"total\":%{public, location:escape_only}@, \"remaining\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x30u);
  }
  if (*(void *)(a1 + 48))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1023062B0);
    }
    uint64_t v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v10 = 68289283;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2113;
      uint64_t v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLAvengerScanner: Error querying num buffers available\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1023062B0);
      }
    }
    uint64_t v8 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 68289283;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2113;
      uint64_t v15 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLAvengerScanner: Error querying num buffers available", "{\"msg%{public}.0s\":\"CLAvengerScanner: Error querying num buffers available\", \"error\":%{private, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  else
  {
    [*(id *)(*(void *)(a1 + 56) + 72) setTotalAdvertisementBuffersAvailable:[*(id *)(a1 + 32) unsignedIntegerValue]];
    *(unsigned char *)(*(void *)(a1 + 56) + 24) = 1;
  }
}

void sub_100F59398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a22, 8);
  uint64_t v29 = a28;
  a28 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F59420(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 72) stopAggressiveScan];
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t result = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void sub_100F59E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a37, 8);
  uint64_t v44 = a43;
  a43 = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  _Unwind_Resume(a1);
}

id sub_100F59EBC(void *a1)
{
  [*(id *)(a1[4] + 72) stopCoexFriendlyAggressiveScan];
  uint64_t v2 = *(void *)(a1[6] + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = a1[5];

  return [v4 clearLongAggressiveTimeoutBlockForClient:v5];
}

id sub_100F59F3C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 72) downgradedDuringCoexFriendlyAggressiveDiscoveryScan];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    [*(id *)(v3 + 112) longAggressiveScanCoexImpactedDuration];
    double v5 = v4;
    [*(id *)(*(void *)(a1 + 32) + 112) longAggressiveScanNonCoexImpactedDuration];
    double v7 = v5 - v6;
    double v8 = 0.0;
    if (v7 > 0.0)
    {
      [*(id *)(*(void *)(a1 + 32) + 112) longAggressiveScanCoexImpactedDuration];
      double v10 = v9;
      [*(id *)(*(void *)(a1 + 32) + 112) longAggressiveScanNonCoexImpactedDuration];
      double v8 = v10 - v11;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1023062B0);
    }
    __int16 v12 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v21 = 0;
      __int16 v22 = 2082;
      long long v23 = "";
      __int16 v24 = 1026;
      int v25 = (int)v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerScanner: extending LongAggressiveScan due to downgrade\", \"remainingDuration\":%{public}d}", buf, 0x18u);
    }
    [*(id *)(a1 + 32) clearLongAggressiveTimeoutBlockForClient:*(void *)(a1 + 40)];
    uint64_t v13 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100F5A188;
    void v19[3] = &unk_102306268;
    void v19[4] = v13;
    return [v13 createLongAggressiveTimeoutBlockForClient:*(void *)(a1 + 40) seconds:(uint64_t)v8 withBlock:v19];
  }
  else
  {
    [*(id *)(v3 + 72) stopCoexFriendlyAggressiveScan];
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v16 = *(void *)(v15 + 48);
    *(void *)(v15 + 48) = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = *(void **)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    return [v17 clearLongAggressiveTimeoutBlockForClient:v18];
  }
}

id sub_100F5A188(void *a1)
{
  [*(id *)(a1[4] + 72) stopCoexFriendlyAggressiveScan];
  uint64_t v2 = *(void *)(a1[6] + 8);
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (void *)a1[4];
  uint64_t v5 = a1[5];

  return [v4 clearLongAggressiveTimeoutBlockForClient:v5];
}

id sub_100F5A7E8(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 72) stopHawkeyeLowEnergyScan];
}

uint64_t sub_100F5B0AC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100F5B2F0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100F5B63C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100F5B6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100F5B7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100F5B8F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onAnalyticsTimerFired:*(void *)(*(void *)(a1 + 32) + 88)];
}

void sub_100F5BCB4(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100F5BCE4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_100F5BD14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_101755510(a2);
  int v4 = *(_DWORD *)(a2 + 244);
  *(int8x16_t *)(a2 + 72) = vextq_s8(*(int8x16_t *)(a1 + 80), *(int8x16_t *)(a1 + 80), 8uLL);
  int32x2_t v5 = *(int32x2_t *)(a1 + 132);
  *(_WORD *)(a2 + 241) = *(_WORD *)(a1 + 57);
  *(void *)(a2 + 228) = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 96);
  *(unsigned char *)(a2 + 238) = *(unsigned char *)(a1 + 129);
  *(unsigned char *)(a2 + 239) = *(unsigned char *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 144);
  *(void *)(a2 + 176) = v6;
  *(void *)(a2 + 184) = v7;
  *(unsigned char *)(a2 + 237) = *(unsigned char *)(a1 + 920);
  *(unsigned char *)(a2 + 236) = *(unsigned char *)(a1 + 1092);
  uint64_t v8 = *(void *)(a1 + 952);
  uint64_t v9 = *(void *)(a1 + 944);
  uint64_t v10 = *(void *)(a1 + 960);
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 20);
  *(unsigned char *)(a2 + 240) = *(unsigned char *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 992);
  uint64_t v12 = *(void *)(a1 + 984);
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v12;
  *(int32x2_t *)&long long v13 = vrev64_s32(*(int32x2_t *)(a1 + 1096));
  *((int32x2_t *)&v13 + 1) = vrev64_s32(v5);
  *(int8x16_t *)(a2 + 192) = vextq_s8(*(int8x16_t *)(a1 + 112), *(int8x16_t *)(a1 + 112), 8uLL);
  *(_OWORD *)(a2 + 208) = v13;
  uint64_t v14 = *(void *)(a1 + 1104);
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v10;
  uint64_t v15 = *(void *)(a1 + 1112);
  *(_DWORD *)(a2 + 244) = v4 | 0x7FFFFFF;
  *(void *)(a2 + 24) = v15;
  sub_101737BF8((uint64_t)v54);
  int8x16_t v56 = vextq_s8(*(int8x16_t *)(a1 + 560), *(int8x16_t *)(a1 + 560), 8uLL);
  uint64_t v55 = *(void *)(a1 + 576);
  int v58 = *(_DWORD *)(a1 + 584);
  v59 |= 0xE7u;
  int32x2_t v57 = vrev64_s32(*(int32x2_t *)(a1 + 544));
  sub_101735FC0((uint64_t)v50);
  v53 |= 0x78u;
  long long v16 = *(_OWORD *)(a1 + 592);
  long long v52 = *(_OWORD *)(a1 + 608);
  long long v51 = v16;
  sub_101737BF8((uint64_t)v44);
  uint64_t v17 = *(void *)(a1 + 216);
  int8x16_t v45 = vextq_s8(*(int8x16_t *)(a1 + 224), *(int8x16_t *)(a1 + 224), 8uLL);
  int v48 = *(_DWORD *)(a1 + 240);
  v49 |= 0xE7u;
  int32x2_t v18 = vrev64_s32(*(int32x2_t *)(a1 + 200));
  uint64_t v46 = v17;
  int32x2_t v47 = v18;
  sub_100F5C38C(a1 + 248, (uint64_t)v43);
  sub_101737BF8((uint64_t)v37);
  uint64_t v19 = *(void *)(a1 + 424);
  int8x16_t v38 = vextq_s8(*(int8x16_t *)(a1 + 432), *(int8x16_t *)(a1 + 432), 8uLL);
  int v41 = *(_DWORD *)(a1 + 448);
  v42 |= 0xE7u;
  int32x2_t v20 = vrev64_s32(*(int32x2_t *)(a1 + 408));
  uint64_t v39 = v19;
  int32x2_t v40 = v20;
  sub_100F5C408(a1 + 456, (uint64_t)v36);
  sub_101734C2C((uint64_t)v32);
  v35 |= 0xFu;
  long long v21 = *(_OWORD *)(a1 + 176);
  long long v33 = *(_OWORD *)(a1 + 160);
  long long v34 = v21;
  sub_101737BF8((uint64_t)v26);
  uint64_t v22 = *(void *)(a1 + 648);
  int8x16_t v27 = vextq_s8(*(int8x16_t *)(a1 + 656), *(int8x16_t *)(a1 + 656), 8uLL);
  int v30 = *(_DWORD *)(a1 + 672);
  v31 |= 0xE7u;
  int32x2_t v23 = vrev64_s32(*(int32x2_t *)(a1 + 632));
  uint64_t v28 = v22;
  int32x2_t v29 = v23;
  sub_100F5C45C(a1 + 680, (uint64_t)v25);
  sub_100F5C4EC(a1 + 1000, (uint64_t)v24);
  operator new();
}

void sub_100F5C304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  PB::Base::~Base((PB::Base *)&a10);
  PB::Base::~Base((PB::Base *)&a18);
  PB::Base::~Base((PB::Base *)&a50);
  PB::Base::~Base((PB::Base *)&a57);
  PB::Base::~Base((PB::Base *)&a63);
  PB::Base::~Base((PB::Base *)&STACK[0x290]);
  PB::Base::~Base((PB::Base *)&STACK[0x2C8]);
  PB::Base::~Base((PB::Base *)(v64 - 256));
  PB::Base::~Base((PB::Base *)(v64 - 200));
  PB::Base::~Base((PB::Base *)(v64 - 104));
  sub_1017557E4(v63);
  _Unwind_Resume(a1);
}

__n128 sub_100F5C38C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_10173510C(a2);
  int v4 = *(_DWORD *)(v3 + 176);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  long long v6 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v3 + 24) = v5;
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v3 + 80) = v6;
  *(void *)(v3 + 48) = *(void *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 136);
  long long v8 = *(_OWORD *)(a1 + 88);
  long long v9 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v3 + 160) = v7;
  *(_OWORD *)(v3 + 112) = v8;
  *(_OWORD *)(v3 + 128) = v9;
  *(_DWORD *)(v3 + 176) = v4 | 0x1FFFAF;
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(v3 + 96) = result;
  return result;
}

__n128 sub_100F5C408@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_101738B8C(a2);
  int v4 = *(_DWORD *)(v3 + 216);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)a1;
  long long v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 48);
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(v3 + 136) = result;
  *(_OWORD *)(v3 + 88) = v5;
  *(_DWORD *)(v3 + 216) = v4 | 0x3FF00;
  *(_OWORD *)(v3 + 104) = v6;
  return result;
}

__n128 sub_100F5C45C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_101736818(a2);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 24) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 56) = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 88) = v6;
  long long v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v3 + 120) = v7;
  long long v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v3 + 152) = v8;
  long long v9 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v3 + 184) = v9;
  long long v10 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v3 + 216) = *(_OWORD *)(a1 + 208);
  __n128 result = *(__n128 *)(a1 + 224);
  *(__n128 *)(v3 + 232) = result;
  *(_DWORD *)(v3 + 248) |= 0x3FFFFFFFu;
  *(_OWORD *)(v3 + 200) = v10;
  return result;
}

double sub_100F5C4EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_101734250(a2);
  double result = *(double *)(a1 + 40);
  __int16 v5 = *(_WORD *)(v3 + 60);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a1 + 56);
  *(_WORD *)(v3 + 55) = *(_WORD *)(a1 + 1);
  *(unsigned char *)(v3 + 52) = *(unsigned char *)(a1 + 32);
  *(_WORD *)(v3 + 53) = *(_WORD *)(a1 + 33);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  uint64_t v6 = *(void *)(a1 + 24);
  *(_WORD *)(v3 + 60) = v5 | 0x7EF;
  *(void *)(v3 + 24) = v6;
  *(double *)(v3 + 32) = result;
  return result;
}

void *sub_100F5C55C(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1000DC48C(v11, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a5;
    uint64_t v12 = *(void *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a5 + 24), *(void *)(a5 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a5 + 24);
    uint64_t v14 = *(void *)(a5 + 40);
  }
  uint64_t v15 = *(void *)(a5 + 48);
  sub_10001FAF4((uint64_t)a1, a2, a3, a4, (long long *)v11);
  *a1 = off_102306460;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  *a1 = &off_102306300;
  return a1;
}

void sub_100F5C678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F5C6AC(uint64_t a1)
{
  sub_100702CC8(a1);

  operator delete();
}

void *sub_100F5C6E4@<X0>(uint64_t a1@<X8>)
{
  v3[0] = off_1023064D8;
  v3[1] = sub_100F5C7E8;
  _DWORD v3[2] = 0;
  v3[3] = v3;
  sub_100134750(__p, "kCLConnectionMessageLocationPush");
  sub_100BED7C0((uint64_t)v6, (uint64_t)v3);
  sub_100F5DE98(a1, (unsigned __int8 *)__p, 1);
  sub_100BEDEB0(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return sub_100BEDEB0(v3);
}

void sub_100F5C7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_100F5C7E8(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  sub_10013FA80((int)v24, Dictionary);
  BOOL v23 = 0;
  if (sub_1000D2988((uint64_t)v24, "kCLConnectionMessageSubscribeKey", &v23))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023064A8);
    }
    uint64_t v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v26 = 2082;
      *(void *)&_OWORD v26[2] = "";
      __int16 v27 = 2114;
      uint64_t v28 = v7;
      __int16 v29 = 1026;
      BOOL v30 = v23;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush client attempted to subscribe\", \"client\":%{public, location:escape_only}@, \"subscribe\":%{public}hhd}", buf, 0x22u);
    }
    if (v23)
    {
      id v8 = +[NSMutableDictionary dictionary];
      CFStringRef v9 = (const __CFString *)[*(id *)(a1 + 64) bundleId];
      if (v9) {
        CFStringRef v10 = v9;
      }
      else {
        CFStringRef v10 = &stru_10234F018;
      }
      sub_10009AFB0(buf, (void *)(a1 + 8));
      uint64_t v12 = *(void *)buf;
      uint64_t v11 = *(std::__shared_weak_count **)v26;
      if (*(void *)v26)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v26 + 8), 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_1000DB0A0(v11);
        if (*(void *)v26) {
          sub_1000DB0A0(*(std::__shared_weak_count **)v26);
        }
      }
      id v13 = [*(id *)(a1 + 128) silo];
      id v14 = +[CLLocationPushRegistrar sharedRegistrar];
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3321888768;
      v19[2] = sub_100F5CBD8;
      void v19[3] = &unk_102306388;
      v19[6] = a1;
      v19[7] = v12;
      void v19[4] = v13;
      int32x2_t v20 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = *(CLConnectionMessage **)a2;
      uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
      void v19[5] = v8;
      long long v21 = v16;
      uint64_t v22 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v14 registerForPushToken:v10 completion:v19];
      if (v22) {
        sub_1000DB0A0(v22);
      }
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      sub_100F5CD98((void *)a1, 0);
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023064A8);
    }
    uint64_t v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v26 = 2082;
      *(void *)&_OWORD v26[2] = "";
      __int16 v27 = 2114;
      uint64_t v28 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush couldn't get value for kCLConnectionMessageSubscribeKey key for client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  sub_10013F3C4(v24);
}

void sub_100F5CB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,char a21)
{
  if (a19) {
    sub_1000DB0A0(a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  sub_10013F3C4(&a21);

  _Unwind_Resume(a1);
}

uint64_t sub_100F5CB9C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100F5CBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768;
  v9[2] = sub_100F5CCD0;
  v9[3] = &unk_102306350;
  long long v10 = *(_OWORD *)(a1 + 48);
  char v5 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  void v9[4] = a2;
  uint64_t v9[5] = v6;
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 80);
  v9[6] = a3;
  uint64_t v12 = v8;
  id v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v4 async:v9];
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_100F5CCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F5CCD0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    id v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (*(void *)(a1 + 64))
      {
        if ([*(id *)(a1 + 32) length])
        {
          *(_DWORD *)(v3 + 252) = 0;
          sub_100F5CD98((void *)v3, 1);
        }
        [*(id *)(a1 + 40) setObject:*(void *)(a1 + 32) forKeyedSubscript:@"kCLConnectionMessagePushTokenKey"];
        [*(id *)(a1 + 40) setObject:*(void *)(a1 + 48) forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
        CLConnectionMessage::sendReply();
      }
      sub_1000DB0A0(v5);
    }
  }
}

void sub_100F5CD84(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void sub_100F5CD98(void *a1, int a2)
{
  id v4 = (void *)sub_10009AD44(a1, @"registrationState");
  if (a2)
  {
    if (v4 && ([v4 BOOLValue] & 1) != 0) {
      return;
    }
    char v5 = +[NSNumber numberWithBool:1];
  }
  else
  {
    if (!v4) {
      return;
    }
    char v5 = 0;
  }
  sub_10009A6F0((uint64_t)a1, @"registrationState", (uint64_t)v5);
  sub_100196178((uint64_t)a1);

  sub_100F5CF38((uint64_t)a1);
}

void *sub_100F5CE30(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100F5CE64(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_100F5CEB4(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100F5CEE8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_100F5CF38(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 144))
  {
    if ([*(id *)(a1 + 136) isAuthorizedForServiceType:15]) {
      unsigned int v2 = [[(id)sub_10009AD44((void *)a1, @"registrationState") boolValue];
    }
    else {
      unsigned int v2 = 0;
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023064A8);
    }
    uint64_t v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      uint64_t v8 = "";
      __int16 v9 = 2114;
      uint64_t v10 = v4;
      __int16 v11 = 1026;
      unsigned int v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LocationPush checking topic should be registered \", \"client\":%{public, location:escape_only}@, \"shouldBeRegistered\":%{public}hhd}", (uint8_t *)v6, 0x22u);
    }
    int v5 = *(_DWORD *)(a1 + 252);
    if (v2)
    {
      if (v5 != 1) {
        sub_100F5D4C4(a1);
      }
    }
    else if (v5 != 2)
    {
      sub_100F5D1A8(a1);
    }
  }
}

void *sub_100F5D0A0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "Push");
}

void sub_100F5D0B4(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023064A8);
  }
  unsigned int v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2114;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush client did invalidate \", \"client\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
  }
  sub_100F5D1A8(a1);
}

void sub_100F5D1A8(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023064A8);
  }
  unsigned int v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush unregistering push client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  CFStringRef v4 = (const __CFString *)[*(id *)(a1 + 64) bundleId];
  id v5 = [*(id *)(a1 + 128) silo];
  sub_10009AFB0(buf, (void *)(a1 + 8));
  uint64_t v7 = *(void *)buf;
  uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v6);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  id v8 = +[CLLocationPushRegistrar sharedRegistrar];
  __int16 v11 = _NSConcreteStackBlock;
  uint64_t v12 = 3321888768;
  id v13 = sub_100F5DA1C;
  id v14 = &unk_1023063F0;
  if (v4) {
    CFStringRef v9 = v4;
  }
  else {
    CFStringRef v9 = &stru_10234F018;
  }
  id v15 = v5;
  uint64_t v16 = a1;
  uint64_t v17 = v7;
  uint64_t v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v8 setLocationPushesActive:0 forAppBundleIdentifier:v9 completion:&v11];
  [objc_msgSend(*(id *)(a1 + 128), "vendor", v11, v12, v13, v14, v15, v16, v17, v18) proxyForService:@"CLClientManager"];
  uint64_t v10 = *(void **)(a1 + 64);
  if (v10)
  {
    [v10 clientName];
  }
  else
  {
    uint64_t v29 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    *(_OWORD *)int v26 = 0u;
    long long v23 = 0u;
    *(_OWORD *)__int16 v24 = 0u;
    *(_OWORD *)long long v21 = 0u;
    *(_OWORD *)uint64_t v22 = 0u;
    long long v20 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  sub_1001C203C();
}

void sub_100F5D470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F5D4C4(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023064A8);
  }
  unsigned int v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush registering push topic \", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  CFStringRef v4 = (const __CFString *)[*(id *)(a1 + 64) bundleId];
  id v5 = [*(id *)(a1 + 128) silo];
  sub_10009AFB0(buf, (void *)(a1 + 8));
  uint64_t v7 = *(void *)buf;
  uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v6);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  id v8 = +[CLLocationPushRegistrar sharedRegistrar];
  __int16 v11 = _NSConcreteStackBlock;
  uint64_t v12 = 3321888768;
  id v13 = sub_100F5D7D8;
  id v14 = &unk_1023063F0;
  if (v4) {
    CFStringRef v9 = v4;
  }
  else {
    CFStringRef v9 = &stru_10234F018;
  }
  id v15 = v5;
  uint64_t v16 = a1;
  uint64_t v17 = v7;
  uint64_t v18 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v8 setLocationPushesActive:1 forAppBundleIdentifier:v9 completion:&v11];
  [objc_msgSend(*(id *)(a1 + 128), "vendor", v11, v12, v13, v14, v15, v16, v17, v18) proxyForService:@"CLClientManager"];
  uint64_t v10 = *(void **)(a1 + 64);
  if (v10)
  {
    [v10 clientName];
  }
  else
  {
    uint64_t v29 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    *(_OWORD *)int v26 = 0u;
    long long v23 = 0u;
    *(_OWORD *)__int16 v24 = 0u;
    *(_OWORD *)long long v21 = 0u;
    *(_OWORD *)uint64_t v22 = 0u;
    long long v20 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  sub_1001C203C();
}

void sub_100F5D78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F5D7D8(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  _DWORD v5[2] = sub_100F5D898;
  v5[3] = &unk_1023063B8;
  long long v6 = *(_OWORD *)(a1 + 40);
  CFStringRef v4 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = a2;
  [v3 async:v5];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_100F5D880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F5D898(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFStringRef v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      id v5 = v4;
      if (*(void *)(a1 + 40))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023064A8);
        }
        long long v6 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = *(void *)(v3 + 64);
          int v8 = *(unsigned __int8 *)(a1 + 56);
          v9[0] = 68289538;
          v9[1] = 0;
          __int16 v10 = 2082;
          __int16 v11 = "";
          __int16 v12 = 2114;
          uint64_t v13 = v7;
          __int16 v14 = 1026;
          int v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush registered push topic \", \"client\":%{public, location:escape_only}@, \"success\":%{public}hhd}", (uint8_t *)v9, 0x22u);
        }
      }
      sub_1000DB0A0(v5);
    }
  }
}

uint64_t sub_100F5D9C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100F5D9E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_100F5D9F0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100F5DA0C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100F5DA1C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  _DWORD v5[2] = sub_100F5DADC;
  v5[3] = &unk_1023063B8;
  long long v6 = *(_OWORD *)(a1 + 40);
  CFStringRef v4 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = a2;
  [v3 async:v5];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_100F5DAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F5DADC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFStringRef v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      id v5 = v4;
      if (*(void *)(a1 + 40))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023064A8);
        }
        long long v6 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = *(void *)(v3 + 64);
          int v8 = *(unsigned __int8 *)(a1 + 56);
          v9[0] = 68289538;
          v9[1] = 0;
          __int16 v10 = 2082;
          __int16 v11 = "";
          __int16 v12 = 2114;
          uint64_t v13 = v7;
          __int16 v14 = 1026;
          int v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPush unregistered push topic \", \"client\":%{public, location:escape_only}@, \"success\":%{public}hhd}", (uint8_t *)v9, 0x22u);
        }
      }
      sub_1000DB0A0(v5);
    }
  }
}

id sub_100F5DC08(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:*(id *)(a1 + 64) forKeyedSubscript:@"ClientKeyPath"];
  uint64_t v3 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3) forKeyedSubscript:@"SubscriptionStorageName"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 136)) forKeyedSubscript:@"AuthContext"];
  [v2 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 252)) forKeyedSubscript:@"TopicRegistrationState"];
  return v2;
}

void sub_100F5DCD4(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100F5DD04(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = off_1023064D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F5DD50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023064D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F5DD80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100F5DD88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F5DDC8()
{
}

void sub_100F5DDD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  CFStringRef v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  id v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    id v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  CFStringRef v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100F5DE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F5DE98(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100F5DF14(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F5DF00(_Unwind_Exception *a1)
{
  sub_100BEDF34(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F5DF14(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100F5E198(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100F5E288((uint64_t)v25, 0);
  return i;
}

void sub_100F5E180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F5E288((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100F5E198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100F5E210(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100F5E1F8(_Unwind_Exception *a1)
{
  sub_100F5E288(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100F5E210(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BED554((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F5E26C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F5E288(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BEDFB4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100F5E2E0(_DWORD *a1)
{
  if ((*a1 - 2) >= 0xA) {
    return *a1 == 1;
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102306578);
  }
  uint64_t v1 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#FenceMetrics Unexpected event type for metric", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
    unint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static CLFenceAnalytics::LocationMonitorTriggerEventType CLFenceAnalytics::eventTypeFromNotification(const CLFenceManager_Type::Notification &)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100F5E48C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 160);
  if ((v1 & 0x80) != 0) {
    return 3;
  }
  double v2 = *(double *)(a1 + 96);
  BOOL v4 = v2 > 400.0 || *(unsigned char *)(a1 + 188) != 0 || *(_DWORD *)(a1 + 180) == 2;
  if (!v4 && (v1 & 0x20) == 0 && *(void *)(a1 + 232) == *(void *)(a1 + 224)) {
    return 0;
  }
  if (v2 <= 0.0)
  {
    if (*(void *)(a1 + 232) == *(void *)(a1 + 224))
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102306578);
      }
      uint64_t v6 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#FenceMetrics Unexpected fence type for metric", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_102306578);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static CLFenceAnalytics::LocationMonitorTriggerFenceType CLFenceAnalytics::fenceTypeFromFence(const CLFenceManager_Type::Fence &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 4;
    }
  }
  else if (v2 < 7000.0)
  {
    return 1;
  }
  else
  {
    return 2;
  }
}

uint64_t sub_100F5E6A0(uint64_t a1)
{
  sub_100103240();
  *(unsigned char *)a1 = sub_1007414F8();
  *(unsigned char *)(a1 + 1) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 304) = v2;
  *(_OWORD *)(a1 + 320) = v2;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

BOOL sub_100F5E718(unsigned char *a1)
{
  return *a1 && a1[1] == 0;
}

uint64_t sub_100F5E738@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, CLMotionActivity *a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 21) = 0;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = 1000;
  *(unsigned char *)(a4 + 36) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 48) = -1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a4 + 56) = _Q1;
  *(void *)(a4 + 72) = 0xBFF0000000000000;
  *(void *)(a4 + 80) = 0xFFFFFFFF00000000;
  *(void *)(a4 + 88) = 0;
  *(void *)(a4 + 96) = 0xBFF0000000000000;
  *(void *)(a4 + 104) = 0;
  std::string::operator=((std::string *)a4, (const std::string *)a2);
  *(_DWORD *)(a4 + 48) = sub_100F5E2E0(a1);
  double v15 = *(double *)(a2 + 80);
  *(void *)(a4 + 56) = *(void *)(a2 + 88);
  double v16 = sub_1000A3D9C(*(double *)(a2 + 72), v15, *(double *)(a2 + 500), *(double *)(a2 + 508)) - *(double *)(a2 + 88);
  double v17 = *(double *)(a2 + 128);
  double v18 = a5 - v17;
  BOOL v19 = v17 <= 0.0;
  double v20 = -1.0;
  if (!v19) {
    double v20 = v18;
  }
  *(double *)(a4 + 64) = v16;
  *(double *)(a4 + 72) = v20;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a4 + 84) = sub_100F5E48C(a2);
  int v21 = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a4 + 91) = (~(_BYTE)v21 & 5) == 0;
  *(unsigned char *)(a4 + 88) = (v21 & 0x10) != 0;
  *(unsigned char *)(a4 + 89) = *(void *)(a2 + 232) != *(void *)(a2 + 224);
  *(unsigned char *)(a4 + 90) = *(unsigned char *)(a2 + 188);
  *(unsigned char *)(a4 + 92) = CLMotionActivity::isInVehicle(a3);
  *(unsigned char *)(a4 + 93) = CLMotionActivity::isDriving(a3);
  *(unsigned char *)(a4 + 94) = CLMotionActivity::isStatic(a3);
  uint64_t result = CLMotionActivity::isWalking(a3);
  *(unsigned char *)(a4 + 95) = result;
  double v23 = *(double *)(a2 + 152);
  if (v23 <= 0.0) {
    double v23 = -1.0;
  }
  int32x2_t v24 = vrev64_s32(*(int32x2_t *)(a2 + 140));
  *(double *)(a4 + 96) = v23;
  *(int32x2_t *)(a4 + 104) = v24;
  return result;
}

void sub_100F5E8A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100F5E8C0(uint64_t a1)
{
  v6[0] = @"airplaneMode";
  v7[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 27)];
  v6[1] = @"bundleId";
  long long v2 = *(uint64_t **)(a1 + 32);
  if (*((char *)v2 + 23) < 0) {
    long long v2 = (uint64_t *)*v2;
  }
  v7[1] = +[NSString stringWithUTF8String:v2];
  _DWORD v6[2] = @"cellAvailable";
  v7[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 24)];
  void v6[3] = @"eventDistance";
  void v7[3] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 64)];
  void v6[4] = @"eventFenceType";
  void v7[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 84)];
  v6[5] = @"eventLatency";
  void v7[5] = +[NSNumber numberWithInt:(int)*(double *)(*(void *)(a1 + 32) + 72)];
  v6[6] = @"eventMask";
  v7[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 80)];
  v6[7] = @"eventRadius";
  v7[7] = +[NSNumber numberWithInt:(int)*(double *)(*(void *)(a1 + 32) + 56)];
  unsigned __int8 v6[8] = @"eventType";
  v7[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v6[9] = @"isConservativeFence";
  v7[9] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 91)];
  v6[10] = @"isDriving";
  v7[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 93)];
  v6[11] = @"isEmergencyFence";
  v7[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 88)];
  v6[12] = @"isInVehicle";
  v7[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 92)];
  v6[13] = @"isPedestrian";
  v7[13] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 95)];
  v6[14] = @"isPolygonalFence";
  v7[14] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 89)];
  v6[15] = @"isStatic";
  v7[15] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 94)];
  v6[16] = @"isThrottledFence";
  BOOL v7[16] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 90)];
  v6[17] = @"numAPsFenceBounded";
  int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 104);
  if (v3 < 1)
  {
    uint64_t v4 = 0;
  }
  else if (v3 > 0x14)
  {
    if (v3 <= 0xB4) {
      uint64_t v4 = ((v3 - 21) >> 4) + 5;
    }
    else {
      uint64_t v4 = 1;
    }
  }
  else
  {
    uint64_t v4 = ((v3 - 1) >> 2) + 1;
  }
  v7[17] = +[NSNumber numberWithInt:v4];
  v6[18] = @"numAPsFence";
  v7[18] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 104)];
  v6[19] = @"numAPsTotal";
  v7[19] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 108)];
  v6[20] = @"passcodeLocked";
  v7[20] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 26)];
  v6[21] = @"reachability";
  v7[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  v6[22] = @"sinceLastEvent";
  v7[22] = +[NSNumber numberWithInt:(int)*(double *)(*(void *)(a1 + 32) + 96)];
  v6[23] = @"wifiAvailable";
  v7[23] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 25)];
  return +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:24];
}

void sub_100F5EC90(unsigned char *a1, char a2, char a3, char a4, void *a5)
{
  sub_100F5F228((uint64_t)a1, (uint64_t)__src);
  sub_100F5F2D4((uint64_t)a1, a2, a3, a4, a5);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102306578);
  }
  unint64_t v10 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68292355;
    __int16 v22 = 2082;
    double v23 = "";
    __int16 v24 = 2049;
    *(void *)long long v25 = __src[0];
    *(_WORD *)&_OWORD v25[8] = 2049;
    uint64_t v26 = __src[1];
    *(_WORD *)__int16 v27 = 2049;
    *(void *)&v27[2] = __src[2];
    __int16 v28 = 2049;
    *(void *)uint64_t v29 = __src[3];
    *(_WORD *)&v29[8] = 2049;
    uint64_t v30 = __src[4];
    *(_WORD *)char v31 = 2049;
    *(void *)&v31[2] = __src[5];
    __int16 v32 = 2049;
    uint64_t v33 = __src[6];
    __int16 v34 = 2049;
    uint64_t v35 = __src[9];
    __int16 v36 = 2049;
    uint64_t v37 = __src[7];
    __int16 v38 = 2049;
    uint64_t v39 = __src[8];
    __int16 v40 = 2049;
    uint64_t v41 = __src[10];
    __int16 v42 = 2049;
    uint64_t v43 = __src[11];
    __int16 v44 = 2049;
    uint64_t v45 = __src[12];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,1,\", \"wifiScans\":%{private}lld, \"epnoCalc\":%{private}lld, \"epnoEntry\":%{private}lld, \"epnoExit\":%{private}lld, \"wakes\":%{private}lld, \"assertions\":%{private}lld, \"timers\":%{private}lld, \"gpsDenied\":%{private}lld, \"gpsSessions\":%{private}lld, \"gpsDuration\":\"%{private}.5f\", \"wdogArmed\":%{private}lld, \"wdogFired\":%{private}lld, \"wdogLong\":%{private}lld}", (uint8_t *)&buf, 0x94u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
  }
  uint8x8_t v11 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68291587;
    __int16 v22 = 2082;
    double v23 = "";
    __int16 v24 = 1026;
    *(_DWORD *)long long v25 = LOBYTE(__src[13]);
    *(_WORD *)&unsigned __int8 v25[4] = 1026;
    *(_DWORD *)&v25[6] = BYTE1(__src[13]);
    LOWORD(v26) = 1026;
    *(_DWORD *)((char *)&v26 + 2) = BYTE2(__src[13]);
    HIWORD(v26) = 1026;
    *(_DWORD *)__int16 v27 = BYTE3(__src[13]);
    *(_WORD *)&v27[4] = 1026;
    *(_DWORD *)&v27[6] = BYTE4(__src[13]);
    __int16 v28 = 1026;
    *(_DWORD *)uint64_t v29 = BYTE5(__src[13]);
    *(_WORD *)&v29[4] = 1026;
    *(_DWORD *)&v29[6] = BYTE6(__src[13]);
    LOWORD(v30) = 1025;
    *(_DWORD *)((char *)&v30 + 2) = HIBYTE(__src[13]);
    HIWORD(v30) = 1025;
    *(_DWORD *)char v31 = LOBYTE(__src[14]);
    *(_WORD *)&v31[4] = 1025;
    *(_DWORD *)&v31[6] = BYTE1(__src[14]);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,2,\", \"locEnabled\":%{public}hhd, \"locToggled\":%{public}hhd, \"wifiEnabled\":%{public}hhd, \"wifiToggled\":%{public}hhd, \"airplaneEnabled\":%{public}hhd, \"airplaneToggled\":%{public}hhd, \"anyFences\":%{public}hhd, \"anyFineFences\":%{private}hhd, \"anyLargeFences\":%{private}hhd, \"anyEmergencyFences\":%{private}hhd}", (uint8_t *)&buf, 0x4Eu);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
  }
  unint64_t v12 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68292355;
    __int16 v22 = 2082;
    double v23 = "";
    __int16 v24 = 2049;
    *(void *)long long v25 = __src[15];
    *(_WORD *)&_OWORD v25[8] = 2049;
    uint64_t v26 = __src[16];
    *(_WORD *)__int16 v27 = 2049;
    *(void *)&v27[2] = __src[17];
    __int16 v28 = 2049;
    *(void *)uint64_t v29 = __src[18];
    *(_WORD *)&v29[8] = 2049;
    uint64_t v30 = __src[19];
    *(_WORD *)char v31 = 2049;
    *(void *)&v31[2] = __src[20];
    __int16 v32 = 2049;
    uint64_t v33 = __src[21];
    __int16 v34 = 2049;
    uint64_t v35 = __src[22];
    __int16 v36 = 2049;
    uint64_t v37 = __src[23];
    __int16 v38 = 2049;
    uint64_t v39 = __src[24];
    __int16 v40 = 2049;
    uint64_t v41 = __src[25];
    __int16 v42 = 2049;
    uint64_t v43 = __src[26];
    __int16 v44 = 2049;
    uint64_t v45 = __src[27];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,3,\", \"fences\":%{private}lld, \"fenceAdditions\":%{private}lld, \"fenceRemovals\":%{private}lld, \"fenceEntries\":%{private}lld, \"fenceExits\":%{private}lld, \"handoffFenceEntries\":%{private}lld, \"handoffFenceExits\":%{private}lld, \"locClient\":%{private}lld, \"locGps\":%{private}lld, \"locIndoor\":%{private}lld, \"locWifi2\":%{private}lld, \"locWifi\":%{private}lld, \"locCell\":%{private}lld}", (uint8_t *)&buf, 0x94u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
  }
  uint64_t v13 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68291075;
    __int16 v22 = 2082;
    double v23 = "";
    __int16 v24 = 2049;
    *(void *)long long v25 = __src[28];
    *(_WORD *)&_OWORD v25[8] = 2049;
    uint64_t v26 = __src[29];
    *(_WORD *)__int16 v27 = 2049;
    *(void *)&v27[2] = __src[30];
    __int16 v28 = 2049;
    *(void *)uint64_t v29 = __src[31];
    *(_WORD *)&v29[8] = 2049;
    uint64_t v30 = __src[32];
    *(_WORD *)char v31 = 2049;
    *(void *)&v31[2] = __src[33];
    __int16 v32 = 2049;
    uint64_t v33 = __src[34];
    __int16 v34 = 2049;
    uint64_t v35 = __src[35];
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceMetrics, heartbeat,4,\", \"loiMatchAttempts\":%{private}lld, \"loiMatchErrors\":%{private}lld, \"loiMatchNoMatches\":%{private}lld, \"loiMatchMatches\":%{private}lld, \"loiRadiusMin\":%{private}lld, \"loiRadiusMax\":%{private}lld, \"loiCenterRefinementMin\":%{private}lld, \"loiCenterRefinementMax\":%{private}lld}", (uint8_t *)&buf, 0x62u);
  }
  if (*a1)
  {
    if (!a1[1])
    {
      sub_10096317C();
      double v15 = _NSConcreteStackBlock;
      uint64_t v16 = 3221225472;
      double v17 = sub_100F5F404;
      double v18 = &unk_102306558;
      memcpy(v19, __src, sizeof(v19));
      sub_1009631C8();
      sub_10096317C();
      memcpy(v14, __src, sizeof(v14));
      sub_1009631C8();
    }
  }
}

__n128 sub_100F5F228(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a2 + 48) = v2;
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + 64) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 96) = *(void *)(a1 + 104);
  *(void *)(a2 + 104) = *(void *)(a1 + 112);
  *(_WORD *)(a2 + 112) = *(_WORD *)(a1 + 120);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 208);
  *(void *)(a2 + 216) = *(void *)(a1 + 224);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 304);
  __n128 result = *(__n128 *)(a1 + 320);
  *(__n128 *)(a2 + 272) = result;
  return result;
}

__n128 sub_100F5F2D4(uint64_t a1, char a2, char a3, char a4, void *a5)
{
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)(a1 + 112) = a2;
  *(unsigned char *)(a1 + 113) = 0;
  *(unsigned char *)(a1 + 114) = a3;
  *(unsigned char *)(a1 + 115) = 0;
  *(unsigned char *)(a1 + 116) = a4;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 117) = 0;
  *(unsigned char *)(a1 + 121) = 0;
  uint64_t v7 = (double *)*a5;
  uint64_t v5 = (double *)(a5 + 1);
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    uint64_t v8 = 0;
    do
    {
      double v9 = v6[16];
      if (v9 > 400.0
        || *((unsigned char *)v6 + 220)
        || *((_DWORD *)v6 + 53) == 2
        || *((void *)v6 + 33) != *((void *)v6 + 32)
        || ((_BYTE)v6[24] & 0x20) != 0)
      {
        if (v9 >= 7000.0) {
          *(unsigned char *)(a1 + 120) = 1;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 119) = 1;
      }
      if (((_BYTE)v6[24] & 0x10) != 0) {
        *(unsigned char *)(a1 + 121) = 1;
      }
      unint64_t v10 = (double *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          uint8x8_t v11 = v10;
          unint64_t v10 = *(double **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint8x8_t v11 = (double *)*((void *)v6 + 2);
          BOOL v12 = *(void *)v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      ++v8;
      uint64_t v6 = v11;
    }
    while (v11 != v5);
    *(void *)(a1 + 128) = v8;
    *(unsigned char *)(a1 + 118) = 1;
  }
  *(_OWORD *)(a1 + 216) = 0uLL;
  *(_OWORD *)(a1 + 200) = 0uLL;
  *(_OWORD *)(a1 + 184) = 0uLL;
  *(_OWORD *)(a1 + 168) = 0uLL;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = 0uLL;
  *(_OWORD *)(a1 + 272) = 0uLL;
  *(_OWORD *)(a1 + 288) = 0uLL;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 304) = result;
  *(__n128 *)(a1 + 320) = result;
  return result;
}

NSDictionary *sub_100F5F404(uint64_t a1)
{
  v3[0] = @"wifiScans";
  v4[0] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 32)];
  v3[1] = @"epnoCalculations";
  v4[1] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  _DWORD v3[2] = @"epnoEntryEvents";
  _DWORD v4[2] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 48)];
  v3[3] = @"epnoExitEvents";
  v4[3] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 56)];
  void v3[4] = @"wakes";
  void v4[4] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 64)];
  void v3[5] = @"assertions";
  void v4[5] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 72)];
  void v3[6] = @"setTimers";
  void v4[6] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 80)];
  v3[7] = @"gpsDenied";
  v4[7] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 104)];
  v3[8] = @"gpsSessions";
  v4[8] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 88)];
  v3[9] = @"gpsDuration";
  v4[9] = +[NSNumber numberWithDouble:*(double *)(a1 + 96)];
  v3[10] = @"watchdogsArmed";
  v4[10] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 112)];
  v3[11] = @"watchdogsFired";
  v4[11] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 120)];
  v3[12] = @"watchdogsLong";
  v4[12] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 128)];
  v3[13] = @"locationEnabled";
  v4[13] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 136)];
  v3[14] = @"locationToggled";
  v4[14] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 137)];
  v3[15] = @"wifiEnabled";
  v4[15] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 138)];
  v3[16] = @"wifiToggled";
  void v4[16] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 139)];
  v3[17] = @"airplaneEnabled";
  v4[17] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 140)];
  v3[18] = @"airplaneToggled";
  v4[18] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 141)];
  v3[19] = @"anyFences";
  v4[19] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 142)];
  v3[20] = @"anyFineFences";
  v4[20] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 143)];
  v3[21] = @"anyLargeFences";
  v4[21] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 144)];
  v3[22] = @"anyEmergencyFences";
  v4[22] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 145)];
  v3[23] = @"fences";
  v4[23] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 152)];
  v3[24] = @"fenceAdditions";
  v4[24] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 160)];
  v3[25] = @"fenceRemovals";
  v4[25] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 168)];
  v3[26] = @"fenceEntries";
  v4[26] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 176)];
  v3[27] = @"fenceExits";
  v4[27] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 184)];
  v3[28] = @"fenceHandoffEntries";
  v4[28] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 192)];
  v3[29] = @"fenceHandoffExits";
  v4[29] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 200)];
  v3[30] = @"locationsClient";
  v4[30] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 208)];
  v3[31] = @"locationsGps";
  v4[31] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 216)];
  v3[32] = @"locationsIndoor";
  v4[32] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 224)];
  v3[33] = @"locationsWifi2";
  v4[33] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 232)];
  v3[34] = @"locationsWifi";
  v4[34] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 240)];
  v3[35] = @"locationsCell";
  v4[35] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 248)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:36];
}

NSDictionary *sub_100F5F86C(void *a1)
{
  v3[0] = @"loiMatchAttempts";
  v4[0] = +[NSNumber numberWithUnsignedLongLong:a1[32]];
  v3[1] = @"loiMatchErrors";
  v4[1] = +[NSNumber numberWithUnsignedLongLong:a1[33]];
  _DWORD v3[2] = @"loiMatchNoMatches";
  _DWORD v4[2] = +[NSNumber numberWithUnsignedLongLong:a1[34]];
  v3[3] = @"loiMatchMatches";
  v4[3] = +[NSNumber numberWithUnsignedLongLong:a1[35]];
  void v3[4] = @"loiRadiusMin";
  void v4[4] = +[NSNumber numberWithLongLong:a1[36]];
  void v3[5] = @"loiRadiusMax";
  void v4[5] = +[NSNumber numberWithLongLong:a1[37]];
  void v3[6] = @"loiCenterRefinementMin";
  void v4[6] = +[NSNumber numberWithLongLong:a1[38]];
  v3[7] = @"loiCenterRefinementMax";
  v4[7] = +[NSNumber numberWithLongLong:a1[39]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:8];
}

uint64_t sub_100F5F9BC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5F9CC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5F9DC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5F9EC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5F9FC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FA0C(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FA1C(uint64_t result)
{
  return result;
}

double sub_100F5FA2C(uint64_t a1, double a2)
{
  ++*(void *)(a1 + 72);
  double result = *(double *)(a1 + 80) + a2;
  *(double *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100F5FA48(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FA58(uint64_t result, double a2)
{
  if (a2 > 960.0) {
    ++*(void *)(result + 104);
  }
  return result;
}

uint64_t sub_100F5FA84(uint64_t result, char a2)
{
  *(unsigned char *)(result + 114) = a2;
  *(unsigned char *)(result + 115) = 1;
  return result;
}

uint64_t sub_100F5FA94(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1++*(void *)(result + 16) = a2;
  *(unsigned char *)(result + 117) = 1;
  return result;
}

int64x2_t *sub_100F5FAA4(int64x2_t *result, uint64_t a2)
{
  result[8] = vaddq_s64(result[8], vdupq_n_s64(1uLL));
  result[7].i8[6] = 1;
  double v2 = *(double *)(a2 + 96);
  BOOL v4 = v2 > 400.0 || *(unsigned char *)(a2 + 188) != 0 || *(_DWORD *)(a2 + 180) == 2;
  if (v4 || *(void *)(a2 + 232) != *(void *)(a2 + 224) || (*(unsigned char *)(a2 + 160) & 0x20) != 0)
  {
    if (v2 >= 7000.0) {
      result[7].i8[8] = 1;
    }
  }
  else
  {
    result[7].i8[7] = 1;
  }
  if ((*(unsigned char *)(a2 + 160) & 0x10) != 0) {
    result[7].i8[9] = 1;
  }
  return result;
}

void sub_100F5FB34(uint64_t a1)
{
  ++*(void *)(a1 + 144);
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1)
  {
    *(void *)(a1 + 128) = v1 - 1;
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
    double v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Something went wrong with num fences", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102306578);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceAnalytics::countFenceRemovals(const CLFenceManager_Type::Fence &)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t sub_100F5FCDC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FCEC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FCFC(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FD0C(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FD48(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FD58(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FD68(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FD78(uint64_t result)
{
  return result;
}

uint64_t sub_100F5FD88(uint64_t result)
{
  return result;
}

__n128 sub_100F5FD98(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 232);
  __n128 result = *(__n128 *)(a1 + 248);
  *(__n128 *)(a2 + ++*(void *)(result + 16) = result;
  *(void *)(a2 + ++*(void *)(result + 32) = *(void *)(a1 + 264);
  return result;
}

double sub_100F5FDB4(uint64_t a1)
{
  *(void *)(a1 + 2++*(void *)(result + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 2++*(void *)(result + 48) = 0u;
  *(_OWORD *)(a1 + 2++*(void *)(result + 32) = 0u;
  return result;
}

uint64_t sub_100F5FDC8(_DWORD *a1)
{
  if (qword_102419620 != -1) {
    dispatch_once(&qword_102419620, &stru_102306598);
  }
  double v2 = qword_102419628;
  if (os_log_type_enabled((os_log_t)qword_102419628, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1[10];
    int v4 = a1[11];
    int v5 = a1[12];
    int v6 = a1[13];
    int v7 = a1[14];
    *(_DWORD *)uint64_t buf = 67110144;
    int v11 = v3;
    __int16 v12 = 1024;
    int v13 = v4;
    __int16 v14 = 1024;
    int v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, submitMetrics, miloVsGpsStatus, %d, homeLoiProbabilityPercentage, %u, distanceToFenceBoundary, %d, fenceRadius, %u, gpsHorizontalAccuracy, %d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419620 != -1) {
      dispatch_once(&qword_102419620, &stru_102306598);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLFenceAnalytics::submitMetrics(CLFenceAnalytics::HomeLoiExitMetrics &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return AnalyticsSendEventLazy();
}

NSDictionary *sub_100F6002C(uint64_t a1)
{
  v3[0] = @"miLoVsGpsHomeLoiExitStatus";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 40)];
  v3[1] = @"miLoHomeLoiProbabilityPercentage";
  v4[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 44)];
  _DWORD v3[2] = @"distanceToFenceBoundary";
  _DWORD v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v3[3] = @"fenceRadius";
  v4[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 52)];
  void v3[4] = @"gpsHorizontalAccuracy";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 56)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:5];
}

uint64_t sub_100F6013C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 272);
  if (v1 <= 0x62) {
    *(void *)(result + 272) = v1 + 1;
  }
  return result;
}

uint64_t sub_100F60154(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 280);
  if (v1 <= 0x62) {
    *(void *)(result + 280) = v1 + 1;
  }
  return result;
}

uint64_t sub_100F6016C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 288);
  if (v1 <= 0x62) {
    *(void *)(result + 2++*(void *)(result + 88) = v1 + 1;
  }
  return result;
}

void *sub_100F60184(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result[37];
  if (v3 <= 0x62) {
    result[37] = v3 + 1;
  }
  uint64_t v4 = result[39];
  if (v4 < a2 || v4 == -1) {
    result[39] = a2;
  }
  uint64_t v6 = result[38];
  if (v6 > a2 || v6 == -1) {
    result[38] = a2;
  }
  uint64_t v8 = result[41];
  if (v8 < a3 || v8 == -1) {
    result[41] = a3;
  }
  uint64_t v10 = result[40];
  if (v10 > a3 || v10 == -1) {
    result[40] = a3;
  }
  return result;
}

uint64_t sub_100F601F4(uint64_t a1, uint64_t a2, double *a3, long long *a4, CLMotionActivity *a5, uint64_t a6, uint64_t a7, char a8, double a9, char a10, char a11)
{
  *(double *)a1 = a9;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v20 = *(_OWORD *)a2;
    *(void *)(a1 + ++*(void *)(result + 24) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 8) = v20;
  }
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = sub_100F60554(*(unsigned int *)a3);
  int v21 = sub_100F60704(a2);
  int v22 = *(_DWORD *)(a2 + 168);
  unsigned int v23 = *(_DWORD *)(a2 + 172) - 1;
  if (v23 >= 4) {
    unsigned int v23 = -1;
  }
  *(_DWORD *)(a1 + 36) = v21;
  *(_DWORD *)(a1 + ++*(void *)(result + 40) = v23;
  if (v22 == 1) {
    int v24 = 0;
  }
  else {
    int v24 = -1;
  }
  if (v22 == 2) {
    int v24 = 1;
  }
  *(_DWORD *)(a1 + 44) = v24;
  double v25 = *(double *)(a2 + 88);
  BOOL v26 = v25 <= 0.0 && v21 == 4;
  uint64_t v27 = (int)vcvtpd_s64_f64(v25 * 0.1);
  if (v26) {
    uint64_t v27 = 0;
  }
  *(void *)(a1 + ++*(void *)(result + 48) = v27;
  *(void *)(a1 + ++*(void *)(result + 56) = sub_100F607B8(a2);
  *(_DWORD *)(a1 + ++*(void *)(result + 64) = sub_100F60814(a5);
  long long v28 = *a4;
  long long v29 = a4[1];
  long long v30 = a4[2];
  *(_OWORD *)(a1 + 120) = a4[3];
  *(_OWORD *)(a1 + 104) = v30;
  *(_OWORD *)(a1 + ++*(void *)(result + 88) = v29;
  *(_OWORD *)(a1 + 72) = v28;
  long long v31 = a4[4];
  long long v32 = a4[5];
  long long v33 = a4[6];
  *(void *)(a1 + 184) = *((void *)a4 + 14);
  *(_OWORD *)(a1 + ++*(void *)(result + 168) = v33;
  *(_OWORD *)(a1 + ++*(void *)(result + 152) = v32;
  *(_OWORD *)(a1 + 136) = v31;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)a4;
  *(unsigned char *)(a1 + 193) = a8;
  *(unsigned char *)(a1 + 194) = a10;
  *(unsigned char *)(a1 + 195) = a11;
  double v34 = -1.0;
  double v35 = -1.0;
  if (a9 > 0.0)
  {
    double v36 = a3[7];
    if (v36 > 0.0) {
      double v35 = a9 - v36;
    }
  }
  *(double *)(a1 + 200) = v35;
  *(_DWORD *)(a1 + 208) = sub_100F60880(*((_DWORD *)a3 + 16));
  if (a9 > 0.0)
  {
    double v37 = a3[5];
    if (v37 > 0.0) {
      double v34 = a9 - v37;
    }
  }
  *(double *)(a1 + 2++*(void *)(result + 16) = v34;
  *(_DWORD *)(a1 + 2++*(void *)(result + 24) = sub_100F60880(*((_DWORD *)a3 + 12));
  *(_DWORD *)(a1 + 228) = sub_100F60880(*(_DWORD *)(a6 + 96));
  double v38 = *(double *)(a6 + 20);
  if (v38 >= 0.0)
  {
    if (v38 <= 200.0)
    {
      float v40 = v38 * 0.1;
      uint64_t v39 = (int)vcvtps_s32_f32(v40);
    }
    else if (v38 <= 400.0)
    {
      uint64_t v39 = 21;
    }
    else if (v38 <= 2000.0)
    {
      uint64_t v39 = 22;
    }
    else
    {
      uint64_t v39 = 23;
      if (v38 > 7000.0) {
        uint64_t v39 = 24;
      }
    }
  }
  else
  {
    uint64_t v39 = -1;
  }
  *(void *)(a1 + 2++*(void *)(result + 40) = 0;
  *(void *)(a1 + 2++*(void *)(result + 32) = v39;
  *(void *)(a1 + 2++*(void *)(result + 48) = 0;
  *(void *)(a1 + 2++*(void *)(result + 56) = 0;
  sub_10050FCE4((void *)(a1 + 240), *(const void **)a7, *(void *)(a7 + 8), 0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2));
  *(unsigned char *)(a1 + 2++*(void *)(result + 64) = 0;
  double v41 = sub_100F61304(a1, *(_DWORD *)(a1 + 32), a2);
  if (v41 == -1.0)
  {
    double v42 = *(double *)(a1 + 216);
  }
  else
  {
    *(unsigned char *)(a1 + 2++*(void *)(result + 64) = 1;
    double v42 = a9 - v41;
    if (*(double *)(a1 + 216) < v42) {
      double v42 = *(double *)(a1 + 216);
    }
  }
  *(double *)(a1 + 272) = v42;
  *(double *)(a1 + 280) = sub_1001ABE80((double *)(a6 + 4), a2, (double *)(a1 + 320));
  double v43 = sub_1001ABE80((double *)(a6 + 4), a2, (double *)(a1 + 320));
  *(double *)(a1 + 2++*(void *)(result + 88) = v43 - sub_100044A78(a2);
  *(void *)(a1 + 2++*(void *)(result + 96) = -1;
  uint64_t v44 = *(void *)(a2 + 140);
  *(void *)&long long v45 = (int)v44;
  *((void *)&v45 + 1) = SHIDWORD(v44);
  *(_OWORD *)(a1 + 304) = v45;
  sub_101171D90(a1 + 320);
  return a1;
}

void sub_100F60520(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F60554(uint64_t result)
{
  if ((result - 2) < 2) {
    goto LABEL_4;
  }
  if (result == 1) {
    return result;
  }
  if (result != -1) {
    return 0;
  }
LABEL_4:
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102306578);
  }
  unint64_t v1 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "Event type not valid", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static GeofenceMetric::GeofenceMetricEventType GeofenceMetric::eventTypeFromStatus(const CLFenceManager_Type::FenceStatus)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100F60704(uint64_t a1)
{
  if (*(void *)(a1 + 232) != *(void *)(a1 + 224)) {
    return 4;
  }
  uint64_t v2 = *(void *)(a1 + 160);
  if ((v2 & 0x20) != 0) {
    return 7;
  }
  if ((v2 & 0x80) != 0) {
    return 3;
  }
  if (*(unsigned char *)(a1 + 176)) {
    return 5;
  }
  if ((~(_BYTE)v2 & 5) == 0) {
    return 6;
  }
  double v3 = *(double *)(a1 + 96);
  if (v3 <= 400.0 && *(unsigned char *)(a1 + 188) == 0 && *(_DWORD *)(a1 + 180) != 2) {
    return 0;
  }
  if (v3 >= 7000.0) {
    return 2;
  }
  if (*(unsigned char *)(a1 + 188)) {
    return 8;
  }
  return 1;
}

uint64_t sub_100F607B8(uint64_t a1)
{
  double v2 = sub_100044A78(a1);
  BOOL v3 = sub_100F60704(a1) == 4 && v2 <= 0.0;
  signed int v4 = vcvtpd_s64_f64(v2 * 0.1);
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t sub_100F60814(CLMotionActivity *a1)
{
  if (CLMotionActivity::isStatic(a1)) {
    return 0;
  }
  if (CLMotionActivity::isWalking(a1)) {
    return 1;
  }
  if (CLMotionActivity::isDriving(a1)) {
    return 3;
  }
  if (CLMotionActivity::isInVehicle(a1)) {
    return 2;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100F60880(int a1)
{
  if ((a1 - 1) > 0xC) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_101D98F00[a1 - 1];
  }
}

uint64_t sub_100F608A4(uint64_t a1, uint64_t a2, double *a3, long long *a4, CLMotionActivity *a5, uint64_t a6, uint64_t a7, char a8, double a9, char a10, char a11)
{
  return sub_100F601F4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_100F608B8(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  double v51 = sub_100DCDB7C(a1 + 72, (double *)a1, (double *)(a1 + 168));
  double v50 = sub_100DCDB7C(v2, (double *)a1, (double *)(a1 + 80));
  double v3 = -1.0;
  if (v50 != -1.0)
  {
    double v4 = sub_100DCDB7C(v2, (double *)a1, (double *)(a1 + 88));
    if (v4 == -1.0) {
      double v3 = -1.0;
    }
    else {
      double v3 = v4 - v50;
    }
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102306578);
  }
  int v5 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v6 = *(void **)v6;
    }
    int v7 = *(_DWORD *)(a1 + 32);
    int v8 = *(_DWORD *)(a1 + 36);
    int v9 = *(_DWORD *)(a1 + 40);
    int v10 = *(_DWORD *)(a1 + 44);
    uint64_t v11 = 10 * *(void *)(a1 + 48);
    uint64_t v12 = 10 * *(void *)(a1 + 56);
    int v13 = *(unsigned __int8 *)(a1 + 264);
    uint64_t v14 = *(void *)(a1 + 272);
    uint64_t v16 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 312);
    *(_DWORD *)uint64_t buf = 68291843;
    int v53 = 0;
    __int16 v54 = 2082;
    uint64_t v55 = "";
    __int16 v56 = 2081;
    double v57 = *(double *)&v6;
    __int16 v58 = 1025;
    int v59 = v7;
    __int16 v60 = 1025;
    *(_DWORD *)uint64_t v61 = v8;
    *(_WORD *)&v61[4] = 1025;
    *(_DWORD *)&v61[6] = v9;
    *(_WORD *)long long v62 = 1025;
    *(_DWORD *)&v62[2] = v10;
    *(_WORD *)&v62[6] = 2049;
    *(void *)&v62[8] = v11;
    *(_WORD *)&v62[16] = 2049;
    *(void *)&v62[18] = v12;
    *(_WORD *)&v62[26] = 1025;
    *(_DWORD *)&v62[28] = v13;
    *(_WORD *)char v63 = 2049;
    *(void *)&double v63[2] = v14;
    *(_WORD *)&v63[10] = 2049;
    *(void *)&v63[12] = v16;
    *(_WORD *)uint64_t v64 = 2049;
    *(void *)&v64[2] = v15;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, geofencemetric,1\", \"bundleId\":%{private, location:escape_only}s, \"eventType\":%{private}d, \"fenceType\":%{private}d, \"loiType\":%{private}d, \"envType\":%{private}d, \"radiusMeters\":%{private}lld, \"effectiveRadiusMeters\":%{private}lld, \"didUseWsb\":%{private}hhd, \"timeLatency\":\"%{private}f\", \"totalAPs\":%{private}lld, \"fenceAPs\":%{private}lld}", buf, 0x6Cu);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
  }
  int v17 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    double v18 = *(double *)(a1 + 200);
    int v19 = *(_DWORD *)(a1 + 208);
    uint64_t v20 = *(void *)(a1 + 216);
    int v21 = *(_DWORD *)(a1 + 224);
    int v22 = *(_DWORD *)(a1 + 228);
    uint64_t v23 = *(void *)(a1 + 232);
    uint64_t v24 = *(void *)(a1 + 280);
    uint64_t v25 = *(void *)(a1 + 288);
    uint64_t v26 = 10 * *(void *)(a1 + 296);
    *(_DWORD *)uint64_t buf = 68291331;
    int v53 = 0;
    __int16 v54 = 2082;
    uint64_t v55 = "";
    __int16 v56 = 2049;
    double v57 = v18;
    __int16 v58 = 1025;
    int v59 = v19;
    __int16 v60 = 2049;
    *(void *)uint64_t v61 = v20;
    *(_WORD *)&v61[8] = 1025;
    *(_DWORD *)long long v62 = v21;
    *(_WORD *)&v62[4] = 1025;
    *(_DWORD *)&v62[6] = v22;
    *(_WORD *)&v62[10] = 2049;
    *(void *)&v62[12] = v23;
    *(_WORD *)&v62[20] = 2049;
    *(void *)&v62[22] = v24;
    *(_WORD *)&v62[30] = 2049;
    *(void *)char v63 = v25;
    *(_WORD *)&v63[8] = 2049;
    *(void *)&v63[10] = v26;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, geofencemetric,2\", \"lastEventAge\":\"%{private}f\", \"lastEventProvider\":%{private}d, \"prevLocationAge\":\"%{private}f\", \"prevLocationProvider\":%{private}d, \"locationType\":%{private}d, \"locationAccuracy\":%{private}lld, \"distanceToCenter\":\"%{private}f\", \"signedDistanceLatency\":\"%{private}f\", \"priorSignedDistance\":%{private}lld}", buf, 0x60u);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102306578);
    }
  }
  uint64_t v27 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    double v28 = *(double *)(a1 + 80);
    BOOL v29 = *(double *)(a1 + 112) > v28;
    BOOL v30 = *(double *)(a1 + 120) > v28;
    BOOL v31 = *(double *)(a1 + 144) > v28;
    double v32 = *(double *)(a1 + 160);
    BOOL v33 = *(double *)(a1 + 152) > v28;
    *(_DWORD *)uint64_t buf = 68293379;
    BOOL v34 = v32 > v28;
    BOOL v35 = *(double *)(a1 + 128) > v28;
    double v36 = *(double *)(a1 + 96);
    double v37 = *(double *)(a1 + 104);
    BOOL v38 = *(double *)(a1 + 136) > v28;
    int v39 = *(_DWORD *)(a1 + 64);
    int v40 = *(unsigned __int8 *)(a1 + 194);
    int v41 = *(unsigned __int8 *)(a1 + 195);
    int v42 = *(unsigned __int8 *)(a1 + 192);
    int v43 = *(unsigned __int8 *)(a1 + 193);
    int v53 = 0;
    __int16 v54 = 2082;
    uint64_t v55 = "";
    __int16 v56 = 2049;
    double v57 = v51;
    __int16 v58 = 1025;
    int v59 = v39;
    __int16 v60 = 2049;
    *(double *)uint64_t v61 = v3;
    *(_WORD *)&v61[8] = 2049;
    *(double *)long long v62 = v50;
    *(_WORD *)&v62[8] = 1025;
    *(_DWORD *)&v62[10] = v40;
    *(_WORD *)&v62[14] = 1025;
    *(_DWORD *)&v62[16] = v41;
    *(_WORD *)&v62[20] = 1025;
    *(_DWORD *)&v62[22] = v42;
    *(_WORD *)&v62[26] = 1025;
    *(_DWORD *)&v62[28] = v43;
    *(_WORD *)char v63 = 1025;
    *(_DWORD *)&double v63[2] = v29;
    *(_WORD *)&v63[6] = 1025;
    *(_DWORD *)&v63[8] = v30;
    *(_WORD *)&v63[12] = 1025;
    *(_DWORD *)&v63[14] = v31;
    *(_WORD *)&v63[18] = 1025;
    *(_DWORD *)uint64_t v64 = v33;
    *(_WORD *)&v64[4] = 1025;
    *(_DWORD *)&v64[6] = v34;
    __int16 v65 = 1025;
    BOOL v66 = v35;
    __int16 v67 = 1025;
    BOOL v68 = v38;
    __int16 v69 = 1025;
    BOOL v70 = v36 > v28;
    __int16 v71 = 1025;
    BOOL v72 = v37 > v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"FenceMetric, geofencemetric,3\", \"lastTriggerAge\":\"%{private}f\", \"motionActivity\":%{private}d, \"sleepDuration\":\"%{private}f\", \"awakeDuration\":\"%{private}f\", \"isAfterFirstUnlock\":%{private}hhd, \"isAirplaneModeActive\":%{private}hhd, \"isFreeWake\":%{private}hhd, \"isWifiEnabled\":%{private}hhd, \"rcvdBtConnect\":%{private}hhd, \"rcvdBtDisconnect\":%{private}hhd, \"rcvdEpnoEntryTrigger\":%{private}hhd, \"rcvdEpnoExitTrigger\":%{private}hhd, \"rcvdMotionAlarm\":%{private}hhd, \"rcvdTether\":%{private}hhd, \"rcvdUntether\":%{private}hhd, \"rcvdWifiConnect\":%{private}hhd, \"rcvdWifiDisconnect\":%{private}hhd}", buf, 0x84u);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  sub_10096317C();
  return sub_1009631C8();
}

NSDictionary *sub_100F60DE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = @"apsUsedForEpno";
  v6[0] = +[NSNumber numberWithLongLong:*(void *)(v2 + 304)];
  v5[1] = @"apsUsedForEpnoForThisFence";
  v6[1] = +[NSNumber numberWithLongLong:*(void *)(v2 + 312)];
  _DWORD v5[2] = @"awakeDurationBin";
  _DWORD v6[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v5[3] = @"bundleId";
  double v3 = (void *)(v2 + 8);
  if (*(char *)(v2 + 31) < 0) {
    double v3 = (void *)*v3;
  }
  void v6[3] = +[NSString stringWithUTF8String:v3];
  void v5[4] = @"didUseWsb";
  void v6[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 264)];
  void v5[5] = @"distanceToCenter";
  v6[5] = +[NSNumber numberWithDouble:*(double *)(v2 + 280)];
  void v5[6] = @"effectiveRadiusBin";
  v6[6] = +[NSNumber numberWithLongLong:*(void *)(v2 + 56)];
  v5[7] = @"envType";
  v6[7] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 44)];
  v5[8] = @"eventType";
  unsigned __int8 v6[8] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 32)];
  v5[9] = @"fenceType";
  v6[9] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 36)];
  v5[10] = @"isAfterFirstUnlock";
  v6[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 194)];
  v5[11] = @"isAirplaneModeActive";
  v6[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 195)];
  v5[12] = @"isFreeWake";
  v6[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 192)];
  v5[13] = @"isWifiEnabled";
  v6[13] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 193)];
  v5[14] = @"lastEventAge";
  v6[14] = +[NSNumber numberWithDouble:*(double *)(v2 + 200)];
  v5[15] = @"lastEventProvider";
  v6[15] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 208)];
  void v5[16] = @"lastTriggerAgeBin";
  v6[16] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  v5[17] = @"locationAccuracy";
  v6[17] = +[NSNumber numberWithLongLong:*(void *)(v2 + 232)];
  v5[18] = @"locationProvider";
  v6[18] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 228)];
  v5[19] = @"loiType";
  v6[19] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 40)];
  v5[20] = @"motionActivity";
  v6[20] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 64)];
  v5[21] = @"prevLocationAge";
  v6[21] = +[NSNumber numberWithDouble:*(double *)(v2 + 216)];
  v5[22] = @"prevLocationProvider";
  v6[22] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 224)];
  v5[23] = @"priorSignedDistanceBin";
  v6[23] = +[NSNumber numberWithLongLong:*(void *)(v2 + 296)];
  v5[24] = @"radiusBin";
  void v6[24] = +[NSNumber numberWithLongLong:*(void *)(v2 + 48)];
  v5[25] = @"rcvdBtConnect";
  v6[25] = +[NSNumber numberWithBool:*(double *)(v2 + 112) > *(double *)(v2 + 80)];
  v5[26] = @"rcvdBtDisconnect";
  v6[26] = +[NSNumber numberWithBool:*(double *)(v2 + 120) > *(double *)(v2 + 80)];
  v5[27] = @"rcvdEpnoEntryTrigger";
  v6[27] = +[NSNumber numberWithBool:*(double *)(v2 + 144) > *(double *)(v2 + 80)];
  v5[28] = @"rcvdEpnoExitTrigger";
  v6[28] = +[NSNumber numberWithBool:*(double *)(v2 + 152) > *(double *)(v2 + 80)];
  v5[29] = @"rcvdMotionAlarm";
  v6[29] = +[NSNumber numberWithBool:*(double *)(v2 + 160) > *(double *)(v2 + 80)];
  v5[30] = @"rcvdTether";
  v6[30] = +[NSNumber numberWithBool:*(double *)(v2 + 128) > *(double *)(v2 + 80)];
  v5[31] = @"rcvdUntether";
  v6[31] = +[NSNumber numberWithBool:*(double *)(v2 + 136) > *(double *)(v2 + 80)];
  v5[32] = @"rcvdWifiConnect";
  v6[32] = +[NSNumber numberWithBool:*(double *)(v2 + 96) > *(double *)(v2 + 80)];
  v5[33] = @"rcvdWifiDisconnect";
  v6[33] = +[NSNumber numberWithBool:*(double *)(v2 + 104) > *(double *)(v2 + 80)];
  v5[34] = @"signedDistanceLatency";
  v6[34] = +[NSNumber numberWithDouble:*(double *)(v2 + 288)];
  v5[35] = @"sleepDurationBin";
  v6[35] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  v5[36] = @"timeLatency";
  v6[36] = +[NSNumber numberWithDouble:*(double *)(v2 + 272)];
  v5[37] = @"triggerAge";
  v6[37] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:38];
}

double sub_100F61304(uint64_t a1, int a2, uint64_t a3)
{
  double v3 = -1.0;
  if (*(_DWORD *)(a1 + 36) != 4)
  {
    int v23 = a2 == 0;
    sub_1001ABED0((uint64_t)v25);
    v25[0] = v23;
    uint64_t v6 = *(void *)(a1 + 240);
    uint64_t v5 = *(void *)(a1 + 248);
    if (v6 != v5)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      long long v22 = _Q0;
      uint64_t v21 = *(void *)(a1 + 248);
      do
      {
        if (*(double *)(v6 + 20) <= 180.0)
        {
          if (*(double *)(v6 + 76) <= v3)
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_102306578);
            }
            uint64_t v12 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
            {
              uint64_t v13 = *(void *)(v6 + 76);
              *(_DWORD *)uint64_t buf = 134218240;
              __int16 v90 = *(const char **)&v3;
              __int16 v91 = 2048;
              uint64_t v92 = v13;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Wsb time went backwards. truePriorTime: %.3lf. location.timestamp: %.3lf", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_102306578);
              }
              uint64_t v17 = *(void *)(v6 + 76);
              int v27 = 134218240;
              double v28 = v3;
              __int16 v29 = 2048;
              *(void *)BOOL v30 = v17;
              double v18 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "CFAbsoluteTime GeofenceMetric::estimateTrueEventTime(const GeofenceMetricEventType, const CLFenceManager_Type::Fence &)", "%s\n", v18);
              if (v18 != (char *)buf) {
                free(v18);
              }
            }
          }
          double v14 = sub_1001ABE80((double *)(v6 + 4), a3, (double *)(a1 + 320));
          bzero(&v27, 0x3B0uLL);
          BYTE4(v28) = 1;
          *(_OWORD *)&v30[2] = v22;
          long long v31 = v22;
          long long v32 = v22;
          long long v33 = v22;
          long long v34 = v22;
          long long v35 = v22;
          long long v36 = v22;
          int v37 = 0xFFFF;
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          unint64_t v40 = 0xBFF0000000000000;
          long long v41 = v22;
          long long v42 = v22;
          long long v43 = v22;
          unint64_t v44 = 0xBFF0000000000000;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          int v47 = 0;
          unint64_t v48 = 0xBFF0000000000000;
          int v49 = 0x7FFFFFFF;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v50 = 0;
          char v53 = 0;
          int v54 = 0xFFFF;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          unint64_t v57 = 0xBFF0000000000000;
          unint64_t v58 = 0xBFF0000000000000;
          long long v59 = v22;
          long long v60 = v22;
          unint64_t v62 = 0xBFF0000000000000;
          int v65 = 0;
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          unint64_t v61 = 0xBFF0000000000000;
          unint64_t v66 = 0xBFF0000000000000;
          int v67 = 0x7FFFFFFF;
          char v71 = 0;
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          uint64_t v68 = 0;
          int v72 = 0xFFFF;
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          unint64_t v75 = 0xBFF0000000000000;
          long long v76 = v22;
          long long v77 = v22;
          long long v78 = v22;
          unint64_t v79 = 0xBFF0000000000000;
          int v82 = 0;
          uint64_t v80 = 0;
          uint64_t v81 = 0;
          unint64_t v83 = 0xBFF0000000000000;
          int v84 = 0x7FFFFFFF;
          uint64_t v85 = 0;
          uint64_t v86 = 0;
          char v88 = 0;
          uint64_t v87 = 0;
          sub_1000DBC34(buf);
          char v15 = sub_100043084(v6, v14, (uint64_t)buf, a3, v25, 1, (uint64_t)&v27);
          if (v93) {
            sub_1000DB0A0(v93);
          }
          if ((v15 & 1) == 0)
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_102306578);
            }
            uint64_t v16 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 136315138;
              __int16 v90 = "estimateTrueEventTime";
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s, Failure getting status from location", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_102306578);
              }
              v25[22] = 136315138;
              uint64_t v26 = "estimateTrueEventTime";
              int v19 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "CFAbsoluteTime GeofenceMetric::estimateTrueEventTime(const GeofenceMetricEventType, const CLFenceManager_Type::Fence &)", "%s\n", v19);
              if (v19 != (char *)buf) {
                free(v19);
              }
            }
          }
          uint64_t v5 = v21;
          if (v27 != v23) {
            return v3;
          }
          double v3 = *(double *)(v6 + 76);
        }
        v6 += 156;
      }
      while (v6 != v5);
    }
  }
  return v3;
}

void sub_100F61878(_Unwind_Exception *a1)
{
  if (STACK[0x6B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x6B0]);
  }
  _Unwind_Resume(a1);
}

void sub_100F61898(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100F618C8(id a1)
{
  qword_102419628 = (uint64_t)os_log_create("com.apple.locationd.Utility", "LocationMetrics");
}

uint64_t sub_100F618F8(uint64_t a1)
{
  sub_100103240();
  uint64_t result = sub_10010145C();
  if ((result & 1) == 0)
  {
    if (!*(void *)(a1 + 16)) {
      sub_100DE37F4();
    }
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1023066D0);
    }
    double v3 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering for geomagnetic model updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_1023066D0);
      }
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLInertialOdometryNotifier::GeomagneticModelClient::registerForGeomagneticModelNotification()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return (uint64_t)[*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0 registrationInfo:0];
  }
  return result;
}

void sub_100F61B40(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!*a2)
  {
    *(double *)(a4 + 8) = *(double *)(a3 + 40) * 0.0174532924;
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1023066D0);
    }
    uint64_t v5 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_INFO))
    {
      double v6 = *(double *)(a4 + 8) * 57.2957802;
      *(_DWORD *)uint64_t buf = 134217984;
      double v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received geomagnetic model, declination [deg],%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_1023066D0);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLInertialOdometryNotifier::GeomagneticModelClient::onGeomagneticModelNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &, void *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t sub_100F61D28(uint64_t a1)
{
  sub_100103240();
  uint64_t result = sub_10010145C();
  if ((result & 1) == 0)
  {
    *(void *)(a1 + 8) = 0;
    if (*(void *)(a1 + 16))
    {
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_1023066D0);
      }
      double v3 = qword_1024192E8;
      if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Unregistering for geomagnetic model updates", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192E0 != -1) {
          dispatch_once(&qword_1024192E0, &stru_1023066D0);
        }
        double v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLInertialOdometryNotifier::GeomagneticModelClient::unregisterForGeomagneticModelNotification()", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
      return (uint64_t)[*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
    }
  }
  return result;
}

uint64_t sub_100F61EE4()
{
  if (qword_102482560 != -1) {
    dispatch_once(&qword_102482560, &stru_1023065B8);
  }
  return qword_10248AF98;
}

void sub_100F61F28(id a1)
{
  if (sub_101108E10())
  {
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1023066D0);
    }
    unint64_t v1 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Creating InertialOdometry notifier", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_1023066D0);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLInertialOdometryNotifier *CLInertialOdometryNotifier::instance()_block_invoke", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    operator new();
  }
}

void sub_100F620E0()
{
}

void sub_100F6210C(uint64_t a1)
{
}

void sub_100F62270(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100F622F4(id a1, shared_ptr<CLConnectionMessage> a2)
{
  var0 = (CLConnectionMessage **)a2.var0;
  if (qword_1024192E0 != -1) {
    dispatch_once(&qword_1024192E0, &stru_1023066D0);
  }
  double v3 = qword_1024192E8;
  if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*var0);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1023066D0);
    }
    CLConnectionMessage::name(*var0);
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLInertialOdometryNotifier::CLInertialOdometryNotifier()_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void *sub_100F624D4(uint64_t a1)
{
  *(void *)a1 = off_1023065E8;
  uint64_t v2 = (void *)(a1 + 32);
  *(void *)(a1 + ++*(void *)(result + 32) = &off_102306638;
  dispatch_release(*(dispatch_object_t *)(a1 + 88));
  *(void *)(a1 + ++*(void *)(result + 88) = 0;
  sub_10082C534((CLConnectionClient **)(a1 + 80), 0);
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    sub_100629AA4(a1 + 72, v3);
  }
  sub_101108D0C(v2);

  return sub_1009D1DE4((void *)a1);
}

void *sub_100F6257C(uint64_t a1)
{
  return sub_100F624D4(a1 - 32);
}

void sub_100F62584(uint64_t a1)
{
  sub_100F624D4(a1);

  operator delete();
}

void sub_100F625BC(uint64_t a1)
{
  sub_100F624D4(a1 - 32);

  operator delete();
}

double sub_100F625F8(uint64_t *a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1023066D0);
    }
    uint64_t v3 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", (uint8_t *)&buf, 2u);
    }
    double v4 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_1023066D0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v5 != (char *)&buf) {
        free(v5);
      }
    }
  }
  else
  {
    double v4 = 0.0;
    if (sub_101108AF0((uint64_t)(a1 + 4)))
    {
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_1023066D0);
      }
      uint64_t v8 = qword_1024192E8;
      if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_DEFAULT))
      {
        double v9 = *a3;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Minimum inertial odometry update interval changed to %{public}f", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024192E0 != -1) {
          dispatch_once(&qword_1024192E0, &stru_1023066D0);
        }
        double v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLInertialOdometryNotifier::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v14);
        if (v14 != (char *)&buf) {
          free(v14);
        }
      }
      sub_100A29D64(a1[5], *a3);
      double v10 = *a3;
      uint64_t v11 = a1[11];
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      uint64_t v16 = sub_100F62B44;
      uint64_t v17 = &unk_1022B8660;
      double v18 = a1;
      double v19 = v10;
      dispatch_async(v11, &buf);
      uint64_t v12 = a1[9];
      if (*a3 <= 0.0) {
        sub_100F61D28(v12);
      }
      else {
        sub_100F618F8(v12);
      }
      return *a3;
    }
  }
  return v4;
}

void sub_100F6298C(uint64_t a1, uint64_t a2)
{
  if (qword_1024192E0 != -1) {
    dispatch_once(&qword_1024192E0, &stru_1023066D0);
  }
  uint64_t v3 = qword_1024192E8;
  if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "pong,%{public}u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1023066D0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLInertialOdometryNotifier::visitPong(const CMInertialOdometryReport::Pong *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_100F62B44(uint64_t a1)
{
  v5[0] = CMInertialOdometryUpdateInterval;
  v6[0] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v5[1] = CMPedestrianFenceClientIdentifier;
  v6[1] = [+[NSProcessInfo processInfo] processName];
  int v4 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
  sub_1009EF69C("PedestrianFence/kCLConnectionMessageInertialOdometry", &v2);
  unint64_t v1 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v1) {
    sub_1000DB0A0(v1);
  }
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F62C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F62C84(id a1)
{
  qword_1024192E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_100F62CB4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  *uint64_t v5 = off_102306700;
  void v5[6] = 0;
  sub_100A5D6C0();
}

void sub_100F62D90(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + ++*(void *)(result + 48) = 0;
  if (v3) {
    sub_101A6A9C8(v3);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_100F62DB4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023067D8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallSubscription::onFallNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023067D8);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallSubscription::onFallNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F65AA8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F62F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F62F94(void *a1)
{
  *a1 = off_102306700;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[6];
    a1[6] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_100F63048(void *a1)
{
  sub_100F62F94(a1);

  operator delete();
}

void *sub_100F63080@<X0>(uint64_t a1@<X8>)
{
  v15[0] = off_102306828;
  v15[1] = sub_100F63610;
  v15[2] = 0;
  v15[3] = v15;
  sub_100134750(v16, "kCLConnectionMessageFallStatsAvailable");
  sub_100BF47F8((uint64_t)&v17, (uint64_t)v15);
  uint64_t v12 = off_102306828;
  v13[0] = sub_100F63738;
  v13[1] = 0;
  __int16 v14 = &v12;
  sub_100134750(v18, "kCLConnectionMessageFallStatsSetEnabled");
  sub_100BF47F8((uint64_t)&v19, (uint64_t)&v12);
  v11[0] = off_102306828;
  v11[1] = sub_100F639CC;
  _DWORD v11[2] = 0;
  v11[3] = v11;
  sub_100134750(v20, "kCLConnectionMessageFallStatsGetConfig");
  sub_100BF47F8((uint64_t)&v21, (uint64_t)v11);
  v10[0] = off_102306828;
  v10[1] = sub_100F63B14;
  v10[2] = 0;
  v10[3] = v10;
  sub_100134750(v22, "kCLConnectionMessageFallStatsSendStats");
  sub_100BF47F8((uint64_t)&v23, (uint64_t)v10);
  v9[0] = off_102306828;
  v9[1] = sub_100F63C5C;
  _DWORD v9[2] = 0;
  v9[3] = v9;
  sub_100134750(v24, "kCLConnectionMessageAnomalyDetectionSimulateEvent");
  sub_100BF47F8((uint64_t)&v25, (uint64_t)v9);
  v8[0] = off_102306828;
  v8[1] = sub_100F63D40;
  v8[2] = 0;
  void v8[3] = v8;
  sub_100134750(v26, "kCLConnectionMessageSetHgalCaptureMode");
  sub_100BF47F8((uint64_t)&v27, (uint64_t)v8);
  v7[0] = off_1023068B8;
  v7[1] = sub_100F63E24;
  v7[2] = 0;
  void v7[3] = v7;
  sub_100134750(v28, "kCLConnectionMessageAnomalyEvent");
  sub_100BF47F8((uint64_t)&v29, (uint64_t)v7);
  v6[0] = off_1023068B8;
  v6[1] = sub_100F64320;
  void v6[2] = 0;
  void v6[3] = v6;
  sub_100134750(v30, "kCLConnectionMessageAnomalyEventCompleted");
  sub_100BF47F8((uint64_t)&v31, (uint64_t)v6);
  v5[0] = off_102306828;
  v5[1] = sub_100F646D0;
  void v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v32, "kCLConnectionMessageAnomalyEventCompletedMostRecent");
  sub_100BF47F8((uint64_t)&v33, (uint64_t)v5);
  v4[0] = off_102306828;
  v4[1] = sub_100F64B04;
  _DWORD v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v34, "kCLConnectionMessageAnomalyEventEnabled");
  sub_100BF47F8((uint64_t)&v35, (uint64_t)v4);
  sub_100F66470(a1, (unsigned __int8 *)v16, 10);
  uint64_t v2 = 70;
  do
  {
    sub_100BF4D14(&v15[v2]);
    if (SHIBYTE((&v14)[v2]) < 0) {
      operator delete((void *)v13[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_100BF4D14(v4);
  sub_100BF4D14(v5);
  sub_100BF4D14(v6);
  sub_100BF4D14(v7);
  sub_100BF4D14(v8);
  sub_100BF4D14(v9);
  sub_100BF4D14(v10);
  sub_100BF4D14(v11);
  sub_100BF4D14(&v12);
  return sub_100BF4D14(v15);
}

void sub_100F634F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  for (uint64_t i = 504; i != -56; i -= 56)
    sub_100F64F38(v46 + i);
  sub_100BF4D14(&a10);
  sub_100BF4D14(&a14);
  sub_100BF4D14(&a18);
  sub_100BF4D14(&a22);
  sub_100BF4D14(&a26);
  sub_100BF4D14(&a30);
  sub_100BF4D14(&a34);
  sub_100BF4D14(&a38);
  sub_100BF4D14(&a42);
  sub_100BF4D14(&a46);
  _Unwind_Resume(a1);
}

void sub_100F635C4()
{
}

void sub_100F635D0()
{
}

void sub_100F635DC()
{
}

void sub_100F635E8()
{
}

void sub_100F635F4()
{
}

void sub_100F63600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
}

void sub_100F63610(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = sub_100F64F74(a1);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v6)
  {
    uint64_t v7 = CMAvailable;
    uint64_t v8 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_100F636FC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_100F63738(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  BOOL v30 = *(CLConnectionMessage **)a2;
  uint64_t v31 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = sub_100F64F74(a1);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v6)
  {
    CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    id v8 = [Dictionary objectForKeyedSubscript:CMFallDataCollectionConfigurationKey];
    id v9 = [Dictionary objectForKeyedSubscript:CMFallSetStatsEnabled];
    if (v8) {
      id v9 = v8;
    }
    id v10 = [v9 unsignedIntegerValue];
    char v11 = *(void **)(a1 + 24);
    if (v11)
    {
      [v11 clientName];
    }
    else
    {
      uint64_t v29 = 0;
      *(_OWORD *)long long __p = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      *(_OWORD *)uint64_t v26 = 0u;
      long long v23 = 0u;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)uint64_t v21 = 0u;
      *(_OWORD *)long long v22 = 0u;
      *(_OWORD *)uint64_t v19 = 0u;
      long long v20 = 0u;
      *(_OWORD *)__int16 v18 = 0u;
    }
    sub_1000A84C8((uint64_t)v18);
    if (v25 >= 0) {
      uint64_t v12 = &v24[1];
    }
    else {
      uint64_t v12 = (void **)v24[1];
    }
    int v13 = +[NSString stringWithUTF8String:v12];
    if (SHIBYTE(v28) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v26[0]);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(v24[1]);
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[1]);
    }
    if (SHIBYTE(v22[0]) < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[1]);
    }
    if (SHIBYTE(v19[0]) < 0) {
      operator delete(v18[0]);
    }
    id v14 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLFallNotifier"];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3321888768;
    v16[2] = sub_100F65220;
    void v16[3] = &unk_102306728;
    void v16[4] = v13;
    v16[5] = v10;
    char v15 = *(std::__shared_weak_count **)(a2 + 8);
    v16[6] = *(void *)a2;
    uint64_t v17 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v14 doAsync:v16];
    if (v17) {
      sub_1000DB0A0(v17);
    }
  }
}

void sub_100F6396C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F639CC(uint64_t a1, uint64_t *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = sub_100F64F74(a1);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v6)
  {
    id v7 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLFallNotifier"];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    _DWORD v9[2] = sub_100F65308;
    v9[3] = &unk_102306758;
    id v8 = (std::__shared_weak_count *)a2[1];
    void v9[4] = *a2;
    id v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v7 doAsync:v9];
    if (v10) {
      sub_1000DB0A0(v10);
    }
  }
}

void sub_100F63AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }

  _Unwind_Resume(a1);
}

void sub_100F63B14(uint64_t a1, uint64_t *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = sub_100F64F74(a1);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v6)
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLFallNotifier"];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3321888768;
    _DWORD v9[2] = sub_100F6588C;
    v9[3] = &unk_102306758;
    id v8 = (std::__shared_weak_count *)a2[1];
    void v9[4] = *a2;
    id v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v7 doAsync:v9];
    if (v10) {
      sub_1000DB0A0(v10);
    }
  }
}

void sub_100F63C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }

  _Unwind_Resume(a1);
}

void sub_100F63C5C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  id v7 = *(CLConnectionMessage **)a2;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = sub_100F64F74(a1);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v6) {
    [*(id *)(*(void *)(a1 + 48) + 16) simulateEvent:[*(CLConnectionMessage **)a2 objectForKeyedSubscript:CMAnomalyEventType, v7, v5] unsignedIntValue]];
  }
}

void sub_100F63D18(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1000DB0A0(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100F63D40(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  id v7 = *(CLConnectionMessage **)a2;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = sub_100F64F74(a1);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v6) {
    [*(id *)(*(void *)(a1 + 48) + 16) setHgalCaptureMode:[objc_msgSend((id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2), "objectForKeyedSubscript:", CMHgalCaptureMode, v7, v5) unsignedIntValue]];
  }
}

void sub_100F63DFC(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1000DB0A0(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100F63E24(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(__p, "com.apple.locationd.activity");
  char v7 = sub_1010A4BAC(a1);
  char v8 = v7;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v8 & 1) == 0) {
      goto LABEL_25;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_25;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1023067F8);
  }
  id v9 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    *(_DWORD *)long long __p = 138543875;
    *(void *)&__p[4] = v10;
    *(_WORD *)&__p[12] = 2049;
    *(void *)&__p[14] = a1;
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)&__p[24] = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Anomaly Detection subscription changed, %{public}@, %{private}p, %{public}d", __p, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    long long v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallSubscription::handleRequestAnomalyEvent(BOOL, const CLNameValuePair &)", "%s\n", v32);
    if (v32 != __p) {
      free(v32);
    }
  }
  sub_10009C834(a1);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v12 = *(void **)(v11 + 16);
  if (!a2)
  {
    [v12 unregister:v13 forNotification:1];
    goto LABEL_25;
  }
  [v12 register:v13 forNotification:1 registrationInfo:0];
  id v14 = [(id)sub_1000E9358(a3) objectForKeyedSubscript:CMAnomalyDetectorEvent];
  char v15 = v14;
  if (v14)
  {
    if ([v14 identifier])
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1023067F8);
      }
      uint64_t v16 = qword_1024190F8;
      if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      id v17 = [v15 identifier];
      id v18 = [v15 operatingMode];
      [v15 absoluteTimestamp];
      uint64_t v20 = v19;
      [v15 updateTimestamp];
      uint64_t v22 = v21;
      id v23 = [v15 state];
      id v24 = [v15 response];
      id v25 = [v15 resolution];
      unsigned int v26 = [v15 isAcknowledgement];
      BOOL v27 = [v15 sosState] != 0;
      *(void *)long long __p = 68291587;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(void *)&__p[20] = "upstream";
      __int16 v34 = 2050;
      id v35 = v17;
      __int16 v36 = 2049;
      id v37 = v18;
      __int16 v38 = 2049;
      uint64_t v39 = v20;
      __int16 v40 = 2049;
      uint64_t v41 = v22;
      __int16 v42 = 2049;
      id v43 = v23;
      __int16 v44 = 2049;
      id v45 = v24;
      __int16 v46 = 2049;
      id v47 = v25;
      __int16 v48 = 1026;
      unsigned int v49 = v26;
      __int16 v50 = 1026;
      BOOL v51 = v27;
      long long v28 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly detection subscription request with event\", \"direct"
            "ion\":%{public, location:escape_only}s, \"identifier\":%{public}llu, \"operatingMode\":%{private}ld, \"anoma"
            "ly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}ld, \"response\":%"
            "{private}ld, \"resolution\":%{private}ld, \"isAcknowledgement\":%{public}hhd, \"sosState\":%{public}hhd}";
      uint64_t v29 = v16;
      uint32_t v30 = 110;
    }
    else
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1023067F8);
      }
      uint64_t v31 = qword_1024190F8;
      if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      *(void *)long long __p = 68289026;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      long long v28 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly detection subscription request with no event\"}";
      uint64_t v29 = v31;
      uint32_t v30 = 18;
    }
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, __p, v30);
LABEL_23:
    if (([v15 isAcknowledgement] & 1) == 0) {
      [*(id *)(*(void *)(a1 + 48) + 16) onClientAnomalyEventSubscriptionRequest:v15];
    }
  }
LABEL_25:
}

void sub_100F642C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100F64320(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1023067F8);
  }
  uint64_t v5 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v15 = v6;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received AnomalyEventCompletedUpdate request,client,%@,subscribe,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallSubscription::handleRequestAnomalyEventCompletedUpdate(BOOL, const CLNameValuePair &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (sub_1010A4D3C(a1))
  {
    sub_10009C834(a1);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(v7 + 8);
    char v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:1 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:1];
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v10 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ is not authorized for Fall Detection updates", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1023067F8);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallSubscription::handleRequestAnomalyEventCompletedUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100F64698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F646D0(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1023067F8);
  }
  uint64_t v5 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MessageAnomalyEventCompletedMostRecent message,client,%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    int v19 = 138412290;
    uint64_t v20 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallSubscription::handleMessageAnomalyEventCompletedMostRecent(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1010A4D3C(a1))
  {
    id v7 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLFallNotifier"];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768;
    v15[2] = sub_100F65908;
    v15[3] = &unk_102306758;
    char v8 = (std::__shared_weak_count *)a2[1];
    void v15[4] = *a2;
    __int16 v16 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v7 doAsync:v15];
    if (v16) {
      sub_1000DB0A0(v16);
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%@ is not authorized for Fall Detection updates", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1023067F8);
      }
      uint64_t v13 = *(void *)(a1 + 24);
      int v19 = 138412290;
      uint64_t v20 = v13;
      id v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallSubscription::handleMessageAnomalyEventCompletedMostRecent(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v17 = CMErrorMessage;
    id v18 = &off_1023937E8;
    +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_100F64AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F64B04(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1023067F8);
  }
  uint64_t v5 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MessageAnomalyEventEnabled message,client,%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    int v19 = 138412290;
    uint64_t v20 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallSubscription::handleMessageAnomalyEventEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1010A4D64(a1))
  {
    id v7 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLFallNotifier"];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3321888768;
    v15[2] = sub_100F65A04;
    v15[3] = &unk_102306758;
    char v8 = (std::__shared_weak_count *)a2[1];
    void v15[4] = *a2;
    __int16 v16 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v7 doAsync:v15];
    if (v16) {
      sub_1000DB0A0(v16);
    }
  }
  else
  {
    uint64_t v17 = CMErrorMessage;
    id v18 = &off_1023937E8;
    +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    CLConnectionMessage::sendReply();
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%@ is not authorized for Fall Detection updates", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1023067F8);
      }
      uint64_t v13 = *(void *)(a1 + 24);
      int v19 = 138412290;
      uint64_t v20 = v13;
      id v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallSubscription::handleMessageAnomalyEventEnabled(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_100F64EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100F64F38(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100F64F74(uint64_t a1)
{
  sub_100134750(__p, "com.apple.locationd.activity");
  char v2 = sub_1010A4BAC(a1);
  char v3 = v2;
  if (v16 < 0)
  {
    operator delete(*(void **)__p);
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 138543362;
      *(void *)&__p[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %{public}@ does not have appropriate motion entitlement.", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1023067F8);
      }
      uint64_t v7 = *(void *)(a1 + 24);
      int v13 = 138543362;
      uint64_t v14 = v7;
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLFallSubscription::sanityCheckForFall(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
      if (v8 != __p) {
        free(v8);
      }
    }
    uint64_t v11 = CMErrorMessage;
    uint64_t v12 = &off_1023937B8;
    +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    CLConnectionMessage::sendReply();
    return 0;
  }
  if ((v2 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (sub_100A357C4()) {
    return 1;
  }
  uint64_t v9 = CMErrorMessage;
  uint64_t v10 = &off_1023937D0;
  +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  CLConnectionMessage::sendReply();
  return 0;
}

void sub_100F651FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F65220(uint64_t a1, uint64_t a2)
{
  sub_100A41AB0(a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  BOOL v3 = v2 != 0;
  if ((v2 & 0xFF000000) != 0) {
    uint64_t v4 = v3 | 2;
  }
  else {
    uint64_t v4 = v2 != 0;
  }
  v6[0] = CMReturnCode;
  v7[0] = +[NSNumber numberWithBool:v3];
  v6[1] = CMFallDataCollectionConfigurationKey;
  v7[1] = +[NSNumber numberWithUnsignedInteger:v4];
  +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_100F65308(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 7828);
  uint64_t v4 = *(void *)(a2 + 7816);
  unsigned int v5 = *(_DWORD *)(a2 + 7824);
  int v6 = *(_DWORD *)(a2 + 404);
  int v7 = *(_DWORD *)(a2 + 10468);
  int v8 = *(_DWORD *)(a2 + 10472);
  int v9 = *(_DWORD *)(a2 + 10476);
  int v10 = *(_DWORD *)(a2 + 10480);
  int v11 = *(_DWORD *)(a2 + 10520);
  int v12 = *(_DWORD *)(a2 + 10524);
  int v13 = *(_DWORD *)(a2 + 10528);
  int v37 = *(_DWORD *)(a2 + 10532);
  uint64_t v14 = *(unsigned int *)(a2 + 10536);
  uint64_t v15 = *(unsigned int *)(a2 + 10540);
  uint64_t v16 = *(unsigned int *)(a2 + 10544);
  uint64_t v17 = *(unsigned int *)(a2 + 10548);
  int v18 = *(unsigned __int8 *)(a2 + 10552);
  int v38 = *(unsigned __int8 *)(a2 + 10553);
  int v39 = *(unsigned __int8 *)(a2 + 10554);
  unsigned int v43 = *(unsigned __int8 *)(a2 + 10555);
  unsigned int v44 = *(unsigned __int8 *)(a2 + 10556);
  unsigned int v42 = *(unsigned __int8 *)(a2 + 10557);
  unsigned int v40 = *(unsigned __int8 *)(a2 + 10558);
  v49[0] = CMFallStatsMode;
  v50[0] = +[NSNumber numberWithUnsignedChar:v5];
  v49[1] = CMFallStatsSensorRecordingActive;
  v50[1] = +[NSNumber numberWithUnsignedChar:BYTE1(v5)];
  v49[2] = CMFallStatsSimulateFall;
  v50[2] = +[NSNumber numberWithUnsignedChar:BYTE2(v5)];
  v49[3] = CMFallStatsUserStudyPressureDataCollection;
  void v50[3] = +[NSNumber numberWithUnsignedChar:HIBYTE(v5)];
  v49[4] = CMAnomalyDetectorEnabled;
  v50[4] = +[NSNumber numberWithUnsignedChar:v3];
  v49[5] = CMFallLastReplyAopTimestamp;
  v50[5] = +[NSNumber numberWithUnsignedLongLong:v4];
  uint64_t v41 = +[NSDictionary dictionaryWithObjects:v50 forKeys:v49 count:6];
  v47[0] = CMFallConfigUserAge;
  LODWORD(v19) = v6;
  v48[0] = +[NSNumber numberWithFloat:v19];
  v47[1] = CMFallConfigUserMets;
  v48[1] = +[NSNumber numberWithDouble:*(double *)(a2 + 10560)];
  v47[2] = CMFallImpactAlertThreshold;
  LODWORD(v20) = v7;
  v48[2] = +[NSNumber numberWithFloat:v20];
  v47[3] = CMFallImpactLoggingStatsThreshold;
  LODWORD(v21) = v8;
  v48[3] = +[NSNumber numberWithFloat:v21];
  v47[4] = CMFallImpactLoggingHeartRateThreshold;
  LODWORD(v22) = v9;
  v48[4] = +[NSNumber numberWithFloat:v22];
  v47[5] = CMFallImpactLoggingHighResolutionSensorDataThreshold;
  LODWORD(v23) = v10;
  v48[5] = +[NSNumber numberWithFloat:v23];
  id v24 = +[NSDictionary dictionaryWithObjects:v48 forKeys:v47 count:6];
  v45[0] = CMFallCyclingImpactGravityVarianceThreshold;
  LODWORD(v25) = v11;
  v46[0] = +[NSNumber numberWithFloat:v25];
  v45[1] = CMFallCyclingImpactCrownVarianceThreshold;
  LODWORD(v26) = v12;
  v46[1] = +[NSNumber numberWithFloat:v26];
  v45[2] = CMFallCyclingImpactMaxAbsYThreshold;
  LODWORD(v27) = v13;
  v46[2] = +[NSNumber numberWithFloat:v27];
  v45[3] = CMFallCyclingDistanceTraveledPostImpactThreshold;
  LODWORD(v28) = v37;
  v46[3] = +[NSNumber numberWithFloat:v28];
  v45[4] = CMFallCyclingEpochsDetectedPostImpactThreshold;
  v46[4] = +[NSNumber numberWithInt:v14];
  v45[5] = CMFallOtherWorkoutQuiescenceThresholdLow;
  v46[5] = +[NSNumber numberWithInt:v15];
  v45[6] = CMFallOtherWorkoutQuiescenceThresholdHigh;
  v46[6] = +[NSNumber numberWithInt:v16];
  v45[7] = CMFallOtherWorkoutConsecutiveLongLieThreshold;
  v46[7] = +[NSNumber numberWithInt:v17];
  v45[8] = CMFallOtherWorkoutShouldCancelAlertOnStepsThreshold;
  v46[8] = +[NSNumber numberWithBool:v18 != 0];
  v45[9] = CMFallOtherWorkoutShouldCancelAlertOnStandThreshold;
  v46[9] = +[NSNumber numberWithBool:v38 != 0];
  v45[10] = CMFallOtherWorkoutShouldCancelAlertOnActiveThreshold;
  unsigned char v46[10] = +[NSNumber numberWithBool:v39 != 0];
  v45[11] = CMFallAllDayStateMachineEnabledOverride;
  v46[11] = +[NSNumber numberWithUnsignedChar:v40];
  v45[12] = CMFallCyclingStateMachineEnabledOverride;
  v46[12] = +[NSNumber numberWithUnsignedChar:v42];
  v45[13] = CMFallRefereeOperatingModeOverride;
  v46[13] = +[NSNumber numberWithUnsignedChar:v43];
  v45[14] = CMFallAllDayStateMachineOperatingModeOverride;
  v46[14] = +[NSNumber numberWithUnsignedChar:v44];
  uint64_t v29 = +[NSDictionary dictionaryWithObjects:v46 forKeys:v45 count:15];
  id v30 = objc_alloc((Class)NSDictionary);
  uint64_t v31 = CMReturnCode;
  uint64_t v32 = CMFallConfig;
  uint64_t v33 = CMFallInternalNotifierState;
  __int16 v34 = sub_100A56584(a2);
  id v35 = [v30 initWithObjectsAndKeys:v31, &__kCFBooleanTrue, v32, v41, v33, v34, CMFallInternalMetricState, sub_100A56ED8(), CMFallBehavioralConfig, v24, CMFallWorkoutOverrides, v29, 0];
  return CLConnectionMessage::sendReply();
}

uint64_t sub_100F6588C(uint64_t a1, void *a2)
{
  id v3 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)(a1 + 32))];
  sub_100A41D78(a2, v3);

  return CLConnectionMessage::sendReply();
}

void sub_100F65908(uint64_t a1, uint64_t a2)
{
  sub_100A56E94(a2, (uint64_t)v4);
  if (v5)
  {
    id v2 = objc_alloc((Class)CMAnomalyEvent);
    id v3 = [v2 initWithIdentifier:v5 absoluteTimestamp:v4[13] updateTimestamp:v7 state:v8 response:v11 resolution:v6 sosState:v10 operatingMode:v9];
    uint64_t v12 = CMAnomalyDetectorEvent;
    id v13 = v3;
    +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    CLConnectionMessage::sendReply();
  }
  else
  {
    CLConnectionMessage::sendReply();
  }
}

uint64_t sub_100F65A04()
{
  uint64_t v0 = sub_100A3529C();
  uint64_t v2 = CMAnomalyDetectorEnabled;
  id v3 = +[NSNumber numberWithBool:v0];
  +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
  return CLConnectionMessage::sendReply();
}

void sub_100F65AA8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 1) {
    return;
  }
  if (*(void *)(a4 + 19))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v6 = qword_1024190F8;
    if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    uint64_t v7 = *(void *)(a4 + 19);
    int v8 = *(unsigned __int8 *)(a4 + 149);
    uint64_t v9 = *(void *)(a4 + 166);
    uint64_t v10 = *(void *)(a4 + 158);
    int v11 = *(unsigned __int8 *)(a4 + 13);
    int v12 = *(unsigned __int8 *)(a4 + 156);
    int v13 = *(unsigned __int8 *)(a4 + 157);
    int v14 = *(unsigned __int8 *)(a4 + 190);
    *(_DWORD *)long long buf = 68291331;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v23 = 2082;
    id v24 = "";
    __int16 v25 = 2082;
    double v26 = "downstream";
    __int16 v27 = 2050;
    uint64_t v28 = v7;
    __int16 v29 = 1026;
    int v30 = v8;
    __int16 v31 = 2049;
    uint64_t v32 = v9;
    __int16 v33 = 2049;
    uint64_t v34 = v10;
    __int16 v35 = 1025;
    int v36 = v11;
    __int16 v37 = 1025;
    int v38 = v12;
    __int16 v39 = 1025;
    int v40 = v13;
    __int16 v41 = 1025;
    int v42 = v14;
    uint64_t v15 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly event notification\", \"direction\":%{public, location:"
          "escape_only}s, \"identifier\":%{public}llu, \"operatingMode\":%{public}u, \"anomaly timestamp\":\"%{private}f\""
          ", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{priv"
          "ate}d, \"sosState\":%{private}d}";
    uint64_t v16 = v6;
    uint32_t v17 = 88;
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023067F8);
    }
    uint64_t v18 = qword_1024190F8;
    if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v23 = 2082;
    id v24 = "";
    uint64_t v15 = "{\"msg%{public}.0s\":\"Subscription - Received anomaly event notification with no event (reconnection)\"}";
    uint64_t v16 = v18;
    uint32_t v17 = 18;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
LABEL_12:
  id v19 = [objc_alloc((Class)CMAnomalyEvent) initWithIdentifier:*(void *)(a4 + 19) absoluteTimestamp:*(unsigned __int8 *)(a4 + 13) updateTimestamp:*(unsigned __int8 *)(a4 + 156) state:*(unsigned __int8 *)(a4 + 157) response:*(unsigned __int8 *)(a4 + 190) resolution:*(unsigned __int8 *)(a4 + 149) sosState:*(double *)(a4 + 166) operatingMode:*(double *)(a4 + 158)];
  uint64_t v20 = CMAnomalyDetectorEvent;
  id v21 = v19;
  *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  sub_100F65D30(a1);
  if ([v19 resolution]) {
    sub_100F65DB4(a1);
  }
}

void sub_100F65D30(uint64_t a1)
{
  sub_1000E9420(&off_102306948, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F65D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F65DB4(uint64_t a1)
{
  sub_1000E9420(&off_102306950, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F65E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F65E38()
{
  if (qword_102482588 != -1) {
    dispatch_once(&qword_102482588, &stru_102306788);
  }
  return qword_102482580;
}

void sub_100F65E7C(id a1)
{
  qword_102482580 = (uint64_t)[objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
}

void sub_100F65ED4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F65F04(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

__n128 sub_100F65F34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102306828;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F65F80(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102306828;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F65FB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100F65FB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F65FF8()
{
}

void sub_100F66004(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100F660A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100F660C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023068B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F66114(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023068B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F66144(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_100F6614C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F6618C()
{
}

void sub_100F66198(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100F661F4(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_100F661DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F661F4(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102306918);
    }
    int v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102306918);
      }
    }
    int v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_100F66424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100F66440(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100F66470(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100F664EC(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F664D8(_Unwind_Exception *a1)
{
  sub_100BF4D98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F664EC(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100F66770(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *double v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(result + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100F66860((uint64_t)v25, 0);
  return i;
}

void sub_100F66758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F66860((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100F66770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100F667E8(v8 + 2, a3);
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100F667D0(_Unwind_Exception *a1)
{
  sub_100F66860(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100F667E8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BF4550((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F66844(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F66860(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF4E18((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100F668B8()
{
  sub_100134750(qword_102482568, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482568, (void *)&_mh_execute_header);
}

uint64_t sub_100F66918(uint64_t result, void *a2, long long *a3, int a4, int a5, uint64_t a6, double a7)
{
  *(void *)__n128 result = *a2;
  long long v7 = *a3;
  *(_OWORD *)(result + ++*(void *)(result + 24) = a3[1];
  *(_OWORD *)(result + 8) = v7;
  long long v8 = a3[2];
  long long v9 = a3[3];
  long long v10 = a3[4];
  *(_OWORD *)(result + ++*(void *)(result + 88) = a3[5];
  *(_OWORD *)(result + 72) = v10;
  *(_OWORD *)(result + ++*(void *)(result + 56) = v9;
  *(_OWORD *)(result + ++*(void *)(result + 40) = v8;
  long long v11 = a3[6];
  long long v12 = a3[7];
  long long v13 = a3[8];
  *(_OWORD *)(result + 1++*(void *)(result + 48) = *(long long *)((char *)a3 + 140);
  *(_OWORD *)(result + 136) = v13;
  *(_OWORD *)(result + 120) = v12;
  *(_OWORD *)(result + 104) = v11;
  *(_DWORD *)(result + 1++*(void *)(result + 64) = a4;
  *(_DWORD *)(result + ++*(void *)(result + 168) = a5;
  *(double *)(result + ++*(void *)(result + 176) = a7;
  *(void *)(result + 184) = a6;
  return result;
}

double sub_100F66970(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a2 + 32);
  double result = *(double *)(a2 + 56);
  *(void *)a1 = *(void *)a2;
  long long v7 = *(_OWORD *)((char *)a3 + 140);
  long long v9 = a3[7];
  long long v8 = a3[8];
  *(_OWORD *)(a1 + 104) = a3[6];
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 1++*(void *)(result + 48) = v7;
  long long v11 = a3[4];
  long long v10 = a3[5];
  long long v12 = a3[3];
  *(_OWORD *)(a1 + ++*(void *)(result + 40) = a3[2];
  *(_OWORD *)(a1 + ++*(void *)(result + 56) = v12;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + ++*(void *)(result + 88) = v10;
  long long v13 = a3[1];
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = v13;
  *(_DWORD *)(a1 + 1++*(void *)(result + 64) = v4;
  *(_DWORD *)(a1 + ++*(void *)(result + 168) = v5;
  *(double *)(a1 + ++*(void *)(result + 176) = result;
  *(void *)(a1 + 184) = a4;
  return result;
}

double sub_100F669D4(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 84));
}

void *sub_100F66A00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100134750(a2, (&off_102306958)[*(void *)(a1 + 184) + 1]);
}

uint64_t sub_100F66A1C(uint64_t a1)
{
  CFAbsoluteTimeGetCurrent();
  sub_10010F274((uint64_t)v32);
  uint64_t v2 = sub_100132EFC(v33, (uint64_t)"mac, ", 5);
  sub_100B39278(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v5 = sub_100132EFC(v33, (uint64_t)", lat, ", 7);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + ++*(void *)(result + 16) = 8;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  long long v7 = sub_100132EFC(v33, (uint64_t)", lon, ", 7);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + ++*(void *)(result + 16) = 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  long long v9 = sub_100132EFC(v33, (uint64_t)", alt, ", 7);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  long long v11 = sub_100132EFC(v33, (uint64_t)", acc, ", 7);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  long long v13 = sub_100132EFC(v33, (uint64_t)", vacc, ", 8);
  uint64_t v14 = *v13;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  unint64_t v15 = sub_100132EFC(v33, (uint64_t)", channel, ", 11);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + ++*(void *)(result + 16) = 0;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  float v17 = sub_100132EFC(v33, (uint64_t)", rssi, ", 8);
  uint64_t v18 = *v17;
  *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + ++*(void *)(result + 16) = 0;
  *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  unint64_t v19 = sub_100132EFC(v33, (uint64_t)", locationTime, ", 16);
  uint64_t v20 = *v19;
  *(uint64_t *)((char *)v19 + *(void *)(*v19 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(v20 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  size_t v21 = sub_100132EFC(v33, (uint64_t)", age, ", 7);
  uint64_t v22 = *v21;
  *(uint64_t *)((char *)v21 + *(void *)(*v21 - 24) + ++*(void *)(result + 16) = 4;
  *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(v22 - 24) + 8) & 0xFFFFFEFB | 4;
  unint64_t v23 = (void *)std::ostream::operator<<();
  sub_100132EFC(v23, (uint64_t)"h", 1);
  id v24 = sub_100132EFC(v33, (uint64_t)", scanTime, ", 12);
  uint64_t v25 = *v24;
  *(uint64_t *)((char *)v24 + *(void *)(*v24 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v24 + *(void *)(v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v24 + *(void *)(v25 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v26 = sub_100132EFC(v33, (uint64_t)", LOI, ", 7);
  sub_100F66A00(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v27 = &__p;
  }
  else {
    __int16 v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v26, (uint64_t)v27, v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  *(void *)((char *)v32
  v33[0] = v29;
  if (v34 < 0) {
    operator delete((void *)v33[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100F6715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_100F671BC(double a1)
{
  if (a1 > 7.5 || (double v1 = 5.0, a1 <= 0.0))
  {
    double v1 = 10.0;
    if (a1 > 20.0)
    {
      double v1 = 30.0;
      if (a1 > 40.0)
      {
        if (a1 <= 75.0)
        {
          uint64_t v2 = 0x4049000000000000;
        }
        else
        {
          double v1 = 100.0;
          if (a1 <= 100.0) {
            return v1;
          }
          double v1 = 150.0;
          if (a1 <= 150.0) {
            return v1;
          }
          if (a1 > 250.0)
          {
            double v1 = 600.0;
            if (a1 <= 400.0) {
              return 400.0;
            }
            return v1;
          }
          uint64_t v2 = 0x4069000000000000;
        }
        return *(double *)&v2;
      }
    }
  }
  return v1;
}

uint64_t sub_100F67270(const char *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  *a4 = 0;
  int v10 = strlen(a1);
  if (!sub_100621D58((uint64_t)a1, v10))
  {
    int v28 = strlen(a1);
    unsigned __int8 v29 = sub_100621D20((uint64_t)a1, v28);
    snprintf(__str, 5uLL, "%X%X", v29 >> 4, v29 & 0xF);
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_102306980);
    }
    int v30 = qword_102419478;
    if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__src[0]) = 136380931;
      *(void *)((char *)__src + 4) = a1;
      WORD2(__src[1]) = 2082;
      *(void *)((char *)&__src[1] + 6) = __str;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Accessory,bad checksum for NMEA sentence '%{private}s' - expected %{public}s", (uint8_t *)__src, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(__src, 0x65CuLL);
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_102306980);
    }
    *(_DWORD *)unint64_t v66 = 136380931;
    *(void *)&v66[4] = a1;
    LOWORD(v67[0]) = 2082;
    *(void *)((char *)v67 + 2) = __str;
    __int16 v31 = (double *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n");
    goto LABEL_25;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v12 = sub_1000D3E50();
  double v13 = sub_10016C458();
  size_t v14 = strlen(a1);
  int v15 = sub_1006224A4((uint64_t)v66, a1, v14);
  int v16 = v15;
  if (v15 && v15 != 3)
  {
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_102306980);
    }
    uint64_t v32 = qword_102419478;
    if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Accessory,only GPGGA GPRMC supported", (uint8_t *)__src, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(__src, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_102306980);
      }
      *(_WORD *)__CFStringRef str = 0;
      goto LABEL_24;
    }
    return result;
  }
  if (Current - *(double *)(a2 + 76) > 3.0)
  {
    *(_DWORD *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + ++*(void *)(result + 96) = 0u;
    *(void *)(a2 + 128) = 0;
    *(_OWORD *)(a2 + 136) = 0u;
    *(unsigned char *)(a2 + ++*(void *)(result + 152) = 0;
    *(_DWORD *)a2 = 0xFFFF;
    *(_OWORD *)(a2 + 4) = 0u;
    *(_OWORD *)(a2 + 20) = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a2 + 36) = _Q0;
    *(_OWORD *)(a2 + 52) = _Q0;
    *(_OWORD *)(a2 + 68) = _Q0;
    *(_DWORD *)(a2 + 84) = 0;
    *(void *)(a2 + ++*(void *)(result + 88) = 0xBFF0000000000000;
    *(void *)(a2 + 1++*(void *)(result + 16) = 0xBFF0000000000000;
    *(_DWORD *)(a2 + 1++*(void *)(result + 24) = 0x7FFFFFFF;
    sub_1000DBC34(__src);
    memcpy((void *)a3, __src, 0x201uLL);
    long long v22 = v70;
    long long v70 = 0u;
    unint64_t v23 = *(std::__shared_weak_count **)(a3 + 528);
    *(_OWORD *)(a3 + 520) = v22;
    if (v23)
    {
      sub_1000DB0A0(v23);
      id v24 = (std::__shared_weak_count *)*((void *)&v70 + 1);
      long long v25 = v76[0];
      *(_OWORD *)(a3 + 600) = v75;
      *(_OWORD *)(a3 + 6++*(void *)(result + 16) = v25;
      *(void *)(a3 + 629) = *(void *)((char *)v76 + 13);
      long long v26 = v72;
      *(_OWORD *)(a3 + 536) = v71;
      *(_OWORD *)(a3 + 552) = v26;
      long long v27 = v74;
      *(_OWORD *)(a3 + 568) = v73;
      *(_OWORD *)(a3 + 584) = v27;
      if (v24) {
        sub_1000DB0A0(v24);
      }
    }
    else
    {
      long long v34 = v76[0];
      *(_OWORD *)(a3 + 600) = v75;
      *(_OWORD *)(a3 + 6++*(void *)(result + 16) = v34;
      *(void *)(a3 + 629) = *(void *)((char *)v76 + 13);
      long long v35 = v72;
      *(_OWORD *)(a3 + 536) = v71;
      *(_OWORD *)(a3 + 552) = v35;
      long long v36 = v74;
      *(_OWORD *)(a3 + 568) = v73;
      *(_OWORD *)(a3 + 584) = v36;
    }
  }
  if (v16 != 3)
  {
    if (!v16) {
      sub_100F680EC((uint64_t)v66, a2, a3, (uint64_t)&unk_102482590, a4);
    }
    return 0;
  }
  uint64_t result = sub_100622498((uint64_t)v66, 1u);
  if (!result) {
    return result;
  }
  uint64_t result = sub_100622498((uint64_t)v66, 0x40u);
  if (!result) {
    return result;
  }
  uint64_t result = sub_100622498((uint64_t)v66, 4u);
  if (!result) {
    return result;
  }
  uint64_t result = sub_100622498((uint64_t)v66, 8u);
  if (!result) {
    return result;
  }
  uint64_t result = sub_100622498((uint64_t)v66, 2u);
  if (!result) {
    return result;
  }
  if (v67[0] != 88 && v67[0] != 65) {
    return 0;
  }
  if (sub_100622498((uint64_t)v66, 0x200u) && v68[13] == 78)
  {
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_102306980);
    }
    __int16 v37 = qword_102419478;
    if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Accessory,GPRMC, invalid mode indicator", (uint8_t *)__src, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(__src, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_102306980);
      }
      *(_WORD *)__CFStringRef str = 0;
LABEL_24:
      __int16 v31 = (double *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n");
LABEL_25:
      if (v31 != __src) {
        free(v31);
      }
      return 0;
    }
    return result;
  }
  if (qword_10248259C != *(void *)v66 || vabds_f32(*(float *)&dword_1024825A4, *(float *)&v66[8]) > 0.001)
  {
    qword_10248259C = *(void *)v66;
    dword_1024825A4 = *(_DWORD *)&v66[8];
    double v39 = sub_1006223B8((uint64_t)&v67[1]);
    double v40 = sub_1006223B8((uint64_t)v68);
    __int16 v41 = [+[NSCalendar currentCalendar](NSCalendar, "currentCalendar") components:252 fromDate:+[NSDate date]];
    [(NSDateComponents *)v41 setYear:v68[10] + 2000];
    [(NSDateComponents *)v41 setMonth:v68[9]];
    [(NSDateComponents *)v41 setDay:v68[8]];
    [(NSDateComponents *)v41 setHour:*(int *)v66];
    [(NSDateComponents *)v41 setMinute:*(int *)&v66[4]];
    [(NSDateComponents *)v41 setSecond:(uint64_t)*(float *)&v66[8]];
    float v42 = *(float *)&v66[8];
    NSInteger v43 = [(NSDateComponents *)v41 second];
    [(NSDateComponents *)v41 setTimeZone:+[NSTimeZone timeZoneForSecondsFromGMT:0]];
    [(NSDate *)[+[NSCalendar currentCalendar] dateFromComponents:v41] timeIntervalSinceReferenceDate];
    double v45 = v44;
    if (sub_1000EF668(v39, v40))
    {
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_102306980);
      }
      __int16 v46 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__src[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,null island,not allowed", (uint8_t *)__src, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(__src, 0x65CuLL);
        if (qword_102419470 != -1) {
          dispatch_once(&qword_102419470, &stru_102306980);
        }
        *(_WORD *)__CFStringRef str = 0;
        goto LABEL_24;
      }
      return result;
    }
    double v47 = v45 + (float)(v42 - (float)v43);
    if (v67[0] == 88) {
      int v48 = 2;
    }
    else {
      int v48 = 1;
    }
    *(_DWORD *)(a2 + 1++*(void *)(result + 32) = v48;
    if (a5 && !sub_100733F54(a5, 3, v48, 1, v39, v40, v47))
    {
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_102306980);
      }
      BOOL v51 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__src[0]) = 134349056;
        *(double *)((char *)__src + 4) = v47;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "GPRMC NMEA Screening failed,dataAbsTimeStamp, %{public}.1lf", (uint8_t *)__src, 0xCu);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(__src, 0x65CuLL);
        if (qword_102419470 != -1) {
          dispatch_once(&qword_102419470, &stru_102306980);
        }
        *(_DWORD *)__CFStringRef str = 134349056;
        *(double *)uint64_t v63 = v47;
        goto LABEL_24;
      }
      return result;
    }
    *(double *)(a2 + 76) = Current;
    *(double *)(a2 + 4) = v39;
    *(double *)(a2 + 12) = v40;
    if (sub_100622498((uint64_t)v66, 0x10u))
    {
      double v49 = 0.277777778 * (1.852 * ((double)v68[6] / 10.0));
      *(double *)(a2 + 44) = v49;
      if (v49 < 0.0 || v49 > 600.0)
      {
        if (qword_102419470 != -1) {
          dispatch_once(&qword_102419470, &stru_102306980);
        }
        uint64_t v52 = qword_102419478;
        if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = *(void *)(a2 + 44);
          LODWORD(__src[0]) = 134283521;
          *(void *)((char *)__src + 4) = v53;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Invalid speed,%{private}.3lf", (uint8_t *)__src, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_102419470 != -1) {
            dispatch_once(&qword_102419470, &stru_102306980);
          }
          uint64_t v58 = *(void *)(a2 + 44);
          *(_DWORD *)__CFStringRef str = 134283521;
          *(void *)uint64_t v63 = v58;
          long long v59 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n", v59);
          if (v59 != (char *)__src) {
            free(v59);
          }
        }
        *(void *)(a2 + 44) = 0xBFF0000000000000;
        double v50 = -1.0;
      }
      else
      {
        double v50 = 0.2;
      }
      *(double *)(a2 + 52) = v50;
    }
    if (sub_100622498((uint64_t)v66, 0x20u))
    {
      double v54 = (double)v68[7] / 10.0;
      *(double *)(a2 + 60) = v54;
      if (v54 < 0.0 || v54 >= 360.0)
      {
        if (qword_102419470 != -1) {
          dispatch_once(&qword_102419470, &stru_102306980);
        }
        uint64_t v55 = qword_102419478;
        if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v56 = *(void *)(a2 + 60);
          LODWORD(__src[0]) = 134283521;
          *(void *)((char *)__src + 4) = v56;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Invalid course,%{private}.3lf", (uint8_t *)__src, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_102419470 != -1) {
            dispatch_once(&qword_102419470, &stru_102306980);
          }
          uint64_t v60 = *(void *)(a2 + 60);
          *(_DWORD *)__CFStringRef str = 134283521;
          *(void *)uint64_t v63 = v60;
          unint64_t v61 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &, CLNmeaScreener *)", "%s\n", v61);
          if (v61 != (char *)__src) {
            free(v61);
          }
        }
        *(void *)(a2 + 60) = 0xBFF0000000000000;
LABEL_106:
        *(double *)(a3 + ++*(void *)(result + 24) = v47;
        *(double *)(a3 + ++*(void *)(result + 32) = v12;
        *(double *)(a3 + 344) = v13;
        *(_DWORD *)(a2 + 84) = 99;
        if (*(double *)(a2 + 20) <= 0.0) {
          *(void *)(a2 + 20) = 0x4024000000000000;
        }
        return 1;
      }
    }
    else
    {
      double v54 = *(double *)(a2 + 60);
    }
    double v57 = *(double *)(a2 + 44);
    if (v57 >= 0.0 && v54 >= 0.0) {
      *(double *)(a2 + 68) = sub_1004BF70C(v57);
    }
    goto LABEL_106;
  }
  if (qword_102419470 != -1) {
    dispatch_once(&qword_102419470, &stru_102306980);
  }
  int v38 = qword_102419478;
  if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__src[0]) = 67109632;
    HIDWORD(__src[0]) = *(_DWORD *)v66;
    LOWORD(__src[1]) = 1024;
    *(_DWORD *)((char *)&__src[1] + 2) = *(_DWORD *)&v66[4];
    HIWORD(__src[1]) = 2048;
    __src[2] = *(float *)&v66[8];
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,repeated GPRMC timestamp at,hhmmss,%02d%02d%02.1f", (uint8_t *)__src, 0x18u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(__src, 0x65CuLL);
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_102306980);
    }
    *(_DWORD *)__CFStringRef str = 67109632;
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v66;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = *(_DWORD *)&v66[4];
    __int16 v64 = 2048;
    double v65 = *(float *)&v66[8];
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_100F680EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *a5 = 0;
  uint64_t result = sub_100622498(a1, 1u);
  if (result)
  {
    uint64_t result = sub_100622498(a1, 8u);
    if (result)
    {
      if (*(int *)(a1 + 64) < 1) {
        return 0;
      }
      uint64_t result = sub_100622498(a1, 2u);
      if (result)
      {
        uint64_t result = sub_100622498(a1, 4u);
        if (result)
        {
          if (*(_DWORD *)a4 == *(_DWORD *)a1
            && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a1 + 4)
            && vabds_f32(*(float *)(a4 + 8), *(float *)(a1 + 8)) <= 0.001)
          {
            if (qword_102419470 != -1) {
              dispatch_once(&qword_102419470, &stru_102306980);
            }
            long long v11 = qword_102419478;
            if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
            {
              int v12 = *(_DWORD *)a1;
              int v13 = *(_DWORD *)(a1 + 4);
              double v14 = *(float *)(a1 + 8);
              *(_DWORD *)long long buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v12;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v13;
              __int16 v29 = 2048;
              double v30 = v14;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,repeated GPGGA timestamp at,hhmmss,%02d%02d%02.1f", buf, 0x18u);
            }
            uint64_t result = sub_10013D1A0(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419470 == -1)
              {
LABEL_23:
                long long v22 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL extractLocationInfoFromGga(const CLNmeaGGA &, CLDaemonLocation &, CLDaemonLocationPrivate &, BOOL, CLNmeaTimestamp &, CLNmeaGpsFixQuality &)", "%s\n", v22);
                if (v22 != buf) {
                  free(v22);
                }
                return 0;
              }
LABEL_45:
              dispatch_once(&qword_102419470, &stru_102306980);
              goto LABEL_23;
            }
          }
          else
          {
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            double v16 = sub_1000D3E50();
            double v17 = sub_10016C458();
            double v18 = sub_1006223B8(a1 + 16);
            double v19 = sub_1006223B8(a1 + 40);
            *a5 = *(_DWORD *)(a1 + 64);
            uint64_t v20 = *(void *)a1;
            *(_DWORD *)(a4 + 8) = *(_DWORD *)(a1 + 8);
            *(void *)a4 = v20;
            *(CFAbsoluteTime *)(a2 + 76) = Current;
            *(double *)(a3 + ++*(void *)(result + 32) = v16;
            *(double *)(a3 + 344) = v17;
            *(double *)(a2 + 4) = v18;
            *(double *)(a2 + 12) = v19;
            *(_DWORD *)(a2 + 1++*(void *)(result + 32) = 1;
            if (sub_1000EF668(v18, v19))
            {
              if (qword_102419470 != -1) {
                dispatch_once(&qword_102419470, &stru_102306980);
              }
              size_t v21 = qword_102419478;
              if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning Accessory,null island,not allowed", buf, 2u);
              }
              uint64_t result = sub_10013D1A0(115, 2);
              if (result)
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419470 == -1) {
                  goto LABEL_23;
                }
                goto LABEL_45;
              }
            }
            else
            {
              *(_DWORD *)(a2 + 84) = 99;
              if (sub_100622498(a1, 0x40u))
              {
                double v23 = (double)*(int *)(a1 + 76) / 10.0;
                *(double *)(a2 + 28) = v23;
              }
              else
              {
                double v23 = *(double *)(a2 + 28);
              }
              if (sub_1000F0E28(v23))
              {
                if (sub_100622498(a1, 0x20u))
                {
                  *(double *)long long buf = (double)*(int *)(a1 + 72) / 10.0;
                  double v24 = sub_100F68A6C((double *)buf);
                }
                else
                {
                  double v24 = 10.0;
                }
                *(double *)(a2 + 20) = v24;
                *(double *)(a2 + 36) = v24 * 1.9;
                return 1;
              }
              else
              {
                if (qword_102419470 != -1) {
                  dispatch_once(&qword_102419470, &stru_102306980);
                }
                long long v25 = qword_102419478;
                if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v26 = *(void *)(a2 + 28);
                  *(_DWORD *)long long buf = 134283521;
                  *(void *)&uint8_t buf[4] = v26;
                  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Accessory,invalid altitude,%{private}.3lf", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419470 != -1) {
                    dispatch_once(&qword_102419470, &stru_102306980);
                  }
                  long long v27 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL extractLocationInfoFromGga(const CLNmeaGGA &, CLDaemonLocation &, CLDaemonLocationPrivate &, BOOL, CLNmeaTimestamp &, CLNmeaGpsFixQuality &)", "%s\n", v27);
                  if (v27 != buf) {
                    free(v27);
                  }
                }
                uint64_t result = 0;
                *(void *)(a2 + 28) = 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100F686B4(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  if (result)
  {
    long long v7 = (const char *)result;
    int v8 = strlen((const char *)result);
    if (!sub_100621D58((uint64_t)v7, v8))
    {
      int v12 = strlen(v7);
      unsigned __int8 v13 = sub_100621D20((uint64_t)v7, v12);
      snprintf(__str, 5uLL, "%X%X", v13 >> 4, v13 & 0xF);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_102306980);
      }
      double v14 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136380931;
        size_t v21 = v7;
        __int16 v22 = 2082;
        double v23 = __str;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Accessory,bad checksum for NMEA sentence '%{private}s' - expected %{public}s", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_102306980);
      }
      int v16 = 136380931;
      double v17 = v7;
      __int16 v18 = 2082;
      double v19 = __str;
      long long v11 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNmeaLocationGga(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &)", "%s\n");
LABEL_23:
      if (v11 != buf) {
        free(v11);
      }
      return 0;
    }
    size_t v9 = strlen(v7);
    if (sub_1006224A4((uint64_t)&v16, v7, v9))
    {
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_102306980);
      }
      int v10 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Accessory,only GPGGA supported", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419470 != -1) {
          dispatch_once(&qword_102419470, &stru_102306980);
        }
        *(_WORD *)__CFStringRef str = 0;
        long long v11 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNmeaLocationGga(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &, CLNmeaGpsFixQuality &)", "%s\n");
        goto LABEL_23;
      }
    }
    else
    {
      return sub_100F680EC((uint64_t)&v16, a2, a3, (uint64_t)&unk_1024825A8, a4);
    }
  }
  return result;
}

void sub_100F68A3C(id a1)
{
  qword_102419478 = (uint64_t)os_log_create("com.apple.locationd.Position", "NMEA");
}

double sub_100F68A6C(double *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482610, memory_order_acquire) & 1) == 0)
  {
    int v5 = a1;
    int v6 = __cxa_guard_acquire(&qword_102482610);
    a1 = v5;
    if (v6)
    {
      qword_1024825B8 = (uint64_t)off_1022B2000;
      xmmword_1024825C8 = 0u;
      unk_1024825D8 = 0u;
      xmmword_1024825E8 = 0u;
      qword_102482608 = 0;
      qword_102482600 = 0;
      qword_1024825F8 = (uint64_t)&qword_102482600;
      dword_1024825C0 = 0;
      __cxa_atexit((void (*)(void *))sub_100419F34, &qword_1024825B8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102482610);
      a1 = v5;
    }
  }
  uint64_t v8 = 0x4024000000000000;
  if (*a1 > 0.0)
  {
    double v1 = *a1 * 7.0;
    uint64_t v8 = *(void *)&v1;
    if (v1 >= 5.0)
    {
      uint64_t v2 = 0x4049000000000000;
      if (v1 <= 50.0) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v2 = 0x4014000000000000;
    }
    uint64_t v8 = v2;
  }
LABEL_7:
  uint64_t v7 = 0;
  sub_10007EEB4((uint64_t)&qword_1024825B8, (double *)&v8);
  if (sub_10007EDE0(&qword_1024825B8, 2, &v7)) {
    unint64_t v3 = (double *)&v7;
  }
  else {
    unint64_t v3 = (double *)&v8;
  }
  return sub_100F671BC(*v3);
}

uint64_t sub_100F691BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  int v4 = &OBJC_IVAR___CLHidManager__delegate;
  int v5 = &OBJC_IVAR___CLHidManager__delegate;
  int v6 = &OBJC_IVAR___CLHidManager__delegate;
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v7 = 0;
    unsigned int v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v10 == -1 || v10 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v11 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10 + 1;
      v9 |= (unint64_t)(v11 & 0x7F) << v7;
      if ((v11 & 0x80) == 0) {
        goto LABEL_12;
      }
      v7 += 7;
      BOOL v12 = v8++ >= 9;
      if (v12)
      {
        unint64_t v9 = 0;
        int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v9 = 0;
    }
LABEL_14:
    if (v13 || (v9 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v9 >> 3))
    {
      case 1u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 8u;
        while (1)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
          v17 |= (unint64_t)(v19 & 0x7F) << v15;
          if ((v19 & 0x80) == 0) {
            goto LABEL_81;
          }
          v15 += 7;
          BOOL v12 = v16++ >= 9;
          if (v12)
          {
            LODWORD(v17) = 0;
            goto LABEL_83;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_81:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_83:
        uint64_t v53 = v5[670];
        goto LABEL_112;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 0x40u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v17 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              BOOL v12 = v22++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_87:
        uint64_t v53 = v6[671];
        goto LABEL_112;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 0x10u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v17 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              BOOL v12 = v26++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_91:
        uint64_t v53 = 36;
        goto LABEL_112;
      case 5u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 2u;
        while (2)
        {
          unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 == -1 || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
            v17 |= (unint64_t)(v32 & 0x7F) << v29;
            if (v32 < 0)
            {
              v29 += 7;
              BOOL v12 = v30++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_95:
        uint64_t v53 = 12;
        goto LABEL_112;
      case 6u:
        __int16 v33 = v4;
        long long v34 = v6;
        long long v35 = v5;
        long long v36 = objc_alloc_init(ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 24) = v36;
        if PBReaderPlaceMark() && (sub_100F95DD8((uint64_t)v36, a2))
        {
          PBReaderRecallMark();
          int v5 = v35;
          int v6 = v34;
          int v4 = v33;
LABEL_113:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 7u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 0x80u;
        while (2)
        {
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1 || v39 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v17 |= (unint64_t)(v40 & 0x7F) << v37;
            if (v40 < 0)
            {
              v37 += 7;
              BOOL v12 = v38++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_99:
        uint64_t v53 = 48;
        goto LABEL_112;
      case 8u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 1u;
        while (2)
        {
          unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v43 == -1 || v43 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
            v17 |= (unint64_t)(v44 & 0x7F) << v41;
            if (v44 < 0)
            {
              v41 += 7;
              BOOL v12 = v42++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_103:
        uint64_t v53 = 8;
        goto LABEL_112;
      case 9u:
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 4u;
        while (2)
        {
          unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 == -1 || v47 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 1;
            v17 |= (unint64_t)(v48 & 0x7F) << v45;
            if (v48 < 0)
            {
              v45 += 7;
              BOOL v12 = v46++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_107:
        uint64_t v53 = 16;
        goto LABEL_112;
      case 0xAu:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + v4[669]) |= 0x20u;
        while (2)
        {
          unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 == -1 || v51 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
            v17 |= (unint64_t)(v52 & 0x7F) << v49;
            if (v52 < 0)
            {
              v49 += 7;
              BOOL v12 = v50++ >= 9;
              if (v12)
              {
                LODWORD(v17) = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_111:
        uint64_t v53 = 40;
LABEL_112:
        *(_DWORD *)(a1 + v53) = v17;
        goto LABEL_113;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_113;
    }
  }
}

uint64_t sub_100F6B04C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    int v4 = &OBJC_IVAR___CLHidManager__delegate;
    int v5 = &OBJC_IVAR___CLHidManager__delegate;
    int v6 = &OBJC_IVAR___CLHidManager__delegate;
    char v7 = &OBJC_IVAR___CLHidManager__delegate;
    unsigned int v8 = &OBJC_IVAR___CLHidManager__delegate;
    unint64_t v9 = &OBJC_IVAR___CLHidManager__delegate;
    unint64_t v10 = &OBJC_IVAR___CLHidManager__delegate;
    char v11 = &OBJC_IVAR___CLHidManager__delegate;
    BOOL v12 = &OBJC_IVAR___CLHidManager__delegate;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + v4[679]) |= 0x8000u;
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = v5[680];
          goto LABEL_151;
        case 2u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + v4[679]) |= 0x100000u;
          while (2)
          {
            uint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v34 = v33 + 1;
            if (v33 == -1 || v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                BOOL v19 = v31++ >= 9;
                if (v19)
                {
                  LODWORD(v++*(void *)(result + 32) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v++*(void *)(result + 32) = 0;
          }
LABEL_103:
          uint64_t v68 = v6[681];
          goto LABEL_116;
        case 3u:
          *(_DWORD *)(a1 + v4[679]) |= 2u;
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = v7[682];
          goto LABEL_151;
        case 4u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(_DWORD *)(a1 + v4[679]) |= 0x1000u;
          while (2)
          {
            uint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v19 = v38++ >= 9;
                if (v19)
                {
                  uint64_t v39 = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v39 = 0;
          }
LABEL_107:
          *(void *)(a1 + v8[683]) = v39;
          continue;
        case 5u:
          *(_DWORD *)(a1 + v4[679]) |= 0x400u;
          unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = v9[684];
          goto LABEL_151;
        case 6u:
          *(_DWORD *)(a1 + v4[679]) |= 0x100u;
          unint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = v10[685];
          goto LABEL_151;
        case 7u:
          *(_DWORD *)(a1 + v4[679]) |= 0x200u;
          unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = v11[686];
          goto LABEL_151;
        case 8u:
          *(_DWORD *)(a1 + v4[679]) |= 0x40u;
          unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = v12[687];
          goto LABEL_151;
        case 9u:
          *(_DWORD *)(a1 + v4[679]) |= 0x10u;
          unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 40;
          goto LABEL_151;
        case 0xAu:
          *(_DWORD *)(a1 + v4[679]) |= 0x10000u;
          unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 136;
          goto LABEL_151;
        case 0xBu:
          *(_DWORD *)(a1 + v4[679]) |= 0x2000u;
          unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 112;
          goto LABEL_151;
        case 0xCu:
          *(_DWORD *)(a1 + v4[679]) |= 4u;
          unint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 24;
          goto LABEL_151;
        case 0xDu:
          *(_DWORD *)(a1 + v4[679]) |= 1u;
          unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 8;
          goto LABEL_151;
        case 0xEu:
          *(_DWORD *)(a1 + v4[679]) |= 0x800u;
          unint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 96;
          goto LABEL_151;
        case 0xFu:
          *(_DWORD *)(a1 + v4[679]) |= 0x80u;
          unint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 64;
          goto LABEL_151;
        case 0x10u:
          *(_DWORD *)(a1 + v4[679]) |= 0x20u;
          unint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 48;
          goto LABEL_151;
        case 0x11u:
          *(_DWORD *)(a1 + v4[679]) |= 0x20000u;
          unint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 144;
          goto LABEL_151;
        case 0x12u:
          *(_DWORD *)(a1 + v4[679]) |= 0x4000u;
          unint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 120;
          goto LABEL_151;
        case 0x13u:
          *(_DWORD *)(a1 + v4[679]) |= 8u;
          unint64_t v57 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v69 = 32;
LABEL_151:
          *(void *)(a1 + v69) = v23;
          continue;
        case 0x14u:
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + v4[679]) |= 0x80000u;
          while (2)
          {
            uint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v61 = v60 + 1;
            if (v60 == -1 || v61 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v62 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v32 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                BOOL v19 = v59++ >= 9;
                if (v19)
                {
                  LODWORD(v++*(void *)(result + 32) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v++*(void *)(result + 32) = 0;
          }
LABEL_111:
          uint64_t v68 = 156;
          goto LABEL_116;
        case 0x15u:
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + v4[679]) |= 0x40000u;
          break;
        default:
          char v24 = v5;
          char v25 = v6;
          unsigned int v26 = v7;
          unint64_t v27 = v4;
          char v28 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          unsigned int v8 = v28;
          int v4 = v27;
          unint64_t v9 = &OBJC_IVAR___CLHidManager__delegate;
          char v7 = v26;
          unint64_t v10 = &OBJC_IVAR___CLHidManager__delegate;
          int v6 = v25;
          BOOL v12 = &OBJC_IVAR___CLHidManager__delegate;
          int v5 = v24;
          char v11 = &OBJC_IVAR___CLHidManager__delegate;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v65 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v66 = v65 + 1;
        if (v65 == -1 || v66 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v67 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
        v32 |= (unint64_t)(v67 & 0x7F) << v63;
        if ((v67 & 0x80) == 0) {
          goto LABEL_113;
        }
        v63 += 7;
        BOOL v19 = v64++ >= 9;
        if (v19)
        {
          LODWORD(v++*(void *)(result + 32) = 0;
          goto LABEL_115;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_113:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v++*(void *)(result + 32) = 0;
      }
LABEL_115:
      uint64_t v68 = 152;
LABEL_116:
      *(_DWORD *)(a1 + v68) = v32;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100F6D6F0(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = off_1023069B0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_WORD *)(a1 + ++*(void *)(result + 24) = sub_100EB9E08();
  *(_WORD *)(a1 + 26) = sub_100EB9EA4();
  *(float *)(a1 + 28) = sub_100EB9F40();
  *(_WORD *)(a1 + ++*(void *)(result + 32) = 0;
  *(unsigned char *)(a1 + 34) = 0;
  *(void *)(a1 + ++*(void *)(result + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 48) = 0xBFF0000000000000;
  *(void *)(a1 + ++*(void *)(result + 56) = 0;
  *(void *)(a1 + ++*(void *)(result + 64) = 0;
  uint64_t v19 = a2[1];
  *(void *)(a1 + 72) = *a2;
  *(void *)(a1 + 80) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = a3[1];
  *(void *)(a1 + ++*(void *)(result + 88) = *a3;
  *(void *)(a1 + ++*(void *)(result + 96) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = a4[1];
  *(void *)(a1 + 104) = *a4;
  *(void *)(a1 + 112) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100F7052C(a1 + 120, a5);
  sub_100F7052C(a1 + 152, a6);
  sub_10065AB34(a1 + 184, a7);
  *(_DWORD *)(a1 + 2++*(void *)(result + 16) = 0;
  *(void *)(a1 + 2++*(void *)(result + 24) = 0;
  *(void *)(a1 + 2++*(void *)(result + 32) = 0;
  *(void *)(a1 + 237) = 0;
  *(_OWORD *)(a1 + 2++*(void *)(result + 48) = xmmword_101D99318;
  *(_OWORD *)(a1 + 2++*(void *)(result + 64) = unk_101D99328;
  *(_OWORD *)(a1 + 280) = xmmword_101D99338;
  *(_OWORD *)(a1 + 292) = *(long long *)((char *)&xmmword_101D99338 + 12);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 3++*(void *)(result + 40) = 0u;
  sub_100103240();
  if (sub_100036A60() && sub_1000A68BC(*(void *)(a1 + 104)) > 0.0 && *(void *)(a1 + 208)) {
    sub_100180260(a1 + 184, 1);
  }
  return a1;
}

void sub_100F6D87C(_Unwind_Exception *a1)
{
  sub_1006B0D14(v3);
  sub_1006B0D14(v2);
  int v5 = (std::__shared_weak_count *)v1[14];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  int v6 = (std::__shared_weak_count *)v1[12];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  char v7 = (std::__shared_weak_count *)v1[10];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = v1[5];
  v1[5] = 0;
  if (v8) {
    operator delete();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F6D910(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return sub_100B37634(result, &v3);
  }
  return result;
}

void sub_100F6D940(uint64_t a1, uint64_t a2)
{
  if (sub_100F6DCFC(a1, a2))
  {
    if (!*(void *)(a1 + 40))
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      int v5 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Background escalation manager starting to track escalation", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::onEscalationAndLabelUpdate(CFAbsoluteTime, CMWorkoutType)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      *(CFAbsoluteTime *)(a1 + ++*(void *)(result + 48) = CFAbsoluteTimeGetCurrent();
      operator new();
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    uint64_t v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Background escalation manager already tracking escalation", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::onEscalationAndLabelUpdate(CFAbsoluteTime, CMWorkoutType)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    sub_100F6DDD8(a1);
  }
}

void sub_100F6DCD0()
{
}

BOOL sub_100F6DCFC(uint64_t a1, uint64_t a2)
{
  return (sub_1000A68BC(*(void *)(a1 + 72)) > 0.0 || sub_1000A68BC(*(void *)(a1 + 88)) > 0.0)
      && *(unsigned char *)(a1 + 32)
      && (a2 == 15 || a2 == 1)
      && (*(_DWORD *)(a1 + 216) - 3) < 0xFFFFFFFE;
}

uint64_t sub_100F6DD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  double v10 = a5;
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v7 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, double *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t sub_100F6DDD8(uint64_t result)
{
  if (*(_DWORD *)(result + 216) == 3)
  {
    uint64_t v1 = result;
    *(CFAbsoluteTime *)(result + ++*(void *)(result + 16) = CFAbsoluteTimeGetCurrent();
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(v1 + 8);
      uint64_t v4 = *(void *)(v1 + 16);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v3;
      __int16 v10 = 2050;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Background escalation manager stopped tracking escalation,fRecoveryStartTime,%{public}f,fRecoveryEndTime,%{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::stopTrackingVO2MaxEscalation()", "%s\n", v8);
      if (v8 != buf) {
        free(v8);
      }
    }
    if (*(void *)(v1 + 144) && !*(unsigned char *)(v1 + 34))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100F6DD70(v1 + 120, 1, 0, *(void *)(v1 + 64), Current);
    }
    *(void *)long long buf = 3;
    uint64_t v6 = *(void *)(v1 + 40);
    if (v6)
    {
      sub_100B37634(v6, buf);
      uint64_t v7 = *(void *)(v1 + 40);
      *(void *)(v1 + ++*(void *)(result + 40) = 0;
      if (v7) {
        operator delete();
      }
    }
    else
    {
      *(void *)(v1 + ++*(void *)(result + 40) = 0;
    }
    *(void *)(v1 + ++*(void *)(result + 48) = 0xBFF0000000000000;
    *(void *)(v1 + ++*(void *)(result + 64) = 0;
    (*(void (**)(void))(**(void **)(v1 + 72) + 24))(*(void *)(v1 + 72));
    sub_100A19E7C(*(void *)(v1 + 72));
    (*(void (**)(void))(**(void **)(v1 + 88) + 24))(*(void *)(v1 + 88));
    uint64_t result = sub_100A19E7C(*(void *)(v1 + 88));
    *(void *)(v1 + ++*(void *)(result + 56) = 0;
    *(unsigned char *)(v1 + 34) = 0;
    *(_DWORD *)(v1 + 2++*(void *)(result + 16) = 0;
  }
  return result;
}

uint64_t sub_100F6E09C(uint64_t a1)
{
  uint64_t v30 = 0;
  if ((sub_1000A68BC(*(void *)(a1 + 72)) > 0.0 || sub_1000A68BC(*(void *)(a1 + 88)) > 0.0) && *(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      BOOL v3 = sub_100B3819C(v2, &v30);
      uint64_t v4 = v3;
      uint64_t v5 = *(_OWORD **)(a1 + 40);
      if (!v5 || !v3) {
        goto LABEL_22;
      }
      *(_OWORD *)(a1 + 8) = *v5;
      __asm { FMOV            V0.2D, #-1.0 }
      *uint64_t v5 = _Q0;
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    uint64_t v11 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = sub_1000A68BC(*(void *)(a1 + 72)) > 0.0;
      double v13 = sub_1000A68BC(*(void *)(a1 + 88));
      int v14 = *(unsigned __int8 *)(a1 + 32);
      *(_DWORD *)long long buf = 67240704;
      *(_DWORD *)unint64_t v36 = v12;
      *(_WORD *)&v36[4] = 1026;
      *(_DWORD *)&v36[6] = v13 > 0.0;
      __int16 v37 = 1026;
      int v38 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Background escalation manager should deescalate,hasVO2MaxBudget,%{public}d,hasExtendedBudget,%{public}d,hasPermission,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      BOOL v24 = sub_1000A68BC(*(void *)(a1 + 72)) > 0.0;
      double v25 = sub_1000A68BC(*(void *)(a1 + 88));
      int v26 = *(unsigned __int8 *)(a1 + 32);
      int v31 = 67240704;
      *(_DWORD *)uint64_t v32 = v24;
      *(_WORD *)&v32[4] = 1026;
      *(_DWORD *)&v32[6] = v25 > 0.0;
      __int16 v33 = 1026;
      int v34 = v26;
      unint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    uint64_t v15 = 6;
    if (*(unsigned char *)(a1 + 32)) {
      uint64_t v15 = 7;
    }
    uint64_t v30 = v15;
    uint64_t v16 = *(void **)(a1 + 40);
    if (v16)
    {
      *(void *)(a1 + 8) = *v16;
      *uint64_t v16 = 0xBFF0000000000000;
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      unint64_t v17 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 8);
        *(_DWORD *)long long buf = 134349056;
        *(void *)unint64_t v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Background Escalation Manager, HRRecovery startTime set to %{public}.1f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1023069F0);
        }
        uint64_t v28 = *(void *)(a1 + 8);
        int v31 = 134349056;
        *(void *)uint64_t v32 = v28;
        char v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
    }
  }
  uint64_t v4 = 1;
LABEL_22:
  if (*(_DWORD *)(a1 + 216) == 3)
  {
    int v19 = *(void *)(a1 + 144) ? v4 : 0;
    if (v19 == 1 && !*(unsigned char *)(a1 + 34))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100F6DD70(a1 + 120, 1, v30, *(void *)(a1 + 64), Current);
      *(unsigned char *)(a1 + 34) = 1;
    }
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1023069F0);
  }
  uint64_t v21 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    *(_DWORD *)unint64_t v36 = v4;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Background Escalation Manager,shouldDeescalate,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    int v31 = 67240192;
    *(_DWORD *)uint64_t v32 = v4;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::shouldDeescalateForVO2Max()", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  return v4;
}

uint64_t sub_100F6E62C(uint64_t a1, double a2)
{
  sub_100A19C6C(*(void *)(a1 + 72), a2);
  uint64_t v3 = *(void *)(a1 + 72);

  return sub_100A19E7C(v3);
}

uint64_t sub_100F6E668(uint64_t a1, double a2)
{
  sub_100A19C6C(*(void *)(a1 + 88), a2);
  uint64_t v3 = *(void *)(a1 + 88);

  return sub_100A19E7C(v3);
}

uint64_t sub_100F6E6A4(uint64_t a1, double a2)
{
  if (a2 > 0.0 && *(void *)(a1 + 208)) {
    sub_100180260(a1 + 184, 1);
  }
  sub_100A19C6C(*(void *)(a1 + 104), a2);
  uint64_t v4 = *(void *)(a1 + 104);

  return sub_100A19E7C(v4);
}

void sub_100F6E70C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    sub_100B383A4(v2, a2);
  }
}

double sub_100F6E71C(uint64_t a1, double a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 56);
  if (!v2) {
    return 0.0;
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 60);
  return fmin((double)*(unint64_t *)&a2 / (double)v2, 1.0);
}

uint64_t sub_100F6E748(uint64_t a1, double a2)
{
  if (*(_DWORD *)(a1 + 336) != 3 || a2 - *(double *)(a1 + 48) <= 30.0) {
    return 0;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1023069F0);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    double v5 = *(double *)(a1 + 48);
    *(_DWORD *)long long buf = 134349312;
    double v10 = v5;
    __int16 v11 = 2050;
    double v12 = a2 - v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Background Stairs Escalation Manager, time of escalation : %{public}.1f, escalation duration: %{public}.1f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationManager::checkForCoreAnalyticsEscalationTimeLimit(CFAbsoluteTime)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(_DWORD *)(a1 + 236) < *(_DWORD *)(a1 + 232)) {
    ++*(_DWORD *)(a1 + 240);
  }
  uint64_t v6 = 1;
  sub_100195E54(a1, 1);
  return v6;
}

void sub_100F6E97C(uint64_t a1)
{
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482668, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_102482668))
    {
      long long buf = xmmword_101D99354;
      double v86 = 2.1990238e12;
      sub_1003B17B4(&qword_102482650, &buf, 6uLL);
      __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102482650, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102482668);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482688, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_102482688))
    {
      long long buf = xmmword_101D9936C;
      double v86 = 3.39302524e10;
      sub_1003B17B4(&qword_102482670, &buf, 6uLL);
      __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102482670, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102482688);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024826A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1024826A8))
    {
      *(void *)&long long buf = &_mh_execute_header;
      DWORD2(buf) = 2;
      sub_100F4CFF0(&qword_102482690, &buf, 3uLL);
      __cxa_atexit((void (*)(void *))sub_100F4D074, &qword_102482690, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1024826A8);
    }
    sub_100F6FAA8((double **)(a1 + 312), (uint64_t)&v22, *(double *)(a1 + 48), *(float *)(a1 + 268));
    int v2 = *(_DWORD *)(a1 + 240);
    float v3 = *(float *)(a1 + 348);
    float v4 = *(float *)(a1 + 352);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    double v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a1 + 240);
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 3);
      double v8 = *(float *)(a1 + 344);
      double v9 = *(float *)(a1 + 340);
      double v10 = *(float *)(a1 + 352);
      double v11 = *(float *)(a1 + 348);
      LODWORD(buf) = 67115009;
      DWORD1(buf) = v2 != 0;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v6;
      HIWORD(buf) = 2049;
      double v86 = v30;
      __int16 v87 = 2049;
      double v88 = v31;
      __int16 v89 = 2048;
      unint64_t v90 = v7;
      __int16 v91 = 2049;
      double v92 = v22;
      __int16 v93 = 2049;
      double v94 = v23;
      __int16 v95 = 2049;
      double v96 = v24;
      __int16 v97 = 2049;
      double v98 = v25;
      __int16 v99 = 2049;
      double v100 = v27;
      __int16 v101 = 2049;
      double v102 = v28;
      __int16 v103 = 2049;
      double v104 = v32;
      __int16 v105 = 2049;
      double v106 = v33;
      __int16 v107 = 2049;
      double v108 = v34;
      __int16 v109 = 2049;
      double v110 = v29;
      __int16 v111 = 2049;
      double v112 = v26;
      __int16 v113 = 1025;
      int v114 = v35;
      __int16 v115 = 1025;
      int v116 = v36;
      __int16 v117 = 2048;
      double v118 = v8;
      __int16 v119 = 2048;
      double v120 = v9;
      __int16 v121 = 2048;
      double v122 = v10;
      __int16 v123 = 2048;
      double v124 = v11;
      __int16 v125 = 1024;
      BOOL v126 = v4 > 40.0;
      __int16 v127 = 1024;
      BOOL v128 = v3 > 0.25;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation, hasFlightReported,%d,numFlights,%d,confHrMedian,%{private}f, confHrStd,%{private}f,countHRSamples,%zu,latencyHr,%{private}f,latencyHrwConfFlag,%{private}f,maxHr,%{private}f,maxHrConfidence,%{private}f,maxHrOneMinusFhr,%{private}f,meanHr,%{private}f,prcHrwConfFlag,%{private}f,rangeBeforeMaxHr,%{private}f,rangeAfterMaxHr,%{private}f,stdHr,%{private}f,time2MaxHr,%{private}f,numSampleBeforeMaxHr,%{private}d,numSampleAfterMaxHr,%{private}d,vspeedMetricBeginning,%f,stairMetricBeginning,%f,vspeedMetricEnd,%f,stairMetricEnd,%f,isVspeedMetric,%d,isStairMetric,%d", (uint8_t *)&buf, 0xDAu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      int v15 = *(_DWORD *)(a1 + 240);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 3);
      double v17 = *(float *)(a1 + 344);
      double v18 = *(float *)(a1 + 340);
      double v19 = *(float *)(a1 + 352);
      double v20 = *(float *)(a1 + 348);
      int v37 = 67115009;
      BOOL v38 = v2 != 0;
      __int16 v39 = 1024;
      int v40 = v15;
      __int16 v41 = 2049;
      double v42 = v30;
      __int16 v43 = 2049;
      double v44 = v31;
      __int16 v45 = 2048;
      unint64_t v46 = v16;
      __int16 v47 = 2049;
      double v48 = v22;
      __int16 v49 = 2049;
      double v50 = v23;
      __int16 v51 = 2049;
      double v52 = v24;
      __int16 v53 = 2049;
      double v54 = v25;
      __int16 v55 = 2049;
      double v56 = v27;
      __int16 v57 = 2049;
      double v58 = v28;
      __int16 v59 = 2049;
      double v60 = v32;
      __int16 v61 = 2049;
      double v62 = v33;
      __int16 v63 = 2049;
      double v64 = v34;
      __int16 v65 = 2049;
      double v66 = v29;
      __int16 v67 = 2049;
      double v68 = v26;
      __int16 v69 = 1025;
      int v70 = v35;
      __int16 v71 = 1025;
      int v72 = v36;
      __int16 v73 = 2048;
      double v74 = v17;
      __int16 v75 = 2048;
      double v76 = v18;
      __int16 v77 = 2048;
      double v78 = v19;
      __int16 v79 = 2048;
      double v80 = v20;
      __int16 v81 = 1024;
      BOOL v82 = v4 > 40.0;
      __int16 v83 = 1024;
      BOOL v84 = v3 > 0.25;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()", "%s\n", v21);
      if (v21 != (char *)&buf) {
        free(v21);
      }
    }
    AnalyticsSendEventLazy();
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    double v12 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Background Stairs Escalation, sent Core Analytics event.", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      LOWORD(v37) = 0;
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()", "%s\n", v13);
LABEL_28:
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    int v14 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Not sending escalation event to CoreAnalytics, no IHA permission", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      LOWORD(v37) = 0;
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::sendEventToCoreAnalytics()", "%s\n", v13);
      goto LABEL_28;
    }
  }
}

void sub_100F6F30C(_Unwind_Exception *a1)
{
}

double sub_100F6F34C(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    if (*(void *)(a1 + 208))
    {
      sub_100103240();
      if (sub_100036A60())
      {
        double result = sub_1000A68BC(*(void *)(a1 + 104));
        if (result > 0.0)
        {
          if (*(void *)(a1 + 208))
          {
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_1023069F0);
            }
            uint64_t v7 = a1 + 184;
            double v8 = qword_1024191C8;
            if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, enabling stairs escalation on workout end event", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024191C0 != -1) {
                dispatch_once(&qword_1024191C0, &stru_1023069F0);
              }
              double v10 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::feedWorkoutEvent(CMWorkoutEvent)", "%s\n", v10);
              if (v10 != (char *)buf) {
                free(v10);
              }
            }
            uint64_t v4 = v7;
            char v5 = 1;
            goto LABEL_12;
          }
        }
      }
    }
  }
  else if (!a2 && *(void *)(a1 + 208))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    float v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager, disabling stairs escalation on workout start event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1023069F0);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::feedWorkoutEvent(CMWorkoutEvent)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if ((*(_DWORD *)(a1 + 216) - 1) <= 1) {
      sub_100195E54(a1, 0);
    }
    uint64_t v4 = a1 + 184;
    char v5 = 0;
LABEL_12:
    sub_100180260(v4, v5);
  }
  return result;
}

void sub_100F6F690(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 292) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 2++*(void *)(result + 64) = v4;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 2++*(void *)(result + 48) = v3;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1023069F0);
  }
  int v6 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 304);
    double v8 = *(float *)(a1 + 268);
    int v9 = *(_DWORD *)(a1 + 252);
    int v10 = *(unsigned __int8 *)(a1 + 305);
    double v11 = *(float *)(a1 + 256);
    int v12 = *(unsigned __int8 *)(a1 + 306);
    double v13 = *(float *)(a1 + 260);
    int v14 = *(unsigned __int8 *)(a1 + 296);
    *(_DWORD *)long long buf = 67241985;
    int v17 = v7;
    __int16 v18 = 2049;
    double v19 = v8;
    __int16 v20 = 1025;
    int v21 = v9;
    __int16 v22 = 1026;
    int v23 = v10;
    __int16 v24 = 2049;
    double v25 = v11;
    __int16 v26 = 1026;
    int v27 = v12;
    __int16 v28 = 2049;
    double v29 = v13;
    __int16 v30 = 1025;
    int v31 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Background Stairs Escalation Manager,IsAgeSet,%{public}d,Age,%{private}f,BiologicalSex,%{private}d,IsHeightSet,%{public}d,Height,%{private}f,IsWeightSet,%{public}d,Weight,%{private}f,BetaBlockerUse,%{private}d", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1023069F0);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationManager::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_100F6F938(uint64_t a1, void *a2)
{
  if ((*(_DWORD *)(a1 + 216) - 1) <= 1 && *(_DWORD *)(a1 + 336) == 3)
  {
    uint64_t v3 = a2[5];
    uint64_t v5 = a2[1];
    uint64_t v4 = a2[2];
    int v6 = *(char **)(a1 + 320);
    unint64_t v7 = *(void *)(a1 + 328);
    if ((unint64_t)v6 >= v7)
    {
      int v9 = (void **)(a1 + 312);
      int v10 = *(char **)(a1 + 312);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v10) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        int v15 = (char *)sub_1000DA5D8(a1 + 328, v14);
        int v10 = *(char **)(a1 + 312);
        int v6 = *(char **)(a1 + 320);
      }
      else
      {
        int v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      int v17 = &v15[24 * v14];
      *(void *)unint64_t v16 = v3;
      *((void *)v16 + 1) = v5;
      *((void *)v16 + 2) = v4;
      double v8 = v16 + 24;
      if (v6 != v10)
      {
        do
        {
          long long v18 = *(_OWORD *)(v6 - 24);
          *((void *)v16 - 1) = *((void *)v6 - 1);
          *(_OWORD *)(v16 - ++*(void *)(result + 24) = v18;
          v16 -= 24;
          v6 -= 24;
        }
        while (v6 != v10);
        int v10 = (char *)*v9;
      }
      *(void *)(a1 + 312) = v16;
      *(void *)(a1 + 320) = v8;
      *(void *)(a1 + 328) = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(void *)int v6 = v3;
      *((void *)v6 + 1) = v5;
      double v8 = v6 + 24;
      *((void *)v6 + 2) = v4;
    }
    *(void *)(a1 + 320) = v8;
  }
}

float *sub_100F6FA88(float *result, int a2, float a3, float a4)
{
  if (a2)
  {
    result[85] = a3;
    uint64_t v4 = result + 86;
  }
  else
  {
    result[87] = a3;
    uint64_t v4 = result + 88;
  }
  *uint64_t v4 = a4;
  return result;
}

void sub_100F6FAA8(double **a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, float a4@<S1>)
{
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)a2 = _Q0;
  *(_OWORD *)(a2 + ++*(void *)(result + 16) = _Q0;
  *(_OWORD *)(a2 + ++*(void *)(result + 32) = _Q0;
  *(_DWORD *)(a2 + ++*(void *)(result + 48) = -1082130432;
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a2 + ++*(void *)(result + 56) = 0;
  unint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  unint64_t v14 = "IN19CLFenceManager_Type16NotificationDataENS_9allocatorIS2_EEEE";
  if (*a1 == v13)
  {
    __int16 v65 = 0;
    double v66 = 0;
    __int16 v67 = 0;
    std::string __p = 0;
    __int16 v63 = 0;
    float v18 = -1.0;
    double v17 = 0.0;
    double v64 = 0;
  }
  else
  {
    float v15 = *v12 - a3;
    *(float *)a2 = v15;
    __int16 v65 = 0;
    double v66 = 0;
    __int16 v67 = 0;
    std::string __p = 0;
    __int16 v63 = 0;
    double v64 = 0;
    float v16 = -1.0;
    double v17 = 0.0;
    float v18 = -1.0;
    do
    {
      double v20 = *v12;
      double v19 = v12[1];
      double v21 = v12[2];
      __int16 v22 = v63;
      if (v63 >= v64)
      {
        __int16 v24 = (double *)__p;
        uint64_t v25 = ((char *)v63 - (unsigned char *)__p) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          goto LABEL_62;
        }
        uint64_t v27 = (char *)v64 - (unsigned char *)__p;
        if (((char *)v64 - (unsigned char *)__p) >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          double v29 = (char *)sub_1000DA54C((uint64_t)&v64, v28);
          __int16 v24 = (double *)__p;
          __int16 v22 = v63;
        }
        else
        {
          double v29 = 0;
        }
        __int16 v30 = (double *)&v29[8 * v25];
        *__int16 v30 = v21;
        int v23 = v30 + 1;
        while (v22 != v24)
        {
          uint64_t v31 = *((void *)v22-- - 1);
          *((void *)v30-- - 1) = v31;
        }
        std::string __p = v30;
        __int16 v63 = v23;
        double v64 = (double *)&v29[8 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *__int16 v63 = v21;
        int v23 = v22 + 1;
      }
      __int16 v63 = v23;
      if (v21 > 0.389999986)
      {
        float v32 = v66;
        if (v66 >= v67)
        {
          float v34 = (double *)v65;
          uint64_t v35 = ((char *)v66 - (unsigned char *)v65) >> 3;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61) {
LABEL_62:
          }
            sub_1001D7FD4();
          uint64_t v37 = (char *)v67 - (unsigned char *)v65;
          if (((char *)v67 - (unsigned char *)v65) >> 2 > v36) {
            unint64_t v36 = v37 >> 2;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            __int16 v39 = (char *)sub_1000DA54C((uint64_t)&v67, v38);
            float v34 = (double *)v65;
            float v32 = v66;
          }
          else
          {
            __int16 v39 = 0;
          }
          int v40 = (double *)&v39[8 * v35];
          *int v40 = v19;
          float v33 = v40 + 1;
          while (v32 != v34)
          {
            uint64_t v41 = *((void *)v32-- - 1);
            *((void *)v40-- - 1) = v41;
          }
          __int16 v65 = v40;
          double v66 = v33;
          __int16 v67 = (double *)&v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *double v66 = v19;
          float v33 = v32 + 1;
        }
        double v66 = v33;
        if (v16 < 0.0)
        {
          float v16 = v20 - a3;
          *(float *)(a2 + 4) = v16;
        }
        if (v19 > v18)
        {
          float v18 = v19;
          float v42 = v21;
          *(float *)(a2 + 8) = v18;
          *(float *)(a2 + 12) = v42;
          double v17 = v20;
        }
      }
      v12 += 3;
    }
    while (v12 != v13);
    if (v18 > -1.0)
    {
      float v43 = (float)(v18 + -65.0) / (a4 * -0.7 + 208.0 + -65.0);
      float v44 = v17 - a3;
      *(float *)(a2 + ++*(void *)(result + 16) = v44;
      *(float *)(a2 + 20) = v43;
      unint64_t v14 = "NSt3__120__shared_ptr_emplaceIN19CLFenceManager_Type16NotificationDataENS_9allocatorIS2_EEEE" + 29;
      float v45 = sub_101136E84((double **)&v65);
      *(float *)(a2 + ++*(void *)(result + 24) = v45;
      float v46 = sub_101136E08((double **)&v65);
      *(float *)(a2 + 28) = v46;
      float v47 = sub_1011370E4((uint64_t *)&__p);
      *(float *)(a2 + ++*(void *)(result + 32) = v47;
      double v48 = sub_101136E08((double **)&__p);
      float v49 = (double)(unint64_t)(((char *)v66 - (unsigned char *)v65) >> 3) * 100.0;
      __int16 v51 = *a1;
      double v50 = a1[1];
      float v52 = v49 / (float)(0xAAAAAAAAAAAAAAABLL * (v50 - *a1));
      *(float *)&double v48 = v48;
      *(_DWORD *)(a2 + 36) = LODWORD(v48);
      *(float *)(a2 + ++*(void *)(result + 40) = v52;
      goto LABEL_46;
    }
    unint64_t v14 = "IN19CLFenceManager_Type16NotificationDataENS_9allocatorIS2_EEEE";
  }
  __int16 v51 = *a1;
  double v50 = a1[1];
LABEL_46:
  if (v51 != v50)
  {
    int v53 = 0;
    int v54 = 0;
    float v55 = 3.4028e38;
    double v56 = *((double *)v14 + 501);
    float v57 = 3.4028e38;
    do
    {
      if (v51[2] > v56)
      {
        double v58 = v51[1];
        if (*v51 >= v17)
        {
          if (*v51 <= v17) {
            goto LABEL_56;
          }
          *(_DWORD *)(a2 + ++*(void *)(result + 56) = ++v53;
          if (v58 >= v57) {
            goto LABEL_56;
          }
          float v59 = v58;
          double v60 = (float *)(a2 + 48);
          float v57 = v59;
          goto LABEL_55;
        }
        *(_DWORD *)(a2 + 52) = ++v54;
        if (v58 < v55)
        {
          float v59 = v58;
          double v60 = (float *)(a2 + 44);
          float v55 = v59;
LABEL_55:
          *double v60 = v18 - v59;
        }
      }
LABEL_56:
      v51 += 3;
    }
    while (v51 != v50);
  }
  if (__p)
  {
    __int16 v63 = (double *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    double v66 = (double *)v65;
    operator delete(v65);
  }
}

void sub_100F6FEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100F6FF18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v41 = 0;
  v42[0] = @"ageGroup";
  float v3 = *(float *)(v2 + 268);
  __int16 v39 = 0;
  int v40 = 0;
  sub_10010F834(&v39, (const void *)qword_102482650, unk_102482658, (unk_102482658 - qword_102482650) >> 2);
  if (v40 == v39)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = (v40 - (unsigned char *)v39) >> 2;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    while (*((float *)v39 + v4) < v3)
    {
      if (v5 == ++v4)
      {
        unint64_t v4 = v5;
        break;
      }
    }
  }
  v43[0] = +[NSNumber numberWithInt:v4];
  v42[1] = @"gender";
  v43[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 252)];
  v42[2] = @"useBetaBlocker";
  v43[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 296)];
  v42[3] = @"userBMIBin";
  float v6 = *(float *)(a1 + 40);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v36 = 0;
  sub_10010F834(&v36, (const void *)qword_102482670, unk_102482678, (unk_102482678 - qword_102482670) >> 2);
  if (v37 == v36)
  {
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    unint64_t v8 = (v37 - (unsigned char *)v36) >> 2;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    while (*((float *)v36 + v7) < v6)
    {
      if (v8 == ++v7)
      {
        unint64_t v7 = v8;
        break;
      }
    }
  }
  _DWORD v43[3] = +[NSNumber numberWithInt:v7];
  v42[4] = @"hasFlightReported";
  v43[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 104)];
  v42[5] = @"numFlights";
  int v9 = *(_DWORD *)(v2 + 240);
  float v34 = 0;
  uint64_t v35 = 0;
  std::string __p = 0;
  sub_10010F834(&__p, (const void *)qword_102482690, unk_102482698, (unk_102482698 - qword_102482690) >> 2);
  if (v34 == __p)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = (v34 - (unsigned char *)__p) >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    while (*((_DWORD *)__p + v10) < v9)
    {
      if (v11 == ++v10)
      {
        unint64_t v10 = v11;
        break;
      }
    }
  }
  v43[5] = +[NSNumber numberWithInt:v10];
  v42[6] = @"confHrMedian";
  LODWORD(v12) = *(_DWORD *)(a1 + 76);
  v43[6] = +[NSNumber numberWithFloat:v12];
  v42[7] = @"confHrStd";
  LODWORD(v13) = *(_DWORD *)(a1 + 80);
  void v43[7] = +[NSNumber numberWithFloat:v13];
  v42[8] = @"countHRSamples";
  v43[8] = +[NSNumber numberWithUnsignedLong:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 320) - *(void *)(v2 + 312)) >> 3)];
  v42[9] = @"latencyHr";
  LODWORD(v14) = *(_DWORD *)(a1 + 44);
  v43[9] = +[NSNumber numberWithFloat:v14];
  v42[10] = @"latencyHrwConfFlag";
  LODWORD(v15) = *(_DWORD *)(a1 + 48);
  v43[10] = +[NSNumber numberWithFloat:v15];
  v42[11] = @"maxHr";
  LODWORD(v++*(void *)(result + 16) = *(_DWORD *)(a1 + 52);
  v43[11] = +[NSNumber numberWithFloat:v16];
  v42[12] = @"maxHrConfidence";
  LODWORD(v17) = *(_DWORD *)(a1 + 56);
  v43[12] = +[NSNumber numberWithFloat:v17];
  v42[13] = @"maxHrOneMinusFhr";
  LODWORD(v18) = *(_DWORD *)(a1 + 64);
  v43[13] = +[NSNumber numberWithFloat:v18];
  v42[14] = @"meanHr";
  LODWORD(v19) = *(_DWORD *)(a1 + 68);
  v43[14] = +[NSNumber numberWithFloat:v19];
  v42[15] = @"prcHrwConfFlag";
  LODWORD(v20) = *(_DWORD *)(a1 + 84);
  v43[15] = +[NSNumber numberWithFloat:v20];
  v42[16] = @"rangeBeforeMaxHr";
  LODWORD(v21) = *(_DWORD *)(a1 + 88);
  v43[16] = +[NSNumber numberWithFloat:v21];
  v42[17] = @"rangeAfterMaxHr";
  LODWORD(v22) = *(_DWORD *)(a1 + 92);
  v43[17] = +[NSNumber numberWithFloat:v22];
  v42[18] = @"stdHr";
  LODWORD(v23) = *(_DWORD *)(a1 + 72);
  v43[18] = +[NSNumber numberWithFloat:v23];
  v42[19] = @"time2MaxHr";
  LODWORD(v++*(void *)(result + 24) = *(_DWORD *)(a1 + 60);
  v43[19] = +[NSNumber numberWithFloat:v24];
  v42[20] = @"numSampleBeforeMaxHr";
  v43[20] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 96)];
  v42[21] = @"numSampleAfterMaxHr";
  v43[21] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 100)];
  v42[22] = @"vspeedMetricEnd";
  LODWORD(v25) = *(_DWORD *)(v2 + 352);
  v43[22] = +[NSNumber numberWithFloat:v25];
  v42[23] = @"stairMetricEnd";
  LODWORD(v26) = *(_DWORD *)(v2 + 348);
  v43[23] = +[NSNumber numberWithFloat:v26];
  v42[24] = @"isVspeedMetric";
  v43[24] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 105)];
  v42[25] = @"isStairMetric";
  v43[25] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 106)];
  v42[26] = @"sumStairMetricBeg";
  LODWORD(v27) = *(_DWORD *)(v2 + 340);
  v43[26] = +[NSNumber numberWithFloat:v27];
  v42[27] = @"sumStairMetricEnd";
  LODWORD(v28) = *(_DWORD *)(v2 + 348);
  v43[27] = +[NSNumber numberWithFloat:v28];
  v42[28] = @"sumVSpeedMetricBeg";
  LODWORD(v29) = *(_DWORD *)(v2 + 344);
  v43[28] = +[NSNumber numberWithFloat:v29];
  v42[29] = @"sumVSpeedMetricEnd";
  LODWORD(v30) = *(_DWORD *)(v2 + 352);
  v43[29] = +[NSNumber numberWithFloat:v30];
  uint64_t v31 = +[NSDictionary dictionaryWithObjects:v43 forKeys:v42 count:30];
  if (__p)
  {
    float v34 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }
  return v31;
}

void sub_100F7046C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
}

void sub_100F704C4(void *a1)
{
  sub_100F705C4(a1);

  operator delete();
}

void sub_100F704FC(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_100F7052C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + ++*(void *)(result + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + ++*(void *)(result + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
  }
  return a1;
}

void *sub_100F705C4(void *a1)
{
  *a1 = off_1023069B0;
  uint64_t v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }
  sub_10065ABCC(a1 + 23);
  sub_1006B0D14(a1 + 19);
  sub_1006B0D14(a1 + 15);
  uint64_t v3 = (std::__shared_weak_count *)a1[14];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[12];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6) {
    operator delete();
  }
  return a1;
}

uint64_t sub_100F70670()
{
  sub_100134750(&qword_102482618, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482618, (void *)&_mh_execute_header);
}

uint64_t sub_100F70A2C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v15 = 0;
        }
        uint64_t v38 = 8;
        goto LABEL_64;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (2)
        {
          uint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              BOOL v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_50:
        *(_DWORD *)(a1 + ++*(void *)(result + 24) = v19;
        continue;
      case 3u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        while (2)
        {
          uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v10 = v24++ >= 9;
              if (v10)
              {
                uint64_t v25 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0;
        }
LABEL_54:
        BOOL v36 = v25 != 0;
        uint64_t v37 = 28;
        goto LABEL_59;
      case 4u:
        *(unsigned char *)(a1 + 32) |= 1u;
        unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v15 = 0;
        }
        uint64_t v38 = 16;
LABEL_64:
        *(void *)(a1 + v38) = v15;
        continue;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v34 = v33 + 1;
      if (v33 == -1 || v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0) {
        goto LABEL_56;
      }
      v30 += 7;
      BOOL v10 = v31++ >= 9;
      if (v10)
      {
        uint64_t v32 = 0;
        goto LABEL_58;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v32 = 0;
    }
LABEL_58:
    BOOL v36 = v32 != 0;
    uint64_t v37 = 29;
LABEL_59:
    *(unsigned char *)(a1 + v37) = v36;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_100F71350(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = (std::__shared_weak_count *)a4[1];
  uint64_t v12 = *a4;
  double v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100DFC7F8(a1, a2, a3, &v12, a5);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  *a1 = off_102306A60;
  a1[11] = 0x7FEFFFFFFFFFFFFFLL;
  unint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v10 = *a4;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1006BB1B4((uint64_t)(a1 + 12), &v10);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  a1[10] = 0;
  return a1;
}

void sub_100F71408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_100DFC8A4(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100F71440(void *a1)
{
  *a1 = off_102306A60;
  sub_1006BC524((uint64_t)(a1 + 12));

  return sub_100DFC8A4((uint64_t)a1);
}

void sub_100F71494(void *a1)
{
  *a1 = off_102306A60;
  sub_1006BC524((uint64_t)(a1 + 12));
  sub_100DFC8A4((uint64_t)a1);

  operator delete();
}

id sub_100F714FC(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  id v3 = [*(id *)(a1 + 8) count];
  char v4 = +[NSSortDescriptor sortDescriptorWithKey:@"score" ascending:1];
  unsigned int v5 = *(void **)(a1 + 8);
  uint64_t v10 = v4;
  id v6 = [v5 sortedArrayUsingDescriptors:+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1)];
  id v7 = [v6 firstObject];
  id result = [v6 count];
  if ((unint64_t)result >= 2 && v7 == *(id *)(a1 + 80))
  {
    id result = [v6 objectAtIndex:1];
    id v7 = result;
  }
  if ((unint64_t)v3 <= v2)
  {
    *(void *)(a1 + ++*(void *)(result + 24) = 0;
    if (v3 == (id)v2) {
      *(void *)(a1 + 80) = v7;
    }
  }
  else
  {
    if (rand() <= 0x3FFFFFFF)
    {
      char v9 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v7;
      id v7 = v9;
    }
    *(void *)(a1 + ++*(void *)(result + 24) = v7;
    [objc_msgSend(v7, "archive") secondaryDataSize];
    return (id)sub_1011C5608();
  }
  return result;
}

uint64_t sub_100F71674(uint64_t a1, id a2)
{
  int v2 = *(void **)(a1 + 80);
  if (v2 && [v2 archive] == a2) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_100F716B4(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 40) + 104))(*(void *)(a1 + 40)) + 1;
}

void sub_100F716F4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 40) + 96))(*(void *)(a1 + 40)))
  {
    double v2 = *(double *)(a1 + 16);
    *(double *)(a1 + ++*(void *)(result + 88) = v2 + (*(double (**)(void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40));
  }
  else
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 104))(*(void *)(a1 + 40));
    if (v3)
    {
      int v4 = v3;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 48) + 128))(&buf);
      int v5 = *(_DWORD *)v27;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 48) + 128))(&v21);
      if (v5 * v4 + 1 >= v22)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 48) + 128))(&v15);
        int v6 = v17;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 48) + 128))(&v15);
        int v6 = v16 * v4 + 1;
      }
      sub_1000D7D80((uint64_t)&v20);
      sub_1000D7D80((uint64_t)&v19);
      sub_1000D7D80((uint64_t)&v18);
      sub_1000D7D80((uint64_t)&v25);
      sub_1000D7D80((uint64_t)&v24);
      sub_1000D7D80((uint64_t)&v23);
      sub_1000D7D80((uint64_t)&v34);
      sub_1000D7D80((uint64_t)&v33);
      sub_1000D7D80((uint64_t)&v32);
      double v9 = 24.0 / (double)v6;
      double v7 = v9 * 0.5 * 3600.0;
      double v8 = v9 * 1.5 * 3600.0;
    }
    else
    {
      double v7 = (*(double (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
      double v8 = (*(double (**)(void))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40));
    }
    int v10 = rand();
    double v11 = *(double *)(a1 + 16);
    *(double *)(a1 + ++*(void *)(result + 88) = v7
                         + (double)v10 / 2147483650.0 * (v8 - v7)
                         + v11
                         + (*(double (**)(void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40));
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102306B28);
    }
    uint64_t v12 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 88);
      uint64_t buf = 68289539;
      *(_WORD *)unint64_t v27 = 2082;
      *(void *)&v27[2] = "";
      __int16 v28 = 2049;
      uint64_t v29 = v13;
      __int16 v30 = 2049;
      uint64_t v31 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update next trace eligibility\", \"current\":\"%{private}f\", \"next\":\"%{private}f\"}", (uint8_t *)&buf, 0x26u);
    }
  }
}

void sub_100F71ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1006BB8D4((uint64_t)&a39);
  sub_1006BB8D4((uint64_t)&a69);
  _Unwind_Resume(a1);
}

id sub_100F71AFC(uint64_t a1)
{
  id result = sub_100DFCD68(a1);
  *(void *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_100F71B24(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 88) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

NSString *sub_100F71B30(uint64_t a1, uint64_t a2)
{
  return +[NSString stringWithFormat:@"%u", a2];
}

uint64_t sub_100F71B64(uint64_t a1)
{
  return a1 + 96;
}

CFStringRef sub_100F71B6C()
{
  return @"Non Vision";
}

void sub_100F71B78(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100F71BA8(uint64_t a1, uint64_t a2)
{
  sub_100418AD4((uint64_t)v5, a2);
  *(void *)a1 = &off_1022C55E0;
  sub_100418A50(v5);
  *(void *)a1 = off_102306B58;
  sub_100418AD4(a1 + 8, a2);
  *(void *)(a1 + ++*(void *)(result + 40) = 0;
  *(unsigned char *)(a1 + ++*(void *)(result + 48) = 0;
  *(_OWORD *)(a1 + ++*(void *)(result + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 152) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_100F71C90(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 112) <= *(double *)(a1 + 40))
  {
    sub_100F727B8(a1);
    double v5 = 0.0;
    int v11 = -1;
    double v12 = 0.0;
    double v6 = 0.0;
    goto LABEL_32;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 520);
  double v5 = 0.0;
  double v6 = 0.0;
  if (!*(unsigned char *)(a1 + 48))
  {
    double v7 = (void *)(a1 + 56);
    double v8 = *(double *)(a2 + 128) - *(double *)(a2 + 120);
    double v9 = *(double *)(a1 + 56) + v8;
    if (v9 < 10.24
      || (v8 == 0.0 ? (double v10 = 0.0) : (double v10 = (v8 - (v9 + -10.24)) / v8 * (double)v4),
          double v6 = v10 + *(double *)(a1 + 64),
          v6 < 14.0))
    {
LABEL_17:
      *(double *)uint64_t buf = *(double *)(a2 + 128) - *(double *)(a2 + 120);
      *(double *)&uint8_t buf[8] = (double)v4;
      uint64_t v18 = sub_100F7251C((void *)(a1 + 104), buf);
      double v19 = sub_100F725DC(v18, (void *)(a1 + 104));
      *(double *)(a1 + ++*(void *)(result + 56) = v19;
      *(double *)(a1 + ++*(void *)(result + 64) = sub_100F72640(v20, (void *)(a1 + 104));
      if (v19 >= 10.24)
      {
        do
        {
          *(int64x2_t *)(a1 + 136) = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_101D0A740);
          uint64_t v21 = sub_100096314(a1 + 104, 1);
          double v22 = sub_100F725DC(v21, (void *)(a1 + 104));
          *(double *)(a1 + ++*(void *)(result + 56) = v22;
          *(double *)(a1 + ++*(void *)(result + 64) = sub_100F72640(v23, (void *)(a1 + 104));
        }
        while (v22 >= 10.24);
      }
      goto LABEL_19;
    }
    *(unsigned char *)(a1 + ++*(void *)(result + 48) = 1;
    uint64_t v13 = *(void ***)(a1 + 112);
    uint64_t v14 = *(void *)(a1 + 120);
    *(void *)(a1 + 144) = 0;
    unint64_t v15 = v14 - (void)v13;
    if (v15 >= 0x11)
    {
      do
      {
        operator delete(*v13);
        uint64_t v16 = *(void *)(a1 + 120);
        uint64_t v13 = (void **)(*(void *)(a1 + 112) + 8);
        *(void *)(a1 + 112) = v13;
        unint64_t v15 = v16 - (void)v13;
      }
      while (v15 > 0x10);
    }
    if (v15 >> 3 == 1)
    {
      uint64_t v17 = 128;
    }
    else
    {
      if (v15 >> 3 != 2) {
        goto LABEL_16;
      }
      uint64_t v17 = 256;
    }
    *(void *)(a1 + 136) = v17;
LABEL_16:
    *double v7 = 0;
    *(void *)(a1 + ++*(void *)(result + 64) = 0;
    if (*(unsigned char *)(a1 + 48)) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_19:
  double v24 = *(double *)(a1 + 72);
  double v25 = *(double *)(a2 + 128);
  double v26 = v25 - *(double *)(a2 + 120);
  if (v24 + v26 >= 60.0)
  {
    double v33 = v24 + v26 + -60.0;
    if (v26 == 0.0)
    {
      double v34 = 0.0;
      double v35 = 0.0;
    }
    else
    {
      double v34 = v33 / v26 * (double)v4;
      double v35 = (double)v4 - v34;
    }
    if (*(unsigned char *)(a1 + 48))
    {
      *(double *)uint64_t buf = v25 - v24;
      *(double *)__int16 v81 = v25;
      int v80 = 1;
      sub_100F726C0(a1, (double *)buf, v81, &v80, *(unsigned char *)(a2 + 352));
      int v11 = 1;
      double v12 = 0.0;
    }
    else
    {
      double v12 = v35 + *(double *)(a1 + 80);
      if (v12 <= 42.0)
      {
        unint64_t v51 = *(void *)(a1 + 184);
        uint64_t v52 = *(void *)(a1 + 160);
        uint64_t v53 = *(void *)(a1 + 168);
        int v54 = (void *)(v52 + 8 * (v51 >> 8));
        if (v53 == v52) {
          uint64_t v55 = 0;
        }
        else {
          uint64_t v55 = *v54 + 16 * v51;
        }
        unint64_t v56 = *(void *)(a1 + 192) + v51;
        unint64_t v57 = v56 >> 8;
        double v58 = 0.0;
        double v59 = 0.0;
LABEL_47:
        double v60 = (double *)v55;
        while (1)
        {
          uint64_t v61 = v53 == v52 ? 0 : *(void *)(v52 + 8 * v57) + 16 * v56;
          if (v60 == (double *)v61) {
            break;
          }
          uint64_t v62 = v55 - *v54;
          uint64_t v63 = v62 >> 4;
          if (v62 < -15) {
            uint64_t v64 = v54[-((unint64_t)(254 - v63) >> 8)] + 16 * ~(-2 - v63);
          }
          else {
            uint64_t v64 = *(void *)((char *)v54 + (((unint64_t)(v63 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
          }
                + 16 * (v63 + 1);
          if (v53 == v52) {
            uint64_t v65 = 0;
          }
          else {
            uint64_t v65 = *(void *)(v52 + 8 * v57) + 16 * v56;
          }
          double v66 = -0.0;
          if (v64 == v65) {
            double v67 = v26 - v33;
          }
          else {
            double v67 = -0.0;
          }
          double v68 = v58 + v67;
          if (v64 == v65) {
            double v66 = v35;
          }
          double v69 = v59 + v66;
          double v70 = *v60;
          double v58 = *v60 + v68;
          if (v58 >= 20.0)
          {
            double v58 = v58 + -20.0;
            if (v70 == 0.0)
            {
              double v59 = 0.0;
              double v72 = 0.0;
            }
            else
            {
              double v71 = v60[1];
              double v59 = v58 / v70 * v71;
              double v72 = v71 - v59;
            }
            if (v69 + v72 < 8.0) {
              goto LABEL_72;
            }
          }
          else
          {
            double v59 = v69 + v60[1];
          }
          v60 += 2;
          v55 += 16;
          if (v55 - *v54 == 4096)
          {
            uint64_t v73 = v54[1];
            ++v54;
            uint64_t v55 = v73;
            goto LABEL_47;
          }
        }
        if (v12 < 32.0)
        {
LABEL_72:
          double v5 = v35 + *(double *)(a1 + 80);
          goto LABEL_20;
        }
        *(double *)uint64_t buf = v25 - v24;
        *(double *)__int16 v81 = v25;
        int v80 = 2;
        sub_100F726C0(a1, (double *)buf, v81, &v80, *(unsigned char *)(a2 + 352));
        int v11 = 2;
        double v5 = v12;
        goto LABEL_31;
      }
      *(double *)uint64_t buf = v25 - v24;
      *(double *)__int16 v81 = v25;
      int v80 = 0;
      sub_100F726C0(a1, (double *)buf, v81, &v80, *(unsigned char *)(a2 + 352));
      int v11 = 0;
    }
    double v5 = 0.0;
LABEL_31:
    *(double *)uint64_t buf = v33;
    *(double *)&uint8_t buf[8] = v34;
    uint64_t v36 = sub_100F7251C((void *)(a1 + 104), buf);
    *(double *)(a1 + ++*(void *)(result + 56) = sub_100F725DC(v36, (void *)(a1 + 104));
    *(double *)(a1 + ++*(void *)(result + 64) = sub_100F72640(v37, (void *)(a1 + 104));
    *(double *)uint64_t buf = v33;
    *(double *)&uint8_t buf[8] = v34;
    uint64_t v38 = sub_100F7251C((void *)(a1 + 152), buf);
    *(double *)(a1 + 72) = sub_100F725DC(v38, (void *)(a1 + 152));
    *(double *)(a1 + 80) = sub_100F72640(v39, (void *)(a1 + 152));
    goto LABEL_32;
  }
LABEL_20:
  *(double *)uint64_t buf = v25 - *(double *)(a2 + 120);
  *(double *)&uint8_t buf[8] = (double)v4;
  uint64_t v27 = sub_100F7251C((void *)(a1 + 152), buf);
  double v28 = sub_100F725DC(v27, (void *)(a1 + 152));
  *(double *)(a1 + 72) = v28;
  *(double *)(a1 + 80) = sub_100F72640(v29, (void *)(a1 + 152));
  if (v28 >= 60.0)
  {
    do
    {
      *(int64x2_t *)(a1 + 184) = vaddq_s64(*(int64x2_t *)(a1 + 184), (int64x2_t)xmmword_101D0A740);
      uint64_t v30 = sub_100096314(a1 + 152, 1);
      double v31 = sub_100F725DC(v30, (void *)(a1 + 152));
      *(double *)(a1 + 72) = v31;
      *(double *)(a1 + 80) = sub_100F72640(v32, (void *)(a1 + 152));
    }
    while (v31 >= 60.0);
  }
  int v11 = -1;
  double v12 = v5;
LABEL_32:
  double v40 = *(double *)(a2 + 112);
  *(double *)(a1 + ++*(void *)(result + 40) = v40;
  double v41 = *(double *)(a1 + 88);
  if (v41 > 0.0)
  {
    double v42 = v40 - *(double *)(a1 + 96);
    double v43 = 0.0;
    if (v42 <= 900.0)
    {
      double v44 = v41 - (*(double *)(a2 + 128) - *(double *)(a2 + 120));
      double v43 = 0.0;
      if (v44 >= 0.0) {
        double v43 = v44;
      }
    }
    *(double *)(a1 + ++*(void *)(result + 88) = v43;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102306B90);
  }
  float v45 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v46 = *(void *)(a2 + 112);
    uint64_t v48 = *(void *)(a1 + 56);
    uint64_t v47 = *(void *)(a1 + 64);
    uint64_t v50 = *(void *)(a1 + 72);
    uint64_t v49 = *(void *)(a1 + 80);
    *(_DWORD *)uint64_t buf = 134221568;
    *(void *)&uint8_t buf[4] = v46;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v11;
    __int16 v111 = 2048;
    uint64_t v112 = v47;
    __int16 v113 = 2048;
    uint64_t v114 = v48;
    __int16 v115 = 2048;
    uint64_t v116 = v49;
    __int16 v117 = 2048;
    uint64_t v118 = v50;
    __int16 v119 = 2048;
    uint64_t v120 = 0x40247AE147AE147BLL;
    __int16 v121 = 2048;
    double v122 = v6;
    __int16 v123 = 1024;
    int v124 = 14;
    __int16 v125 = 2048;
    uint64_t v126 = 0x404E000000000000;
    __int16 v127 = 2048;
    double v128 = v12;
    __int16 v129 = 1024;
    int v130 = 42;
    __int16 v131 = 2048;
    uint64_t v132 = 0x404E000000000000;
    __int16 v133 = 2048;
    double v134 = v5;
    __int16 v135 = 1024;
    int v136 = 32;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "ExerciseMinute,ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPushBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,ThresholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageModelCount,%.3f,CoverageModelThreshold,%d", buf, 0x88u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102306B90);
    }
    uint64_t v74 = *(void *)(a2 + 112);
    uint64_t v76 = *(void *)(a1 + 56);
    uint64_t v75 = *(void *)(a1 + 64);
    uint64_t v78 = *(void *)(a1 + 72);
    uint64_t v77 = *(void *)(a1 + 80);
    *(_DWORD *)__int16 v81 = 134221568;
    *(void *)&v81[4] = v74;
    __int16 v82 = 1024;
    int v83 = v11;
    __int16 v84 = 2048;
    uint64_t v85 = v75;
    __int16 v86 = 2048;
    uint64_t v87 = v76;
    __int16 v88 = 2048;
    uint64_t v89 = v77;
    __int16 v90 = 2048;
    uint64_t v91 = v78;
    __int16 v92 = 2048;
    uint64_t v93 = 0x40247AE147AE147BLL;
    __int16 v94 = 2048;
    double v95 = v6;
    __int16 v96 = 1024;
    int v97 = 14;
    __int16 v98 = 2048;
    uint64_t v99 = 0x404E000000000000;
    __int16 v100 = 2048;
    double v101 = v12;
    __int16 v102 = 1024;
    int v103 = 42;
    __int16 v104 = 2048;
    uint64_t v105 = 0x404E000000000000;
    __int16 v106 = 2048;
    double v107 = v5;
    __int16 v108 = 1024;
    int v109 = 32;
    __int16 v79 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLExerciseMinuteWheelChairEstimator::feedNatalie(double, const CLNatalieModelInput &)", "%s\n", v79);
    if (v79 != buf) {
      free(v79);
    }
  }
}

uint64_t sub_100F7251C(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F7299C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(_OWORD *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5] + 1;
  a1[5] = v9;
  unint64_t v10 = v8 + v9;
  uint64_t v11 = a1[1];
  double v12 = (void *)(v11 + 8 * (v10 >> 8));
  uint64_t v13 = *v12 + 16 * v10;
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 16;
}

double sub_100F725DC(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  double result = 0.0;
  if (a2[2] != v2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = (double **)(v2 + 8 * (v4 >> 8));
    uint64_t v6 = *v5;
    unint64_t v7 = &(*v5)[2 * v4];
    uint64_t v8 = *(void *)(v2 + (((a2[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a2 + 40) + v4);
    while (v7 != (double *)v8)
    {
      double v9 = *v7;
      v7 += 2;
      double v10 = v9;
      if ((char *)v7 - (char *)v6 == 4096)
      {
        uint64_t v11 = v5[1];
        ++v5;
        uint64_t v6 = v11;
        unint64_t v7 = v11;
      }
      double result = result + v10;
    }
  }
  return result;
}

double sub_100F72640(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  double result = 0.0;
  if (a2[2] != v2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = (uint64_t *)(v2 + 8 * (v4 >> 8));
    uint64_t v6 = *v5;
    uint64_t v7 = *v5 + 16 * v4;
    uint64_t v8 = *(void *)(v2 + (((a2[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a2 + 40) + v4);
    if (v7 != v8)
    {
      unsigned int v9 = 0;
      do
      {
        uint64_t v10 = v7 + 16;
        if (v7 + 16 - v6 == 4096)
        {
          uint64_t v11 = v5[1];
          ++v5;
          uint64_t v6 = v11;
          uint64_t v10 = v11;
        }
        unsigned int v9 = (*(double *)(v7 + 8) + (double)v9);
        uint64_t v7 = v10;
      }
      while (v10 != v8);
      return (double)v9;
    }
  }
  return result;
}

uint64_t sub_100F726C0(uint64_t a1, double *a2, void *a3, int *a4, char a5)
{
  *(double *)(a1 + ++*(void *)(result + 88) = *(double *)(a1 + 88) + 60.0;
  *(void *)(a1 + ++*(void *)(result + 96) = *a3;
  sub_100F727B8(a1);
  uint64_t v10 = sub_100C3AE20();
  sub_100C3AE68(v10, *a4, *(double *)a3 - *a2);
  unint64_t v11 = *a4;
  if (v11 >= 3) {
    unsigned __int16 v12 = 0;
  }
  else {
    unsigned __int16 v12 = 0x4000200010uLL >> (16 * v11);
  }
  uint64_t v13 = *a3;
  *(double *)uint64_t v16 = *a2;
  v16[1] = v13;
  v16[2] = 0x4011CCCCC0000000;
  uint64_t v17 = v12;
  BYTE2(v17) = a5;
  uint64_t v14 = *(void *)(a1 + 32);
  if (!v14) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v16);
}

void sub_100F727B8(uint64_t a1)
{
  *(unsigned char *)(a1 + ++*(void *)(result + 48) = 0;
  uint64_t v2 = *(void ***)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 144) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 120);
      uint64_t v2 = (void **)(*(void *)(a1 + 112) + 8);
      *(void *)(a1 + 112) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 256;
  }
  *(void *)(a1 + 136) = v6;
LABEL_8:
  *(void *)(a1 + ++*(void *)(result + 56) = 0;
  *(void *)(a1 + ++*(void *)(result + 64) = 0;
  uint64_t v7 = *(void ***)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  *(void *)(a1 + 192) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 168);
      uint64_t v7 = (void **)(*(void *)(a1 + 160) + 8);
      *(void *)(a1 + ++*(void *)(result + 160) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 128;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 256;
LABEL_14:
    *(void *)(a1 + 184) = v11;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
}

void *sub_100F72894(void *a1)
{
  *a1 = off_102306B58;
  uint64_t v2 = a1 + 1;
  sub_1000D80C4(a1 + 19);
  sub_1000D80C4(a1 + 13);
  sub_100418A50(v2);
  return a1;
}

void sub_100F728F0(void *a1)
{
  *a1 = off_102306B58;
  uint64_t v2 = a1 + 1;
  sub_1000D80C4(a1 + 19);
  sub_1000D80C4(a1 + 13);
  sub_100418A50(v2);

  operator delete();
}

void sub_100F7296C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100F7299C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100F72C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F72FF0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString();

        *(void *)(a1 + ++*(void *)(result + 32) = String;
        goto LABEL_58;
      case 2u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              BOOL v9 = v15++ >= 9;
              if (v9)
              {
                LODWORD(v++*(void *)(result + 16) = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v++*(void *)(result + 16) = 0;
        }
LABEL_48:
        uint64_t v28 = 8;
        goto LABEL_57;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v16 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v++*(void *)(result + 16) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v++*(void *)(result + 16) = 0;
        }
LABEL_52:
        uint64_t v28 = 12;
        goto LABEL_57;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v16 |= (unint64_t)(v26 & 0x7F) << v23;
            if (v26 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                LODWORD(v++*(void *)(result + 16) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v++*(void *)(result + 16) = 0;
        }
LABEL_56:
        uint64_t v28 = 24;
LABEL_57:
        *(_DWORD *)(a1 + v28) = v16;
        goto LABEL_58;
      case 5u:
        uint64_t v27 = objc_alloc_init(ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 16) = v27;
        if PBReaderPlaceMark() && (sub_100F95DD8((uint64_t)v27, a2))
        {
          PBReaderRecallMark();
LABEL_58:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

BOOL sub_100F73A58(double *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)a1;
  double v5 = *(double *)(a2 + 128) - a1[1];
  double v6 = *((float *)a1 + 6);
  BOOL v7 = sub_100F74190((uint64_t)a1, a2);
  BOOL v8 = v7;
  int v9 = *(unsigned __int8 *)(a2 + 352);
  if (*(unsigned char *)(a2 + 352)) {
    BOOL v10 = v5 <= v6;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10 || v7)
  {
    *(unsigned char *)a1 = 0;
    std::string __p = 0;
    long long v41 = 0uLL;
    BOOL v39 = *(double *)(a2 + 128) - a1[2] > 120.0;
    if (!v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      int v37 = 0;
      int v38 = 0;
      int v14 = 0;
      int v13 = 0;
      float v15 = 0.0;
      goto LABEL_27;
    }
  }
  else
  {
    std::string __p = 0;
    long long v41 = 0uLL;
    BOOL v39 = *(double *)(a2 + 128) - a1[2] > 120.0;
  }
  sub_100F7425C(a2, (void **)buf);
  uint64_t v11 = *(void *)buf;
  std::string __p = *(void **)buf;
  long long v41 = *(_OWORD *)&buf[8];
  uint64_t v12 = *(void *)&buf[8];
  if (*(void *)&buf[8] - *(void *)buf == 560)
  {
    sub_100F74658((uint64_t *)&__p, (float *)a2, (uint64_t)buf);
    int v13 = *(_DWORD *)buf;
    int v14 = *(_DWORD *)&buf[12];
    int v37 = *(_DWORD *)&buf[4];
    int v38 = *(_DWORD *)&buf[8];
    float v15 = *(float *)&buf[16];
    BOOL v16 = v39;
    if (*(float *)&buf[16] >= 10.0) {
      BOOL v16 = 0;
    }
    BOOL v17 = v16 && *(_DWORD *)&buf[12] <= 6;
    if (v17 && (*(_DWORD *)buf == 14 || *(_DWORD *)&buf[8] == 14 || *(_DWORD *)&buf[4] == 14))
    {
      *(unsigned char *)a1 = 1;
      a1[1] = *(double *)(a2 + 128);
      float v18 = *((float *)a1 + 6) + 30.0;
      if (v18 > 600.0) {
        float v18 = 600.0;
      }
      *((float *)a1 + 6) = v18;
    }
  }
  else
  {
    int v37 = 0;
    int v38 = 0;
    int v14 = 0;
    int v13 = 0;
    float v15 = 0.0;
  }
  if (*((unsigned char *)a1 + 2)) {
    *(unsigned char *)a1 = 1;
  }
LABEL_27:
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102306BB0);
  }
  char v19 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *(void *)(a2 + 120);
    uint64_t v21 = *(void *)(a2 + 128);
    int v22 = *(unsigned __int8 *)a1;
    int v23 = *(unsigned __int8 *)(a2 + 352);
    *(_DWORD *)uint64_t buf = 134221056;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v21;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)double v59 = -858993459 * ((unint64_t)(v12 - v11) >> 3);
    *(_WORD *)&v59[4] = 1024;
    *(_DWORD *)double v60 = v13;
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)uint64_t v61 = v37;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)uint64_t v62 = v38;
    *(_WORD *)&v62[4] = 1024;
    LODWORD(v63) = v14;
    WORD2(v63) = 2048;
    *(double *)((char *)&v63 + 6) = v15;
    HIWORD(v63) = 1024;
    *(_DWORD *)uint64_t v64 = v22;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)uint64_t v65 = v23;
    *(_WORD *)&v65[4] = 1024;
    BOOL v66 = v5 > v6;
    __int16 v67 = 1024;
    BOOL v68 = v8;
    __int16 v69 = 1024;
    BOOL v70 = v39;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AssistedCyclingDetector,beginTime,%f,endTime,%f,bufferSize,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f,assistedCyclingOverridden,%d,isMotionOverrideSet,%d,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d", buf, 0x5Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102306BB0);
    }
    uint64_t v29 = *(void *)(a2 + 120);
    uint64_t v30 = *(void *)(a2 + 128);
    int v31 = *(unsigned __int8 *)a1;
    int v32 = *(unsigned __int8 *)(a2 + 352);
    int v42 = 134221056;
    uint64_t v43 = v29;
    __int16 v44 = 2048;
    *(void *)uint64_t v45 = v30;
    *(_WORD *)&v45[8] = 1024;
    *(_DWORD *)unint64_t v46 = -858993459 * (((void)v41 - (void)__p) >> 3);
    *(_WORD *)&v46[4] = 1024;
    *(_DWORD *)uint64_t v47 = v13;
    *(_WORD *)&v47[4] = 1024;
    *(_DWORD *)uint64_t v48 = v37;
    *(_WORD *)&v48[4] = 1024;
    *(_DWORD *)uint64_t v49 = v38;
    *(_WORD *)&v49[4] = 1024;
    LODWORD(v50) = v14;
    WORD2(v50) = 2048;
    *(double *)((char *)&v50 + 6) = v15;
    HIWORD(v50) = 1024;
    *(_DWORD *)unint64_t v51 = v31;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)uint64_t v52 = v32;
    *(_WORD *)&v52[4] = 1024;
    BOOL v53 = v5 > v6;
    __int16 v54 = 1024;
    BOOL v55 = v8;
    __int16 v56 = 1024;
    BOOL v57 = v39;
    unint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAssistedCyclingDetector::detect(const CLNatalieModelInput &)", "%s\n", v33);
    if (v33 != buf) {
      free(v33);
    }
  }
  if (v4 != *(unsigned __int8 *)a1)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102306BB0);
    }
    unsigned int v24 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a2 + 128);
      int v26 = *(unsigned __int8 *)a1;
      *(_DWORD *)uint64_t buf = 134220544;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v4;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v26;
      *(_WORD *)double v59 = 1024;
      *(_DWORD *)&v59[2] = v13;
      *(_WORD *)double v60 = 1024;
      *(_DWORD *)&v60[2] = v37;
      *(_WORD *)uint64_t v61 = 1024;
      *(_DWORD *)&v61[2] = v38;
      *(_WORD *)uint64_t v62 = 1024;
      *(_DWORD *)&v62[2] = v14;
      LOWORD(v63) = 2048;
      *(double *)((char *)&v63 + 2) = v15;
      WORD5(v63) = 1024;
      HIDWORD(v63) = v5 > v6;
      *(_WORD *)uint64_t v64 = 1024;
      *(_DWORD *)&v64[2] = v8;
      *(_WORD *)uint64_t v65 = 1024;
      *(_DWORD *)&v65[2] = v39;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "AssistedCyclingOverrideState,endTime,%f,previousOverride,%d,currentOverride,%d,totalSamplesAboveVO2MaxThreshold,%d,totalSamplesAboveVAMThreshold,%d,totalSamplesAboveDiscordanceThreshold,%d,totalSamplesNonexertion,%d,medianAccelVectorMagnitude,%f,isAssistedOverrideTimedOut,%d,isNewCurrentSessionId,%d,isSessionDurationOk,%d", buf, 0x4Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102306BB0);
      }
      uint64_t v34 = *(void *)(a2 + 128);
      int v35 = *(unsigned __int8 *)a1;
      int v42 = 134220544;
      uint64_t v43 = v34;
      __int16 v44 = 1024;
      *(_DWORD *)uint64_t v45 = v4;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v35;
      *(_WORD *)unint64_t v46 = 1024;
      *(_DWORD *)&v46[2] = v13;
      *(_WORD *)uint64_t v47 = 1024;
      *(_DWORD *)&v47[2] = v37;
      *(_WORD *)uint64_t v48 = 1024;
      *(_DWORD *)&v48[2] = v38;
      *(_WORD *)uint64_t v49 = 1024;
      *(_DWORD *)&v49[2] = v14;
      LOWORD(v50) = 2048;
      *(double *)((char *)&v50 + 2) = v15;
      WORD5(v50) = 1024;
      HIDWORD(v50) = v5 > v6;
      *(_WORD *)unint64_t v51 = 1024;
      *(_DWORD *)&v51[2] = v8;
      *(_WORD *)uint64_t v52 = 1024;
      *(_DWORD *)&void v52[2] = v39;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAssistedCyclingDetector::detect(const CLNatalieModelInput &)", "%s\n", v36);
      if (v36 != buf) {
        free(v36);
      }
    }
  }
  int v27 = *(unsigned __int8 *)a1;
  if (__p) {
    operator delete(__p);
  }
  return v27 != 0;
}

void sub_100F74168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100F74190(uint64_t a1, uint64_t a2)
{
  memset(dst, 0, sizeof(dst));
  uuid_copy(dst, (const unsigned __int8 *)(a2 + 354));
  if (uuid_is_null(dst)) {
    return 0;
  }
  int v5 = uuid_compare((const unsigned __int8 *)(a1 + 28), dst);
  BOOL result = v5 != 0;
  if (*(unsigned char *)(a2 + 352))
  {
    if (v5)
    {
      uuid_copy((unsigned __int8 *)(a1 + 28), dst);
      *(void *)(a1 + ++*(void *)(result + 16) = *(void *)(a2 + 128);
      *(_DWORD *)(a1 + ++*(void *)(result + 24) = 1106247680;
      return 1;
    }
  }
  return result;
}

void sub_100F7425C(uint64_t a1@<X1>, void **a2@<X8>)
{
  int v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    double v6 = *(double *)(a1 + 128) + (double)v4 * -2.56;
    if (!(*(unsigned int (**)(void, double))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48), v6)
      || !(*(unsigned int (**)(void, char *, double))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v37, v6))
    {
      break;
    }
    char isTypeCycling = CLMotionActivity::isTypeCycling();
    char v8 = v39 ? isTypeCycling : 0;
    if ((v8 & 1) == 0) {
      break;
    }
    if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v6)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), v6)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), v6)
      && (*(unsigned int (**)(void, char *, double))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v34, v6)&& (*(unsigned int (**)(void, double *, double))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), v33, v6))
    {
      int v9 = (*(uint64_t (**)(void, char *, double))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), v30, v6);
      int v10 = v36 >= 0.6 ? v9 : 0;
      if (v10 == 1 && v33[0] > 0.0)
      {
        int v11 = v31;
        if (v31)
        {
          float v12 = v33[4];
          float v13 = v32;
          uint64_t v14 = v35;
          int v15 = v38;
          BOOL v17 = (double *)a2[1];
          BOOL v16 = (double *)a2[2];
          if (v17 >= v16)
          {
            char v19 = (double *)*a2;
            unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (unsigned char *)*a2) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0x666666666666666) {
              sub_1001D7FD4();
            }
            unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v16 - v19);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x333333333333333) {
              unint64_t v23 = 0x666666666666666;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23)
            {
              unsigned int v24 = (char *)sub_1002E5328(v5, v23);
              char v19 = (double *)*a2;
              BOOL v17 = (double *)a2[1];
            }
            else
            {
              unsigned int v24 = 0;
            }
            uint64_t v25 = (float *)&v24[40 * v20];
            *(double *)uint64_t v25 = v6;
            unsigned int v25[2] = v12;
            void v25[3] = v13;
            *((_DWORD *)v25 + 4) = v11;
            *((void *)v25 + 3) = v14;
            *((_DWORD *)v25 + 8) = v15;
            if (v17 == v19)
            {
              uint64_t v29 = &v24[40 * v20];
            }
            else
            {
              int v26 = &v24[40 * v20];
              do
              {
                long long v27 = *(_OWORD *)(v17 - 5);
                long long v28 = *(_OWORD *)(v17 - 3);
                uint64_t v29 = v26 - 40;
                *((_DWORD *)v26 - 2) = *((_DWORD *)v17 - 2);
                *(_OWORD *)(v26 - ++*(void *)(result + 24) = v28;
                *(_OWORD *)(v26 - ++*(void *)(result + 40) = v27;
                v17 -= 5;
                v26 -= 40;
              }
              while (v17 != v19);
            }
            float v18 = (double *)(v25 + 10);
            *a2 = v29;
            a2[1] = v25 + 10;
            a2[2] = &v24[40 * v23];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *BOOL v17 = v6;
            *((float *)v17 + 2) = v12;
            *((float *)v17 + 3) = v13;
            *((_DWORD *)v17 + 4) = v11;
            *((void *)v17 + 3) = v14;
            float v18 = v17 + 5;
            *((_DWORD *)v17 + 8) = v15;
          }
          a2[1] = v18;
        }
      }
    }
    ++v4;
  }
  while (v4 != 14);
}

void sub_100F74630(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F74658(uint64_t *a1@<X1>, float *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + ++*(void *)(result + 16) = 0;
  double v6 = sub_100F74AE0(&v28, 0xAuLL);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    float v13 = a2[342] * 1.2;
    do
    {
      uint64_t v14 = v7 + v8;
      float v15 = *(float *)(v14 + 12);
      int v16 = *(_DWORD *)(v14 + 16);
      double v17 = *(double *)(v14 + 24);
      float v18 = *(float *)(v14 + 32);
      sub_10106C638(*(float *)(v14 + 8), v15, a2[341]);
      float v20 = v19;
      float v21 = v17;
      float v22 = sub_10106B3C4((uint64_t)a2, v21);
      if ((v16 - 1) <= 1)
      {
        float v23 = 1.0 - (a2[345] - v17) / (a2[345] - a2[346]);
        BOOL v24 = v23 > 0.05 && v23 < 0.5;
        if (v24 && v20 > 7.5)
        {
          if (v20 > v13) {
            *(_DWORD *)a3 = ++v12;
          }
          if (v15 > 0.56) {
            *(_DWORD *)(a3 + 4) = ++v11;
          }
          if (v22 > 0.0 && (float)(v20 / v22) > 1.9) {
            *(_DWORD *)(a3 + 8) = ++v10;
          }
        }
      }
      if (v9 <= 9) {
        v28[v9] = v18;
      }
      ++v9;
      uint64_t v7 = *a1;
      v8 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3) > v9);
  }
  *(_DWORD *)(a3 + 12) = sub_100F74894((uint64_t)v6, a1, (uint64_t)a2);
  long long v27 = v28;
  if ((char *)v29 - (char *)v28 == 40)
  {
    if (v28 + 5 != v29)
    {
      sub_1004EF34C(v28, v28 + 5, v29, v26);
      long long v27 = v28;
    }
    *(float *)(a3 + ++*(void *)(result + 16) = v27[5];
  }
  else if (!v28)
  {
    return;
  }
  uint64_t v29 = v27;
  operator delete(v27);
}

void sub_100F7486C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F74894(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = (int)(-858993459 * ((a2[1] - *a2) >> 3));
  do
  {
    if (v6 >= v8)
    {
      double v15 = *(double *)(a3 + 128) + (double)(int)v6 * -2.56;
      if ((*(unsigned int (**)(void, double))(**(void **)(a3 + 24) + 48))(*(void *)(a3 + 24), v15))
      {
        if ((*(unsigned int (**)(void, uint64_t *, double))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), &v21, v15)&& v22 != 0)
        {
          float v18 = v23;
          BOOL v14 = v18 < -0.0278 || v22 == 3;
          goto LABEL_30;
        }
      }
      if (!(*(unsigned int (**)(void, double))(**(void **)(a3 + 16) + 48))(*(void *)(a3 + 16), v15))
      {
        BOOL v14 = 0;
        goto LABEL_30;
      }
      int v17 = (*(uint64_t (**)(void, double *, double))(**(void **)(a3 + 16) + 24))(*(void *)(a3 + 16), v24, v15);
      BOOL v14 = 0;
      if (!v17 || v24[0] <= 0.0) {
        goto LABEL_30;
      }
      float v10 = v24[4];
      BOOL v14 = v10 < 0.44;
    }
    else
    {
      uint64_t v9 = *a2 + v5;
      float v10 = *(float *)(v9 + 8);
      float v11 = *(float *)(v9 + 12);
      int v12 = *(_DWORD *)(v9 + 16);
      BOOL v14 = v11 < -0.0278 || v12 == 3;
      if (v10 < 0.44) {
        BOOL v14 = 1;
      }
    }
    if (v10 > 12.5) {
      BOOL v14 = 1;
    }
LABEL_30:
    if ((int)v7 > 6) {
      break;
    }
    uint64_t v7 = v14 ? (v7 + 1) : 0;
    ++v6;
    v5 += 40;
  }
  while (v6 != 36);
  return v7;
}

void sub_100F74AB0(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_100F74AE0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10017C6FC(a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_100F74B3C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F74C08(id a1)
{
  qword_1024826B0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSensorCalibrationControllerSilo"];
}

uint64_t sub_100F74CC8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F75504;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024826C0 != -1) {
    dispatch_once(&qword_1024826C0, block);
  }
  return qword_10248AFA0;
}

uint64_t sub_100F74F20(uint64_t a1, char a2)
{
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  int v4 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "fState,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    int v10 = *(_DWORD *)(a1 + 272);
    v14[0] = 67240192;
    v14[1] = v10;
    float v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSensorCalibrationController::start(BOOL)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (!*(_DWORD *)(a1 + 272))
  {
    if (sub_1000FC450())
    {
      sub_1000E9354(buf);
      sub_1004D34AC((uint64_t)buf, "Status", "start");
      sub_1000FC45C((uint64_t)buf, (uint64_t)"MotionSensorCalibration");
      sub_10013F3C4(buf);
    }
    *(unsigned char *)(a1 + 276) = a2;
    LOBYTE(v14[0]) = a2;
    *(_DWORD *)uint64_t buf = 0;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v14, 1, 0xFFFFFFFFLL, 0);
    if (*(unsigned char *)(a1 + 300))
    {
      if (!*(void *)(a1 + 328)) {
        operator new();
      }
      sub_101A97530(v6);
LABEL_29:
      __break(1u);
    }
    if (*(int *)(a1 + 344) >= 1)
    {
      sub_101A970EC(v6);
      goto LABEL_29;
    }
    sub_100134750(__p, "start");
    sub_100EBBFD8(a1 + 336, (uint64_t *)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    dispatch_resume(*(dispatch_object_t *)(a1 + 320));
    uint64_t v7 = *(void *)(a1 + 240);
    if (v7)
    {
      if (*(unsigned char *)(a1 + 171))
      {
        sub_101A973C4();
        goto LABEL_29;
      }
      *(void *)(a1 + 2++*(void *)(result + 40) = 0;
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *(NSObject **)(a1 + 256);
    if (v8)
    {
      dispatch_source_cancel(v8);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(void *)(a1 + 2++*(void *)(result + 56) = 0;
    }
    sub_100E09B78();
  }
  return 0;
}

void sub_100F75478(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_100F75504()
{
}

void sub_100F75550()
{
}

void sub_100F75574(uint64_t a1, void *a2)
{
  *(void *)sub_100F761B4(a1, "CLSensorCalibrationController", a2) = off_102306C00;
  operator new();
}

void sub_100F76070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1000DB0A0(a17);
  }
  uint64_t v19 = v17[48];
  v17[48] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_100EBBF9C(a12);
  sub_100F77128(v17 + 38, 0);
  uint64_t v20 = v17[33];
  v17[33] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v17[30];
  v17[30] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  sub_1006B1144(a13, 0);
  sub_100F76A20((uint64_t)v17);
  _Unwind_Resume(a1);
}

uint64_t sub_100F761B4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102306DF8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + ++*(void *)(result + 32) = a3;
  *(void *)(a1 + ++*(void *)(result + 40) = [a3 silo];
  *(void *)(a1 + ++*(void *)(result + 48) = 0;
  *(void *)(a1 + ++*(void *)(result + 64) = 0;
  *(void *)(a1 + ++*(void *)(result + 56) = a1 + 64;
  *(void *)(a1 + ++*(void *)(result + 88) = 0;
  *(void *)(a1 + ++*(void *)(result + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100F76244(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F76260(uint64_t a1)
{
}

void sub_100F76268(uint64_t a1)
{
  double v2 = sub_1000D3E50();
  double v3 = *(double *)(a1 + 288);
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  double v4 = v2 - v3;
  int v5 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
  {
    int v6 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)uint64_t buf = 67240448;
    int v11 = v6;
    __int16 v12 = 2050;
    double v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "state,%{public}d,elapsed,%{public}f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::onTimer()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v7 = *(void *)(a1 + 304);
  if (v7)
  {
    if ((*(_DWORD *)(a1 + 272) - 3) <= 0xFFFFFFFD) {
      sub_101A9769C();
    }
    float v8 = ceil(v4 * 8.0 / *(double *)(a1 + 312)) * 0.800000012 * 0.125;
    sub_1007F0E14(v7, v8);
  }
  if (v4 >= *(double *)(a1 + 312))
  {
    sub_100F78AB8(a1, 1);
    sub_100F77178(a1);
  }
}

void sub_100F764B8(uint64_t a1, int *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102306D88);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSensorCalibrationController::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102306D88);
    }
    float v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v14 = 2082;
      *(void *)&void v14[2] = "";
      *(_WORD *)&v14[10] = 2082;
      *(void *)&v14[12] = "activity";
      *(_WORD *)&v14[20] = 2050;
      *(void *)&v14[22] = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSensorCalibrationController::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  int v9 = *a2;
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  int v10 = *(void **)(a4 + 40);
  *(void *)uint64_t buf = _NSConcreteStackBlock;
  *(void *)BOOL v14 = 3221225472;
  *(void *)&v14[8] = sub_100F798E8;
  *(void *)&v14[16] = &unk_1022BBB58;
  *(void *)&v14[24] = a4;
  int v17 = v9;
  [v10 async:buf];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F766D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F766F0(uint64_t a1, io_registry_entry_t entry, int a3)
{
  if (a3 == -469794816)
  {
    double v4 = (id)IORegistryEntryCreateCFProperty(entry, @"Cloaked", kCFAllocatorDefault, 0);
    if (v4)
    {
      unsigned int v5 = [v4 BOOLValue];
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      int v6 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        unsigned int v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Charger cloaking status %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_102306DA8);
        }
        float v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLSensorCalibrationController::onCloakingStatusChangedBounce(void *, io_service_t, uint32_t, void *)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      sub_100F792D8(a1, v5);
    }
    else
    {
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      uint64_t v7 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Failed to get cloaking status", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_102306DA8);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLSensorCalibrationController::onCloakingStatusChangedBounce(void *, io_service_t, uint32_t, void *)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

uint64_t sub_100F76A20(uint64_t a1)
{
  *(void *)a1 = off_102306DF8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100F76AA4(uint64_t a1)
{
  *(void *)a1 = off_102306C00;
  if (sub_100743004())
  {
    io_object_t v2 = *(_DWORD *)(a1 + 192);
    if (v2)
    {
      IOObjectRelease(v2);
      *(_DWORD *)(a1 + 192) = 0;
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 184));
  }
  sub_100F76BE4(a1, 4);
  dispatch_resume(*(dispatch_object_t *)(a1 + 320));
  dispatch_release(*(dispatch_object_t *)(a1 + 320));
  uint64_t v3 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_100EBBF9C(a1 + 336);
  sub_100F77128((uint64_t *)(a1 + 304), 0);
  uint64_t v4 = *(void *)(a1 + 264);
  *(void *)(a1 + 2++*(void *)(result + 64) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 240);
  *(void *)(a1 + 2++*(void *)(result + 40) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1006B1144((uint64_t *)(a1 + 112), 0);

  return sub_100F76A20(a1);
}

void sub_100F76BE4(uint64_t a1, int a2)
{
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  uint64_t v4 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v5 = (const char *)qword_102306CD0[a2];
    }
    else {
      uint64_t v5 = "";
    }
    *(_DWORD *)uint64_t buf = 67240450;
    int v12 = a2;
    __int16 v13 = 2082;
    BOOL v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLSensorCalibrationController aborted,reason,%{public}d,%{public}s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a2 != 1 || !*(unsigned char *)(a1 + 276))
  {
    uint64_t v8 = *(void *)(a1 + 240);
    *(void *)(a1 + 2++*(void *)(result + 40) = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *(unsigned char *)(a1 + 171) = 0;
    int v9 = *(NSObject **)(a1 + 256);
    if (v9)
    {
      dispatch_source_cancel(v9);
      dispatch_release(*(dispatch_object_t *)(a1 + 256));
      *(void *)(a1 + 2++*(void *)(result + 56) = 0;
    }
    if (*(_DWORD *)(a1 + 272))
    {
      sub_100F78AB8(a1, 0);
LABEL_29:
      sub_1007795EC(*(void **)(a1 + 112), @"RegularCal.Abort");
      sub_100F77178(a1);
      return;
    }
    if (*(void *)(a1 + 328))
    {
      int v9 = sub_101A97AC8();
    }
    else if (!*(void *)(a1 + 304))
    {
      if (!*(void *)(a1 + 384)) {
        goto LABEL_29;
      }
LABEL_37:
      sub_101A97800(v9);
    }
    int v9 = sub_101A97964(v9);
    goto LABEL_37;
  }
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  int v6 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ignoring abort for user initiated calibration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100F76FCC(uint64_t a1)
{
  sub_100F76AA4(a1);

  operator delete();
}

id sub_100F77004(long long *a1, uint64_t a2)
{
  long long v5 = *a1;
  io_object_t v2 = *(void **)(a2 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100F7951C;
  v4[3] = &unk_1022B8680;
  void v4[4] = a2;
  return [v2 async:v4];
}

uint64_t sub_100F7707C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_100A08A84();
  uint64_t v3 = *(void *)(v1 + 328);

  return sub_1009D1EC4(v2, 1, v3, 1.0);
}

void sub_100F770BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 384);
  *(void *)(v1 + 384) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(unsigned char *)(v1 + 171) = 0;

  sub_100F76BE4(v1, 2);
}

uint64_t sub_100F77128(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1007F0DE8(result);
    operator delete();
  }
  return result;
}

void sub_100F77178(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 272))
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    uint64_t v2 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Calibration is already running", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    *(_WORD *)int v97 = 0;
    int v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v42);
LABEL_119:
    if (v42 != (char *)&buf) {
      free(v42);
    }
    return;
  }
  double v4 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 224);
  double v5 = *(double *)(a1 + 128) - v4;
  *(unsigned char *)(a1 + 172) = v5 <= 0.0;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102306DC8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG) || sub_10013D1A0(115, 2))
  {
    sub_10010F274((uint64_t)v97);
    if (*(double *)(a1 + 224) == -1.79769313e308)
    {
      sub_100132EFC(&v99[2], (uint64_t)"never", 5);
    }
    else
    {
      *(_DWORD *)&v99[*(void *)(*(void *)&v99[2] - 24) + 10] = *(_DWORD *)&v99[*(void *)(*(void *)&v99[2]
                                                                                               - 24)
                                                                                   + 10] & 0xFFFFFEFB | 4;
      std::ostream::operator<<();
    }
    sub_10010F274((uint64_t)v75);
    if (*(double *)(a1 + 232) == -1.79769313e308)
    {
      sub_100132EFC(v76, (uint64_t)"never", 5);
    }
    else
    {
      *(_DWORD *)((char *)&v76[1] + *(void *)(v76[0] - 24)) = *(_DWORD *)((unsigned char *)&v76[1]
                                                                            + *(void *)(v76[0] - 24)) & 0xFFFFFEFB | 4;
      std::ostream::operator<<();
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    int v6 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 168);
      int v8 = *(unsigned __int8 *)(a1 + 169);
      int v9 = *(unsigned __int8 *)(a1 + 170);
      int v67 = *(unsigned __int8 *)(a1 + 171);
      int v69 = *(unsigned __int8 *)(a1 + 172);
      double v10 = fmax(v5, 0.0);
      uint64_t v11 = *(void *)&v5;
      if (v5 <= 0.0) {
        uint64_t v11 = 0;
      }
      if (v10 <= 604800.0) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0x4122750000000000;
      }
      std::stringbuf::str();
      int v13 = SBYTE1(v84);
      BOOL v14 = (void **)v78;
      std::stringbuf::str();
      long long v15 = &v78;
      if (v13 < 0) {
        long long v15 = v14;
      }
      if (v74 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      int v17 = *(_DWORD *)(a1 + 212);
      int v18 = *(unsigned __int8 *)(a1 + 208);
      int buf = 67242498;
      *(_DWORD *)buf_4 = v7;
      *(_WORD *)&buf_4[4] = 1026;
      *(_DWORD *)&buf_4[6] = v8;
      LOWORD(v105) = 1026;
      *(_DWORD *)((char *)&v105 + 2) = v9;
      HIWORD(v105) = 1026;
      int v106 = v67;
      __int16 v107 = 1026;
      int v108 = v69;
      __int16 v109 = 2050;
      uint64_t v110 = v12;
      __int16 v111 = 2082;
      uint64_t v112 = v15;
      __int16 v113 = 2082;
      uint64_t v114 = v16;
      __int16 v115 = 1026;
      int v116 = v17;
      __int16 v117 = 1026;
      int v118 = v18;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BatteryReady,%{public}d,ThermalReady,%{public}d,DisplayReady,%{public}d,StaticReady,%{public}d,MinimumIntervalReady,%{public}d,timeToIntervalReady,%{public}.0f,sinceLastCal,%{public}s,sinceLastUnpluggedCalAttempt,%{public}s,ChargerFamily,%{public}x,ChargerCloaked,%{public}u", (uint8_t *)&buf, 0x4Au);
      if (v74 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE1(v84) < 0) {
        operator delete(v78);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      int v45 = *(unsigned __int8 *)(a1 + 168);
      int v46 = *(unsigned __int8 *)(a1 + 169);
      int v47 = *(unsigned __int8 *)(a1 + 170);
      int v48 = *(unsigned __int8 *)(a1 + 171);
      int v68 = *(unsigned __int8 *)(a1 + 172);
      double v49 = fmax(v5, 0.0);
      uint64_t v50 = *(void *)&v5;
      if (v5 <= 0.0) {
        uint64_t v50 = 0;
      }
      if (v49 <= 604800.0) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = 0x4122750000000000;
      }
      std::stringbuf::str();
      int v52 = v74;
      BOOL v53 = (void **)__p[0];
      std::stringbuf::str();
      __int16 v54 = __p;
      if (v52 < 0) {
        __int16 v54 = v53;
      }
      if (v72 >= 0) {
        BOOL v55 = &v71;
      }
      else {
        BOOL v55 = v71;
      }
      int v56 = *(_DWORD *)(a1 + 212);
      int v57 = *(unsigned __int8 *)(a1 + 208);
      LODWORD(v78) = 67242498;
      HIDWORD(v78) = v45;
      __int16 v79 = 1026;
      int v80 = v46;
      __int16 v81 = 1026;
      int v82 = v47;
      __int16 v83 = 1026;
      int v84 = v48;
      __int16 v85 = 1026;
      int v86 = v68;
      __int16 v87 = 2050;
      uint64_t v88 = v51;
      __int16 v89 = 2082;
      __int16 v90 = v54;
      __int16 v91 = 2082;
      __int16 v92 = v55;
      __int16 v93 = 1026;
      int v94 = v56;
      __int16 v95 = 1026;
      int v96 = v57;
      double v58 = (char *)_os_log_send_and_compose_impl();
      if (v72 < 0) {
        operator delete(v71);
      }
      if (v74 < 0) {
        operator delete(__p[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v58);
      if (v58 != (char *)&buf) {
        free(v58);
      }
    }
    *(void *)((char *)v75
    uint64_t v22 = v20;
    v76[0] = v20;
    if (v77 < 0) {
      operator delete((void *)v76[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    *(void *)int v97 = v19;
    *(void *)&v97[*(void *)(v19 - 24)] = v21;
    *(void *)&v99[2] = v22;
    if (v102 < 0) {
      operator delete(v101);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  if (!*(unsigned char *)(a1 + 168) || !*(unsigned char *)(a1 + 169) || !*(unsigned char *)(a1 + 170)) {
    return;
  }
  if (!*(unsigned char *)(a1 + 172))
  {
    if (*(void *)(a1 + 256))
    {
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      BOOL v24 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Still waiting for long wait timer", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419090 == -1) {
          goto LABEL_115;
        }
        goto LABEL_162;
      }
      return;
    }
    p_int buf = &qword_102419000;
    if (v5 > 0.0)
    {
      if (qword_102419090 == -1)
      {
LABEL_89:
        uint64_t v34 = qword_102419098;
        if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
        {
          int buf = 134349056;
          *(void *)buf_4 = (unint64_t)(v5 + 1.0);
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Starting long wait timer for %{public}llu seconds", (uint8_t *)&buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (p_buf[18] != -1) {
            dispatch_once(&qword_102419090, &stru_102306DA8);
          }
          unint64_t v35 = (unint64_t)(v5 + 1.0);
          *(_DWORD *)int v97 = 134349056;
          *(void *)&v97[4] = v35;
          long long v63 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v63);
          if (v63 != (char *)&buf) {
            free(v63);
          }
        }
        else
        {
          unint64_t v35 = (unint64_t)(v5 + 1.0);
        }
        double v36 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
        *(void *)(a1 + 2++*(void *)(result + 56) = v36;
        dispatch_time_t v37 = dispatch_walltime(0, 1000000000 * v35);
        dispatch_source_set_timer(v36, v37, 0x2540BE400uLL, 0x2540BE400uLL);
        int v38 = *(NSObject **)(a1 + 256);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100F78734;
        handler[3] = &unk_1022A3020;
        handler[4] = a1;
        dispatch_source_set_event_handler(v38, handler);
        dispatch_resume(*(dispatch_object_t *)(a1 + 256));
        return;
      }
LABEL_152:
      dispatch_once(&qword_102419090, &stru_102306DA8);
      goto LABEL_89;
    }
    sub_101A97C2C(qword_102419090 == -1);
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  if (!*(unsigned char *)(a1 + 171))
  {
    uint64_t v25 = *(void *)(a1 + 240);
    if (!v25) {
      goto LABEL_72;
    }
    double v26 = *(double *)(a1 + 248);
    if (v26 == 0.0)
    {
      sub_101A97DA8();
    }
    else
    {
      if (*(double *)(a1 + 120) == v26)
      {
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_102306DA8);
        }
        char v39 = qword_102419098;
        if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
        {
          uint64_t v40 = *(void *)(a1 + 248);
          int buf = 134349056;
          *(void *)buf_4 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Still waiting for static timer of %{public}f", (uint8_t *)&buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419090 != -1) {
            dispatch_once(&qword_102419090, &stru_102306DA8);
          }
          uint64_t v41 = *(void *)(a1 + 248);
          *(_DWORD *)int v97 = 134349056;
          *(void *)&v97[4] = v41;
          int v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v42);
          goto LABEL_119;
        }
        return;
      }
      *(void *)(a1 + 2++*(void *)(result + 40) = 0;
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      p_int buf = &qword_102419000;
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      long long v27 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = *(void *)(a1 + 248);
        uint64_t v29 = *(void *)(a1 + 120);
        int buf = 134349312;
        *(void *)buf_4 = v28;
        *(_WORD *)&buf_4[8] = 2050;
        uint64_t v105 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Resetting static timer. Wait duration changed %{public}f -> %{public}f", (uint8_t *)&buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_102306DA8);
        }
        uint64_t v64 = *(void *)(a1 + 248);
        uint64_t v65 = *(void *)(a1 + 120);
        *(_DWORD *)int v97 = 134349312;
        *(void *)&v97[4] = v64;
        __int16 v98 = 2050;
        *(void *)uint64_t v99 = v65;
        p_int buf = (uint64_t *)&buf;
        BOOL v66 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v66);
        if (v66 != (char *)&buf) {
          free(v66);
        }
      }
      if (!*(void *)(a1 + 240))
      {
LABEL_72:
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_102306DA8);
        }
        uint64_t v30 = qword_102419098;
        if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void *)(a1 + 120);
          int buf = 134349056;
          *(void *)buf_4 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Starting static timer for %{public}f", (uint8_t *)&buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419090 != -1) {
            dispatch_once(&qword_102419090, &stru_102306DA8);
          }
          uint64_t v61 = *(void *)(a1 + 120);
          *(_DWORD *)int v97 = 134349056;
          *(void *)&v97[4] = v61;
          uint64_t v62 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v62);
          if (v62 != (char *)&buf) {
            free(v62);
          }
        }
        sub_100E09B78();
      }
      sub_101A97F14();
    }
    goto LABEL_151;
  }
  if (!sub_10060DF30(*(_DWORD *)(a1 + 216)))
  {
    double v23 = 480.0;
    if (!*(unsigned char *)(a1 + 300)) {
      double v23 = 120.0;
    }
    goto LABEL_80;
  }
  if (!sub_1001B7CA8())
  {
LABEL_52:
    if (!sub_100743004())
    {
LABEL_81:
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      double v32 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = *(void *)(a1 + 312);
        int buf = 134217984;
        *(void *)buf_4 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "No coex; calibration runtime = %.0f sec",
          (uint8_t *)&buf,
          0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_102306DA8);
        }
        uint64_t v59 = *(void *)(a1 + 312);
        *(_DWORD *)int v97 = 134217984;
        *(void *)&v97[4] = v59;
        double v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v60);
        if (v60 != (char *)&buf) {
          free(v60);
        }
      }
      sub_100F74F20(a1, 0);
      return;
    }
    if (*(unsigned char *)(a1 + 208))
    {
      double v23 = 50.0;
LABEL_80:
      *(double *)(a1 + 312) = v23;
      goto LABEL_81;
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    __int16 v44 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Avoiding calibration during charging", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419090 == -1)
      {
LABEL_115:
        *(_WORD *)int v97 = 0;
        int v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()", "%s\n", v42);
        goto LABEL_119;
      }
LABEL_162:
      dispatch_once(&qword_102419090, &stru_102306DA8);
      goto LABEL_115;
    }
    return;
  }
  if (*(unsigned char *)(a1 + 181))
  {
    if (v4 >= *(double *)(a1 + 200)) {
      *(void *)(a1 + 312) = 0x4049000000000000;
    }
    goto LABEL_52;
  }
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  uint64_t v43 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Avoiding calibration during charging", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419090 == -1) {
      goto LABEL_115;
    }
    goto LABEL_162;
  }
}

void sub_100F786CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t sub_100F78734(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  uint64_t v2 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Long wait timer trigger.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 256));
  dispatch_release(*(dispatch_object_t *)(v1 + 256));
  *(void *)(v1 + 2++*(void *)(result + 56) = 0;
  return sub_100F77178(v1);
}

uint64_t sub_100F788E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 171) = 1;
  uint64_t v2 = *(void *)(v1 + 240);
  *(void *)(v1 + 2++*(void *)(result + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  uint64_t v3 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Static timer fired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::tryStartCalibration()_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_100F77178(v1);
}

uint64_t sub_100F78AB8(uint64_t a1, int a2)
{
  unsigned __int8 v29 = a2;
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  double v4 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)int buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopped sensor calibration, fState, %{public}d, successful, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    int v21 = *(_DWORD *)(a1 + 272);
    int v30 = 67240448;
    *(_DWORD *)uint64_t v31 = v21;
    *(_WORD *)&v31[4] = 1026;
    *(_DWORD *)&v31[6] = v29;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  if (sub_1000FC450())
  {
    sub_1000E9354(buf);
    sub_1004D34AC((uint64_t)buf, "Status", "stop");
    sub_1000EA238((uint64_t)buf, "FinishFlag", &v29);
    sub_1000FC45C((uint64_t)buf, (uint64_t)"MotionSensorCalibration");
    sub_10013F3C4(buf);
  }
  if (!*(_DWORD *)(a1 + 272)) {
    goto LABEL_33;
  }
  dispatch_suspend(*(dispatch_object_t *)(a1 + 320));
  int v6 = *(_DWORD *)(a1 + 272);
  if (v6 == 2)
  {
    buf[0] = *(unsigned char *)(a1 + 276);
    if (v29) {
      int v30 = 4;
    }
    else {
      int v30 = 3;
    }
    (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v30, buf, 1, 0xFFFFFFFFLL, 0);
    int v7 = *(void **)(a1 + 112);
    if (*(unsigned char *)(a1 + 180)) {
      CFStringRef v8 = @"VirusRunTime.PluggedIn";
    }
    else {
      CFStringRef v8 = @"VirusRunTime.OnBattery";
    }
    sub_1000D3E50();
    sub_1007795EC(v7, (uint64_t)v8);
    int v6 = *(_DWORD *)(a1 + 272);
  }
  if ((v6 - 1) > 1) {
    goto LABEL_33;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (!v29)
  {
    *(double *)(a1 + 2++*(void *)(result + 24) = Current - *(double *)(a1 + 128) + *(double *)(a1 + 160);
    if (qword_102419090 == -1) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
  if (Current - *(double *)(a1 + 224) >= *(double *)(a1 + 144))
  {
    *(double *)(a1 + 2++*(void *)(result + 24) = Current - *(double *)(a1 + 128) + *(double *)(a1 + 136);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    BOOL v14 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = *(double *)(a1 + 224);
      double v16 = v15 + *(double *)(a1 + 128);
      *(_DWORD *)int buf = 134349312;
      *(double *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 2050;
      double v34 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Scheduling double calibration,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      double v26 = *(double *)(a1 + 224);
      double v27 = v26 + *(double *)(a1 + 128);
      int v30 = 134349312;
      *(double *)uint64_t v31 = v26;
      *(_WORD *)&v31[8] = 2050;
      double v32 = v27;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  else
  {
    *(double *)(a1 + 2++*(void *)(result + 24) = Current;
  }
  sub_1007795EC(*(void **)(a1 + 112), @"RegularCal.Finish");
  while (1)
  {
    *(void *)int buf = *(void *)(a1 + 224);
    int v30 = 5;
    (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v30, buf, 1, 0xFFFFFFFFLL, 0);
    uint64_t v17 = sub_1000A6958();
    sub_10016332C(v17, "GyroCalibrationLastCalibration", (const void *)(a1 + 224));
LABEL_33:
    sub_100F77128((uint64_t *)(a1 + 304), 0);
    if (*(void *)(a1 + 328))
    {
      uint64_t v18 = sub_100A08A84();
      sub_1009D26C4(v18, 1, *(void *)(a1 + 328));
      uint64_t v19 = *(void *)(a1 + 328);
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      *(void *)(a1 + 328) = 0;
    }
    buf[0] = *(unsigned char *)(a1 + 276);
    int v30 = 1;
    (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v30, buf, 1, 0xFFFFFFFFLL, 0);
    if (*(int *)(a1 + 344) >= 1) {
      sub_100EBC6AC(a1 + 336);
    }
    uint64_t result = *(void *)(a1 + 384);
    *(void *)(a1 + 384) = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(unsigned char *)(a1 + 171) = 0;
    if (!*(void *)(a1 + 240)) {
      break;
    }
    sub_101A98080(result);
    __break(1u);
LABEL_48:
    dispatch_once(&qword_102419090, &stru_102306DA8);
LABEL_22:
    double v10 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEFAULT))
    {
      double v11 = *(double *)(a1 + 224);
      double v12 = v11 + *(double *)(a1 + 128);
      *(_DWORD *)int buf = 134349312;
      *(double *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      double v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Scheduling retry calibration after previous aborted run,fLastCalibration,%{public}f,expectedNextCalibration,%{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      double v23 = *(double *)(a1 + 224);
      double v24 = v23 + *(double *)(a1 + 128);
      int v30 = 134349312;
      *(double *)uint64_t v31 = v23;
      *(_WORD *)&v31[8] = 2050;
      double v32 = v24;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::teardown(BOOL)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.CoreMotion.gyrocal.abort", 0, 0, 0);
  }
  *(unsigned char *)(a1 + 276) = 0;
  *(unsigned char *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  return result;
}

void sub_100F792BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100F792D8(uint64_t a1, char a2)
{
  if (sub_100743004())
  {
    double v4 = *(void **)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100F794CC;
    void v7[3] = &unk_1022BBA18;
    void v7[4] = a1;
    char v8 = a2;
    [v4 async:v7];
  }
  else
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    int v5 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Getting cloaking event for unexpected HW", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSensorCalibrationController::onCloakingStatusChanged(BOOL)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100F794CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 216) == 3)
  {
    *(unsigned char *)(v2 + 208) = *(unsigned char *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 40))
    {
      double v3 = 480.0;
      if (!*(unsigned char *)(v2 + 300)) {
        double v3 = 120.0;
      }
      *(double *)(v2 + 312) = v3;
      sub_100F76BE4(v2, 5);
    }
  }
}

void sub_100F7951C(uint64_t a1)
{
}

void sub_100F7952C(uint64_t a1, uint64_t a2)
{
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_102306DA8);
  }
  double v4 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    double v6 = *(float *)(a2 + 8);
    *(_DWORD *)int buf = 67240448;
    int v21 = v5;
    __int16 v22 = 2050;
    double v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "state,%{public}d,temperature,%{public}f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    int v13 = *(_DWORD *)(a1 + 272);
    double v14 = *(float *)(a2 + 8);
    int v16 = 67240448;
    int v17 = v13;
    __int16 v18 = 2050;
    double v19 = v14;
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  float v7 = *(float *)(a1 + 280);
  if (v7 == 3.4028e38)
  {
    float v7 = *(float *)(a2 + 8);
    *(float *)(a1 + 280) = v7;
  }
  int v8 = *(_DWORD *)(a1 + 272);
  if (v8 == 1)
  {
    if (*(float *)(a2 + 8) >= (float)(v7 + *(float *)(a1 + 296)))
    {
      int v16 = 2;
      (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v16, buf, 1, 0xFFFFFFFFLL, 0);
      *(_DWORD *)(a1 + 272) = 2;
    }
  }
  else if (v8 != 2)
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_102306DA8);
    }
    int v9 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)int buf = 67240192;
      int v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Warning: Bad state,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      int v11 = *(_DWORD *)(a1 + 272);
      int v16 = 67240192;
      int v17 = v11;
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100F798E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 64);
  switch(v3)
  {
    case 13:
      *(unsigned char *)(v2 + 169) = *(_DWORD *)(a1 + 40) < 6;
      if (*(int *)(a1 + 40) >= 10) {
        sub_100F76BE4(v2, 3);
      }
      break;
    case 10:
      *(unsigned char *)(v2 + 170) = *(unsigned char *)(a1 + 40) ^ 1;
      break;
    case 7:
      *(_DWORD *)(v2 + 212) = *(_DWORD *)(a1 + 60);
      int v4 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)(v2 + 2++*(void *)(result + 16) = v4;
      *(unsigned char *)(v2 + 181) = *(unsigned char *)(a1 + 48);
      BOOL v5 = *(double *)(a1 + 40) > *(double *)(v2 + 152) && *(unsigned char *)(a1 + 49) != 0;
      *(unsigned char *)(v2 + ++*(void *)(result + 168) = v5;
      if (!*(unsigned char *)(a1 + 49))
      {
        sub_100F76BE4(v2, 1);
        int v4 = *(_DWORD *)(v2 + 216);
      }
      if (sub_10060DF30(v4) && !*(unsigned char *)(v2 + 181) && sub_1001B7CA8()) {
        sub_100F76BE4(v2, 5);
      }
      float v9 = *(double *)(a1 + 40);
      *(float *)(v2 + ++*(void *)(result + 176) = v9;
      *(unsigned char *)(v2 + 180) = *(unsigned char *)(a1 + 49);
      break;
    default:
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_102306DA8);
      }
      double v6 = qword_102419098;
      if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_ERROR))
      {
        int v7 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)int buf = 67240192;
        int v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Warning: Unexpected notification %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419090 != -1) {
          dispatch_once(&qword_102419090, &stru_102306DA8);
        }
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLSensorCalibrationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)_block_invoke", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      break;
  }
  sub_100F77178(v2);
}

uint64_t sub_100F79B90(void *a1)
{
  uint64_t v3 = a1[28];
  int v2 = 5;
  (*(void (**)(void *, int *, uint64_t *, uint64_t, uint64_t, void))(*a1 + 152))(a1, &v2, &v3, 1, 0xFFFFFFFFLL, 0);
  return 1;
}

uint64_t sub_100F79BF8()
{
  return 1;
}

void *sub_100F79C00@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100F79C7C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_102306FB8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + ++*(void *)(result + 24) = a5;
  *(void *)(a1 + ++*(void *)(result + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    double v12 = a3;
  }
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + ++*(void *)(result + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100F79D60()
{
}

void sub_100F79E1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100F79E58(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        float v9 = (uint64_t *)v4;
      }
      else {
        float v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)int buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102306D88);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)int buf = 136446466;
        double v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102306D88);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        double v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::removeClient(int) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100F7A0E8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100F7A19C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100F7A1E4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100F7A22C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100F7A274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102475810);
}

uint64_t sub_100F7A2A0(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)int v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          unsigned __int8 v29 = (uint64_t *)v25;
        }
        else {
          unsigned __int8 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)int buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + ++*(void *)(result + 32) = v36;
        *(void *)int buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100F7D0A4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102475811;
        int v39 = v17;
        *(void *)int buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)int buf = &v39;
        uint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)int buf = &v39;
        double v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)int buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + ++*(void *)(result + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)int buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102306D88);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    double v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v15 = (void *)*v15;
    }
    *(_DWORD *)int buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102306D88);
    }
    dispatch_time_t v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      dispatch_time_t v37 = (void *)*v37;
    }
    *(_DWORD *)int v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100F7A744(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102306D88);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)int buf = 136446466;
      double v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102306D88);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100F7A9C8(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102306D88);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102306D88);
                }
                unsigned __int8 v29 = a1 + 8;
                if (a1[31] < 0) {
                  unsigned __int8 v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100F7AD9C(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x20uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void v6[3] = *a3;
  uint64_t *v6 = (uint64_t)off_102306ED8;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100F7AE50(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F7AE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_100F7AEB8(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102306D88);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)int buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    unsigned __int8 v29 = v30;
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x20uLL);
    v18[1] = 0;
    _OWORD v18[2] = 0;
    *BOOL v18 = (uint64_t)off_102306ED8;
    void v18[3] = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_100F7BBB0();
  }
  os_activity_scope_leave(&state);
}

void sub_100F7B49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100F7B4E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102306D88);
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)int buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102306D88);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102306D88);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)int buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102306D88);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102306D88);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)int buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102306D88);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100F7BA98(uint64_t a1)
{
  sub_100F7D034(a1);

  operator delete();
}

void sub_100F7BAD0(uint64_t a1, int a2, void *a3)
{
  sub_100F7C1E0(a3);
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0, &v6, v5, *(void *)(a1 + 32));
  }
}

void sub_100F7BB20(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F7BB50(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100F7BB80(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100F7BBB0()
{
}

void sub_100F7BC5C(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        double v49 = v9;
        sub_100F7C1E0(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_100F7C04C(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              unsigned __int8 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  unsigned __int8 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              double v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102306D88);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)int buf = 136446466;
                BOOL v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102306D88);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100F7C04C(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32);
    sub_100F7C1E0(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80;
    int v12 = (uint64_t **)(*(void *)a3 + 40);
    int v15 = (int *)(*(void *)a2 + 32);
    uint64_t v13 = sub_1000EB1B8(v12, v15, (uint64_t)&unk_101D0B290, &v15);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v14];
    }
  }
  return result;
}

void sub_100F7C144(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102306ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100F7C164(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102306ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100F7C1C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_100F7C1E0(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sub_100F7C27C(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_100F7C608(a1);
    }
  }
}

void sub_100F7C27C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_100F7C9C8((uint64_t)&v6, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102306F18);
    }
    int v3 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D996E1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_18:
        int v7 = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D996E1 & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorCalibrationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_20:
      dispatch_once(&qword_102418F90, &stru_102306F18);
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102306F18);
    }
    uint64_t v4 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D996E1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
}

id sub_100F7C608(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102306F18);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D996E1 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSensorCalibrationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102306F18);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D996E1 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102306F18);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100F7C9C8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102393800))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
    {
      int v3 = (void *)sub_101A981EC();
      sub_100F7CA50(v3);
      return;
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  [a2 cppObjectPtr];
}

void sub_100F7CA50(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_100F7CA80(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_102306F48;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100F7CC08;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100F7CC1C;
  v12[3] = &unk_1022B6C10;
  void v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100F7CBE0(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F7CC08(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + ++*(void *)(result + 24) = 1;
  return result;
}

BOOL sub_100F7CC1C(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100F7CC38(uint64_t a1)
{
  sub_100F7CF2C(a1);

  operator delete();
}

id sub_100F7CC70(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102306F88);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v29 = 0x8000000101D99759 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v30 = 2048;
      uint64_t v31 = 16;
      __int16 v32 = 2048;
      unint64_t v33 = a4;
      __int16 v34 = 1024;
      int v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102306F88);
      }
      int v20 = 136315906;
      unint64_t v21 = 0x8000000101D99759 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v22 = 2048;
      uint64_t v23 = 16;
      __int16 v24 = 2048;
      unint64_t v25 = a4;
      __int16 v26 = 1024;
      int v27 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Temperature>::dispatchData(int, const void *, size_t) [T = CLGyro::Temperature]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  uint64_t v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100F7CFA8;
  void v16[3] = &unk_1022F1228;
  void v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v10;
  return [v13 async:v16];
}

uint64_t sub_100F7CF2C(uint64_t a1)
{
  *(void *)a1 = off_102306F48;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100F7CFA8(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    int v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[8];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_100F7D004(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100F7D034(uint64_t a1)
{
  *(void *)a1 = &off_102306FB8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + ++*(void *)(result + 16) = 0;
  return a1;
}

void sub_100F7D0A4()
{
}

uint64_t sub_100F7D150(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

BOOL sub_100F7D170()
{
  id v2 = *(NSObject **)(v0 + 152);
  return os_signpost_enabled(v2);
}

uint64_t sub_100F7D19C(uint64_t a1)
{
  id v2 = sub_100134750((void *)a1, "kBiomeAirplaneModeOff");
  sub_100134750(v2 + 3, "kBiomeAirplaneModeOn");
  sub_100134750((void *)(a1 + 48), "kBiomeRRCUnknown");
  sub_100134750((void *)(a1 + 72), "kBiomeRRCIdle");
  sub_100134750((void *)(a1 + 96), "kBiomeRRCConnected");
  *(_OWORD *)(a1 + 120) = xmmword_101D99770;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102306FD0);
  }
  int v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome helper started", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCellularBiomePublisherHelper::CLCellularBiomePublisherHelper()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return a1;
}

void sub_100F7D3AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F7D430(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102306FD0);
  }
  id v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome helper ended", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCellularBiomePublisherHelper::~CLCellularBiomePublisherHelper()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100F7D618(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100F7D63C(uint64_t a1, const char *a2)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v4 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v4 = *(const char **)v4;
  }
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, v4, 0x8000100u);
  char v6 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0) {
    char v6 = *(const char **)a1;
  }
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x8000100u);
  if (CFEqual(v3, kCTRegistrationStatusDenied)
    || CFEqual(v3, kCTRegistrationStatusSearching)
    || CFEqual(v3, kCTRegistrationStatusNotRegistered))
  {
    if (*(_DWORD *)(a1 + 124) == 4) {
      int v8 = 4;
    }
    else {
      int v8 = 3;
    }
  }
  else if (CFEqual(v3, kCTRegistrationStatusRegisteredHome) || CFEqual(v3, kCTRegistrationStatusRegisteredRoaming))
  {
    int v8 = 1;
  }
  else if (CFEqual(v3, kCTRegistrationStatusEmergencyOnly))
  {
    int v8 = 2;
  }
  else if (CFEqual(v3, v5))
  {
    int v8 = 4;
  }
  else
  {
    CFEqual(v3, v7);
    int v8 = 0;
  }
  if (v8 == *(_DWORD *)(a1 + 124))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    id v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      int v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, No Biome donation, state, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_42:
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onStateNotification(const std::string &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        goto LABEL_26;
      }
LABEL_44:
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
      goto LABEL_42;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1++*(void *)(result + 24) = v8;
    [objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source") sendEvent:[objc_alloc((Class)BMDeviceCellularQualityStatus) initWithStarting:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1) rat:*(unsigned int *)(a1 + 120) deviceRegistrationState:*(unsigned int *)(a1 + 124) quality:*(unsigned int *)(a1 + 128) rrcStatus:*(unsigned int *)(a1 + 132)]];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    uint64_t v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 124);
      *(_DWORD *)int buf = 67109120;
      int v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, state, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_42;
      }
      goto LABEL_44;
    }
  }
LABEL_26:
  if (v3) {
    CFRelease(v3);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_100F7DAE8(unsigned int *a1, void *a2)
{
  id v3 = [a2 allValues];
  if (v3) {
    unsigned int v4 = [[v3 objectAtIndexedSubscript:0] integerValue];
  }
  else {
    unsigned int v4 = -1;
  }
  if (v4 == a1[32])
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    CFStringRef v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      unsigned int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, No Biome donation, LQM, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_19:
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onLinkQualityNotification(NSDictionary *)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
LABEL_21:
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
      goto LABEL_19;
    }
  }
  else
  {
    a1[32] = v4;
    [objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source"), "sendEvent:", [objc_alloc((Class)BMDeviceCellularQualityStatus) initWithStarting:rat:deviceRegistrationState:quality:rrcStatus:](NSNumber, "numberWithBool:", 1), a1[30], a1[31], [NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[32]), a1[33])];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    char v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v7 = a1[32];
      *(_DWORD *)int buf = 67109120;
      unsigned int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, LQM, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
}

void sub_100F7DE38(uint64_t a1, uint64_t a2)
{
  id v2 = (const void **)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  size_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 95);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 80);
  }
  if (v6 != v7) {
    goto LABEL_17;
  }
  if (v8 >= 0) {
    id v9 = (unsigned __int8 *)(a1 + 72);
  }
  else {
    id v9 = *(unsigned __int8 **)(a1 + 72);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v9, v5)) {
      goto LABEL_17;
    }
LABEL_28:
    int v15 = 1;
    goto LABEL_32;
  }
  if (!v4) {
    goto LABEL_28;
  }
  unsigned int v10 = v2;
  uint64_t v11 = v4;
  while (*(unsigned __int8 *)v10 == *v9)
  {
    unsigned int v10 = (const void **)((char *)v10 + 1);
    ++v9;
    if (!--v11) {
      goto LABEL_28;
    }
  }
LABEL_17:
  uint64_t v12 = *(unsigned __int8 *)(a1 + 119);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a1 + 104);
  }
  if (v6 != v12) {
    goto LABEL_30;
  }
  if (v13 >= 0) {
    int v14 = (unsigned __int8 *)(a1 + 96);
  }
  else {
    int v14 = *(unsigned __int8 **)(a1 + 96);
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v2, v14, v5)) {
      goto LABEL_31;
    }
LABEL_30:
    int v15 = 0;
    goto LABEL_32;
  }
  if (v4)
  {
    while (*(unsigned __int8 *)v2 == *v14)
    {
      id v2 = (const void **)((char *)v2 + 1);
      ++v14;
      if (!--v4) {
        goto LABEL_31;
      }
    }
    goto LABEL_30;
  }
LABEL_31:
  int v15 = 2;
LABEL_32:
  if (v15 == *(_DWORD *)(a1 + 132))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    uint64_t v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      int v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, No Biome donation, RRC, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_47:
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellularBiomePublisherHelper::onRRCNotification(const std::string &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
        return;
      }
LABEL_49:
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
      goto LABEL_47;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1++*(void *)(result + 32) = v15;
    [objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend((id)BiomeLibrary(), "Device"), "Wireless"), "CellularQualityStatus"), "source") sendEvent:[objc_alloc((Class)BMDeviceCellularQualityStatus) initWithStarting:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1) rat:*(unsigned int *)(a1 + 120) deviceRegistrationState:*(unsigned int *)(a1 + 124) quality:*(unsigned int *)(a1 + 128) rrcStatus:*(unsigned int *)(a1 + 132)]];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102306FD0);
    }
    long long v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)int buf = 67109120;
      int v21 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#EmergencyBiome, Biome donation, RRC, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_47;
      }
      goto LABEL_49;
    }
  }
}

void sub_100F7E268(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100F7E298(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, double a5)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  sub_100A19A7C(a1, (long long *)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_102307000;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 72), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(a1 + ++*(void *)(result + 88) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 72) = v9;
  }
  sub_100EBBEB0(a1 + 96, a4, a1, a5);
  return a1;
}

void sub_100F7E384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_100A19B98(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100F7E3CC(uint64_t a1)
{
  *(void *)a1 = off_102307000;
  sub_100172E1C(a1);
  sub_100EBBF9C(a1 + 96);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }

  return sub_100A19B98(a1);
}

void sub_100F7E440(uint64_t a1)
{
  sub_100F7E3CC(a1);

  operator delete();
}

void sub_100F7E478(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) && *(int *)(a1 + 104) <= 0)
  {
    if (*(char *)(a1 + 95) < 0)
    {
      sub_1000DC48C(__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 72);
      uint64_t v3 = *(void *)(a1 + 88);
    }
    sub_100EBBFD8(a1 + 96, (uint64_t *)__p);
    if (SHIBYTE(v3) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100A1A090(a1);
}

void sub_100F7E508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F7E674(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, long long *a10, char a11)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + ++*(void *)(result + 16) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + ++*(void *)(result + 32) = 0;
  *(void *)(a1 + ++*(void *)(result + 40) = a6;
  *(void *)(a1 + ++*(void *)(result + 48) = a7;
  *(unsigned char *)(a1 + ++*(void *)(result + 56) = a8;
  *(unsigned char *)(a1 + 57) = a9;
  if (*((char *)a10 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), *(void **)a10, *((void *)a10 + 1));
  }
  else
  {
    long long v13 = *a10;
    *(void *)(a1 + 80) = *((void *)a10 + 2);
    *(_OWORD *)(a1 + ++*(void *)(result + 64) = v13;
  }
  *(unsigned char *)(a1 + ++*(void *)(result + 88) = a11;
  *(_OWORD *)std::string __p = *(_OWORD *)a5;
  uint64_t v16 = *(void *)(a5 + 16);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + ++*(void *)(result + 16) = 0;
  *(void *)a5 = 0;
  sub_100F7E8A8((void *)a1, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_100F7E73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  long long v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + ++*(void *)(result + 24) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F7E780(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  *(_OWORD *)int v20 = *(_OWORD *)a5;
  uint64_t v21 = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + ++*(void *)(result + 16) = 0;
  if (*(char *)(a10 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a10, *(void *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a10;
    uint64_t v19 = *(void *)(a10 + 16);
  }
  sub_100F7E674(a1, a2, a3, a4, (uint64_t)v20, a6, a7, a8, a9, (long long *)__p, 11);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (v20[0]) {
    operator delete(v20[0]);
  }
  return a1;
}

void sub_100F7E878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100F7E8A8(void *a1, uint64_t a2)
{
  uint64_t result = *(char **)a2;
  uint64_t v4 = *(char **)(a2 + 8);
  if (*(char **)a2 == v4) {
    sub_101A98368();
  }
  if (*((_DWORD *)v4 - 1) != -1)
  {
    unint64_t v6 = *(void *)(a2 + 16);
    if ((unint64_t)v4 >= v6)
    {
      uint64_t v8 = (v4 - result) >> 2;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 62) {
        sub_1001D7FD4();
      }
      uint64_t v10 = v6 - (void)result;
      if (v10 >> 1 > v9) {
        unint64_t v9 = v10 >> 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        uint64_t v12 = (char *)sub_10017EA34(a2 + 16, v11);
        uint64_t result = *(char **)a2;
        uint64_t v4 = *(char **)(a2 + 8);
      }
      else
      {
        uint64_t v12 = 0;
      }
      long long v13 = &v12[4 * v8];
      uint64_t v14 = &v12[4 * v11];
      *(_DWORD *)long long v13 = -1;
      uint64_t v7 = v13 + 4;
      while (v4 != result)
      {
        int v15 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v13 - 1) = v15;
        v13 -= 4;
      }
      *(void *)a2 = v13;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + ++*(void *)(result + 16) = v14;
      if (result)
      {
        operator delete(result);
        uint64_t result = *(char **)a2;
      }
      else
      {
        uint64_t result = v13;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v4 = -1;
      uint64_t v7 = v4 + 4;
    }
    *(void *)(a2 + 8) = v7;
  }
  uint64_t v16 = a1[2];
  a1[2] = result;
  *(void *)a2 = v16;
  uint64_t v17 = a1[3];
  a1[3] = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v17;
  uint64_t v18 = a1[4];
  a1[4] = *(void *)(a2 + 16);
  *(void *)(a2 + ++*(void *)(result + 16) = v18;
  return result;
}

uint64_t sub_100F7E9DC(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_100F7E9E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_100F7E9EC(uint64_t a1)
{
  return *(char *)(a1 + 88);
}

uint64_t sub_100F7E9F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

char *sub_100F7E9FC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[87] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 8), *((void *)result + 9));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 4);
  *(void *)(a2 + ++*(void *)(result + 16) = *((void *)result + 10);
  return result;
}

uint64_t sub_100F7EA28(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 48) = a2;
  return result;
}

void sub_100F7EA30(char a1@<W0>, const __CFDictionary *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = 0;
  long long v47 = off_102307078;
  long long v48 = *(_OWORD *)&off_102307088;
  long long v49 = off_102307098;
  long long v43 = off_102307038;
  long long v44 = *(_OWORD *)&off_102307048;
  long long v45 = off_102307058;
  long long v46 = *(_OWORD *)&off_102307068;
  do
  {
    unint64_t v9 = (char *)&v43 + v8;
    *((_DWORD *)v9 + 2) = sub_100F7ED78(a2, *(CFStringRef *)((char *)&v43 + v8));
    v9[12] = 1;
    v8 += 16;
  }
  while (v8 != 112);
  if (!CFDictionaryContainsKey(a2, @"SCAN_CHANNELS")) {
    sub_101A984E0();
  }
  std::string __p = 0;
  BOOL v41 = 0;
  unint64_t v42 = 0;
  if (*(unsigned char *)(a4 + 24))
  {
    if (&__p != (void **)a4) {
      sub_1000FB43C((char *)&__p, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
    }
  }
  else
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"SCAN_CHANNELS");
    CFIndex Count = CFArrayGetCount(Value);
    sub_1001F6538(&__p, Count);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, i);
        int v14 = sub_100F7ED78(ValueAtIndex, @"CHANNEL");
        int v15 = v14;
        uint64_t v16 = v41;
        if ((unint64_t)v41 >= v42)
        {
          uint64_t v18 = __p;
          uint64_t v19 = ((char *)v41 - (unsigned char *)__p) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v21 = v42 - (void)__p;
          if ((uint64_t)(v42 - (void)__p) >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            uint64_t v23 = (char *)sub_10017EA34((uint64_t)&v42, v22);
            uint64_t v18 = __p;
            uint64_t v16 = v41;
          }
          else
          {
            uint64_t v23 = 0;
          }
          __int16 v24 = &v23[4 * v19];
          *(_DWORD *)__int16 v24 = v15;
          uint64_t v17 = v24 + 4;
          while (v16 != v18)
          {
            int v25 = *--v16;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
          std::string __p = v24;
          BOOL v41 = v17;
          unint64_t v42 = (unint64_t)&v23[4 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          _DWORD *v41 = v14;
          uint64_t v17 = v16 + 1;
        }
        BOOL v41 = v17;
      }
    }
  }
  int v26 = DWORD2(v43);
  int v27 = DWORD2(v44);
  int v28 = DWORD2(v45);
  BOOL v38 = 0;
  uint64_t v39 = 0;
  int v37 = 0;
  sub_10010F834(&v37, __p, (uint64_t)v41, ((char *)v41 - (unsigned char *)__p) >> 2);
  uint64_t v29 = SDWORD2(v46);
  uint64_t v30 = SDWORD2(v47);
  int v31 = DWORD2(v48);
  int v32 = DWORD2(v49);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v36 = *(void *)(a3 + 16);
  }
  sub_100F7E674(a5, v26, v27, v28, (uint64_t)&v37, v29, v30, v31 != 0, v32 != 0, (long long *)__dst, a1);
  if (SHIBYTE(v36) < 0) {
    operator delete(__dst[0]);
  }
  if (v37)
  {
    BOOL v38 = v37;
    operator delete(v37);
  }
  if (__p)
  {
    BOOL v41 = __p;
    operator delete(__p);
  }
}

void sub_100F7ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F7ED78(const __CFDictionary *a1, CFStringRef theString)
{
  CFStringGetCStringPtr(theString, 0x8000100u);
  if (!CFDictionaryContainsKey(a1, theString)) {
    sub_101A986AC();
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, theString);
  unsigned int valuePtr = 0;
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)) {
    sub_101A9884C();
  }
  return valuePtr;
}

double sub_100F7EE04(void *a1, float a2)
{
  if (a2 <= 0.0 || a2 > 1.0) {
    sub_101A989EC(a2);
  }
  double v3 = (double)(a1[5] + 40)
     / 1000.0
     * (double)((((uint64_t)(a1[3] - a1[2]) >> 2) - 1) * (unint64_t)*(unsigned int *)a1);
  return (v3 - v3 * a2) / a2;
}

double sub_100F7EE80(void *a1)
{
  return (double)(a1[5] + 40)
       / 1000.0
       * (double)((((uint64_t)(a1[3] - a1[2]) >> 2) - 1) * (unint64_t)*(unsigned int *)a1);
}

void sub_100F7EEBC(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

BOOL sub_100F7EF8C()
{
  id v2 = *(NSObject **)(v0 + 952);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_100F7EFA8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x30u);
}

BOOL sub_100F7EFC0()
{
  uint64_t v1 = qword_1024193B8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_100F7EFE0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_INFO, a4, a5, 0x30u);
}

BOOL sub_100F7EFF8()
{
  id v2 = *(NSObject **)(v0 + 952);
  return os_signpost_enabled(v2);
}

uint64_t sub_100F7F010()
{
  sub_10010F274((uint64_t)v11);
  uint64_t v0 = v12[0];
  *(void *)((char *)&v12[2] + *(void *)(v12[0] - 24)) = 8;
  *(_DWORD *)((char *)&v12[1] + *(void *)(v0 - 24)) = *(_DWORD *)((unsigned char *)&v12[1] + *(void *)(v0 - 24)) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v1 = sub_100132EFC(v12, (uint64_t)", ", 2);
  uint64_t v2 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 - 24) + ++*(void *)(result + 16) = 8;
  *(_DWORD *)((char *)v1 + *(void *)(v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(v2 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v3 = sub_100132EFC(v12, (uint64_t)", hacc, ", 8);
  uint64_t v4 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v3 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v4 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v5 = sub_100132EFC(v12, (uint64_t)", alt, ", 7);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v7 = sub_100132EFC(v12, (uint64_t)", vacc, ", 8);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + ++*(void *)(result + 16) = 1;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v11
  v12[0] = v9;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100F7F3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F7F410(uint64_t a1, void *a2, long long *a3, void *a4, long long *a5, const std::string *a6, uint64_t a7)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + ++*(void *)(result + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + ++*(void *)(result + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 1++*(void *)(result + 16) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1++*(void *)(result + 24) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + ++*(void *)(result + 152) = 0;
  *(_DWORD *)(a1 + 1++*(void *)(result + 56) = 0xFFFF;
  uint64_t v19 = a1 + 156;
  *(void *)(a1 + ++*(void *)(result + 168) = 0;
  *(void *)(a1 + ++*(void *)(result + 160) = 0;
  *(_OWORD *)(a1 + ++*(void *)(result + 176) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 192) = _Q0;
  *(_OWORD *)(a1 + 208) = _Q0;
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = _Q0;
  *(_DWORD *)(a1 + 2++*(void *)(result + 40) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(void *)(a1 + 244) = 0xBFF0000000000000;
  *(void *)(a1 + 252) = 0;
  *(void *)(a1 + 260) = 0;
  *(void *)(a1 + 272) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 280) = 0x7FFFFFFF;
  *(void *)(a1 + 292) = 0;
  *(void *)(a1 + 300) = 0;
  *(void *)(a1 + 284) = 0;
  *(unsigned char *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = 0xFFFF;
  *(void *)(a1 + 3++*(void *)(result + 16) = 0;
  *(void *)(a1 + 3++*(void *)(result + 24) = 0;
  long long v37 = _Q0;
  *(_OWORD *)(a1 + 3++*(void *)(result + 32) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 3++*(void *)(result + 48) = _Q0;
  *(_OWORD *)(a1 + 3++*(void *)(result + 64) = _Q0;
  *(_OWORD *)(a1 + 380) = _Q0;
  *(_DWORD *)(a1 + 3++*(void *)(result + 96) = 0;
  *(void *)(a1 + 400) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4++*(void *)(result + 24) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 4++*(void *)(result + 16) = 0;
  *(void *)(a1 + 428) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 436) = 0x7FFFFFFF;
  *(void *)(a1 + 4++*(void *)(result + 48) = 0;
  *(void *)(a1 + 4++*(void *)(result + 40) = 0;
  *(void *)(a1 + 4++*(void *)(result + 56) = 0;
  *(unsigned char *)(a1 + 4++*(void *)(result + 64) = 0;
  sub_101171D90(a1 + 472);
  *(void *)(v19 + 3++*(void *)(result + 56) = *a2;
  long long v20 = *a3;
  long long v21 = a3[2];
  *(_OWORD *)(v19 + 380) = a3[1];
  *(_OWORD *)(v19 + 3++*(void *)(result + 96) = v21;
  *(_OWORD *)(v19 + 3++*(void *)(result + 64) = v20;
  long long v22 = a3[3];
  long long v23 = a3[4];
  long long v24 = a3[5];
  *(void *)(v19 + 460) = *((void *)a3 + 12);
  *(_OWORD *)(v19 + 428) = v23;
  *(_OWORD *)(v19 + 444) = v24;
  *(_OWORD *)(v19 + 412) = v22;
  uint64_t v25 = a4[1];
  *(void *)(v19 + 468) = *a4;
  *(void *)(v19 + 476) = v25;
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 6++*(void *)(result + 40) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 648), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v26 = *a5;
    *(void *)(a1 + 6++*(void *)(result + 64) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 6++*(void *)(result + 48) = v26;
  }
  *(void *)(a1 + 6++*(void *)(result + 88) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  sub_100F7F7C0(a1 + 696);
  sub_100F7F7C0(a1 + 792);
  sub_1003D7A20(a1 + 888);
  *(unsigned char *)(a1 + 14++*(void *)(result + 96) = 0;
  *(unsigned char *)(a1 + 1504) = 0;
  *(void *)(a1 + 1512) = 0;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  sub_101171D90(a1 + 1552);
  *(_DWORD *)(a1 + 1592) = 0xFFFF;
  *(void *)(v27 + 52) = 0;
  *(void *)(v27 + 44) = 0;
  *(_OWORD *)(v19 + 14++*(void *)(result + 56) = xmmword_101D1C320;
  *(_OWORD *)(v19 + 1472) = v37;
  *(_OWORD *)(v19 + 14++*(void *)(result + 88) = v37;
  *(_OWORD *)(v19 + 1504) = v37;
  *(_DWORD *)(a1 + 1676) = 0;
  *(void *)(a1 + 1680) = 0xBFF0000000000000;
  *(void *)(a1 + 16++*(void *)(result + 96) = 0;
  *(void *)(a1 + 16++*(void *)(result + 88) = 0;
  *(_DWORD *)(a1 + 1704) = 0;
  *(void *)(v19 + 1552) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 17++*(void *)(result + 16) = 0x7FFFFFFF;
  *(void *)(a1 + 1720) = 0;
  *(void *)(a1 + 1736) = 0;
  *(void *)(a1 + 1728) = 0;
  *(unsigned char *)(a1 + 1744) = 0;
  *(_WORD *)(a1 + 17++*(void *)(result + 48) = 257;
  *(_DWORD *)(a1 + 1752) = 100;
  *(void *)(v27 + 204) = 0x4448000042480000;
  sub_1003D8254(a1 + 888, a6);
  unsigned int v28 = *(_DWORD *)(a7 + 96);
  if (v28 == 1)
  {
    sub_1003D7F90((_OWORD *)(a1 + 888), a7);
    unsigned int v28 = *(_DWORD *)(a7 + 96);
  }
  if (v28 <= 0xB && ((1 << v28) & 0xC02) != 0)
  {
    long long v29 = *(_OWORD *)(a7 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a7;
    *(_OWORD *)(a1 + ++*(void *)(result + 16) = v29;
    long long v30 = *(_OWORD *)(a7 + 32);
    long long v31 = *(_OWORD *)(a7 + 48);
    long long v32 = *(_OWORD *)(a7 + 80);
    *(_OWORD *)(a1 + ++*(void *)(result + 64) = *(_OWORD *)(a7 + 64);
    *(_OWORD *)(a1 + 80) = v32;
    *(_OWORD *)(a1 + ++*(void *)(result + 32) = v30;
    *(_OWORD *)(a1 + ++*(void *)(result + 48) = v31;
    long long v33 = *(_OWORD *)(a7 + 96);
    long long v34 = *(_OWORD *)(a7 + 112);
    long long v35 = *(_OWORD *)(a7 + 128);
    *(_OWORD *)(a1 + 1++*(void *)(result + 40) = *(_OWORD *)(a7 + 140);
    *(_OWORD *)(a1 + 112) = v34;
    *(_OWORD *)(a1 + 128) = v35;
    *(_OWORD *)(a1 + ++*(void *)(result + 96) = v33;
  }
  return a1;
}

void sub_100F7F72C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 640);
  *(void *)(v1 + 6++*(void *)(result + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 632);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(exception_object);
}

double sub_100F7F7C0@<D0>(uint64_t a1@<X8>)
{
  sub_100134750(__p, "ff:ff:ff:ff:ff:ff");
  uint64_t v2 = sub_100B38F04((uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sub_10106EB84(v2, (uint64_t)__p);
  sub_100640940((uint64_t)__p, a1);
  *(int64x2_t *)a1 = vdupq_n_s64(0xC066800000000000);
  *(void *)(a1 + ++*(void *)(result + 16) = 0xC07F400000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + ++*(void *)(result + 32) = _Q0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 52) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + ++*(void *)(result + 88) = 0;
  return result;
}

void sub_100F7F85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F7F878(uint64_t a1)
{
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  if (*(char *)(a1 + 583) < 0) {
    operator delete(*(void **)(a1 + 560));
  }
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  return a1;
}

double sub_100F7F8E0@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  if (*a2)
  {
    if (sub_10064E538(*a2))
    {
      sub_1010FEA4C(*a2, &buf);
      char v10 = *(void **)(a1 + 672);
      if (v10)
      {
        *(void *)(a1 + 680) = v10;
        operator delete(v10);
        *(void *)(a1 + 672) = 0;
        *(void *)(a1 + 680) = 0;
        *(void *)(a1 + 6++*(void *)(result + 88) = 0;
      }
      *(std::string *)(a1 + 672) = buf;
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      unint64_t v11 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100B39278((std::string *)__p);
        uint64_t v12 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 680) - *(void *)(a1 + 672)) >> 6);
        uint64_t v14 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
        uint64_t v40 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiCalc, computing centroid for associated AP %{private}s from harvest database using %{public}zu %{public}s harvest samples", (uint8_t *)&buf, 0x20u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023070C8);
        }
        sub_100B39278(&v38);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v27 = &v38;
        }
        else {
          uint64_t v27 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 680) - *(void *)(a1 + 672)) >> 6);
        if (*((char *)a3 + 23) >= 0) {
          long long v29 = a3;
        }
        else {
          long long v29 = (uint64_t *)*a3;
        }
        *(_DWORD *)std::string __p = 136381187;
        *(void *)&__p[4] = v27;
        *(_WORD *)&unsigned char __p[12] = 2050;
        *(void *)&__p[14] = v28;
        *(_WORD *)&__p[22] = 2082;
        *(void *)&__p[24] = v29;
        long long v30 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(std::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)", "%s\n", (const char *)v30);
        if (v30 != &buf) {
          free(v30);
        }
      }
      sub_1013E9FEC(&buf, a1 + 672, a4);
      sub_1013EA83C((uint64_t)&buf, __p);
      if (*(double *)__p >= -90.0
        && *(double *)__p <= 90.0
        && *(double *)&__p[8] <= 180.0
        && *(double *)&__p[8] >= -180.0)
      {
        *(double *)(a1 + 1536) = sub_100148438((uint64_t)&buf);
      }
      if (!*(unsigned char *)(a1 + 1504) || *(void *)(a1 + 1496) == -1)
      {
        *(void *)(a1 + 14++*(void *)(result + 96) = sub_1013EB48C((uint64_t)&buf);
        *(unsigned char *)(a1 + 1504) = v15;
        sub_1013EB498((char *)&buf, (uint64_t)&v38);
        uint64_t v16 = (void **)(a1 + 1512);
        if (*(char *)(a1 + 1535) < 0) {
          operator delete(*v16);
        }
        *(_OWORD *)uint64_t v16 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
        *(void *)(a1 + 1528) = *((void *)&v38.__r_.__value_.__l + 2);
      }
      long long v17 = v35;
      a5[2] = v34;
      a5[3] = v17;
      long long v18 = v37;
      a5[4] = v36;
      a5[5] = v18;
      double result = *(double *)__p;
      long long v20 = *(_OWORD *)&__p[16];
      *a5 = *(_OWORD *)__p;
      a5[1] = v20;
      if (v44 < 0) {
        operator delete(v43);
      }
      if (v41)
      {
        unint64_t v42 = v41;
        operator delete(v41);
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      long long v23 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100B39278(&buf);
        long long v24 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136380675;
        *(void *)&__p[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database", __p, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023070C8);
        }
        sub_100B39278((std::string *)__p);
        if (__p[23] >= 0) {
          long long v31 = __p;
        }
        else {
          long long v31 = *(unsigned char **)__p;
        }
        LODWORD(v38.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
        long long v32 = (std::string *)_os_log_send_and_compose_impl();
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(std::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)", "%s\n", (const char *)v32);
        if (v32 != &buf) {
          free(v32);
        }
      }
      return sub_100F7F7C0((uint64_t)a5);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    long long v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B39278(&buf);
      long long v22 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string __p = 136380675;
      *(void *)&__p[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "WifiCalc, #warning, unable to compute centroid for associated AP %{private}s due to invalid harvest database handle", __p, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      sub_100B39278((std::string *)__p);
      if (__p[23] >= 0) {
        uint64_t v25 = __p;
      }
      else {
        uint64_t v25 = *(unsigned char **)__p;
      }
      LODWORD(v38.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      long long v26 = (std::string *)_os_log_send_and_compose_impl();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::calculateAssociatedApCentroidFromHarvestDatabase(std::shared_ptr<CLWifiAssociatedApHarvestDatabase>, const std::string &, const CFTimeInterval &)", "%s\n", (const char *)v26);
      if (v26 != &buf) {
        free(v26);
      }
    }
    return sub_100F7F7C0((uint64_t)a5);
  }
  return result;
}

void sub_100F80058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100F80080(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 671);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 656);
  }
  if (v4) {
    sub_100878014((long long *)(a1 + 648), &v10);
  }
  else {
    sub_100877A84(&v10);
  }
  sub_100878D64(v10, (void *)(a1 + 512));
  uint64_t v5 = v11;
  v9[0] = v10;
  v9[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100134750(__p, "GPS");
  uint64_t v6 = sub_1014122A8();
  sub_100F7F8E0(a1, v9, (uint64_t *)__p, (uint64_t)(v6 + 8), a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v11) {
    sub_1000DB0A0(v11);
  }
}

void sub_100F8015C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (a19) {
    sub_1000DB0A0(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F801A0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 671);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 656);
  }
  if (v4) {
    sub_100878044((long long *)(a1 + 648), &v10);
  }
  else {
    sub_100877B9C(&v10);
  }
  sub_100878D64(v10, (void *)(a1 + 512));
  uint64_t v5 = v11;
  v9[0] = v10;
  v9[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100134750(__p, "Wifi");
  uint64_t v6 = sub_1014122A8();
  sub_100F7F8E0(a1, v9, (uint64_t *)__p, (uint64_t)(v6 + 7), a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v11) {
    sub_1000DB0A0(v11);
  }
}

void sub_100F8027C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (a19) {
    sub_1000DB0A0(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F802C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100F7F7C0(a2);
  if ((sub_100B393B0() & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    long long v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as it is disabled by settings", __p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_42:
      *(_WORD *)std::string buf = 0;
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v24);
      if (v24 != __p) {
        free(v24);
      }
      return;
    }
LABEL_100:
    dispatch_once(&qword_1024193A0, &stru_1023070C8);
    goto LABEL_42;
  }
  uint64_t v4 = (void *)sub_101454F5C(*(void *)(a1 + 624));
  if (!v4 || (uint64_t v5 = v4, ([v4 isValid] & 1) == 0))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    long long v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip fetching associated AP centroid from local store as the store is invalid", __p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_42;
    }
    goto LABEL_100;
  }
  [v5 purgeOlderRecords];
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023070C8);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    [v5 getBasicInfo];
    uint64_t v7 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136380675;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, fetching associated AP centroid from local store, %{private}s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    [v5 getBasicInfo];
    if (v42 >= 0) {
      long long v34 = buf;
    }
    else {
      long long v34 = *(unsigned char **)buf;
    }
    int v43 = 136380675;
    char v44 = v34;
    long long v35 = (char *)_os_log_send_and_compose_impl();
    if (v42 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v35);
    if (v35 != __p) {
      free(v35);
    }
  }
  id v8 = [v5 fetchRecord:sub_100F80CA8()];
  if (v8)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    [v8 lastUpdated];
    if (qword_1024193A0 != -1)
    {
      double v38 = v10;
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
      double v10 = v38;
    }
    double v11 = Current - v10;
    uint64_t v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [[objc_msgSend(v8, "description") UTF8String];
      *(_DWORD *)std::string __p = 136380931;
      *(void *)&__p[4] = v13;
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(double *)&__p[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, found associated AP centroid from local store: %{private}s, age: %{private}.1fs", __p, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      id v36 = [[objc_msgSend(v8, "description") UTF8String];
      *(_DWORD *)std::string buf = 136380931;
      *(void *)&uint8_t buf[4] = v36;
      __int16 v40 = 2049;
      double v41 = v11;
      long long v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiAccessPoint CLWifiPositionCalculatorWithAssociatedAp::fetchAssociatedApCentroidFromLocalStore()", "%s\n", v37);
      if (v37 != __p) {
        free(v37);
      }
    }
    [v8 latitude];
    *(void *)a2 = v14;
    [v8 longitude];
    *(void *)(a2 + 8) = v15;
    [v8 altitude];
    *(void *)(a2 + ++*(void *)(result + 16) = v16;
    [v8 horizontalAccuracy];
    *(void *)(a2 + ++*(void *)(result + 32) = v17;
    [v8 verticalAccuracy];
    *(void *)(a2 + ++*(void *)(result + 40) = v18;
    *(_DWORD *)(a2 + 52) = [v8 reach];
    [v8 stationaryTimeInSeconds];
    *(void *)(a1 + 1536) = v19;
    sub_100134750(__p, (char *)[v8 loiType]);
    long long v20 = (int **)(a1 + 1512);
    if (*(char *)(a1 + 1535) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)long long v20 = *(_OWORD *)__p;
    *(void *)(a1 + 1528) = *(void *)&__p[16];
    if ((*(char *)(a1 + 1535) & 0x80000000) == 0)
    {
      switch(*(unsigned char *)(a1 + 1535))
      {
        case 3:
          if (*(_WORD *)v20 != 31047 || *(unsigned char *)(a1 + 1514) != 109) {
            goto LABEL_81;
          }
          goto LABEL_57;
        case 4:
          int v30 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 == 1701670728) {
            goto LABEL_85;
          }
          goto LABEL_68;
        case 6:
          if (*(_DWORD *)v20 != 1869112147 || *(_WORD *)(a1 + 1516) != 27759) {
            goto LABEL_81;
          }
          goto LABEL_75;
        case 7:
          goto LABEL_77;
        default:
          goto LABEL_81;
      }
    }
    switch(*(void *)(a1 + 1520))
    {
      case 3:
        if (*(_WORD *)*v20 != 31047 || *((unsigned char *)*v20 + 2) != 109) {
          goto LABEL_81;
        }
LABEL_57:
        uint64_t v27 = 0;
        char v28 = 1;
        uint64_t v29 = 3;
        break;
      case 4:
        if (**v20 == 1701670728)
        {
LABEL_85:
          uint64_t v29 = 0;
          uint64_t v27 = 0;
        }
        else
        {
          int v30 = **v20;
LABEL_68:
          if (v30 != 1802661719) {
            goto LABEL_81;
          }
          uint64_t v27 = 0;
          uint64_t v29 = 1;
        }
        char v28 = 1;
        break;
      case 6:
        if (**v20 != 1869112147 || *((_WORD *)*v20 + 2) != 27759) {
          goto LABEL_81;
        }
LABEL_75:
        uint64_t v27 = 0;
        char v28 = 1;
        uint64_t v29 = 2;
        break;
      case 7:
        long long v20 = (int **)*v20;
LABEL_77:
        if (*(_DWORD *)v20 != 1852534357 || *(_DWORD *)((char *)v20 + 3) != 1853321070) {
          goto LABEL_81;
        }
        uint64_t v27 = -256;
        char v28 = 1;
        uint64_t v29 = 255;
        break;
      default:
LABEL_81:
        uint64_t v29 = 0;
        char v28 = 0;
        uint64_t v27 = 0;
        break;
    }
    *(void *)(a1 + 14++*(void *)(result + 96) = v27 | v29;
    *(unsigned char *)(a1 + 1504) = v28;

    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023070C8);
  }
  uint64_t v25 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, could not find associated AP centroid from local store", __p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    goto LABEL_42;
  }
}

NSString *sub_100F80CA8()
{
  sub_100B39278(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v1 = +[NSString stringWithUTF8String:p_p];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_100F80D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100F80D30(uint64_t a1)
{
  uint64_t v2 = sub_1014122A8();
  if (!sub_1014127E0((uint64_t)v2))
  {
    sub_100134750(&__p, "NO: disabled_by_settings");
    sub_1003D8684(a1 + 888, &__p);
    goto LABEL_26;
  }
  if ((sub_1000E6DB4(a1 + 312) & 1) == 0)
  {
    sub_100134750(&__p, "NO: centroid_invalid");
    sub_1003D8684(a1 + 888, &__p);
    goto LABEL_26;
  }
  if (!sub_1018E9E88((double *)(a1 + 1552), (double *)(a1 + 316), (double *)(a1 + 324), 4))
  {
    double v8 = *((double *)sub_1014122A8() + 6);
    uint64_t v9 = (std::string::size_type *)(a1 + 332);
    if (*(double *)(a1 + 332) <= v8)
    {
      if (*(_DWORD *)(a1 + 1544) != 2)
      {
        if (!*(unsigned char *)(a1 + 1504))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          char v28 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100B39278(&__p);
            uint64_t v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as we cannot determine its LOI type", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023070C8);
            }
            sub_100B39278(&buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            LODWORD(v84.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
            BOOL v66 = (std::string *)_os_log_send_and_compose_impl();
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v66);
            if (v66 != &__p) {
              free(v66);
            }
          }
          sub_100134750(&__p, "NO: cannot_infer_LOI");
          sub_1003D8684(a1 + 888, &__p);
          goto LABEL_26;
        }
        uint64_t v13 = *(void *)(a1 + 1496);
        uint64_t v14 = sub_1014122A8();
        if (!sub_1014122B4(v14, v13, v15))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          int v30 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100B39278(&__p);
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            long long v32 = (void *)(a1 + 1512);
            if (*(char *)(a1 + 1535) < 0) {
              long long v32 = (void *)*v32;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as its LOI type %{private}s is not enabled", (uint8_t *)&buf, 0x16u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023070C8);
            }
            sub_100B39278(&buf);
            int v67 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v67 = &buf;
            }
            int v68 = (void *)(a1 + 1512);
            if (*(char *)(a1 + 1535) < 0) {
              int v68 = (void *)*v68;
            }
            LODWORD(v84.__r_.__value_.__l.__data_) = 136380931;
            *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
            WORD2(v84.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&v84.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v68;
            int v69 = (std::string *)_os_log_send_and_compose_impl();
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v69);
            if (v69 != &__p) {
              free(v69);
            }
          }
          sub_100134750(&__p, "NO: LOI_disabled");
          sub_1003D8684(a1 + 888, &__p);
          goto LABEL_26;
        }
      }
      if (*(unsigned char *)(a1 + 616)) {
        goto LABEL_277;
      }
      uint64_t v16 = *(void *)(a1 + 624);
      uint64_t v17 = *(void *)(a1 + 512);
      uint64_t v18 = operator new(8uLL);
      *(void *)&long long v82 = v18;
      *uint64_t v18 = v17;
      *((void *)&v82 + 1) = v18 + 1;
      __int16 v83 = v18 + 1;
      sub_100F83A18(a1 + 696, (uint64_t)&buf);
      sub_10106EA88((uint64_t)&buf, (uint64_t)&__p);
      CFAbsoluteTime Current_5 = j__CFAbsoluteTimeGetCurrent_5();
      (*(void (**)(std::string *__return_ptr, uint64_t, long long *, std::string *, CFAbsoluteTime))(*(void *)v16 + 16))(&v84, v16, &v82, &__p, Current_5);
      if ((void)v82)
      {
        *((void *)&v82 + 1) = v82;
        operator delete((void *)v82);
      }
      long long v20 = sub_100529674((uint64_t)&v84, (void *)(a1 + 512));
      if (&v84.__r_.__value_.__r.__words[1] == v20)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023070C8);
        }
        long long v33 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278(&__p);
          long long v34 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "WifiCalc, still could not look up centroid from tile/als for associated AP %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          sub_100B39278(&buf);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v76 = &buf;
          }
          else {
            uint64_t v76 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v82) = 136315138;
          *(void *)((char *)&v82 + 4) = v76;
          char v77 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v77);
          if (v77 != &__p) {
            free(v77);
          }
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023070C8);
        }
        long long v21 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278(&__p);
          long long v22 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "WifiCalc, found centroid from tile/als for associated AP %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          sub_100B39278(&buf);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v70 = &buf;
          }
          else {
            BOOL v70 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          LODWORD(v82) = 136315138;
          *(void *)((char *)&v82 + 4) = v70;
          double v71 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v71);
          if (v71 != &__p) {
            free(v71);
          }
        }
        int v23 = *(unsigned __int8 *)(a1 + 616);
        long long v24 = *(_OWORD *)(v20 + 7);
        *(_OWORD *)(a1 + 520) = *(_OWORD *)(v20 + 5);
        *(_OWORD *)(a1 + 536) = v24;
        long long v25 = *(_OWORD *)(v20 + 11);
        long long v26 = *(_OWORD *)(v20 + 15);
        long long v27 = *(_OWORD *)(v20 + 9);
        *(_OWORD *)(a1 + 584) = *(_OWORD *)(v20 + 13);
        *(_OWORD *)(a1 + 600) = v26;
        *(_OWORD *)(a1 + 552) = v27;
        *(_OWORD *)(a1 + 568) = v25;
        if (!v23) {
          *(unsigned char *)(a1 + 6++*(void *)(result + 16) = 1;
        }
      }
      sub_1000F5BB0((uint64_t)&v84, (void *)v84.__r_.__value_.__l.__size_);
      if (*(unsigned char *)(a1 + 616))
      {
LABEL_277:
        if (sub_10106EB0C(a1 + 520))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          long long v35 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100B39278(&__p);
            id v36 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "WifiCalc, warning, associated AP %{private}s server-side centroid from tile/als is moving", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023070C8);
            }
            sub_100B39278(&buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v63 = &buf;
            }
            else {
              long long v63 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            LODWORD(v84.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
            uint64_t v64 = (std::string *)_os_log_send_and_compose_impl();
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v64);
            if (v64 != &__p) {
              free(v64);
            }
          }
        }
      }
      double v37 = (double)*((int *)sub_1014122A8() + 4);
      if (*(double *)(a1 + 1536) >= v37)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023070C8);
        }
        long long v45 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278(&buf);
          long long v46 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          std::string::size_type v47 = *(void *)(a1 + 1536);
          LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v47;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
          double v86 = v37;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "WifiCalc, will update computed location using associated AP %{private}s as stationary time %.1f is no less than threshold %.1f", (uint8_t *)&__p, 0x20u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          sub_100B39278(&v84);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v60 = &v84;
          }
          else {
            double v60 = (std::string *)v84.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v61 = *(void *)(a1 + 1536);
          LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v60;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v61;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          double v88 = v37;
          uint64_t v62 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v62);
          if (v62 != &__p) {
            free(v62);
          }
        }
        sub_100134750(&__p, "YES: stationary_enough");
        sub_1003D8684(a1 + 888, &__p);
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023070C8);
        }
        double v38 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278(&buf);
          uint64_t v39 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          std::string::size_type v40 = *(void *)(a1 + 1536);
          LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v40;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
          double v86 = v37;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "WifiCalc, associated AP %{private}s has stationary time %.1f, less than threshold %.1f", (uint8_t *)&__p, 0x20u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          sub_100B39278(&v84);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v57 = &v84;
          }
          else {
            int v57 = (std::string *)v84.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v58 = *(void *)(a1 + 1536);
          LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v58;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          double v88 = v37;
          uint64_t v59 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v59);
          if (v59 != &__p) {
            free(v59);
          }
        }
        if (!*(unsigned char *)(a1 + 616))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          long long v48 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100B39278(&__p);
            long long v49 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is unavailable", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023070C8);
            }
            sub_100B39278(&buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v72 = &buf;
            }
            else {
              char v72 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            LODWORD(v84.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
            uint64_t v73 = (std::string *)_os_log_send_and_compose_impl();
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v73);
            if (v73 != &__p) {
              free(v73);
            }
          }
          sub_100134750(&__p, "NO: server_side_centroid_unavailable");
          sub_1003D8684(a1 + 888, &__p);
          goto LABEL_26;
        }
        if (!sub_10106EB1C((double *)(a1 + 520)))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          int v50 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100B39278(&__p);
            uint64_t v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as server-side centroid from tile/als is invalid", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023070C8);
            }
            sub_100B39278(&buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v74 = &buf;
            }
            else {
              char v74 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            LODWORD(v84.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
            uint64_t v75 = (std::string *)_os_log_send_and_compose_impl();
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v75);
            if (v75 != &__p) {
              free(v75);
            }
          }
          sub_100134750(&__p, "NO: server_side_centroid_invalid");
          sub_1003D8684(a1 + 888, &__p);
          goto LABEL_26;
        }
        double v41 = sub_1000F1648((double *)(a1 + 472), *(double *)(a1 + 528), *(double *)(a1 + 536), *(double *)(a1 + 696), *(double *)(a1 + 704), 0.0);
        double v42 = *((double *)sub_1014122A8() + 5);
        if (v41 > v42)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          __int16 v52 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100B39278(&buf);
            int v53 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &buf
                : (std::string *)buf.__r_.__value_.__r.__words[0];
            LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
            *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v41;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
            double v86 = v42;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as distance %.1f is greater than threshold %.0f", (uint8_t *)&__p, 0x20u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023070C8);
            }
            sub_100B39278(&v84);
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v80 = &v84;
            }
            else {
              int v80 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v80;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
            double v88 = v42;
            __int16 v81 = (std::string *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v81);
            if (v81 != &__p) {
              free(v81);
            }
          }
          sub_100134750(&__p, "NO: far_away_from_server_side_centroid");
          sub_1003D8684(a1 + 888, &__p);
          goto LABEL_26;
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023070C8);
        }
        int v43 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100B39278(&buf);
          char v44 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
          *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v41;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
          double v86 = v42;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "WifiCalc, will update computed location using associated AP %{private}s as distance %.1f is no more than threshold %.0f", (uint8_t *)&__p, 0x20u);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023070C8);
          }
          sub_100B39278(&v84);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v78 = &v84;
          }
          else {
            uint64_t v78 = (std::string *)v84.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v78;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          double v88 = v42;
          __int16 v79 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v79);
          if (v79 != &__p) {
            free(v79);
          }
        }
        sub_100134750(&__p, "YES: consistent_with_server_side_centroid");
        sub_1003D8684(a1 + 888, &__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return 1;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    double v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B39278(&buf);
      double v11 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      std::string::size_type v12 = *v9;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v12;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
      double v86 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as its uncertainty %{public}.1f is greater than %{public}.1f", (uint8_t *)&__p, 0x20u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      sub_100B39278(&v84);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v54 = &v84;
      }
      else {
        __int16 v54 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v55 = *v9;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v54;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v55;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      double v88 = v8;
      __int16 v56 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v56);
      if (v56 != &__p) {
        free(v56);
      }
    }
    sub_100134750(&__p, "NO: uncertainty_too_large");
    sub_1003D8684(a1 + 888, &__p);
LABEL_26:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  sub_100134750(&__p, "NO: KnownAC");
  sub_1003D8684(a1 + 888, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023070C8);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    sub_100B39278(&__p);
    uint64_t v4 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WifiCalc, skip updating computed location using associated AP %{private}s as it is KnownAC", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    sub_100B39278(&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &buf;
    }
    else {
      uint64_t v6 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v84.__r_.__value_.__l.__data_) = 136380675;
    *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    uint64_t v7 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::shouldUpdateComputedLocation()", "%s\n", (const char *)v7);
    if (v7 != &__p) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_100F827B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_100F82840(uint64_t a1, long long *a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 696);
  uint64_t v5 = a1 + 316;
  long long v6 = *a2;
  *(_OWORD *)(a1 + 172) = a2[1];
  *(_OWORD *)(a1 + 1++*(void *)(result + 56) = v6;
  long long v7 = a2[2];
  long long v8 = a2[3];
  long long v9 = a2[4];
  *(_OWORD *)(a1 + 236) = a2[5];
  *(_OWORD *)(a1 + 220) = v9;
  *(_OWORD *)(a1 + 204) = v8;
  *(_OWORD *)(a1 + 1++*(void *)(result + 88) = v7;
  long long v10 = a2[6];
  long long v11 = a2[7];
  long long v12 = a2[8];
  *(_OWORD *)(a1 + 2++*(void *)(result + 96) = *(long long *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 268) = v11;
  *(_OWORD *)(a1 + 284) = v12;
  *(_OWORD *)(a1 + 252) = v10;
  uint64_t v13 = (_OWORD *)(a1 + 888);
  sub_1003D7A24(a1 + 888, (long long *)(a1 + 156));
  long long v14 = a2[1];
  *(_OWORD *)(a1 + 312) = *a2;
  *(_OWORD *)(a1 + 328) = v14;
  long long v15 = a2[2];
  long long v16 = a2[3];
  long long v17 = a2[5];
  *(_OWORD *)(a1 + 376) = a2[4];
  *(_OWORD *)(a1 + 392) = v17;
  *(_OWORD *)(a1 + 344) = v15;
  *(_OWORD *)(a1 + 360) = v16;
  long long v18 = a2[6];
  long long v19 = a2[7];
  long long v20 = a2[8];
  *(_OWORD *)(a1 + 452) = *(long long *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 4++*(void *)(result + 24) = v19;
  *(_OWORD *)(a1 + 4++*(void *)(result + 40) = v20;
  *(_OWORD *)(a1 + 408) = v18;
  *(_OWORD *)uint64_t v5 = *v4;
  *(void *)(v5 + ++*(void *)(result + 16) = *(void *)(a1 + 728);
  *(_DWORD *)(a1 + 444) = 1;
  if (*(double *)((char *)a2 + 36) < 0.0 && *(double *)(a1 + 736) > 0.0)
  {
    *(void *)(v5 + ++*(void *)(result + 24) = *(void *)(a1 + 712);
    long long v21 = sub_1000DBFA0();
    double v22 = *(double *)(a1 + 736);
    if (v22 < *((double *)v21 + 28)) {
      double v22 = *((double *)v21 + 28);
    }
    *(double *)(v5 + ++*(void *)(result + 32) = v22;
  }

  sub_1003D7CDC(v13, (long long *)(a1 + 312));
}

void sub_100F82964(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1000E6DB4(a2);
  sub_1003D8674(a1 + 888, v4 ^ 1);
  uint64_t v5 = (_OWORD *)(a1 + 312);
  sub_1000F1268((double *)(a1 + 472), a2, a1 + 312);
  uint64_t v7 = v6;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023070C8);
  }
  long long v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    long long v9 = v33;
    sub_100F7F010();
    if (v36 < 0) {
      long long v9 = *(unsigned char **)v33;
    }
    sub_100B39278(&v32);
    int v10 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = v32.__r_.__value_.__r.__words[0];
    sub_100F7F010();
    if (v10 >= 0) {
      long long v12 = &v32;
    }
    else {
      long long v12 = (std::string *)v11;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    long long v14 = (void *)(a1 + 1512);
    if (*(char *)(a1 + 1535) < 0) {
      long long v14 = (void *)*v14;
    }
    *(_DWORD *)std::string buf = 136381699;
    int v43 = v9;
    __int16 v44 = 2081;
    long long v45 = v12;
    __int16 v46 = 2081;
    std::string::size_type v47 = p_p;
    __int16 v48 = 2050;
    uint64_t v49 = v7;
    __int16 v50 = 2081;
    uint64_t v51 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiCalc, replacing computed location %{private}s with associated AP %{private}s centroid %{private}s. Distance %{public}.1fm. LOI %{private}s", buf, 0x34u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v33);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    double v22 = &v32;
    sub_100F7F010();
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      double v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    sub_100B39278(&__p);
    int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v24 = __p.__r_.__value_.__r.__words[0];
    sub_100F7F010();
    if (v23 >= 0) {
      long long v25 = &__p;
    }
    else {
      long long v25 = (std::string *)v24;
    }
    long long v26 = v29;
    if (v30 >= 0) {
      long long v26 = &v29;
    }
    long long v27 = (void *)(a1 + 1512);
    if (*(char *)(a1 + 1535) < 0) {
      long long v27 = (void *)*v27;
    }
    *(_DWORD *)long long v33 = 136381699;
    *(void *)&v33[4] = v22;
    __int16 v34 = 2081;
    long long v35 = v25;
    __int16 v36 = 2081;
    double v37 = v26;
    __int16 v38 = 2050;
    uint64_t v39 = v7;
    __int16 v40 = 2081;
    double v41 = v27;
    char v28 = (char *)_os_log_send_and_compose_impl();
    if (v30 < 0) {
      operator delete(v29);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocation(CL::Wifi1::Types::ComputedLocation &)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  long long v15 = v5[2];
  long long v16 = v5[3];
  long long v17 = v5[4];
  *(_OWORD *)(a2 + 80) = v5[5];
  long long v18 = v5[1];
  *(_OWORD *)a2 = *v5;
  *(_OWORD *)(a2 + ++*(void *)(result + 16) = v18;
  *(_OWORD *)(a2 + ++*(void *)(result + 48) = v16;
  *(_OWORD *)(a2 + ++*(void *)(result + 64) = v17;
  *(_OWORD *)(a2 + ++*(void *)(result + 32) = v15;
  long long v19 = v5[6];
  long long v20 = v5[7];
  long long v21 = v5[8];
  *(_OWORD *)(a2 + 1++*(void *)(result + 40) = *(_OWORD *)((char *)v5 + 140);
  *(_OWORD *)(a2 + 112) = v20;
  *(_OWORD *)(a2 + 128) = v21;
  *(_OWORD *)(a2 + ++*(void *)(result + 96) = v19;
  *(_DWORD *)(a2 + 1++*(void *)(result + 56) = 1;
  *(_DWORD *)(a2 + 84) = 69;
  *(unsigned char *)(a2 + 180) = 1;
}

void sub_100F82D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F82DA4()
{
  sub_100103240();
  uint64_t result = sub_10015F708();
  if (result)
  {
    sub_100103240();
    return sub_10010145C() ^ 1;
  }
  return result;
}

double sub_100F82DD0(uint64_t a1, uint64_t a2)
{
  char v4 = sub_1014122A8();
  if (sub_101412B24((uint64_t)v4))
  {
    double result = *(double *)a2;
    if (*(double *)a2 >= -90.0 && result <= 90.0)
    {
      double result = *(double *)(a2 + 8);
      if (result <= 180.0 && result >= -180.0)
      {
        *(void *)(a1 + 712) = *(void *)(a2 + 16);
        double result = *(double *)(a2 + 40);
        *(double *)(a1 + 736) = result;
      }
    }
  }
  return result;
}

void sub_100F82E58(uint64_t a1)
{
  *(_DWORD *)(a1 + 1544) = 0;
  sub_100F801A0(a1, &v21);
  long long v2 = v24;
  *(_OWORD *)(a1 + 8++*(void *)(result + 24) = v23;
  *(_OWORD *)(a1 + 8++*(void *)(result + 40) = v2;
  *(_OWORD *)(a1 + 8++*(void *)(result + 56) = v25[0];
  *(_OWORD *)(a1 + 865) = *(_OWORD *)((char *)v25 + 9);
  long long v3 = v22;
  *(_OWORD *)(a1 + 792) = v21;
  *(_OWORD *)(a1 + 808) = v3;
  if (sub_100F82DA4())
  {
    sub_100F80080(a1, __p);
    long long v4 = v19;
    *(_OWORD *)(a1 + 728) = v18;
    *(_OWORD *)(a1 + 744) = v4;
    *(_OWORD *)(a1 + 760) = v20[0];
    *(_OWORD *)(a1 + 769) = *(_OWORD *)((char *)v20 + 9);
    long long v5 = v17;
    *(_OWORD *)(a1 + 6++*(void *)(result + 96) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 712) = v5;
    sub_100FEDAE4((double *)&v21, (double *)(a1 + 696), a1);
    double v6 = *(double *)(a1 + 696);
    if (v6 >= -90.0 && v6 <= 90.0)
    {
      double v7 = *(double *)(a1 + 704);
      if (v7 <= 180.0 && v7 >= -180.0)
      {
        sub_100F82DD0(a1, (uint64_t)&v21);
        sub_100134750(__p, "Valid: gnss_harvest_database");
        sub_1003D868C(a1 + 888, (const std::string *)__p);
        if (SBYTE7(v17) < 0) {
          operator delete(__p[0]);
        }
        int v8 = 1;
LABEL_24:
        *(_DWORD *)(a1 + 1544) = v8;
        return;
      }
    }
  }
  sub_100F802C0(a1, (uint64_t)__p);
  long long v9 = v19;
  *(_OWORD *)(a1 + 728) = v18;
  *(_OWORD *)(a1 + 744) = v9;
  *(_OWORD *)(a1 + 760) = v20[0];
  *(_OWORD *)(a1 + 769) = *(_OWORD *)((char *)v20 + 9);
  long long v10 = v17;
  *(_OWORD *)(a1 + 6++*(void *)(result + 96) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 712) = v10;
  sub_100FEDAE4((double *)&v21, (double *)(a1 + 696), a1);
  double v11 = *(double *)(a1 + 696);
  if (v11 >= -90.0 && v11 <= 90.0)
  {
    double v12 = *(double *)(a1 + 704);
    if (v12 <= 180.0 && v12 >= -180.0)
    {
      sub_100F82DD0(a1, (uint64_t)&v21);
      sub_100134750(__p, "Valid: local_store");
      sub_1003D868C(a1 + 888, (const std::string *)__p);
      if (SBYTE7(v17) < 0) {
        operator delete(__p[0]);
      }
      int v8 = 3;
      goto LABEL_24;
    }
  }
  uint64_t v13 = sub_1014122A8();
  if (sub_101412B24((uint64_t)v13)
    && *(double *)&v21 >= -90.0
    && *(double *)&v21 <= 90.0
    && *((double *)&v21 + 1) <= 180.0
    && *((double *)&v21 + 1) >= -180.0)
  {
    sub_100134750(__p, "Valid: wifi_harvest_database");
    sub_1003D868C(a1 + 888, (const std::string *)__p);
    if (SBYTE7(v17) < 0) {
      operator delete(__p[0]);
    }
    long long v14 = v24;
    *(_OWORD *)(a1 + 728) = v23;
    *(_OWORD *)(a1 + 744) = v14;
    *(_OWORD *)(a1 + 760) = v25[0];
    *(_OWORD *)(a1 + 769) = *(_OWORD *)((char *)v25 + 9);
    long long v15 = v22;
    *(_OWORD *)(a1 + 6++*(void *)(result + 96) = v21;
    *(_OWORD *)(a1 + 712) = v15;
    int v8 = 2;
    goto LABEL_24;
  }
  sub_100134750(__p, "Invalid");
  sub_1003D868C(a1 + 888, (const std::string *)__p);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100F83134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F8315C(uint64_t a1, long long *a2)
{
  long long v4 = sub_1014122A8();
  if (!sub_1014127E0((uint64_t)v4))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    long long v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B39278(__p);
      long long v10 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as it got disabled by CLWifi1Settings!", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      sub_100B39278(&buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v25 = 136380675;
      long long v26 = p_buf;
      long long v18 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)", "%s\n", (const char *)v18);
      if (v18 != __p) {
        free(v18);
      }
    }
    sub_100134750(__p, "NO: disabled_by_settings");
    sub_1003D8684(a1 + 888, __p);
    goto LABEL_28;
  }
  sub_100F82E58(a1);
  sub_1010A4DC4(a1 + 792, (uint64_t)a2);
  double v5 = *(double *)(a1 + 696);
  if (v5 < -90.0 || v5 > 90.0 || (double v6 = *(double *)(a1 + 704), v6 > 180.0) || v6 < -180.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    double v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B39278(__p);
      double v12 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as it does not have a valid centroid!", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      sub_100B39278(&buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = &buf;
      }
      else {
        long long v19 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v25 = 136380675;
      long long v26 = v19;
      long long v20 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)", "%s\n", (const char *)v20);
      if (v20 != __p) {
        free(v20);
      }
    }
    sub_100134750(__p, "NO: centroid_invalid");
    sub_1003D8684(a1 + 888, __p);
    goto LABEL_28;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 624) + 48))(&buf);
  if (buf.__r_.__value_.__r.__words[0])
  {
    sub_100935084((uint64_t)buf.__r_.__value_.__l.__data_);
    sub_100936054((uint64_t)buf.__r_.__value_.__l.__data_);
    uint64_t v7 = buf.__r_.__value_.__r.__words[0];
    sub_100F83A18(a1 + 696, (uint64_t)__p);
    int v8 = sub_1009381B8(v7, (double *)__p);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    long long v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WifiCalc, #warning, movingApDetector is null", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      LOWORD(v25) = 0;
      long long v23 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL isBadClientSideCentroidByMovingApDetector(const std::shared_ptr<CLMovingApDetector> &, const CLWifiAccessPoint &)", "%s\n", (const char *)v23);
      if (v23 != __p) {
        free(v23);
      }
    }
    int v8 = 0;
  }
  if (buf.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
  }
  if (v8)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023070C8);
    }
    long long v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B39278(__p);
      long long v16 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as it fails to pass cross-check with GPS/Cell!", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023070C8);
      }
      sub_100B39278(&buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v21 = &buf;
      }
      else {
        long long v21 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v25 = 136380675;
      long long v26 = v21;
      long long v22 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)", "%s\n", (const char *)v22);
      if (v22 != __p) {
        free(v22);
      }
    }
    sub_100134750(__p, "NO: moving_ap_detector");
    sub_1003D8684(a1 + 888, __p);
LABEL_28:
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    return 0;
  }
  sub_1003D824C(a1 + 888, (const std::string *)(a1 + 1512));
  sub_100F82840(a1, a2);
  if (!sub_100F80D30(a1))
  {
    sub_1003D867C(a1 + 888, 0);
    return 0;
  }
  sub_100F82964(a1, (uint64_t)a2);
  sub_1003D867C(a1 + 888, 1);
  return 1;
}

void sub_100F839A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F839E0(uint64_t a1)
{
  return sub_1003D8694(a1 + 888);
}

void sub_100F839E8(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100F83A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10106DFF4(a2, *(void *)(a1 + 72), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0, *(_DWORD *)(a1 + 24), -1, *(double *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 64));
  *(unsigned char *)(result + ++*(void *)(result + 88) = *(unsigned char *)(a1 + 88);
  return result;
}

void sub_100F83A74()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100F83B2C(_Unwind_Exception *a1)
{
}

void sub_100F83B44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100F83BEC(_Unwind_Exception *a1)
{
}

void sub_100F83C04()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100F83C84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100F83D14(_Unwind_Exception *a1)
{
}

uint64_t sub_100F83D2C(uint64_t a1)
{
  if (a1) {
    return sub_100F84A5C(a1 - 8);
  }
  else {
    return sub_100F84A5C(0);
  }
}

void sub_100F83D3C(uint64_t a1)
{
  if (a1) {
    sub_100F84F0C(a1 - 8);
  }
  else {
    sub_100F84F0C(0);
  }
}

BOOL sub_100F83D4C(uint64_t a1)
{
  if (a1) {
    return sub_100F84CCC(a1 - 8);
  }
  else {
    return sub_100F84CCC(0);
  }
}

void sub_100F83D5C(uint64_t a1)
{
  if (a1) {
    sub_100F85134(a1 - 8);
  }
  else {
    sub_100F85134(0);
  }
}

void sub_100F83D6C(uint64_t a1)
{
  if (a1) {
    sub_100F8534C((void *)(a1 - 8));
  }
  else {
    sub_100F8534C(0);
  }
}

void sub_100F83D7C(uint64_t a1)
{
  if (a1) {
    sub_100F854D8((void *)(a1 - 8));
  }
  else {
    sub_100F854D8(0);
  }
}

void sub_100F83D8C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = &unk_1023070E8;
  *(void *)(a1 + ++*(void *)(result + 16) = 8;
  *(_WORD *)(a1 + ++*(void *)(result + 24) = 512;
  *(void *)a1 = off_1023071B8;
  *(_WORD *)(a1 + 268) = 0;
  *(void *)(a1 + 272) = 0xC00000046;
  *(_DWORD *)(a1 + 280) = 56;
  *(void *)(a1 + 284) = 0x3851B7173727C5ACLL;
  *(void *)(a1 + 2++*(void *)(result + 96) = 0;
  *(void *)(a1 + 312) = a2;
  sub_1000E9354(a1 + 320);
  int v3 = 0;
  sub_10044FD20((unsigned __int8 *)(a1 + 336), "ForceEnableNoMovementDetector", &v3, 0);
  operator new();
}

void sub_100F83E90()
{
}

uint64_t sub_100F83EE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 296);
  if (result) {
    return sub_1000D8908(result);
  }
  return result;
}

void sub_100F83EF0(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[2];
  *(_OWORD *)(a1 + ++*(void *)(result + 48) = a2[1];
  *(_OWORD *)(a1 + ++*(void *)(result + 64) = v4;
  *(_OWORD *)(a1 + ++*(void *)(result + 32) = v3;
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 112) = a2[5];
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + ++*(void *)(result + 96) = v6;
  long long v8 = a2[7];
  long long v9 = a2[8];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + ++*(void *)(result + 176) = a2[9];
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + ++*(void *)(result + 160) = v9;
  long long v11 = a2[11];
  long long v12 = a2[12];
  long long v13 = a2[13];
  *(void *)(a1 + 2++*(void *)(result + 56) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = v12;
  *(_OWORD *)(a1 + 2++*(void *)(result + 40) = v13;
  *(_OWORD *)(a1 + 208) = v11;
  uint64_t v14 = *((void *)a2 + 14);
  if (v14 == 14) {
    uint64_t v15 = *((void *)a2 + 7);
  }
  else {
    uint64_t v15 = sub_100F85664(v14);
  }
  sub_100F841A8(v15, (uint64_t)buf);
  *(_OWORD *)(a1 + 268) = *(_OWORD *)buf;
  *(void *)(a1 + 284) = v34;
  sub_100F84394(a1, v15);
  sub_1001A34E0(a1 + 8, 0, (uint64_t)&v24);
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  long long v16 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void *)(a1 + 144);
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 88);
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v17;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v18;
    *(_WORD *)&unsigned char buf[14] = 2048;
    uint64_t v34 = v19;
    __int16 v35 = 2048;
    uint64_t v36 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[CLNoMovement] controller workoutEvent,workoutType,%d,eventType,%d,genericWorkoutLabel,%lu,hkWorkoutType,%lu", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    uint64_t v20 = *(void *)(a1 + 144);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 88);
    int v25 = 67109888;
    int v26 = v20;
    __int16 v27 = 1024;
    int v28 = v21;
    __int16 v29 = 2048;
    uint64_t v30 = v22;
    __int16 v31 = 2048;
    uint64_t v32 = v15;
    long long v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
}

uint64_t sub_100F8418C(uint64_t a1)
{
  if (*(void *)(a1 + 112) == 14) {
    return *(void *)(a1 + 56);
  }
  else {
    return sub_100F85664(*(void *)(a1 + 112));
  }
}

uint64_t sub_100F841A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 4) = 0xC00000046;
  *(_DWORD *)(a2 + 12) = 56;
  *(void *)(a2 + ++*(void *)(result + 16) = 0x3851B7173727C5ACLL;
  switch(result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 17:
    case 18:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 27:
    case 28:
    case 31:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 59:
    case 60:
    case 63:
    case 64:
    case 65:
    case 68:
    case 69:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 82:
    case 83:
    case 84:
      *(_WORD *)a2 = 257;
      break;
    case 19:
    case 26:
      *(_WORD *)a2 = 256;
      *(_DWORD *)(a2 + 4) = 117;
      *(_DWORD *)(a2 + 12) = 117;
      goto LABEL_5;
    case 21:
    case 40:
    case 61:
    case 67:
    case 70:
    case 71:
      *(_WORD *)a2 = 257;
      *(void *)(a2 + 8) = 0x460000000CLL;
LABEL_5:
      *(_DWORD *)(a2 + 20) = 944879383;
      break;
    default:
      *(_WORD *)a2 = 0;
      break;
  }
  return result;
}

void sub_100F84394(uint64_t a1, unint64_t __val)
{
  std::to_string(&v30, __val);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v3 = &v30;
  }
  else {
    long long v3 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (sub_1004D00BC(a1 + 320, (uint64_t)v3))
  {
    sub_1000E9354(buf);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v4 = &v30;
    }
    else {
      long long v4 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    sub_100012960(a1 + 320, (const char *)v4, buf);
    char v5 = *(unsigned char *)(a1 + 268);
    LOBYTE(v++*(void *)(result + 32) = 0;
    int v6 = sub_1000D2988((uint64_t)buf, "shouldServeDetectionToClients", (BOOL *)&v32);
    char v7 = v32;
    if (!v6) {
      char v7 = v5;
    }
    *(unsigned char *)(a1 + 268) = v7;
    char v8 = *(unsigned char *)(a1 + 269);
    LOBYTE(v++*(void *)(result + 32) = 0;
    int v9 = sub_1000D2988((uint64_t)buf, "shouldEnableForWorkout", (BOOL *)&v32);
    char v10 = v32;
    if (!v9) {
      char v10 = v8;
    }
    *(unsigned char *)(a1 + 269) = v10;
    if (sub_1004D00BC((uint64_t)buf, (uint64_t)"params"))
    {
      sub_1000E9354(&v32);
      sub_100012960((uint64_t)buf, "params", &v32);
      float v11 = *(float *)(a1 + 272);
      float v31 = 0.0;
      int v12 = sub_10006EF84((uint64_t)&v32, "epochsPerWindow", &v31);
      float v13 = v31;
      if (!v12) {
        float v13 = v11;
      }
      *(float *)(a1 + 272) = v13;
      float v14 = *(float *)(a1 + 276);
      float v31 = 0.0;
      int v15 = sub_10006EF84((uint64_t)&v32, "epochStepSize", &v31);
      float v16 = v31;
      if (!v15) {
        float v16 = v14;
      }
      *(float *)(a1 + 276) = v16;
      float v17 = *(float *)(a1 + 280);
      float v31 = 0.0;
      int v18 = sub_10006EF84((uint64_t)&v32, "detectionEpochThreshold", &v31);
      float v19 = v31;
      if (!v18) {
        float v19 = v17;
      }
      *(float *)(a1 + 280) = v19;
      float v20 = *(float *)(a1 + 284);
      float v31 = 0.0;
      int v21 = sub_1004D11B0((uint64_t)&v32, "userAccelVarSumThreshold", &v31);
      float v22 = v31;
      if (!v21) {
        float v22 = v20;
      }
      *(float *)(a1 + 284) = v22;
      float v23 = *(float *)(a1 + 288);
      float v31 = 0.0;
      int v24 = sub_1004D11B0((uint64_t)&v32, "rotationRateVarSumThreshold", &v31);
      float v25 = v31;
      if (!v24) {
        float v25 = v23;
      }
      *(float *)(a1 + 2++*(void *)(result + 88) = v25;
      sub_10013F3C4(&v32);
    }
    sub_10013F3C4(buf);
  }
  else
  {
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    int v26 = qword_102419348;
    if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
    {
      __int16 v27 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v27 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      __int16 v35 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: mobile-asset setting not available for hkWorkoutType,%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419340 != -1) {
        dispatch_once(&qword_102419340, &stru_102307220);
      }
      int v28 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v28 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      int v32 = 136315138;
      long long v33 = v28;
      __int16 v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementController::applyMobileAssetSettings(unsigned long)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_100F8476C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F847BC(uint64_t a1, int *a2)
{
  BOOL v3 = *a2 == 1 && *((unsigned char *)a2 + 26) != 0;
  *(unsigned char *)(a1 + 2++*(void *)(result + 64) = v3;
  sub_1001A34E0(a1 + 8, 0, (uint64_t)&v10);
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  long long v4 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_INFO))
  {
    int v5 = *a2;
    int v6 = *((unsigned __int8 *)a2 + 26);
    *(_DWORD *)std::string buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLNoMovement] controller wristState,onWrist,%d,isWristDetectionEnabled,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    int v7 = *a2;
    int v8 = *((unsigned __int8 *)a2 + 26);
    int v11 = 67109376;
    int v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementController::feedWristState(const CLWatchOrientationSettingsNotifier_Type::WristState)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_100F849C4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 304))
  {
    long long v2 = *(float **)(a1 + 296);
    if (v2) {
      sub_100830048(v2, a2);
    }
  }
}

id sub_100F849DC(uint64_t a1, void *a2)
{
  id result = [a2 state];
  if (result == (id)1)
  {
    uint64_t v4 = a1 + 8;
    int v5 = &v7;
    int v6 = 1;
  }
  else
  {
    if (result != (id)2) {
      return result;
    }
    uint64_t v4 = a1 + 8;
    int v5 = &v8;
    int v6 = 2;
  }
  return (id)sub_1001A34E0(v4, v6, (uint64_t)v5);
}

id sub_100F84A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = *(id *)(a1 + 312);
  if (result) {
    return _[result onNoMovementControllerEpoch:a2 epochValue:a3];
  }
  return result;
}

uint64_t sub_100F84A54(uint64_t a1, uint64_t a2)
{
  return sub_1004CE798(a1 + 320, a2);
}

uint64_t sub_100F84A5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    BOOL v3 = v2 == 17;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  v6 = *(unsigned char *)(a1 + 269) && (v2 != 17 ? (BOOL v5 = v2 == 0) : (BOOL v5 = 1), v5) && *(unsigned char *)(a1 + 264) != 0;
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  char v7 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a1 + 268);
    int v9 = *(unsigned __int8 *)(a1 + 269);
    int v10 = *(unsigned __int8 *)(a1 + 264);
    int v11 = *(unsigned __int8 *)(a1 + 304);
    *(_DWORD *)std::string buf = 67110400;
    BOOL v15 = v6;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = v4;
    __int16 v22 = 1024;
    int v23 = v10;
    __int16 v24 = 1024;
    int v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLNoMovement] controller: shouldEnable,%d,shouldServeDetectionToClients,%d,shouldEnableForWorkout,%d,isManualStartOrResumeEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNoMovementController::shouldEnable(const EToggle *) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return *(_DWORD *)(a1 + 340) || v6;
}

BOOL sub_100F84CCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  BOOL v4 = v2 == 1 || v2 == 16;
  if (*(unsigned char *)(a1 + 304)) {
    BOOL v6 = v2 == 1 || v2 == 16 || *(unsigned char *)(a1 + 264) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  char v7 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a1 + 264);
    int v9 = *(unsigned __int8 *)(a1 + 304);
    *(_DWORD *)std::string buf = 67109888;
    BOOL v13 = v6;
    __int16 v14 = 1024;
    BOOL v15 = v4;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLNoMovement] controller: shouldDisable,%d,isManualStopOrPauseEvent,%d,isCurrentWristStateSupported,%d,isDetectorEnabled,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNoMovementController::shouldDisable(const EToggle *) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return !*(_DWORD *)(a1 + 340) && v6;
}

void sub_100F84F0C(uint64_t a1)
{
  *(unsigned char *)(a1 + 304) = 1;
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2) {
    [v2 onNoMovementControllerEnablement:1];
  }
  *(_OWORD *)int v12 = *(_OWORD *)(a1 + 272);
  *(_DWORD *)&v12[16] = *(_DWORD *)(a1 + 288);
  sub_10044FD20(v10, "NoMovementEpochsPerWindow", v12, 0);
  sub_10044FD20(v8, "NoMovementDetectionEpochThreshold", &v12[8], 0);
  *(_DWORD *)int v12 = v11;
  *(_DWORD *)&void v12[4] = 12;
  *(_DWORD *)&v12[8] = v9;
  *(void *)&v12[12] = 0x3851B7173727C5ACLL;
  uint64_t v3 = *(void *)(a1 + 296);
  if (v3)
  {
    long long v6 = *(_OWORD *)v12;
    int v7 = *(_DWORD *)&v12[16];
    sub_10082FE10(v3, &v6);
  }
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  BOOL v4 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action enable", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementController::enable(const EToggle *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_100F85134(uint64_t a1)
{
  *(unsigned char *)(a1 + 304) = 0;
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2) {
    [v2 onNoMovementControllerEnablement:0];
  }
  uint64_t v3 = *(void *)(a1 + 296);
  if (v3) {
    sub_10082FD44(v3);
  }
  sub_100F852E8((void *)a1);
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  BOOL v4 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action disable", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementController::disable(const EToggle *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void *sub_100F852E8(void *result)
{
  uint64_t v1 = (void *)result[39];
  if (v1 && *((unsigned char *)result + 268))
  {
    uint64_t v2 = result[37];
    if (v2) {
      uint64_t v3 = sub_1000D8908(v2);
    }
    else {
      uint64_t v3 = 0;
    }
    return _[v1 onNoMovementControllerStateUpdate:v3];
  }
  return result;
}

void sub_100F8534C(void *a1)
{
  sub_100F852E8(a1);
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  uint64_t v1 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action signal movement transition", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementController::signalTransition(const EDetectMove *)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_100F854D8(void *a1)
{
  sub_100F852E8(a1);
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_102307220);
  }
  uint64_t v1 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "[CLNoMovement] controller: fsm action signal no-movement transition", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_102307220);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementController::signalTransition(const EDetectNoMove *)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

uint64_t sub_100F85664(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x40) {
    return 3000;
  }
  else {
    return *(void *)&a4[8 * a1 - 8];
  }
}

void *sub_100F85688(void *a1)
{
  *a1 = off_1023071B8;
  sub_10013F3C4(a1 + 40);
  sub_100F85780(a1 + 37, 0);
  return a1;
}

void sub_100F856DC(void *a1)
{
  *a1 = off_1023071B8;
  sub_10013F3C4(a1 + 40);
  sub_100F85780(a1 + 37, 0);

  operator delete();
}

void sub_100F85750(id a1)
{
  qword_102419348 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

uint64_t sub_100F85780(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10082FE0C(result);
    operator delete();
  }
  return result;
}

void *sub_100F857D0(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 2) + ((a4 - a2) << 7) - ((a3 - *(void *)a2) >> 2);
  }
  uint64_t v7 = a1[1];
  int v8 = (char *)(v7 + 8 * (a1[4] >> 10));
  if (a1[2] == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 4 * (a1[4] & 0x3FFLL);
  }
  long long v33 = (char **)(v7 + 8 * (a1[4] >> 10));
  uint64_t v34 = (char *)v9;
  if (v9 == a3) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((a3 - *(void *)a2) >> 2) + ((a2 - v8) << 7) - ((v9 - *(void *)v8) >> 2);
  }
  int v11 = (char **)sub_100B83EFC((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      int v19 = v11;
      __int16 v20 = v12;
      int v21 = v33;
      __int16 v22 = v34;
      int v23 = sub_100B83EFC((uint64_t)&v32, v6);
      sub_100F85AA8(v21, v22, v19, v20, v23, v24, &v35);
      int v25 = v34;
      if (v34 != v36)
      {
        int v26 = v33;
        do
        {
          v25 += 4;
          uint64_t v34 = v25;
          if (v25 - *v26 == 4096)
          {
            __int16 v27 = v26[1];
            ++v26;
            int v25 = v27;
            long long v33 = v26;
            uint64_t v34 = v27;
          }
        }
        while (v25 != v36);
      }
      uint64_t v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((sub_1000A1688((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      BOOL v13 = (char **)sub_100B83EFC((uint64_t)&v32, v6);
      unint64_t v15 = a1[4] + a1[5];
      uint64_t v16 = a1[1];
      int v17 = (char **)(v16 + 8 * (v15 >> 10));
      if (a1[2] == v16) {
        __int16 v18 = 0;
      }
      else {
        __int16 v18 = &(*v17)[4 * (v15 & 0x3FF)];
      }
      __n128 v35 = v32;
      sub_100F85C34(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((sub_100F85A38(a1, 1) & 1) != 0)
        ;
    }
  }
  uint64_t v29 = a1[1];
  if (a1[2] == v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *(void *)(v29 + 8 * (a1[4] >> 10)) + 4 * (a1[4] & 0x3FFLL);
  }
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 10);
  v35.n128_u64[1] = v30;
  return sub_100B83EFC((uint64_t)&v35, v10);
}

void sub_100F85A08(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100F85A38(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100F85AA8@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    int v19 = a2;
    __int16 v18 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    BOOL v13 = a3 - 1;
    int v12 = *a3;
    __int16 v14 = a4;
    unint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100F85B78(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      unint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      int v17 = *v13--;
      int v12 = v17;
      __int16 v14 = v17 + 4096;
    }
    __int16 v18 = *a1 + 4096;
    int v19 = a2;
  }
  sub_100F85B78(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100F85B78@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    int v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 2 >= v12 >> 2) {
        uint64_t v13 = v12 >> 2;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 2;
      }
      v11 -= 4 * v13;
      a4 -= 4 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 4 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100F85C34(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    int v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    int v8 = a1 + 1;
    sub_100F85D04(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_100F85D04(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    int v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  sub_100F85D04(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_100F85D04@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 2 >= v11 >> 2 ? v11 >> 2 : (a3 - v9) >> 2;
      if (v12) {
        long long __src = (char *)memmove(__dst, v9, 4 * v12);
      }
      v9 += 4 * v12;
      if (v9 == a3) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      long long __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      long long __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t sub_100F85DC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024826D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024826D0))
  {
    sub_1000C7F88(&v2);
    int v4 = 0;
    if (sub_10006EF84(v2, "maxNumApsToLog", &v4)) {
      int v1 = v4;
    }
    else {
      int v1 = 50;
    }
    if (v3) {
      sub_1000DB0A0(v3);
    }
    dword_1024826C8 = v1;
    __cxa_guard_release(&qword_1024826D0);
  }
  return dword_1024826C8;
}

void sub_100F85E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  __cxa_guard_abort(&qword_1024826D0);
  _Unwind_Resume(a1);
}

void sub_100F85E90()
{
  if (byte_10248AFA8)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102307280);
    }
    uint64_t v0 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLMM, memory cache and tile count limit already set", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102307280);
      }
      int v1 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "%s\n", v1);
      if (v1 != (char *)buf) {
        free(v1);
      }
    }
  }
  else
  {
    +[GEOTileLoader setMemoryCacheCountLimit:9];
    +[GEOTileLoader setMemoryCacheTotalCostLimit:153600];
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102307280);
    }
    uint64_t v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109376;
      int v5 = 153600;
      __int16 v6 = 1024;
      int v7 = 9;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,GEOTileLoader memory cache,%d,tile count limit,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102307280);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGeoMapAccessTileLoader::setTileMemoryCacheAndCountLimits()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    byte_10248AFA8 = 1;
  }
}

void sub_100F861CC(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100F861FC(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11)
{
  long long v15 = (std::__shared_weak_count *)a4[1];
  uint64_t v37 = *a4;
  __int16 v38 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a5[1];
  uint64_t v35 = *a5;
  uint64_t v36 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = (std::__shared_weak_count *)a6[1];
  uint64_t v33 = *a6;
  uint64_t v34 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v32[0] = xmmword_1024826D8;
  v32[1] = unk_1024826E8;
  void v32[2] = xmmword_1024826F8;
  sub_100D6AEB4(a1, a2, 4, &v37, &v35, &v33, a11, a10, v32);
  if (v34) {
    sub_1000DB0A0(v34);
  }
  if (v36) {
    sub_1000DB0A0(v36);
  }
  if (v38) {
    sub_1000DB0A0(v38);
  }
  *(void *)a1 = off_1023072B0;
  *(void *)(a1 + 352) = *a3;
  uint64_t v18 = a3[1];
  *(void *)(a1 + 360) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = *a7;
  uint64_t v19 = a7[1];
  *(void *)(a1 + 376) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 384) = *a8;
  uint64_t v20 = a8[1];
  *(void *)(a1 + 392) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 400) = *a9;
  uint64_t v21 = a9[1];
  *(void *)(a1 + 408) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 4++*(void *)(result + 16) = 1;
  *(_DWORD *)(a1 + 420) = 30;
  *(unsigned char *)(a1 + 4++*(void *)(result + 40) = 0;
  *(void *)(a1 + 4++*(void *)(result + 48) = 0xBFF0000000000000;
  *(void *)(a1 + 4++*(void *)(result + 56) = 0;
  *(void *)(a1 + 4++*(void *)(result + 64) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 4++*(void *)(result + 88) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 4++*(void *)(result + 96) = 0;
  sub_100F897B0(a1 + 504, 0);
  *(unsigned char *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 6++*(void *)(result + 16) = 0u;
  *(_OWORD *)(a1 + 6++*(void *)(result + 32) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 6++*(void *)(result + 48) = 1065353216;
  sub_101171D90(a1 + 656);
  *(void *)(a1 + 6++*(void *)(result + 96) = 0xBFF0000000000000;
  *(void *)(a1 + 8++*(void *)(result + 24) = 0;
  *(void *)(a1 + 8++*(void *)(result + 16) = 0;
  *(_DWORD *)(a1 + 8++*(void *)(result + 32) = 0;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 8++*(void *)(result + 96) = 0;
  *(_DWORD *)(a1 + 912) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 7++*(void *)(result + 96) = 0u;
  *(_DWORD *)(a1 + 8++*(void *)(result + 88) = 0;
  *(_OWORD *)(a1 + 8++*(void *)(result + 40) = 0u;
  *(_OWORD *)(a1 + 8++*(void *)(result + 56) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_DWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 10++*(void *)(result + 32) = 0u;
  *(_OWORD *)(a1 + 10++*(void *)(result + 48) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 10++*(void *)(result + 16) = 0u;
  *(void *)(a1 + 1080) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 10++*(void *)(result + 88) = 0;
  *(_DWORD *)(a1 + 1112) = 0;
  *(void *)(a1 + 10++*(void *)(result + 96) = 0;
  *(void *)(a1 + 1104) = 0;
  *(_DWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1++*(void *)(result + 168) = 0u;
  *(_OWORD *)(a1 + 1++*(void *)(result + 152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  sub_100F86740(a1);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  __n128 v22 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v23 = *(unsigned __int8 *)(a1 + 416);
    int v24 = *(_DWORD *)(a1 + 424);
    int v25 = *(_DWORD *)(a1 + 428);
    *(void *)std::string buf = 68290051;
    __int16 v40 = 2082;
    double v41 = "";
    __int16 v42 = 2050;
    uint64_t v43 = 4;
    __int16 v44 = 1025;
    int v45 = v23;
    __int16 v46 = 1025;
    int v47 = v24;
    __int16 v48 = 1025;
    int v49 = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtime\":%{private}d, \"byteBudget\":%{private}d, \"interval\":%{private}d}", buf, 0x2Eu);
  }
  uint64_t v26 = *(void *)(a1 + 352);
  sub_100134750(buf, "TrafficServiceTimer");
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100F86AFC;
  void v30[3] = &unk_1022A3020;
  v30[4] = a1;
  (*(void (**)(long long *__return_ptr, uint64_t, uint8_t *, void *, double, double))(*(void *)v26 + 64))(&v31, v26, buf, v30, 1.79769313e308, 1.79769313e308);
  long long v27 = v31;
  long long v31 = 0uLL;
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 576);
  *(_OWORD *)(a1 + 568) = v27;
  if (v28)
  {
    sub_1000DB0A0(v28);
    if (*((void *)&v31 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v31 + 1));
    }
  }
  if (SBYTE3(v43) < 0) {
    operator delete(*(void **)buf);
  }
  return a1;
}

void sub_100F86658(_Unwind_Exception *a1)
{
  if (*(char *)(v5 - 89) < 0) {
    operator delete(*(void **)(v5 - 112));
  }
  sub_100F86B58(v4);
  sub_1002220F0(v3);
  if (*(char *)(v1 + 607) < 0) {
    operator delete(*(void **)(v1 + 584));
  }
  int v7 = *(std::__shared_weak_count **)(v1 + 576);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  *(void *)(v5 - 112) = v2;
  sub_100F89804((void ***)(v5 - 112));
  if (*(char *)(v1 + 479) < 0) {
    operator delete(*(void **)(v1 + 456));
  }
  int v8 = *(std::__shared_weak_count **)(v1 + 408);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 392);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v1 + 376);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v1 + 360);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

void sub_100F86714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  if (a26) {
    sub_1000DB0A0(a26);
  }
  long long v27 = *(std::__shared_weak_count **)(v26 - 120);
  if (v27) {
    sub_1000DB0A0(v27);
  }
  JUMPOUT(0x100F8670CLL);
}

void sub_100F86740(uint64_t a1)
{
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352), a1 + 420))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(a1 + 420);
      int v11 = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = 4;
      __int16 v17 = 1025;
      int v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest duration overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"minRealtimeHarvestDuration\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352), a1 + 428))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    uint64_t v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(a1 + 428);
      int v11 = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = 4;
      __int16 v17 = 1025;
      int v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"budget interval overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtimeBudgetInterval\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 40))(*(void *)(a1 + 352), a1 + 416))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    __int16 v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(unsigned __int8 *)(a1 + 416);
      int v11 = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = 4;
      __int16 v17 = 1025;
      int v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"realtime enabled overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtime\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
  int v8 = (int *)(a1 + 432);
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 48))(*(void *)(a1 + 352), a1 + 432))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    uint64_t v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *v8;
      int v11 = 68289539;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2050;
      uint64_t v16 = 4;
      __int16 v17 = 1025;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"real-time submission timeout overwritten by local default\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtimeSubmissionTimeout\":%{private}d}", (uint8_t *)&v11, 0x22u);
    }
  }
}

uint64_t sub_100F86AFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100F8836C(v1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 384) + 96);

  return v2();
}

uint64_t sub_100F86B58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 488);
  if (v2)
  {
    *(void *)(a1 + 4++*(void *)(result + 96) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 368);
  if (v3)
  {
    *(void *)(a1 + 376) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 288);
  if (v4)
  {
    *(void *)(a1 + 2++*(void *)(result + 96) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 208);
  if (v5)
  {
    *(void *)(a1 + 2++*(void *)(result + 16) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return a1;
}

uint64_t sub_100F86BCC(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11)
{
  return sub_100F861FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_100F86BE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 568);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 576);
    *(void *)(a1 + 568) = 0;
    *(void *)(a1 + 576) = 0;
    if (v3)
    {
      sub_1000DB0A0(v3);
    }
  }
}

uint64_t sub_100F86C58(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v14);
  long long v4 = unk_1024826E8;
  *(_OWORD *)(a1 + 280) = xmmword_1024826D8;
  *(_OWORD *)(a1 + 2++*(void *)(result + 96) = v4;
  *(_OWORD *)(a1 + 305) = unk_1024826F1;
  if (sub_100012960(a2, "Realtime", v14)) {
    sub_1012B77D8(a1 + 280, (uint64_t)v14);
  }
  if (*(unsigned char *)(a1 + 416) && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) & 1) == 0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    int v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2050;
      uint64_t v20 = 4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Device platform not eligible for real-time harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    *(unsigned char *)(a1 + 4++*(void *)(result + 16) = 0;
  }
  unint64_t v6 = sub_100F86FBC(a1);
  if (v6 >= 0x1F4) {
    unint64_t v7 = 500;
  }
  else {
    unint64_t v7 = v6;
  }
  if (*(void *)(a1 + 544) != v7)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    int v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      int v18 = "";
      __int16 v19 = 2050;
      uint64_t v20 = 4;
      __int16 v21 = 2049;
      unint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting real-time capacity\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"realtimeCapacity\":%{private}lu}", buf, 0x26u);
    }
    *(void *)(a1 + 536) = 0;
    *(void *)(a1 + 528) = 0;
    *(void *)(a1 + 544) = v7;
    sub_100F89914((uint64_t *)(a1 + 504), v7);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  uint64_t v9 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B7520();
    if (v13 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 68289539;
    int v16 = 0;
    __int16 v17 = 2082;
    int v18 = "";
    __int16 v19 = 2050;
    uint64_t v20 = 4;
    __int16 v21 = 2081;
    unint64_t v22 = (unint64_t)p_p;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v13 < 0) {
      operator delete(__p);
    }
  }
  sub_100D6B950(a1);
  return sub_10013F3C4(v14);
}

void sub_100F86F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

unint64_t sub_100F86FBC(uint64_t a1)
{
  uint64_t v1 = a1 + 280;
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40));
  uint64_t v3 = *(void *)(v2 + 16);
  long long v8 = *(_OWORD *)v2;
  uint64_t v9 = v3;
  sub_1012B74A4(v1, (uint64_t)&v8);
  double v5 = v4;
  sub_1012B77B0(v1);
  return (unint64_t)(v5 / v6);
}

BOOL sub_100F87044(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 416))
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 400) + 16))(*(void *)(a1 + 400)))
    {
      unint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
      double v3 = (double)*(int *)(a1 + 420);
      sub_1012B77B0(a1 + 280);
      if (v2 >= (unint64_t)(v3 / v4))
      {
        return 1;
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307390);
        }
        double v5 = qword_102419568;
        BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          int v8 = 68289282;
          int v9 = 0;
          __int16 v10 = 2082;
          int v11 = "";
          __int16 v12 = 2050;
          uint64_t v13 = 4;
          unint64_t v7 = "{\"msg%{public}.0s\":\"not ready to upload: not enough locations\", \"subHarvester\":%{public, location:C"
               "LSubHarvesterIdentifier}lld}";
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v8, 0x1Cu);
          return 0;
        }
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307390);
      }
      double v5 = qword_102419568;
      BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        int v8 = 68289282;
        int v9 = 0;
        __int16 v10 = 2082;
        int v11 = "";
        __int16 v12 = 2050;
        uint64_t v13 = 4;
        unint64_t v7 = "{\"msg%{public}.0s\":\"not ready to upload: motion requirements not met\", \"subHarvester\":%{public, locat"
             "ion:CLSubHarvesterIdentifier}lld}";
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    double v5 = qword_102419568;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = 4;
      unint64_t v7 = "{\"msg%{public}.0s\":\"not ready to upload: turned off\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      goto LABEL_16;
    }
  }
  return result;
}

double sub_100F872D4(uint64_t a1)
{
  uint64_t v2 = a1 + 280;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40));
  uint64_t v4 = *(void *)(v3 + 16);
  long long v9 = *(_OWORD *)v3;
  uint64_t v10 = v4;
  sub_1012B74A4(v2, (uint64_t)&v9);
  double v6 = v5 + v5;
  if (v6 >= 900.0) {
    double v7 = v6;
  }
  else {
    double v7 = 900.0;
  }
  if (v7 >= (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24))) {
    sub_101A98CF0();
  }
  return v7;
}

uint64_t sub_100F87398(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 24))(v1, v2, 2);
  return 1;
}

uint64_t sub_100F873F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = sub_10012FD50(a1);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 32);

  return v3(v1, v2, 2);
}

void sub_100F87450(_DWORD *a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289282;
    v3[1] = 0;
    __int16 v4 = 2082;
    double v5 = "";
    __int16 v6 = 2050;
    uint64_t v7 = 4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"starting new batch\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
  }
  a1[125] += (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 160))(a1);
  (*(void (**)(_DWORD *))(*(void *)a1 + 176))(a1);
  sub_100D6B950((uint64_t)a1);
}

uint64_t sub_100F875A0(uint64_t a1)
{
  return *(int *)(a1 + 536);
}

void sub_100F875A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 536);
  if (v1)
  {
    double v3 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    double v4 = v3 - (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    unint64_t v5 = *(void *)(a1 + 528);
    unint64_t v6 = *(void *)(a1 + 544);
    uint64_t v7 = *(void *)(a1 + 504);
    if (*(double *)(v7 + 696 * ((v1 + v5 - 1) % v6) + 76) >= v4)
    {
      uint64_t v8 = *(void *)(a1 + 536);
      if (v8)
      {
        uint64_t v9 = v8 - 1;
        do
        {
          if (*(double *)(v7 + 696 * v5 + 76) >= v4) {
            break;
          }
          unint64_t v5 = (v5 + 1) % v6;
          *(void *)(a1 + 528) = v5;
          *(void *)(a1 + 536) = v9--;
        }
        while (v9 != -1);
      }
    }
    else
    {
      *(void *)(a1 + 528) = 0;
      *(void *)(a1 + 536) = 0;
    }
  }
}

void sub_100F876AC(uint64_t a1)
{
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  sub_10022267C(a1 + 616);
}

uint64_t sub_100F876BC(uint64_t a1)
{
  sub_100103240();
  uint64_t result = sub_10016CCBC();
  if (result)
  {
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) & 2) != 0) {
      return 1;
    }
    else {
      return ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) >> 3) & 1;
    }
  }
  return result;
}

void sub_100F87748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ++*(_DWORD *)(a1 + 204);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 400) + 56))(*(void *)(a1 + 400));
  sub_100134750(v74, "com.apple.harvester.realtime");
  sub_10076C3A4(a1 + 656, (char *)v74, (CLMotionActivity *)(v6 + 376));
  uint64_t v7 = *(void *)(a1 + 568);
  double v8 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  (*(void (**)(uint64_t, double))(*(void *)v7 + 24))(v7, v8 + 30.0 + 1.0);
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 400) + 32))(*(void *)(a1 + 400), a4))
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 400) + 40))(__p);
    int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 400) + 120))(*(void *)(a1 + 400));
    sub_10076A8F4(a1 + 656, v74, (std::string *)__p, v9, a4, (CLMotionActivity *)(v6 + 376));
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 400) + 40))(__p);
    uint64_t v10 = (void **)(a1 + 584);
    if (__p[23] >= 0) {
      uint64_t v11 = __p[23];
    }
    else {
      uint64_t v11 = *(void *)&__p[8];
    }
    uint64_t v12 = *(unsigned __int8 *)(a1 + 607);
    int v13 = (char)v12;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a1 + 592);
    }
    if (v11 == v12)
    {
      if (v13 >= 0) {
        __int16 v14 = (unsigned __int8 *)(a1 + 584);
      }
      else {
        __int16 v14 = (unsigned __int8 *)*v10;
      }
      if ((__p[23] & 0x80) != 0)
      {
        uint64_t v20 = *(void **)__p;
        int v21 = memcmp(*(const void **)__p, v14, *(size_t *)&__p[8]);
        operator delete(v20);
        if (!v21)
        {
LABEL_33:
          int v22 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        if (!__p[23]) {
          goto LABEL_33;
        }
        uint64_t v15 = 0;
        do
        {
          int v16 = __p[v15];
          int v17 = v14[v15];
        }
        while (v16 == v17 && __p[23] - 1 != v15++);
        if (v16 == v17) {
          goto LABEL_33;
        }
      }
    }
    else if ((__p[23] & 0x80) != 0)
    {
      operator delete(*(void **)__p);
    }
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 400) + 40))(__p);
    if (*(char *)(a1 + 607) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
    *(void *)(a1 + 600) = *(void *)&__p[16];
    int v22 = 1;
LABEL_34:
    double v23 = *(double *)(a4 + 76);
    double v24 = *(double *)(a1 + 560);
    sub_1012B77B0(a1 + 280);
    double v25 = v23 - v24;
    double v27 = v26 + -0.1;
    if (v25 < v26 + -0.1)
    {
      if (!v22)
      {
LABEL_46:
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307390);
        }
        __n128 v32 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(void *)std::string __p = 68289283;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 1025;
          *(_DWORD *)&__p[20] = v25 >= v27;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"should we harvest\", \"timeToharvest\":%{private}hhd}", __p, 0x18u);
        }
        if (v25 >= v27)
        {
          uint64_t v66 = a4;
          if (*(char *)(v6 + 95) >= 0) {
            uint64_t v33 = v6 + 72;
          }
          else {
            uint64_t v33 = *(void *)(v6 + 72);
          }
          uint64_t v34 = +[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", sub_10132D070(+[NSString stringWithUTF8String:v33]));
          uint64_t v67 = a1;
          v72[0] = 0;
          v72[1] = 0;
          uint64_t v73 = 0;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          id v35 = [(NSMutableArray *)v34 countByEnumeratingWithState:&v68 objects:v89 count:16];
          if (v35)
          {
            uint64_t v36 = *(void *)v69;
            uint64_t v37 = (void *)(a1 + 616);
            do
            {
              for (CFIndex i = 0; i != v35; CFIndex i = (char *)i + 1)
              {
                if (*(void *)v69 != v36) {
                  objc_enumerationMutation(v34);
                }
                sub_100134750(__p, (char *)[*(id *)(*((void *)&v68 + 1) + 8 * i) UTF8String]);
                if (!sub_100122860(v37, __p))
                {
                  uint64_t v39 = *(void *)(v67 + 640);
                  uint64_t v76 = (long long *)__p;
                  *((_DWORD *)sub_100F89F14((uint64_t)v37, __p, (uint64_t)&unk_101D0B290, &v76) + 10) = v39;
                }
                uint64_t v76 = (long long *)__p;
                __int16 v40 = sub_100F89F14((uint64_t)v37, __p, (uint64_t)&unk_101D0B290, &v76);
                double v41 = v40;
                __int16 v42 = (char *)v72[1];
                if (v72[1] >= v73)
                {
                  __int16 v44 = (char *)v72[0];
                  int64_t v45 = ((char *)v72[1] - (char *)v72[0]) >> 2;
                  unint64_t v46 = v45 + 1;
                  if ((unint64_t)(v45 + 1) >> 62) {
                    sub_1001D7FD4();
                  }
                  uint64_t v47 = v73 - (char *)v72[0];
                  if ((v73 - (char *)v72[0]) >> 1 > v46) {
                    unint64_t v46 = v47 >> 1;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    int v49 = (char *)sub_10017EA34((uint64_t)&v73, v48);
                    __int16 v44 = (char *)v72[0];
                    __int16 v42 = (char *)v72[1];
                  }
                  else
                  {
                    int v49 = 0;
                  }
                  __int16 v50 = &v49[4 * v45];
                  *(_DWORD *)__int16 v50 = *((_DWORD *)v41 + 10);
                  uint64_t v43 = v50 + 4;
                  while (v42 != v44)
                  {
                    int v51 = *((_DWORD *)v42 - 1);
                    v42 -= 4;
                    *((_DWORD *)v50 - 1) = v51;
                    v50 -= 4;
                  }
                  v72[0] = v50;
                  v72[1] = v43;
                  uint64_t v73 = &v49[4 * v48];
                  if (v44) {
                    operator delete(v44);
                  }
                }
                else
                {
                  *(_DWORD *)v72[1] = *((_DWORD *)v40 + 10);
                  uint64_t v43 = v42 + 4;
                }
                v72[1] = v43;
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
              id v35 = [(NSMutableArray *)v34 countByEnumeratingWithState:&v68 objects:v89 count:16];
            }
            while (v35);
          }
          int v52 = *(_DWORD *)(v66 + 1176);
          long long v53 = *(_OWORD *)(v66 + 112);
          *(_OWORD *)&v78[16] = *(_OWORD *)(v66 + 96);
          *(_OWORD *)&v78[32] = v53;
          *(_OWORD *)&v78[48] = *(_OWORD *)(v66 + 128);
          *(_OWORD *)&v78[60] = *(_OWORD *)(v66 + 140);
          long long v54 = *(_OWORD *)(v66 + 48);
          *(_OWORD *)&unsigned char __p[32] = *(_OWORD *)(v66 + 32);
          *(_OWORD *)&__p[48] = v54;
          long long v55 = *(_OWORD *)(v66 + 80);
          *(_OWORD *)&__p[64] = *(_OWORD *)(v66 + 64);
          *(_OWORD *)uint64_t v78 = v55;
          long long v56 = *(_OWORD *)v66;
          long long v57 = *(_OWORD *)(v66 + 16);
          int v79 = v52;
          *(_OWORD *)std::string __p = v56;
          *(_OWORD *)&__p[16] = v57;
          sub_100F89590((uint64_t)&v80, v6);
          *(_OWORD *)__int16 v87 = *(_OWORD *)v72;
          double v88 = v73;
          v72[1] = 0;
          uint64_t v73 = 0;
          v72[0] = 0;
          sub_100F881E0((uint64_t *)(v67 + 504), (uint64_t)__p);
          if (v87[0])
          {
            v87[1] = v87[0];
            operator delete(v87[0]);
          }
          if (v86 < 0) {
            operator delete(v85);
          }
          if (v84 < 0) {
            operator delete(v83);
          }
          if (v82 < 0) {
            operator delete(v81);
          }
          *(void *)(v67 + 560) = *(void *)(v66 + 76);
          (*(void (**)(void))(**(void **)(v67 + 400) + 104))(*(void *)(v67 + 400));
          ++*(_DWORD *)(v67 + 208);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307390);
          }
          std::string::size_type v58 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v59 = *(void *)(v6 + 8);
            if (*(char *)(v6 + 31) >= 0) {
              uint64_t v59 = v6 + 8;
            }
            int v60 = *(_DWORD *)(v6 + 32);
            int v61 = *(_DWORD *)(v6 + 36);
            int v62 = *(_DWORD *)(v6 + 40);
            int v63 = *(unsigned __int8 *)(v6 + 101);
            int v64 = *(unsigned __int8 *)(v6 + 102);
            int v65 = *(unsigned __int8 *)(v6 + 100);
            *(void *)std::string __p = 68293123;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2050;
            *(void *)&__p[20] = 4;
            *(_WORD *)&unsigned char __p[28] = 1040;
            *(_DWORD *)&__p[30] = 156;
            *(_WORD *)&__p[34] = 2097;
            *(void *)&__p[36] = v66;
            *(_WORD *)&__p[44] = 2081;
            *(void *)&__p[46] = v59;
            *(_WORD *)&__p[54] = 1025;
            *(_DWORD *)&__p[56] = v60;
            *(_WORD *)&__p[60] = 1025;
            *(_DWORD *)&__p[62] = v61;
            *(_WORD *)&__p[66] = 1025;
            *(_DWORD *)&std::string __p[68] = v62;
            *(_WORD *)&__p[72] = 1025;
            *(_DWORD *)&__p[74] = v63;
            *(_WORD *)&__p[78] = 1025;
            *(_DWORD *)uint64_t v78 = v64;
            *(_WORD *)&v78[4] = 1040;
            *(_DWORD *)&v78[6] = 136;
            *(_WORD *)&v78[10] = 2097;
            *(void *)&v78[12] = v6 + 104;
            *(_WORD *)&v78[20] = 1040;
            *(_DWORD *)&v78[22] = 136;
            *(_WORD *)&v78[26] = 2097;
            *(void *)&v78[28] = v6 + 240;
            *(_WORD *)&v78[36] = 1040;
            *(_DWORD *)&v78[38] = 136;
            *(_WORD *)&v78[42] = 2097;
            *(void *)&v78[44] = v6 + 376;
            *(_WORD *)&v78[52] = 1025;
            *(_DWORD *)&v78[54] = v65;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P, \"tripId\":%{private, location:escape_only}s, \"rat\":%{private}d, \"mcc\":%{private}d, \"mnc\":%{private}d, \"motionVehicleConnectedStateChanged\":%{private}d, \"motionVehicleConnected\":%{private}d, \"rawMotionActivity\":%{private, location:CLMotionActivity}.*P, \"motionActivity\":%{private, location:CLMotionActivity}.*P, \"dominantMotionActivity\":%{private, location:CLMotionActivity}.*P, \"isProactiveLocationSession\":%{private}d}", __p, 0x8Au);
          }
          sub_100D6B950(v67);
          if (v72[0])
          {
            v72[1] = v72[0];
            operator delete(v72[0]);
          }
        }
        goto LABEL_97;
      }
    }
    else
    {
      double v28 = *(double *)(a4 + 76);
      double v29 = *(double *)(a1 + 560);
      if (v28 - v29 > (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24))) {
        char v30 = 1;
      }
      else {
        char v30 = v22;
      }
      if ((v30 & 1) == 0) {
        goto LABEL_46;
      }
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    long long v31 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(void *)std::string __p = 68289282;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2050;
      *(void *)&__p[20] = 4;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"need to start a new batch\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", __p, 0x1Cu);
    }
    sub_100F87450((_DWORD *)a1);
    goto LABEL_46;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  __int16 v19 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(void *)std::string __p = 68289026;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Dropping location, not candidate for realtime harvest\"}", __p, 0x12u);
  }
LABEL_97:
  if (v75 < 0) {
    operator delete(v74[0]);
  }
}

void sub_100F8813C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F881E0(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = a1[5];
  if (!v2) {
    return 0;
  }
  unint64_t v5 = (a1[3] + a1[4]) % v2;
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + 696 * v5;
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + ++*(void *)(result + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v7 + 80) = v8;
  *(_OWORD *)(v7 + ++*(void *)(result + 32) = v10;
  *(_OWORD *)(v7 + ++*(void *)(result + 48) = v9;
  long long v11 = *(_OWORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v7 + 144) = v11;
  *(_OWORD *)(v7 + ++*(void *)(result + 96) = v13;
  *(_OWORD *)(v7 + 112) = v12;
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + ++*(void *)(result + 16) = v14;
  *(void *)(v7 + ++*(void *)(result + 160) = *(void *)(a2 + 160);
  std::string::operator=((std::string *)(v7 + 168), (const std::string *)(a2 + 168));
  *(_OWORD *)(v7 + 192) = *(_OWORD *)(a2 + 192);
  std::string::operator=((std::string *)(v7 + 208), (const std::string *)(a2 + 208));
  std::string::operator=((std::string *)(v7 + 232), (const std::string *)(a2 + 232));
  memcpy((void *)(v7 + 256), (const void *)(a2 + 256), 0x1A0uLL);
  if (v7 != a2) {
    sub_1000FB43C((char *)(v6 + 696 * v5 + 672), *(char **)(a2 + 672), *(void *)(a2 + 680), (uint64_t)(*(void *)(a2 + 680) - *(void *)(a2 + 672)) >> 2);
  }
  unint64_t v15 = a1[4];
  if (v15 == a1[5])
  {
    uint64_t result = 0;
    a1[3] = (a1[3] + 1) % v15;
  }
  else
  {
    a1[4] = v15 + 1;
    return 1;
  }
  return result;
}

uint64_t sub_100F88308(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(void *)(a1 + 680) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

void sub_100F8836C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 56))(*(void *)(a1 + 368));
  double v3 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v4 = *(double *)(v2 + 76);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  double v5 = vabdd_f64(v3, v4);
  uint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 68289539;
    int v9 = 0;
    __int16 v10 = 2082;
    long long v11 = "";
    __int16 v12 = 2050;
    uint64_t v13 = 4;
    __int16 v14 = 2049;
    uint64_t v15 = *(void *)&v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Traffic service timer fired has elapsed since last GPS location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeElapsedSinceLast_s\":\"%{private}.09f\"}", (uint8_t *)&v8, 0x26u);
  }
  if (v5 > 30.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307390);
    }
    uint64_t v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 68289539;
      int v9 = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = 4;
      __int16 v14 = 2049;
      uint64_t v15 = 0x403E000000000000;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Time elapsed exceeds maximum time; disabling traffic service\", \"subHarvester\":%{public"
        ", location:CLSubHarvesterIdentifier}lld, \"trafficServiceDisableGap_s\":\"%{private}.09f\"}",
        (uint8_t *)&v8,
        0x26u);
    }
    (*(void (**)(void, void))(**(void **)(a1 + 368) + 112))(*(void *)(a1 + 368), 0);
  }
}

void sub_100F885AC(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = 4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"derivedUploadArchivedHarvest\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  (*(void (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  id v3 = objc_alloc_init((Class)CLPLocationCollectionRequest);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 400) + 56))(*(void *)(a1 + 400));
  sub_100F89590((uint64_t)v79, v4);
  if (v86 >= 0) {
    double v5 = &v85;
  }
  else {
    double v5 = v85;
  }
  [v3 setAppBundleId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5)];
  if (v81 >= 0) {
    uint64_t v6 = &v80;
  }
  else {
    uint64_t v6 = v80;
  }
  [v3 setTripId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)];
  [v3 setRat:v82];
  [v3 setMcc:v83];
  [v3 setMnc:v84];
  [v3 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
  if (*(void *)(a1 + 640))
  {
    uint64_t v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:");
    if (*(int *)(a1 + 640) >= 1)
    {
      int v8 = 0;
      do
      {
        [(NSMutableArray *)v7 addObject:&stru_10234F018];
        ++v8;
      }
      while (v8 < *(_DWORD *)(a1 + 640));
    }
    for (uint64_t i = a1 + 632;
          ;
          [(NSMutableArray *)v7 setObject:+[NSString stringWithUTF8String:v10] atIndexedSubscript:*(int *)(i + 40)])
    {
      uint64_t i = *(void *)i;
      if (!i) {
        break;
      }
      __int16 v10 = (void *)(i + 16);
      if (*(char *)(i + 39) < 0) {
        __int16 v10 = (void *)*v10;
      }
    }
    [v3 setAppBundleIds:v7];
  }
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 120))(*(void *)(a1 + 368));
  if (v11)
  {
    id v12 = [objc_alloc((Class)CLPAccessoryMeta) initWithAccessory:v11];
    [v3 setAccessoryMeta:v12];
  }
  v78[1] = 0;
  v78[0] = 0;
  if (*(void *)(a1 + 536))
  {
    int v55 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 528);
      uint64_t v14 = *(void *)(a1 + 504);
      uint64_t v15 = (_OWORD *)(v14 + 696 * v13);
      long long v16 = v15[1];
      *(_OWORD *)std::string buf = *v15;
      *(_OWORD *)&uint8_t buf[16] = v16;
      long long v17 = v15[4];
      long long v19 = v15[2];
      long long v18 = v15[3];
      long long v100 = v15[5];
      long long v99 = v17;
      *(_OWORD *)&uint8_t buf[32] = v19;
      long long v98 = v18;
      long long v20 = v15[8];
      long long v22 = v15[6];
      long long v21 = v15[7];
      *(_OWORD *)&v103[16] = v15[9];
      *(_OWORD *)int v103 = v20;
      long long v101 = v22;
      long long v102 = v21;
      sub_100F89590((uint64_t)&v104, (uint64_t)(v15 + 10));
      std::string __p = 0;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      sub_10010F834(&__p, *(const void **)(v14 + 696 * v13 + 672), *(void *)(v14 + 696 * v13 + 680), (uint64_t)(*(void *)(v14 + 696 * v13 + 680) - *(void *)(v14 + 696 * v13 + 672)) >> 2);
      uint64_t v23 = *(void *)(a1 + 536);
      if (v23)
      {
        *(void *)(a1 + 528) = (unint64_t)(*(void *)(a1 + 528) + 1) % *(void *)(a1 + 544);
        *(void *)(a1 + 536) = v23 - 1;
      }
      long long v75 = v101;
      long long v76 = v102;
      v77[0] = *(_OWORD *)v103;
      *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)&v103[12];
      long long v71 = *(_OWORD *)&buf[32];
      long long v72 = v98;
      long long v73 = v99;
      long long v74 = v100;
      long long v69 = *(_OWORD *)buf;
      long long v70 = *(_OWORD *)&buf[16];
      if (sub_100D6BE74(a1, (uint64_t)&v69))
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307390);
        }
        double v24 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int16 v89 = 68289795;
          int v90 = 0;
          __int16 v91 = 2082;
          __int16 v92 = "";
          __int16 v93 = 2050;
          uint64_t v94 = 4;
          __int16 v95 = 1040;
          *(_DWORD *)int v96 = 156;
          *(_WORD *)&v96[4] = 2097;
          *(void *)&v96[6] = &v69;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Database-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", v89, 0x2Cu);
        }
        id v25 = objc_alloc((Class)CLPLocation);
        v67[6] = v75;
        _DWORD v67[7] = v76;
        v68[0] = v77[0];
        *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)((char *)v77 + 12);
        v67[2] = v71;
        v67[3] = v72;
        v67[4] = v73;
        v67[5] = v74;
        v67[0] = v69;
        v67[1] = v70;
        id v26 = [v25 initWithDaemonLocation:v67];
        if (v26)
        {
          id v27 = objc_alloc((Class)CLPMotionActivity);
          unsigned char v65[6] = v120;
          v65[7] = v121;
          uint64_t v66 = v122;
          v65[2] = v116;
          v65[3] = v117;
          v65[4] = v118;
          v65[5] = v119;
          v65[0] = v114;
          v65[1] = v115;
          id v28 = [v27 initWithCLMotionActivity:v65];
          [v26 setRawMotionActivity:v28];

          id v29 = objc_alloc((Class)CLPMotionActivity);
          v63[6] = v129;
          v63[7] = v130;
          uint64_t v64 = v131;
          double v63[2] = v125;
          v63[3] = v126;
          v63[4] = v127;
          v63[5] = v128;
          v63[0] = v123;
          v63[1] = v124;
          id v30 = [v29 initWithCLMotionActivity:v63];
          [v26 setMotionActivity:v30];

          id v31 = objc_alloc((Class)CLPMotionActivity);
          long long v60 = v134;
          long long v61 = v135;
          uint64_t v62 = v136;
          CLMotionActivity v58 = v132;
          long long v59 = v133;
          id v32 = [v31 initWithCLMotionActivity:&v58];
          [v26 setDominantMotionActivity:v32];

          [v26 setMotionVehicleConnectedStateChanged:v112];
          [v26 setMotionVehicleConnected:v113];
          id v33 = objc_alloc((Class)CLPVehicleType);
          v56[6] = v129;
          v56[7] = v130;
          uint64_t v57 = v131;
          v56[2] = v125;
          v56[3] = v126;
          v56[4] = v127;
          v56[5] = v128;
          v56[0] = v123;
          v56[1] = v124;
          id v34 = [v33 initWithCLMotionActivity:v56];
          [v26 setVehicleType:v34];

          id v35 = objc_alloc_init((Class)NSMutableArray);
          uint64_t v36 = (unsigned int *)__p;
          uint64_t v37 = v138;
          while (v36 != v37)
            [v35 addObject:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%d", *v36++)];
          [v26 setAppBundleIdIndices:v35];
          if ((v75 & 0xFFFFFFF7) == 1)
          {
            [v26 setIsProactiveLocation:v111];
            [v3 addLocation:v26];
            int v41 = v111;
            sub_10076A874(v78, &v132);
            v55 += v41;
LABEL_64:
            uint64_t v46 = qword_102419560;
            ++*(_DWORD *)(a1 + 272);
            if (v46 != -1) {
              dispatch_once(&qword_102419560, &stru_102307390);
            }
            goto LABEL_66;
          }
          if (v75 != 3)
          {
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307390);
            }
            __int16 v44 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int16 v89 = 68289795;
              int v90 = 0;
              __int16 v91 = 2082;
              __int16 v92 = "";
              __int16 v93 = 2050;
              uint64_t v94 = 4;
              __int16 v95 = 1040;
              *(_DWORD *)int v96 = 156;
              *(_WORD *)&v96[4] = 2097;
              *(void *)&v96[6] = &v69;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", v89, 0x2Cu);
              if (qword_102419560 != -1) {
                dispatch_once(&qword_102419560, &stru_102307390);
              }
            }
            int64_t v45 = qword_102419568;
            if (os_signpost_enabled((os_log_t)qword_102419568))
            {
              *(_DWORD *)__int16 v89 = 68289795;
              int v90 = 0;
              __int16 v91 = 2082;
              __int16 v92 = "";
              __int16 v93 = 2050;
              uint64_t v94 = 4;
              __int16 v95 = 1040;
              *(_DWORD *)int v96 = 156;
              *(_WORD *)&v96[4] = 2097;
              *(void *)&v96[6] = &v69;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "throwing out non-gps, non-accessory location", "{\"msg%{public}.0s\":\"throwing out non-gps, non-accessory location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"location\":%{private, location:CLClientLocation}.*P}", v89, 0x2Cu);
              goto LABEL_64;
            }
            ++*(_DWORD *)(a1 + 272);
LABEL_66:
            uint64_t v47 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
            {
              id v48 = [v3 accessoryMeta];
              id v49 = [v26 modeIndicatorAsString:[v26 modeIndicator]];
              *(_DWORD *)__int16 v89 = 68289795;
              int v90 = 0;
              __int16 v91 = 2082;
              __int16 v92 = "";
              __int16 v93 = 2050;
              uint64_t v94 = 4;
              __int16 v95 = 2114;
              *(void *)int v96 = v48;
              *(_WORD *)&v96[8] = 2113;
              *(void *)&v96[10] = v49;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"accessory-meta\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"accessory\":%{public, location:escape_only}@, \"modeIndicator\":%{private, location:escape_only}@}", v89, 0x30u);
            }

            goto LABEL_69;
          }
          [v26 setIsProactiveLocation:0];
          switch(*(_DWORD *)&v103[28])
          {
            case 'A':
              uint64_t v43 = 2;
              break;
            case 'E':
              uint64_t v43 = 4;
              break;
            case 'D':
              uint64_t v43 = 3;
              break;
            default:
LABEL_63:
              [v3 addAccessoryLocation:v26];
              sub_10076A874(v78, &v132);
              goto LABEL_64;
          }
          [v26 setModeIndicator:v43];
          goto LABEL_63;
        }
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307390);
        }
        uint64_t v42 = qword_102419568;
        if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_69;
        }
        *(_DWORD *)__int16 v89 = 68289282;
        int v90 = 0;
        __int16 v91 = 2082;
        __int16 v92 = "";
        __int16 v93 = 2050;
        uint64_t v94 = 4;
        uint64_t v39 = v42;
        __int16 v40 = "{\"msg%{public}.0s\":\"skipping invalid location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307390);
        }
        uint64_t v38 = qword_102419568;
        if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_69;
        }
        *(_DWORD *)__int16 v89 = 68289282;
        int v90 = 0;
        __int16 v91 = 2082;
        __int16 v92 = "";
        __int16 v93 = 2050;
        uint64_t v94 = 4;
        uint64_t v39 = v38;
        __int16 v40 = "{\"msg%{public}.0s\":\"validateLocationForUpload failed\", \"subHarvester\":%{public, location:CLSubHarves"
              "terIdentifier}lld}";
      }
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, v40, v89, 0x1Cu);
LABEL_69:
      if (__p)
      {
        uint64_t v138 = (unsigned int *)__p;
        operator delete(__p);
      }
      if (v110 < 0) {
        operator delete(v109);
      }
      if (v108 < 0) {
        operator delete(v107);
      }
      if (v106 < 0) {
        operator delete(v105);
      }
      if (!*(void *)(a1 + 536)) {
        goto LABEL_80;
      }
    }
  }
  int v55 = 0;
LABEL_80:
  int v50 = *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40))
                           + 9);
  int v51 = *(_DWORD *)(a1 + 420);
  sub_1012B77B0(a1 + 280);
  sub_10076C2D8((int32x2_t *)(a1 + 656), v55, (uint64_t)v78, v50 != 0, (unint64_t)((double)v51 / v52));
  +[GEOLocationCollectionReporter reportRealtimeLocationCollection:v3];

  sub_100F87450((_DWORD *)a1);
  double v53 = sub_10016C458();
  [objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLLocationController") setRealTimeHarvestTriggered:v53];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  long long v54 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = 4;
    *(_WORD *)&buf[28] = 2050;
    *(double *)&buf[30] = v53;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"sent traffic harvest\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"time_s\":\"%{public}.09f\"}", buf, 0x26u);
  }
  if (v88 < 0) {
    operator delete(v87);
  }
  if (v86 < 0) {
    operator delete(v85);
  }
  if (v81 < 0) {
    operator delete(v80);
  }
}

void sub_100F892D0(_Unwind_Exception *a1)
{
}

uint64_t sub_100F89374(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100F893C8(uint64_t a1)
{
  *(unsigned char *)(a1 + 4++*(void *)(result + 40) = 1;
  *(CFAbsoluteTime *)(a1 + 4++*(void *)(result + 48) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 4++*(void *)(result + 96) = 0;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307390);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 480);
    uint64_t v4 = *(void *)(a1 + 488);
    int v5 = *(_DWORD *)(a1 + 496);
    v7[0] = 68290051;
    v7[1] = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = 4;
    __int16 v12 = 2049;
    uint64_t v13 = v3;
    __int16 v14 = 2049;
    uint64_t v15 = v4;
    __int16 v16 = 1025;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationRealtimeHarvest\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"remainingBudget\":%{private}lld, \"remainingInterval\":\"%{private}f\", \"pointsLostByBudget\":%{private}d}", (uint8_t *)v7, 0x36u);
  }
  *(void *)(a1 + 4++*(void *)(result + 40) = 0;
  *(void *)(a1 + 4++*(void *)(result + 48) = 0xBFF0000000000000;
  uint64_t v6 = (void **)(a1 + 456);
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*v6);
  }
  void *v6 = 0;
  *(void *)(a1 + 4++*(void *)(result + 64) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 4++*(void *)(result + 88) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 4++*(void *)(result + 96) = 0;
}

void sub_100F89528(uint64_t a1)
{
  sub_100F896A0(a1);

  operator delete();
}

void sub_100F89560(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100F89590(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + ++*(void *)(result + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_OWORD *)(a1 + ++*(void *)(result + 32) = *(_OWORD *)(a2 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + ++*(void *)(result + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + ++*(void *)(result + 48) = v5;
  }
  uint64_t v6 = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C(v6, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + ++*(void *)(result + 88) = *(void *)(a2 + 88);
    *(_OWORD *)uint64_t v6 = v7;
  }
  memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 0x1A0uLL);
  return a1;
}

void sub_100F8966C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F896A0(uint64_t a1)
{
  *(void *)a1 = off_1023072B0;
  uint64_t v2 = *(void **)(a1 + 1144);
  if (v2)
  {
    *(void *)(a1 + 1++*(void *)(result + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1024);
  if (v3)
  {
    *(void *)(a1 + 10++*(void *)(result + 32) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a1 + 944);
  if (v4)
  {
    *(void *)(a1 + 952) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)(a1 + 864);
  if (v5)
  {
    *(void *)(a1 + 872) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 727) < 0) {
    operator delete(*(void **)(a1 + 704));
  }
  sub_1002220F0(a1 + 616);
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 576);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  __int16 v12 = (void **)(a1 + 504);
  sub_100F89804(&v12);
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  long long v7 = *(std::__shared_weak_count **)(a1 + 408);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  __int16 v8 = *(std::__shared_weak_count **)(a1 + 392);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 376);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  __int16 v10 = *(std::__shared_weak_count **)(a1 + 360);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  return sub_1003C0998(a1);
}

uint64_t sub_100F897B0(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(void *)(a1 + ++*(void *)(result + 32) = 0;
  *(void *)(a1 + ++*(void *)(result + 40) = a2;
  sub_100F89914((uint64_t *)a1, a2);
  return a1;
}

void sub_100F897EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F89804((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100F89804(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 696;
        sub_100F8989C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100F8989C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 672);
  if (v3)
  {
    *(void *)(a2 + 680) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 255) < 0) {
    operator delete(*(void **)(a2 + 232));
  }
  if (*(char *)(a2 + 231) < 0) {
    operator delete(*(void **)(a2 + 208));
  }
  if (*(char *)(a2 + 191) < 0)
  {
    uint64_t v4 = *(void **)(a2 + 168);
    operator delete(v4);
  }
}

void sub_100F89914(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x66FD0EB66FD0EB67 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_100F899C0(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 696 * a2;
    while (v3 != v7)
    {
      v3 -= 696;
      sub_100F8989C((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **sub_100F899C0(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x66FD0EB66FD0EB67 * ((v6 - v7) >> 3) >= a2)
  {
    return (void **)sub_100F89B0C((uint64_t)a1, a2);
  }
  else
  {
    uint64_t v8 = 0x66FD0EB66FD0EB67 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x5E293205E29320) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x66FD0EB66FD0EB67 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2F149902F14990) {
      unint64_t v11 = 0x5E293205E29320;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v18 = v4;
    if (v11) {
      __int16 v12 = (char *)sub_10010FAD4(v4, v11);
    }
    else {
      __int16 v12 = 0;
    }
    __int16 v14 = v12;
    uint64_t v15 = &v12[696 * v8];
    __int16 v16 = v15;
    int v17 = &v12[696 * v11];
    sub_100F89BA4((uint64_t)&v14, a2);
    sub_100F89C3C(a1, &v14);
    return sub_100F89E98(&v14);
  }
}

void sub_100F89AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F89E98((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F89B0C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v3 = v2 + 696 * a2;
    __asm { FMOV            V2.2D, #-1.0 }
    do
    {
      *(_DWORD *)uint64_t v2 = 0xFFFF;
      *(_OWORD *)(v2 + 4) = 0uLL;
      *(_OWORD *)(v2 + 20) = xmmword_101D1C320;
      *(_OWORD *)(v2 + 36) = _Q2;
      *(_OWORD *)(v2 + 52) = _Q2;
      *(_OWORD *)(v2 + 68) = _Q2;
      *(_DWORD *)(v2 + 84) = 0;
      *(void *)(v2 + ++*(void *)(result + 88) = 0xBFF0000000000000;
      *(_OWORD *)(v2 + ++*(void *)(result + 96) = 0uLL;
      *(_DWORD *)(v2 + 112) = 0;
      *(void *)(v2 + 1++*(void *)(result + 16) = 0xBFF0000000000000;
      *(_DWORD *)(v2 + 1++*(void *)(result + 24) = 0x7FFFFFFF;
      *(void *)(v2 + 128) = 0;
      *(_OWORD *)(v2 + 136) = 0uLL;
      *(unsigned char *)(v2 + ++*(void *)(result + 152) = 0;
      *(_OWORD *)(v2 + ++*(void *)(result + 168) = 0uLL;
      *(void *)(v2 + 184) = 0;
      *(_OWORD *)(v2 + 2++*(void *)(result + 24) = 0uLL;
      *(_OWORD *)(v2 + 2++*(void *)(result + 40) = 0uLL;
      *(_OWORD *)(v2 + 208) = 0uLL;
      *(void *)(v2 + 6++*(void *)(result + 88) = 0;
      *(_OWORD *)(v2 + 672) = 0uLL;
      v2 += 696;
    }
    while (v2 != v3);
    uint64_t v2 = v3;
  }
  *(void *)(result + 8) = v2;
  return result;
}

uint64_t sub_100F89BA4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v3 = v2 + 696 * a2;
    __asm { FMOV            V2.2D, #-1.0 }
    do
    {
      *(_DWORD *)uint64_t v2 = 0xFFFF;
      *(_OWORD *)(v2 + 4) = 0uLL;
      *(_OWORD *)(v2 + 20) = xmmword_101D1C320;
      *(_OWORD *)(v2 + 36) = _Q2;
      *(_OWORD *)(v2 + 52) = _Q2;
      *(_OWORD *)(v2 + 68) = _Q2;
      *(_DWORD *)(v2 + 84) = 0;
      *(void *)(v2 + ++*(void *)(result + 88) = 0xBFF0000000000000;
      *(_OWORD *)(v2 + ++*(void *)(result + 96) = 0uLL;
      *(_DWORD *)(v2 + 112) = 0;
      *(void *)(v2 + 1++*(void *)(result + 16) = 0xBFF0000000000000;
      *(_DWORD *)(v2 + 1++*(void *)(result + 24) = 0x7FFFFFFF;
      *(void *)(v2 + 128) = 0;
      *(_OWORD *)(v2 + 136) = 0uLL;
      *(unsigned char *)(v2 + ++*(void *)(result + 152) = 0;
      *(_OWORD *)(v2 + ++*(void *)(result + 168) = 0uLL;
      *(void *)(v2 + 184) = 0;
      *(_OWORD *)(v2 + 2++*(void *)(result + 24) = 0uLL;
      *(_OWORD *)(v2 + 2++*(void *)(result + 40) = 0uLL;
      *(_OWORD *)(v2 + 208) = 0uLL;
      *(void *)(v2 + 6++*(void *)(result + 88) = 0;
      *(_OWORD *)(v2 + 672) = 0uLL;
      v2 += 696;
    }
    while (v2 != v3);
    uint64_t v2 = v3;
  }
  *(void *)(result + ++*(void *)(result + 16) = v2;
  return result;
}

uint64_t sub_100F89C3C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100F89CB4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100F89CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v27 = a6;
  *((void *)&v27 + 1) = a7;
  long long v26 = v27;
  v24[0] = a1;
  v24[1] = &v26;
  v24[2] = &v27;
  if (a3 == a5)
  {
    uint64_t v22 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 696;
    do
    {
      uint64_t v10 = v7 - 696;
      long long v11 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v9;
      *(_OWORD *)(v10 + ++*(void *)(result + 16) = v11;
      long long v12 = *(_OWORD *)(v9 + 32);
      long long v13 = *(_OWORD *)(v9 + 48);
      long long v14 = *(_OWORD *)(v9 + 80);
      *(_OWORD *)(v10 + ++*(void *)(result + 64) = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v10 + 80) = v14;
      *(_OWORD *)(v10 + ++*(void *)(result + 32) = v12;
      *(_OWORD *)(v10 + ++*(void *)(result + 48) = v13;
      long long v15 = *(_OWORD *)(v9 + 96);
      long long v16 = *(_OWORD *)(v9 + 112);
      long long v17 = *(_OWORD *)(v9 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v9 + 128);
      *(_OWORD *)(v10 + 144) = v17;
      *(_OWORD *)(v10 + ++*(void *)(result + 96) = v15;
      *(_OWORD *)(v10 + 112) = v16;
      *(void *)(v10 + ++*(void *)(result + 160) = *(void *)(v9 + 160);
      long long v18 = *(_OWORD *)(v9 + 168);
      *(void *)(v10 + 184) = *(void *)(v9 + 184);
      *(_OWORD *)(v10 + ++*(void *)(result + 168) = v18;
      *(_OWORD *)(v9 + ++*(void *)(result + 176) = 0u;
      *(void *)(v9 + ++*(void *)(result + 168) = 0;
      *(_OWORD *)(v10 + 192) = *(_OWORD *)(v9 + 192);
      long long v19 = *(_OWORD *)(v9 + 208);
      *(void *)(v10 + 2++*(void *)(result + 24) = *(void *)(v9 + 224);
      *(_OWORD *)(v10 + 208) = v19;
      *(_OWORD *)(v9 + 2++*(void *)(result + 16) = 0u;
      *(void *)(v9 + 208) = 0;
      long long v20 = *(_OWORD *)(v9 + 232);
      *(void *)(v10 + 2++*(void *)(result + 48) = *(void *)(v9 + 248);
      *(_OWORD *)(v10 + 2++*(void *)(result + 32) = v20;
      *(_OWORD *)(v9 + 2++*(void *)(result + 40) = 0u;
      *(void *)(v9 + 2++*(void *)(result + 32) = 0;
      memcpy((void *)(v7 - 440), (const void *)(v9 + 256), 0x1A0uLL);
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      *(_OWORD *)(v7 - ++*(void *)(result + 16) = 0u;
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = *(_OWORD *)(v9 + 672);
      *(void *)(v7 - 8) = *(void *)(v9 + 688);
      *(_OWORD *)(v9 + 672) = 0u;
      *(void *)(v9 + 6++*(void *)(result + 88) = 0;
      uint64_t v7 = *((void *)&v27 + 1) - 696;
      *((void *)&v27 + 1) -= 696;
      BOOL v21 = v9 == a5;
      v9 -= 696;
    }
    while (!v21);
    uint64_t v22 = v27;
  }
  char v25 = 1;
  sub_100F89E0C((uint64_t)v24);
  return v22;
}

uint64_t sub_100F89E0C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100F89E44((uint64_t *)a1);
  }
  return a1;
}

void sub_100F89E44(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100F8989C(v3, v1);
      v1 += 696;
    }
    while (v1 != v2);
  }
}

void **sub_100F89E98(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100F89ECC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 696;
    sub_100F8989C(v4, i - 696);
  }
}

unsigned __int8 *sub_100F89F14(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_100F8A1AC(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(result + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(void *)(result + 24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_100F8A188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_10022251C((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100F8A1AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100F8A23C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10022251C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100F8A294()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D99A48;
      v0[3] = unk_101D99A58;
      v0[4] = xmmword_101D99A68;
      v0[0] = xmmword_101D99A28;
      v0[1] = unk_101D99A38;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100F8A374(_Unwind_Exception *a1)
{
}

uint64_t sub_100F8A38C()
{
  return sub_1012B748C((uint64_t)&xmmword_1024826D8, 1, 1, 1, 1, 1.0, 120.0, 120.0);
}

void sub_100F8A6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8A774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8A7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8A86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8A8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8A964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8A9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8ABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8ACD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8ADE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8AFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8B038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8B0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8B130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8B1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8B238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8B2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F8B2C8()
{
  if (qword_10248AFB0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AFB0 + 8))(qword_10248AFB0);
  }
  if (qword_10248AFB8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248AFB8 + 8))(qword_10248AFB8);
  }
  uint64_t result = qword_10248AFC0;
  if (qword_10248AFC0)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248AFC0 + 8);
    return v1();
  }
  return result;
}

void sub_100F8B380(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_102482708 & 1) == 0)
  {
    byte_102482708 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPKnownAC.pb.cc", a4);
    operator new();
  }
}

uint64_t sub_100F8B500(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + ++*(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_1023074B0;
  *(_DWORD *)(result + ++*(void *)(result + 24) = 0;
  *(void *)(result + ++*(void *)(result + 32) = 0;
  *(_DWORD *)(result + ++*(void *)(result + 40) = 0;
  return result;
}

void sub_100F8B530(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      int v6 = *(_DWORD *)(a2 + 8);
      a1[6] |= 1u;
      a1[2] = v6;
      int v4 = *(_DWORD *)(a2 + 24);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *(_DWORD *)(a2 + 12);
    a1[6] |= 2u;
    a1[3] = v7;
    if ((*(_DWORD *)(a2 + 24) & 4) == 0) {
      return;
    }
LABEL_7:
    int v5 = *(_DWORD *)(a2 + 16);
    a1[6] |= 4u;
    a1[4] = v5;
  }
}

void sub_100F8B604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F8B61C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1023073C0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F8B63C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1023073C0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F8B690()
{
}

uint64_t sub_100F8B6E0(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + ++*(void *)(result + 16) = 0;
  }
  *(_DWORD *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_100F8B6F8(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_18;
          }
          unsigned int v18 = 0;
          unint64_t v10 = (char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
            if (!result) {
              return result;
            }
            unsigned int v11 = v18;
            uint8x8_t v12 = (unsigned char *)*((void *)this + 1);
            unint64_t v9 = *((void *)this + 2);
          }
          else
          {
            unsigned int v11 = *v10;
            uint8x8_t v12 = v10 + 1;
            *((void *)this + 1) = v12;
          }
          a1[2] = v11;
          a1[6] |= 1u;
          if ((unint64_t)v12 < v9 && *v12 == 16)
          {
            unint64_t v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_26;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
LABEL_26:
        unsigned int v17 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!result) {
            return result;
          }
          unsigned int v15 = v17;
          unint64_t v16 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v15 = *v13;
          unint64_t v16 = v13 + 1;
          *((void *)this + 1) = v16;
        }
        a1[3] = v15;
        a1[6] |= 2u;
        if ((unint64_t)v16 < v9 && *v16 == 29)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_34;
        }
      }
      if (v7 != 3) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 5) {
        goto LABEL_18;
      }
LABEL_34:
      unsigned int v19 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v19) & 1) == 0) {
        return 0;
      }
      a1[4] = v19;
      a1[6] |= 4u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

int *sub_100F8B900(int *result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = result;
  int v6 = result[6];
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], a2, a4);
    if ((v5[6] & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, result[2], a2, a4);
  int v6 = v5[6];
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return result;
  }
LABEL_7:
  float v7 = *((float *)v5 + 4);

  return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v7, a3);
}

uint64_t sub_100F8B98C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 24);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_22;
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    unsigned int v4 = 0;
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      goto LABEL_19;
    }
LABEL_13:
    float v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v7 & 0x80000000) != 0)
    {
      int v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 24);
    }
    else
    {
      int v8 = 2;
    }
    v4 += v8;
    goto LABEL_19;
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
  if ((v6 & 0x80000000) != 0)
  {
    unsigned int v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 24);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    unsigned int v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }
LABEL_19:
  if ((v3 & 4) != 0) {
    uint64_t result = v4 + 5;
  }
  else {
    uint64_t result = v4;
  }
LABEL_22:
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_100F8BA44(_DWORD *a1, void *lpsrc)
{
  sub_100F8B530(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F8BACC()
{
  return 1;
}

void *sub_100F8BAD4@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.ColdCoffee.Geodetic");
}

void sub_100F8BAE4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      *(_DWORD *)(a1 + 36) |= 1u;
      int v6 = *(_DWORD **)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248AFB8 + 8);
      }
      sub_100F8B530(v6, v7);
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 36) |= 2u;
    int v8 = *(_DWORD **)(a1 + 16);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248AFB8 + 16);
    }
    sub_100F8B530(v8, v9);
    if ((*(_DWORD *)(a2 + 36) & 4) != 0)
    {
LABEL_7:
      uint64_t v5 = *(void *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 4u;
      *(void *)(a1 + ++*(void *)(result + 24) = v5;
    }
  }
}

void sub_100F8BC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_100F8BC80(void *result)
{
  if ((void *)qword_10248AFB8 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t result = (void *)v1[2];
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100F8BD20(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102307438;
  sub_100F8BC80(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100F8BD74(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_102307438;
  sub_100F8BC80(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100F8BDDC()
{
}

uint64_t sub_100F8BE30(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 36);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(result + 36))
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 24))
        {
          *(void *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + ++*(void *)(result + 16) = 0;
        }
        *(_DWORD *)(v2 + ++*(void *)(result + 24) = 0;
        int v1 = *(_DWORD *)(result + 36);
      }
    }
    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 24))
        {
          *(void *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + ++*(void *)(result + 16) = 0;
        }
        *(_DWORD *)(v3 + ++*(void *)(result + 24) = 0;
      }
    }
    *(void *)(result + ++*(void *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100F8BE88(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v5 = (char *)*((void *)this + 1);
          if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if (v8 != 2) {
            goto LABEL_20;
          }
          *(_DWORD *)(a1 + 36) |= 1u;
          uint64_t v9 = *(_DWORD **)(a1 + 8);
          if (!v9) {
            operator new();
          }
          v29[0] = 0;
          unint64_t v10 = (char *)*((void *)this + 1);
          if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v29))return 0; {
          }
            }
          else
          {
            v29[0] = *v10;
            *((void *)this + 1) = v10 + 1;
          }
          int v11 = *((_DWORD *)this + 14);
          int v12 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v11 + 1;
          if (v11 >= v12) {
            return 0;
          }
          int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29[0]);
          if (!sub_100F8B6F8(v9, this, v14) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
          int v15 = *((_DWORD *)this + 14);
          BOOL v16 = __OFSUB__(v15, 1);
          int v17 = v15 - 1;
          if (v17 < 0 == v16) {
            *((_DWORD *)this + 14) = v17;
          }
          unsigned int v18 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v18 < *((void *)this + 2) && *v18 == 18)
          {
            *((void *)this + 1) = v18 + 1;
            goto LABEL_32;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
LABEL_32:
        *(_DWORD *)(a1 + 36) |= 2u;
        unsigned int v19 = *(_DWORD **)(a1 + 16);
        if (!v19) {
          operator new();
        }
        v29[0] = 0;
        unint64_t v20 = (char *)*((void *)this + 1);
        if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v29))return 0; {
        }
          }
        else
        {
          v29[0] = *v20;
          *((void *)this + 1) = v20 + 1;
        }
        int v21 = *((_DWORD *)this + 14);
        int v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0;
        }
        int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29[0]);
        if (!sub_100F8B6F8(v19, this, v24) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        int v25 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v25, 1);
        int v26 = v25 - 1;
        if (v26 < 0 == v16) {
          *((_DWORD *)this + 14) = v26;
        }
        long long v27 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v27 < *((void *)this + 2) && *v27 == 25)
        {
          *((void *)this + 1) = v27 + 1;
          goto LABEL_46;
        }
      }
      if (v7 != 3) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 1) {
        goto LABEL_20;
      }
LABEL_46:
      *(void *)id v29 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v29) & 1) == 0)return 0; {
      *(void *)(a1 + ++*(void *)(result + 24) = *(void *)v29;
      }
      *(_DWORD *)(a1 + 36) |= 4u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_20:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100F8C1E0(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248AFB8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248AFB8 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 4) != 0)
  {
LABEL_11:
    double v9 = *(double *)(v5 + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, v9, a3);
  }
  return result;
}

uint64_t sub_100F8C28C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0;
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AFB8 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F8B98C(v6, a2);
    int v8 = (int)v7;
    if (v7 >= 0x80) {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
    }
    else {
      int v9 = 1;
    }
    unsigned int v4 = v8 + v9 + 1;
    int v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  unsigned int v4 = 0;
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
LABEL_12:
    uint64_t v10 = *(void *)(a1 + 16);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248AFB8 + 16);
    }
    int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F8B98C(v10, a2);
    int v13 = (int)v11;
    if (v11 >= 0x80) {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, v12);
    }
    else {
      int v14 = 1;
    }
    v4 += v13 + v14 + 1;
    int v3 = *(_DWORD *)(a1 + 36);
  }
LABEL_18:
  if ((v3 & 4) != 0) {
    uint64_t result = v4 + 9;
  }
  else {
    uint64_t result = v4;
  }
LABEL_21:
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = result;
  return result;
}

void sub_100F8C36C(uint64_t a1, void *lpsrc)
{
  sub_100F8BAE4(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F8C3F4()
{
  return 1;
}

void *sub_100F8C3FC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.ColdCoffee.LocationInfo");
}

void sub_100F8C40C(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      int v6 = a1[5];
      uint64_t v7 = (int)a1[4];
      if ((int)v7 >= v6)
      {
        if (v6 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2), v6 + 1);
          int v6 = a1[5];
        }
        a1[5] = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)a1 + 1);
      a1[4] = v7 + 1;
      sub_100F8BAE4(*(void *)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 16));
  }
  if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 32);
    if (v9 >= 2) {
      sub_101A98EC0();
    }
    a1[10] |= 2u;
    a1[8] = v9;
  }
}

void sub_100F8C598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100F8C5B0(uint64_t *a1)
{
  *a1 = (uint64_t)off_1023074B0;
  sub_10016B2E8(a1 + 1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

void sub_100F8C60C(uint64_t *a1)
{
  sub_100F8C5B0(a1);

  operator delete();
}

void sub_100F8C644()
{
}

uint64_t sub_100F8C69C(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 40) & 0x1FE) != 0) {
    *(_DWORD *)(a1 + ++*(void *)(result + 32) = 0;
  }
  uint64_t result = sub_10026DEDC(a1 + 8);
  *(_DWORD *)(a1 + ++*(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_100F8C6D8(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
    while (1)
    {
LABEL_2:
      int v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 != 2)
      {
        int v8 = TagFallback & 7;
        goto LABEL_33;
      }
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_33;
      }
      uint64_t v10 = (char *)*((void *)this + 1);
      unint64_t v9 = *((void *)this + 2);
LABEL_11:
      unsigned int v27 = 0;
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
        if (!result) {
          return result;
        }
        unsigned int v11 = v27;
      }
      else
      {
        unsigned int v11 = *v10;
        *((void *)this + 1) = v10 + 1;
      }
      if (v11 <= 1)
      {
        a1[10] |= 2u;
        a1[8] = v11;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
    if (v8 == 2)
    {
      while (1)
      {
        int v12 = a1[5];
        uint64_t v13 = a1[4];
        if ((int)v13 >= v12)
        {
          if (v12 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v12 + 1);
            int v12 = a1[5];
          }
          a1[5] = v12 + 1;
          operator new();
        }
        uint64_t v14 = *((void *)a1 + 1);
        a1[4] = v13 + 1;
        uint64_t v15 = *(void *)(v14 + 8 * v13);
        unsigned int v28 = 0;
        BOOL v16 = (char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0; {
        }
          }
        else
        {
          unsigned int v28 = *v16;
          *((void *)this + 1) = v16 + 1;
        }
        int v17 = *((_DWORD *)this + 14);
        int v18 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v17 + 1;
        if (v17 >= v18) {
          return 0;
        }
        int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
        if (!sub_100F8BE88(v15, this, v20) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
        int v21 = *((_DWORD *)this + 14);
        BOOL v22 = __OFSUB__(v21, 1);
        int v23 = v21 - 1;
        if (v23 < 0 == v22) {
          *((_DWORD *)this + 14) = v23;
        }
        unsigned int v24 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v24 >= v9) {
          goto LABEL_2;
        }
        int v25 = *v24;
        if (v25 != 10)
        {
          if (v25 != 16) {
            goto LABEL_2;
          }
          uint64_t v10 = (char *)(v24 + 1);
          *((void *)this + 1) = v10;
          goto LABEL_11;
        }
        *((void *)this + 1) = v24 + 1;
      }
    }
LABEL_33:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_100F8C99C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v6 = 0;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 8) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 16));
  }
  if ((*(unsigned char *)(v5 + 40) & 2) != 0)
  {
    int v7 = *(_DWORD *)(v5 + 32);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (int)a2, a4);
  }
  return result;
}

uint64_t sub_100F8CA30(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v4 & 0x80000000) != 0)
    {
      int v3 = 11;
    }
    else if (v4 >= 0x80)
    {
      int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }
    else
    {
      int v3 = 2;
    }
  }
  else
  {
    int v3 = 0;
  }
  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = (v5 + v3);
  if (v5 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F8C28C(*(void *)(*(void *)(a1 + 8) + 8 * v7), a2);
      int v9 = (int)v8;
      if (v8 >= 0x80) {
        int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
      }
      else {
        int v10 = 1;
      }
      uint64_t v6 = (v9 + v6 + v10);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  *(_DWORD *)(a1 + 36) = v6;
  return v6;
}

void sub_100F8CAEC(_DWORD *a1, void *lpsrc)
{
  sub_100F8C40C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100F8CB74()
{
  return 1;
}

void *sub_100F8CB7C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.ColdCoffee.CoffeeShops");
}

void sub_100F8CB90()
{
}

void sub_100F8CC00()
{
}

void sub_100F8CC24()
{
}

void sub_100F8CC68()
{
}

uint64_t sub_100F8CC8C()
{
  if (qword_102482718 != -1) {
    dispatch_once(&qword_102482718, &stru_102307560);
  }
  return qword_10248AFC8;
}

uint64_t sub_100F8CCD4(uint64_t a1, uint64_t a2, void **a3)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  uint64_t v30 = 0;
  id v31 = &v30;
  uint64_t v32 = 0x3052000000;
  id v33 = sub_100177E5C;
  id v34 = sub_10017763C;
  uint64_t v35 = 0;
  uint64_t v6 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100F8D6C8;
  block[3] = &unk_1022CF388;
  void block[5] = &v30;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync(v6, block);
  if (!v31[5])
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    unsigned int v11 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[Dynamic Config] No valid configuration found, parameter %@ left unchanged.", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v36 = 138412290;
    uint64_t v37 = a2;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v12);
LABEL_43:
    if (v12 == buf)
    {
LABEL_50:
      uint64_t v19 = 0;
      goto LABEL_51;
    }
LABEL_44:
    free(v12);
    goto LABEL_50;
  }
  unsigned int v28 = 0;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  int v8 = sub_1000A6A10(*(uint64_t *)buf, a2, &v28);
  uint64_t v9 = *(void *)&buf[8];
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v8)
  {
    *a3 = v28;
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v10 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Value for key %@ set on disk, returning.", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419280 == -1) {
      goto LABEL_42;
    }
LABEL_60:
    dispatch_once(&qword_102419280, &stru_1023075A8);
LABEL_42:
    int v36 = 138412290;
    uint64_t v37 = a2;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v12);
    goto LABEL_43;
  }
  id v13 = sub_100F8DDB0(v9, (void *)v31[5]);
  uint64_t v14 = v13;
  if (!v13)
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    unsigned int v20 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Failed to convert parameter (%@) to dict", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419280 == -1) {
      goto LABEL_42;
    }
    goto LABEL_60;
  }
  if (![v13 objectForKey:a2])
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v21 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Configuration doesn't modify parameter %@.", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419280 == -1) {
      goto LABEL_42;
    }
    goto LABEL_60;
  }
  id v15 = [v14 objectForKeyedSubscript:a2];
  if ((sub_100F8DFBC((uint64_t)v15, a2, v15) & 1) == 0)
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    BOOL v22 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      id v23 = [v14 objectForKeyedSubscript:a2];
      *(_DWORD *)std::string buf = 138412547;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2113;
      *(void *)&unsigned char buf[14] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Sanity check failed for key %@ with retrieved value %{private}@.", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    id v25 = [v14 objectForKeyedSubscript:a2];
    int v36 = 138412547;
    uint64_t v37 = a2;
    __int16 v38 = 2113;
    id v39 = v25;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v12);
    if (v12 == buf) {
      goto LABEL_50;
    }
    goto LABEL_44;
  }
  [objc_msgSend(v14, "objectForKeyedSubscript:", a2) doubleValue];
  *a3 = v16;
  if (qword_102419280 != -1) {
    dispatch_once(&qword_102419280, &stru_1023075A8);
  }
  int v17 = qword_102419288;
  if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = *a3;
    *(_DWORD *)std::string buf = 138412547;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&unsigned char buf[14] = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Overriding %@ to %{private}f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v26 = *a3;
    int v36 = 138412547;
    uint64_t v37 = a2;
    __int16 v38 = 2049;
    id v39 = v26;
    unsigned int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)", "%s\n", v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  uint64_t v19 = 1;
LABEL_51:
  _Block_object_dispose(&v30, 8);
  return v19;
}

void sub_100F8D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100F8D6C8(void *a1)
{
  uint64_t v2 = a1[6];
  if (*(_DWORD *)(v2 + 64) == 1)
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v3 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = a1[4];
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v26 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Configuration state inactive (parameter=%@)", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      uint64_t v5 = a1[4];
      LODWORD(v15) = 138412290;
      *(void *)((char *)&v15 + 4) = v5;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    long long v15 = 0uLL;
    int v16 = 0;
    sub_100134750(&v17, "");
    sub_100134750(&v19, "");
    sub_100134750(&v21, "");
    sub_100134750(__p, "");
    if (sub_1004C0A98(*(void *)v2, (uint64_t)&v15) == 100)
    {
      if ((void)v15)
      {
        *(_DWORD *)(v2 + ++*(void *)(result + 64) = 2;
        if (v24 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(void *)(*(void *)(a1[5] + 8) + ++*(void *)(result + 40) = +[NSString stringWithUTF8String:v7];
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1023075A8);
        }
        int v8 = qword_102419288;
        if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 40);
          *(_DWORD *)std::string buf = 138412290;
          uint64_t v26 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Received parameter string %@.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419280 != -1) {
            dispatch_once(&qword_102419280, &stru_1023075A8);
          }
          int v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
      }
      else
      {
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1023075A8);
        }
        int v12 = qword_102419288;
        if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[Dynamic Config] No records in DB.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419280 != -1) {
            dispatch_once(&qword_102419280, &stru_1023075A8);
          }
          uint64_t v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        *(_DWORD *)(v2 + ++*(void *)(result + 64) = 1;
      }
    }
    else
    {
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      unsigned int v11 = qword_102419288;
      if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Error querying DB.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1023075A8);
        }
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::getParameterWithDefault(NSString *, double &)_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      *(_DWORD *)(v2 + ++*(void *)(result + 64) = 0;
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
  }
}

void sub_100F8DD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

id sub_100F8DDB0(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  id v2 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", [a2 dataUsingEncoding:4], 0, &v7);
  if (v2) {
    BOOL v3 = v7 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    uint64_t v4 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412546;
      id v13 = v2;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[Dynamic Config] Parse error: %@, error: %@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      int v8 = 138412546;
      id v9 = v2;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLContextConfigurationManager::stringToDictionary(NSString *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return 0;
  }
  return v2;
}

uint64_t sub_100F8DFBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  if (a2 && a3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return 0;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return 0;
    }
    [a3 doubleValue];
    double v7 = v6;
    id v8 = [(id)qword_102482710 objectForKey:a2];
    if (!v8)
    {
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      __int16 v14 = qword_102419288;
      if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v17 = a2;
        __int16 v18 = 2112;
        uint64_t v19 = qword_102482710;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[Dynamic Config] No bounds defined for parameter %@. Defined bounds are %@", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      id v13 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::isParameterSafe(NSString *, id)", "%s\n");
      goto LABEL_26;
    }
    id v9 = v8;
    [objc_msgSend(v8, "objectAtIndexedSubscript:", 0) doubleValue];
    if (v7 < v10
      || (uint64_t v3 = 1, objc_msgSend(objc_msgSend(v9, "objectAtIndexedSubscript:", 1), "doubleValue"), v7 > v11))
    {
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      int v12 = qword_102419288;
      if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v17 = a2;
        __int16 v18 = 2112;
        uint64_t v19 = (uint64_t)a3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[Dynamic Config] Out of bounds: Parameter %@ cannot be set to %@", buf, 0x16u);
      }
      uint64_t v3 = 0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1023075A8);
        }
        id v13 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLContextConfigurationManager::isParameterSafe(NSString *, id)", "%s\n");
LABEL_26:
        if (v13 != buf) {
          free(v13);
        }
        return 0;
      }
    }
  }
  return v3;
}

uint64_t sub_100F8E384(uint64_t a1, void *a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  if (!a2) {
    return 112;
  }
  if (sub_100F8E928(a1, a2))
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    uint64_t v4 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Valid config received: %{private}@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      int v20 = 138477827;
      int v21 = a2;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)", "%s\n", v15);
      if (v15 != (char *)&buf) {
        free(v15);
      }
    }
    unsigned int v5 = [[a2 objectForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kPriority")] intValue];
    id v6 = [a2 objectForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kConfigId")];
    id v7 = [a2 objectForKey:[NSString stringWithUTF8String:@"kAppBundleIdentifier"]];
    id v8 = [a2 objectForKey:[NSString stringWithUTF8String:kStudyId]];
    id v9 = [a2 objectForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kParameterDictionary")];
    if (v6 && v7 && v8 && v9)
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v23 = 0x2020000000;
      int v24 = 103;
      double v10 = *(NSObject **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100F8ECFC;
      block[3] = &unk_102307588;
      block[8] = &buf;
      block[9] = a1;
      block[4] = v6;
      void block[5] = v9;
      unsigned int v19 = v5;
      block[6] = v7;
      void block[7] = v8;
      dispatch_sync(v10, block);
      uint64_t v11 = *(unsigned int *)(*((void *)&buf + 1) + 24);
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      id v13 = qword_102419288;
      if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[Dynamic Config] Nil value received for one or more fields.", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1023075A8);
        }
        LOWORD(v20) = 0;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)", "%s\n", v17);
        if (v17 != (char *)&buf) {
          free(v17);
        }
      }
      return 107;
    }
  }
  else
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v12 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Invalid config received: %{private}@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      int v20 = 138477827;
      int v21 = a2;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)", "%s\n", v16);
      if (v16 != (char *)&buf) {
        free(v16);
      }
    }
    return 100;
  }
  return v11;
}

BOOL sub_100F8E928(uint64_t a1, void *a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  if ((unint64_t)[a2 count] > 4)
  {
    v20[0] = +[NSString stringWithUTF8String:"kPriority"];
    v20[1] = +[NSString stringWithUTF8String:"kConfigId"];
    _OWORD v20[2] = +[NSString stringWithUTF8String:"kAppBundleIdentifier"];
    void v20[3] = +[NSString stringWithUTF8String:"kStudyId"];
    void v20[4] = +[NSString stringWithUTF8String:"kParameterDictionary"];
    unsigned int v5 = +[NSArray arrayWithObjects:v20 count:5];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = [(NSArray *)v5 countByEnumeratingWithState:&v13 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v14;
LABEL_12:
      uint64_t v9 = 0;
      while (1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8 * v9);
        if (![a2 objectForKey:v10]) {
          break;
        }
        if (v7 == (id)++v9)
        {
          id v7 = [(NSArray *)v5 countByEnumeratingWithState:&v13 objects:v19 count:16];
          BOOL result = 1;
          if (v7) {
            goto LABEL_12;
          }
          return result;
        }
      }
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      uint64_t v11 = qword_102419288;
      if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Invalid configuration: key %@ not found.", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1023075A8);
        }
        int v17 = 138412290;
        uint64_t v18 = v10;
        goto LABEL_27;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    uint64_t v3 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Invalid configuration: too few keys.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      LOWORD(v17) = 0;
LABEL_27:
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLContextConfigurationManager::isConfigValid(const NSDictionary<NSString *,id> *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return 0;
    }
  }
  return result;
}

void sub_100F8ECFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (*(void *)(v2 + 56))
  {
    uint64_t v3 = 0;
    while (1)
    {
      unint64_t v4 = *(void *)(*(void *)(v2 + 24) + 8 * ((v3 + *(void *)(v2 + 48)) / 0xAAuLL))
         + 24 * ((v3 + *(void *)(v2 + 48)) % 0xAAuLL);
      if (*(char *)(v4 + 23) < 0) {
        unint64_t v4 = *(void *)v4;
      }
      if ([*(id *)(a1 + 32) isEqualToString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)])break; {
      if ((unint64_t)++v3 >= *(void *)(v2 + 56))
      }
        goto LABEL_7;
    }
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v17 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v18 = *(void *)(a1 + 32);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Ignoring duplicate config %@.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      uint64_t v23 = *(void *)(a1 + 32);
      LODWORD(v36) = 138412290;
      *(void *)((char *)&v36 + 4) = v23;
      int v24 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", (const char *)v24);
      if (v24 != &buf) {
        free(v24);
      }
    }
    uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
    int v20 = 100;
    goto LABEL_42;
  }
LABEL_7:
  id v5 = +[NSMutableDictionary dictionary];
  id v6 = sub_100F8DDB0((uint64_t)v5, *(void **)(a1 + 40));
  if (!v6)
  {
LABEL_41:
    uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
    int v20 = 107;
LABEL_42:
    *(_DWORD *)(v19 + ++*(void *)(result + 24) = v20;
    return;
  }
  id v7 = v6;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v8 = [v6 countByEnumeratingWithState:&v30 objects:v42 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v30 + 1) + 8 * i);
        id v12 = [v7 objectForKeyedSubscript:v11];
        if (sub_100F8DFBC((uint64_t)v12, v11, v12)) {
          [v5 setObject:[v7 objectForKeyedSubscript:v11] forKey:v11];
        }
      }
      id v8 = [v7 countByEnumeratingWithState:&v30 objects:v42 count:16];
    }
    while (v8);
  }
  if (![v5 count])
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    int v21 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEBUG))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "[Dynamic Config] Parameter dictionary is empty, returning.", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      LOWORD(v36) = 0;
      id v25 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", (const char *)v25);
      if (v25 != &buf) {
        free(v25);
      }
    }
    goto LABEL_41;
  }
  long long v36 = 0uLL;
  int v37 = 0;
  sub_100134750(&v38, "");
  sub_100134750(&v39, "");
  sub_100134750(&v40, "");
  sub_100134750(&__p, "");
  *((void *)&v36 + 1) = CFAbsoluteTimeGetCurrent();
  int v37 = *(_DWORD *)(a1 + 80);
  std::string::assign(&v38, (const std::string::value_type *)[*(id *)(a1 + 32) UTF8String]);
  std::string::assign(&v39, (const std::string::value_type *)[*(id *)(a1 + 48) UTF8String]);
  std::string::assign(&v40, (const std::string::value_type *)[*(id *)(a1 + 56) UTF8String]);
  unint64_t v29 = 0;
  long long v13 = +[NSJSONSerialization dataWithJSONObject:v5 options:0 error:&v29];
  if (!v13 || v29)
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    uint64_t v22 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[Dynamic Config] Error serializing parameter dictionary, error: %@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      int v34 = 138412290;
      unint64_t v35 = v29;
      uint64_t v26 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", (const char *)v26);
      if (v26 != &buf) {
        free(v26);
      }
    }
    int v16 = 107;
  }
  else
  {
    std::string::assign(&__p, (const std::string::value_type *)[((NSString *)[objc_alloc((Class)NSString) initWithData:v13 encoding:4]) UTF8String]);
    sub_1004C04BC(*(void *)v2, (uint64_t)&v36);
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1023075A8);
    }
    long long v14 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v15 = *(void *)(a1 + 32);
      buf.n128_u32[0] = 138543362;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[Dynamic Config] Inserted config with ID %{public}@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1023075A8);
      }
      unint64_t v27 = *(void *)(a1 + 32);
      int v34 = 138543362;
      unint64_t v35 = v27;
      unsigned int v28 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLContextConfigurationManager::insertNewConfig(const NSDictionary<NSString *,id> *)_block_invoke", "%s\n", (const char *)v28);
      if (v28 != &buf) {
        free(v28);
      }
    }
    if (*(void *)(v2 + 56) >= 3uLL) {
      sub_100CF083C((void *)(v2 + 16));
    }
    sub_100134750(&buf, (char *)[*(id *)(a1 + 32) UTF8String]);
    sub_100F8F658((void *)(v2 + 16), &buf);
    if (v44 < 0) {
      operator delete((void *)buf.n128_u64[0]);
    }
    *(_DWORD *)(v2 + ++*(void *)(result + 64) = 2;
    int v16 = 100;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(result + 24) = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_100F8F5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1004C0A34((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100F8F658(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100CF0524(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  id v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *id v8 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  ++a1[5];
  return result;
}

void sub_100F8F710(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  uint64_t v4 = *(NSObject **)(a1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100F8F798;
  v5[3] = &unk_1022A56E0;
  void v5[4] = a2;
  void v5[5] = a1;
  dispatch_sync(v4, v5);
}

void sub_100F8F798(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  unint64_t v7 = 0;
  id v8 = 0;
  uint64_t v9 = 0;
  (*(void (**)(void, uint64_t **))(*(void *)*v2 + 40))(*v2, &v7);
  uint64_t v3 = v8;
  if (v7 != v8)
  {
    uint64_t v4 = v7 + 6;
    do
    {
      uint64_t v5 = v4;
      if (*((char *)v4 + 23) < 0) {
        uint64_t v5 = (uint64_t *)*v4;
      }
      [*(id *)(a1 + 32) addObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5)];
      uint64_t v6 = v4 + 9;
      v4 += 15;
    }
    while (v6 != v3);
  }
  uint64_t v10 = (void **)&v7;
  sub_100F8FABC(&v10);
}

void sub_100F8F864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100F8FABC(&a12);
  _Unwind_Resume(a1);
}

void sub_100F8F884(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 8));
  uint64_t v4 = *(NSObject **)(a1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100F8F90C;
  v5[3] = &unk_1022A56E0;
  void v5[4] = a2;
  void v5[5] = a1;
  dispatch_async(v4, v5);
}

void sub_100F8F90C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  sub_100134750(&__p, (char *)[*(id *)(a1 + 32) UTF8String]);
  sub_1004C04E4(v2);
  if (v16 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = *(void ***)(v1 + 24);
  uint64_t v4 = *(void ***)(v1 + 32);
  if (v4 == v3)
  {
    uint64_t v5 = (void *)(v1 + 56);
    uint64_t v4 = *(void ***)(v1 + 24);
  }
  else
  {
    uint64_t v5 = (void *)(v1 + 56);
    unint64_t v6 = *(void *)(v1 + 48);
    unint64_t v7 = &v3[v6 / 0xAA];
    unint64_t v8 = (unint64_t)*v7;
    unint64_t v9 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
    unint64_t v10 = (unint64_t)v3[(*(void *)(v1 + 56) + v6) / 0xAA] + 24 * ((*(void *)(v1 + 56) + v6) % 0xAA);
    if (v9 != v10)
    {
      do
      {
        if (*(char *)(v9 + 23) < 0)
        {
          operator delete(*(void **)v9);
          unint64_t v8 = (unint64_t)*v7;
        }
        v9 += 24;
        if (v9 - v8 == 4080)
        {
          unint64_t v11 = (unint64_t)v7[1];
          ++v7;
          unint64_t v8 = v11;
          unint64_t v9 = v11;
        }
      }
      while (v9 != v10);
      uint64_t v3 = *(void ***)(v1 + 24);
      uint64_t v4 = *(void ***)(v1 + 32);
    }
  }
  *uint64_t v5 = 0;
  unint64_t v12 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v13 = *(void *)(v1 + 32);
      uint64_t v3 = (void **)(*(void *)(v1 + 24) + 8);
      *(void *)(v1 + ++*(void *)(result + 24) = v3;
      unint64_t v12 = v13 - (void)v3;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 85;
    goto LABEL_18;
  }
  if (v12 >> 3 == 2)
  {
    uint64_t v14 = 170;
LABEL_18:
    *(void *)(v1 + ++*(void *)(result + 48) = v14;
  }
  *(_DWORD *)(v1 + ++*(void *)(result + 64) = 0;
}

void sub_100F8FA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F8FA8C(id a1)
{
  qword_102419288 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_100F8FABC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        sub_1004C53A8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

NSDictionary *sub_100F8FB54()
{
  v1[0] = +[NSString stringWithUTF8String:"VO2MaxPowerBudgetEstimatorQueryLookbackInterval"];
  v2[0] = &off_102397E48;
  v1[1] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetRefreshInterval"];
  v2[1] = &off_102397E60;
  v1[2] = +[NSString stringWithUTF8String:"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"];
  v2[2] = &off_102397E78;
  v1[3] = +[NSString stringWithUTF8String:"SensitiveEscalationBudgetAllowanceSeconds"];
  v2[3] = &off_102397E90;
  v1[4] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetAllowanceSeconds"];
  v2[4] = &off_102397EA8;
  v1[5] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"];
  v2[5] = &off_102397EC0;
  v1[6] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetRefreshInterval"];
  v2[6] = &off_102397ED8;
  __n128 result = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:7];
  qword_102482710 = (uint64_t)result;
  return result;
}

void sub_100F8FCA8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  *uint64_t v5 = off_1023075D8;
  void v5[6] = 0;
  sub_1006A564C();
}

void sub_100F8FD84(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + ++*(void *)(result + 48) = 0;
  if (v3) {
    sub_101A6A9C8(v3);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_100F8FDA8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102307658);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLIndoorOutdoorSubscription::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102307658);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLIndoorOutdoorSubscription::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F90820(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F8FF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F8FF88(void *a1)
{
  *a1 = off_1023075D8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = a1[6];
    a1[6] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_100F9003C(void *a1)
{
  sub_100F8FF88(a1);

  operator delete();
}

void *sub_100F90074@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_1023076A8;
  v5[1] = sub_100F9022C;
  void v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageIndoorOutdoorUpdate");
  sub_100BFAB68((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_102307758;
  v4[1] = sub_100F9049C;
  _DWORD v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageIndoorOutdoorLastKnownState");
  sub_100BFAB68((uint64_t)v9, (uint64_t)v4);
  sub_100F910D0(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BFB084(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BFB084(v4);
  return sub_100BFB084(v5);
}

void sub_100F901CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_100F90580(v2 + i);
  sub_100BFB084((uint64_t *)va);
  sub_100BFB084(va1);
  _Unwind_Resume(a1);
}

void sub_100F9022C(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_102307678);
  }
  uint64_t v5 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)__n128 buf = 138412802;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = a1;
    __int16 v15 = 1024;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, Subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_102307678);
    }
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIndoorOutdoorSubscription::handleRequestIndoorOutdoorUpdate(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_10009C834(a1);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v8 = *(void **)(v7 + 16);
  if (a2) {
    [v8 register:v9 forNotification:3 registrationInfo:0];
  }
  else {
    [v8 unregister:v9 forNotification:3];
  }
}

void sub_100F90468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100F9049C(uint64_t a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v5 = *(void **)(*(void *)(a1 + 48) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_100F905BC;
  void v7[3] = &unk_1023075F8;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  void v7[4] = *a2;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v5 lastKnownIndoorOutdoorStateWithReply:v7];
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_100F90560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100F90580(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100F905BC(uint64_t a1, double *a2)
{
  id v3 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:*a2];
  id v4 = [objc_alloc((Class)CMIndoorOutdoorState) initWithStartDate:v3 type:*((void *)a2 + 1) confidence:*((void *)a2 + 2)];
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_102307678);
  }
  uint64_t v5 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = *a2;
    uint64_t v7 = *((void *)a2 + 1);
    *(_DWORD *)__n128 buf = 134218498;
    double v21 = v6;
    __int16 v22 = 2048;
    uint64_t v23 = v7;
    __int16 v24 = 2112;
    id v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, most recent update at %f, type %ld, sending %@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_102307678);
    }
    double v9 = *a2;
    uint64_t v10 = *((void *)a2 + 1);
    int v14 = 134218498;
    double v15 = v9;
    __int16 v16 = 2048;
    uint64_t v17 = v10;
    __int16 v18 = 2112;
    id v19 = v4;
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIndoorOutdoorSubscription::handleMessageIndoorOutdoorLastKnownState(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v12 = CMIndoorOutdoorStateKey;
  id v13 = v4;
  +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];

  return CLConnectionMessage::sendReply();
}

void sub_100F90820(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 3)
  {
    uint64_t v5 = *(void *)(a4 + 8);
    uint64_t v6 = *(void *)(a4 + 16);
    id v7 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:*(double *)a4];
    id v8 = [objc_alloc((Class)CMIndoorOutdoorState) initWithStartDate:v7 type:v5 confidence:v6];
    sub_100103240();
    if (sub_10073E30C())
    {
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_102307678);
      }
      double v9 = qword_1024192A8;
      if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 24);
        *(_DWORD *)__n128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v22 = 2112;
        uint64_t v23 = v10;
        __int16 v24 = 2048;
        uint64_t v25 = a1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@, %@, %p", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192A0 != -1) {
          dispatch_once(&qword_1024192A0, &stru_102307678);
        }
        uint64_t v11 = *(void *)(a1 + 24);
        int v15 = 138412802;
        id v16 = v8;
        __int16 v17 = 2112;
        uint64_t v18 = v11;
        __int16 v19 = 2048;
        uint64_t v20 = a1;
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIndoorOutdoorSubscription::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v12);
        if (v12 != buf) {
          free(v12);
        }
      }
    }
    uint64_t v13 = CMIndoorOutdoorStateKey;
    id v14 = v8;
    *(void *)__n128 buf = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];

    sub_100F90AB0(a1);
  }
}

void sub_100F90AB0(uint64_t a1)
{
  sub_1000E9420(&off_1023077C8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100F90B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F90B34(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100F90B64(id a1)
{
  qword_1024192A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

__n128 sub_100F90B94(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023076A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F90BE0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023076A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F90C10(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_100F90C18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F90C58()
{
}

void sub_100F90C64(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100F90CC0(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_100F90CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F90CC0(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    id v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      id v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102307718);
    }
    uint64_t v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102307718);
      }
    }
    uint64_t v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)__n128 buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_100F90EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100F90F0C(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100F90F3C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102307758;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F90F88(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102307758;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100F90FB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100F90FC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F91000()
{
}

void sub_100F9100C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  id v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100F910AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F910D0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100F9114C(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F91138(_Unwind_Exception *a1)
{
  sub_100BFB108(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F9114C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  id v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100F913D0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(result + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100F914C0((uint64_t)v25, 0);
  return i;
}

void sub_100F913B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F914C0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100F913D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100F91448(v8 + 2, a3);
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100F91430(_Unwind_Exception *a1)
{
  sub_100F914C0(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100F91448(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BFA8C0((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F914A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F914C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BFB188((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100F91518()
{
  sub_100134750(qword_102482720, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482720, (void *)&_mh_execute_header);
}

void sub_100F91578(void *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v7 = a1[2];
  if (v7)
  {
    do
    {
      while (1)
      {
        double v9 = vabdd_f64(a3, *(double *)(v7 + 72));
        if (a4 < v9) {
          break;
        }
        uint64_t v7 = *(void *)v7;
        if (!v7) {
          goto LABEL_26;
        }
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023077D0);
      }
      unint64_t v10 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(void *)uint64_t v25 = *(void *)(v7 + 16);
        sub_100B39278(&__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (int)v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@WifiAps, remove, %{private}s, age, %{public}d", (uint8_t *)&buf, 0x12u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1023077D0);
        }
        sub_100B39278(&buf);
        p_std::string buf = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v25 = 136380931;
        *(void *)&unsigned __int8 v25[4] = p_buf;
        __int16 v26 = 1026;
        int v27 = (int)v9;
        float v16 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiService_Type::AccessPointVector CL::Wifi1::Types::WifiScanHistory::removeAgedAccessPoints(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::secondsf)", "%s\n", (const char *)v16);
        if (v16 != &__p) {
          free(v16);
        }
      }
      unint64_t v12 = a2[1];
      if (v12 >= a2[2])
      {
        uint64_t v13 = sub_1001F8D14(a2, v7 + 16);
      }
      else
      {
        sub_1001F8C88((uint64_t)a2, v7 + 16);
        uint64_t v13 = v12 + 88;
      }
      a2[1] = v13;
      uint64_t v14 = *(void *)v7;
      sub_100E4680C(a1, (uint64_t *)v7);
      uint64_t v7 = v14;
    }
    while (v14);
  }
LABEL_26:
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1023077D0);
  }
  float v17 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v18 = a1[3];
    uint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v18;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v19;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
    int v29 = (int)a4;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@WifiAps, history, %{public}lu, aged, %{public}lu, thresh, %{public}d", (uint8_t *)&__p, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023077D0);
    }
    std::string::size_type v20 = a1[3];
    uint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v20;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v21;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
    int v24 = (int)a4;
    __int16 v22 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiService_Type::AccessPointVector CL::Wifi1::Types::WifiScanHistory::removeAgedAccessPoints(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::secondsf)", "%s\n", (const char *)v22);
    if (v22 != &__p) {
      free(v22);
    }
  }
}

void sub_100F91A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100F91A50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1005880F4(a1, a2);
  *(_WORD *)(v3 + ++*(void *)(result + 96) = 0;
  if (*(int *)(v3 + 40) <= 0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023077D0);
    }
    long long v4 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Initializing with invalid channel, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023077D0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CL::Wifi1::Types::AssociatedAp::AssociatedAp(const CLWifiService_Type::AccessPoint)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (*(unsigned char *)(a1 + 88))
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
      *(unsigned char *)(a1 + ++*(void *)(result + 88) = 0;
    }
  }
  return a1;
}

void sub_100F91C38(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 88))
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F91C64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000E23EC((unsigned char *)a1, a2);
  *((_WORD *)v3 + ++*(void *)(result + 48) = 0;
  if (v3[88] && *(int *)(a1 + 40) <= 0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023077D0);
    }
    long long v4 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Initializing with invalid channel, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1023077D0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CL::Wifi1::Types::AssociatedAp::AssociatedAp(const std::optional<CLWifiService_Type::AccessPoint> &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (*(unsigned char *)(a1 + 88))
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
      *(unsigned char *)(a1 + ++*(void *)(result + 88) = 0;
    }
  }
  return a1;
}

void sub_100F91E54(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 88))
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F91E80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t sub_100F91E88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

uint64_t sub_100F91E90(uint64_t result, char a2)
{
  *(unsigned char *)(result + ++*(void *)(result + 96) = 1;
  *(unsigned char *)(result + 97) = a2;
  return result;
}

uint64_t sub_100F91EA0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 96)) {
    sub_101A98EEC();
  }
  return *(unsigned __int8 *)(a1 + 97);
}

void sub_100F91EC4(uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 11;
  while (dword_101D9A0A8[v6] < a3)
  {
    --v7;
    if (++v6 == 11) {
      goto LABEL_15;
    }
  }
  uint64_t v8 = -v7;
  if (-(int)v7 < 0xC)
  {
LABEL_15:
    uint8x8_t v11 = (uint64_t **)(a1 + 152);
    if (a1 + 160 == sub_10012FFE0(a1 + 152, (const void **)a2))
    {
      int v15 = 0;
      sub_100D0C2C0(buf, 0xCuLL, &v15);
      float v16 = a2;
      unint64_t v12 = sub_100F921D4((uint64_t **)(a1 + 152), (const void **)a2, (uint64_t)&unk_101D0B290, &v16);
      uint64_t v13 = (void *)v12[7];
      if (v13)
      {
        v12[8] = (uint64_t)v13;
        operator delete(v13);
        v12[7] = 0;
        v12[8] = 0;
        v12[9] = 0;
      }
      *(_OWORD *)(v12 + 7) = *(_OWORD *)buf;
      v12[9] = v20;
    }
    *(void *)std::string buf = a2;
    uint64_t v14 = sub_100F921D4(v11, (const void **)a2, (uint64_t)&unk_101D0B290, (long long **)buf);
    ++*(_DWORD *)(v14[7] + 4 * v8);
    return;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1023077D0);
  }
  int v9 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "WifiAps, fix ap count per scan type, invalid bucket index, %{public}d, # of fix APs, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1023077D0);
    }
    LODWORD(v++*(void *)(result + 16) = 67240448;
    HIDWORD(v++*(void *)(result + 16) = v8;
    __int16 v17 = 1026;
    int v18 = a3;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CL::Wifi1::Types::HeartbeatMetrics::recordBucketedFixApsCountPerScanRequestTypes(std::string, int)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_100F92180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F921A4(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t *sub_100F921D4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_100F92280((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100F92318((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_100F92280@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + ++*(void *)(result + 16) = 0;
  __n128 result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_1000DC48C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  v6[7] = 0;
  unsigned __int8 v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100F92300(_Unwind_Exception *a1)
{
  sub_100F92318(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100F92318(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1005103F8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100F92370()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100F92428(_Unwind_Exception *a1)
{
}

void sub_100F92440()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100F924E8(_Unwind_Exception *a1)
{
}

void sub_100F92500(double **a1@<X0>, double **a2@<X1>, uint64_t *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  double v9 = a6 + -2592000.0;
  unint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  double v12 = 0.0;
  if (*a1 == v11)
  {
    int v14 = 0;
    int v13 = 0;
    double v18 = 0.0;
    double v17 = 0.0;
    double v16 = 0.0;
  }
  else
  {
    int v13 = 0;
    int v14 = 0;
    double v15 = v9 + -0.0001;
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
    do
    {
      double v19 = v10[2];
      if (v19 > 0.0)
      {
        double v20 = *v10;
        if (*v10 < a6)
        {
          double v21 = fmax(v19, v18);
          if (v20 >= v15) {
            double v18 = v21;
          }
          double v22 = -0.0;
          if (v20 >= v15) {
            double v22 = v10[2];
          }
          double v17 = v17 + v22;
          if (v20 >= v15) {
            ++v14;
          }
          if (v20 >= a6 + -604800.0 + -0.0001)
          {
            ++v13;
            double v16 = v16 + v19;
          }
        }
      }
      v10 += 3;
    }
    while (v10 != v11);
  }
  unint64_t v23 = *a2;
  int v24 = a2[1];
  if (*a2 != v24)
  {
    double v25 = v9 + -0.0001;
    double v12 = 0.0;
    do
    {
      BOOL v26 = *v23 >= a6 || *v23 < v25;
      double v27 = fmax(v23[2], v12);
      if (!v26) {
        double v12 = v27;
      }
      v23 += 3;
    }
    while (v23 != v24);
  }
  *(void *)(a5 + ++*(void *)(result + 32) = 0xFFF0000000000000;
  uint64_t v28 = *a3;
  *(double *)a5 = a7;
  *(void *)(a5 + 8) = v28;
  uint64_t v29 = a3[4];
  *(void *)(a5 + ++*(void *)(result + 40) = v29;
  *(double *)(a5 + ++*(void *)(result + 16) = v12;
  *(double *)(a5 + ++*(void *)(result + 24) = v18;
  if (v13)
  {
    double v30 = v16 / (double)v13;
    *(double *)(a5 + ++*(void *)(result + 32) = v30;
  }
  else
  {
    double v30 = -INFINITY;
  }
  *a4 = v13;
  a4[1] = v14;
  *((double *)a4 + 1) = v16;
  *((double *)a4 + 2) = v17;
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102307810);
  }
  long long v31 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = *a4;
    int v33 = a4[1];
    uint64_t v34 = *((void *)a4 + 1);
    uint64_t v35 = *((void *)a4 + 2);
    *(_DWORD *)std::string buf = 134285825;
    double v38 = a7;
    __int16 v39 = 2049;
    uint64_t v40 = v28;
    __int16 v41 = 2049;
    uint64_t v42 = v29;
    __int16 v43 = 2049;
    double v44 = v18;
    __int16 v45 = 2049;
    double v46 = v12;
    __int16 v47 = 2049;
    double v48 = v30;
    __int16 v49 = 1025;
    int v50 = v32;
    __int16 v51 = 1025;
    int v52 = v33;
    __int16 v53 = 2049;
    uint64_t v54 = v34;
    __int16 v55 = 2049;
    uint64_t v56 = v35;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessSuppression::Features,walkingSteadiness,%{private}.2f,allBoutsBoutDurationSecCv,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,dailySteps30daysMax,%{private}.2f,dailyFlights30daysMax,%{private}.2f,dailySteps7daysMean,%{private}.2f,daysWithSteps7Days,%{private}d,daysWithSteps30Days,%{private}d,totalSteps7Days,%{private}.2f,totalSteps30Days,%{private}.2f,", buf, 0x5Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102307810);
    }
    long long v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Features CLMobility::SteadinessSuppression::extractFeatures(CFAbsoluteTime, double, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const SteadinessModelContinuousWalking_Generated::Features &, DailyHealthKitStats &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
}

void sub_100F928AC(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

uint64_t sub_100F92BD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_66;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_68;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_68:
        uint64_t v39 = 32;
        goto LABEL_89;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v14 = 0;
        while (2)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v20 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v14 |= (unint64_t)(v20 & 0x7F) << v17;
            if (v20 < 0)
            {
              v17 += 7;
              BOOL v9 = v18++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_72:
        uint64_t v39 = 36;
        goto LABEL_89;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v14 = 0;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v14 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_76:
        uint64_t v39 = 12;
        goto LABEL_89;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v14 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_80:
        uint64_t v39 = 16;
        goto LABEL_89;
      case 5u:
        uint64_t v29 = objc_alloc_init(ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 24) = v29;
        if PBReaderPlaceMark() && (sub_100F95DD8((uint64_t)v29, a2))
        {
          PBReaderRecallMark();
LABEL_90:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 0xBu:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v14 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_84:
        uint64_t v39 = 8;
        goto LABEL_89;
      case 0xCu:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              BOOL v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_88:
        uint64_t v39 = 40;
LABEL_89:
        *(_DWORD *)(a1 + v39) = v14;
        goto LABEL_90;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_90;
    }
  }
}

uint64_t sub_100F93800(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  *(_WORD *)(a1 + 8) = *((_WORD *)a3 + 4);
  *(void *)a1 = v6;
  if (*((char *)a3 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), (void *)a3[2], a3[3]);
  }
  else
  {
    long long v7 = *((_OWORD *)a3 + 1);
    *(void *)(a1 + ++*(void *)(result + 32) = a3[4];
    *(_OWORD *)(a1 + ++*(void *)(result + 16) = v7;
  }
  *(void *)(a1 + ++*(void *)(result + 40) = a3[5];
  char v8 = (_OWORD *)(a1 + 48);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 48), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + ++*(void *)(result + 64) = *((void *)a2 + 2);
    *char v8 = v9;
  }
  sub_1005F54CC(a1 + 72, a3);
  if (sub_10014C3C0(a1 + 72))
  {
    int v10 = (char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      int v10 = *(char **)v8;
    }
    sub_1005F7B0C(a1 + 72, v10, (const char **)&off_102307830, 0, 0);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023078F0);
    }
    uint64_t v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning CLCloudKitMetadataDatabase is not valid, not initializing. Please re-initialize if needed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023078F0);
      }
      unsigned int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLCloudKitMetadataDatabase::CLCloudKitMetadataDatabase(const std::string &, const CLSqliteDatabase::SqliteProperties &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return a1;
}

void sub_100F93A64(_Unwind_Exception *a1)
{
  sub_1005F5850(v4);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F93AAC(uint64_t a1, char *a2)
{
  sub_100DB2290(a2, (uint64_t)v4);
  sub_100F93800(a1, &xmmword_102482750, v4);
  if (v5 < 0) {
    operator delete((void *)v4[2]);
  }
  return a1;
}

void sub_100F93B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100F93B24(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    sub_10010F274((uint64_t)&v24);
    uint64_t v3 = sub_100132EFC(&v25, (uint64_t)"INSERT OR REPLACE INTO ", 23);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v5 = a1 + 48;
    uint64_t v4 = v6;
    int v7 = *(char *)(v5 + 23);
    if (v7 >= 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v9 = *(void *)(v5 + 8);
    }
    int v10 = sub_100132EFC(v3, v8, v9);
    uint64_t v11 = sub_100132EFC(v10, (uint64_t)" (", 2);
    char v12 = sub_100132EFC(v11, (uint64_t)"Key", 3);
    unsigned int v13 = sub_100132EFC(v12, (uint64_t)",", 1);
    uint64_t v14 = sub_100132EFC(v13, (uint64_t)"SyncEngineMetadata", 18);
    unint64_t v15 = sub_100132EFC(v14, (uint64_t)",", 1);
    char v16 = sub_100132EFC(v15, (uint64_t)"LastUpdateTimestamp", 19);
    char v17 = sub_100132EFC(v16, (uint64_t)") VALUES ", 9);
    sub_100132EFC(v17, (uint64_t)"(?,?,?);", 8);
    std::stringbuf::str();
    if (v23 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(v2, (uint64_t)p_p);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023078F0);
  }
  unint64_t v19 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call insertOrReplace() without a backing database in CLCloudKitMetadataDatabase", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023078F0);
    }
    LOWORD(v++*(void *)(result + 24) = 0;
    char v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCloudKitMetadataDatabase::updateMetadata(const CloudKitMetadata &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  return 0;
}

void sub_100F941E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100F94260(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v3 = sub_100132EFC(&v20, (uint64_t)"SELECT * FROM ", 14);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v5 = a1 + 48;
    uint64_t v4 = v6;
    int v7 = *(char *)(v5 + 23);
    if (v7 >= 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v9 = *(void *)(v5 + 8);
    }
    int v10 = sub_100132EFC(v3, v8, v9);
    uint64_t v11 = sub_100132EFC(v10, (uint64_t)" WHERE ", 7);
    char v12 = sub_100132EFC(v11, (uint64_t)"Key", 3);
    sub_100132EFC(v12, (uint64_t)" = ?;", 5);
    std::stringbuf::str();
    if (v18 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(v2, (uint64_t)p_p);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023078F0);
  }
  uint64_t v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getMetadata() without a backing database in CLCloudKitMetadataDatabase", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023078F0);
    }
    LOWORD(__p) = 0;
    char v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CloudKitMetadata CLCloudKitMetadataDatabase::getMetadata() const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return 0x7FEFFFFFFFFFFFFFLL;
}

void sub_100F946C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100F94740(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  if (sub_10014C3C0(a1 + 72))
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v3 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    int v4 = *(char *)(a1 + 71);
    if (v4 >= 0) {
      uint64_t v5 = a1 + 48;
    }
    else {
      uint64_t v5 = *(void *)(a1 + 48);
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      uint64_t v6 = *(void *)(a1 + 56);
    }
    int v7 = sub_100132EFC(v3, v5, v6);
    uint64_t v8 = sub_100132EFC(v7, (uint64_t)" WHERE ", 7);
    uint64_t v9 = sub_100132EFC(v8, (uint64_t)"Key", 3);
    sub_100132EFC(v9, (uint64_t)" = ?;", 5);
    std::stringbuf::str();
    if (v15 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(v2, (uint64_t)p_p);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023078F0);
  }
  uint64_t v11 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteMetadata() without a backing database in CLCloudKitMetadataDatabase", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023078F0);
    }
    LOWORD(__p) = 0;
    unsigned int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCloudKitMetadataDatabase::deleteMetadata()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return 0;
}

void sub_100F94B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100F94B98(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100F94BC8()
{
  sub_100134750(&qword_102482738, "CloudKitMetadata");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482738, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_102482750, "CloudKitMetadataTable");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102482750, (void *)&_mh_execute_header);
}

void sub_100F94D40()
{
}

id sub_100F94D64(uint64_t a1, void *a2)
{
  return _[a2 onSubmersionState:a1];
}

void sub_100F95244(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void sub_100F952C0(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_100F952F0(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_102307940;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  void v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100F95478;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100F9548C;
  v12[3] = &unk_1022B6C10;
  void v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100F95450(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100F95478(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + ++*(void *)(result + 24) = 1;
  return result;
}

BOOL sub_100F9548C(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100F954A8(uint64_t a1)
{
  sub_100F9579C(a1);

  operator delete();
}

id sub_100F954E0(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x10) {
    size_t v8 = 16;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102307980);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v29 = 0x8000000101D9A135 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v30 = 2048;
      uint64_t v31 = 16;
      __int16 v32 = 2048;
      unint64_t v33 = a4;
      __int16 v34 = 1024;
      int v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102307980);
      }
      int v20 = 136315906;
      unint64_t v21 = 0x8000000101D9A135 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v22 = 2048;
      uint64_t v23 = 16;
      __int16 v24 = 2048;
      unint64_t v25 = a4;
      __int16 v26 = 1024;
      int v27 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::CMSubmersionState>::dispatchData(int, const void *, size_t) [T = CLWaterSubmersion_Types::CMSubmersionState]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  unsigned int v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100F95818;
  void v16[3] = &unk_1022F1228;
  void v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v10;
  return [v13 async:v16];
}

uint64_t sub_100F9579C(uint64_t a1)
{
  *(void *)a1 = off_102307940;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_100F95818(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[8];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_100F95874(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100F95DD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    uint64_t v4 = &OBJC_IVAR___CLHidManager__delegate;
    uint64_t v5 = &OBJC_IVAR___CLHidManager__delegate;
    uint64_t v6 = &OBJC_IVAR___CLHidManager__delegate;
    int v7 = &OBJC_IVAR___CLHidManager__delegate;
    size_t v8 = &OBJC_IVAR___CLHidManager__delegate;
    id v9 = &OBJC_IVAR___CLHidManager__delegate;
    uint64_t v10 = &OBJC_IVAR___CLHidManager__delegate;
    uint64_t v11 = &OBJC_IVAR___CLHidManager__delegate;
    uint64_t v12 = &OBJC_IVAR___CLHidManager__delegate;
    unsigned int v13 = &OBJC_IVAR___CLHidManager__delegate;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v14 += 7;
        BOOL v19 = v15++ >= 9;
        if (v19)
        {
          unint64_t v16 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v16 = 0;
      }
LABEL_14:
      if (v20 || (v16 & 7) == 4) {
        break;
      }
      switch((v16 >> 3))
      {
        case 1u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if ((v26 & 0x80) == 0) {
              goto LABEL_92;
            }
            v22 += 7;
            BOOL v19 = v23++ >= 9;
            if (v19)
            {
              uint64_t v24 = 0;
              goto LABEL_94;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_92:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v24 = 0;
          }
LABEL_94:
          uint64_t v70 = v4[730];
          goto LABEL_99;
        case 2u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
              v24 |= (unint64_t)(v30 & 0x7F) << v27;
              if (v30 < 0)
              {
                v27 += 7;
                BOOL v19 = v28++ >= 9;
                if (v19)
                {
                  uint64_t v24 = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v24 = 0;
          }
LABEL_98:
          uint64_t v70 = v5[731];
LABEL_99:
          *(void *)(a1 + v70) = v24;
          continue;
        case 3u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          while (2)
          {
            unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
              v33 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                BOOL v19 = v32++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_103:
          uint64_t v71 = v6[732];
          goto LABEL_132;
        case 4u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + v7[722]) |= 8u;
          while (2)
          {
            unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v38 == -1 || v38 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
              v33 |= (unint64_t)(v39 & 0x7F) << v36;
              if (v39 < 0)
              {
                v36 += 7;
                BOOL v19 = v37++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_107:
          uint64_t v71 = v8[723];
          goto LABEL_132;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + v7[722]) |= 1u;
          while (2)
          {
            unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v42 == -1 || v42 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 1;
              v33 |= (unint64_t)(v43 & 0x7F) << v40;
              if (v43 < 0)
              {
                v40 += 7;
                BOOL v19 = v41++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_111:
          uint64_t v71 = v9[724];
          goto LABEL_132;
        case 6u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + v7[722]) |= 0x40u;
          while (2)
          {
            unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v46 == -1 || v46 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 1;
              v33 |= (unint64_t)(v47 & 0x7F) << v44;
              if (v47 < 0)
              {
                v44 += 7;
                BOOL v19 = v45++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_115:
          uint64_t v71 = v10[725];
          goto LABEL_132;
        case 7u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + v7[722]) |= 2u;
          while (2)
          {
            unint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v50 == -1 || v50 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v51 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 1;
              v33 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                BOOL v19 = v49++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_119:
          uint64_t v71 = v11[726];
          goto LABEL_132;
        case 0xBu:
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + v7[722]) |= 0x20u;
          while (2)
          {
            unint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v60 == -1 || v60 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v61 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60 + 1;
              v33 |= (unint64_t)(v61 & 0x7F) << v58;
              if (v61 < 0)
              {
                v58 += 7;
                BOOL v19 = v59++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_123;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_123:
          uint64_t v71 = v12[727];
          goto LABEL_132;
        case 0xCu:
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + v7[722]) |= 0x10u;
          while (2)
          {
            unint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v64 == -1 || v64 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v65 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 1;
              v33 |= (unint64_t)(v65 & 0x7F) << v62;
              if (v65 < 0)
              {
                v62 += 7;
                BOOL v19 = v63++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_127;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_127:
          uint64_t v71 = v13[728];
          goto LABEL_132;
        case 0xDu:
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v33 = 0;
          *(unsigned char *)(a1 + v7[722]) |= 4u;
          break;
        default:
          int v52 = v4;
          __int16 v53 = v5;
          uint64_t v54 = v6;
          __int16 v55 = v7;
          uint64_t v56 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          size_t v8 = v56;
          id v9 = &OBJC_IVAR___CLHidManager__delegate;
          int v7 = v55;
          uint64_t v10 = &OBJC_IVAR___CLHidManager__delegate;
          uint64_t v6 = v54;
          uint64_t v11 = &OBJC_IVAR___CLHidManager__delegate;
          uint64_t v5 = v53;
          uint64_t v12 = &OBJC_IVAR___CLHidManager__delegate;
          uint64_t v4 = v52;
          unsigned int v13 = &OBJC_IVAR___CLHidManager__delegate;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        unint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v68 == -1 || v68 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v69 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 1;
        v33 |= (unint64_t)(v69 & 0x7F) << v66;
        if ((v69 & 0x80) == 0) {
          goto LABEL_129;
        }
        v66 += 7;
        BOOL v19 = v67++ >= 9;
        if (v19)
        {
          LODWORD(v33) = 0;
          goto LABEL_131;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_129:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v33) = 0;
      }
LABEL_131:
      uint64_t v71 = 36;
LABEL_132:
      *(_DWORD *)(a1 + v71) = v33;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_100F96F8C(void *a1, uint64_t a2)
{
  unint64_t v4 = 0;
  if (*(double *)(a2 + 16) >= 0.35) {
    unint64_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v5 = a1 + 2;
  v23.n128_u64[0] = *(void *)(a2 + 40);
  v23.n128_u64[1] = v4;
  sub_100F97124(a1 + 2, &v23);
  unint64_t v6 = a1[6];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  id v9 = (void *)(v7 + 8 * (v6 >> 8));
  if (v8 == v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a1 + 7;
  }
  else
  {
    double v10 = *(double *)(a2 + 40);
    uint64_t v11 = (double *)(*v9 + 16 * v6);
    uint64_t v12 = a1 + 7;
    uint64_t v13 = *(void *)(v7 + (((a1[7] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 56) + v6);
    if (v11 != (double *)v13)
    {
      while (vabdd_f64(v10, *v11) <= 720.0)
      {
        v11 += 2;
        if ((double *)((char *)v11 - *v9) == (double *)4096)
        {
          char v14 = (double *)v9[1];
          ++v9;
          uint64_t v11 = v14;
        }
        if (v11 == (double *)v13) {
          goto LABEL_19;
        }
      }
    }
    if (v11 == (double *)v13)
    {
LABEL_19:
      uint64_t v11 = (double *)(*(void *)(v7 + (((a1[7] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*((unsigned char *)a1 + 56) + v6));
    }
    else
    {
      unsigned int v15 = v11;
      unint64_t v16 = v9;
      while (1)
      {
        v15 += 2;
        if ((double *)((char *)v15 - *v16) == (double *)4096)
        {
          unint64_t v17 = (double *)v16[1];
          ++v16;
          unsigned int v15 = v17;
        }
        if (v15 == (double *)v13) {
          break;
        }
        if (vabdd_f64(v10, *v15) <= 720.0)
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v15;
          v11 += 2;
          if ((double *)((char *)v11 - *v9) == (double *)4096)
          {
            char v18 = (double *)v9[1];
            ++v9;
            uint64_t v11 = v18;
          }
        }
      }
      unint64_t v6 = a1[6];
      uint64_t v7 = a1[3];
      uint64_t v8 = a1[4];
    }
  }
  unint64_t v19 = v6 + *v12;
  int v20 = (char *)(v7 + 8 * (v19 >> 8));
  if (v8 == v7) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)v20 + 16 * v19;
  }
  return sub_100065154(v5, (char *)v9, (uint64_t)v11, v20, v21);
}

__n128 sub_100F97124(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100F971BC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

double sub_100F971B0(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 8) = result;
  return result;
}

void sub_100F971BC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    id v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      unsigned int v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unsigned int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unsigned int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      id v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    id v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      unsigned int v37 = &v34[8 * v47];
      char v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100F97488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100F9894C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0;
        }
LABEL_13:
        int v11 = v6 & 7;
        if (!v10 && v11 != 4)
        {
          switch((v6 >> 3))
          {
            case 1u:
              uint64_t v13 = objc_alloc_init(ALSCellTower);
              [(id)a1 addCellTower:v13];

              if PBReaderPlaceMark() && (sub_100F92BD8((uint64_t)v13, a2)) {
                goto LABEL_113;
              }
              return 0;
            case 2u:
              BOOL v14 = objc_alloc_init(ALSWirelessAP);
              [(id)a1 addWirelessAP:v14];

              if (!PBReaderPlaceMark() || (sub_100FF36F8((uint64_t)v14, a2) & 1) == 0) {
                return 0;
              }
              goto LABEL_113;
            case 3u:
              char v15 = 0;
              unsigned int v16 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 4u;
              while (2)
              {
                unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
                  v17 |= (unint64_t)(v19 & 0x7F) << v15;
                  if (v19 < 0)
                  {
                    v15 += 7;
                    BOOL v9 = v16++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_117;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_117:
              uint64_t v61 = 96;
              goto LABEL_146;
            case 4u:
              char v20 = 0;
              unsigned int v21 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 0x40u;
              while (2)
              {
                unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
                  v17 |= (unint64_t)(v23 & 0x7F) << v20;
                  if (v23 < 0)
                  {
                    v20 += 7;
                    BOOL v9 = v21++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_121;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_121:
              uint64_t v61 = 112;
              goto LABEL_146;
            case 5u:
              String = (void *)PBReaderReadString();

              *(void *)(a1 + ++*(void *)(result + 32) = String;
              goto LABEL_147;
            case 0x15u:
              unint64_t v25 = objc_alloc_init(ALSCdmaCellTower);
              [(id)a1 addCdmaCellTower:v25];

              if (!PBReaderPlaceMark() || (sub_100F691BC((uint64_t)v25, a2) & 1) == 0) {
                return 0;
              }
              goto LABEL_113;
            case 0x16u:
              uint64_t v26 = objc_alloc_init(ALSCdmaEvdoTower);
              [(id)a1 addCdmaEvdoTower:v26];

              if (!PBReaderPlaceMark() || (sub_100F72FF0((uint64_t)v26, a2) & 1) == 0) {
                return 0;
              }
              goto LABEL_113;
            case 0x17u:
              char v27 = 0;
              unsigned int v28 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 1u;
              while (2)
              {
                unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
                  v17 |= (unint64_t)(v30 & 0x7F) << v27;
                  if (v30 < 0)
                  {
                    v27 += 7;
                    BOOL v9 = v28++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_125;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_125:
              uint64_t v61 = 88;
              goto LABEL_146;
            case 0x18u:
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 2u;
              while (2)
              {
                unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
                  v17 |= (unint64_t)(v34 & 0x7F) << v31;
                  if (v34 < 0)
                  {
                    v31 += 7;
                    BOOL v9 = v32++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_129;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_129:
              uint64_t v61 = 92;
              goto LABEL_146;
            case 0x19u:
              char v35 = objc_alloc_init(ALSLteCellTower);
              [(id)a1 addLteCellTower:v35];

              if (!PBReaderPlaceMark() || (sub_100F9DCE8((uint64_t)v35, a2) & 1) == 0) {
                return 0;
              }
              goto LABEL_113;
            case 0x1Au:
              char v36 = 0;
              unsigned int v37 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 8u;
              while (2)
              {
                unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v38 == -1 || v38 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
                  v17 |= (unint64_t)(v39 & 0x7F) << v36;
                  if (v39 < 0)
                  {
                    v36 += 7;
                    BOOL v9 = v37++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_133;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_133:
              uint64_t v61 = 100;
              goto LABEL_146;
            case 0x1Bu:
              uint64_t v40 = objc_alloc_init(ALSScdmaCellTower);
              [(id)a1 addScdmaCellTower:v40];

              if (!PBReaderPlaceMark() || (sub_1013D6054((uint64_t)v40, a2) & 1) == 0) {
                return 0;
              }
              goto LABEL_113;
            case 0x1Cu:
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 0x20u;
              while (2)
              {
                unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v43 == -1 || v43 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
                  v17 |= (unint64_t)(v44 & 0x7F) << v41;
                  if (v44 < 0)
                  {
                    v41 += 7;
                    BOOL v9 = v42++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_137;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_137:
              uint64_t v61 = 108;
              goto LABEL_146;
            case 0x1Du:
              uint64_t v45 = objc_alloc_init(ALSNr5GCellTower);
              [(id)a1 addNr5GCellTower:v45];

              if (!PBReaderPlaceMark() || (sub_101556CDC((uint64_t)v45, a2) & 1) == 0) {
                return 0;
              }
              goto LABEL_113;
            case 0x1Eu:
              char v46 = 0;
              unsigned int v47 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 0x10u;
              while (2)
              {
                unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v48 == -1 || v48 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v49 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 1;
                  v17 |= (unint64_t)(v49 & 0x7F) << v46;
                  if (v49 < 0)
                  {
                    v46 += 7;
                    BOOL v9 = v47++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_141;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_141:
              uint64_t v61 = 104;
              goto LABEL_146;
            case 0x1Fu:
              if (v11 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2
                                                                                    + OBJC_IVAR___PBDataReader__length)
                     && !*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
                {
                  char v51 = 0;
                  unsigned int v52 = 0;
                  uint64_t v53 = 0;
                  while (1)
                  {
                    unint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                    if (v54 == -1 || v54 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                      break;
                    }
                    char v55 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
                    *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54 + 1;
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if (v55 < 0)
                    {
                      v51 += 7;
                      BOOL v9 = v52++ >= 9;
                      if (!v9) {
                        continue;
                      }
                    }
                    goto LABEL_103;
                  }
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_103:
                  PBRepeatedInt32Add();
                }
LABEL_113:
                PBReaderRecallMark();
              }
              else
              {
                char v62 = 0;
                unsigned int v63 = 0;
                uint64_t v64 = 0;
                while (1)
                {
                  unint64_t v65 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  if (v65 == -1 || v65 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v66 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65 + 1;
                  v64 |= (unint64_t)(v66 & 0x7F) << v62;
                  if (v66 < 0)
                  {
                    v62 += 7;
                    BOOL v9 = v63++ >= 9;
                    if (!v9) {
                      continue;
                    }
                  }
                  goto LABEL_157;
                }
                *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_157:
                PBRepeatedInt32Add();
              }
LABEL_147:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
            case 0x20u:
              char v56 = 0;
              unsigned int v57 = 0;
              uint64_t v17 = 0;
              *(unsigned char *)(a1 + 144) |= 0x80u;
              while (2)
              {
                unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v58 == -1 || v58 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }
                else
                {
                  char v59 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 1;
                  v17 |= (unint64_t)(v59 & 0x7F) << v56;
                  if (v59 < 0)
                  {
                    v56 += 7;
                    BOOL v9 = v57++ >= 9;
                    if (v9)
                    {
                      LODWORD(v17) = 0;
                      goto LABEL_145;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v17) = 0;
              }
LABEL_145:
              uint64_t v61 = 128;
LABEL_146:
              *(_DWORD *)(a1 + v61) = v17;
              goto LABEL_147;
            case 0x21u:
              unint64_t v60 = objc_alloc_init(ALSMeta);

              *(void *)(a1 + 72) = v60;
              if (PBReaderPlaceMark() && sub_101245554((uint64_t)v60, a2)) {
                goto LABEL_113;
              }
              return 0;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_147;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100F9BCBC(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    switch((v6 >> 3))
    {
      case 0x15u:
        uint64_t v13 = objc_alloc_init(ALSCdmaCellTower);
        [a1 addCdmaCellTower:v13];

        if PBReaderPlaceMark() && (sub_100F691BC((uint64_t)v13, a2)) {
          goto LABEL_37;
        }
        return 0;
      case 0x16u:
        char v15 = objc_alloc_init(ALSLteCellTower);
        [a1 addLteCellTower:v15];

        if (!PBReaderPlaceMark() || (sub_100F9DCE8((uint64_t)v15, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
      case 0x17u:
        unsigned int v16 = objc_alloc_init(ALSScdmaCellTower);
        [a1 addScdmaCellTower:v16];

        if (!PBReaderPlaceMark() || (sub_1013D6054((uint64_t)v16, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
      case 0x18u:
        uint64_t v17 = objc_alloc_init(ALSNr5GCellTower);
        [a1 addNr5GCellTower:v17];

        if (!PBReaderPlaceMark() || (sub_101556CDC((uint64_t)v17, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_37;
      default:
        if (v12 != 2)
        {
          if (v12 == 1)
          {
            BOOL v14 = objc_alloc_init(ALSCellTower);
            [a1 addCellTower:v14];

            if (!PBReaderPlaceMark() || (sub_100F92BD8((uint64_t)v14, a2) & 1) == 0) {
              return 0;
            }
            goto LABEL_37;
          }
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
LABEL_38:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        unint64_t v18 = objc_alloc_init(ALSWirelessAP);
        [a1 addWirelessAP:v18];

        if PBReaderPlaceMark() && (sub_100FF36F8((uint64_t)v18, a2))
        {
LABEL_37:
          PBReaderRecallMark();
          goto LABEL_38;
        }
        return 0;
    }
  }
}

uint64_t sub_100F9D0DC(uint64_t a1)
{
  *(void *)a1 = off_1023079B0;
  [*(id *)(a1 + 48) invalidate];

  *(void *)(a1 + ++*(void *)(result + 48) = 0;
  *(void *)(a1 + ++*(void *)(result + 56) = 0;

  return sub_100029A7C(a1);
}

void sub_100F9D154(uint64_t a1)
{
  sub_100F9D0DC(a1);

  operator delete();
}

void *sub_100F9D18C@<X0>(uint64_t a1@<X8>)
{
  v3[0] = off_102307A30;
  v3[1] = sub_10001FC58;
  _DWORD v3[2] = 0;
  v3[3] = v3;
  sub_100134750(__p, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
  sub_100BFB478((uint64_t)v6, (uint64_t)v3);
  sub_100F9D3F4(a1, (unsigned __int8 *)__p, 1);
  sub_100BFB4F8(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return sub_100BFB4F8(v3);
}

void sub_100F9D26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_100F9D290(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100F9D2CC(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

__n128 sub_100F9D2FC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = off_102307A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100F9D348(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102307A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100F9D378(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100F9D3B8()
{
}

void sub_100F9D3C4(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_100F9D3F4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100F9D470(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100F9D45C(_Unwind_Exception *a1)
{
  sub_100BFB57C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100F9D470(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100F9D6F4(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + ++*(void *)(result + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100F9D7E4((uint64_t)v25, 0);
  return i;
}

void sub_100F9D6DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100F9D7E4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100F9D6F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100F9D76C(v8 + 2, a3);
  *(unsigned char *)(a4 + ++*(void *)(result + 16) = 1;
  return result;
}

void sub_100F9D754(_Unwind_Exception *a1)
{
  sub_100F9D7E4(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100F9D76C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BFB1D8((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100F9D7C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F9D7E4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BFB5FC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100F9DCE8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_66;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_68;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_68:
        uint64_t v39 = 24;
        goto LABEL_89;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_72:
        uint64_t v39 = 28;
        goto LABEL_89;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_76:
        uint64_t v39 = 8;
        goto LABEL_89;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 0x10u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_80:
        uint64_t v39 = 36;
        goto LABEL_89;
      case 5u:
        char v30 = objc_alloc_init(ALSLocation);

        *(void *)(a1 + ++*(void *)(result + 16) = v30;
        if PBReaderPlaceMark() && (sub_100F95DD8((uint64_t)v30, a2))
        {
          PBReaderRecallMark();
LABEL_90:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 6u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 0x20u;
        while (2)
        {
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v14 |= (unint64_t)(v34 & 0x7F) << v31;
            if (v34 < 0)
            {
              v31 += 7;
              BOOL v9 = v32++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_84:
        uint64_t v39 = 40;
        goto LABEL_89;
      case 7u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 8u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v14 |= (unint64_t)(v38 & 0x7F) << v35;
            if (v38 < 0)
            {
              v35 += 7;
              BOOL v9 = v36++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_88:
        uint64_t v39 = 32;
LABEL_89:
        *(_DWORD *)(a1 + v39) = v14;
        goto LABEL_90;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_90;
    }
  }
}

void sub_100F9EAF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 852;
  *(void *)(a1 + ++*(void *)(result + 16) = 0;
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = 0;
  *(_DWORD *)(a1 + ++*(void *)(result + 32) = 0xFFFF;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v11 = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_OWORD *)(a1 + 84) = _Q0;
  *(_OWORD *)(a1 + 100) = _Q0;
  *(_DWORD *)(a1 + 1++*(void *)(result + 16) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 1++*(void *)(result + 48) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1++*(void *)(result + 56) = 0x7FFFFFFF;
  *(void *)(a1 + ++*(void *)(result + 160) = 0;
  *(void *)(a1 + ++*(void *)(result + 168) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + ++*(void *)(result + 176) = 0;
  sub_1000DBC34(a1 + 192);
  *(_DWORD *)(a1 + 8++*(void *)(result + 32) = 0xFFFF;
  *(void *)(a1 + 844) = 0;
  *(void *)(a1 + 836) = 0;
  *(_OWORD *)uint64_t v3 = xmmword_101D1C320;
  *(_OWORD *)(v3 + ++*(void *)(result + 16) = v11;
  *(_OWORD *)(v3 + ++*(void *)(result + 32) = v11;
  *(_OWORD *)(v3 + ++*(void *)(result + 48) = v11;
  *(_DWORD *)(a1 + 9++*(void *)(result + 16) = 0;
  *(void *)(a1 + 920) = 0xBFF0000000000000;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 0;
  *(void *)(v3 + ++*(void *)(result + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 9++*(void *)(result + 56) = 0x7FFFFFFF;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 968) = 0;
  *(unsigned char *)(a1 + 984) = 0;
  *(void *)(a1 + 992) = 0;
  sub_101171D90(a1 + 1000);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  BOOL v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#GnssRefLocationCache,initializing CLGnssRefLocationCache", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssRefLocationCache::CLGnssRefLocationCache(id<CLIntersiloUniverse>)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_100681630();
}

void sub_100F9F04C(_Unwind_Exception *exception_object)
{
  char v4 = *(std::__shared_weak_count **)(v1 + 720);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = *(void *)(v1 + 16);
  *(void *)(v1 + ++*(void *)(result + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v2;
  *unint64_t v2 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_100F9F0E0(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102307AF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefLocationCache::onStreamedLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102307AF8);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      unsigned int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefLocationCache::onStreamedLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100F9F544((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100F9F29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100F9F2C0(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#GnssRefLocationCache,CLGnssRefLocationCache destructor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssRefLocationCache::~CLGnssRefLocationCache()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:5];
    [*(id *)(a1[1] + 16) unregister:*(void *)(a1[1] + 8) forNotification:33];
  }
  uint64_t v4 = a1[2];
  if (v4) {
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:5];
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[90];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void sub_100F9F4FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100F9F544(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(_DWORD *)(a4 + 96);
    *(void *)char v29 = 68289282;
    *(_WORD *)&v29[8] = 2082;
    *(void *)&unsigned char v29[10] = "";
    *(_WORD *)&v29[18] = 1026;
    *(_DWORD *)&v29[20] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Streamed location notification received\", \"type\":%{public}d}", v29, 0x18u);
  }
  if (*a3 == 5)
  {
    *(_DWORD *)char v29 = 0xFFFF;
    *(_OWORD *)&v29[4] = 0uLL;
    *(_OWORD *)&v29[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v29[36] = _Q0;
    *(_OWORD *)&v29[52] = _Q0;
    *(_OWORD *)&v29[68] = _Q0;
    *(_DWORD *)&v29[84] = 0;
    long long v30 = 0uLL;
    *(void *)&v29[88] = 0xBFF0000000000000;
    LODWORD(v31) = 0;
    *(void *)((char *)&v31 + 4) = 0xBFF0000000000000;
    HIDWORD(v31) = 0x7FFFFFFF;
    memset(v32, 0, 25);
    sub_1000DBC34(v33);
    long long v14 = *(_OWORD *)(a4 + 112);
    long long v30 = *(_OWORD *)(a4 + 96);
    long long v31 = v14;
    *(_OWORD *)unsigned int v32 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v32[12] = *(_OWORD *)(a4 + 140);
    long long v15 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v29[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&unsigned char v29[48] = v15;
    long long v16 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&v29[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v29[80] = v16;
    long long v17 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)char v29 = *(_OWORD *)a4;
    *(_OWORD *)&v29[16] = v17;
    memcpy(v18, (const void *)(a4 + 160), 0x201uLL);
    uint64_t v19 = *(void *)(a4 + 680);
    unint64_t v20 = *(std::__shared_weak_count **)(a4 + 688);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v33[65] = v19;
    char v21 = v34;
    char v34 = v20;
    if (v21) {
      sub_1000DB0A0(v21);
    }
    long long v22 = *(_OWORD *)(a4 + 776);
    long long v39 = *(_OWORD *)(a4 + 760);
    v40[0] = v22;
    *(void *)((char *)v40 + 13) = *(void *)(a4 + 789);
    long long v23 = *(_OWORD *)(a4 + 712);
    long long v35 = *(_OWORD *)(a4 + 696);
    long long v36 = v23;
    long long v24 = *(_OWORD *)(a4 + 744);
    long long v37 = *(_OWORD *)(a4 + 728);
    long long v38 = v24;
    sub_100120BA0(a1, (uint64_t)v29);
    if (v34) {
      sub_1000DB0A0(v34);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    char v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v26 = *a3;
      *(_DWORD *)char v29 = 68289282;
      *(_DWORD *)&v29[4] = 0;
      *(_WORD *)&v29[8] = 2082;
      *(void *)&unsigned char v29[10] = "";
      *(_WORD *)&v29[18] = 1026;
      *(_DWORD *)&v29[20] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssRefLocationCache, Unhandled notification\", \"notification\":%{public}d}", v29, 0x18u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102307AD8);
      }
    }
    unsigned int v27 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v28 = *a3;
      *(_DWORD *)char v29 = 68289282;
      *(_DWORD *)&v29[4] = 0;
      *(_WORD *)&v29[8] = 2082;
      *(void *)&unsigned char v29[10] = "";
      *(_WORD *)&v29[18] = 1026;
      *(_DWORD *)&v29[20] = v28;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssRefLocationCache, Unhandled notification", "{\"msg%{public}.0s\":\"#GnssRefLocationCache, Unhandled notification\", \"notification\":%{public}d}", v29, 0x18u);
    }
  }
}

void sub_100F9F8A0(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

void sub_100F9F8B8(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 96);
  BOOL v3 = v2 == 11 || v2 == 4;
  if (v3 && *(double *)(a2 + 20) > 0.0)
  {
    if (*(_DWORD *)(a2 + 84) > 0x45u)
    {
      int v8 = (double *)(a1 + 852);
      double Current = CFAbsoluteTimeGetCurrent();
      if (*v8 > 0.0 && (double v10 = v8[7], sub_1000E6DB4(a1 + 832)) && Current - v10 <= 1800.0)
      {
        sub_1000F1268((double *)(a1 + 1000), a2, a1 + 832);
        double v12 = v11;
        if (v11 < 0.0 || v11 > *v8)
        {
          *(_DWORD *)(a2 + 84) = 69;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102307AD8);
          }
          int v13 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            double v14 = *v8;
            int v15 = *(_DWORD *)(a2 + 84);
            *(_DWORD *)std::string buf = 68289794;
            *(_DWORD *)unint64_t v20 = 0;
            *(_WORD *)&void v20[4] = 2082;
            *(void *)&v20[6] = "";
            __int16 v21 = 2050;
            double v22 = v12;
            __int16 v23 = 2050;
            double v24 = v14;
            __int16 v25 = 1026;
            int v26 = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,crossCheckWiFiLocationWithCell,fail\", \"distFromWifiToCell\":\"%{public}f\", \"crossCheckThreshold\":\"%{public}f\", \"confidence\":%{public}d}", buf, 0x2Cu);
          }
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        long long v16 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = *((void *)v8 + 7);
          *(_DWORD *)std::string buf = 134349056;
          *(void *)unint64_t v20 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,no valid recent cell location available,lastCellTimeStamp,%{public}.1lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_38;
          }
          goto LABEL_40;
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102307AD8);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,already low confidence", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_38;
        }
        goto LABEL_40;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,crossCheckWiFiLocationWithCell,not valid wifi location", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_38:
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefLocationCache::updateWiFiConfidenceWithCellCrossCheck(GNSS::DaemonLocation &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return;
      }
LABEL_40:
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
      goto LABEL_38;
    }
  }
}

void sub_100F9FD6C(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + ++*(void *)(result + 24) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  BOOL v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 24);
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#GnssRefLocationCache,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102307AD8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefLocationCache::feedAirborneActivity(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_100F9FF24(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 68);
  if (v2 > 0.0 && *(double *)(a2 + 36) <= 0.0)
  {
    double v4 = *(double *)(a2 + 76) - *(double *)(a1 + 108);
    if (v4 >= 0.0)
    {
      *(void *)(a2 + 28) = *(void *)(a1 + 60);
      *(double *)(a2 + 36) = sqrt(v4 * v4 + v2 * v2);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102307AD8);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 36);
        *(_DWORD *)std::string buf = 134349568;
        double v9 = v2;
        __int16 v10 = 2050;
        uint64_t v11 = v6;
        __int16 v12 = 2050;
        double v13 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,populateAltitudeFromCache,Vunc,%{public}.1lf,PropVUnc,%{public}.1lf,PropDur,%{public}.1lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102307AD8);
        }
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefLocationCache::populateAltitudeFromCache(CLDaemonLocation &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
  }
}

uint64_t sub_100FA014C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1000AB340(a1 + 32);
    if (v8 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    int v4 = *(_DWORD *)(a1 + 160);
    double v5 = *(float *)(a1 + 508);
    *(_DWORD *)std::string buf = 68289795;
    int v10 = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2081;
    double v14 = p_p;
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 2050;
    double v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,getCachedReferenceLocation\", \"location,\":%{private, location:escape_only}s, \"integrity\":%{public}d, \"undulation\":\"%{public}f\"}", buf, 0x2Cu);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  return a1 + 32;
}

void sub_100FA0298(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v17 = *(_OWORD *)(a2 + 96);
  long long v18 = v4;
  v19[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)(a2 + 140);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&unsigned char v14[32] = *(_OWORD *)(a2 + 32);
  long long v15 = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)int v16 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v16[16] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)double v14 = *(_OWORD *)a2;
  *(_OWORD *)&v14[16] = v7;
  memcpy(v20, (const void *)(a2 + 160), sizeof(v20));
  uint64_t v21 = *(void *)(a2 + 680);
  char v8 = *(std::__shared_weak_count **)(a2 + 688);
  double v22 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = *(_OWORD *)(a2 + 776);
  long long v27 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)int v28 = v9;
  *(void *)&v28[13] = *(void *)(a2 + 789);
  long long v10 = *(_OWORD *)(a2 + 712);
  long long v23 = *(_OWORD *)(a2 + 696);
  long long v24 = v10;
  long long v11 = *(_OWORD *)(a2 + 744);
  long long v25 = *(_OWORD *)(a2 + 728);
  long long v26 = v11;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  __int16 v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a1 + 108);
    uint64_t buf = 68291075;
    __int16 v30 = 2082;
    long long v31 = "";
    __int16 v32 = 1026;
    int v33 = v17;
    __int16 v34 = 2050;
    uint64_t v35 = *(void *)&v16[12];
    __int16 v36 = 2050;
    uint64_t v37 = v13;
    __int16 v38 = 2049;
    uint64_t v39 = *(void *)&v14[4];
    __int16 v40 = 2049;
    uint64_t v41 = *(void *)&v14[12];
    __int16 v42 = 2050;
    uint64_t v43 = *(void *)&v14[20];
    __int16 v44 = 2049;
    uint64_t v45 = *(void *)&v14[28];
    __int16 v46 = 2050;
    uint64_t v47 = *(void *)&v14[36];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,feedRefLocationFromRefPosMaintenance\", \"type\":%{public}d, \"timestamp\":\"%{public}.1f\", \"cacheTimestamp\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{private}.2f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x5Eu);
  }
  if (*(double *)&v16[12] > *(double *)(a1 + 108))
  {
    sub_100120BA0(a1, (uint64_t)v14);
    char v8 = v22;
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_100FA04B4(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

double sub_100FA04CC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102307AD8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    __int16 v10 = 2082;
    long long v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGnssRefLocationCache, Clearing all cached location information\"}", (uint8_t *)v9, 0x12u);
  }
  sub_100F40DB8(a1 + 32);
  *(_DWORD *)(a1 + 8++*(void *)(result + 32) = 0xFFFF;
  *(void *)(a1 + 844) = 0;
  *(void *)(a1 + 836) = 0;
  double result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 852) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 868) = _Q1;
  *(_OWORD *)(a1 + 884) = _Q1;
  *(_OWORD *)(a1 + 900) = _Q1;
  *(_DWORD *)(a1 + 9++*(void *)(result + 16) = 0;
  *(void *)(a1 + 920) = 0xBFF0000000000000;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 0;
  *(void *)(a1 + 9++*(void *)(result + 48) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 9++*(void *)(result + 56) = 0x7FFFFFFF;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 968) = 0;
  *(unsigned char *)(a1 + 984) = 0;
  *(void *)(a1 + 992) = 0;
  return result;
}

void sub_100FA061C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100FA064C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100FA067C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D9A418;
      v0[3] = unk_101D9A428;
      v0[4] = xmmword_101D9A438;
      v0[0] = xmmword_101D9A3F8;
      v0[1] = unk_101D9A408;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100FA075C(_Unwind_Exception *a1)
{
}

id sub_100FA0774(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onDataProtectionNotification:*a2 data:*a3];
}

void sub_100FA0AE4(id a1, HKQuantityDatum *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102307BF8);
    }
    BOOL v3 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get pressure measurement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102307BF8);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSubmersionDataCollector startUnlocked]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100FA0C70(id a1, HKQuantityDatum *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102307BF8);
    }
    BOOL v3 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to get temperature measurement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102307BF8);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSubmersionDataCollector startUnlocked]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100FA19E4(id a1, BOOL a2, NSError *a3)
{
  if (a3)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102307BF8);
    }
    long long v4 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      long long v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to insertDatums for depth, error: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102307BF8);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSubmersionDataCollector collectWithSubmersionQuantities:shouldLog:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100FA1B94(id a1, BOOL a2, NSError *a3)
{
  if (a3)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102307BF8);
    }
    long long v4 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      long long v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "HKDataCollector, failed to insertDatums for temperature, error: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102307BF8);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSubmersionDataCollector collectWithSubmersionQuantities:shouldLog:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100FA2004(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void sub_100FA203C(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100FA32BC(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_100FA2484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100FA2670(id a1, BOOL a2, NSError *a3)
{
  if (a3)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102307BF8);
    }
    uint64_t v4 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      uint64_t v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to finish with completion, error, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102307BF8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSubmersionDataCollector finishUnlocked]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100FA2820(id a1, BOOL a2, NSError *a3)
{
  if (a3)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102307BF8);
    }
    uint64_t v4 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      uint64_t v7 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to finish with completion for temp, error, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102307BF8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSubmersionDataCollector finishUnlocked]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100FA30CC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_1000DB0A0(a3);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100FA31FC(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100FA322C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102307C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100FA324C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102307C28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

int64x2_t sub_100FA32A0(int64x2_t *a1)
{
  a1[4].i64[0] = 0x7FEFFFFFFFFFFFFFLL;
  a1[1].i8[8] = 0;
  int64x2_t result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[2] = result;
  a1[3] = result;
  return result;
}

void sub_100FA32BC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  char v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100FA3588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100FA35D4(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + ++*(void *)(result + 16) = 0u;
  *(_OWORD *)(a1 + ++*(void *)(result + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    unint64_t v8 = (void *)(*(void *)v7 + 16 * v4);
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 8));
    uint64_t v11 = (void *)(*(void *)v10 + 16 * v9);
  }
  sub_100FA3678((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100FA3664(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_100FA3678(void *a1, char *a2, void *a3, char *a4, void *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 4);
  }
  return sub_100FA36AC(a1, a2, a3, v5);
}

void *sub_100FA36AC(void *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100FA37FC(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 16 * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  int64x2_t result = sub_1000D9B0C((uint64_t)v22, a4);
  if (v14 != v16)
  {
    do
    {
      if (v13 == result) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = *v13 + 4096;
      }
      if (v14 == v17)
      {
        uint64_t v17 = v14;
      }
      else
      {
        uint64_t v18 = (void *)v14;
        do
        {
          *uint64_t v18 = *a3;
          uint64_t v19 = a3[1];
          v18[1] = v19;
          if (v19) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
          }
          a3 += 2;
          if ((void *)((char *)a3 - *a2) == (void *)4096)
          {
            int64_t v20 = (void *)a2[1];
            ++a2;
            a3 = v20;
          }
          v18 += 2;
        }
        while (v18 != (void *)v17);
      }
      a1[5] += (v17 - v14) >> 4;
      if (v13 == result) {
        break;
      }
      uint64_t v21 = v13[1];
      ++v13;
      uint64_t v14 = v21;
    }
    while (v21 != v16);
  }
  return result;
}

void sub_100FA37FC(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          char v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          long long v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 255;
          }
          else {
            uint64_t v64 = 256;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        char v66 = (char *)a1[2];
        do
        {
          unsigned int v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          unint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              char v81 = &v79[8 * (v78 >> 2)];
              unsigned int v82 = (uint64_t *)a1[1];
              char v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                char v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                __int16 v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)__int16 v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              __int16 v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                char v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              long long v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                char v66 = (char *)a1[1];
              }
              char v77 = &v66[-8 * (v74 >> 1)];
              char v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)char v66 = v69;
          char v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int16 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        char v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              char v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              char v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      unsigned int v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      char v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_100FA3D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100FA3D88(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t a9)
{
  unint64_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v27 = *a4;
  unint64_t v28 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v25 = *a5;
  int64_t v26 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (std::__shared_weak_count *)a6[1];
  uint64_t v23 = *a6;
  uint64_t v24 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v22[0] = xmmword_102482768;
  v22[1] = unk_102482778;
  void v22[2] = xmmword_102482788;
  sub_100D6AEB4(a1, a2, 1, &v27, &v25, &v23, a9, a8, v22);
  if (v24) {
    sub_1000DB0A0(v24);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
  if (v28) {
    sub_1000DB0A0(v28);
  }
  *(void *)a1 = off_102307C78;
  *(void *)(a1 + 352) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 360) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = *a7;
  uint64_t v16 = a7[1];
  *(void *)(a1 + 376) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 392) = 500;
  *(void *)(a1 + 4++*(void *)(result + 24) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 4++*(void *)(result + 16) = 0;
  *(void *)(a1 + 4++*(void *)(result + 32) = objc_opt_new();
  *(void *)(a1 + 4++*(void *)(result + 40) = objc_opt_new();
  *(void *)(a1 + 4++*(void *)(result + 48) = objc_opt_new();
  *(void *)(a1 + 4++*(void *)(result + 56) = objc_opt_new();
  *(void *)(a1 + 4++*(void *)(result + 64) = objc_opt_new();
  *(void *)(a1 + 472) = objc_opt_new();
  *(void *)(a1 + 480) = objc_opt_new();
  *(unsigned char *)(a1 + 4++*(void *)(result + 88) = 0;
  *(void *)(a1 + 4++*(void *)(result + 96) = objc_opt_new();
  *(void *)(a1 + 504) = objc_opt_new();
  *(unsigned char *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = -1;
  *(void *)(a1 + 536) = 0;
  *(_WORD *)(a1 + 544) = 0;
  sub_1000C7F88(buf);
  uint64_t v17 = (int *)(a1 + 392);
  char v18 = sub_10006EF84(*(uint64_t *)buf, "MaxHarvestCells", (_DWORD *)(a1 + 392));
  if (*(void *)v30) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v30);
  }
  if ((v18 & 1) == 0) {
    *uint64_t v17 = 500;
  }
  *(void *)(a1 + 384) = [*(id *)(a1 + 72) classifyingStoreForHarvester:1];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  uint64_t v19 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *v17;
    *(void *)uint64_t buf = 68289539;
    *(_WORD *)uint64_t v30 = 2082;
    *(void *)&v30[2] = "";
    __int16 v31 = 2050;
    uint64_t v32 = 1;
    __int16 v33 = 2049;
    uint64_t v34 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}lu}", buf, 0x26u);
  }
  *(void *)(a1 + 520) = 0;
  return a1;
}

void sub_100FA4094(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 72);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v1 + 376);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(v1 + 360);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA4104(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t a9)
{
  return sub_100FA3D88(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100FA4110(id *a1)
{
  a1[59] = 0;
  a1[62] = 0;

  a1[60] = 0;
  a1[63] = 0;
}

id sub_100FA4190(uint64_t a1)
{
  return [*(id *)(a1 + 384) count];
}

uint64_t sub_100FA4198(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v11);
  uint64_t v4 = (_OWORD *)(a1 + 280);
  long long v5 = unk_102482778;
  *uint64_t v4 = xmmword_102482768;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = unk_102482781;
  if (sub_100012960(a2, "Cell", v11)) {
    sub_1012B77D8((uint64_t)v4, (uint64_t)v11);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  unint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B7520();
    if (v10 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)uint64_t buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = 1;
    __int16 v18 = 2081;
    uint64_t v19 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v11);
}

void sub_100FA4320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA4340()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024827A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024827A0))
  {
    sub_100103240();
    if (sub_1001073D0())
    {
      sub_100103240();
      unsigned int v1 = (sub_1001073D0() >> 3) & 1;
    }
    else
    {
      LOBYTE(v1) = 0;
    }
    byte_102482798 = v1;
    __cxa_guard_release(&qword_1024827A0);
  }
  return byte_102482798;
}

void sub_100FA43B8(_Unwind_Exception *a1)
{
}

uint64_t sub_100FA43D0(uint64_t a1)
{
  id v9 = objc_alloc_init((Class)CLPCellWifiCollectionRequest);
  [v9 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
  id v2 = [*(id *)(a1 + 384) homeArchive];
  if ([v2 count])
  {
    [v2 overwritePrimaryObject:v9];
    BOOL v3 = [[CLHUploadRequest alloc] initWithArchive:v2];
    -[CLHUploadRequest setEndpoint:](v3, "setEndpoint:", [objc_msgSend(*(id *)(a1 + 80), "endpointSelector") cellWifiEndpoint]);
    [*(id *)(a1 + 80) submitRequest:v3];
  }
  id v4 = [*(id *)(a1 + 384) workArchive];
  if ([v4 count])
  {
    [v4 overwritePrimaryObject:v9];
    long long v5 = [[CLHUploadRequest alloc] initWithArchive:v4];
    -[CLHUploadRequest setEndpoint:](v5, "setEndpoint:", [objc_msgSend(*(id *)(a1 + 80), "endpointSelector") cellWifiEndpoint]);
    [*(id *)(a1 + 80) submitRequest:v5];
  }
  id v6 = [*(id *)(a1 + 384) mainArchive];
  if ([v6 count])
  {
    [v6 overwritePrimaryObject:v9];
    unint64_t v7 = [[CLHUploadRequest alloc] initWithArchive:v6];
    [-v7 setEndpoint:[objc_msgSend(objc_msgSend(*(id *)(a1 + 80), "endpointSelector"), "cellWifiEndpoint")];
    [*(id *)(a1 + 80) submitRequest:v7];
  }

  return _objc_release_x1();
}

uint64_t sub_100FA4558(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 4);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 2);
  return 1;
}

uint64_t sub_100FA45F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 4);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32);

  return v6(v4, v5, 2);
}

void sub_100FA4690(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  uint64_t v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68290051;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = 1;
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = a3;
    *(_WORD *)&buf[34] = 1040;
    *(_DWORD *)&buf[36] = 156;
    *(_WORD *)&buf[40] = 2097;
    *(void *)&buf[42] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"SimInstance\":%{public}u, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x32u);
  }
  if ((sub_100FA5348(a1) & 1) == 0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    unint64_t v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = 1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip from performCellHarvesting, isCellHarvesting not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    return;
  }
  CFArrayRef theArray = 0;
  if (a3 == 1)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    unint64_t v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 496);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"CellInfoSimTwo\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_10010032C(buf, *(void *)(a1 + 496));
    sub_100100090((id *)&theArray, (id *)buf);
    goto LABEL_22;
  }
  if (!a3)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    uint64_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 472);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&buf[20] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"CellInfoSimOne\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_10010032C(buf, *(void *)(a1 + 472));
    sub_100100090((id *)&theArray, (id *)buf);
LABEL_22:
    sub_1001005F8(buf);
  }
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  sub_10010DBC8(&v95, theArray, 1);
  uint64_t v92 = 0;
  unint64_t v93 = 0;
  unint64_t v94 = 0;
  uint64_t v89 = 0;
  unint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v10 = v95;
  for (uint64_t i = v96; v10 != i; v10 += 696)
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)v10;
    long long v12 = *(_OWORD *)(v10 + 16);
    long long v13 = *(_OWORD *)(v10 + 32);
    long long v14 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)&buf[60] = *(_OWORD *)(v10 + 60);
    *(_OWORD *)&uint8_t buf[32] = v13;
    *(_OWORD *)&unsigned char buf[48] = v14;
    *(_OWORD *)&uint8_t buf[16] = v12;
    int v108 = *(_DWORD *)(v10 + 80);
    char v110 = 0;
    uint64_t v111 = 0;
    __int16 v109 = 0;
    sub_10010F834(&v109, *(const void **)(v10 + 88), *(void *)(v10 + 96), (uint64_t)(*(void *)(v10 + 96) - *(void *)(v10 + 88)) >> 2);
    long long v112 = *(_OWORD *)(v10 + 112);
    long long v15 = *(_OWORD *)(v10 + 128);
    long long v16 = *(_OWORD *)(v10 + 144);
    long long v17 = *(_OWORD *)(v10 + 176);
    long long v115 = *(_OWORD *)(v10 + 160);
    long long v116 = v17;
    long long v113 = v15;
    long long v114 = v16;
    long long v18 = *(_OWORD *)(v10 + 192);
    long long v19 = *(_OWORD *)(v10 + 208);
    long long v20 = *(_OWORD *)(v10 + 240);
    long long v119 = *(_OWORD *)(v10 + 224);
    long long v120 = v20;
    long long v117 = v18;
    long long v118 = v19;
    long long v21 = *(_OWORD *)(v10 + 256);
    long long v22 = *(_OWORD *)(v10 + 272);
    long long v23 = *(_OWORD *)(v10 + 288);
    *(_OWORD *)((char *)v123 + 12) = *(_OWORD *)(v10 + 300);
    long long v122 = v22;
    v123[0] = v23;
    long long v121 = v21;
    if (*(char *)(v10 + 343) < 0)
    {
      sub_1000DC48C(&__p, *(void **)(v10 + 320), *(void *)(v10 + 328));
    }
    else
    {
      long long v24 = *(_OWORD *)(v10 + 320);
      uint64_t v125 = *(void *)(v10 + 336);
      long long __p = v24;
    }
    long long v25 = *(_OWORD *)(v10 + 344);
    long long v26 = *(_OWORD *)(v10 + 376);
    long long v127 = *(_OWORD *)(v10 + 360);
    long long v128 = v26;
    long long v126 = v25;
    long long v27 = *(_OWORD *)(v10 + 392);
    long long v28 = *(_OWORD *)(v10 + 408);
    long long v29 = *(_OWORD *)(v10 + 440);
    long long v131 = *(_OWORD *)(v10 + 424);
    long long v132 = v29;
    long long v129 = v27;
    long long v130 = v28;
    long long v30 = *(_OWORD *)(v10 + 456);
    long long v31 = *(_OWORD *)(v10 + 472);
    long long v32 = *(_OWORD *)(v10 + 488);
    int v136 = *(_DWORD *)(v10 + 504);
    long long v134 = v31;
    long long v135 = v32;
    long long v133 = v30;
    long long v33 = *(_OWORD *)(v10 + 512);
    long long v34 = *(_OWORD *)(v10 + 528);
    long long v35 = *(_OWORD *)(v10 + 560);
    long long v139 = *(_OWORD *)(v10 + 544);
    long long v140 = v35;
    long long v137 = v33;
    long long v138 = v34;
    long long v36 = *(_OWORD *)(v10 + 576);
    long long v37 = *(_OWORD *)(v10 + 592);
    long long v38 = *(_OWORD *)(v10 + 624);
    long long v143 = *(_OWORD *)(v10 + 608);
    long long v144 = v38;
    long long v141 = v36;
    long long v142 = v37;
    long long v39 = *(_OWORD *)(v10 + 640);
    long long v40 = *(_OWORD *)(v10 + 656);
    long long v41 = *(_OWORD *)(v10 + 672);
    int v148 = *(_DWORD *)(v10 + 688);
    long long v146 = v40;
    long long v147 = v41;
    long long v145 = v39;
    if (*(_DWORD *)&buf[4])
    {
      if (*(_DWORD *)&buf[4] == 1)
      {
        unint64_t v42 = v90;
        if (v90 >= v91)
        {
          uint64_t v43 = sub_1005630D0(&v89, (uint64_t)buf);
        }
        else
        {
          sub_1000FC2C4((uint64_t)&v91, v90, (uint64_t)buf);
          uint64_t v43 = v42 + 696;
        }
        unint64_t v90 = v43;
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307DD0);
        }
        int64_t v46 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long v99 = 68289539;
          int v100 = 0;
          __int16 v101 = 2082;
          long long v102 = "";
          __int16 v103 = 2050;
          uint64_t v104 = 1;
          __int16 v105 = 1025;
          LODWORD(v106) = *(_DWORD *)&buf[4];
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", v99, 0x22u);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
        }
        uint64_t v47 = qword_102419568;
        if (os_signpost_enabled((os_log_t)qword_102419568))
        {
          *(_DWORD *)long long v99 = 68289539;
          int v100 = 0;
          __int16 v101 = 2082;
          long long v102 = "";
          __int16 v103 = 2050;
          uint64_t v104 = 1;
          __int16 v105 = 1025;
          LODWORD(v106) = *(_DWORD *)&buf[4];
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected cell type", "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", v99, 0x22u);
        }
      }
    }
    else
    {
      unint64_t v44 = v93;
      if (v93 >= v94)
      {
        uint64_t v45 = sub_1005630D0(&v92, (uint64_t)buf);
      }
      else
      {
        sub_1000FC2C4((uint64_t)&v94, v93, (uint64_t)buf);
        uint64_t v45 = v44 + 696;
      }
      unint64_t v93 = v45;
    }
    if (SHIBYTE(v125) < 0) {
      operator delete((void *)__p);
    }
    if (v109)
    {
      char v110 = v109;
      operator delete(v109);
    }
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  unint64_t v48 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = 1875962727 * ((v93 - v92) >> 3);
    *(_WORD *)&unsigned char buf[24] = 1026;
    *(_DWORD *)&buf[26] = 1875962727 * ((v90 - v89) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim performCellHarvesting\", \"ServingCellsCount\":%{public}u, \"NeighborCellsCount\":%{public}u}", buf, 0x1Eu);
  }
  uint64_t v50 = v92;
  unint64_t v49 = v93;
  while (v50 != v49)
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)v50;
    long long v51 = *(_OWORD *)(v50 + 16);
    long long v52 = *(_OWORD *)(v50 + 32);
    long long v53 = *(_OWORD *)(v50 + 48);
    *(_OWORD *)&buf[60] = *(_OWORD *)(v50 + 60);
    *(_OWORD *)&uint8_t buf[32] = v52;
    *(_OWORD *)&unsigned char buf[48] = v53;
    *(_OWORD *)&uint8_t buf[16] = v51;
    int v108 = *(_DWORD *)(v50 + 80);
    char v110 = 0;
    uint64_t v111 = 0;
    __int16 v109 = 0;
    sub_10010F834(&v109, *(const void **)(v50 + 88), *(void *)(v50 + 96), (uint64_t)(*(void *)(v50 + 96) - *(void *)(v50 + 88)) >> 2);
    long long v112 = *(_OWORD *)(v50 + 112);
    long long v54 = *(_OWORD *)(v50 + 128);
    long long v55 = *(_OWORD *)(v50 + 144);
    long long v56 = *(_OWORD *)(v50 + 176);
    long long v115 = *(_OWORD *)(v50 + 160);
    long long v116 = v56;
    long long v113 = v54;
    long long v114 = v55;
    long long v57 = *(_OWORD *)(v50 + 192);
    long long v58 = *(_OWORD *)(v50 + 208);
    long long v59 = *(_OWORD *)(v50 + 240);
    long long v119 = *(_OWORD *)(v50 + 224);
    long long v120 = v59;
    long long v117 = v57;
    long long v118 = v58;
    long long v60 = *(_OWORD *)(v50 + 256);
    long long v61 = *(_OWORD *)(v50 + 272);
    long long v62 = *(_OWORD *)(v50 + 288);
    *(_OWORD *)((char *)v123 + 12) = *(_OWORD *)(v50 + 300);
    long long v122 = v61;
    v123[0] = v62;
    long long v121 = v60;
    if (*(char *)(v50 + 343) < 0)
    {
      sub_1000DC48C(&__p, *(void **)(v50 + 320), *(void *)(v50 + 328));
    }
    else
    {
      long long v63 = *(_OWORD *)(v50 + 320);
      uint64_t v125 = *(void *)(v50 + 336);
      long long __p = v63;
    }
    long long v64 = *(_OWORD *)(v50 + 344);
    long long v65 = *(_OWORD *)(v50 + 376);
    long long v127 = *(_OWORD *)(v50 + 360);
    long long v128 = v65;
    long long v126 = v64;
    long long v66 = *(_OWORD *)(v50 + 392);
    long long v67 = *(_OWORD *)(v50 + 408);
    long long v68 = *(_OWORD *)(v50 + 440);
    long long v131 = *(_OWORD *)(v50 + 424);
    long long v132 = v68;
    long long v129 = v66;
    long long v130 = v67;
    long long v69 = *(_OWORD *)(v50 + 456);
    long long v70 = *(_OWORD *)(v50 + 472);
    long long v71 = *(_OWORD *)(v50 + 488);
    int v136 = *(_DWORD *)(v50 + 504);
    long long v134 = v70;
    long long v135 = v71;
    long long v133 = v69;
    long long v72 = *(_OWORD *)(v50 + 512);
    long long v73 = *(_OWORD *)(v50 + 528);
    long long v74 = *(_OWORD *)(v50 + 560);
    long long v139 = *(_OWORD *)(v50 + 544);
    long long v140 = v74;
    long long v137 = v72;
    long long v138 = v73;
    long long v75 = *(_OWORD *)(v50 + 576);
    long long v76 = *(_OWORD *)(v50 + 592);
    long long v77 = *(_OWORD *)(v50 + 624);
    long long v143 = *(_OWORD *)(v50 + 608);
    long long v144 = v77;
    long long v141 = v75;
    long long v142 = v76;
    long long v78 = *(_OWORD *)(v50 + 640);
    long long v79 = *(_OWORD *)(v50 + 656);
    long long v80 = *(_OWORD *)(v50 + 672);
    int v148 = *(_DWORD *)(v50 + 688);
    long long v146 = v79;
    long long v147 = v80;
    long long v145 = v78;
    if (*(_DWORD *)&buf[8] >= 3u)
    {
      if (*(_DWORD *)&buf[8] == 9)
      {
        sub_100FA5F38(a1, a2, (uint64_t)buf, &v89, a3);
        goto LABEL_61;
      }
      if (*(_DWORD *)&buf[8] != 7)
      {
        if ((*(_DWORD *)&buf[8] - 3) > 2)
        {
          if (*(_DWORD *)&buf[8] == 10)
          {
            sub_100FA7E28(a1, (uint64_t)a2, (uint64_t)buf, &v89, a3);
          }
          else if (*(_DWORD *)&buf[8] == 6)
          {
            sub_100FA70F0(a1, (uint64_t)a2, (uint64_t)buf, &v89, a3);
          }
          else
          {
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            char v81 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
            {
              sub_10142D00C((uint64_t)buf);
              unsigned int v82 = v87;
              if (v88 < 0) {
                unsigned int v82 = (void **)v87[0];
              }
              *(_DWORD *)long long v99 = 68289539;
              int v100 = 0;
              __int16 v101 = 2082;
              long long v102 = "";
              __int16 v103 = 2050;
              uint64_t v104 = 1;
              __int16 v105 = 2081;
              char v106 = v82;
              _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", v99, 0x26u);
              if (v88 < 0) {
                operator delete(v87[0]);
              }
              if (qword_102419560 != -1) {
                dispatch_once(&qword_102419560, &stru_102307DD0);
              }
            }
            uint64_t v83 = qword_102419568;
            if (os_signpost_enabled((os_log_t)qword_102419568))
            {
              sub_10142D00C((uint64_t)buf);
              uint64_t v84 = v87;
              if (v88 < 0) {
                uint64_t v84 = (void **)v87[0];
              }
              *(_DWORD *)long long v99 = 68289539;
              int v100 = 0;
              __int16 v101 = 2082;
              long long v102 = "";
              __int16 v103 = 2050;
              uint64_t v104 = 1;
              __int16 v105 = 2081;
              char v106 = v84;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", v99, 0x26u);
              if (v88 < 0) {
                operator delete(v87[0]);
              }
            }
          }
        }
        else
        {
          sub_100FA67B4(a1, a2, (uint64_t)buf, &v89, a3);
        }
        goto LABEL_61;
      }
    }
    sub_100FA54DC(a1, a2, (uint64_t)buf, &v89, a3);
LABEL_61:
    if (SHIBYTE(v125) < 0) {
      operator delete((void *)__p);
    }
    if (v109)
    {
      char v110 = v109;
      operator delete(v109);
    }
    v50 += 696;
  }
  *(void *)uint64_t buf = &v89;
  sub_1000FA7C8((void ***)buf);
  *(void *)uint64_t buf = &v92;
  sub_1000FA7C8((void ***)buf);
  *(void *)uint64_t buf = &v95;
  sub_1000FA7C8((void ***)buf);
  sub_1001005F8(&theArray);
}

void sub_100FA5280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  a35 = &a19;
  sub_1000FA7C8((void ***)&a35);
  a35 = &a22;
  sub_1000FA7C8((void ***)&a35);
  a35 = &a25;
  sub_1000FA7C8((void ***)&a35);
  sub_1001005F8(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100FA5348(uint64_t a1)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352));
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 224))(*(void *)(a1 + 56));
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  uint64_t v3 = (v6 != 1) & ~v2;
  uint64_t v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68290307;
    int v8 = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2050;
    uint64_t v12 = 1;
    __int16 v13 = 1025;
    int v14 = (v6 != 1) & ~v2;
    __int16 v15 = 1025;
    int v16 = v2;
    __int16 v17 = 1040;
    int v18 = 4;
    __int16 v19 = 2097;
    long long v20 = &v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cellHarvestingAllowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"isOkToHarvestCells\":%{private}hhd, \"hasActiveOrHeldCalls\":%{private}hhd, \"transmitStatus\":%{private, location:CLTelephonyService_Type::CellTransmitStatus}.*P}", buf, 0x38u);
  }
  return v3;
}

void sub_100FA54DC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  int v8 = (unsigned int *)sub_1006E6690(a3);
  uint64_t v9 = *(void *)(a1 + 368);
  if (v9 && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 64))(v9))
  {
    (*(void (**)(void, unsigned int *, _OWORD *))(**(void **)(a1 + 352) + 168))(*(void *)(a1 + 352), v8, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    uint64_t v10 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "GSM local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      __int16 v74 = 0;
      long long v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellGSM(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v59);
      if (v59 != (char *)buf) {
        free(v59);
      }
    }
  }
  id v11 = objc_alloc_init((Class)CLPCellTowerLocation);
  id v12 = objc_alloc((Class)CLPLocation);
  long long v13 = a2[5];
  v72[4] = a2[4];
  v72[5] = v13;
  long long v14 = a2[3];
  v72[2] = a2[2];
  v72[3] = v14;
  *(_OWORD *)((char *)v73 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v15 = a2[8];
  long long v16 = a2[6];
  v72[7] = a2[7];
  v73[0] = v15;
  v72[6] = v16;
  long long v17 = a2[1];
  v72[0] = *a2;
  v72[1] = v17;
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
  v70[0] = *(_OWORD *)v18;
  long long v20 = *(_OWORD *)(v18 + 16);
  long long v19 = *(_OWORD *)(v18 + 32);
  long long v21 = *(_OWORD *)(v18 + 64);
  v70[3] = *(_OWORD *)(v18 + 48);
  v70[4] = v21;
  v70[1] = v20;
  long long v22 = *(_OWORD *)(v18 + 80);
  long long v23 = *(_OWORD *)(v18 + 96);
  long long v24 = *(_OWORD *)(v18 + 112);
  uint64_t v71 = *(void *)(v18 + 128);
  v70[6] = v23;
  v70[7] = v24;
  v70[5] = v22;
  v70[2] = v19;
  uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
  v68[0] = *(_OWORD *)v25;
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v27 = *(_OWORD *)(v25 + 32);
  long long v28 = *(_OWORD *)(v25 + 64);
  v68[3] = *(_OWORD *)(v25 + 48);
  v68[4] = v28;
  v68[1] = v26;
  _OWORD v68[2] = v27;
  long long v29 = *(_OWORD *)(v25 + 80);
  long long v30 = *(_OWORD *)(v25 + 96);
  long long v31 = *(_OWORD *)(v25 + 112);
  uint64_t v69 = *(void *)(v25 + 128);
  v68[6] = v30;
  v68[7] = v31;
  v68[5] = v29;
  uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
  v66[0] = *(_OWORD *)v32;
  long long v33 = *(_OWORD *)(v32 + 64);
  long long v35 = *(_OWORD *)(v32 + 16);
  long long v34 = *(_OWORD *)(v32 + 32);
  v66[3] = *(_OWORD *)(v32 + 48);
  v66[4] = v33;
  v66[1] = v35;
  v66[2] = v34;
  long long v37 = *(_OWORD *)(v32 + 96);
  long long v36 = *(_OWORD *)(v32 + 112);
  long long v38 = *(_OWORD *)(v32 + 80);
  uint64_t v67 = *(void *)(v32 + 128);
  v66[6] = v37;
  v66[7] = v36;
  v66[5] = v38;
  uint64_t v39 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
  id v40 = [v12 initWithDaemonLocation:v72 rawMotionActivity:v70 motionActivity:v68 dominantMotionActivity:v66 vehicleConnected:v39 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
  [v11 setLocation:v40];

  [v11 setMcc:*v8];
  [v11 setMnc:v8[1]];
  [v11 setLac:v8[2]];
  [v11 setCi:v8[3]];
  [v11 setArfcn:v8[4]];
  [v11 setPsc:v8[5]];
  [v11 setRat:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 56))(*(void *)(a1 + 352), a5));
  [v11 setTransmit:(*(uint64_t (**)(void))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352))];
  [v11 setRssi:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 120))(*(void *)(a1 + 352), a5));
  [v11 setOperatorName:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 88))(*(void *)(a1 + 352), a5));
  [v11 setServiceProviderName:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 104))(*(void *)(a1 + 352), a5));
  [v11 setIsLimitedService:((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352), a5) == 6)];
  double v41 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  if (v41 - *(double *)(a1 + 520) > 3600.0)
  {
    *(double *)(a1 + 520) = v41;
    [v11 setUniqueCount:1];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    unint64_t v42 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v77 = 0;
      __int16 v78 = 2082;
      long long v79 = "";
      __int16 v80 = 2050;
      uint64_t v81 = 1;
      __int16 v82 = 2050;
      uint64_t v83 = *(const char **)&v41;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique - GSM\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", buf, 0x26u);
    }
  }
  uint64_t v43 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 208))(*(void *)(a1 + 352));
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  unint64_t v44 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v77 = 0;
    __int16 v78 = 2082;
    long long v79 = "";
    __int16 v80 = 2050;
    uint64_t v81 = 1;
    __int16 v82 = 1026;
    LODWORD(v83) = v43;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for GSM\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", buf, 0x22u);
  }
  [v11 setHasWifiFallback:v43];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  uint64_t v45 = *(void **)(a1 + 464);
  id v46 = [v45 countByEnumeratingWithState:&v62 objects:v75 count:16];
  if (v46)
  {
    id v47 = v46;
    unint64_t v48 = 0;
    uint64_t v49 = *(void *)v63;
    do
    {
      for (uint64_t i = 0; i != v47; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v63 != v49) {
          objc_enumerationMutation(v45);
        }
        long long v51 = *(void **)(*((void *)&v62 + 1) + 8 * i);
        unsigned int v52 = [v11 mcc];
        if (v52 == [v51 mcc])
        {
          unsigned int v53 = [v11 mnc];
          if (v53 == [v51 mnc])
          {
            unsigned int v54 = [v11 lac];
            if (v54 == [v51 lac])
            {
              unsigned int v55 = [v11 ci];
              v48 += v55 == [v51 ci];
            }
          }
        }
      }
      id v47 = [v45 countByEnumeratingWithState:&v62 objects:v75 count:16];
    }
    while (v47);
  }
  else
  {
    unint64_t v48 = 0;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
    || v48 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
  {
    id v56 = sub_100FA95F8(a4, 0);
    [v11 setNeighborGroup:v56];

    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    sub_100D6B950(a1);
    uint64_t v57 = *(void *)(a1 + 352);
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472;
    v61[2] = sub_100FA9E30;
    v61[3] = &unk_102307D48;
    v61[4] = v11;
    v61[5] = a1;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v57 + 128))(v57, a5, v61);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    long long v58 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v77 = 0;
      __int16 v78 = 2082;
      long long v79 = "";
      __int16 v80 = 2050;
      uint64_t v81 = 1;
      __int16 v82 = 2081;
      uint64_t v83 = "SCDMA";
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }
}

void sub_100FA5F38(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = (unsigned int *)sub_1006E744C(a3);
  uint64_t v10 = *(void *)(a1 + 368);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 64))(v10))
  {
    (*(void (**)(void, unsigned int *, _OWORD *))(**(void **)(a1 + 352) + 176))(*(void *)(a1 + 352), v9, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    id v11 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "SCDMA local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      __int16 v73 = 0;
      long long v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellScdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v60);
      if (v60 != (char *)buf) {
        free(v60);
      }
    }
  }
  id v12 = objc_alloc_init((Class)CLPSCdmaCellTowerLocation);
  id v13 = objc_alloc((Class)CLPLocation);
  long long v14 = a2[5];
  v71[4] = a2[4];
  v71[5] = v14;
  long long v15 = a2[3];
  v71[2] = a2[2];
  v71[3] = v15;
  *(_OWORD *)((char *)v72 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v16 = a2[8];
  long long v17 = a2[6];
  v71[7] = a2[7];
  v72[0] = v16;
  v71[6] = v17;
  long long v18 = a2[1];
  v71[0] = *a2;
  v71[1] = v18;
  uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
  v69[0] = *(_OWORD *)v19;
  long long v21 = *(_OWORD *)(v19 + 16);
  long long v20 = *(_OWORD *)(v19 + 32);
  long long v22 = *(_OWORD *)(v19 + 64);
  v69[3] = *(_OWORD *)(v19 + 48);
  v69[4] = v22;
  v69[1] = v21;
  long long v23 = *(_OWORD *)(v19 + 80);
  long long v24 = *(_OWORD *)(v19 + 96);
  long long v25 = *(_OWORD *)(v19 + 112);
  uint64_t v70 = *(void *)(v19 + 128);
  v69[6] = v24;
  v69[7] = v25;
  v69[5] = v23;
  v69[2] = v20;
  uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
  v67[0] = *(_OWORD *)v26;
  long long v27 = *(_OWORD *)(v26 + 16);
  long long v28 = *(_OWORD *)(v26 + 32);
  long long v29 = *(_OWORD *)(v26 + 64);
  v67[3] = *(_OWORD *)(v26 + 48);
  v67[4] = v29;
  v67[1] = v27;
  v67[2] = v28;
  long long v30 = *(_OWORD *)(v26 + 80);
  long long v31 = *(_OWORD *)(v26 + 96);
  long long v32 = *(_OWORD *)(v26 + 112);
  uint64_t v68 = *(void *)(v26 + 128);
  v67[6] = v31;
  _DWORD v67[7] = v32;
  v67[5] = v30;
  uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
  v65[0] = *(_OWORD *)v33;
  long long v34 = *(_OWORD *)(v33 + 64);
  long long v36 = *(_OWORD *)(v33 + 16);
  long long v35 = *(_OWORD *)(v33 + 32);
  v65[3] = *(_OWORD *)(v33 + 48);
  v65[4] = v34;
  v65[1] = v36;
  v65[2] = v35;
  long long v38 = *(_OWORD *)(v33 + 96);
  long long v37 = *(_OWORD *)(v33 + 112);
  long long v39 = *(_OWORD *)(v33 + 80);
  uint64_t v66 = *(void *)(v33 + 128);
  unsigned char v65[6] = v38;
  v65[7] = v37;
  v65[5] = v39;
  uint64_t v40 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
  id v41 = [v13 initWithDaemonLocation:v71 rawMotionActivity:v69 motionActivity:v67 dominantMotionActivity:v65 vehicleConnected:v40 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
  [v12 setLocation:v41];

  [v12 setMcc:*v9];
  [v12 setMnc:v9[1]];
  [v12 setLac:v9[2]];
  [v12 setCi:v9[3]];
  [v12 setEcn0:v9[7]];
  [v12 setRscp:v9[6]];
  [v12 setRssi:(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 120))(*(void *)(a1 + 352), a5)];
  [v12 setOperatorName:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 88))(*(void *)(a1 + 352), a5));
  [v12 setServiceProviderName:(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 104))(*(void *)(a1 + 352), a5)];
  [v12 setIsLimitedService:((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352), a5) == 6)];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  unint64_t v42 = *(void **)(a1 + 456);
  id v43 = [v42 countByEnumeratingWithState:&v61 objects:v74 count:16];
  if (v43)
  {
    id v44 = v43;
    unint64_t v45 = 0;
    uint64_t v46 = *(void *)v62;
    do
    {
      for (uint64_t i = 0; i != v44; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v62 != v46) {
          objc_enumerationMutation(v42);
        }
        unint64_t v48 = *(void **)(*((void *)&v61 + 1) + 8 * i);
        unsigned int v49 = [v12 mcc];
        if (v49 == [v48 mcc])
        {
          unsigned int v50 = [v12 mnc];
          if (v50 == [v48 mnc])
          {
            unsigned int v51 = [v12 lac];
            if (v51 == [v48 lac])
            {
              unsigned int v52 = [v12 ci];
              v45 += v52 == [v48 ci];
            }
          }
        }
      }
      id v44 = [v42 countByEnumeratingWithState:&v61 objects:v74 count:16];
    }
    while (v44);
  }
  else
  {
    unint64_t v45 = 0;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
    || v45 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
  {
    id v53 = sub_100FA95F8(a4, 0);
    [v12 setNeighborGroup:v53];

    [*(id *)(a1 + 384) writeSecondaryObject:v12 collectedAt:[v12 location] toField:6];
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    sub_100D6B950(a1);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    uint64_t v54 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      int v76 = 0;
      __int16 v77 = 2082;
      __int16 v78 = "";
      __int16 v79 = 2050;
      uint64_t v80 = 1;
      __int16 v81 = 2081;
      __int16 v82 = "SCDMA";
      __int16 v83 = 2113;
      id v84 = v12;
      unsigned int v55 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, "
            "\"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}";
      id v56 = v54;
      os_log_type_t v57 = OS_LOG_TYPE_DEBUG;
      uint32_t v58 = 48;
LABEL_32:
      _os_log_impl((void *)&_mh_execute_header, v56, v57, v55, buf, v58);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    uint64_t v59 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v76 = 0;
      __int16 v77 = 2082;
      __int16 v78 = "";
      __int16 v79 = 2050;
      uint64_t v80 = 1;
      __int16 v81 = 2081;
      __int16 v82 = "SCDMA";
      unsigned int v55 = "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, locati"
            "on:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}";
      id v56 = v59;
      os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
      uint32_t v58 = 38;
      goto LABEL_32;
    }
  }
}

void sub_100FA67B4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = (double *)sub_1006E58D4(a3);
  id v11 = (double *)((char *)v10 + 268);
  if (*(_DWORD *)(a3 + 8) == 3)
  {
    uint64_t v12 = *(void *)(a1 + 368);
    if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 64))(v12))
    {
      (*(void (**)(void, double *, _OWORD *))(**(void **)(a1 + 352) + 192))(*(void *)(a1 + 352), v10, a2);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      id v13 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CDMA local harvesting not done", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307DD0);
        }
        __int16 v80 = 0;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellCdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v67);
        if (v67 != (char *)buf) {
          free(v67);
        }
      }
    }
  }
  id v14 = objc_alloc_init((Class)CLPCdmaCellTowerLocation);
  id v15 = objc_alloc((Class)CLPLocation);
  long long v16 = a2[5];
  v78[4] = a2[4];
  v78[5] = v16;
  long long v17 = a2[3];
  void v78[2] = a2[2];
  v78[3] = v17;
  *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v18 = a2[8];
  long long v19 = a2[6];
  v78[7] = a2[7];
  v79[0] = v18;
  v78[6] = v19;
  long long v20 = a2[1];
  v78[0] = *a2;
  v78[1] = v20;
  uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
  v76[0] = *(_OWORD *)v21;
  long long v23 = *(_OWORD *)(v21 + 16);
  long long v22 = *(_OWORD *)(v21 + 32);
  long long v24 = *(_OWORD *)(v21 + 64);
  v76[3] = *(_OWORD *)(v21 + 48);
  v76[4] = v24;
  v76[1] = v23;
  long long v25 = *(_OWORD *)(v21 + 80);
  long long v26 = *(_OWORD *)(v21 + 96);
  long long v27 = *(_OWORD *)(v21 + 112);
  uint64_t v77 = *(void *)(v21 + 128);
  v76[6] = v26;
  v76[7] = v27;
  v76[5] = v25;
  v76[2] = v22;
  uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
  v74[0] = *(_OWORD *)v28;
  long long v29 = *(_OWORD *)(v28 + 16);
  long long v30 = *(_OWORD *)(v28 + 32);
  long long v31 = *(_OWORD *)(v28 + 64);
  v74[3] = *(_OWORD *)(v28 + 48);
  v74[4] = v31;
  v74[1] = v29;
  v74[2] = v30;
  long long v32 = *(_OWORD *)(v28 + 80);
  long long v33 = *(_OWORD *)(v28 + 96);
  long long v34 = *(_OWORD *)(v28 + 112);
  uint64_t v75 = *(void *)(v28 + 128);
  v74[6] = v33;
  v74[7] = v34;
  v74[5] = v32;
  uint64_t v35 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
  v72[0] = *(_OWORD *)v35;
  long long v36 = *(_OWORD *)(v35 + 64);
  long long v38 = *(_OWORD *)(v35 + 16);
  long long v37 = *(_OWORD *)(v35 + 32);
  v72[3] = *(_OWORD *)(v35 + 48);
  v72[4] = v36;
  v72[1] = v38;
  _OWORD v72[2] = v37;
  long long v40 = *(_OWORD *)(v35 + 96);
  long long v39 = *(_OWORD *)(v35 + 112);
  long long v41 = *(_OWORD *)(v35 + 80);
  uint64_t v73 = *(void *)(v35 + 128);
  v72[6] = v40;
  v72[7] = v39;
  v72[5] = v41;
  uint64_t v42 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
  id v43 = [v15 initWithDaemonLocation:v78 rawMotionActivity:v76 motionActivity:v74 dominantMotionActivity:v72 vehicleConnected:v42 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
  [v14 setLocation:v43];

  [v14 setMcc:*(unsigned int *)v10];
  [v14 setMnc:*((unsigned int *)v10 + 58)];
  [v14 setSid:*((unsigned int *)v10 + 8)];
  [v14 setNid:*((unsigned int *)v10 + 9)];
  [v14 setBsid:*((unsigned int *)v10 + 11)];
  [v14 setBsLatitude:v10[9]];
  [v14 setBsLongitude:v10[10]];
  [v14 setZoneid:*((unsigned int *)v10 + 10)];
  uint64_t v46 = (unsigned int *)*((void *)v10 + 30);
  unint64_t v45 = (unsigned int *)(v10 + 30);
  id v44 = v46;
  if (*((char *)v45 + 23) >= 0) {
    id v47 = v45;
  }
  else {
    id v47 = v44;
  }
  [v14 setSectorid:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v47)];
  [v14 setSectorLatitude:*v11];
  [v14 setSectorLongitude:v11[1]];
  [v14 setBandclass:*(v45 - 48)];
  [v14 setRat:*(v45 - 4)];
  [v14 setCelltype:*(v45 - 3)];
  [v14 setPnoffset:*(v45 - 46)];
  [v14 setRscp:*(v45 - 45)];
  [v14 setEcn0:*(v45 - 44)];
  [v14 setChannel:*(v45 - 47)];
  [v14 setLtmOffset:v45[45]];
  [v14 setDayLightSavings:v45[46]];
  [v14 setOperatorName:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 88))(*(void *)(a1 + 352), a5));
  [v14 setServiceProviderName:(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 104))(*(void *)(a1 + 352), a5)];
  [v14 setIsLimitedService:((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352), a5) == 6)];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  unint64_t v48 = *(void **)(a1 + 448);
  id v49 = [v48 countByEnumeratingWithState:&v68 objects:v81 count:16];
  if (v49)
  {
    id v50 = v49;
    unint64_t v51 = 0;
    uint64_t v52 = *(void *)v69;
    do
    {
      for (uint64_t i = 0; i != v50; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v69 != v52) {
          objc_enumerationMutation(v48);
        }
        uint64_t v54 = *(void **)(*((void *)&v68 + 1) + 8 * i);
        unsigned int v55 = [v14 mcc];
        if (v55 == [v54 mcc])
        {
          unsigned int v56 = [v14 mnc];
          if (v56 == [v54 mnc])
          {
            unsigned int v57 = [v14 sid];
            if (v57 == [v54 sid])
            {
              unsigned int v58 = [v14 nid];
              if (v58 == [v54 nid])
              {
                unsigned int v59 = [v14 bsid];
                v51 += v59 == [v54 bsid];
              }
            }
          }
        }
      }
      id v50 = [v48 countByEnumeratingWithState:&v68 objects:v81 count:16];
    }
    while (v50);
  }
  else
  {
    unint64_t v51 = 0;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
    || v51 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
  {
    id v60 = sub_100FA95F8(a4, 0);
    [v14 setNeighborGroup:v60];

    [*(id *)(a1 + 384) writeSecondaryObject:v14 collectedAt:[v14 location] toField:4];
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    sub_100D6B950(a1);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    uint64_t v61 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      int v83 = 0;
      __int16 v84 = 2082;
      __int16 v85 = "";
      __int16 v86 = 2050;
      uint64_t v87 = 1;
      __int16 v88 = 2081;
      uint64_t v89 = "CDMA";
      __int16 v90 = 2113;
      id v91 = v14;
      long long v62 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, "
            "\"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}";
      long long v63 = v61;
      os_log_type_t v64 = OS_LOG_TYPE_DEBUG;
      uint32_t v65 = 48;
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v63, v64, v62, buf, v65);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    uint64_t v66 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v83 = 0;
      __int16 v84 = 2082;
      __int16 v85 = "";
      __int16 v86 = 2050;
      uint64_t v87 = 1;
      __int16 v88 = 2081;
      uint64_t v89 = "CDMA";
      long long v62 = "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, locati"
            "on:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}";
      long long v63 = v66;
      os_log_type_t v64 = OS_LOG_TYPE_DEFAULT;
      uint32_t v65 = 38;
      goto LABEL_37;
    }
  }
}

void sub_100FA70F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = (unsigned int *)sub_100117098(a3);
  uint64_t v10 = *(void *)(a1 + 368);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 64))(v10))
  {
    (*(void (**)(void, unsigned int *, uint64_t))(**(void **)(a1 + 352) + 184))(*(void *)(a1 + 352), v9, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    id v11 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "LTE local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      LOWORD(v++*(void *)(result + 88) = 0;
      long long v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellLTE(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v69);
      if (v69 != (char *)buf) {
        free(v69);
      }
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    long long v71 = a4;
    id v12 = objc_alloc_init((Class)CLPLteCellTowerLocation);
    id v13 = objc_alloc((Class)CLPLocation);
    long long v14 = *(_OWORD *)(a2 + 80);
    v85[4] = *(_OWORD *)(a2 + 64);
    v85[5] = v14;
    long long v15 = *(_OWORD *)(a2 + 48);
    v85[2] = *(_OWORD *)(a2 + 32);
    v85[3] = v15;
    *(_OWORD *)((char *)v86 + 12) = *(_OWORD *)(a2 + 140);
    long long v16 = *(_OWORD *)(a2 + 128);
    long long v17 = *(_OWORD *)(a2 + 96);
    v85[7] = *(_OWORD *)(a2 + 112);
    v86[0] = v16;
    v85[6] = v17;
    long long v18 = *(_OWORD *)(a2 + 16);
    v85[0] = *(_OWORD *)a2;
    v85[1] = v18;
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
    v83[0] = *(_OWORD *)v19;
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    long long v22 = *(_OWORD *)(v19 + 64);
    v83[3] = *(_OWORD *)(v19 + 48);
    v83[4] = v22;
    v83[1] = v21;
    long long v23 = *(_OWORD *)(v19 + 80);
    long long v24 = *(_OWORD *)(v19 + 96);
    long long v25 = *(_OWORD *)(v19 + 112);
    uint64_t v84 = *(void *)(v19 + 128);
    v83[6] = v24;
    v83[7] = v25;
    v83[5] = v23;
    v83[2] = v20;
    uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
    v81[0] = *(_OWORD *)v26;
    long long v27 = *(_OWORD *)(v26 + 16);
    long long v28 = *(_OWORD *)(v26 + 32);
    long long v29 = *(_OWORD *)(v26 + 64);
    v81[3] = *(_OWORD *)(v26 + 48);
    v81[4] = v29;
    v81[1] = v27;
    v81[2] = v28;
    long long v30 = *(_OWORD *)(v26 + 80);
    long long v31 = *(_OWORD *)(v26 + 96);
    long long v32 = *(_OWORD *)(v26 + 112);
    uint64_t v82 = *(void *)(v26 + 128);
    v81[6] = v31;
    v81[7] = v32;
    v81[5] = v30;
    uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
    v79[0] = *(_OWORD *)v33;
    long long v34 = *(_OWORD *)(v33 + 64);
    long long v36 = *(_OWORD *)(v33 + 16);
    long long v35 = *(_OWORD *)(v33 + 32);
    v79[3] = *(_OWORD *)(v33 + 48);
    v79[4] = v34;
    v79[1] = v36;
    _OWORD v79[2] = v35;
    long long v38 = *(_OWORD *)(v33 + 96);
    long long v37 = *(_OWORD *)(v33 + 112);
    long long v39 = *(_OWORD *)(v33 + 80);
    uint64_t v80 = *(void *)(v33 + 128);
    v79[6] = v38;
    v79[7] = v37;
    v79[5] = v39;
    uint64_t v40 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
    id v41 = [v13 initWithDaemonLocation:v85 rawMotionActivity:v83 motionActivity:v81 dominantMotionActivity:v79 vehicleConnected:v40 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
    [v12 setLocation:v41];

    if (a5 == 1)
    {
      uint64_t v42 = (id *)(a1 + 504);
    }
    else
    {
      if (a5)
      {
LABEL_22:
        [v12 setMcc:*v9];
        [v12 setMnc:v9[1]];
        [v12 setTac:v9[2]];
        [v12 setCi:v9[3]];
        [v12 setUarfcn:v9[4]];
        [v12 setPid:v9[5]];
        [v12 setBandwidth:v9[15]];
        if (*(unsigned char *)(a1 + 544))
        {
          double v46 = *(double *)(a2 + 76);
          double v47 = *(double *)(a1 + 536);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          double v48 = vabdd_f64(v46, v47);
          id v49 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134349056;
            *(double *)id v91 = v48;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#timingadvance,harvestCellLTE,timeBetweenTAandGps,%{public}.1f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            int v88 = 134349056;
            double v89 = v48;
            long long v70 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellLTE(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v70);
            if (v70 != (char *)buf) {
              free(v70);
            }
          }
          if (v48 <= 5.0) {
            [v12 setTimingAdvance:*(unsigned int *)(a1 + 528)];
          }
        }
        if ((v9[14] & 0x80000000) == 0) {
          [v12 setDeploymentType:];
        }
        [v12 setCsgIndication:v9[18]];
        [v12 setCsgId:v9[19]];
        [v12 setBandInfo:v9[6]];
        [v12 setCellLatitude:*((double *)v9 + 4)];
        [v12 setCellLongitude:*((double *)v9 + 5)];
        [v12 setRssi:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 120))(*(void *)(a1 + 352), a5));
        [v12 setOperatorName:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 88))(*(void *)(a1 + 352), a5));
        [v12 setServiceProviderName:(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 104))(*(void *)(a1 + 352), a5)];
        [v12 setIsLimitedService:((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352), a5) == 6)];
        double v50 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
        if (v50 - *(double *)(a1 + 520) > 3600.0)
        {
          *(double *)(a1 + 520) = v50;
          [v12 setUniqueCount:1];
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          unint64_t v51 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 68289538;
            *(_DWORD *)id v91 = 0;
            *(_WORD *)&v91[4] = 2082;
            *(void *)&v91[6] = "";
            __int16 v92 = 2050;
            uint64_t v93 = 1;
            __int16 v94 = 2050;
            uint64_t v95 = *(const char **)&v50;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique - LTE\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", buf, 0x26u);
          }
        }
        uint64_t v52 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 208))(*(void *)(a1 + 352));
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307DD0);
        }
        id v53 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)id v91 = 0;
          *(_WORD *)&v91[4] = 2082;
          *(void *)&v91[6] = "";
          __int16 v92 = 2050;
          uint64_t v93 = 1;
          __int16 v94 = 1026;
          LODWORD(v95) = v52;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for LTE\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", buf, 0x22u);
        }
        unsigned int v72 = a5;
        [v12 setHasWifiFallback:v52];
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        uint64_t v54 = *(void **)(a1 + 432);
        id v55 = [v54 countByEnumeratingWithState:&v75 objects:v87 count:16];
        if (v55)
        {
          id v56 = v55;
          unint64_t v57 = 0;
          uint64_t v58 = *(void *)v76;
          do
          {
            for (uint64_t i = 0; i != v56; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v76 != v58) {
                objc_enumerationMutation(v54);
              }
              id v60 = *(void **)(*((void *)&v75 + 1) + 8 * i);
              unsigned int v61 = [v12 mcc];
              if (v61 == [v60 mcc])
              {
                unsigned int v62 = [v12 mnc];
                if (v62 == [v60 mnc])
                {
                  unsigned int v63 = [v12 tac];
                  if (v63 == [v60 tac])
                  {
                    unsigned int v64 = [v12 ci];
                    v57 += v64 == [v60 ci];
                  }
                }
              }
            }
            id v56 = [v54 countByEnumeratingWithState:&v75 objects:v87 count:16];
          }
          while (v56);
        }
        else
        {
          unint64_t v57 = 0;
        }
        if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
          || v57 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
        {
          int v65 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 152))(*(void *)(a1 + 56));
          if (v65)
          {
            [v12 setPmax:v9[16]];
            [v12 setMaxThroughput:v9[17]];
          }
          id v66 = sub_100FA95F8(v71, v65);
          [v12 setNeighborGroup:v66];

          ++*(_DWORD *)(a1 + 208);
          *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
          sub_100D6B950(a1);
          uint64_t v67 = *(void *)(a1 + 352);
          v73[0] = _NSConcreteStackBlock;
          v73[1] = 3221225472;
          _OWORD v73[2] = sub_100FA9FB8;
          v73[3] = &unk_102307D98;
          v73[4] = v12;
          v73[5] = a1;
          char v74 = v65;
          (*(void (**)(uint64_t, void, void *))(*(void *)v67 + 128))(v67, v72, v73);
        }
        else
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          long long v68 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)id v91 = 0;
            *(_WORD *)&v91[4] = 2082;
            *(void *)&v91[6] = "";
            __int16 v92 = 2050;
            uint64_t v93 = 1;
            __int16 v94 = 2081;
            uint64_t v95 = "LTE";
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
          }
        }
        return;
      }
      uint64_t v42 = (id *)(a1 + 480);
    }
    id v44 = [*v42 objectForKey:@"kSimNidKey"];
    id v45 = [*v42 objectForKey:@"kSimCsgIdKey"];
    if (v44) {
      [v12 setNpnNwIdEf:v44];
    }
    if (v45) {
      [v12 setNpnCsgIdEf:v45];
    }
    goto LABEL_22;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  id v43 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    *(_DWORD *)id v91 = 0;
    *(_WORD *)&v91[4] = 2082;
    *(void *)&v91[6] = "";
    __int16 v92 = 2050;
    uint64_t v93 = 1;
    __int16 v94 = 2081;
    uint64_t v95 = "LTE";
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
  }
}

void sub_100FA7E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = (unsigned int *)sub_1006E8278(a3);
  uint64_t v10 = *(void *)(a1 + 368);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 64))(v10))
  {
    (*(void (**)(void, unsigned int *, uint64_t))(**(void **)(a1 + 352) + 200))(*(void *)(a1 + 352), v9, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102307DD0);
    }
    id v11 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NR local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      LOWORD(v++*(void *)(result + 88) = 0;
      long long v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellNR(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v69);
      if (v69 != (char *)buf) {
        free(v69);
      }
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    long long v71 = a4;
    id v12 = objc_alloc_init((Class)CLPNRCellTowerLocation);
    id v13 = objc_alloc((Class)CLPLocation);
    long long v14 = *(_OWORD *)(a2 + 80);
    v85[4] = *(_OWORD *)(a2 + 64);
    v85[5] = v14;
    long long v15 = *(_OWORD *)(a2 + 48);
    v85[2] = *(_OWORD *)(a2 + 32);
    v85[3] = v15;
    *(_OWORD *)((char *)v86 + 12) = *(_OWORD *)(a2 + 140);
    long long v16 = *(_OWORD *)(a2 + 128);
    long long v17 = *(_OWORD *)(a2 + 96);
    v85[7] = *(_OWORD *)(a2 + 112);
    v86[0] = v16;
    v85[6] = v17;
    long long v18 = *(_OWORD *)(a2 + 16);
    v85[0] = *(_OWORD *)a2;
    v85[1] = v18;
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
    v83[0] = *(_OWORD *)v19;
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    long long v22 = *(_OWORD *)(v19 + 64);
    v83[3] = *(_OWORD *)(v19 + 48);
    v83[4] = v22;
    v83[1] = v21;
    long long v23 = *(_OWORD *)(v19 + 80);
    long long v24 = *(_OWORD *)(v19 + 96);
    long long v25 = *(_OWORD *)(v19 + 112);
    uint64_t v84 = *(void *)(v19 + 128);
    v83[6] = v24;
    v83[7] = v25;
    v83[5] = v23;
    v83[2] = v20;
    uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
    v81[0] = *(_OWORD *)v26;
    long long v27 = *(_OWORD *)(v26 + 16);
    long long v28 = *(_OWORD *)(v26 + 32);
    long long v29 = *(_OWORD *)(v26 + 64);
    v81[3] = *(_OWORD *)(v26 + 48);
    v81[4] = v29;
    v81[1] = v27;
    v81[2] = v28;
    long long v30 = *(_OWORD *)(v26 + 80);
    long long v31 = *(_OWORD *)(v26 + 96);
    long long v32 = *(_OWORD *)(v26 + 112);
    uint64_t v82 = *(void *)(v26 + 128);
    v81[6] = v31;
    v81[7] = v32;
    v81[5] = v30;
    uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
    v79[0] = *(_OWORD *)v33;
    long long v34 = *(_OWORD *)(v33 + 64);
    long long v36 = *(_OWORD *)(v33 + 16);
    long long v35 = *(_OWORD *)(v33 + 32);
    v79[3] = *(_OWORD *)(v33 + 48);
    v79[4] = v34;
    v79[1] = v36;
    _OWORD v79[2] = v35;
    long long v38 = *(_OWORD *)(v33 + 96);
    long long v37 = *(_OWORD *)(v33 + 112);
    long long v39 = *(_OWORD *)(v33 + 80);
    uint64_t v80 = *(void *)(v33 + 128);
    v79[6] = v38;
    v79[7] = v37;
    v79[5] = v39;
    uint64_t v40 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
    id v41 = [v13 initWithDaemonLocation:v85 rawMotionActivity:v83 motionActivity:v81 dominantMotionActivity:v79 vehicleConnected:v40 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
    [v12 setLocation:v41];

    if (a5 == 1)
    {
      uint64_t v42 = (id *)(a1 + 504);
    }
    else
    {
      if (a5)
      {
LABEL_22:
        [v12 setMcc:*v9];
        [v12 setMnc:v9[1]];
        [v12 setTac:v9[2]];
        [v12 setCi:*((void *)v9 + 2)];
        [v12 setNrarfcn:v9[6]];
        [v12 setPid:v9[7]];
        [v12 setScs:v9[16]];
        [v12 setGscn:v9[17]];
        [v12 setBandInfo:v9[8]];
        [v12 setCellLatitude:*((double *)v9 + 5)];
        [v12 setCellLongitude:*((double *)v9 + 6)];
        [v12 setBandwidth:v9[18]];
        if (*(unsigned char *)(a1 + 545))
        {
          double v46 = *(double *)(a2 + 76);
          double v47 = *(double *)(a1 + 536);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          double v48 = vabdd_f64(v46, v47);
          id v49 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134349056;
            *(double *)id v91 = v48;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#timingadvance,harvestCellNR,timeBetweenTAandGps,%{public}.1f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            int v88 = 134349056;
            double v89 = v48;
            long long v70 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCell::harvestCellNR(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &, SimInstance)", "%s\n", v70);
            if (v70 != (char *)buf) {
              free(v70);
            }
          }
          if (v48 <= 5.0) {
            [v12 setTimingAdvance:*(unsigned int *)(a1 + 532)];
          }
        }
        [v12 setRssi:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 120))(*(void *)(a1 + 352), a5));
        [v12 setOperatorName:(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 88))(*(void *)(a1 + 352), a5)];
        [v12 setServiceProviderName:(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 104))(*(void *)(a1 + 352), a5)];
        [v12 setIsLimitedService:((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352), a5) == 6)];
        double v50 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
        if (v50 - *(double *)(a1 + 520) > 3600.0)
        {
          *(double *)(a1 + 520) = v50;
          [v12 setUniqueCount:1];
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          unint64_t v51 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 68289538;
            *(_DWORD *)id v91 = 0;
            *(_WORD *)&v91[4] = 2082;
            *(void *)&v91[6] = "";
            __int16 v92 = 2050;
            uint64_t v93 = 1;
            __int16 v94 = 2050;
            uint64_t v95 = *(const char **)&v50;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique - NR\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", buf, 0x26u);
          }
        }
        uint64_t v52 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 208))(*(void *)(a1 + 352));
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307DD0);
        }
        id v53 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)id v91 = 0;
          *(_WORD *)&v91[4] = 2082;
          *(void *)&v91[6] = "";
          __int16 v92 = 2050;
          uint64_t v93 = 1;
          __int16 v94 = 1026;
          LODWORD(v95) = v52;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for NR\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", buf, 0x22u);
        }
        unsigned int v72 = a5;
        [v12 setHasWifiFallback:v52];
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        uint64_t v54 = *(void **)(a1 + 440);
        id v55 = [v54 countByEnumeratingWithState:&v75 objects:v87 count:16];
        if (v55)
        {
          id v56 = v55;
          unint64_t v57 = 0;
          uint64_t v58 = *(void *)v76;
          do
          {
            for (uint64_t i = 0; i != v56; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v76 != v58) {
                objc_enumerationMutation(v54);
              }
              id v60 = *(void **)(*((void *)&v75 + 1) + 8 * i);
              unsigned int v61 = [v12 mcc];
              if (v61 == [v60 mcc])
              {
                unsigned int v62 = [v12 mnc];
                if (v62 == [v60 mnc])
                {
                  unsigned int v63 = [v12 tac];
                  if (v63 == [v60 tac])
                  {
                    id v64 = [v12 ci];
                    v57 += v64 == [v60 ci];
                  }
                }
              }
            }
            id v56 = [v54 countByEnumeratingWithState:&v75 objects:v87 count:16];
          }
          while (v56);
        }
        else
        {
          unint64_t v57 = 0;
        }
        if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
          || v57 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
        {
          int v65 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 152))(*(void *)(a1 + 56));
          if (v65)
          {
            [v12 setPmax:v9[19]];
            [v12 setMaxThroughput:v9[20]];
          }
          id v66 = sub_100FA95F8(v71, v65);
          [v12 setNeighborGroup:v66];

          ++*(_DWORD *)(a1 + 208);
          *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
          sub_100D6B950(a1);
          uint64_t v67 = *(void *)(a1 + 352);
          v73[0] = _NSConcreteStackBlock;
          v73[1] = 3221225472;
          _OWORD v73[2] = sub_100FAA490;
          v73[3] = &unk_102307D98;
          v73[4] = v12;
          v73[5] = a1;
          char v74 = v65;
          (*(void (**)(uint64_t, void, void *))(*(void *)v67 + 128))(v67, v72, v73);
        }
        else
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          long long v68 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t buf = 68289539;
            *(_DWORD *)id v91 = 0;
            *(_WORD *)&v91[4] = 2082;
            *(void *)&v91[6] = "";
            __int16 v92 = 2050;
            uint64_t v93 = 1;
            __int16 v94 = 2081;
            uint64_t v95 = "NR5G";
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
          }
        }
        return;
      }
      uint64_t v42 = (id *)(a1 + 480);
    }
    id v44 = [*v42 objectForKey:@"kSimNidKey"];
    id v45 = [*v42 objectForKey:@"kSimCsgIdKey"];
    if (v44) {
      [v12 setNpnNwIdEf:v44];
    }
    if (v45) {
      [v12 setNpnCsgIdEf:v45];
    }
    goto LABEL_22;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  id v43 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    *(_DWORD *)id v91 = 0;
    *(_WORD *)&v91[4] = 2082;
    *(void *)&v91[6] = "";
    __int16 v92 = 2050;
    uint64_t v93 = 1;
    __int16 v94 = 2081;
    uint64_t v95 = "NR";
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
  }
}

void sub_100FA8B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5 = *(double *)(a4 + 76);
  double v6 = *(double *)(a1 + 400);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102307DD0);
  }
  double v7 = v5 - v6;
  int v8 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B77B0(a1 + 280);
    uint64_t v9 = *(void *)(a1 + 424);
    int v10 = *(unsigned __int8 *)(a1 + 417);
    uint64_t buf = 68290306;
    __int16 v31 = 2082;
    long long v32 = "";
    __int16 v33 = 2050;
    *(void *)long long v34 = 1;
    *(_WORD *)&char v34[8] = 2050;
    *(double *)&v34[10] = v7;
    __int16 v35 = 2050;
    uint64_t v36 = v11;
    __int16 v37 = 2114;
    uint64_t v38 = v9;
    __int16 v39 = 1026;
    int v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onGpsNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{public}.09f\", \"harvestInterval_s\":\"%{public}.09f\", \"inUseSubscriptions\":%{public, location:escape_only}@, \"harvestingDisabledDueToInvalidInUseSubsriptionsCount\":%{public}hhd}", (uint8_t *)&buf, 0x40u);
  }
  if (!*(unsigned char *)(a1 + 417))
  {
    sub_1012B77B0(a1 + 280);
    if (v7 >= v12)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      id v13 = *(void **)(a1 + 424);
      id v14 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
      if (v14)
      {
        id v16 = v14;
        uint64_t v17 = *(void *)v26;
        *(void *)&long long v15 = 68289538;
        long long v23 = v15;
        do
        {
          long long v18 = 0;
          do
          {
            if (*(void *)v26 != v17) {
              objc_enumerationMutation(v13);
            }
            uint64_t v19 = sub_100554F14([*(id *)(*((void *)&v25 + 1) + 8 * (void)v18) intValue:v23]);
            unsigned int v20 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 32))(*(void *)(a1 + 352), v19);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
            long long v21 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
            {
              uint64_t buf = v23;
              __int16 v31 = 2082;
              long long v32 = "";
              __int16 v33 = 1026;
              *(_DWORD *)long long v34 = v19;
              *(_WORD *)&v34[4] = 1026;
              *(_DWORD *)&v34[6] = v20;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onGpsNotification harvesting\", \"SimInstamce\":%{public}u, \"RegistrationStatus\":%{public}u}", (uint8_t *)&buf, 0x1Eu);
            }
            if (v20 <= 7)
            {
              if (((1 << v20) & 0xF0) != 0)
              {
                sub_100FA4690(a1, (_OWORD *)a4, v19);
              }
              else if (((1 << v20) & 5) != 0)
              {
                if (qword_102419560 != -1) {
                  dispatch_once(&qword_102419560, &stru_102307DD0);
                }
                long long v22 = qword_102419568;
                if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t buf = v23;
                  __int16 v31 = 2082;
                  long long v32 = "";
                  __int16 v33 = 1026;
                  *(_DWORD *)long long v34 = v19;
                  *(_WORD *)&v34[4] = 2050;
                  *(void *)&v34[6] = 1;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#msim onGpsNotification not harvesting since the device is in a transient state.\", \"SimInstance\":%{public}u, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x22u);
                }
              }
              else
              {
                sub_100FA8F18(a1, (_OWORD *)a4, v19);
              }
            }
            long long v18 = (char *)v18 + 1;
          }
          while (v16 != v18);
          id v16 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
        }
        while (v16);
      }
    }
  }
}

void sub_100FA8F18(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (sub_100FA5348(a1))
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 296))(*(void *)(a1 + 56)))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      uint64_t v6 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289282;
        __int16 v55 = 2082;
        id v56 = "";
        __int16 v57 = 2050;
        uint64_t v58 = 1;
        double v7 = "{\"msg%{public}.0s\":\"OOS skip harvesting - airplane mode enabled\", \"subHarvester\":%{public, location:C"
             "LSubHarvesterIdentifier}lld}";
        int v8 = v6;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
        uint32_t v10 = 28;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&buf, v10);
      }
    }
    else
    {
      id v11 = objc_alloc_init((Class)CLPCellOutOfServiceInfo);
      id v12 = objc_alloc((Class)CLPLocation);
      long long v13 = a2[5];
      v52[4] = a2[4];
      v52[5] = v13;
      long long v14 = a2[3];
      void v52[2] = a2[2];
      v52[3] = v14;
      *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)((char *)a2 + 140);
      long long v15 = a2[8];
      long long v16 = a2[6];
      v52[7] = a2[7];
      v53[0] = v15;
      unsigned char v52[6] = v16;
      long long v17 = a2[1];
      v52[0] = *a2;
      v52[1] = v17;
      uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
      v50[0] = *(_OWORD *)v18;
      long long v20 = *(_OWORD *)(v18 + 16);
      long long v19 = *(_OWORD *)(v18 + 32);
      long long v21 = *(_OWORD *)(v18 + 64);
      void v50[3] = *(_OWORD *)(v18 + 48);
      v50[4] = v21;
      v50[1] = v20;
      long long v22 = *(_OWORD *)(v18 + 80);
      long long v23 = *(_OWORD *)(v18 + 96);
      long long v24 = *(_OWORD *)(v18 + 112);
      uint64_t v51 = *(void *)(v18 + 128);
      void v50[6] = v23;
      v50[7] = v24;
      v50[5] = v22;
      v50[2] = v19;
      uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
      v48[0] = *(_OWORD *)v25;
      long long v26 = *(_OWORD *)(v25 + 16);
      long long v27 = *(_OWORD *)(v25 + 32);
      long long v28 = *(_OWORD *)(v25 + 64);
      v48[3] = *(_OWORD *)(v25 + 48);
      v48[4] = v28;
      v48[1] = v26;
      v48[2] = v27;
      long long v29 = *(_OWORD *)(v25 + 80);
      long long v30 = *(_OWORD *)(v25 + 96);
      long long v31 = *(_OWORD *)(v25 + 112);
      uint64_t v49 = *(void *)(v25 + 128);
      unsigned char v48[6] = v30;
      v48[7] = v31;
      v48[5] = v29;
      uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
      v46[0] = *(_OWORD *)v32;
      long long v33 = *(_OWORD *)(v32 + 64);
      long long v35 = *(_OWORD *)(v32 + 16);
      long long v34 = *(_OWORD *)(v32 + 32);
      v46[3] = *(_OWORD *)(v32 + 48);
      v46[4] = v33;
      v46[1] = v35;
      v46[2] = v34;
      long long v37 = *(_OWORD *)(v32 + 96);
      long long v36 = *(_OWORD *)(v32 + 112);
      long long v38 = *(_OWORD *)(v32 + 80);
      uint64_t v47 = *(void *)(v32 + 128);
      unsigned char v46[6] = v37;
      v46[7] = v36;
      v46[5] = v38;
      uint64_t v39 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
      id v40 = [v12 initWithDaemonLocation:v52 rawMotionActivity:v50 motionActivity:v48 dominantMotionActivity:v46 vehicleConnected:v39 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
      [v11 setLocation:v40];

      [v11 setServiceProviderName:((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 352) + 104))(*(void *)(a1 + 352), a3));
      double v41 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
      if (v41 - *(double *)(a1 + 520) > 3600.0)
      {
        *(double *)(a1 + 520) = v41;
        [v11 setUniqueCount:1];
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102307DD0);
        }
        uint64_t v42 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          uint64_t buf = 68289538;
          __int16 v55 = 2082;
          id v56 = "";
          __int16 v57 = 2050;
          uint64_t v58 = 1;
          __int16 v59 = 2050;
          id v60 = *(const char **)&v41;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Marked Unique OOS\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"at\":\"%{public}f\"}", (uint8_t *)&buf, 0x26u);
        }
      }
      uint64_t v43 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 208))(*(void *)(a1 + 352));
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      id v44 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        uint64_t buf = 68289538;
        __int16 v55 = 2082;
        id v56 = "";
        __int16 v57 = 2050;
        uint64_t v58 = 1;
        __int16 v59 = 1026;
        LODWORD(v60) = v43;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WiFi Fallback for OOS\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"hasWiFiFallback\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
      [v11 setHasWifiFallback:v43];
      [*(id *)(a1 + 384) writeSecondaryObject:v11 collectedAt:[v11 location] toField:7];
      ++*(_DWORD *)(a1 + 208);
      *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102307DD0);
      }
      uint64_t v45 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        uint64_t buf = 68289795;
        __int16 v55 = 2082;
        id v56 = "";
        __int16 v57 = 2050;
        uint64_t v58 = 1;
        __int16 v59 = 2081;
        id v60 = "OutOfService";
        __int16 v61 = 2113;
        id v62 = v11;
        double v7 = "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld,"
             " \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}";
        int v8 = v45;
        os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
        uint32_t v10 = 48;
        goto LABEL_20;
      }
    }
  }
}

id sub_100FA9554(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v4 = *(void **)(a1 + 72);

  return _[v4 pruneSecondaryDataOlderThan:1 forHarvester:v3];
}

id sub_100FA95EC(uint64_t a1)
{
  return [*(id *)(a1 + 72) clearDataForHarvester:1];
}

id sub_100FA95F8(uint64_t *a1, int a2)
{
  id v3 = objc_alloc_init((Class)CLPCellNeighborsGroup);
  uint64_t v4 = *a1;
  uint64_t v89 = a1[1];
  id v90 = v3;
  if (*a1 != v89)
  {
    do
    {
      v93[0] = *(_OWORD *)v4;
      long long v5 = *(_OWORD *)(v4 + 16);
      long long v6 = *(_OWORD *)(v4 + 32);
      long long v7 = *(_OWORD *)(v4 + 48);
      *(_OWORD *)&v94[12] = *(_OWORD *)(v4 + 60);
      v93[2] = v6;
      *(_OWORD *)__int16 v94 = v7;
      v93[1] = v5;
      int v95 = *(_DWORD *)(v4 + 80);
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      uint64_t v96 = 0;
      sub_10010F834(&v96, *(const void **)(v4 + 88), *(void *)(v4 + 96), (uint64_t)(*(void *)(v4 + 96) - *(void *)(v4 + 88)) >> 2);
      long long v99 = *(_OWORD *)(v4 + 112);
      long long v8 = *(_OWORD *)(v4 + 128);
      long long v9 = *(_OWORD *)(v4 + 144);
      long long v10 = *(_OWORD *)(v4 + 176);
      long long v102 = *(_OWORD *)(v4 + 160);
      long long v103 = v10;
      long long v100 = v8;
      long long v101 = v9;
      long long v11 = *(_OWORD *)(v4 + 192);
      long long v12 = *(_OWORD *)(v4 + 208);
      long long v13 = *(_OWORD *)(v4 + 240);
      long long v106 = *(_OWORD *)(v4 + 224);
      long long v107 = v13;
      long long v104 = v11;
      long long v105 = v12;
      long long v14 = *(_OWORD *)(v4 + 256);
      long long v15 = *(_OWORD *)(v4 + 272);
      long long v16 = *(_OWORD *)(v4 + 288);
      *(_OWORD *)((char *)v110 + 12) = *(_OWORD *)(v4 + 300);
      long long v109 = v15;
      v110[0] = v16;
      long long v108 = v14;
      if (*(char *)(v4 + 343) < 0)
      {
        sub_1000DC48C(&__p, *(void **)(v4 + 320), *(void *)(v4 + 328));
      }
      else
      {
        long long v17 = *(_OWORD *)(v4 + 320);
        uint64_t v112 = *(void *)(v4 + 336);
        long long __p = v17;
      }
      long long v18 = *(_OWORD *)(v4 + 344);
      long long v19 = *(_OWORD *)(v4 + 376);
      long long v114 = *(_OWORD *)(v4 + 360);
      long long v115 = v19;
      long long v113 = v18;
      long long v20 = *(_OWORD *)(v4 + 392);
      long long v21 = *(_OWORD *)(v4 + 408);
      long long v22 = *(_OWORD *)(v4 + 440);
      long long v118 = *(_OWORD *)(v4 + 424);
      long long v119 = v22;
      long long v116 = v20;
      long long v117 = v21;
      long long v23 = *(_OWORD *)(v4 + 456);
      long long v24 = *(_OWORD *)(v4 + 472);
      long long v25 = *(_OWORD *)(v4 + 488);
      int v123 = *(_DWORD *)(v4 + 504);
      long long v121 = v24;
      long long v122 = v25;
      long long v120 = v23;
      long long v26 = *(_OWORD *)(v4 + 512);
      long long v27 = *(_OWORD *)(v4 + 528);
      long long v28 = *(_OWORD *)(v4 + 560);
      long long v126 = *(_OWORD *)(v4 + 544);
      long long v127 = v28;
      long long v124 = v26;
      long long v125 = v27;
      long long v29 = *(_OWORD *)(v4 + 576);
      long long v30 = *(_OWORD *)(v4 + 592);
      long long v31 = *(_OWORD *)(v4 + 624);
      long long v130 = *(_OWORD *)(v4 + 608);
      long long v131 = v31;
      long long v128 = v29;
      long long v129 = v30;
      long long v32 = *(_OWORD *)(v4 + 640);
      long long v33 = *(_OWORD *)(v4 + 656);
      long long v34 = *(_OWORD *)(v4 + 672);
      int v135 = *(_DWORD *)(v4 + 688);
      long long v133 = v33;
      long long v134 = v34;
      long long v132 = v32;
      if (DWORD1(v93[0]) != 1)
      {
        sub_101A990BC();
        abort_report_np();
        __break(1u);
      }
      if (DWORD2(v93[0]) < 3) {
        goto LABEL_9;
      }
      if (DWORD2(v93[0]) == 9)
      {
        double v41 = (unsigned int *)sub_1006E744C((uint64_t)v93);
        uint64_t v43 = v41[4];
        uint64_t v42 = v41[5];
        uint64_t v44 = v41[6];
        uint64_t v45 = v41[7];
        id v46 = objc_alloc_init((Class)CLPCellNeighbor);
        [v46 setEcn0:v45];
        [v46 setPsc:v42];
        [v46 setRscp:v44];
        [v46 setRssi:0xFFFFFFFFLL];
        [v46 setUarfcn:v43];
        [v90 addScdmaNeighbors:v46];

        goto LABEL_10;
      }
      if (DWORD2(v93[0]) == 7)
      {
LABEL_9:
        long long v35 = (unsigned int *)sub_1006E6690((uint64_t)v93);
        uint64_t v37 = v35[4];
        uint64_t v36 = v35[5];
        uint64_t v38 = v35[6];
        uint64_t v39 = v35[7];
        id v40 = objc_alloc_init((Class)CLPCellNeighbor);
        [v40 setEcn0:v39];
        [v40 setPsc:v36];
        [v40 setRscp:v38];
        [v40 setRssi:0xFFFFFFFFLL];
        [v40 setUarfcn:v37];
        [v90 addGsmNeighbors:v40];
      }
      else
      {
        if ((DWORD2(v93[0]) - 3) <= 2)
        {
          uint64_t v47 = sub_1006E58D4((uint64_t)v93);
          *(_DWORD *)uint64_t buf = *(_DWORD *)v47;
          memset(v138, 0, 24);
          sub_10010F834(v138, *(const void **)(v47 + 8), *(void *)(v47 + 16), (uint64_t)(*(void *)(v47 + 16) - *(void *)(v47 + 8)) >> 2);
          *(_OWORD *)&v138[24] = *(_OWORD *)(v47 + 32);
          long long v48 = *(_OWORD *)(v47 + 48);
          long long v49 = *(_OWORD *)(v47 + 64);
          long long v50 = *(_OWORD *)(v47 + 96);
          long long v141 = *(_OWORD *)(v47 + 80);
          long long v142 = v50;
          long long v139 = v48;
          long long v140 = v49;
          long long v51 = *(_OWORD *)(v47 + 112);
          long long v52 = *(_OWORD *)(v47 + 128);
          long long v53 = *(_OWORD *)(v47 + 160);
          long long v145 = *(_OWORD *)(v47 + 144);
          long long v146 = v53;
          long long v143 = v51;
          long long v144 = v52;
          long long v54 = *(_OWORD *)(v47 + 176);
          long long v55 = *(_OWORD *)(v47 + 192);
          long long v56 = *(_OWORD *)(v47 + 208);
          *(_OWORD *)((char *)v149 + 12) = *(_OWORD *)(v47 + 220);
          long long v148 = v55;
          v149[0] = v56;
          long long v147 = v54;
          if (*(char *)(v47 + 263) < 0)
          {
            sub_1000DC48C(&v150, *(void **)(v47 + 240), *(void *)(v47 + 248));
          }
          else
          {
            long long v57 = *(_OWORD *)(v47 + 240);
            uint64_t v151 = *(void *)(v47 + 256);
            long long v150 = v57;
          }
          long long v64 = *(_OWORD *)(v47 + 264);
          long long v65 = *(_OWORD *)(v47 + 296);
          long long v153 = *(_OWORD *)(v47 + 280);
          long long v154 = v65;
          long long v152 = v64;
          long long v66 = *(_OWORD *)(v47 + 312);
          long long v67 = *(_OWORD *)(v47 + 328);
          long long v68 = *(_OWORD *)(v47 + 360);
          long long v157 = *(_OWORD *)(v47 + 344);
          long long v158 = v68;
          long long v155 = v66;
          long long v156 = v67;
          long long v69 = *(_OWORD *)(v47 + 376);
          long long v70 = *(_OWORD *)(v47 + 392);
          long long v71 = *(_OWORD *)(v47 + 408);
          int v162 = *(_DWORD *)(v47 + 424);
          long long v160 = v70;
          long long v161 = v71;
          long long v159 = v69;
          id v72 = objc_alloc_init((Class)CLPCdmaCellNeighbor);
          [v72 setEcn0:v140];
          [v72 setPilotPhase:0xFFFFFFFFLL];
          [v72 setPnoffset:DWORD2(v139)];
          [v72 setRscp:HIDWORD(v139)];
          [v72 setChannel:DWORD1(v139)];
          [v90 addCdmaNeighbors:v72];

          if (SHIBYTE(v151) < 0) {
            operator delete((void *)v150);
          }
          uint64_t v73 = *(void **)v138;
          if (!*(void *)v138) {
            goto LABEL_10;
          }
          *(void *)&v138[8] = *(void *)v138;
          goto LABEL_28;
        }
        if (DWORD2(v93[0]) == 10)
        {
          char v74 = (unsigned int *)sub_1006E8278((uint64_t)v93);
          uint64_t v76 = v74[6];
          uint64_t v75 = v74[7];
          uint64_t v77 = v74[14];
          uint64_t v78 = v74[15];
          unsigned int v85 = v74[20];
          unsigned int v87 = v74[18];
          id v79 = objc_alloc_init((Class)CLPNRCellNeighbor);
          [v79 setEcn0:v78];
          [v79 setPid:v75];
          [v79 setRscp:v77];
          [v79 setRssi:0xFFFFFFFFLL];
          [v79 setNrarfcn:v76];
          [v79 setBandwidth:v87];
          if (a2) {
            [v79 setMaxThroughput:v85];
          }
          [v90 addNrNeighbors:v79];

          goto LABEL_10;
        }
        if (DWORD2(v93[0]) != 6)
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102307DD0);
          }
          uint64_t v80 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
          {
            sub_10142D00C((uint64_t)v93);
            __int16 v81 = v91;
            if (v92 < 0) {
              __int16 v81 = (void **)v91[0];
            }
            *(_DWORD *)uint64_t buf = 68289539;
            int v137 = 0;
            *(_WORD *)long long v138 = 2082;
            *(void *)&v138[2] = "";
            *(_WORD *)&v138[10] = 2050;
            *(void *)&v138[12] = 1;
            *(_WORD *)&v138[20] = 2081;
            *(void *)&v138[22] = v81;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
            if (v92 < 0) {
              operator delete(v91[0]);
            }
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102307DD0);
            }
          }
          uint64_t v82 = qword_102419568;
          if (!os_signpost_enabled((os_log_t)qword_102419568)) {
            goto LABEL_10;
          }
          sub_10142D00C((uint64_t)v93);
          int v83 = v91;
          if (v92 < 0) {
            int v83 = (void **)v91[0];
          }
          *(_DWORD *)uint64_t buf = 68289539;
          int v137 = 0;
          *(_WORD *)long long v138 = 2082;
          *(void *)&v138[2] = "";
          *(_WORD *)&v138[10] = 2050;
          *(void *)&v138[12] = 1;
          *(_WORD *)&v138[20] = 2081;
          *(void *)&v138[22] = v83;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v82, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
          if ((v92 & 0x80000000) == 0) {
            goto LABEL_10;
          }
          uint64_t v73 = v91[0];
LABEL_28:
          operator delete(v73);
          goto LABEL_10;
        }
        uint64_t v58 = (unsigned int *)sub_100117098((uint64_t)v93);
        uint64_t v60 = v58[4];
        uint64_t v59 = v58[5];
        uint64_t v61 = v58[12];
        uint64_t v62 = v58[13];
        unsigned int v86 = v58[15];
        id v63 = objc_alloc_init((Class)CLPLteCellNeighbor);
        [v63 setEcn0:v62];
        [v63 setPid:v59];
        [v63 setRscp:v61];
        [v63 setRssi:0xFFFFFFFFLL];
        [v63 setUarfcn:v60];
        [v63 setBandwidth:v86];
        [v90 addLteNeighbors:v63];
      }
LABEL_10:
      if (SHIBYTE(v112) < 0) {
        operator delete((void *)__p);
      }
      if (v96)
      {
        uint64_t v97 = v96;
        operator delete(v96);
      }
      v4 += 696;
    }
    while (v4 != v89);
  }
  return v90;
}